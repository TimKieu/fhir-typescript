// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit

import * as fhir from '../fhir.js';

// @ts-ignore
import { RelatedClaimRelationshipCodings, RelatedClaimRelationshipCodingType,} from '../fhirValueSets/RelatedClaimRelationshipCodings.js';
// @ts-ignore
import { RelatedClaimRelationshipCodes,  RelatedClaimRelationshipCodeType } from '../fhirValueSets/RelatedClaimRelationshipCodes.js';
// @ts-ignore
import { PayeetypeCodings, PayeetypeCodingType,} from '../fhirValueSets/PayeetypeCodings.js';
// @ts-ignore
import { PayeetypeCodes,  PayeetypeCodeType } from '../fhirValueSets/PayeetypeCodes.js';
// @ts-ignore
import { ClaimCareteamroleCodings, ClaimCareteamroleCodingType,} from '../fhirValueSets/ClaimCareteamroleCodings.js';
// @ts-ignore
import { ClaimCareteamroleCodes,  ClaimCareteamroleCodeType } from '../fhirValueSets/ClaimCareteamroleCodes.js';
// @ts-ignore
import { ProviderQualificationCodings, ProviderQualificationCodingType,} from '../fhirValueSets/ProviderQualificationCodings.js';
// @ts-ignore
import { ProviderQualificationCodes,  ProviderQualificationCodeType } from '../fhirValueSets/ProviderQualificationCodes.js';
// @ts-ignore
import { ClaimInformationcategoryCodings, ClaimInformationcategoryCodingType,} from '../fhirValueSets/ClaimInformationcategoryCodings.js';
// @ts-ignore
import { ClaimInformationcategoryCodes,  ClaimInformationcategoryCodeType } from '../fhirValueSets/ClaimInformationcategoryCodes.js';
// @ts-ignore
import { ClaimExceptionCodings, ClaimExceptionCodingType,} from '../fhirValueSets/ClaimExceptionCodings.js';
// @ts-ignore
import { ClaimExceptionCodes,  ClaimExceptionCodeType } from '../fhirValueSets/ClaimExceptionCodes.js';
// @ts-ignore
import { MissingToothReasonCodings, MissingToothReasonCodingType,} from '../fhirValueSets/MissingToothReasonCodings.js';
// @ts-ignore
import { MissingToothReasonCodes,  MissingToothReasonCodeType } from '../fhirValueSets/MissingToothReasonCodes.js';
// @ts-ignore
import { ExDiagnosistypeCodings, ExDiagnosistypeCodingType,} from '../fhirValueSets/ExDiagnosistypeCodings.js';
// @ts-ignore
import { ExDiagnosistypeCodes,  ExDiagnosistypeCodeType } from '../fhirValueSets/ExDiagnosistypeCodes.js';
// @ts-ignore
import { ExDiagnosisOnAdmissionCodings, ExDiagnosisOnAdmissionCodingType,} from '../fhirValueSets/ExDiagnosisOnAdmissionCodings.js';
// @ts-ignore
import { ExDiagnosisOnAdmissionCodes,  ExDiagnosisOnAdmissionCodeType } from '../fhirValueSets/ExDiagnosisOnAdmissionCodes.js';
// @ts-ignore
import { ExDiagnosisrelatedgroupCodings, ExDiagnosisrelatedgroupCodingType,} from '../fhirValueSets/ExDiagnosisrelatedgroupCodings.js';
// @ts-ignore
import { ExDiagnosisrelatedgroupCodes,  ExDiagnosisrelatedgroupCodeType } from '../fhirValueSets/ExDiagnosisrelatedgroupCodes.js';
// @ts-ignore
import { ExProcedureTypeCodings, ExProcedureTypeCodingType,} from '../fhirValueSets/ExProcedureTypeCodings.js';
// @ts-ignore
import { ExProcedureTypeCodes,  ExProcedureTypeCodeType } from '../fhirValueSets/ExProcedureTypeCodes.js';
// @ts-ignore
import { V3ActIncidentCodings, V3ActIncidentCodingType,} from '../fhirValueSets/V3ActIncidentCodings.js';
// @ts-ignore
import { V3ActIncidentCodes,  V3ActIncidentCodeType } from '../fhirValueSets/V3ActIncidentCodes.js';
// @ts-ignore
import { AdjudicationCodings, AdjudicationCodingType,} from '../fhirValueSets/AdjudicationCodings.js';
// @ts-ignore
import { AdjudicationCodes,  AdjudicationCodeType } from '../fhirValueSets/AdjudicationCodes.js';
// @ts-ignore
import { AdjudicationReasonCodings, AdjudicationReasonCodingType,} from '../fhirValueSets/AdjudicationReasonCodings.js';
// @ts-ignore
import { AdjudicationReasonCodes,  AdjudicationReasonCodeType } from '../fhirValueSets/AdjudicationReasonCodes.js';
// @ts-ignore
import { ExRevenueCenterCodings, ExRevenueCenterCodingType,} from '../fhirValueSets/ExRevenueCenterCodings.js';
// @ts-ignore
import { ExRevenueCenterCodes,  ExRevenueCenterCodeType } from '../fhirValueSets/ExRevenueCenterCodes.js';
// @ts-ignore
import { ExBenefitcategoryCodings, ExBenefitcategoryCodingType,} from '../fhirValueSets/ExBenefitcategoryCodings.js';
// @ts-ignore
import { ExBenefitcategoryCodes,  ExBenefitcategoryCodeType } from '../fhirValueSets/ExBenefitcategoryCodes.js';
// @ts-ignore
import { ServiceUsclsCodings, ServiceUsclsCodingType,} from '../fhirValueSets/ServiceUsclsCodings.js';
// @ts-ignore
import { ServiceUsclsCodes,  ServiceUsclsCodeType } from '../fhirValueSets/ServiceUsclsCodes.js';
// @ts-ignore
import { ClaimModifiersCodings, ClaimModifiersCodingType,} from '../fhirValueSets/ClaimModifiersCodings.js';
// @ts-ignore
import { ClaimModifiersCodes,  ClaimModifiersCodeType } from '../fhirValueSets/ClaimModifiersCodes.js';
// @ts-ignore
import { ExProgramCodings, ExProgramCodingType,} from '../fhirValueSets/ExProgramCodings.js';
// @ts-ignore
import { ExProgramCodes,  ExProgramCodeType } from '../fhirValueSets/ExProgramCodes.js';
// @ts-ignore
import { ToothCodings, ToothCodingType,} from '../fhirValueSets/ToothCodings.js';
// @ts-ignore
import { ToothCodes,  ToothCodeType } from '../fhirValueSets/ToothCodes.js';
// @ts-ignore
import { SurfaceCodings, SurfaceCodingType,} from '../fhirValueSets/SurfaceCodings.js';
// @ts-ignore
import { SurfaceCodes,  SurfaceCodeType } from '../fhirValueSets/SurfaceCodes.js';
// @ts-ignore
import { ExPaymenttypeCodings, ExPaymenttypeCodingType,} from '../fhirValueSets/ExPaymenttypeCodings.js';
// @ts-ignore
import { ExPaymenttypeCodes,  ExPaymenttypeCodeType } from '../fhirValueSets/ExPaymenttypeCodes.js';
// @ts-ignore
import { PaymentAdjustmentReasonCodings, PaymentAdjustmentReasonCodingType,} from '../fhirValueSets/PaymentAdjustmentReasonCodings.js';
// @ts-ignore
import { PaymentAdjustmentReasonCodes,  PaymentAdjustmentReasonCodeType } from '../fhirValueSets/PaymentAdjustmentReasonCodes.js';
// @ts-ignore
import { NoteTypeCodings, NoteTypeCodingType,} from '../fhirValueSets/NoteTypeCodings.js';
// @ts-ignore
import { NoteTypeCodes,  NoteTypeCodeType } from '../fhirValueSets/NoteTypeCodes.js';
// @ts-ignore
import { LanguagesCodings, LanguagesCodingType,} from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { LanguagesCodes,  LanguagesCodeType } from '../fhirValueSets/LanguagesCodes.js';
// @ts-ignore
import { BenefitTypeCodings, BenefitTypeCodingType,} from '../fhirValueSets/BenefitTypeCodings.js';
// @ts-ignore
import { BenefitTypeCodes,  BenefitTypeCodeType } from '../fhirValueSets/BenefitTypeCodes.js';
// @ts-ignore
import { BenefitNetworkCodings, BenefitNetworkCodingType,} from '../fhirValueSets/BenefitNetworkCodings.js';
// @ts-ignore
import { BenefitNetworkCodes,  BenefitNetworkCodeType } from '../fhirValueSets/BenefitNetworkCodes.js';
// @ts-ignore
import { BenefitUnitCodings, BenefitUnitCodingType,} from '../fhirValueSets/BenefitUnitCodings.js';
// @ts-ignore
import { BenefitUnitCodes,  BenefitUnitCodeType } from '../fhirValueSets/BenefitUnitCodes.js';
// @ts-ignore
import { BenefitTermCodings, BenefitTermCodingType,} from '../fhirValueSets/BenefitTermCodings.js';
// @ts-ignore
import { BenefitTermCodes,  BenefitTermCodeType } from '../fhirValueSets/BenefitTermCodes.js';
// @ts-ignore
import { ExplanationofbenefitStatusCodings, ExplanationofbenefitStatusCodingType,} from '../fhirValueSets/ExplanationofbenefitStatusCodings.js';
// @ts-ignore
import { ExplanationofbenefitStatusCodes,  ExplanationofbenefitStatusCodeType } from '../fhirValueSets/ExplanationofbenefitStatusCodes.js';
// @ts-ignore
import { ClaimTypeCodings, ClaimTypeCodingType,} from '../fhirValueSets/ClaimTypeCodings.js';
// @ts-ignore
import { ClaimTypeCodes,  ClaimTypeCodeType } from '../fhirValueSets/ClaimTypeCodes.js';
// @ts-ignore
import { ClaimSubtypeCodings, ClaimSubtypeCodingType,} from '../fhirValueSets/ClaimSubtypeCodings.js';
// @ts-ignore
import { ClaimSubtypeCodes,  ClaimSubtypeCodeType } from '../fhirValueSets/ClaimSubtypeCodes.js';
// @ts-ignore
import { ClaimUseCodings, ClaimUseCodingType,} from '../fhirValueSets/ClaimUseCodings.js';
// @ts-ignore
import { ClaimUseCodes,  ClaimUseCodeType } from '../fhirValueSets/ClaimUseCodes.js';
// @ts-ignore
import { FundsreserveCodings, FundsreserveCodingType,} from '../fhirValueSets/FundsreserveCodings.js';
// @ts-ignore
import { FundsreserveCodes,  FundsreserveCodeType } from '../fhirValueSets/FundsreserveCodes.js';
// @ts-ignore
import { RemittanceOutcomeCodings, RemittanceOutcomeCodingType,} from '../fhirValueSets/RemittanceOutcomeCodings.js';
// @ts-ignore
import { RemittanceOutcomeCodes,  RemittanceOutcomeCodeType } from '../fhirValueSets/RemittanceOutcomeCodes.js';
// @ts-ignore
import { FormsCodings, FormsCodingType,} from '../fhirValueSets/FormsCodings.js';
// @ts-ignore
import { FormsCodes,  FormsCodeType } from '../fhirValueSets/FormsCodes.js';
/**
 * Valid arguments for the ExplanationOfBenefitRelated type.
 */
export interface ExplanationOfBenefitRelatedArgs extends fhir.BackboneElementArgs {
  /**
   * Reference to a related claim.
   */
  claim?: fhir.ReferenceArgs|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  relationship?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example, Property/Casualty insurer claim number or Workers Compensation case number.
   */
  reference?: fhir.IdentifierArgs|undefined;
}

/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitRelated';
  /**
   * Reference to a related claim.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * For example, Property/Casualty insurer claim number or Workers Compensation case number.
   */
  public reference?: fhir.Identifier|undefined;
  /**
   * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitRelatedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['claim']) { this.claim = new fhir.Reference(source.claim); }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship); }
    if (source['reference']) { this.reference = new fhir.Identifier(source.reference); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.related' }
    if (this["claim"]) { issues.push(...this.claim.doModelValidation(expression+'.claim')); }
    if (this["relationship"]) { issues.push(...this.relationship.doModelValidation(expression+'.relationship')); }
    if (this["reference"]) { issues.push(...this.reference.doModelValidation(expression+'.reference')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitPayee type.
 */
export interface ExplanationOfBenefitPayeeArgs extends fhir.BackboneElementArgs {
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: fhir.ReferenceArgs|undefined;
}

/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitPayee';
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  public party?: fhir.Reference|undefined;
  /**
   * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitPayeeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['party']) { this.party = new fhir.Reference(source.party); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.payee' }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["party"]) { issues.push(...this.party.doModelValidation(expression+'.party')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitCareTeam type.
 */
export interface ExplanationOfBenefitCareTeamArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * Member of the team who provided the product or service.
   */
  provider: fhir.ReferenceArgs|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.responsible
   */
  _responsible?:fhir.FhirElementArgs;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  role?: fhir.CodeableConceptArgs|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  qualification?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitCareTeam';
  /**
   * A number to uniquely identify care team entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * Member of the team who provided the product or service.
   */
  public provider: fhir.Reference|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  public responsible?: fhir.FhirBoolean|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  public qualification?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitCareTeamArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider); }
    else { this.provider = null; }
    if (source['responsible']) { this.responsible = new fhir.FhirBoolean({value: source.responsible}); }
    if (source['_responsible']) {
      if (this.responsible) { this.responsible.addExtendedProperties(source._responsible!); }
      else { this.responsible = new fhir.FhirBoolean(source._responsible as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }
    if (source['qualification']) { this.qualification = new fhir.CodeableConcept(source.qualification); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.careTeam' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.careTeam.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['provider']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property provider fhir: ExplanationOfBenefit.careTeam.provider:Reference', expression: [expression] });
    }
    if (this["provider"]) { issues.push(...this.provider.doModelValidation(expression+'.provider')); }
    if (this["responsible"]) { issues.push(...this.responsible.doModelValidation(expression+'.responsible')); }
    if (this["role"]) { issues.push(...this.role.doModelValidation(expression+'.role')); }
    if (this["qualification"]) { issues.push(...this.qualification.doModelValidation(expression+'.qualification')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitSupportingInfo type.
 */
export interface ExplanationOfBenefitSupportingInfoArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * This may contain a category for the local bill type codes.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timing?: fhir.FhirDate|fhir.Period|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingDate?: fhir.FhirDate|string|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  value?: fhir.FhirBoolean|fhir.FhirString|fhir.Quantity|fhir.Attachment|fhir.Reference|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: fhir.AttachmentArgs|undefined;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: fhir.ReferenceArgs|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: fhir.CodingArgs|undefined;
}

/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitSupportingInfo';
  /**
   * A number to uniquely identify supporting information entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * This may contain a category for the local bill type codes.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timing?: (fhir.FhirDate|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.timing[x]
   */
  protected static readonly _fts_timingIsChoice:true = true;
  /**
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public value?: (fhir.FhirBoolean|fhir.FhirString|fhir.Quantity|fhir.Attachment|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  public reason?: fhir.Coding|undefined;
  /**
   * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitSupportingInfoArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['timing']) { this.timing = source.timing; }
    else if (source['timingDate']) { this.timing = new fhir.FhirDate({value: source.timingDate}); }
    else if (source['timingPeriod']) { this.timing = new fhir.Period(source.timingPeriod); }
    if (source['value']) { this.value = source.value; }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueQuantity']) { this.value = new fhir.Quantity(source.valueQuantity); }
    else if (source['valueAttachment']) { this.value = new fhir.Attachment(source.valueAttachment); }
    else if (source['valueReference']) { this.value = new fhir.Reference(source.valueReference); }
    if (source['reason']) { this.reason = new fhir.Coding(source.reason); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.supportingInfo' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.supportingInfo.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: ExplanationOfBenefit.supportingInfo.category:CodeableConcept', expression: [expression] });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (this["code"]) { issues.push(...this.code.doModelValidation(expression+'.code')); }
    if (this["reason"]) { issues.push(...this.reason.doModelValidation(expression+'.reason')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitDiagnosis type.
 */
export interface ExplanationOfBenefitDiagnosisArgs extends fhir.BackboneElementArgs {
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.diagnosis.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosis?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: fhir.ReferenceArgs|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  packageCode?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitDiagnosis';
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosis: (fhir.CodeableConcept|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.diagnosis.diagnosis[x]
   */
  protected static readonly _fts_diagnosisIsChoice:true = true;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  public type: fhir.CodeableConcept[];
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  public onAdmission?: fhir.CodeableConcept|undefined;
  /**
   * For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  public packageCode?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitDiagnosisArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis; }
    else if (source['diagnosisCodeableConcept']) { this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept); }
    else if (source['diagnosisReference']) { this.diagnosis = new fhir.Reference(source.diagnosisReference); }
    else { this.diagnosis = null; }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    else { this.type = []; }
    if (source['onAdmission']) { this.onAdmission = new fhir.CodeableConcept(source.onAdmission); }
    if (source['packageCode']) { this.packageCode = new fhir.CodeableConcept(source.packageCode); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.diagnosis' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.diagnosis.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['diagnosis']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property diagnosis fhir: ExplanationOfBenefit.diagnosis.diagnosis[x]:', expression: [expression] });
    }
    if (this["type"]) { this.type.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.type[${i}]`)); }) }
    if (this["onAdmission"]) { issues.push(...this.onAdmission.doModelValidation(expression+'.onAdmission')); }
    if (this["packageCode"]) { issues.push(...this.packageCode.doModelValidation(expression+'.packageCode')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitProcedure type.
 */
export interface ExplanationOfBenefitProcedureArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.procedure.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * When the condition was observed or the relative ranking.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.procedure.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedure?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: fhir.ReferenceArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitProcedure';
  /**
   * A number to uniquely identify procedure entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * When the condition was observed or the relative ranking.
   */
  public type: fhir.CodeableConcept[];
  /**
   * Date and optionally time the procedure was performed.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedure: (fhir.CodeableConcept|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.procedure.procedure[x]
   */
  protected static readonly _fts_procedureIsChoice:true = true;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitProcedureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    else { this.type = []; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['procedure']) { this.procedure = source.procedure; }
    else if (source['procedureCodeableConcept']) { this.procedure = new fhir.CodeableConcept(source.procedureCodeableConcept); }
    else if (source['procedureReference']) { this.procedure = new fhir.Reference(source.procedureReference); }
    else { this.procedure = null; }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.procedure' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.procedure.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["type"]) { this.type.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.type[${i}]`)); }) }
    if (this["date"]) { issues.push(...this.date.doModelValidation(expression+'.date')); }
    if (!this['procedure']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property procedure fhir: ExplanationOfBenefit.procedure.procedure[x]:', expression: [expression] });
    }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitInsurance type.
 */
export interface ExplanationOfBenefitInsuranceArgs extends fhir.BackboneElementArgs {
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.insurance.focal
   */
  _focal?:fhir.FhirElementArgs;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.ReferenceArgs|null;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.insurance.preAuthRef
   */
  _preAuthRef?:(fhir.FhirElementArgs|null)[];
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitInsurance';
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  public focal: fhir.FhirBoolean|null;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  public preAuthRef: fhir.FhirString[];
  /**
   * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitInsuranceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['focal']) { this.focal = new fhir.FhirBoolean({value: source.focal}); }
    else { this.focal = null; }
    if (source['_focal']) {
      if (this.focal) { this.focal.addExtendedProperties(source._focal!); }
      else { this.focal = new fhir.FhirBoolean(source._focal as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage); }
    else { this.coverage = null; }
    if (source['preAuthRef']) { this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({value: x})); }
    else { this.preAuthRef = []; }
    if (source['_preAuthRef']) {
      source._preAuthRef.forEach((x,i) => {
        if (this.preAuthRef.length >= i) { if (x) { this.preAuthRef[i].addExtendedProperties(x); } }
        else { if (x) { this.preAuthRef.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.insurance' }
    if (!this['focal']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property focal fhir: ExplanationOfBenefit.insurance.focal:boolean', expression: [expression] });
    }
    if (this["focal"]) { issues.push(...this.focal.doModelValidation(expression+'.focal')); }
    if (!this['coverage']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property coverage fhir: ExplanationOfBenefit.insurance.coverage:Reference', expression: [expression] });
    }
    if (this["coverage"]) { issues.push(...this.coverage.doModelValidation(expression+'.coverage')); }
    if (this["preAuthRef"]) { this.preAuthRef.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.preAuthRef[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitAccident type.
 */
export interface ExplanationOfBenefitAccidentArgs extends fhir.BackboneElementArgs {
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.accident.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The physical location of the accident event.
   */
  location?: fhir.Address|fhir.Reference|undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: fhir.AddressArgs|undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: fhir.ReferenceArgs|undefined;
}

/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitAccident';
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  public date?: fhir.FhirDate|undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The physical location of the accident event.
   */
  public location?: (fhir.Address|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.accident.location[x]
   */
  protected static readonly _fts_locationIsChoice:true = true;
  /**
   * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitAccidentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['date']) { this.date = new fhir.FhirDate({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDate(source._date as Partial<fhir.FhirDateArgs>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['location']) { this.location = source.location; }
    else if (source['locationAddress']) { this.location = new fhir.Address(source.locationAddress); }
    else if (source['locationReference']) { this.location = new fhir.Reference(source.locationReference); }
  }
  /**
   * Extensible-bound Value Set for type (ExplanationOfBenefit.accident.type)
   */
  public static get typeExtensibleCodings():V3ActIncidentCodingType {
    return V3ActIncidentCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.accident' }
    if (this["date"]) { issues.push(...this.date.doModelValidation(expression+'.date')); }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitItemAdjudication type.
 */
export interface ExplanationOfBenefitItemAdjudicationArgs extends fhir.BackboneElementArgs {
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * For example, may indicate that the funds for this benefit type have been exhausted.
   */
  reason?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example, amount submitted, eligible amount, co-payment, and benefit payable.
   */
  amount?: fhir.MoneyArgs|undefined;
  /**
   * For example: eligible percentage or co-payment percentage.
   */
  value?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.adjudication.value
   */
  _value?:fhir.FhirElementArgs;
}

/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitItemAdjudication';
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * For example, may indicate that the funds for this benefit type have been exhausted.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * For example, amount submitted, eligible amount, co-payment, and benefit payable.
   */
  public amount?: fhir.Money|undefined;
  /**
   * For example: eligible percentage or co-payment percentage.
   */
  public value?: fhir.FhirDecimal|undefined;
  /**
   * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitItemAdjudicationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['reason']) { this.reason = new fhir.CodeableConcept(source.reason); }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    if (source['value']) { this.value = new fhir.FhirDecimal({value: source.value}); }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirDecimal(source._value as Partial<fhir.FhirDecimalArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.item.adjudication' }
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: ExplanationOfBenefit.item.adjudication.category:CodeableConcept', expression: [expression] });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (this["reason"]) { issues.push(...this.reason.doModelValidation(expression+'.reason')); }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation(expression+'.amount')); }
    if (this["value"]) { issues.push(...this.value.doModelValidation(expression+'.value')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitItemDetailSubDetail type.
 */
export interface ExplanationOfBenefitItemDetailSubDetailArgs extends fhir.BackboneElementArgs {
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.CodeableConceptArgs|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.noteNumber
   */
  _noteNumber?:(fhir.FhirElementArgs|null)[];
  /**
   * The adjudication results.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
}

/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitItemDetailSubDetail';
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitItemDetailSubDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['_noteNumber']) {
      source._noteNumber.forEach((x,i) => {
        if (this.noteNumber.length >= i) { if (x) { this.noteNumber[i].addExtendedProperties(x); } }
        else { if (x) { this.noteNumber.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.item.detail.subDetail' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.item.detail.subDetail.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["revenue"]) { issues.push(...this.revenue.doModelValidation(expression+'.revenue')); }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: ExplanationOfBenefit.item.detail.subDetail.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    if (this["noteNumber"]) { this.noteNumber.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.noteNumber[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitItemDetail type.
 */
export interface ExplanationOfBenefitItemDetailArgs extends fhir.BackboneElementArgs {
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.CodeableConceptArgs|undefined;
  /**
   * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.noteNumber
   */
  _noteNumber?:(fhir.FhirElementArgs|null)[];
  /**
   * The adjudication results.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
  /**
   * Third-tier of goods and services.
   */
  subDetail?: fhir.ExplanationOfBenefitItemDetailSubDetailArgs[]|undefined;
}

/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitItemDetail';
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * Third-tier of goods and services.
   */
  public subDetail: fhir.ExplanationOfBenefitItemDetailSubDetail[];
  /**
   * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitItemDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['_noteNumber']) {
      source._noteNumber.forEach((x,i) => {
        if (this.noteNumber.length >= i) { if (x) { this.noteNumber[i].addExtendedProperties(x); } }
        else { if (x) { this.noteNumber.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x)); }
    else { this.subDetail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.item.detail' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.item.detail.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["revenue"]) { issues.push(...this.revenue.doModelValidation(expression+'.revenue')); }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: ExplanationOfBenefit.item.detail.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    if (this["noteNumber"]) { this.noteNumber.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.noteNumber[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subDetail[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitItem type.
 */
export interface ExplanationOfBenefitItemArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify item entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * Care team members related to this service or product.
   */
  careTeamSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.careTeamSequence
   */
  _careTeamSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * Diagnoses applicable for this service or product.
   */
  diagnosisSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.diagnosisSequence
   */
  _diagnosisSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.procedureSequence
   */
  _procedureSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.informationSequence
   */
  _informationSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.CodeableConceptArgs|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  serviced?: fhir.FhirDate|fhir.Period|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: fhir.FhirDate|string|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  location?: fhir.CodeableConcept|fhir.Address|fhir.Reference|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.AddressArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.ReferenceArgs|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.CodeableConceptArgs|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A billed item may include goods or services provided in multiple encounters.
   */
  encounter?: fhir.ReferenceArgs[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.item.noteNumber
   */
  _noteNumber?:(fhir.FhirElementArgs|null)[];
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
  /**
   * Second-tier of goods and services.
   */
  detail?: fhir.ExplanationOfBenefitItemDetailArgs[]|undefined;
}

/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitItem';
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * Care team members related to this service or product.
   */
  public careTeamSequence: fhir.FhirPositiveInt[];
  /**
   * Diagnoses applicable for this service or product.
   */
  public diagnosisSequence: fhir.FhirPositiveInt[];
  /**
   * Procedures applicable for this service or product.
   */
  public procedureSequence: fhir.FhirPositiveInt[];
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  public informationSequence: fhir.FhirPositiveInt[];
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public serviced?: (fhir.FhirDate|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.serviced[x]
   */
  protected static readonly _fts_servicedIsChoice:true = true;
  /**
   * Where the product or service was provided.
   */
  public location?: (fhir.CodeableConcept|fhir.Address|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.location[x]
   */
  protected static readonly _fts_locationIsChoice:true = true;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite: fhir.CodeableConcept[];
  /**
   * A billed item may include goods or services provided in multiple encounters.
   */
  public encounter: fhir.Reference[];
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber: fhir.FhirPositiveInt[];
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * Second-tier of goods and services.
   */
  public detail: fhir.ExplanationOfBenefitItemDetail[];
  /**
   * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['careTeamSequence']) { this.careTeamSequence = source.careTeamSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.careTeamSequence = []; }
    if (source['_careTeamSequence']) {
      source._careTeamSequence.forEach((x,i) => {
        if (this.careTeamSequence.length >= i) { if (x) { this.careTeamSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.careTeamSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['diagnosisSequence']) { this.diagnosisSequence = source.diagnosisSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.diagnosisSequence = []; }
    if (source['_diagnosisSequence']) {
      source._diagnosisSequence.forEach((x,i) => {
        if (this.diagnosisSequence.length >= i) { if (x) { this.diagnosisSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.diagnosisSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['procedureSequence']) { this.procedureSequence = source.procedureSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.procedureSequence = []; }
    if (source['_procedureSequence']) {
      source._procedureSequence.forEach((x,i) => {
        if (this.procedureSequence.length >= i) { if (x) { this.procedureSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.procedureSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['informationSequence']) { this.informationSequence = source.informationSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.informationSequence = []; }
    if (source['_informationSequence']) {
      source._informationSequence.forEach((x,i) => {
        if (this.informationSequence.length >= i) { if (x) { this.informationSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.informationSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['serviced']) { this.serviced = source.serviced; }
    else if (source['servicedDate']) { this.serviced = new fhir.FhirDate({value: source.servicedDate}); }
    else if (source['servicedPeriod']) { this.serviced = new fhir.Period(source.servicedPeriod); }
    if (source['location']) { this.location = source.location; }
    else if (source['locationCodeableConcept']) { this.location = new fhir.CodeableConcept(source.locationCodeableConcept); }
    else if (source['locationAddress']) { this.location = new fhir.Address(source.locationAddress); }
    else if (source['locationReference']) { this.location = new fhir.Reference(source.locationReference); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    else { this.subSite = []; }
    if (source['encounter']) { this.encounter = source.encounter.map((x) => new fhir.Reference(x)); }
    else { this.encounter = []; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['_noteNumber']) {
      source._noteNumber.forEach((x,i) => {
        if (this.noteNumber.length >= i) { if (x) { this.noteNumber[i].addExtendedProperties(x); } }
        else { if (x) { this.noteNumber.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.item' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: ExplanationOfBenefit.item.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["careTeamSequence"]) { this.careTeamSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.careTeamSequence[${i}]`)); }) }
    if (this["diagnosisSequence"]) { this.diagnosisSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.diagnosisSequence[${i}]`)); }) }
    if (this["procedureSequence"]) { this.procedureSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.procedureSequence[${i}]`)); }) }
    if (this["informationSequence"]) { this.informationSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.informationSequence[${i}]`)); }) }
    if (this["revenue"]) { issues.push(...this.revenue.doModelValidation(expression+'.revenue')); }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: ExplanationOfBenefit.item.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    if (this["bodySite"]) { issues.push(...this.bodySite.doModelValidation(expression+'.bodySite')); }
    if (this["subSite"]) { this.subSite.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subSite[${i}]`)); }) }
    if (this["encounter"]) { this.encounter.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.encounter[${i}]`)); }) }
    if (this["noteNumber"]) { this.noteNumber.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.noteNumber[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    if (this["detail"]) { this.detail.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.detail[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitAddItemDetailSubDetail type.
 */
export interface ExplanationOfBenefitAddItemDetailSubDetailArgs extends fhir.BackboneElementArgs {
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.noteNumber
   */
  _noteNumber?:(fhir.FhirElementArgs|null)[];
  /**
   * The adjudication results.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
}

/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitAddItemDetailSubDetail';
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitAddItemDetailSubDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['_noteNumber']) {
      source._noteNumber.forEach((x,i) => {
        if (this.noteNumber.length >= i) { if (x) { this.noteNumber[i].addExtendedProperties(x); } }
        else { if (x) { this.noteNumber.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.addItem.detail.subDetail' }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: ExplanationOfBenefit.addItem.detail.subDetail.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.noteNumber[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitAddItemDetail type.
 */
export interface ExplanationOfBenefitAddItemDetailArgs extends fhir.BackboneElementArgs {
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.noteNumber
   */
  _noteNumber?:(fhir.FhirElementArgs|null)[];
  /**
   * The adjudication results.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
  /**
   * The third-tier service adjudications for payor added services.
   */
  subDetail?: fhir.ExplanationOfBenefitAddItemDetailSubDetailArgs[]|undefined;
}

/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitAddItemDetail';
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * The third-tier service adjudications for payor added services.
   */
  public subDetail: fhir.ExplanationOfBenefitAddItemDetailSubDetail[];
  /**
   * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitAddItemDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['_noteNumber']) {
      source._noteNumber.forEach((x,i) => {
        if (this.noteNumber.length >= i) { if (x) { this.noteNumber[i].addExtendedProperties(x); } }
        else { if (x) { this.noteNumber.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x)); }
    else { this.subDetail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.addItem.detail' }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: ExplanationOfBenefit.addItem.detail.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.noteNumber[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subDetail[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitAddItem type.
 */
export interface ExplanationOfBenefitAddItemArgs extends fhir.BackboneElementArgs {
  /**
   * Claim items which this service line is intended to replace.
   */
  itemSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.itemSequence
   */
  _itemSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  detailSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detailSequence
   */
  _detailSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
   */
  subDetailSequence?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.subDetailSequence
   */
  _subDetailSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  provider?: fhir.ReferenceArgs[]|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  serviced?: fhir.FhirDate|fhir.Period|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: fhir.FhirDate|string|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  location?: fhir.CodeableConcept|fhir.Address|fhir.Reference|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.AddressArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.ReferenceArgs|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.CodeableConceptArgs|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|(number|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.addItem.noteNumber
   */
  _noteNumber?:(fhir.FhirElementArgs|null)[];
  /**
   * The adjudication results.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
  /**
   * The second-tier service adjudications for payor added services.
   */
  detail?: fhir.ExplanationOfBenefitAddItemDetailArgs[]|undefined;
}

/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitAddItem';
  /**
   * Claim items which this service line is intended to replace.
   */
  public itemSequence: fhir.FhirPositiveInt[];
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  public detailSequence: fhir.FhirPositiveInt[];
  /**
   * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
   */
  public subDetailSequence: fhir.FhirPositiveInt[];
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  public provider: fhir.Reference[];
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public serviced?: (fhir.FhirDate|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.serviced[x]
   */
  protected static readonly _fts_servicedIsChoice:true = true;
  /**
   * Where the product or service was provided.
   */
  public location?: (fhir.CodeableConcept|fhir.Address|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.location[x]
   */
  protected static readonly _fts_locationIsChoice:true = true;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite: fhir.CodeableConcept[];
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * The second-tier service adjudications for payor added services.
   */
  public detail: fhir.ExplanationOfBenefitAddItemDetail[];
  /**
   * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitAddItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['itemSequence']) { this.itemSequence = source.itemSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.itemSequence = []; }
    if (source['_itemSequence']) {
      source._itemSequence.forEach((x,i) => {
        if (this.itemSequence.length >= i) { if (x) { this.itemSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.itemSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['detailSequence']) { this.detailSequence = source.detailSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.detailSequence = []; }
    if (source['_detailSequence']) {
      source._detailSequence.forEach((x,i) => {
        if (this.detailSequence.length >= i) { if (x) { this.detailSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.detailSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['subDetailSequence']) { this.subDetailSequence = source.subDetailSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.subDetailSequence = []; }
    if (source['_subDetailSequence']) {
      source._subDetailSequence.forEach((x,i) => {
        if (this.subDetailSequence.length >= i) { if (x) { this.subDetailSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.subDetailSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['provider']) { this.provider = source.provider.map((x) => new fhir.Reference(x)); }
    else { this.provider = []; }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['serviced']) { this.serviced = source.serviced; }
    else if (source['servicedDate']) { this.serviced = new fhir.FhirDate({value: source.servicedDate}); }
    else if (source['servicedPeriod']) { this.serviced = new fhir.Period(source.servicedPeriod); }
    if (source['location']) { this.location = source.location; }
    else if (source['locationCodeableConcept']) { this.location = new fhir.CodeableConcept(source.locationCodeableConcept); }
    else if (source['locationAddress']) { this.location = new fhir.Address(source.locationAddress); }
    else if (source['locationReference']) { this.location = new fhir.Reference(source.locationReference); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    else { this.subSite = []; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['_noteNumber']) {
      source._noteNumber.forEach((x,i) => {
        if (this.noteNumber.length >= i) { if (x) { this.noteNumber[i].addExtendedProperties(x); } }
        else { if (x) { this.noteNumber.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.addItem' }
    if (this["itemSequence"]) { this.itemSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.itemSequence[${i}]`)); }) }
    if (this["detailSequence"]) { this.detailSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.detailSequence[${i}]`)); }) }
    if (this["subDetailSequence"]) { this.subDetailSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subDetailSequence[${i}]`)); }) }
    if (this["provider"]) { this.provider.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.provider[${i}]`)); }) }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: ExplanationOfBenefit.addItem.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["bodySite"]) { issues.push(...this.bodySite.doModelValidation(expression+'.bodySite')); }
    if (this["subSite"]) { this.subSite.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subSite[${i}]`)); }) }
    if (this["noteNumber"]) { this.noteNumber.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.noteNumber[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    if (this["detail"]) { this.detail.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.detail[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitTotal type.
 */
export interface ExplanationOfBenefitTotalArgs extends fhir.BackboneElementArgs {
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * Monetary total amount associated with the category.
   */
  amount: fhir.MoneyArgs|null;
}

/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitTotal';
  /**
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * Monetary total amount associated with the category.
   */
  public amount: fhir.Money|null;
  /**
   * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitTotalArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    else { this.amount = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.total' }
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: ExplanationOfBenefit.total.category:CodeableConcept', expression: [expression] });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['amount']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property amount fhir: ExplanationOfBenefit.total.amount:Money', expression: [expression] });
    }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation(expression+'.amount')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitPayment type.
 */
export interface ExplanationOfBenefitPaymentArgs extends fhir.BackboneElementArgs {
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  adjustment?: fhir.MoneyArgs|undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: fhir.CodeableConceptArgs|undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  date?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.payment.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Benefits payable less any payment adjustment.
   */
  amount?: fhir.MoneyArgs|undefined;
  /**
   * For example: EFT number or check number.
   */
  identifier?: fhir.IdentifierArgs|undefined;
}

/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitPayment';
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  public adjustment?: fhir.Money|undefined;
  /**
   * Reason for the payment adjustment.
   */
  public adjustmentReason?: fhir.CodeableConcept|undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  public date?: fhir.FhirDate|undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  public amount?: fhir.Money|undefined;
  /**
   * For example: EFT number or check number.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitPaymentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['adjustment']) { this.adjustment = new fhir.Money(source.adjustment); }
    if (source['adjustmentReason']) { this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason); }
    if (source['date']) { this.date = new fhir.FhirDate({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDate(source._date as Partial<fhir.FhirDateArgs>); }
    }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.payment' }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["adjustment"]) { issues.push(...this.adjustment.doModelValidation(expression+'.adjustment')); }
    if (this["adjustmentReason"]) { issues.push(...this.adjustmentReason.doModelValidation(expression+'.adjustmentReason')); }
    if (this["date"]) { issues.push(...this.date.doModelValidation(expression+'.date')); }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation(expression+'.amount')); }
    if (this["identifier"]) { issues.push(...this.identifier.doModelValidation(expression+'.identifier')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitProcessNote type.
 */
export interface ExplanationOfBenefitProcessNoteArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify a note entry.
   */
  number?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.number
   */
  _number?:fhir.FhirElementArgs;
  /**
   * The business purpose of the note text.
   */
  type?: fhir.FhirCode<NoteTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * The explanation or description associated with the processing.
   */
  text?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.processNote.text
   */
  _text?:fhir.FhirElementArgs;
  /**
   * Only required if the language is different from the resource language.
   */
  language?: fhir.CodeableConceptArgs|undefined;
}

/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitProcessNote';
  /**
   * A number to uniquely identify a note entry.
   */
  public number?: fhir.FhirPositiveInt|undefined;
  /**
   * The business purpose of the note text.
   */
  public type?: fhir.FhirCode<NoteTypeCodeType>|undefined;
  /**
   * The explanation or description associated with the processing.
   */
  public text?: fhir.FhirString|undefined;
  /**
   * Only required if the language is different from the resource language.
   */
  public language?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitProcessNoteArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['number']) { this.number = new fhir.FhirPositiveInt({value: source.number}); }
    if (source['_number']) {
      if (this.number) { this.number.addExtendedProperties(source._number!); }
      else { this.number = new fhir.FhirPositiveInt(source._number as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirCode<NoteTypeCodeType>({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<NoteTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['text']) { this.text = new fhir.FhirString({value: source.text}); }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirString(source._text as Partial<fhir.FhirStringArgs>); }
    }
    if (source['language']) { this.language = new fhir.CodeableConcept(source.language); }
  }
  /**
   * Required-bound Value Set for type (ExplanationOfBenefit.processNote.type)
   */
  public static get typeRequiredCodes() {
    return NoteTypeCodes;
  }
  /**
   * Preferred-bound Value Set for language (ExplanationOfBenefit.processNote.language)
   */
  public static get languagePreferredCodings():LanguagesCodingType {
    return LanguagesCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.processNote' }
    if (this["number"]) { issues.push(...this.number.doModelValidation(expression+'.number')); }
    if (this['type'] && (!Object.values(NoteTypeCodes).includes(this.type.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (ExplanationOfBenefit.processNote.type) of type code is missing code for Required binding to: NoteType', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["text"]) { issues.push(...this.text.doModelValidation(expression+'.text')); }
    if (this["language"]) { issues.push(...this.language.doModelValidation(expression+'.language')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitBenefitBalanceFinancial type.
 */
export interface ExplanationOfBenefitBenefitBalanceFinancialArgs extends fhir.BackboneElementArgs {
  /**
   * For example: deductible, visits, benefit amount.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowed?: fhir.FhirUnsignedInt|fhir.FhirString|fhir.Money|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedUnsignedInt?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedString?: fhir.FhirString|string|undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedMoney?: fhir.MoneyArgs|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  used?: fhir.FhirUnsignedInt|fhir.Money|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedUnsignedInt?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedMoney?: fhir.MoneyArgs|undefined;
}

/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitBenefitBalanceFinancial';
  /**
   * For example: deductible, visits, benefit amount.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  public allowed?: (fhir.FhirUnsignedInt|fhir.FhirString|fhir.Money)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.allowed[x]
   */
  protected static readonly _fts_allowedIsChoice:true = true;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  public used?: (fhir.FhirUnsignedInt|fhir.Money)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.used[x]
   */
  protected static readonly _fts_usedIsChoice:true = true;
  /**
   * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitBenefitBalanceFinancialArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['allowed']) { this.allowed = source.allowed; }
    else if (source['allowedUnsignedInt']) { this.allowed = new fhir.FhirUnsignedInt({value: source.allowedUnsignedInt}); }
    else if (source['allowedString']) { this.allowed = new fhir.FhirString({value: source.allowedString}); }
    else if (source['allowedMoney']) { this.allowed = new fhir.Money(source.allowedMoney); }
    if (source['used']) { this.used = source.used; }
    else if (source['usedUnsignedInt']) { this.used = new fhir.FhirUnsignedInt({value: source.usedUnsignedInt}); }
    else if (source['usedMoney']) { this.used = new fhir.Money(source.usedMoney); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.benefitBalance.financial' }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: ExplanationOfBenefit.benefitBalance.financial.type:CodeableConcept', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefitBenefitBalance type.
 */
export interface ExplanationOfBenefitBenefitBalanceArgs extends fhir.BackboneElementArgs {
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  excluded?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.excluded
   */
  _excluded?:fhir.FhirElementArgs;
  /**
   * For example: MED01, or DENT2.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  network?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  unit?: fhir.CodeableConceptArgs|undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  term?: fhir.CodeableConceptArgs|undefined;
  /**
   * Benefits Used to date.
   */
  financial?: fhir.ExplanationOfBenefitBenefitBalanceFinancialArgs[]|undefined;
}

/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefitBenefitBalance';
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  public excluded?: fhir.FhirBoolean|undefined;
  /**
   * For example: MED01, or DENT2.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  public network?: fhir.CodeableConcept|undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  public unit?: fhir.CodeableConcept|undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  public term?: fhir.CodeableConcept|undefined;
  /**
   * Benefits Used to date.
   */
  public financial: fhir.ExplanationOfBenefitBenefitBalanceFinancial[];
  /**
   * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitBenefitBalanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['excluded']) { this.excluded = new fhir.FhirBoolean({value: source.excluded}); }
    if (source['_excluded']) {
      if (this.excluded) { this.excluded.addExtendedProperties(source._excluded!); }
      else { this.excluded = new fhir.FhirBoolean(source._excluded as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['network']) { this.network = new fhir.CodeableConcept(source.network); }
    if (source['unit']) { this.unit = new fhir.CodeableConcept(source.unit); }
    if (source['term']) { this.term = new fhir.CodeableConcept(source.term); }
    if (source['financial']) { this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x)); }
    else { this.financial = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit.benefitBalance' }
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: ExplanationOfBenefit.benefitBalance.category:CodeableConcept', expression: [expression] });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (this["excluded"]) { issues.push(...this.excluded.doModelValidation(expression+'.excluded')); }
    if (this["name"]) { issues.push(...this.name.doModelValidation(expression+'.name')); }
    if (this["description"]) { issues.push(...this.description.doModelValidation(expression+'.description')); }
    if (this["network"]) { issues.push(...this.network.doModelValidation(expression+'.network')); }
    if (this["unit"]) { issues.push(...this.unit.doModelValidation(expression+'.unit')); }
    if (this["term"]) { issues.push(...this.term.doModelValidation(expression+'.term')); }
    if (this["financial"]) { this.financial.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.financial[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExplanationOfBenefit type.
 */
export interface ExplanationOfBenefitArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ExplanationOfBenefit"|undefined;
  /**
   * A unique identifier assigned to this explanation of benefit.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: fhir.FhirCode<ExplanationofbenefitStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  subType?: fhir.CodeableConceptArgs|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  use: fhir.FhirCode<ClaimUseCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.use
   */
  _use?:fhir.FhirElementArgs;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: fhir.PeriodArgs|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  created: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.created
   */
  _created?:fhir.FhirElementArgs;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: fhir.ReferenceArgs|undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  insurer: fhir.ReferenceArgs|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  provider: fhir.ReferenceArgs|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  priority?: fhir.CodeableConceptArgs|undefined;
  /**
   * This field is only used for preauthorizations.
   */
  fundsReserveRequested?: fhir.CodeableConceptArgs|undefined;
  /**
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  fundsReserve?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  related?: fhir.ExplanationOfBenefitRelatedArgs[]|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  prescription?: fhir.ReferenceArgs|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: fhir.ReferenceArgs|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
   */
  payee?: fhir.ExplanationOfBenefitPayeeArgs|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: fhir.ReferenceArgs|undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: fhir.ReferenceArgs|undefined;
  /**
   * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
   */
  claim?: fhir.ReferenceArgs|undefined;
  /**
   * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
   */
  claimResponse?: fhir.ReferenceArgs|undefined;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome: fhir.FhirCode<RemittanceOutcomeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.outcome
   */
  _outcome?:fhir.FhirElementArgs;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.disposition
   */
  _disposition?:fhir.FhirElementArgs;
  /**
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.preAuthRef
   */
  _preAuthRef?:(fhir.FhirElementArgs|null)[];
  /**
   * This value is only present on preauthorization adjudications.
   */
  preAuthRefPeriod?: fhir.PeriodArgs[]|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: fhir.ExplanationOfBenefitCareTeamArgs[]|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInfo?: fhir.ExplanationOfBenefitSupportingInfoArgs[]|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: fhir.ExplanationOfBenefitDiagnosisArgs[]|undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: fhir.ExplanationOfBenefitProcedureArgs[]|undefined;
  /**
   * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
   */
  precedence?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ExplanationOfBenefit.precedence
   */
  _precedence?:fhir.FhirElementArgs;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance: fhir.ExplanationOfBenefitInsuranceArgs[]|null;
  /**
   * Details of a accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: fhir.ExplanationOfBenefitAccidentArgs|undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  item?: fhir.ExplanationOfBenefitItemArgs[]|undefined;
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  addItem?: fhir.ExplanationOfBenefitAddItemArgs[]|undefined;
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  adjudication?: fhir.ExplanationOfBenefitItemAdjudicationArgs[]|undefined;
  /**
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  total?: fhir.ExplanationOfBenefitTotalArgs[]|undefined;
  /**
   * Payment details for the adjudication of the claim.
   */
  payment?: fhir.ExplanationOfBenefitPaymentArgs|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: fhir.CodeableConceptArgs|undefined;
  /**
   * Needed to permit insurers to include the actual form.
   */
  form?: fhir.AttachmentArgs|undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  processNote?: fhir.ExplanationOfBenefitProcessNoteArgs[]|undefined;
  /**
   * Not applicable when use=claim.
   */
  benefitPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Balance by Benefit Category.
   */
  benefitBalance?: fhir.ExplanationOfBenefitBenefitBalanceArgs[]|undefined;
}

/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExplanationOfBenefit';
  /**
   * Resource Type Name
   */
  public override resourceType: "ExplanationOfBenefit";
  /**
   * A unique identifier assigned to this explanation of benefit.
   */
  public identifier: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: fhir.FhirCode<ExplanationofbenefitStatusCodeType>|null;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  public subType?: fhir.CodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  public use: fhir.FhirCode<ClaimUseCodeType>|null;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  public billablePeriod?: fhir.Period|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  public created: fhir.FhirDateTime|null;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  public enterer?: fhir.Reference|undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  public insurer: fhir.Reference|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public provider: fhir.Reference|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  public priority?: fhir.CodeableConcept|undefined;
  /**
   * This field is only used for preauthorizations.
   */
  public fundsReserveRequested?: fhir.CodeableConcept|undefined;
  /**
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  public fundsReserve?: fhir.CodeableConcept|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  public related: fhir.ExplanationOfBenefitRelated[];
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  public prescription?: fhir.Reference|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  public originalPrescription?: fhir.Reference|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
   */
  public payee?: fhir.ExplanationOfBenefitPayee|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  public referral?: fhir.Reference|undefined;
  /**
   * Facility where the services were provided.
   */
  public facility?: fhir.Reference|undefined;
  /**
   * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
   */
  public claimResponse?: fhir.Reference|undefined;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  public outcome: fhir.FhirCode<RemittanceOutcomeCodeType>|null;
  /**
   * A human readable description of the status of the adjudication.
   */
  public disposition?: fhir.FhirString|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  public preAuthRef: fhir.FhirString[];
  /**
   * This value is only present on preauthorization adjudications.
   */
  public preAuthRefPeriod: fhir.Period[];
  /**
   * The members of the team who provided the products and services.
   */
  public careTeam: fhir.ExplanationOfBenefitCareTeam[];
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  public supportingInfo: fhir.ExplanationOfBenefitSupportingInfo[];
  /**
   * Information about diagnoses relevant to the claim items.
   */
  public diagnosis: fhir.ExplanationOfBenefitDiagnosis[];
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  public procedure: fhir.ExplanationOfBenefitProcedure[];
  /**
   * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
   */
  public precedence?: fhir.FhirPositiveInt|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance: fhir.ExplanationOfBenefitInsurance[];
  /**
   * Details of a accident which resulted in injuries which required the products and services listed in the claim.
   */
  public accident?: fhir.ExplanationOfBenefitAccident|undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  public item: fhir.ExplanationOfBenefitItem[];
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  public addItem: fhir.ExplanationOfBenefitAddItem[];
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  public adjudication: fhir.ExplanationOfBenefitItemAdjudication[];
  /**
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  public total: fhir.ExplanationOfBenefitTotal[];
  /**
   * Payment details for the adjudication of the claim.
   */
  public payment?: fhir.ExplanationOfBenefitPayment|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  public formCode?: fhir.CodeableConcept|undefined;
  /**
   * Needed to permit insurers to include the actual form.
   */
  public form?: fhir.Attachment|undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  public processNote: fhir.ExplanationOfBenefitProcessNote[];
  /**
   * Not applicable when use=claim.
   */
  public benefitPeriod?: fhir.Period|undefined;
  /**
   * Balance by Benefit Category.
   */
  public benefitBalance: fhir.ExplanationOfBenefitBenefitBalance[];
  /**
   * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExplanationOfBenefitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ExplanationOfBenefit';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['status']) { this.status = new fhir.FhirCode<ExplanationofbenefitStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<ExplanationofbenefitStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['subType']) { this.subType = new fhir.CodeableConcept(source.subType); }
    if (source['use']) { this.use = new fhir.FhirCode<ClaimUseCodeType>({value: source.use}); }
    else { this.use = null; }
    if (source['_use']) {
      if (this.use) { this.use.addExtendedProperties(source._use!); }
      else { this.use = new fhir.FhirCode<ClaimUseCodeType>(source._use as Partial<fhir.FhirCode>); }
    }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['billablePeriod']) { this.billablePeriod = new fhir.Period(source.billablePeriod); }
    if (source['created']) { this.created = new fhir.FhirDateTime({value: source.created}); }
    else { this.created = null; }
    if (source['_created']) {
      if (this.created) { this.created.addExtendedProperties(source._created!); }
      else { this.created = new fhir.FhirDateTime(source._created as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['enterer']) { this.enterer = new fhir.Reference(source.enterer); }
    if (source['insurer']) { this.insurer = new fhir.Reference(source.insurer); }
    else { this.insurer = null; }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider); }
    else { this.provider = null; }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority); }
    if (source['fundsReserveRequested']) { this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested); }
    if (source['fundsReserve']) { this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve); }
    if (source['related']) { this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x)); }
    else { this.related = []; }
    if (source['prescription']) { this.prescription = new fhir.Reference(source.prescription); }
    if (source['originalPrescription']) { this.originalPrescription = new fhir.Reference(source.originalPrescription); }
    if (source['payee']) { this.payee = new fhir.ExplanationOfBenefitPayee(source.payee); }
    if (source['referral']) { this.referral = new fhir.Reference(source.referral); }
    if (source['facility']) { this.facility = new fhir.Reference(source.facility); }
    if (source['claim']) { this.claim = new fhir.Reference(source.claim); }
    if (source['claimResponse']) { this.claimResponse = new fhir.Reference(source.claimResponse); }
    if (source['outcome']) { this.outcome = new fhir.FhirCode<RemittanceOutcomeCodeType>({value: source.outcome}); }
    else { this.outcome = null; }
    if (source['_outcome']) {
      if (this.outcome) { this.outcome.addExtendedProperties(source._outcome!); }
      else { this.outcome = new fhir.FhirCode<RemittanceOutcomeCodeType>(source._outcome as Partial<fhir.FhirCode>); }
    }
    if (source['disposition']) { this.disposition = new fhir.FhirString({value: source.disposition}); }
    if (source['_disposition']) {
      if (this.disposition) { this.disposition.addExtendedProperties(source._disposition!); }
      else { this.disposition = new fhir.FhirString(source._disposition as Partial<fhir.FhirStringArgs>); }
    }
    if (source['preAuthRef']) { this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({value: x})); }
    else { this.preAuthRef = []; }
    if (source['_preAuthRef']) {
      source._preAuthRef.forEach((x,i) => {
        if (this.preAuthRef.length >= i) { if (x) { this.preAuthRef[i].addExtendedProperties(x); } }
        else { if (x) { this.preAuthRef.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['preAuthRefPeriod']) { this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x)); }
    else { this.preAuthRefPeriod = []; }
    if (source['careTeam']) { this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x)); }
    else { this.careTeam = []; }
    if (source['supportingInfo']) { this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x)); }
    else { this.supportingInfo = []; }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x)); }
    else { this.diagnosis = []; }
    if (source['procedure']) { this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x)); }
    else { this.procedure = []; }
    if (source['precedence']) { this.precedence = new fhir.FhirPositiveInt({value: source.precedence}); }
    if (source['_precedence']) {
      if (this.precedence) { this.precedence.addExtendedProperties(source._precedence!); }
      else { this.precedence = new fhir.FhirPositiveInt(source._precedence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['insurance']) { this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x)); }
    else { this.insurance = []; }
    if (source['accident']) { this.accident = new fhir.ExplanationOfBenefitAccident(source.accident); }
    if (source['item']) { this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x)); }
    else { this.item = []; }
    if (source['addItem']) { this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x)); }
    else { this.addItem = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['total']) { this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x)); }
    else { this.total = []; }
    if (source['payment']) { this.payment = new fhir.ExplanationOfBenefitPayment(source.payment); }
    if (source['formCode']) { this.formCode = new fhir.CodeableConcept(source.formCode); }
    if (source['form']) { this.form = new fhir.Attachment(source.form); }
    if (source['processNote']) { this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x)); }
    else { this.processNote = []; }
    if (source['benefitPeriod']) { this.benefitPeriod = new fhir.Period(source.benefitPeriod); }
    if (source['benefitBalance']) { this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x)); }
    else { this.benefitBalance = []; }
  }
  /**
   * Required-bound Value Set for status (ExplanationOfBenefit.status)
   */
  public static get statusRequiredCodes() {
    return ExplanationofbenefitStatusCodes;
  }
  /**
   * Extensible-bound Value Set for type (ExplanationOfBenefit.type)
   */
  public static get typeExtensibleCodings():ClaimTypeCodingType {
    return ClaimTypeCodings;
  }
  /**
   * Required-bound Value Set for use (ExplanationOfBenefit.use)
   */
  public static get useRequiredCodes() {
    return ClaimUseCodes;
  }
  /**
   * Required-bound Value Set for outcome (ExplanationOfBenefit.outcome)
   */
  public static get outcomeRequiredCodes() {
    return RemittanceOutcomeCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'ExplanationOfBenefit' }
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ExplanationOfBenefit.resourceType:"ExplanationOfBenefit"', expression: [expression] });
    }
    if (this["identifier"]) { this.identifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.identifier[${i}]`)); }) }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: ExplanationOfBenefit.status:code', expression: [expression] });
    }
    if (this['status'] && (!Object.values(ExplanationofbenefitStatusCodes).includes(this.status.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (ExplanationOfBenefit.status) of type code is missing code for Required binding to: ExplanationofbenefitStatus', expression: [expression] });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation(expression+'.status')); }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: ExplanationOfBenefit.type:CodeableConcept', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["subType"]) { issues.push(...this.subType.doModelValidation(expression+'.subType')); }
    if (!this['use']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property use fhir: ExplanationOfBenefit.use:code', expression: [expression] });
    }
    if (this['use'] && (!Object.values(ClaimUseCodes).includes(this.use.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'use (ExplanationOfBenefit.use) of type code is missing code for Required binding to: ClaimUse', expression: [expression] });
    }
    if (this["use"]) { issues.push(...this.use.doModelValidation(expression+'.use')); }
    if (!this['patient']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient fhir: ExplanationOfBenefit.patient:Reference', expression: [expression] });
    }
    if (this["patient"]) { issues.push(...this.patient.doModelValidation(expression+'.patient')); }
    if (this["billablePeriod"]) { issues.push(...this.billablePeriod.doModelValidation(expression+'.billablePeriod')); }
    if (!this['created']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property created fhir: ExplanationOfBenefit.created:dateTime', expression: [expression] });
    }
    if (this["created"]) { issues.push(...this.created.doModelValidation(expression+'.created')); }
    if (this["enterer"]) { issues.push(...this.enterer.doModelValidation(expression+'.enterer')); }
    if (!this['insurer']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurer fhir: ExplanationOfBenefit.insurer:Reference', expression: [expression] });
    }
    if (this["insurer"]) { issues.push(...this.insurer.doModelValidation(expression+'.insurer')); }
    if (!this['provider']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property provider fhir: ExplanationOfBenefit.provider:Reference', expression: [expression] });
    }
    if (this["provider"]) { issues.push(...this.provider.doModelValidation(expression+'.provider')); }
    if (this["priority"]) { issues.push(...this.priority.doModelValidation(expression+'.priority')); }
    if (this["fundsReserveRequested"]) { issues.push(...this.fundsReserveRequested.doModelValidation(expression+'.fundsReserveRequested')); }
    if (this["fundsReserve"]) { issues.push(...this.fundsReserve.doModelValidation(expression+'.fundsReserve')); }
    if (this["related"]) { this.related.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.related[${i}]`)); }) }
    if (this["prescription"]) { issues.push(...this.prescription.doModelValidation(expression+'.prescription')); }
    if (this["originalPrescription"]) { issues.push(...this.originalPrescription.doModelValidation(expression+'.originalPrescription')); }
    if (this["payee"]) { issues.push(...this.payee.doModelValidation(expression+'.payee')); }
    if (this["referral"]) { issues.push(...this.referral.doModelValidation(expression+'.referral')); }
    if (this["facility"]) { issues.push(...this.facility.doModelValidation(expression+'.facility')); }
    if (this["claim"]) { issues.push(...this.claim.doModelValidation(expression+'.claim')); }
    if (this["claimResponse"]) { issues.push(...this.claimResponse.doModelValidation(expression+'.claimResponse')); }
    if (!this['outcome']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property outcome fhir: ExplanationOfBenefit.outcome:code', expression: [expression] });
    }
    if (this['outcome'] && (!Object.values(RemittanceOutcomeCodes).includes(this.outcome.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'outcome (ExplanationOfBenefit.outcome) of type code is missing code for Required binding to: RemittanceOutcome', expression: [expression] });
    }
    if (this["outcome"]) { issues.push(...this.outcome.doModelValidation(expression+'.outcome')); }
    if (this["disposition"]) { issues.push(...this.disposition.doModelValidation(expression+'.disposition')); }
    if (this["preAuthRef"]) { this.preAuthRef.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.preAuthRef[${i}]`)); }) }
    if (this["preAuthRefPeriod"]) { this.preAuthRefPeriod.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.preAuthRefPeriod[${i}]`)); }) }
    if (this["careTeam"]) { this.careTeam.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.careTeam[${i}]`)); }) }
    if (this["supportingInfo"]) { this.supportingInfo.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.supportingInfo[${i}]`)); }) }
    if (this["diagnosis"]) { this.diagnosis.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.diagnosis[${i}]`)); }) }
    if (this["procedure"]) { this.procedure.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.procedure[${i}]`)); }) }
    if (this["precedence"]) { issues.push(...this.precedence.doModelValidation(expression+'.precedence')); }
    if (!this['insurance']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurance fhir: ExplanationOfBenefit.insurance:insurance', expression: [expression] });
    } else if (!Array.isArray(this.insurance)) {
      issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property insurance fhir: ExplanationOfBenefit.insurance:insurance', expression: [expression] });
    } else if (this.insurance.length === 0) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurance fhir: ExplanationOfBenefit.insurance:insurance', expression: [expression] });
    }
    if (this["insurance"]) { this.insurance.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.insurance[${i}]`)); }) }
    if (this["accident"]) { issues.push(...this.accident.doModelValidation(expression+'.accident')); }
    if (this["item"]) { this.item.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.item[${i}]`)); }) }
    if (this["addItem"]) { this.addItem.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.addItem[${i}]`)); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.adjudication[${i}]`)); }) }
    if (this["total"]) { this.total.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.total[${i}]`)); }) }
    if (this["payment"]) { issues.push(...this.payment.doModelValidation(expression+'.payment')); }
    if (this["formCode"]) { issues.push(...this.formCode.doModelValidation(expression+'.formCode')); }
    if (this["form"]) { issues.push(...this.form.doModelValidation(expression+'.form')); }
    if (this["processNote"]) { this.processNote.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.processNote[${i}]`)); }) }
    if (this["benefitPeriod"]) { issues.push(...this.benefitPeriod.doModelValidation(expression+'.benefitPeriod')); }
    if (this["benefitBalance"]) { this.benefitBalance.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.benefitBalance[${i}]`)); }) }
    return issues;
  }
}
