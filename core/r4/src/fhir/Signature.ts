// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Signature

import * as fhir from '../fhir.js';

// @ts-ignore
import { SignatureTypeCodings, SignatureTypeCodingType,} from '../fhirValueSets/SignatureTypeCodings.js';
// @ts-ignore
import { SignatureTypeCodes,  SignatureTypeCodeType } from '../fhirValueSets/SignatureTypeCodes.js';
/**
 * Valid arguments for the Signature type.
 */
export interface SignatureArgs extends fhir.FhirElementArgs {
  /**
   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &amp;quot;Commitment Type Indication&amp;quot;.
   */
  type: fhir.CodingArgs[]|null;
  /**
   * This should agree with the information in the signature.
   */
  when: fhir.FhirInstant|string|undefined;
  /**
   * This should agree with the information in the signature.
   */
  who: fhir.ReferenceArgs|null;
  /**
   * The party that can't sign. For example a child.
   */
  onBehalfOf?: fhir.ReferenceArgs|undefined;
  /**
   * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
   */
  targetFormat?: fhir.FhirCode|string|undefined;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
   */
  sigFormat?: fhir.FhirCode|string|undefined;
  /**
   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
   */
  data?: fhir.FhirBase64Binary|string|undefined;
}

/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
export class Signature extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Signature';
  /**
   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &amp;quot;Commitment Type Indication&amp;quot;.
   */
  public type: fhir.Coding[];
  /**
   * This should agree with the information in the signature.
   */
  public when: fhir.FhirInstant|null;
  /**
   * This should agree with the information in the signature.
   */
  public who: fhir.Reference|null;
  /**
   * The party that can't sign. For example a child.
   */
  public onBehalfOf?: fhir.Reference|undefined;
  /**
   * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
   */
  public targetFormat?: fhir.FhirCode|undefined;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
   */
  public sigFormat?: fhir.FhirCode|undefined;
  /**
   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
   */
  public data?: fhir.FhirBase64Binary|undefined;
  /**
   * Default constructor for Signature - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SignatureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = source.type.map((x) => new fhir.Coding(x)); }
    else { this.type = []; }
    if (source['when']) { this.when = new fhir.FhirInstant({value: source.when}); }
    else { this.when = null; }
    if (source['who']) { this.who = new fhir.Reference(source.who); }
    else { this.who = null; }
    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf); }
    if (source['targetFormat']) { this.targetFormat = new fhir.FhirCode({value: source.targetFormat}); }
    if (source['sigFormat']) { this.sigFormat = new fhir.FhirCode({value: source.sigFormat}); }
    if (source['data']) { this.data = new fhir.FhirBase64Binary({value: source.data}); }
  }
  /**
   * Preferred-bound Value Set for type (Signature.type)
   */
  public static get typePreferredCodings():SignatureTypeCodingType {
    return SignatureTypeCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding' });
    } else if (!Array.isArray(this.type)) {
      issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property type:fhir.Coding[] fhir: Signature.type:Coding' });
    } else if (this.type.length === 0) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding' });
    }
    if (this["type"]) { this.type.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['when']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property when:fhir.FhirInstant fhir: Signature.when:instant' });
    }
    if (this["when"]) { issues.push(...this.when.doModelValidation()); }
    if (!this['who']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property who:fhir.Reference fhir: Signature.who:Reference' });
    }
    if (this["who"]) { issues.push(...this.who.doModelValidation()); }
    if (this["onBehalfOf"]) { issues.push(...this.onBehalfOf.doModelValidation()); }
    if (this["targetFormat"]) { issues.push(...this.targetFormat.doModelValidation()); }
    if (this["sigFormat"]) { issues.push(...this.sigFormat.doModelValidation()); }
    if (this["data"]) { issues.push(...this.data.doModelValidation()); }
    return issues;
  }
}
