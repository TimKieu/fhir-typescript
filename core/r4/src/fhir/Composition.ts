// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Composition

import * as fhir from '../fhir.js';

// @ts-ignore
import { CompositionAttestationModeCodings, CompositionAttestationModeCodingType,} from '../fhirValueSets/CompositionAttestationModeCodings.js';
// @ts-ignore
import { CompositionAttestationModeCodes,  CompositionAttestationModeCodeType } from '../fhirValueSets/CompositionAttestationModeCodes.js';
// @ts-ignore
import { DocumentRelationshipTypeCodings, DocumentRelationshipTypeCodingType,} from '../fhirValueSets/DocumentRelationshipTypeCodings.js';
// @ts-ignore
import { DocumentRelationshipTypeCodes,  DocumentRelationshipTypeCodeType } from '../fhirValueSets/DocumentRelationshipTypeCodes.js';
// @ts-ignore
import { V3ActCodeCodings, V3ActCodeCodingType,} from '../fhirValueSets/V3ActCodeCodings.js';
// @ts-ignore
import { V3ActCodeCodes,  V3ActCodeCodeType } from '../fhirValueSets/V3ActCodeCodes.js';
// @ts-ignore
import { DocSectionCodesCodings, DocSectionCodesCodingType,} from '../fhirValueSets/DocSectionCodesCodings.js';
// @ts-ignore
import { DocSectionCodesCodes,  DocSectionCodesCodeType } from '../fhirValueSets/DocSectionCodesCodes.js';
// @ts-ignore
import { ListModeCodings, ListModeCodingType,} from '../fhirValueSets/ListModeCodings.js';
// @ts-ignore
import { ListModeCodes,  ListModeCodeType } from '../fhirValueSets/ListModeCodes.js';
// @ts-ignore
import { ListOrderCodings, ListOrderCodingType,} from '../fhirValueSets/ListOrderCodings.js';
// @ts-ignore
import { ListOrderCodes,  ListOrderCodeType } from '../fhirValueSets/ListOrderCodes.js';
// @ts-ignore
import { ListEmptyReasonCodings, ListEmptyReasonCodingType,} from '../fhirValueSets/ListEmptyReasonCodings.js';
// @ts-ignore
import { ListEmptyReasonCodes,  ListEmptyReasonCodeType } from '../fhirValueSets/ListEmptyReasonCodes.js';
// @ts-ignore
import { CompositionStatusCodings, CompositionStatusCodingType,} from '../fhirValueSets/CompositionStatusCodings.js';
// @ts-ignore
import { CompositionStatusCodes,  CompositionStatusCodeType } from '../fhirValueSets/CompositionStatusCodes.js';
// @ts-ignore
import { DocTypecodesCodings, DocTypecodesCodingType,} from '../fhirValueSets/DocTypecodesCodings.js';
// @ts-ignore
import { DocTypecodesCodes,  DocTypecodesCodeType } from '../fhirValueSets/DocTypecodesCodes.js';
// @ts-ignore
import { DocumentClasscodesCodings, DocumentClasscodesCodingType,} from '../fhirValueSets/DocumentClasscodesCodings.js';
// @ts-ignore
import { DocumentClasscodesCodes,  DocumentClasscodesCodeType } from '../fhirValueSets/DocumentClasscodesCodes.js';
// @ts-ignore
import { V3ConfidentialityClassificationCodings, V3ConfidentialityClassificationCodingType,} from '../fhirValueSets/V3ConfidentialityClassificationCodings.js';
// @ts-ignore
import { V3ConfidentialityClassificationCodes,  V3ConfidentialityClassificationCodeType } from '../fhirValueSets/V3ConfidentialityClassificationCodes.js';
/**
 * Valid arguments for the CompositionAttester type.
 */
export interface CompositionAttesterArgs extends fhir.BackboneElementArgs {
  /**
   * The type of attestation the authenticator offers.
   */
  mode: fhir.FhirCode<CompositionAttestationModeCodeType>|string|undefined;
  /**
   * When the composition was attested by the party.
   */
  time?: fhir.FhirDateTime|string|undefined;
  /**
   * Who attested the composition in the specified way.
   */
  party?: fhir.ReferenceArgs|undefined;
}

/**
 * Only list each attester once.
 */
export class CompositionAttester extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CompositionAttester';
  /**
   * The type of attestation the authenticator offers.
   */
  public mode: fhir.FhirCode<CompositionAttestationModeCodeType>|null;
  /**
   * When the composition was attested by the party.
   */
  public time?: fhir.FhirDateTime|undefined;
  /**
   * Who attested the composition in the specified way.
   */
  public party?: fhir.Reference|undefined;
  /**
   * Default constructor for CompositionAttester - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CompositionAttesterArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['mode']) { this.mode = new fhir.FhirCode<CompositionAttestationModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['time']) { this.time = new fhir.FhirDateTime({value: source.time}); }
    if (source['party']) { this.party = new fhir.Reference(source.party); }
  }
  /**
   * Required-bound Value Set for mode (Composition.attester.mode)
   */
  public static get modeRequiredCodes() {
    return CompositionAttestationModeCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['mode']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode:fhir.FhirCode<CompositionAttestationModeCodeType> fhir: Composition.attester.mode:code' });
    }
    if (this['mode'] && (!Object.values(CompositionAttestationModeCodes).includes(this.mode as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode:fhir.FhirCode<CompositionAttestationModeCodeType> fhir: Composition.attester.mode:code Required binding to: CompositionAttestationMode' });
    }
    if (this["mode"]) { issues.push(...this.mode.doModelValidation()); }
    if (this["time"]) { issues.push(...this.time.doModelValidation()); }
    if (this["party"]) { issues.push(...this.party.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the CompositionRelatesTo type.
 */
export interface CompositionRelatesToArgs extends fhir.BackboneElementArgs {
  /**
   * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
   */
  code: fhir.FhirCode<DocumentRelationshipTypeCodeType>|string|undefined;
  /**
   * The target composition/document of this relationship.
   */
  target?: fhir.Identifier|fhir.Reference|undefined;
  /**
   * The target composition/document of this relationship.
   */
  targetIdentifier?: fhir.IdentifierArgs|undefined;
  /**
   * The target composition/document of this relationship.
   */
  targetReference?: fhir.ReferenceArgs|undefined;
}

/**
 * A document is a version specific composition.
 */
export class CompositionRelatesTo extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CompositionRelatesTo';
  /**
   * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
   */
  public code: fhir.FhirCode<DocumentRelationshipTypeCodeType>|null;
  /**
   * The target composition/document of this relationship.
   */
  public target: (fhir.Identifier|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element Composition.relatesTo.target[x]
   */
  protected static readonly _fts_targetIsChoice:true = true;
  /**
   * Default constructor for CompositionRelatesTo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CompositionRelatesToArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode<DocumentRelationshipTypeCodeType>({value: source.code}); }
    else { this.code = null; }
    if (source['target']) { this.target = source.target; }
    else if (source['targetIdentifier']) { this.target = new fhir.Identifier(source.targetIdentifier); }
    else if (source['targetReference']) { this.target = new fhir.Reference(source.targetReference); }
    else { this.target = null; }
  }
  /**
   * Required-bound Value Set for code (Composition.relatesTo.code)
   */
  public static get codeRequiredCodes() {
    return DocumentRelationshipTypeCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['code']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.FhirCode<DocumentRelationshipTypeCodeType> fhir: Composition.relatesTo.code:code' });
    }
    if (this['code'] && (!Object.values(DocumentRelationshipTypeCodes).includes(this.code as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code:fhir.FhirCode<DocumentRelationshipTypeCodeType> fhir: Composition.relatesTo.code:code Required binding to: DocumentRelationshipType' });
    }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    if (!this['target']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target: fhir: Composition.relatesTo.target[x]:' });
    }
    return issues;
  }
}
/**
 * Valid arguments for the CompositionEvent type.
 */
export interface CompositionEventArgs extends fhir.BackboneElementArgs {
  /**
   * An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more eventCodes are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
   */
  code?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
   */
  period?: fhir.PeriodArgs|undefined;
  /**
   * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
   */
  detail?: fhir.ReferenceArgs[]|undefined;
}

/**
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export class CompositionEvent extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CompositionEvent';
  /**
   * An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more eventCodes are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
   */
  public code: fhir.CodeableConcept[];
  /**
   * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
   */
  public period?: fhir.Period|undefined;
  /**
   * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
   */
  public detail: fhir.Reference[];
  /**
   * Default constructor for CompositionEvent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CompositionEventArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = source.code.map((x) => new fhir.CodeableConcept(x)); }
    else { this.code = []; }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.Reference(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["code"]) { this.code.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["period"]) { issues.push(...this.period.doModelValidation()); }
    if (this["detail"]) { this.detail.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the CompositionSection type.
 */
export interface CompositionSectionArgs extends fhir.BackboneElementArgs {
  /**
   * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   
   * If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Identifies who is responsible for the information in this section, not necessarily who typed it in.
   */
  author?: fhir.ReferenceArgs[]|undefined;
  /**
   * Typically, sections in a doument are about the subject of the document, whether that is a  patient, or group of patients, location, or device, or whatever. For some kind of documents, some sections actually contain data about related entities. Typical examples are  a section in a newborn discharge summary concerning the mother, or family history documents, with a section about each family member, though there are many other examples.
   */
  focus?: fhir.ReferenceArgs|undefined;
  /**
   * Document profiles may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: fhir.NarrativeArgs|undefined;
  /**
   * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
   */
  mode?: fhir.FhirCode<ListModeCodeType>|string|undefined;
  /**
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  orderedBy?: fhir.CodeableConceptArgs|undefined;
  /**
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  entry?: fhir.ReferenceArgs[]|undefined;
  /**
   * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  emptyReason?: fhir.CodeableConceptArgs|undefined;
  /**
   * Nested sections are primarily used to help human readers navigate to particular portions of the document.
   */
  section?: fhir.CompositionSectionArgs[]|undefined;
}

/**
 * The root of the sections that make up the composition.
 */
export class CompositionSection extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CompositionSection';
  /**
   * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   
   * If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Identifies who is responsible for the information in this section, not necessarily who typed it in.
   */
  public author: fhir.Reference[];
  /**
   * Typically, sections in a doument are about the subject of the document, whether that is a  patient, or group of patients, location, or device, or whatever. For some kind of documents, some sections actually contain data about related entities. Typical examples are  a section in a newborn discharge summary concerning the mother, or family history documents, with a section about each family member, though there are many other examples.
   */
  public focus?: fhir.Reference|undefined;
  /**
   * Document profiles may define what content should be represented in the narrative to ensure clinical safety.
   */
  public text?: fhir.Narrative|undefined;
  /**
   * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
   */
  public mode?: fhir.FhirCode<ListModeCodeType>|undefined;
  /**
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  public orderedBy?: fhir.CodeableConcept|undefined;
  /**
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  public entry: fhir.Reference[];
  /**
   * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  public emptyReason?: fhir.CodeableConcept|undefined;
  /**
   * Nested sections are primarily used to help human readers navigate to particular portions of the document.
   */
  public section: fhir.CompositionSection[];
  /**
   * Default constructor for CompositionSection - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CompositionSectionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['author']) { this.author = source.author.map((x) => new fhir.Reference(x)); }
    else { this.author = []; }
    if (source['focus']) { this.focus = new fhir.Reference(source.focus); }
    if (source['text']) { this.text = new fhir.Narrative(source.text); }
    if (source['mode']) { this.mode = new fhir.FhirCode<ListModeCodeType>({value: source.mode}); }
    if (source['orderedBy']) { this.orderedBy = new fhir.CodeableConcept(source.orderedBy); }
    if (source['entry']) { this.entry = source.entry.map((x) => new fhir.Reference(x)); }
    else { this.entry = []; }
    if (source['emptyReason']) { this.emptyReason = new fhir.CodeableConcept(source.emptyReason); }
    if (source['section']) { this.section = source.section.map((x) => new fhir.CompositionSection(x)); }
    else { this.section = []; }
  }
  /**
   * Required-bound Value Set for mode (Composition.section.mode)
   */
  public static get modeRequiredCodes() {
    return ListModeCodes;
  }
  /**
   * Preferred-bound Value Set for orderedBy (Composition.section.orderedBy)
   */
  public static get orderedByPreferredCodings() {
    return ListOrderCodings;
  }
  /**
   * Preferred-bound Value Set for emptyReason (Composition.section.emptyReason)
   */
  public static get emptyReasonPreferredCodings() {
    return ListEmptyReasonCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["title"]) { issues.push(...this.title.doModelValidation()); }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    if (this["author"]) { this.author.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["focus"]) { issues.push(...this.focus.doModelValidation()); }
    if (this["text"]) { issues.push(...this.text.doModelValidation()); }
    if (this['mode'] && (!Object.values(ListModeCodes).includes(this.mode as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode?:fhir.FhirCode<ListModeCodeType> fhir: Composition.section.mode:code Required binding to: ListMode' });
    }
    if (this["mode"]) { issues.push(...this.mode.doModelValidation()); }
    if (this["orderedBy"]) { issues.push(...this.orderedBy.doModelValidation()); }
    if (this["entry"]) { this.entry.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["emptyReason"]) { issues.push(...this.emptyReason.doModelValidation()); }
    if (this["section"]) { this.section.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the Composition type.
 */
export interface CompositionArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Composition"|undefined;
  /**
   * Similar to ClinicalDocument/setId in CDA. See discussion in resource definition for how these relate.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements.   
   * Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
   */
  status: fhir.FhirCode<CompositionStatusCodeType>|string|undefined;
  /**
   * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
   */
  category?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For clinical documents, this is usually the patient.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * Describes the clinical encounter or type of care this documentation is associated with.
   */
  encounter?: fhir.ReferenceArgs|undefined;
  /**
   * The Last Modified Date on the composition may be after the date of the document was attested without being changed.
   */
  date: fhir.FhirDateTime|string|undefined;
  /**
   * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
   */
  author: fhir.ReferenceArgs[]|null;
  /**
   * For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
   */
  title: fhir.FhirString|string|undefined;
  /**
   * The exact use of this element, and enforcement and issues related to highly sensitive documents are out of scope for the base specification, and delegated to implementation profiles (see security section).  This element is labeled as a modifier because highly confidential documents must not be treated as if they are not.
   */
  confidentiality?: fhir.FhirCode|string|undefined;
  /**
   * Only list each attester once.
   */
  attester?: fhir.CompositionAttesterArgs[]|undefined;
  /**
   * This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
   */
  custodian?: fhir.ReferenceArgs|undefined;
  /**
   * A document is a version specific composition.
   */
  relatesTo?: fhir.CompositionRelatesToArgs[]|undefined;
  /**
   * The event needs to be consistent with the type element, though can provide further information if desired.
   */
  event?: fhir.CompositionEventArgs[]|undefined;
  /**
   * The root of the sections that make up the composition.
   */
  section?: fhir.CompositionSectionArgs[]|undefined;
}

/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
export class Composition extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Composition';
  /**
   * Resource Type Name
   */
  public override resourceType: "Composition";
  /**
   * Similar to ClinicalDocument/setId in CDA. See discussion in resource definition for how these relate.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements.   
   * Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
   */
  public status: fhir.FhirCode<CompositionStatusCodeType>|null;
  /**
   * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
   */
  public category: fhir.CodeableConcept[];
  /**
   * For clinical documents, this is usually the patient.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Describes the clinical encounter or type of care this documentation is associated with.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * The Last Modified Date on the composition may be after the date of the document was attested without being changed.
   */
  public date: fhir.FhirDateTime|null;
  /**
   * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
   */
  public author: fhir.Reference[];
  /**
   * For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
   */
  public title: fhir.FhirString|null;
  /**
   * The exact use of this element, and enforcement and issues related to highly sensitive documents are out of scope for the base specification, and delegated to implementation profiles (see security section).  This element is labeled as a modifier because highly confidential documents must not be treated as if they are not.
   */
  public confidentiality?: fhir.FhirCode|undefined;
  /**
   * Only list each attester once.
   */
  public attester: fhir.CompositionAttester[];
  /**
   * This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
   */
  public custodian?: fhir.Reference|undefined;
  /**
   * A document is a version specific composition.
   */
  public relatesTo: fhir.CompositionRelatesTo[];
  /**
   * The event needs to be consistent with the type element, though can provide further information if desired.
   */
  public event: fhir.CompositionEvent[];
  /**
   * The root of the sections that make up the composition.
   */
  public section: fhir.CompositionSection[];
  /**
   * Default constructor for Composition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CompositionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Composition';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['status']) { this.status = new fhir.FhirCode<CompositionStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    else { this.category = []; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter); }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    else { this.date = null; }
    if (source['author']) { this.author = source.author.map((x) => new fhir.Reference(x)); }
    else { this.author = []; }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    else { this.title = null; }
    if (source['confidentiality']) { this.confidentiality = new fhir.FhirCode({value: source.confidentiality}); }
    if (source['attester']) { this.attester = source.attester.map((x) => new fhir.CompositionAttester(x)); }
    else { this.attester = []; }
    if (source['custodian']) { this.custodian = new fhir.Reference(source.custodian); }
    if (source['relatesTo']) { this.relatesTo = source.relatesTo.map((x) => new fhir.CompositionRelatesTo(x)); }
    else { this.relatesTo = []; }
    if (source['event']) { this.event = source.event.map((x) => new fhir.CompositionEvent(x)); }
    else { this.event = []; }
    if (source['section']) { this.section = source.section.map((x) => new fhir.CompositionSection(x)); }
    else { this.section = []; }
  }
  /**
   * Required-bound Value Set for status (Composition.status)
   */
  public static get statusRequiredCodes() {
    return CompositionStatusCodes;
  }
  /**
   * Preferred-bound Value Set for type (Composition.type)
   */
  public static get typePreferredCodings() {
    return DocTypecodesCodings;
  }
  /**
   * Required-bound Value Set for confidentiality (Composition.confidentiality)
   */
  public static get confidentialityRequiredCodes() {
    return V3ConfidentialityClassificationCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Composition" fhir: Composition.resourceType:"Composition"' });
    }
    if (this["identifier"]) { issues.push(...this.identifier.doModelValidation()); }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<CompositionStatusCodeType> fhir: Composition.status:code' });
    }
    if (this['status'] && (!Object.values(CompositionStatusCodes).includes(this.status as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<CompositionStatusCodeType> fhir: Composition.status:code Required binding to: CompositionStatus' });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation()); }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Composition.type:CodeableConcept' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["category"]) { this.category.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["subject"]) { issues.push(...this.subject.doModelValidation()); }
    if (this["encounter"]) { issues.push(...this.encounter.doModelValidation()); }
    if (!this['date']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: Composition.date:dateTime' });
    }
    if (this["date"]) { issues.push(...this.date.doModelValidation()); }
    if (!this['author']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property author:fhir.Reference[] fhir: Composition.author:Reference' });
    } else if (!Array.isArray(this.author)) {
      issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property author:fhir.Reference[] fhir: Composition.author:Reference' });
    } else if (this.author.length === 0) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property author:fhir.Reference[] fhir: Composition.author:Reference' });
    }
    if (this["author"]) { this.author.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['title']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title:fhir.FhirString fhir: Composition.title:string' });
    }
    if (this["title"]) { issues.push(...this.title.doModelValidation()); }
    if (this['confidentiality'] && (!Object.values(V3ConfidentialityClassificationCodes).includes(this.confidentiality as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property confidentiality?:fhir.FhirCode fhir: Composition.confidentiality:code Required binding to: V3ConfidentialityClassification' });
    }
    if (this["confidentiality"]) { issues.push(...this.confidentiality.doModelValidation()); }
    if (this["attester"]) { this.attester.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["custodian"]) { issues.push(...this.custodian.doModelValidation()); }
    if (this["relatesTo"]) { this.relatesTo.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["event"]) { this.event.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["section"]) { this.section.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
