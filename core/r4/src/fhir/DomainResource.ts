// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DomainResource

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the DomainResource type.
 */
export interface DomainResourceArgs extends fhir.ResourceArgs {
  /**
   * Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
   */
  text?: fhir.NarrativeArgs|undefined;
  /**
   * This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
   */
  contained?: fhir.ResourceArgs[]|any[]|undefined;
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: fhir.ExtensionArgs[]|undefined;
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: fhir.ExtensionArgs[]|undefined;
}

/**
 * A resource that includes narrative, extensions, and contained resources.
 */
export class DomainResource extends fhir.Resource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DomainResource';
  /**
   * Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
   */
  public text?: fhir.Narrative|undefined;
  /**
   * This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
   */
  public contained: fhir.FhirResource[];
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  public extension: fhir.Extension[];
  /**
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  public modifierExtension: fhir.Extension[];
  /**
   * Default constructor for DomainResource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DomainResourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['text']) { this.text = new fhir.Narrative(source.text); }
    if (source['contained']) {
      this.contained = [];
      source.contained.forEach((x) => {
        var r = fhir.resourceFactory(x);
        if (r) { this.contained!.push(r); }
      });
    }
    else { this.contained = []; }
    if (source['extension']) { this.extension = source.extension.map((x) => new fhir.Extension(x)); }
    else { this.extension = []; }
    if (source['modifierExtension']) { this.modifierExtension = source.modifierExtension.map((x) => new fhir.Extension(x)); }
    else { this.modifierExtension = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["text"]) { issues.push(...this.text.doModelValidation()); }
    if (this["contained"]) { this.contained.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["extension"]) { this.extension.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["modifierExtension"]) { this.modifierExtension.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
  /**
   * Fluent-style function to add extensions
   * @param ext
   * @returns 
   */
  public addExtension(ext:fhir.ExtensionArgs):DomainResource {
    this.extension.push(new fhir.Extension(ext));
    return this;
  }
  
  /**
   * Remove ALL instances of extensions with a matching URL, optionally recurse into extension.extension.
   * @param url URL of extensions to remove
   * @param searchNested If the removal should search for nested extensions
   */
  public removeExtensions(url:fhir.FhirString|string, searchNested:boolean = false):DomainResource {
    if (this.extension.length === 0) {
      return this;
    }
    const matchUrl:string = (typeof url === 'string') ? url : (url as fhir.FhirString).value ?? '';
    let clean:fhir.Extension[] = this.extension.filter((ext) => (ext?.url?.value ?? '') !== matchUrl) ?? [];
    if (searchNested) {
      for (let i:number = 0; i < clean.length; i++) {
        clean[i] = clean[i].removeExtensions(matchUrl, searchNested) as fhir.Extension;
      }
    }
    this.extension = clean;
    return this;
  }

  /**
   * Find the first instance of an extension with a matching URL, optionally recurse into extension.extension.
   * @param url URL to search for
   * @param searchNested If the search should nest into extensions
   * @returns The FHIR Extension if found, or undefined.
   */
  public findExtension(url:fhir.FhirString|string, searchNested:boolean = false):fhir.Extension|undefined {
    if (this.extension.length === 0) {
      return undefined;
    }
    const matchUrl:string = (typeof url === 'string') ? url : (url as fhir.FhirString).value ?? '';
    if (searchNested) {
      const flat:fhir.Extension[] = DomainResource.recurseForExtension(matchUrl, this.extension);
      if (flat.length === 0) {
        return undefined;
      }
      return flat[0];
    }
    return this.extension.find((ext) => (ext?.url?.value === matchUrl));
  }

  /**
   * Find all instances of an extension with a matching URL, optionally recurse into extension.extension.
   * @param url URL to search for
   * @param searchNested If the search should nest into extensions
   * @returns A new array of FHIR Extensions, with just the desired extensions
   */
  public filterExtensions(url:fhir.FhirString|string, searchNested:boolean = false):fhir.Extension[] {
    if (this.extension.length === 0) {
      return [];
    }
    const matchUrl:string = (typeof url === 'string') ? url : (url as fhir.FhirString).value ?? '';
    if (searchNested) {
      return DomainResource.recurseForExtension(matchUrl, this.extension);
    }
    return this.extension.filter((ext) => (ext?.url?.value === matchUrl))
  }

  /**
   * Internal recursive search function
   * @param url 
   * @param exts 
   * @returns A new array (flat) of matching extensions
   */
  private static recurseForExtension(url:string, exts:fhir.Extension[]):fhir.Extension[] {
    if ((!exts) || (exts.length === 0)) {
      return [];
    }
    let val:fhir.Extension[] = [];
    exts.forEach(
      (ext) => {
        if (ext && ext.url && (ext.url.value === url)) {
          val.push(ext);
          return;
        }
        if (ext && ext.extension && (ext.extension.length > 0)) {
          val.push(...this.recurseForExtension(url, ext.extension));
          return;
        }
        return;
      },
      []);
    return val;
  }

}
