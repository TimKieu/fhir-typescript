// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClaimResponse

import * as fhir from '../fhir.js';

// @ts-ignore
import { AdjudicationCodings, AdjudicationCodingType,} from '../fhirValueSets/AdjudicationCodings.js';
// @ts-ignore
import { AdjudicationCodes,  AdjudicationCodeType } from '../fhirValueSets/AdjudicationCodes.js';
// @ts-ignore
import { AdjudicationReasonCodings, AdjudicationReasonCodingType,} from '../fhirValueSets/AdjudicationReasonCodings.js';
// @ts-ignore
import { AdjudicationReasonCodes,  AdjudicationReasonCodeType } from '../fhirValueSets/AdjudicationReasonCodes.js';
// @ts-ignore
import { ServiceUsclsCodings, ServiceUsclsCodingType,} from '../fhirValueSets/ServiceUsclsCodings.js';
// @ts-ignore
import { ServiceUsclsCodes,  ServiceUsclsCodeType } from '../fhirValueSets/ServiceUsclsCodes.js';
// @ts-ignore
import { ClaimModifiersCodings, ClaimModifiersCodingType,} from '../fhirValueSets/ClaimModifiersCodings.js';
// @ts-ignore
import { ClaimModifiersCodes,  ClaimModifiersCodeType } from '../fhirValueSets/ClaimModifiersCodes.js';
// @ts-ignore
import { ExProgramCodeCodings, ExProgramCodeCodingType,} from '../fhirValueSets/ExProgramCodeCodings.js';
// @ts-ignore
import { ExProgramCodeCodes,  ExProgramCodeCodeType } from '../fhirValueSets/ExProgramCodeCodes.js';
// @ts-ignore
import { ToothCodings, ToothCodingType,} from '../fhirValueSets/ToothCodings.js';
// @ts-ignore
import { ToothCodes,  ToothCodeType } from '../fhirValueSets/ToothCodes.js';
// @ts-ignore
import { SurfaceCodings, SurfaceCodingType,} from '../fhirValueSets/SurfaceCodings.js';
// @ts-ignore
import { SurfaceCodes,  SurfaceCodeType } from '../fhirValueSets/SurfaceCodes.js';
// @ts-ignore
import { ExPaymenttypeCodings, ExPaymenttypeCodingType,} from '../fhirValueSets/ExPaymenttypeCodings.js';
// @ts-ignore
import { ExPaymenttypeCodes,  ExPaymenttypeCodeType } from '../fhirValueSets/ExPaymenttypeCodes.js';
// @ts-ignore
import { PaymentAdjustmentReasonCodings, PaymentAdjustmentReasonCodingType,} from '../fhirValueSets/PaymentAdjustmentReasonCodings.js';
// @ts-ignore
import { PaymentAdjustmentReasonCodes,  PaymentAdjustmentReasonCodeType } from '../fhirValueSets/PaymentAdjustmentReasonCodes.js';
// @ts-ignore
import { NoteTypeCodings, NoteTypeCodingType,} from '../fhirValueSets/NoteTypeCodings.js';
// @ts-ignore
import { NoteTypeCodes,  NoteTypeCodeType } from '../fhirValueSets/NoteTypeCodes.js';
// @ts-ignore
import { LanguagesCodings, LanguagesCodingType,} from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { LanguagesCodes,  LanguagesCodeType } from '../fhirValueSets/LanguagesCodes.js';
// @ts-ignore
import { AdjudicationErrorCodings, AdjudicationErrorCodingType,} from '../fhirValueSets/AdjudicationErrorCodings.js';
// @ts-ignore
import { AdjudicationErrorCodes,  AdjudicationErrorCodeType } from '../fhirValueSets/AdjudicationErrorCodes.js';
// @ts-ignore
import { FmStatusCodings, FmStatusCodingType,} from '../fhirValueSets/FmStatusCodings.js';
// @ts-ignore
import { FmStatusCodes,  FmStatusCodeType } from '../fhirValueSets/FmStatusCodes.js';
// @ts-ignore
import { ClaimTypeCodings, ClaimTypeCodingType,} from '../fhirValueSets/ClaimTypeCodings.js';
// @ts-ignore
import { ClaimTypeCodes,  ClaimTypeCodeType } from '../fhirValueSets/ClaimTypeCodes.js';
// @ts-ignore
import { ClaimSubtypeCodings, ClaimSubtypeCodingType,} from '../fhirValueSets/ClaimSubtypeCodings.js';
// @ts-ignore
import { ClaimSubtypeCodes,  ClaimSubtypeCodeType } from '../fhirValueSets/ClaimSubtypeCodes.js';
// @ts-ignore
import { ClaimUseCodings, ClaimUseCodingType,} from '../fhirValueSets/ClaimUseCodings.js';
// @ts-ignore
import { ClaimUseCodes,  ClaimUseCodeType } from '../fhirValueSets/ClaimUseCodes.js';
// @ts-ignore
import { RemittanceOutcomeCodings, RemittanceOutcomeCodingType,} from '../fhirValueSets/RemittanceOutcomeCodings.js';
// @ts-ignore
import { RemittanceOutcomeCodes,  RemittanceOutcomeCodeType } from '../fhirValueSets/RemittanceOutcomeCodes.js';
// @ts-ignore
import { PayeetypeCodings, PayeetypeCodingType,} from '../fhirValueSets/PayeetypeCodings.js';
// @ts-ignore
import { PayeetypeCodes,  PayeetypeCodeType } from '../fhirValueSets/PayeetypeCodes.js';
// @ts-ignore
import { FundsreserveCodings, FundsreserveCodingType,} from '../fhirValueSets/FundsreserveCodings.js';
// @ts-ignore
import { FundsreserveCodes,  FundsreserveCodeType } from '../fhirValueSets/FundsreserveCodes.js';
// @ts-ignore
import { FormsCodings, FormsCodingType,} from '../fhirValueSets/FormsCodings.js';
// @ts-ignore
import { FormsCodes,  FormsCodeType } from '../fhirValueSets/FormsCodes.js';
/**
 * Valid arguments for the ClaimResponseItemAdjudication type.
 */
export interface ClaimResponseItemAdjudicationArgs extends fhir.BackboneElementArgs {
  /**
   * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * For example may indicate that the funds for this benefit type have been exhausted.
   */
  reason?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example: amount submitted, eligible amount, co-payment, and benefit payable.
   */
  amount?: fhir.MoneyArgs|undefined;
  /**
   * For example: eligible percentage or co-payment percentage.
   */
  value?: fhir.FhirDecimal|number|undefined;
}

/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ClaimResponseItemAdjudication extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseItemAdjudication';
  /**
   * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * For example may indicate that the funds for this benefit type have been exhausted.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * For example: amount submitted, eligible amount, co-payment, and benefit payable.
   */
  public amount?: fhir.Money|undefined;
  /**
   * For example: eligible percentage or co-payment percentage.
   */
  public value?: fhir.FhirDecimal|undefined;
  /**
   * Default constructor for ClaimResponseItemAdjudication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseItemAdjudicationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['reason']) { this.reason = new fhir.CodeableConcept(source.reason); }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    if (source['value']) { this.value = new fhir.FhirDecimal({value: source.value}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ClaimResponse.item.adjudication.category:CodeableConcept', });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation()); }
    if (this["reason"]) { issues.push(...this.reason.doModelValidation()); }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation()); }
    if (this["value"]) { issues.push(...this.value.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseItemDetailSubDetail type.
 */
export interface ClaimResponseItemDetailSubDetailArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely reference the claim sub-detail entry.
   */
  subDetailSequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication?: fhir.ClaimResponseItemAdjudicationArgs[]|undefined;
}

/**
 * A sub-detail adjudication of a simple product or service.
 */
export class ClaimResponseItemDetailSubDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseItemDetailSubDetail';
  /**
   * A number to uniquely reference the claim sub-detail entry.
   */
  public subDetailSequence: fhir.FhirPositiveInt|null;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication?: fhir.ClaimResponseItemAdjudication[];
  /**
   * Default constructor for ClaimResponseItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseItemDetailSubDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['subDetailSequence']) { this.subDetailSequence = new fhir.FhirPositiveInt({value: source.subDetailSequence}); }
    else { this.subDetailSequence = null; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['subDetailSequence']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property subDetailSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.detail.subDetail.subDetailSequence:positiveInt', });
    }
    if (this["subDetailSequence"]) { issues.push(...this.subDetailSequence.doModelValidation()); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseItemDetail type.
 */
export interface ClaimResponseItemDetailArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely reference the claim detail entry.
   */
  detailSequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication: fhir.ClaimResponseItemAdjudicationArgs[]|null;
  /**
   * A sub-detail adjudication of a simple product or service.
   */
  subDetail?: fhir.ClaimResponseItemDetailSubDetailArgs[]|undefined;
}

/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimResponseItemDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseItemDetail';
  /**
   * A number to uniquely reference the claim detail entry.
   */
  public detailSequence: fhir.FhirPositiveInt|null;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ClaimResponseItemAdjudication[];
  /**
   * A sub-detail adjudication of a simple product or service.
   */
  public subDetail?: fhir.ClaimResponseItemDetailSubDetail[];
  /**
   * Default constructor for ClaimResponseItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseItemDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['detailSequence']) { this.detailSequence = new fhir.FhirPositiveInt({value: source.detailSequence}); }
    else { this.detailSequence = null; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseItemDetailSubDetail(x)); }
    else { this.subDetail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['detailSequence']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property detailSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.detail.detailSequence:positiveInt', });
    }
    if (this["detailSequence"]) { issues.push(...this.detailSequence.doModelValidation()); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['adjudication']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication', });
    } else if (!Array.isArray(this.adjudication)) {
      issues.push({ severity: 'error', code: 'structure',  diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication', });
    } else if (this.adjudication.length === 0) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication', });
    }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseItem type.
 */
export interface ClaimResponseItemArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely reference the claim item entries.
   */
  itemSequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  adjudication: fhir.ClaimResponseItemAdjudicationArgs[]|null;
  /**
   * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  detail?: fhir.ClaimResponseItemDetailArgs[]|undefined;
}

/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ClaimResponseItem extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseItem';
  /**
   * A number to uniquely reference the claim item entries.
   */
  public itemSequence: fhir.FhirPositiveInt|null;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: fhir.FhirPositiveInt[];
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  public adjudication: fhir.ClaimResponseItemAdjudication[];
  /**
   * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public detail?: fhir.ClaimResponseItemDetail[];
  /**
   * Default constructor for ClaimResponseItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['itemSequence']) { this.itemSequence = new fhir.FhirPositiveInt({value: source.itemSequence}); }
    else { this.itemSequence = null; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ClaimResponseItemDetail(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['itemSequence']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property itemSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.itemSequence:positiveInt', });
    }
    if (this["itemSequence"]) { issues.push(...this.itemSequence.doModelValidation()); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['adjudication']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication', });
    } else if (!Array.isArray(this.adjudication)) {
      issues.push({ severity: 'error', code: 'structure',  diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication', });
    } else if (this.adjudication.length === 0) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication', });
    }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["detail"]) { this.detail.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseAddItemDetailSubDetail type.
 */
export interface ClaimResponseAddItemDetailSubDetailArgs extends fhir.BackboneElementArgs {
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication: fhir.ClaimResponseItemAdjudicationArgs[]|null;
}

/**
 * The third-tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetailSubDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseAddItemDetailSubDetail';
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier?: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ClaimResponseItemAdjudication[];
  /**
   * Default constructor for ClaimResponseAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseAddItemDetailSubDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.detail.subDetail.productOrService:CodeableConcept', });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation()); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation()); }
    if (this["net"]) { issues.push(...this.net.doModelValidation()); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['adjudication']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication', });
    } else if (!Array.isArray(this.adjudication)) {
      issues.push({ severity: 'error', code: 'structure',  diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication', });
    } else if (this.adjudication.length === 0) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication', });
    }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseAddItemDetail type.
 */
export interface ClaimResponseAddItemDetailArgs extends fhir.BackboneElementArgs {
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication: fhir.ClaimResponseItemAdjudicationArgs[]|null;
  /**
   * The third-tier service adjudications for payor added services.
   */
  subDetail?: fhir.ClaimResponseAddItemDetailSubDetailArgs[]|undefined;
}

/**
 * The second-tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseAddItemDetail';
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier?: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ClaimResponseItemAdjudication[];
  /**
   * The third-tier service adjudications for payor added services.
   */
  public subDetail?: fhir.ClaimResponseAddItemDetailSubDetail[];
  /**
   * Default constructor for ClaimResponseAddItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseAddItemDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseAddItemDetailSubDetail(x)); }
    else { this.subDetail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.detail.productOrService:CodeableConcept', });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation()); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation()); }
    if (this["net"]) { issues.push(...this.net.doModelValidation()); }
    if (this["noteNumber"]) { this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['adjudication']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication', });
    } else if (!Array.isArray(this.adjudication)) {
      issues.push({ severity: 'error', code: 'structure',  diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication', });
    } else if (this.adjudication.length === 0) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication', });
    }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseAddItem type.
 */
export interface ClaimResponseAddItemArgs extends fhir.BackboneElementArgs {
  /**
   * Claim items which this service line is intended to replace.
   */
  itemSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  detailSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
   */
  subdetailSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  provider?: fhir.ReferenceArgs[]|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  serviced?: fhir.FhirDate|fhir.Period|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: fhir.FhirDate|string|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  location?: fhir.CodeableConcept|fhir.Address|fhir.Reference|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.AddressArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.ReferenceArgs|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * For example: Providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.CodeableConceptArgs|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * The adjudication results.
   */
  adjudication: fhir.ClaimResponseItemAdjudicationArgs[]|null;
  /**
   * The second-tier service adjudications for payor added services.
   */
  detail?: fhir.ClaimResponseAddItemDetailArgs[]|undefined;
}

/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ClaimResponseAddItem extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseAddItem';
  /**
   * Claim items which this service line is intended to replace.
   */
  public itemSequence?: fhir.FhirPositiveInt[];
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  public detailSequence?: fhir.FhirPositiveInt[];
  /**
   * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
   */
  public subdetailSequence?: fhir.FhirPositiveInt[];
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  public provider?: fhir.Reference[];
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier?: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode?: fhir.CodeableConcept[];
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public serviced?: (fhir.FhirDate|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ClaimResponse.addItem.serviced[x]
   */
  protected static readonly _fts_servicedIsChoice:true = true;
  /**
   * Where the product or service was provided.
   */
  public location?: (fhir.CodeableConcept|fhir.Address|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ClaimResponse.addItem.location[x]
   */
  protected static readonly _fts_locationIsChoice:true = true;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * For example: Providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite?: fhir.CodeableConcept[];
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  public noteNumber?: fhir.FhirPositiveInt[];
  /**
   * The adjudication results.
   */
  public adjudication: fhir.ClaimResponseItemAdjudication[];
  /**
   * The second-tier service adjudications for payor added services.
   */
  public detail?: fhir.ClaimResponseAddItemDetail[];
  /**
   * Default constructor for ClaimResponseAddItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseAddItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['itemSequence']) { this.itemSequence = source.itemSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.itemSequence = []; }
    if (source['detailSequence']) { this.detailSequence = source.detailSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.detailSequence = []; }
    if (source['subdetailSequence']) { this.subdetailSequence = source.subdetailSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.subdetailSequence = []; }
    if (source['provider']) { this.provider = source.provider.map((x) => new fhir.Reference(x)); }
    else { this.provider = []; }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['serviced']) { this.serviced = source.serviced; }
    else if (source['servicedDate']) { this.serviced = new fhir.FhirDate({value: source.servicedDate}); }
    else if (source['servicedPeriod']) { this.serviced = new fhir.Period(source.servicedPeriod); }
    if (source['location']) { this.location = source.location; }
    else if (source['locationCodeableConcept']) { this.location = new fhir.CodeableConcept(source.locationCodeableConcept); }
    else if (source['locationAddress']) { this.location = new fhir.Address(source.locationAddress); }
    else if (source['locationReference']) { this.location = new fhir.Reference(source.locationReference); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    else { this.subSite = []; }
    if (source['noteNumber']) { this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.noteNumber = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ClaimResponseAddItemDetail(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["itemSequence"]) { this.itemSequence.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["detailSequence"]) { this.detailSequence.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["subdetailSequence"]) { this.subdetailSequence.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["provider"]) { this.provider.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.productOrService:CodeableConcept', });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation()); }
    if (this["modifier"]) { this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["programCode"]) { this.programCode.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation()); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation()); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation()); }
    if (this["net"]) { issues.push(...this.net.doModelValidation()); }
    if (this["bodySite"]) { issues.push(...this.bodySite.doModelValidation()); }
    if (this["subSite"]) { this.subSite.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["noteNumber"]) { this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['adjudication']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication', });
    } else if (!Array.isArray(this.adjudication)) {
      issues.push({ severity: 'error', code: 'structure',  diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication', });
    } else if (this.adjudication.length === 0) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication', });
    }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["detail"]) { this.detail.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseTotal type.
 */
export interface ClaimResponseTotalArgs extends fhir.BackboneElementArgs {
  /**
   * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * Monetary total amount associated with the category.
   */
  amount: fhir.MoneyArgs|null;
}

/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ClaimResponseTotal extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseTotal';
  /**
   * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * Monetary total amount associated with the category.
   */
  public amount: fhir.Money|null;
  /**
   * Default constructor for ClaimResponseTotal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseTotalArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    else { this.amount = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ClaimResponse.total.category:CodeableConcept', });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation()); }
    if (!this['amount']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property amount:fhir.Money fhir: ClaimResponse.total.amount:Money', });
    }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponsePayment type.
 */
export interface ClaimResponsePaymentArgs extends fhir.BackboneElementArgs {
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  adjustment?: fhir.MoneyArgs|undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: fhir.CodeableConceptArgs|undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  date?: fhir.FhirDate|string|undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  amount: fhir.MoneyArgs|null;
  /**
   * For example: EFT number or check number.
   */
  identifier?: fhir.IdentifierArgs|undefined;
}

/**
 * Payment details for the adjudication of the claim.
 */
export class ClaimResponsePayment extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponsePayment';
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  public adjustment?: fhir.Money|undefined;
  /**
   * Reason for the payment adjustment.
   */
  public adjustmentReason?: fhir.CodeableConcept|undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  public date?: fhir.FhirDate|undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  public amount: fhir.Money|null;
  /**
   * For example: EFT number or check number.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Default constructor for ClaimResponsePayment - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponsePaymentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['adjustment']) { this.adjustment = new fhir.Money(source.adjustment); }
    if (source['adjustmentReason']) { this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason); }
    if (source['date']) { this.date = new fhir.FhirDate({value: source.date}); }
    if (source['amount']) { this.amount = new fhir.Money(source.amount); }
    else { this.amount = null; }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ClaimResponse.payment.type:CodeableConcept', });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["adjustment"]) { issues.push(...this.adjustment.doModelValidation()); }
    if (this["adjustmentReason"]) { issues.push(...this.adjustmentReason.doModelValidation()); }
    if (this["date"]) { issues.push(...this.date.doModelValidation()); }
    if (!this['amount']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property amount:fhir.Money fhir: ClaimResponse.payment.amount:Money', });
    }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation()); }
    if (this["identifier"]) { issues.push(...this.identifier.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseProcessNote type.
 */
export interface ClaimResponseProcessNoteArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify a note entry.
   */
  number?: fhir.FhirPositiveInt|number|undefined;
  /**
   * The business purpose of the note text.
   */
  type?: NoteTypeCodeType|undefined;
  /**
   * The explanation or description associated with the processing.
   */
  text: fhir.FhirString|string|undefined;
  /**
   * Only required if the language is different from the resource language.
   */
  language?: fhir.CodeableConceptArgs|undefined;
}

/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ClaimResponseProcessNote extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseProcessNote';
  /**
   * A number to uniquely identify a note entry.
   */
  public number?: fhir.FhirPositiveInt|undefined;
  /**
   * The business purpose of the note text.
   */
  public type?: NoteTypeCodeType|undefined;
  /**
   * The explanation or description associated with the processing.
   */
  public text: fhir.FhirString|null;
  /**
   * Only required if the language is different from the resource language.
   */
  public language?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimResponseProcessNote - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseProcessNoteArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['number']) { this.number = new fhir.FhirPositiveInt({value: source.number}); }
    if (source['type']) { this.type = source.type; }
    if (source['text']) { this.text = new fhir.FhirString({value: source.text}); }
    else { this.text = null; }
    if (source['language']) { this.language = new fhir.CodeableConcept(source.language); }
  }
  /**
   * Required-bound Value Set for type (ClaimResponse.processNote.type)
   */
  public static typeRequiredCoding():NoteTypeCodingType {
    return NoteTypeCodings;
  }
  /**
   * Preferred-bound Value Set for language (ClaimResponse.processNote.language)
   */
  public static languagePreferredCoding():LanguagesCodingType {
    return LanguagesCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["number"]) { issues.push(...this.number.doModelValidation()); }
    if (!this['text']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property text:fhir.FhirString fhir: ClaimResponse.processNote.text:string', });
    }
    if (this["text"]) { issues.push(...this.text.doModelValidation()); }
    if (this["language"]) { issues.push(...this.language.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseInsurance type.
 */
export interface ClaimResponseInsuranceArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: fhir.FhirBoolean|boolean|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.ReferenceArgs|null;
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: fhir.FhirString|string|undefined;
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  claimResponse?: fhir.ReferenceArgs|undefined;
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimResponseInsurance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseInsurance';
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  public focal: fhir.FhirBoolean|null;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  public businessArrangement?: fhir.FhirString|undefined;
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  public claimResponse?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimResponseInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseInsuranceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['focal']) { this.focal = new fhir.FhirBoolean({value: source.focal}); }
    else { this.focal = null; }
    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage); }
    else { this.coverage = null; }
    if (source['businessArrangement']) { this.businessArrangement = new fhir.FhirString({value: source.businessArrangement}); }
    if (source['claimResponse']) { this.claimResponse = new fhir.Reference(source.claimResponse); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ClaimResponse.insurance.sequence:positiveInt', });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation()); }
    if (!this['focal']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property focal:fhir.FhirBoolean fhir: ClaimResponse.insurance.focal:boolean', });
    }
    if (this["focal"]) { issues.push(...this.focal.doModelValidation()); }
    if (!this['coverage']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property coverage:fhir.Reference fhir: ClaimResponse.insurance.coverage:Reference', });
    }
    if (this["coverage"]) { issues.push(...this.coverage.doModelValidation()); }
    if (this["businessArrangement"]) { issues.push(...this.businessArrangement.doModelValidation()); }
    if (this["claimResponse"]) { issues.push(...this.claimResponse.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponseError type.
 */
export interface ClaimResponseErrorArgs extends fhir.BackboneElementArgs {
  /**
   * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  itemSequence?: fhir.FhirPositiveInt|number|undefined;
  /**
   * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  detailSequence?: fhir.FhirPositiveInt|number|undefined;
  /**
   * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  subDetailSequence?: fhir.FhirPositiveInt|number|undefined;
  /**
   * An error code, from a specified code system, which details why the claim could not be adjudicated.
   */
  code: fhir.CodeableConceptArgs|null;
}

/**
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
export class ClaimResponseError extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponseError';
  /**
   * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  public itemSequence?: fhir.FhirPositiveInt|undefined;
  /**
   * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  public detailSequence?: fhir.FhirPositiveInt|undefined;
  /**
   * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  public subDetailSequence?: fhir.FhirPositiveInt|undefined;
  /**
   * An error code, from a specified code system, which details why the claim could not be adjudicated.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Default constructor for ClaimResponseError - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseErrorArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['itemSequence']) { this.itemSequence = new fhir.FhirPositiveInt({value: source.itemSequence}); }
    if (source['detailSequence']) { this.detailSequence = new fhir.FhirPositiveInt({value: source.detailSequence}); }
    if (source['subDetailSequence']) { this.subDetailSequence = new fhir.FhirPositiveInt({value: source.subDetailSequence}); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["itemSequence"]) { issues.push(...this.itemSequence.doModelValidation()); }
    if (this["detailSequence"]) { issues.push(...this.detailSequence.doModelValidation()); }
    if (this["subDetailSequence"]) { issues.push(...this.subDetailSequence.doModelValidation()); }
    if (!this['code']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ClaimResponse.error.code:CodeableConcept', });
    }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimResponse type.
 */
export interface ClaimResponseArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ClaimResponse"|undefined;
  /**
   * A unique identifier assigned to this claim response.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: FmStatusCodeType|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  subType?: fhir.CodeableConceptArgs|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  use: ClaimUseCodeType|null;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * The date this resource was created.
   */
  created: fhir.FhirDateTime|string|undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  insurer: fhir.ReferenceArgs|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  requestor?: fhir.ReferenceArgs|undefined;
  /**
   * Original request resource reference.
   */
  request?: fhir.ReferenceArgs|undefined;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome: RemittanceOutcomeCodeType|null;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: fhir.FhirString|string|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: fhir.FhirString|string|undefined;
  /**
   * The time frame during which this authorization is effective.
   */
  preAuthPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  payeeType?: fhir.CodeableConceptArgs|undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  item?: fhir.ClaimResponseItemArgs[]|undefined;
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  addItem?: fhir.ClaimResponseAddItemArgs[]|undefined;
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  adjudication?: fhir.ClaimResponseItemAdjudicationArgs[]|undefined;
  /**
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  total?: fhir.ClaimResponseTotalArgs[]|undefined;
  /**
   * Payment details for the adjudication of the claim.
   */
  payment?: fhir.ClaimResponsePaymentArgs|undefined;
  /**
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  fundsReserve?: fhir.CodeableConceptArgs|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: fhir.CodeableConceptArgs|undefined;
  /**
   * Needed to permit insurers to include the actual form.
   */
  form?: fhir.AttachmentArgs|undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  processNote?: fhir.ClaimResponseProcessNoteArgs[]|undefined;
  /**
   * For example: professional reports, documents, images, clinical resources, or accident reports.
   */
  communicationRequest?: fhir.ReferenceArgs[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: fhir.ClaimResponseInsuranceArgs[]|undefined;
  /**
   * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
   */
  error?: fhir.ClaimResponseErrorArgs[]|undefined;
}

/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export class ClaimResponse extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimResponse';
  /**
   * Resource Type Name
   */
  public override resourceType: "ClaimResponse";
  /**
   * A unique identifier assigned to this claim response.
   */
  public identifier?: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: FmStatusCodeType|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  public subType?: fhir.CodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  public use: ClaimUseCodeType|null;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * The date this resource was created.
   */
  public created: fhir.FhirDateTime|null;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  public insurer: fhir.Reference|null;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public requestor?: fhir.Reference|undefined;
  /**
   * Original request resource reference.
   */
  public request?: fhir.Reference|undefined;
  /**
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  public outcome: RemittanceOutcomeCodeType|null;
  /**
   * A human readable description of the status of the adjudication.
   */
  public disposition?: fhir.FhirString|undefined;
  /**
   * This value is only present on preauthorization adjudications.
   */
  public preAuthRef?: fhir.FhirString|undefined;
  /**
   * The time frame during which this authorization is effective.
   */
  public preAuthPeriod?: fhir.Period|undefined;
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  public payeeType?: fhir.CodeableConcept|undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  public item?: fhir.ClaimResponseItem[];
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  public addItem?: fhir.ClaimResponseAddItem[];
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  public adjudication?: fhir.ClaimResponseItemAdjudication[];
  /**
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  public total?: fhir.ClaimResponseTotal[];
  /**
   * Payment details for the adjudication of the claim.
   */
  public payment?: fhir.ClaimResponsePayment|undefined;
  /**
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  public fundsReserve?: fhir.CodeableConcept|undefined;
  /**
   * May be needed to identify specific jurisdictional forms.
   */
  public formCode?: fhir.CodeableConcept|undefined;
  /**
   * Needed to permit insurers to include the actual form.
   */
  public form?: fhir.Attachment|undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  public processNote?: fhir.ClaimResponseProcessNote[];
  /**
   * For example: professional reports, documents, images, clinical resources, or accident reports.
   */
  public communicationRequest?: fhir.Reference[];
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance?: fhir.ClaimResponseInsurance[];
  /**
   * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
   */
  public error?: fhir.ClaimResponseError[];
  /**
   * Default constructor for ClaimResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimResponseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ClaimResponse';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['subType']) { this.subType = new fhir.CodeableConcept(source.subType); }
    if (source['use']) { this.use = source.use; }
    else { this.use = null; }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['created']) { this.created = new fhir.FhirDateTime({value: source.created}); }
    else { this.created = null; }
    if (source['insurer']) { this.insurer = new fhir.Reference(source.insurer); }
    else { this.insurer = null; }
    if (source['requestor']) { this.requestor = new fhir.Reference(source.requestor); }
    if (source['request']) { this.request = new fhir.Reference(source.request); }
    if (source['outcome']) { this.outcome = source.outcome; }
    else { this.outcome = null; }
    if (source['disposition']) { this.disposition = new fhir.FhirString({value: source.disposition}); }
    if (source['preAuthRef']) { this.preAuthRef = new fhir.FhirString({value: source.preAuthRef}); }
    if (source['preAuthPeriod']) { this.preAuthPeriod = new fhir.Period(source.preAuthPeriod); }
    if (source['payeeType']) { this.payeeType = new fhir.CodeableConcept(source.payeeType); }
    if (source['item']) { this.item = source.item.map((x) => new fhir.ClaimResponseItem(x)); }
    else { this.item = []; }
    if (source['addItem']) { this.addItem = source.addItem.map((x) => new fhir.ClaimResponseAddItem(x)); }
    else { this.addItem = []; }
    if (source['adjudication']) { this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x)); }
    else { this.adjudication = []; }
    if (source['total']) { this.total = source.total.map((x) => new fhir.ClaimResponseTotal(x)); }
    else { this.total = []; }
    if (source['payment']) { this.payment = new fhir.ClaimResponsePayment(source.payment); }
    if (source['fundsReserve']) { this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve); }
    if (source['formCode']) { this.formCode = new fhir.CodeableConcept(source.formCode); }
    if (source['form']) { this.form = new fhir.Attachment(source.form); }
    if (source['processNote']) { this.processNote = source.processNote.map((x) => new fhir.ClaimResponseProcessNote(x)); }
    else { this.processNote = []; }
    if (source['communicationRequest']) { this.communicationRequest = source.communicationRequest.map((x) => new fhir.Reference(x)); }
    else { this.communicationRequest = []; }
    if (source['insurance']) { this.insurance = source.insurance.map((x) => new fhir.ClaimResponseInsurance(x)); }
    else { this.insurance = []; }
    if (source['error']) { this.error = source.error.map((x) => new fhir.ClaimResponseError(x)); }
    else { this.error = []; }
  }
  /**
   * Required-bound Value Set for status (ClaimResponse.status)
   */
  public static statusRequiredCoding():FmStatusCodingType {
    return FmStatusCodings;
  }
  /**
   * Extensible-bound Value Set for type (ClaimResponse.type)
   */
  public static typeExtensibleCoding():ClaimTypeCodingType {
    return ClaimTypeCodings;
  }
  /**
   * Required-bound Value Set for use (ClaimResponse.use)
   */
  public static useRequiredCoding():ClaimUseCodingType {
    return ClaimUseCodings;
  }
  /**
   * Required-bound Value Set for outcome (ClaimResponse.outcome)
   */
  public static outcomeRequiredCoding():RemittanceOutcomeCodingType {
    return RemittanceOutcomeCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property resourceType:"ClaimResponse" fhir: ClaimResponse.resourceType:"ClaimResponse"', });
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property status:FmStatusCodeType fhir: ClaimResponse.status:code', });
    }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ClaimResponse.type:CodeableConcept', });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["subType"]) { issues.push(...this.subType.doModelValidation()); }
    if (!this['use']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property use:ClaimUseCodeType fhir: ClaimResponse.use:code', });
    }
    if (!this['patient']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property patient:fhir.Reference fhir: ClaimResponse.patient:Reference', });
    }
    if (this["patient"]) { issues.push(...this.patient.doModelValidation()); }
    if (!this['created']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: ClaimResponse.created:dateTime', });
    }
    if (this["created"]) { issues.push(...this.created.doModelValidation()); }
    if (!this['insurer']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property insurer:fhir.Reference fhir: ClaimResponse.insurer:Reference', });
    }
    if (this["insurer"]) { issues.push(...this.insurer.doModelValidation()); }
    if (this["requestor"]) { issues.push(...this.requestor.doModelValidation()); }
    if (this["request"]) { issues.push(...this.request.doModelValidation()); }
    if (!this['outcome']) {
      issues.push({ severity: 'error', code: 'required',  diagnostics: 'Missing required property outcome:RemittanceOutcomeCodeType fhir: ClaimResponse.outcome:code', });
    }
    if (this["disposition"]) { issues.push(...this.disposition.doModelValidation()); }
    if (this["preAuthRef"]) { issues.push(...this.preAuthRef.doModelValidation()); }
    if (this["preAuthPeriod"]) { issues.push(...this.preAuthPeriod.doModelValidation()); }
    if (this["payeeType"]) { issues.push(...this.payeeType.doModelValidation()); }
    if (this["item"]) { this.item.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["addItem"]) { this.addItem.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["adjudication"]) { this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["total"]) { this.total.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["payment"]) { issues.push(...this.payment.doModelValidation()); }
    if (this["fundsReserve"]) { issues.push(...this.fundsReserve.doModelValidation()); }
    if (this["formCode"]) { issues.push(...this.formCode.doModelValidation()); }
    if (this["form"]) { issues.push(...this.form.doModelValidation()); }
    if (this["processNote"]) { this.processNote.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["communicationRequest"]) { this.communicationRequest.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["insurance"]) { this.insurance.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["error"]) { this.error.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
