// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CatalogEntry

import * as fhir from '../fhir.js';

// @ts-ignore
import { RelationTypeCodings, RelationTypeCodingType,} from '../fhirValueSets/RelationTypeCodings.js';
// @ts-ignore
import { RelationTypeCodes,  RelationTypeCodeType } from '../fhirValueSets/RelationTypeCodes.js';
// @ts-ignore
import { PublicationStatusCodings, PublicationStatusCodingType,} from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
// @ts-ignore
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
/**
 * Valid arguments for the CatalogEntryRelatedEntry type.
 */
export interface CatalogEntryRelatedEntryArgs extends fhir.BackboneElementArgs {
  /**
   * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
   */
  relationtype: RelationTypeCodeType|null;
  /**
   * The reference to the related item.
   */
  item: fhir.ReferenceArgs|null;
}

/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'CatalogEntryRelatedEntry';
  /**
   * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
   */
  public relationtype: RelationTypeCodeType|null;
  /**
   * The reference to the related item.
   */
  public item: fhir.Reference|null;
  /**
   * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CatalogEntryRelatedEntryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['relationtype']) { this.relationtype = source.relationtype; }
    else { this.relationtype = null; }
    if (source['item']) { this.item = new fhir.Reference(source.item); }
    else { this.item = null; }
  }
  /**
   * Required-bound Value Set for relationtype (CatalogEntry.relatedEntry.relationtype)
   */
  public static relationtypeRequiredCoding():RelationTypeCodingType {
    return RelationTypeCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['relationtype']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property relationtype:RelationTypeCodeType fhir: CatalogEntry.relatedEntry.relationtype:code', }));
    }
    if (!this['item']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property item:fhir.Reference fhir: CatalogEntry.relatedEntry.item:Reference', }));
    }
    if (this["item"]) { outcome.issue!.push(...this.item.doModelValidation().issue!); }
    return outcome;
  }
}
/**
 * Valid arguments for the CatalogEntry type.
 */
export interface CatalogEntryArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "CatalogEntry"|undefined;
  /**
   * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The type of item - medication, device, service, protocol or other.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Whether the entry represents an orderable item.
   */
  orderable: fhir.FhirBoolean|boolean|undefined;
  /**
   * The item in a catalog or definition.
   */
  referencedItem: fhir.ReferenceArgs|null;
  /**
   * Used in supporting related concepts, e.g. NDC to RxNorm.
   */
  additionalIdentifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Classes of devices, or ATC for medication.
   */
  classification?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
   */
  status?: PublicationStatusCodeType|undefined;
  /**
   * The time period in which this catalog entry is expected to be active.
   */
  validityPeriod?: fhir.PeriodArgs|undefined;
  /**
   * The date until which this catalog entry is expected to be active.
   */
  validTo?: fhir.FhirDateTime|string|undefined;
  /**
   * Perhaps not needed - if we use fhir resource metadata.
   */
  lastUpdated?: fhir.FhirDateTime|string|undefined;
  /**
   * Used for examplefor Out of Formulary, or any specifics.
   */
  additionalCharacteristic?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * User for example for ATC classification, or.
   */
  additionalClassification?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Used for example, to point to a substance, or to a device used to administer a medication.
   */
  relatedEntry?: fhir.CatalogEntryRelatedEntryArgs[]|undefined;
}

/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'CatalogEntry';
  /**
   * Resource Type Name
   */
  public resourceType: "CatalogEntry";
  /**
   * Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.
   */
  public identifier?: fhir.Identifier[];
  /**
   * The type of item - medication, device, service, protocol or other.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Whether the entry represents an orderable item.
   */
  public orderable: fhir.FhirBoolean|null;
  /**
   * The item in a catalog or definition.
   */
  public referencedItem: fhir.Reference|null;
  /**
   * Used in supporting related concepts, e.g. NDC to RxNorm.
   */
  public additionalIdentifier?: fhir.Identifier[];
  /**
   * Classes of devices, or ATC for medication.
   */
  public classification?: fhir.CodeableConcept[];
  /**
   * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
   */
  public status?: PublicationStatusCodeType|undefined;
  /**
   * The time period in which this catalog entry is expected to be active.
   */
  public validityPeriod?: fhir.Period|undefined;
  /**
   * The date until which this catalog entry is expected to be active.
   */
  public validTo?: fhir.FhirDateTime|undefined;
  /**
   * Perhaps not needed - if we use fhir resource metadata.
   */
  public lastUpdated?: fhir.FhirDateTime|undefined;
  /**
   * Used for examplefor Out of Formulary, or any specifics.
   */
  public additionalCharacteristic?: fhir.CodeableConcept[];
  /**
   * User for example for ATC classification, or.
   */
  public additionalClassification?: fhir.CodeableConcept[];
  /**
   * Used for example, to point to a substance, or to a device used to administer a medication.
   */
  public relatedEntry?: fhir.CatalogEntryRelatedEntry[];
  /**
   * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CatalogEntryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'CatalogEntry';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['orderable']) { this.orderable = new fhir.FhirBoolean({value: source.orderable}); }
    else { this.orderable = null; }
    if (source['referencedItem']) { this.referencedItem = new fhir.Reference(source.referencedItem); }
    else { this.referencedItem = null; }
    if (source['additionalIdentifier']) { this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x)); }
    else { this.additionalIdentifier = []; }
    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.CodeableConcept(x)); }
    else { this.classification = []; }
    if (source['status']) { this.status = source.status; }
    if (source['validityPeriod']) { this.validityPeriod = new fhir.Period(source.validityPeriod); }
    if (source['validTo']) { this.validTo = new fhir.FhirDateTime({value: source.validTo}); }
    if (source['lastUpdated']) { this.lastUpdated = new fhir.FhirDateTime({value: source.lastUpdated}); }
    if (source['additionalCharacteristic']) { this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x)); }
    else { this.additionalCharacteristic = []; }
    if (source['additionalClassification']) { this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x)); }
    else { this.additionalClassification = []; }
    if (source['relatedEntry']) { this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x)); }
    else { this.relatedEntry = []; }
  }
  /**
   * Required-bound Value Set for status (CatalogEntry.status)
   */
  public static statusRequiredCoding():PublicationStatusCodingType {
    return PublicationStatusCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:"CatalogEntry" fhir: CatalogEntry.resourceType:"CatalogEntry"', }));
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (!this['orderable']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property orderable:fhir.FhirBoolean fhir: CatalogEntry.orderable:boolean', }));
    }
    if (this["orderable"]) { outcome.issue!.push(...this.orderable.doModelValidation().issue!); }
    if (!this['referencedItem']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property referencedItem:fhir.Reference fhir: CatalogEntry.referencedItem:Reference', }));
    }
    if (this["referencedItem"]) { outcome.issue!.push(...this.referencedItem.doModelValidation().issue!); }
    if (this["additionalIdentifier"]) { this.additionalIdentifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["classification"]) { this.classification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["validityPeriod"]) { outcome.issue!.push(...this.validityPeriod.doModelValidation().issue!); }
    if (this["validTo"]) { outcome.issue!.push(...this.validTo.doModelValidation().issue!); }
    if (this["lastUpdated"]) { outcome.issue!.push(...this.lastUpdated.doModelValidation().issue!); }
    if (this["additionalCharacteristic"]) { this.additionalCharacteristic.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["additionalClassification"]) { this.additionalClassification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["relatedEntry"]) { this.relatedEntry.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
}
