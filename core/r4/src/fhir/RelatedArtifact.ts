// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: RelatedArtifact

import * as fhir from '../fhir.js';

// @ts-ignore
import { RelatedArtifactTypeCodings, RelatedArtifactTypeCodingType,} from '../fhirValueSets/RelatedArtifactTypeCodings.js';
// @ts-ignore
import { RelatedArtifactTypeCodes,  RelatedArtifactTypeCodeType } from '../fhirValueSets/RelatedArtifactTypeCodes.js';
/**
 * Valid arguments for the RelatedArtifact type.
 */
export interface RelatedArtifactArgs extends fhir.FhirElementArgs {
  /**
   * The type of relationship to the related artifact.
   */
  type: fhir.FhirCode<RelatedArtifactTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
   */
  label?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.label
   */
  _label?:fhir.FhirElementArgs;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  display?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.display
   */
  _display?:fhir.FhirElementArgs;
  /**
   * Additional structured information about citations should be captured as extensions.
   */
  citation?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.citation
   */
  _citation?:fhir.FhirElementArgs;
  /**
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  url?: fhir.FhirUrl|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  document?: fhir.AttachmentArgs|undefined;
  /**
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  resource?: fhir.FhirCanonical|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.resource
   */
  _resource?:fhir.FhirElementArgs;
}

/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export class RelatedArtifact extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'RelatedArtifact';
  /**
   * The type of relationship to the related artifact.
   */
  public type: fhir.FhirCode<RelatedArtifactTypeCodeType>|null;
  /**
   * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
   */
  public label?: fhir.FhirString|undefined;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  public display?: fhir.FhirString|undefined;
  /**
   * Additional structured information about citations should be captured as extensions.
   */
  public citation?: fhir.FhirMarkdown|undefined;
  /**
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  public url?: fhir.FhirUrl|undefined;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  public document?: fhir.Attachment|undefined;
  /**
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  public resource?: fhir.FhirCanonical|undefined;
  /**
   * Default constructor for RelatedArtifact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RelatedArtifactArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode<RelatedArtifactTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<RelatedArtifactTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['label']) { this.label = new fhir.FhirString({value: source.label}); }
    if (source['_label']) {
      if (this.label) { this.label.addExtendedProperties(source._label!); }
      else { this.label = new fhir.FhirString(source._label as Partial<fhir.FhirStringArgs>); }
    }
    if (source['display']) { this.display = new fhir.FhirString({value: source.display}); }
    if (source['_display']) {
      if (this.display) { this.display.addExtendedProperties(source._display!); }
      else { this.display = new fhir.FhirString(source._display as Partial<fhir.FhirStringArgs>); }
    }
    if (source['citation']) { this.citation = new fhir.FhirMarkdown({value: source.citation}); }
    if (source['_citation']) {
      if (this.citation) { this.citation.addExtendedProperties(source._citation!); }
      else { this.citation = new fhir.FhirMarkdown(source._citation as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['url']) { this.url = new fhir.FhirUrl({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUrl(source._url as Partial<fhir.FhirUrlArgs>); }
    }
    if (source['document']) { this.document = new fhir.Attachment(source.document); }
    if (source['resource']) { this.resource = new fhir.FhirCanonical({value: source.resource}); }
    if (source['_resource']) {
      if (this.resource) { this.resource.addExtendedProperties(source._resource!); }
      else { this.resource = new fhir.FhirCanonical(source._resource as Partial<fhir.FhirCanonicalArgs>); }
    }
  }
  /**
   * Required-bound Value Set for type (RelatedArtifact.type)
   */
  public static get typeRequiredCodes() {
    return RelatedArtifactTypeCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'RelatedArtifact' }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: RelatedArtifact.type:code', expression: [expression] });
    }
    if (this['type'] && (!Object.values(RelatedArtifactTypeCodes).includes(this.type.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (RelatedArtifact.type) of type code is missing code for Required binding to: RelatedArtifactType', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["label"]) { issues.push(...this.label.doModelValidation(expression+'.label')); }
    if (this["display"]) { issues.push(...this.display.doModelValidation(expression+'.display')); }
    if (this["citation"]) { issues.push(...this.citation.doModelValidation(expression+'.citation')); }
    if (this["url"]) { issues.push(...this.url.doModelValidation(expression+'.url')); }
    if (this["document"]) { issues.push(...this.document.doModelValidation(expression+'.document')); }
    if (this["resource"]) { issues.push(...this.resource.doModelValidation(expression+'.resource')); }
    return issues;
  }
}
