// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MeasureReport

import * as fhir from '../fhir.js';

// @ts-ignore
import { MeasurePopulationCodes,  MeasurePopulationCodeType } from '../fhirValueSets/MeasurePopulationCodes.js';
// @ts-ignore
import { MeasurePopulationVsValidation } from '../fhirValueSets/MeasurePopulationVsValidation.js';
// @ts-ignore
import { MeasureReportStatusCodes,  MeasureReportStatusCodeType } from '../fhirValueSets/MeasureReportStatusCodes.js';
// @ts-ignore
import { MeasureReportStatusVsValidation } from '../fhirValueSets/MeasureReportStatusVsValidation.js';
// @ts-ignore
import { MeasureReportTypeCodes,  MeasureReportTypeCodeType } from '../fhirValueSets/MeasureReportTypeCodes.js';
// @ts-ignore
import { MeasureReportTypeVsValidation } from '../fhirValueSets/MeasureReportTypeVsValidation.js';
// @ts-ignore
import { MeasureImprovementNotationCodes,  MeasureImprovementNotationCodeType } from '../fhirValueSets/MeasureImprovementNotationCodes.js';
// @ts-ignore
import { MeasureImprovementNotationVsValidation } from '../fhirValueSets/MeasureImprovementNotationVsValidation.js';
/**
 * Valid arguments for the MeasureReportGroupPopulation type.
 */
export interface MeasureReportGroupPopulationArgs extends fhir.BackboneElementArgs {
  /**
   * The type of the population.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The number of members of the population.
   */
  count?: fhir.FhirInteger|number|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.group.population.count
   */
  _count?:fhir.FhirElementArgs;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
   */
  subjectResults?: fhir.ReferenceArgs|undefined;
}

/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export class MeasureReportGroupPopulation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReportGroupPopulation';
  /**
   * The type of the population.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The number of members of the population.
   */
  public count?: fhir.FhirInteger|undefined;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
   */
  public subjectResults?: fhir.Reference|undefined;
  /**
   * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportGroupPopulationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code, options); }
    if (source['count'] !== undefined) { this.count = new fhir.FhirInteger({value: source.count}, options); }
    if (source['_count']) {
      if (this.count) { this.count.addExtendedProperties(source._count!); }
      else { this.count = new fhir.FhirInteger(source._count as Partial<fhir.FhirIntegerArgs>, options); }
    }
    if (source['subjectResults']) { this.subjectResults = new fhir.Reference(source.subjectResults, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport.group.population' }
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOS('count',exp));
    iss.push(...this.vOS('subjectResults',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MeasureReportGroupStratifierStratumComponent type.
 */
export interface MeasureReportGroupStratifierStratumComponentArgs extends fhir.BackboneElementArgs {
  /**
   * The code for the stratum component value.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * The stratum component value.
   */
  value: fhir.CodeableConceptArgs|null;
}

/**
 * A stratifier component value.
 */
export class MeasureReportGroupStratifierStratumComponent extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReportGroupStratifierStratumComponent';
  /**
   * The code for the stratum component value.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The stratum component value.
   */
  public value: fhir.CodeableConcept|null;
  /**
   * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportGroupStratifierStratumComponentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code, options); }
    else { this.code = null; }
    if (source['value']) { this.value = new fhir.CodeableConcept(source.value, options); }
    else { this.value = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport.group.stratifier.stratum.component' }
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vRS('value',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MeasureReportGroupStratifierStratumPopulation type.
 */
export interface MeasureReportGroupStratifierStratumPopulationArgs extends fhir.BackboneElementArgs {
  /**
   * The type of the population.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The number of members of the population in this stratum.
   */
  count?: fhir.FhirInteger|number|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.group.stratifier.stratum.population.count
   */
  _count?:fhir.FhirElementArgs;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
   */
  subjectResults?: fhir.ReferenceArgs|undefined;
}

/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export class MeasureReportGroupStratifierStratumPopulation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReportGroupStratifierStratumPopulation';
  /**
   * The type of the population.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The number of members of the population in this stratum.
   */
  public count?: fhir.FhirInteger|undefined;
  /**
   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
   */
  public subjectResults?: fhir.Reference|undefined;
  /**
   * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportGroupStratifierStratumPopulationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code, options); }
    if (source['count'] !== undefined) { this.count = new fhir.FhirInteger({value: source.count}, options); }
    if (source['_count']) {
      if (this.count) { this.count.addExtendedProperties(source._count!); }
      else { this.count = new fhir.FhirInteger(source._count as Partial<fhir.FhirIntegerArgs>, options); }
    }
    if (source['subjectResults']) { this.subjectResults = new fhir.Reference(source.subjectResults, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport.group.stratifier.stratum.population' }
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOS('count',exp));
    iss.push(...this.vOS('subjectResults',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MeasureReportGroupStratifierStratum type.
 */
export interface MeasureReportGroupStratifierStratumArgs extends fhir.BackboneElementArgs {
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  value?: fhir.CodeableConceptArgs|undefined;
  /**
   * A stratifier component value.
   */
  component?: fhir.MeasureReportGroupStratifierStratumComponentArgs[]|undefined;
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  population?: fhir.MeasureReportGroupStratifierStratumPopulationArgs[]|undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScore?: fhir.QuantityArgs|undefined;
}

/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export class MeasureReportGroupStratifierStratum extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReportGroupStratifierStratum';
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  public value?: fhir.CodeableConcept|undefined;
  /**
   * A stratifier component value.
   */
  public component: fhir.MeasureReportGroupStratifierStratumComponent[];
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  public population: fhir.MeasureReportGroupStratifierStratumPopulation[];
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  public measureScore?: fhir.Quantity|undefined;
  /**
   * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportGroupStratifierStratumArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value']) { this.value = new fhir.CodeableConcept(source.value, options); }
    if (source['component']) { this.component = source.component.map((x) => new fhir.MeasureReportGroupStratifierStratumComponent(x, options)); }
    else { this.component = []; }
    if (source['population']) { this.population = source.population.map((x) => new fhir.MeasureReportGroupStratifierStratumPopulation(x, options)); }
    else { this.population = []; }
    if (source['measureScore']) { this.measureScore = new fhir.Quantity(source.measureScore, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport.group.stratifier.stratum' }
    iss.push(...this.vOS('value',exp));
    iss.push(...this.vOA('component',exp));
    iss.push(...this.vOA('population',exp));
    iss.push(...this.vOS('measureScore',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MeasureReportGroupStratifier type.
 */
export interface MeasureReportGroupStratifierArgs extends fhir.BackboneElementArgs {
  /**
   * The meaning of this stratifier, as defined in the measure definition.
   */
  code?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  stratum?: fhir.MeasureReportGroupStratifierStratumArgs[]|undefined;
}

/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export class MeasureReportGroupStratifier extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReportGroupStratifier';
  /**
   * The meaning of this stratifier, as defined in the measure definition.
   */
  public code: fhir.CodeableConcept[];
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  public stratum: fhir.MeasureReportGroupStratifierStratum[];
  /**
   * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportGroupStratifierArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = source.code.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.code = []; }
    if (source['stratum']) { this.stratum = source.stratum.map((x) => new fhir.MeasureReportGroupStratifierStratum(x, options)); }
    else { this.stratum = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport.group.stratifier' }
    iss.push(...this.vOA('code',exp));
    iss.push(...this.vOA('stratum',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MeasureReportGroup type.
 */
export interface MeasureReportGroupArgs extends fhir.BackboneElementArgs {
  /**
   * The meaning of the population group as defined in the measure definition.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  population?: fhir.MeasureReportGroupPopulationArgs[]|undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScore?: fhir.QuantityArgs|undefined;
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  stratifier?: fhir.MeasureReportGroupStratifierArgs[]|undefined;
}

/**
 * The results of the calculation, one for each population group in the measure.
 */
export class MeasureReportGroup extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReportGroup';
  /**
   * The meaning of the population group as defined in the measure definition.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  public population: fhir.MeasureReportGroupPopulation[];
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  public measureScore?: fhir.Quantity|undefined;
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  public stratifier: fhir.MeasureReportGroupStratifier[];
  /**
   * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportGroupArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code, options); }
    if (source['population']) { this.population = source.population.map((x) => new fhir.MeasureReportGroupPopulation(x, options)); }
    else { this.population = []; }
    if (source['measureScore']) { this.measureScore = new fhir.Quantity(source.measureScore, options); }
    if (source['stratifier']) { this.stratifier = source.stratifier.map((x) => new fhir.MeasureReportGroupStratifier(x, options)); }
    else { this.stratifier = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport.group' }
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOA('population',exp));
    iss.push(...this.vOS('measureScore',exp));
    iss.push(...this.vOA('stratifier',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MeasureReport type.
 */
export interface MeasureReportArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MeasureReport"|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: fhir.FhirCode<MeasureReportStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
   */
  type: fhir.FhirCode<MeasureReportTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A reference to the Measure that was calculated to produce this report.
   */
  measure: fhir.FhirCanonical|string|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.measure
   */
  _measure?:fhir.FhirElementArgs;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * The date this measure report was generated.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: MeasureReport.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * The individual, location, or organization that is reporting the data.
   */
  reporter?: fhir.ReferenceArgs|undefined;
  /**
   * The reporting period for which the report was calculated.
   */
  period: fhir.PeriodArgs|null;
  /**
   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
   */
  improvementNotation?: fhir.CodeableConceptArgs|undefined;
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  group?: fhir.MeasureReportGroupArgs[]|undefined;
  /**
   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
   */
  evaluatedResource?: fhir.ReferenceArgs[]|undefined;
}

/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export class MeasureReport extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MeasureReport';
  /**
   * Resource Type Name
   */
  public override resourceType: "MeasureReport";
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  public identifier: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: fhir.FhirCode<MeasureReportStatusCodeType>|null;
  /**
   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
   */
  public type: fhir.FhirCode<MeasureReportTypeCodeType>|null;
  /**
   * A reference to the Measure that was calculated to produce this report.
   */
  public measure: fhir.FhirCanonical|null;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * The date this measure report was generated.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * The individual, location, or organization that is reporting the data.
   */
  public reporter?: fhir.Reference|undefined;
  /**
   * The reporting period for which the report was calculated.
   */
  public period: fhir.Period|null;
  /**
   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
   */
  public improvementNotation?: fhir.CodeableConcept|undefined;
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  public group: fhir.MeasureReportGroup[];
  /**
   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.
   */
  public evaluatedResource: fhir.Reference[];
  /**
   * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MeasureReportArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MeasureReport';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['status'] !== undefined) { this.status = new fhir.FhirCode<MeasureReportStatusCodeType>({value: source.status}, options); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<MeasureReportStatusCodeType>(source._status as Partial<fhir.FhirCode>, options); }
    }
    if (source['type'] !== undefined) { this.type = new fhir.FhirCode<MeasureReportTypeCodeType>({value: source.type}, options); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<MeasureReportTypeCodeType>(source._type as Partial<fhir.FhirCode>, options); }
    }
    if (source['measure'] !== undefined) { this.measure = new fhir.FhirCanonical({value: source.measure}, options); }
    else { this.measure = null; }
    if (source['_measure']) {
      if (this.measure) { this.measure.addExtendedProperties(source._measure!); }
      else { this.measure = new fhir.FhirCanonical(source._measure as Partial<fhir.FhirCanonicalArgs>, options); }
    }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject, options); }
    if (source['date'] !== undefined) { this.date = new fhir.FhirDateTime({value: source.date}, options); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['reporter']) { this.reporter = new fhir.Reference(source.reporter, options); }
    if (source['period']) { this.period = new fhir.Period(source.period, options); }
    else { this.period = null; }
    if (source['improvementNotation']) { this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation, options); }
    if (source['group']) { this.group = source.group.map((x) => new fhir.MeasureReportGroup(x, options)); }
    else { this.group = []; }
    if (source['evaluatedResource']) { this.evaluatedResource = source.evaluatedResource.map((x) => new fhir.Reference(x, options)); }
    else { this.evaluatedResource = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MeasureReport' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vRSV('status',exp,'MeasureReportStatus',MeasureReportStatusVsValidation,'r'));
    iss.push(...this.vRSV('type',exp,'MeasureReportType',MeasureReportTypeVsValidation,'r'));
    iss.push(...this.vRS('measure',exp));
    iss.push(...this.vOS('subject',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('reporter',exp));
    iss.push(...this.vRS('period',exp));
    iss.push(...this.vOSV('improvementNotation',exp,'MeasureImprovementNotation',MeasureImprovementNotationVsValidation,'r'));
    iss.push(...this.vOA('group',exp));
    iss.push(...this.vOA('evaluatedResource',exp));
    return iss;
  }
}
