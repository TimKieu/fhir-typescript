// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CodeSystem

import * as fhir from '../fhir.js';

// @ts-ignore
import { FilterOperatorCodes,  FilterOperatorCodeType } from '../fhirValueSets/FilterOperatorCodes.js';
// @ts-ignore
import { FilterOperatorVsValidation } from '../fhirValueSets/FilterOperatorVsValidation.js';
// @ts-ignore
import { ConceptPropertyTypeCodes,  ConceptPropertyTypeCodeType } from '../fhirValueSets/ConceptPropertyTypeCodes.js';
// @ts-ignore
import { ConceptPropertyTypeVsValidation } from '../fhirValueSets/ConceptPropertyTypeVsValidation.js';
// @ts-ignore
import { LanguagesCodes,  LanguagesCodeType } from '../fhirValueSets/LanguagesCodes.js';
// @ts-ignore
import { LanguagesVsValidation } from '../fhirValueSets/LanguagesVsValidation.js';
// @ts-ignore
import { DesignationUseCodes,  DesignationUseCodeType } from '../fhirValueSets/DesignationUseCodes.js';
// @ts-ignore
import { DesignationUseVsValidation } from '../fhirValueSets/DesignationUseVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { CodesystemHierarchyMeaningCodes,  CodesystemHierarchyMeaningCodeType } from '../fhirValueSets/CodesystemHierarchyMeaningCodes.js';
// @ts-ignore
import { CodesystemHierarchyMeaningVsValidation } from '../fhirValueSets/CodesystemHierarchyMeaningVsValidation.js';
// @ts-ignore
import { CodesystemContentModeCodes,  CodesystemContentModeCodeType } from '../fhirValueSets/CodesystemContentModeCodes.js';
// @ts-ignore
import { CodesystemContentModeVsValidation } from '../fhirValueSets/CodesystemContentModeVsValidation.js';
/**
 * Valid arguments for the CodeSystemFilter type.
 */
export interface CodeSystemFilterArgs extends fhir.BackboneElementArgs {
  /**
   * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
   */
  code: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.filter.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * A description of how or why the filter is used.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.filter.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * A list of operators that can be used with the filter.
   */
  operator: fhir.FhirCode<FilterOperatorCodeType>[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.filter.operator
   */
  _operator?:(fhir.FhirElementArgs|null)[];
  /**
   * A description of what the value for the filter should be.
   */
  value: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.filter.value
   */
  _value?:fhir.FhirElementArgs;
}

/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export class CodeSystemFilter extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeSystemFilter';
  /**
   * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
   */
  public code: fhir.FhirCode|null;
  /**
   * A description of how or why the filter is used.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * A list of operators that can be used with the filter.
   */
  public operator: fhir.FhirCode<FilterOperatorCodeType>[];
  /**
   * A description of what the value for the filter should be.
   */
  public value: fhir.FhirString|null;
  /**
   * Default constructor for CodeSystemFilter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeSystemFilterArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode(source._code as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['operator']) { this.operator = source.operator.map((x) => new fhir.FhirCode<FilterOperatorCodeType>({value: x})); }
    else { this.operator = []; }
    if (source['_operator']) {
      source._operator.forEach((x,i) => {
        if (this.operator.length >= i) { if (x) { this.operator[i].addExtendedProperties(x); } }
        else { if (x) { this.operator.push(new fhir.FhirCode<FilterOperatorCodeType>(x as Partial<fhir.FhirCode>)); } }
      });
    }
    if (source['value']) { this.value = new fhir.FhirString({value: source.value}); }
    else { this.value = null; }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirString(source._value as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'CodeSystem.filter' }
    this.vReqS('code',expression)
    this.vOptS('description',expression)
    this.vReqAV('operator',expression,'FilterOperator',FilterOperatorVsValidation,'r')
    this.vReqS('value',expression)
    return issues;
  }
}
/**
 * Valid arguments for the CodeSystemProperty type.
 */
export interface CodeSystemPropertyArgs extends fhir.BackboneElementArgs {
  /**
   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
   */
  code: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  uri?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.uri
   */
  _uri?:fhir.FhirElementArgs;
  /**
   * A description of the property- why it is defined, and how its value might be used.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
   */
  type: fhir.FhirCode<ConceptPropertyTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.property.type
   */
  _type?:fhir.FhirElementArgs;
}

/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export class CodeSystemProperty extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeSystemProperty';
  /**
   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
   */
  public code: fhir.FhirCode|null;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  public uri?: fhir.FhirUri|undefined;
  /**
   * A description of the property- why it is defined, and how its value might be used.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
   */
  public type: fhir.FhirCode<ConceptPropertyTypeCodeType>|null;
  /**
   * Default constructor for CodeSystemProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeSystemPropertyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode(source._code as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['uri']) { this.uri = new fhir.FhirUri({value: source.uri}); }
    if (source['_uri']) {
      if (this.uri) { this.uri.addExtendedProperties(source._uri!); }
      else { this.uri = new fhir.FhirUri(source._uri as Partial<fhir.FhirUriArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirCode<ConceptPropertyTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<ConceptPropertyTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'CodeSystem.property' }
    this.vReqS('code',expression)
    this.vOptS('uri',expression)
    this.vOptS('description',expression)
    this.vReqSV('type',expression,'ConceptPropertyType',ConceptPropertyTypeVsValidation,'r')
    return issues;
  }
}
/**
 * Valid arguments for the CodeSystemConceptDesignation type.
 */
export interface CodeSystemConceptDesignationArgs extends fhir.BackboneElementArgs {
  /**
   * In the absence of a language, the resource language applies.
   */
  language?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.designation.language
   */
  _language?:fhir.FhirElementArgs;
  /**
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  use?: fhir.CodingArgs|undefined;
  /**
   * The text value for this designation.
   */
  value: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.designation.value
   */
  _value?:fhir.FhirElementArgs;
}

/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class CodeSystemConceptDesignation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeSystemConceptDesignation';
  /**
   * In the absence of a language, the resource language applies.
   */
  public language?: fhir.FhirCode|undefined;
  /**
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  public use?: fhir.Coding|undefined;
  /**
   * The text value for this designation.
   */
  public value: fhir.FhirString|null;
  /**
   * Default constructor for CodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeSystemConceptDesignationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['language']) { this.language = new fhir.FhirCode({value: source.language}); }
    if (source['_language']) {
      if (this.language) { this.language.addExtendedProperties(source._language!); }
      else { this.language = new fhir.FhirCode(source._language as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['use']) { this.use = new fhir.Coding(source.use); }
    if (source['value']) { this.value = new fhir.FhirString({value: source.value}); }
    else { this.value = null; }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirString(source._value as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'CodeSystem.concept.designation' }
    this.vOptS('language',expression)
    this.vOptS('use',expression)
    this.vReqS('value',expression)
    return issues;
  }
}
/**
 * Valid arguments for the CodeSystemConceptProperty type.
 */
export interface CodeSystemConceptPropertyArgs extends fhir.BackboneElementArgs {
  /**
   * A code that is a reference to CodeSystem.property.code.
   */
  code: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.property.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * The value of this property.
   */
  value?: fhir.FhirCode|fhir.Coding|fhir.FhirString|fhir.FhirInteger|fhir.FhirBoolean|fhir.FhirDateTime|fhir.FhirDecimal|undefined;
  /**
   * The value of this property.
   */
  valueCode?: fhir.FhirCode|string|undefined;
  /**
   * The value of this property.
   */
  valueCoding?: fhir.CodingArgs|undefined;
  /**
   * The value of this property.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * The value of this property.
   */
  valueInteger?: fhir.FhirInteger|number|undefined;
  /**
   * The value of this property.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * The value of this property.
   */
  valueDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * The value of this property.
   */
  valueDecimal?: fhir.FhirDecimal|number|undefined;
}

/**
 * A property value for this concept.
 */
export class CodeSystemConceptProperty extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeSystemConceptProperty';
  /**
   * A code that is a reference to CodeSystem.property.code.
   */
  public code: fhir.FhirCode|null;
  /**
   * The value of this property.
   */
  public value: (fhir.FhirCode|fhir.Coding|fhir.FhirString|fhir.FhirInteger|fhir.FhirBoolean|fhir.FhirDateTime|fhir.FhirDecimal)|null;
  /**
   * Internal flag to properly serialize choice-type element CodeSystem.concept.property.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * Default constructor for CodeSystemConceptProperty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeSystemConceptPropertyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode(source._code as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['value']) { this.value = source.value; }
    else if (source['valueCode']) { this.value = new fhir.FhirCode({value: source.valueCode}); }
    else if (source['valueCoding']) { this.value = new fhir.Coding(source.valueCoding); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueInteger']) { this.value = new fhir.FhirInteger({value: source.valueInteger}); }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
    else if (source['valueDateTime']) { this.value = new fhir.FhirDateTime({value: source.valueDateTime}); }
    else if (source['valueDecimal']) { this.value = new fhir.FhirDecimal({value: source.valueDecimal}); }
    else { this.value = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'CodeSystem.concept.property' }
    this.vReqS('code',expression)
    this.vReqS('value',expression)
    return issues;
  }
}
/**
 * Valid arguments for the CodeSystemConcept type.
 */
export interface CodeSystemConceptArgs extends fhir.BackboneElementArgs {
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  code: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  display?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.display
   */
  _display?:fhir.FhirElementArgs;
  /**
   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  definition?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.concept.definition
   */
  _definition?:fhir.FhirElementArgs;
  /**
   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
   */
  designation?: fhir.CodeSystemConceptDesignationArgs[]|undefined;
  /**
   * A property value for this concept.
   */
  property?: fhir.CodeSystemConceptPropertyArgs[]|undefined;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   */
  concept?: fhir.CodeSystemConceptArgs[]|undefined;
}

/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export class CodeSystemConcept extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeSystemConcept';
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  public code: fhir.FhirCode|null;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  public display?: fhir.FhirString|undefined;
  /**
   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  public definition?: fhir.FhirString|undefined;
  /**
   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
   */
  public designation: fhir.CodeSystemConceptDesignation[];
  /**
   * A property value for this concept.
   */
  public property: fhir.CodeSystemConceptProperty[];
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   */
  public concept: fhir.CodeSystemConcept[];
  /**
   * Default constructor for CodeSystemConcept - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeSystemConceptArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode(source._code as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['display']) { this.display = new fhir.FhirString({value: source.display}); }
    if (source['_display']) {
      if (this.display) { this.display.addExtendedProperties(source._display!); }
      else { this.display = new fhir.FhirString(source._display as Partial<fhir.FhirStringArgs>); }
    }
    if (source['definition']) { this.definition = new fhir.FhirString({value: source.definition}); }
    if (source['_definition']) {
      if (this.definition) { this.definition.addExtendedProperties(source._definition!); }
      else { this.definition = new fhir.FhirString(source._definition as Partial<fhir.FhirStringArgs>); }
    }
    if (source['designation']) { this.designation = source.designation.map((x) => new fhir.CodeSystemConceptDesignation(x)); }
    else { this.designation = []; }
    if (source['property']) { this.property = source.property.map((x) => new fhir.CodeSystemConceptProperty(x)); }
    else { this.property = []; }
    if (source['concept']) { this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x)); }
    else { this.concept = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'CodeSystem.concept' }
    this.vReqS('code',expression)
    this.vOptS('display',expression)
    this.vOptS('definition',expression)
    this.vOptA('designation',expression)
    this.vOptA('property',expression)
    this.vOptA('concept',expression)
    return issues;
  }
}
/**
 * Valid arguments for the CodeSystem type.
 */
export interface CodeSystemArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "CodeSystem"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.purpose
   */
  _purpose?:fhir.FhirElementArgs;
  /**
   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.copyright
   */
  _copyright?:fhir.FhirElementArgs;
  /**
   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
   */
  caseSensitive?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.caseSensitive
   */
  _caseSensitive?:fhir.FhirElementArgs;
  /**
   * The definition of the value set SHALL include all codes from this code system and only codes from this code system, and it SHALL be immutable.
   */
  valueSet?: fhir.FhirCanonical|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.valueSet
   */
  _valueSet?:fhir.FhirElementArgs;
  /**
   * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
   */
  hierarchyMeaning?: fhir.FhirCode<CodesystemHierarchyMeaningCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.hierarchyMeaning
   */
  _hierarchyMeaning?:fhir.FhirElementArgs;
  /**
   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
   */
  compositional?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.compositional
   */
  _compositional?:fhir.FhirElementArgs;
  /**
   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
   * Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
   */
  versionNeeded?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.versionNeeded
   */
  _versionNeeded?:fhir.FhirElementArgs;
  /**
   * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
   */
  content: fhir.FhirCode<CodesystemContentModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.content
   */
  _content?:fhir.FhirElementArgs;
  /**
   * The most common use of a code system supplement is to add additional language support.
   */
  supplements?: fhir.FhirCanonical|string|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.supplements
   */
  _supplements?:fhir.FhirElementArgs;
  /**
   * The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
   */
  count?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: CodeSystem.count
   */
  _count?:fhir.FhirElementArgs;
  /**
   * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
   */
  filter?: fhir.CodeSystemFilterArgs[]|undefined;
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   */
  property?: fhir.CodeSystemPropertyArgs[]|undefined;
  /**
   * If this is empty, it means that the code system resource does not represent the content of the code system.
   */
  concept?: fhir.CodeSystemConceptArgs[]|undefined;
}

/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export class CodeSystem extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeSystem';
  /**
   * Resource Type Name
   */
  public override resourceType: "CodeSystem";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
   */
  public identifier: fhir.Identifier[];
  /**
   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
   */
  public caseSensitive?: fhir.FhirBoolean|undefined;
  /**
   * The definition of the value set SHALL include all codes from this code system and only codes from this code system, and it SHALL be immutable.
   */
  public valueSet?: fhir.FhirCanonical|undefined;
  /**
   * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
   */
  public hierarchyMeaning?: fhir.FhirCode<CodesystemHierarchyMeaningCodeType>|undefined;
  /**
   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
   */
  public compositional?: fhir.FhirBoolean|undefined;
  /**
   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
   * Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
   */
  public versionNeeded?: fhir.FhirBoolean|undefined;
  /**
   * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
   */
  public content: fhir.FhirCode<CodesystemContentModeCodeType>|null;
  /**
   * The most common use of a code system supplement is to add additional language support.
   */
  public supplements?: fhir.FhirCanonical|undefined;
  /**
   * The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
   */
  public count?: fhir.FhirUnsignedInt|undefined;
  /**
   * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
   */
  public filter: fhir.CodeSystemFilter[];
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   */
  public property: fhir.CodeSystemProperty[];
  /**
   * If this is empty, it means that the code system resource does not represent the content of the code system.
   */
  public concept: fhir.CodeSystemConcept[];
  /**
   * Default constructor for CodeSystem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeSystemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'CodeSystem';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['purpose']) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}); }
    if (source['_purpose']) {
      if (this.purpose) { this.purpose.addExtendedProperties(source._purpose!); }
      else { this.purpose = new fhir.FhirMarkdown(source._purpose as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['caseSensitive']) { this.caseSensitive = new fhir.FhirBoolean({value: source.caseSensitive}); }
    if (source['_caseSensitive']) {
      if (this.caseSensitive) { this.caseSensitive.addExtendedProperties(source._caseSensitive!); }
      else { this.caseSensitive = new fhir.FhirBoolean(source._caseSensitive as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['valueSet']) { this.valueSet = new fhir.FhirCanonical({value: source.valueSet}); }
    if (source['_valueSet']) {
      if (this.valueSet) { this.valueSet.addExtendedProperties(source._valueSet!); }
      else { this.valueSet = new fhir.FhirCanonical(source._valueSet as Partial<fhir.FhirCanonicalArgs>); }
    }
    if (source['hierarchyMeaning']) { this.hierarchyMeaning = new fhir.FhirCode<CodesystemHierarchyMeaningCodeType>({value: source.hierarchyMeaning}); }
    if (source['_hierarchyMeaning']) {
      if (this.hierarchyMeaning) { this.hierarchyMeaning.addExtendedProperties(source._hierarchyMeaning!); }
      else { this.hierarchyMeaning = new fhir.FhirCode<CodesystemHierarchyMeaningCodeType>(source._hierarchyMeaning as Partial<fhir.FhirCode>); }
    }
    if (source['compositional']) { this.compositional = new fhir.FhirBoolean({value: source.compositional}); }
    if (source['_compositional']) {
      if (this.compositional) { this.compositional.addExtendedProperties(source._compositional!); }
      else { this.compositional = new fhir.FhirBoolean(source._compositional as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['versionNeeded']) { this.versionNeeded = new fhir.FhirBoolean({value: source.versionNeeded}); }
    if (source['_versionNeeded']) {
      if (this.versionNeeded) { this.versionNeeded.addExtendedProperties(source._versionNeeded!); }
      else { this.versionNeeded = new fhir.FhirBoolean(source._versionNeeded as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['content']) { this.content = new fhir.FhirCode<CodesystemContentModeCodeType>({value: source.content}); }
    else { this.content = null; }
    if (source['_content']) {
      if (this.content) { this.content.addExtendedProperties(source._content!); }
      else { this.content = new fhir.FhirCode<CodesystemContentModeCodeType>(source._content as Partial<fhir.FhirCode>); }
    }
    if (source['supplements']) { this.supplements = new fhir.FhirCanonical({value: source.supplements}); }
    if (source['_supplements']) {
      if (this.supplements) { this.supplements.addExtendedProperties(source._supplements!); }
      else { this.supplements = new fhir.FhirCanonical(source._supplements as Partial<fhir.FhirCanonicalArgs>); }
    }
    if (source['count']) { this.count = new fhir.FhirUnsignedInt({value: source.count}); }
    if (source['_count']) {
      if (this.count) { this.count.addExtendedProperties(source._count!); }
      else { this.count = new fhir.FhirUnsignedInt(source._count as Partial<fhir.FhirUnsignedIntArgs>); }
    }
    if (source['filter']) { this.filter = source.filter.map((x) => new fhir.CodeSystemFilter(x)); }
    else { this.filter = []; }
    if (source['property']) { this.property = source.property.map((x) => new fhir.CodeSystemProperty(x)); }
    else { this.property = []; }
    if (source['concept']) { this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x)); }
    else { this.concept = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'CodeSystem' }
    this.vReqS('resourceType',expression)
    this.vOptS('url',expression)
    this.vOptA('identifier',expression)
    this.vOptS('version',expression)
    this.vOptS('name',expression)
    this.vOptS('title',expression)
    this.vReqSV('status',expression,'PublicationStatus',PublicationStatusVsValidation,'r')
    this.vOptS('experimental',expression)
    this.vOptS('date',expression)
    this.vOptS('publisher',expression)
    this.vOptA('contact',expression)
    this.vOptS('description',expression)
    this.vOptA('useContext',expression)
    this.vOptA('jurisdiction',expression)
    this.vOptS('purpose',expression)
    this.vOptS('copyright',expression)
    this.vOptS('caseSensitive',expression)
    this.vOptS('valueSet',expression)
    this.vOptSV('hierarchyMeaning',expression,'CodesystemHierarchyMeaning',CodesystemHierarchyMeaningVsValidation,'r')
    this.vOptS('compositional',expression)
    this.vOptS('versionNeeded',expression)
    this.vReqSV('content',expression,'CodesystemContentMode',CodesystemContentModeVsValidation,'r')
    this.vOptS('supplements',expression)
    this.vOptS('count',expression)
    this.vOptA('filter',expression)
    this.vOptA('property',expression)
    this.vOptA('concept',expression)
    return issues;
  }
}
