// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationKnowledge

import * as fhir from '../fhir.js';

// @ts-ignore
import { MedicationknowledgePackageTypeCodings, MedicationknowledgePackageTypeCodingType,} from '../fhirValueSets/MedicationknowledgePackageTypeCodings.js';
// @ts-ignore
import { MedicationknowledgePackageTypeCodes,  MedicationknowledgePackageTypeCodeType } from '../fhirValueSets/MedicationknowledgePackageTypeCodes.js';
// @ts-ignore
import { MedicationknowledgeCharacteristicCodings, MedicationknowledgeCharacteristicCodingType,} from '../fhirValueSets/MedicationknowledgeCharacteristicCodings.js';
// @ts-ignore
import { MedicationknowledgeCharacteristicCodes,  MedicationknowledgeCharacteristicCodeType } from '../fhirValueSets/MedicationknowledgeCharacteristicCodes.js';
// @ts-ignore
import { MedicationCodings, MedicationCodingType,} from '../fhirValueSets/MedicationCodings.js';
// @ts-ignore
import { MedicationCodes,  MedicationCodeType } from '../fhirValueSets/MedicationCodes.js';
// @ts-ignore
import { MedicationknowledgeStatusCodings, MedicationknowledgeStatusCodingType,} from '../fhirValueSets/MedicationknowledgeStatusCodings.js';
// @ts-ignore
import { MedicationknowledgeStatusCodes,  MedicationknowledgeStatusCodeType } from '../fhirValueSets/MedicationknowledgeStatusCodes.js';
// @ts-ignore
import { MedicationFormCodings, MedicationFormCodingType,} from '../fhirValueSets/MedicationFormCodings.js';
// @ts-ignore
import { MedicationFormCodes,  MedicationFormCodeType } from '../fhirValueSets/MedicationFormCodes.js';
// @ts-ignore
import { RouteCodings, RouteCodingType,} from '../fhirValueSets/RouteCodings.js';
// @ts-ignore
import { RouteCodes,  RouteCodeType } from '../fhirValueSets/RouteCodes.js';
/**
 * Valid arguments for the MedicationKnowledgeRelatedMedicationKnowledge type.
 */
export interface MedicationKnowledgeRelatedMedicationKnowledgeArgs extends fhir.BackboneElementArgs {
  /**
   * The category of the associated medication knowledge reference.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Associated documentation about the associated medication knowledge.
   */
  reference: fhir.ReferenceArgs[]|null;
}

/**
 * Associated or related knowledge about a medication.
 */
export class MedicationKnowledgeRelatedMedicationKnowledge extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeRelatedMedicationKnowledge';
  /**
   * The category of the associated medication knowledge reference.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Associated documentation about the associated medication knowledge.
   */
  public reference: fhir.Reference[];
  /**
   * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeRelatedMedicationKnowledgeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['reference']) { this.reference = source.reference.map((x) => new fhir.Reference(x)); }
    else { this.reference = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.relatedMedicationKnowledge.type:CodeableConcept' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (!this['reference']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference' });
    } else if (!Array.isArray(this.reference)) {
      issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference' });
    } else if (this.reference.length === 0) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference' });
    }
    if (this["reference"]) { this.reference.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeMonograph type.
 */
export interface MedicationKnowledgeMonographArgs extends fhir.BackboneElementArgs {
  /**
   * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Associated documentation about the medication.
   */
  source?: fhir.ReferenceArgs|undefined;
}

/**
 * Associated documentation about the medication.
 */
export class MedicationKnowledgeMonograph extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeMonograph';
  /**
   * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Associated documentation about the medication.
   */
  public source?: fhir.Reference|undefined;
  /**
   * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeMonographArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['source']) { this.source = new fhir.Reference(source.source); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["source"]) { issues.push(...this.source.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeIngredient type.
 */
export interface MedicationKnowledgeIngredientArgs extends fhir.BackboneElementArgs {
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  item?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  itemCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  itemReference?: fhir.ReferenceArgs|undefined;
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  isActive?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
   */
  strength?: fhir.RatioArgs|undefined;
}

/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationKnowledgeIngredient extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeIngredient';
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  public item: (fhir.CodeableConcept|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element MedicationKnowledge.ingredient.item[x]
   */
  protected static readonly _fts_itemIsChoice:true = true;
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  public isActive?: fhir.FhirBoolean|undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
   */
  public strength?: fhir.Ratio|undefined;
  /**
   * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeIngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = source.item; }
    else if (source['itemCodeableConcept']) { this.item = new fhir.CodeableConcept(source.itemCodeableConcept); }
    else if (source['itemReference']) { this.item = new fhir.Reference(source.itemReference); }
    else { this.item = null; }
    if (source['isActive']) { this.isActive = new fhir.FhirBoolean({value: source.isActive}); }
    if (source['strength']) { this.strength = new fhir.Ratio(source.strength); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['item']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item: fhir: MedicationKnowledge.ingredient.item[x]:' });
    }
    if (this["isActive"]) { issues.push(...this.isActive.doModelValidation()); }
    if (this["strength"]) { issues.push(...this.strength.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeCost type.
 */
export interface MedicationKnowledgeCostArgs extends fhir.BackboneElementArgs {
  /**
   * The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The source or owner that assigns the price to the medication.
   */
  source?: fhir.FhirString|string|undefined;
  /**
   * The price of the medication.
   */
  cost: fhir.MoneyArgs|null;
}

/**
 * The price of the medication.
 */
export class MedicationKnowledgeCost extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeCost';
  /**
   * The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The source or owner that assigns the price to the medication.
   */
  public source?: fhir.FhirString|undefined;
  /**
   * The price of the medication.
   */
  public cost: fhir.Money|null;
  /**
   * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeCostArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['source']) { this.source = new fhir.FhirString({value: source.source}); }
    if (source['cost']) { this.cost = new fhir.Money(source.cost); }
    else { this.cost = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.cost.type:CodeableConcept' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["source"]) { issues.push(...this.source.doModelValidation()); }
    if (!this['cost']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property cost:fhir.Money fhir: MedicationKnowledge.cost.cost:Money' });
    }
    if (this["cost"]) { issues.push(...this.cost.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeMonitoringProgram type.
 */
export interface MedicationKnowledgeMonitoringProgramArgs extends fhir.BackboneElementArgs {
  /**
   * Type of program under which the medication is monitored.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Name of the reviewing program.
   */
  name?: fhir.FhirString|string|undefined;
}

/**
 * The program under which the medication is reviewed.
 */
export class MedicationKnowledgeMonitoringProgram extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeMonitoringProgram';
  /**
   * Type of program under which the medication is monitored.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Name of the reviewing program.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeMonitoringProgramArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeAdministrationGuidelinesDosage type.
 */
export interface MedicationKnowledgeAdministrationGuidelinesDosageArgs extends fhir.BackboneElementArgs {
  /**
   * The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Dosage for the medication for the specific guidelines.
   */
  dosage: fhir.DosageArgs[]|null;
}

/**
 * Dosage for the medication for the specific guidelines.
 */
export class MedicationKnowledgeAdministrationGuidelinesDosage extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeAdministrationGuidelinesDosage';
  /**
   * The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Dosage for the medication for the specific guidelines.
   */
  public dosage: fhir.Dosage[];
  /**
   * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeAdministrationGuidelinesDosageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['dosage']) { this.dosage = source.dosage.map((x) => new fhir.Dosage(x)); }
    else { this.dosage = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.administrationGuidelines.dosage.type:CodeableConcept' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (!this['dosage']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage' });
    } else if (!Array.isArray(this.dosage)) {
      issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage' });
    } else if (this.dosage.length === 0) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage' });
    }
    if (this["dosage"]) { this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics type.
 */
export interface MedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsArgs extends fhir.BackboneElementArgs {
  /**
   * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
   */
  characteristic?: fhir.CodeableConcept|fhir.Quantity|undefined;
  /**
   * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
   */
  characteristicCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
   */
  characteristicQuantity?: fhir.QuantityArgs|undefined;
  /**
   * The specific characteristic (e.g. height, weight, gender, etc.).
   */
  value?: fhir.FhirString[]|string[]|undefined;
}

/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics';
  /**
   * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
   */
  public characteristic: (fhir.CodeableConcept|fhir.Quantity)|null;
  /**
   * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]
   */
  protected static readonly _fts_characteristicIsChoice:true = true;
  /**
   * The specific characteristic (e.g. height, weight, gender, etc.).
   */
  public value: fhir.FhirString[];
  /**
   * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['characteristic']) { this.characteristic = source.characteristic; }
    else if (source['characteristicCodeableConcept']) { this.characteristic = new fhir.CodeableConcept(source.characteristicCodeableConcept); }
    else if (source['characteristicQuantity']) { this.characteristic = new fhir.Quantity(source.characteristicQuantity); }
    else { this.characteristic = null; }
    if (source['value']) { this.value = source.value.map((x) => new fhir.FhirString({value: x})); }
    else { this.value = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['characteristic']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property characteristic: fhir: MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]:' });
    }
    if (this["value"]) { this.value.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeAdministrationGuidelines type.
 */
export interface MedicationKnowledgeAdministrationGuidelinesArgs extends fhir.BackboneElementArgs {
  /**
   * Dosage for the medication for the specific guidelines.
   */
  dosage?: fhir.MedicationKnowledgeAdministrationGuidelinesDosageArgs[]|undefined;
  /**
   * Indication for use that apply to the specific administration guidelines.
   */
  indication?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Indication for use that apply to the specific administration guidelines.
   */
  indicationCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indication for use that apply to the specific administration guidelines.
   */
  indicationReference?: fhir.ReferenceArgs|undefined;
  /**
   * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
   */
  patientCharacteristics?: fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsArgs[]|undefined;
}

/**
 * Guidelines for the administration of the medication.
 */
export class MedicationKnowledgeAdministrationGuidelines extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeAdministrationGuidelines';
  /**
   * Dosage for the medication for the specific guidelines.
   */
  public dosage: fhir.MedicationKnowledgeAdministrationGuidelinesDosage[];
  /**
   * Indication for use that apply to the specific administration guidelines.
   */
  public indication?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.indication[x]
   */
  protected static readonly _fts_indicationIsChoice:true = true;
  /**
   * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
   */
  public patientCharacteristics: fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics[];
  /**
   * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeAdministrationGuidelinesArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['dosage']) { this.dosage = source.dosage.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesDosage(x)); }
    else { this.dosage = []; }
    if (source['indication']) { this.indication = source.indication; }
    else if (source['indicationCodeableConcept']) { this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept); }
    else if (source['indicationReference']) { this.indication = new fhir.Reference(source.indicationReference); }
    if (source['patientCharacteristics']) { this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x)); }
    else { this.patientCharacteristics = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["dosage"]) { this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["patientCharacteristics"]) { this.patientCharacteristics.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeMedicineClassification type.
 */
export interface MedicationKnowledgeMedicineClassificationArgs extends fhir.BackboneElementArgs {
  /**
   * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
   */
  classification?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * Categorization of the medication within a formulary or classification system.
 */
export class MedicationKnowledgeMedicineClassification extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeMedicineClassification';
  /**
   * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
   */
  public classification: fhir.CodeableConcept[];
  /**
   * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeMedicineClassificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.CodeableConcept(x)); }
    else { this.classification = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.medicineClassification.type:CodeableConcept' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["classification"]) { this.classification.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgePackaging type.
 */
export interface MedicationKnowledgePackagingArgs extends fhir.BackboneElementArgs {
  /**
   * A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The number of product units the package would contain if fully loaded.
   */
  quantity?: fhir.QuantityArgs|undefined;
}

/**
 * Information that only applies to packages (not products).
 */
export class MedicationKnowledgePackaging extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgePackaging';
  /**
   * A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The number of product units the package would contain if fully loaded.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgePackagingArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeDrugCharacteristic type.
 */
export interface MedicationKnowledgeDrugCharacteristicArgs extends fhir.BackboneElementArgs {
  /**
   * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  value?: fhir.CodeableConcept|fhir.FhirString|fhir.Quantity|fhir.FhirBase64Binary|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueBase64Binary?: fhir.FhirBase64Binary|string|undefined;
}

/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export class MedicationKnowledgeDrugCharacteristic extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeDrugCharacteristic';
  /**
   * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  public value?: (fhir.CodeableConcept|fhir.FhirString|fhir.Quantity|fhir.FhirBase64Binary)|undefined;
  /**
   * Internal flag to properly serialize choice-type element MedicationKnowledge.drugCharacteristic.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeDrugCharacteristicArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['value']) { this.value = source.value; }
    else if (source['valueCodeableConcept']) { this.value = new fhir.CodeableConcept(source.valueCodeableConcept); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueQuantity']) { this.value = new fhir.Quantity(source.valueQuantity); }
    else if (source['valueBase64Binary']) { this.value = new fhir.FhirBase64Binary({value: source.valueBase64Binary}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeRegulatorySubstitution type.
 */
export interface MedicationKnowledgeRegulatorySubstitutionArgs extends fhir.BackboneElementArgs {
  /**
   * Specifies the type of substitution allowed.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Specifies if regulation allows for changes in the medication when dispensing.
   */
  allowed: fhir.FhirBoolean|boolean|undefined;
}

/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export class MedicationKnowledgeRegulatorySubstitution extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeRegulatorySubstitution';
  /**
   * Specifies the type of substitution allowed.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Specifies if regulation allows for changes in the medication when dispensing.
   */
  public allowed: fhir.FhirBoolean|null;
  /**
   * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeRegulatorySubstitutionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['allowed']) { this.allowed = new fhir.FhirBoolean({value: source.allowed}); }
    else { this.allowed = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.substitution.type:CodeableConcept' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (!this['allowed']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property allowed:fhir.FhirBoolean fhir: MedicationKnowledge.regulatory.substitution.allowed:boolean' });
    }
    if (this["allowed"]) { issues.push(...this.allowed.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeRegulatorySchedule type.
 */
export interface MedicationKnowledgeRegulatoryScheduleArgs extends fhir.BackboneElementArgs {
  /**
   * Specifies the specific drug schedule.
   */
  schedule: fhir.CodeableConceptArgs|null;
}

/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export class MedicationKnowledgeRegulatorySchedule extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeRegulatorySchedule';
  /**
   * Specifies the specific drug schedule.
   */
  public schedule: fhir.CodeableConcept|null;
  /**
   * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeRegulatoryScheduleArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['schedule']) { this.schedule = new fhir.CodeableConcept(source.schedule); }
    else { this.schedule = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['schedule']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property schedule:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.schedule.schedule:CodeableConcept' });
    }
    if (this["schedule"]) { issues.push(...this.schedule.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeRegulatoryMaxDispense type.
 */
export interface MedicationKnowledgeRegulatoryMaxDispenseArgs extends fhir.BackboneElementArgs {
  /**
   * The maximum number of units of the medication that can be dispensed.
   */
  quantity: fhir.QuantityArgs|null;
  /**
   * The period that applies to the maximum number of units.
   */
  period?: fhir.DurationArgs|undefined;
}

/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export class MedicationKnowledgeRegulatoryMaxDispense extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeRegulatoryMaxDispense';
  /**
   * The maximum number of units of the medication that can be dispensed.
   */
  public quantity: fhir.Quantity|null;
  /**
   * The period that applies to the maximum number of units.
   */
  public period?: fhir.Duration|undefined;
  /**
   * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeRegulatoryMaxDispenseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    else { this.quantity = null; }
    if (source['period']) { this.period = new fhir.Duration(source.period); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['quantity']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicationKnowledge.regulatory.maxDispense.quantity:Quantity' });
    }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation()); }
    if (this["period"]) { issues.push(...this.period.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeRegulatory type.
 */
export interface MedicationKnowledgeRegulatoryArgs extends fhir.BackboneElementArgs {
  /**
   * The authority that is specifying the regulations.
   */
  regulatoryAuthority: fhir.ReferenceArgs|null;
  /**
   * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
   */
  substitution?: fhir.MedicationKnowledgeRegulatorySubstitutionArgs[]|undefined;
  /**
   * Specifies the schedule of a medication in jurisdiction.
   */
  schedule?: fhir.MedicationKnowledgeRegulatoryScheduleArgs[]|undefined;
  /**
   * The maximum number of units of the medication that can be dispensed in a period.
   */
  maxDispense?: fhir.MedicationKnowledgeRegulatoryMaxDispenseArgs|undefined;
}

/**
 * Regulatory information about a medication.
 */
export class MedicationKnowledgeRegulatory extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeRegulatory';
  /**
   * The authority that is specifying the regulations.
   */
  public regulatoryAuthority: fhir.Reference|null;
  /**
   * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
   */
  public substitution: fhir.MedicationKnowledgeRegulatorySubstitution[];
  /**
   * Specifies the schedule of a medication in jurisdiction.
   */
  public schedule: fhir.MedicationKnowledgeRegulatorySchedule[];
  /**
   * The maximum number of units of the medication that can be dispensed in a period.
   */
  public maxDispense?: fhir.MedicationKnowledgeRegulatoryMaxDispense|undefined;
  /**
   * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeRegulatoryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['regulatoryAuthority']) { this.regulatoryAuthority = new fhir.Reference(source.regulatoryAuthority); }
    else { this.regulatoryAuthority = null; }
    if (source['substitution']) { this.substitution = source.substitution.map((x) => new fhir.MedicationKnowledgeRegulatorySubstitution(x)); }
    else { this.substitution = []; }
    if (source['schedule']) { this.schedule = source.schedule.map((x) => new fhir.MedicationKnowledgeRegulatorySchedule(x)); }
    else { this.schedule = []; }
    if (source['maxDispense']) { this.maxDispense = new fhir.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['regulatoryAuthority']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property regulatoryAuthority:fhir.Reference fhir: MedicationKnowledge.regulatory.regulatoryAuthority:Reference' });
    }
    if (this["regulatoryAuthority"]) { issues.push(...this.regulatoryAuthority.doModelValidation()); }
    if (this["substitution"]) { this.substitution.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["schedule"]) { this.schedule.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["maxDispense"]) { issues.push(...this.maxDispense.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledgeKinetics type.
 */
export interface MedicationKnowledgeKineticsArgs extends fhir.BackboneElementArgs {
  /**
   * The drug concentration measured at certain discrete points in time.
   */
  areaUnderCurve?: fhir.QuantityArgs[]|undefined;
  /**
   * The median lethal dose of a drug.
   */
  lethalDose50?: fhir.QuantityArgs[]|undefined;
  /**
   * The time required for any specified property (e.g., the concentration of a substance in the body) to decrease by half.
   */
  halfLifePeriod?: fhir.DurationArgs|undefined;
}

/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export class MedicationKnowledgeKinetics extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledgeKinetics';
  /**
   * The drug concentration measured at certain discrete points in time.
   */
  public areaUnderCurve: fhir.Quantity[];
  /**
   * The median lethal dose of a drug.
   */
  public lethalDose50: fhir.Quantity[];
  /**
   * The time required for any specified property (e.g., the concentration of a substance in the body) to decrease by half.
   */
  public halfLifePeriod?: fhir.Duration|undefined;
  /**
   * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeKineticsArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['areaUnderCurve']) { this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhir.Quantity(x)); }
    else { this.areaUnderCurve = []; }
    if (source['lethalDose50']) { this.lethalDose50 = source.lethalDose50.map((x) => new fhir.Quantity(x)); }
    else { this.lethalDose50 = []; }
    if (source['halfLifePeriod']) { this.halfLifePeriod = new fhir.Duration(source.halfLifePeriod); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["areaUnderCurve"]) { this.areaUnderCurve.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["lethalDose50"]) { this.lethalDose50.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["halfLifePeriod"]) { issues.push(...this.halfLifePeriod.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the MedicationKnowledge type.
 */
export interface MedicationKnowledgeArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MedicationKnowledge"|undefined;
  /**
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
   */
  status?: fhir.FhirCode<MedicationknowledgeStatusCodeType>|string|undefined;
  /**
   * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
   */
  manufacturer?: fhir.ReferenceArgs|undefined;
  /**
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  doseForm?: fhir.CodeableConceptArgs|undefined;
  /**
   * This is the quantity of medication in a package.  To specify the strength of the medication, the Ingredient.strength attribute is used.
   */
  amount?: fhir.QuantityArgs|undefined;
  /**
   * Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
   */
  synonym?: fhir.FhirString[]|string[]|undefined;
  /**
   * Associated or related knowledge about a medication.
   */
  relatedMedicationKnowledge?: fhir.MedicationKnowledgeRelatedMedicationKnowledgeArgs[]|undefined;
  /**
   * Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
   */
  associatedMedication?: fhir.ReferenceArgs[]|undefined;
  /**
   * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
   */
  productType?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Associated documentation about the medication.
   */
  monograph?: fhir.MedicationKnowledgeMonographArgs[]|undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   */
  ingredient?: fhir.MedicationKnowledgeIngredientArgs[]|undefined;
  /**
   * The instructions for preparing the medication.
   */
  preparationInstruction?: fhir.FhirMarkdown|string|undefined;
  /**
   * The intended or approved route of administration.
   */
  intendedRoute?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The price of the medication.
   */
  cost?: fhir.MedicationKnowledgeCostArgs[]|undefined;
  /**
   * The program under which the medication is reviewed.
   */
  monitoringProgram?: fhir.MedicationKnowledgeMonitoringProgramArgs[]|undefined;
  /**
   * Guidelines for the administration of the medication.
   */
  administrationGuidelines?: fhir.MedicationKnowledgeAdministrationGuidelinesArgs[]|undefined;
  /**
   * Categorization of the medication within a formulary or classification system.
   */
  medicineClassification?: fhir.MedicationKnowledgeMedicineClassificationArgs[]|undefined;
  /**
   * Information that only applies to packages (not products).
   */
  packaging?: fhir.MedicationKnowledgePackagingArgs|undefined;
  /**
   * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
   */
  drugCharacteristic?: fhir.MedicationKnowledgeDrugCharacteristicArgs[]|undefined;
  /**
   * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
   */
  contraindication?: fhir.ReferenceArgs[]|undefined;
  /**
   * Regulatory information about a medication.
   */
  regulatory?: fhir.MedicationKnowledgeRegulatoryArgs[]|undefined;
  /**
   * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
   */
  kinetics?: fhir.MedicationKnowledgeKineticsArgs[]|undefined;
}

/**
 * Information about a medication that is used to support knowledge.
 */
export class MedicationKnowledge extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationKnowledge';
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicationKnowledge";
  /**
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
   */
  public status?: fhir.FhirCode<MedicationknowledgeStatusCodeType>|undefined;
  /**
   * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
   */
  public manufacturer?: fhir.Reference|undefined;
  /**
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  public doseForm?: fhir.CodeableConcept|undefined;
  /**
   * This is the quantity of medication in a package.  To specify the strength of the medication, the Ingredient.strength attribute is used.
   */
  public amount?: fhir.Quantity|undefined;
  /**
   * Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
   */
  public synonym: fhir.FhirString[];
  /**
   * Associated or related knowledge about a medication.
   */
  public relatedMedicationKnowledge: fhir.MedicationKnowledgeRelatedMedicationKnowledge[];
  /**
   * Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
   */
  public associatedMedication: fhir.Reference[];
  /**
   * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
   */
  public productType: fhir.CodeableConcept[];
  /**
   * Associated documentation about the medication.
   */
  public monograph: fhir.MedicationKnowledgeMonograph[];
  /**
   * Identifies a particular constituent of interest in the product.
   */
  public ingredient: fhir.MedicationKnowledgeIngredient[];
  /**
   * The instructions for preparing the medication.
   */
  public preparationInstruction?: fhir.FhirMarkdown|undefined;
  /**
   * The intended or approved route of administration.
   */
  public intendedRoute: fhir.CodeableConcept[];
  /**
   * The price of the medication.
   */
  public cost: fhir.MedicationKnowledgeCost[];
  /**
   * The program under which the medication is reviewed.
   */
  public monitoringProgram: fhir.MedicationKnowledgeMonitoringProgram[];
  /**
   * Guidelines for the administration of the medication.
   */
  public administrationGuidelines: fhir.MedicationKnowledgeAdministrationGuidelines[];
  /**
   * Categorization of the medication within a formulary or classification system.
   */
  public medicineClassification: fhir.MedicationKnowledgeMedicineClassification[];
  /**
   * Information that only applies to packages (not products).
   */
  public packaging?: fhir.MedicationKnowledgePackaging|undefined;
  /**
   * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
   */
  public drugCharacteristic: fhir.MedicationKnowledgeDrugCharacteristic[];
  /**
   * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
   */
  public contraindication: fhir.Reference[];
  /**
   * Regulatory information about a medication.
   */
  public regulatory: fhir.MedicationKnowledgeRegulatory[];
  /**
   * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
   */
  public kinetics: fhir.MedicationKnowledgeKinetics[];
  /**
   * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationKnowledgeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MedicationKnowledge';
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['status']) { this.status = new fhir.FhirCode<MedicationknowledgeStatusCodeType>({value: source.status}); }
    if (source['manufacturer']) { this.manufacturer = new fhir.Reference(source.manufacturer); }
    if (source['doseForm']) { this.doseForm = new fhir.CodeableConcept(source.doseForm); }
    if (source['amount']) { this.amount = new fhir.Quantity(source.amount); }
    if (source['synonym']) { this.synonym = source.synonym.map((x) => new fhir.FhirString({value: x})); }
    else { this.synonym = []; }
    if (source['relatedMedicationKnowledge']) { this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhir.MedicationKnowledgeRelatedMedicationKnowledge(x)); }
    else { this.relatedMedicationKnowledge = []; }
    if (source['associatedMedication']) { this.associatedMedication = source.associatedMedication.map((x) => new fhir.Reference(x)); }
    else { this.associatedMedication = []; }
    if (source['productType']) { this.productType = source.productType.map((x) => new fhir.CodeableConcept(x)); }
    else { this.productType = []; }
    if (source['monograph']) { this.monograph = source.monograph.map((x) => new fhir.MedicationKnowledgeMonograph(x)); }
    else { this.monograph = []; }
    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.MedicationKnowledgeIngredient(x)); }
    else { this.ingredient = []; }
    if (source['preparationInstruction']) { this.preparationInstruction = new fhir.FhirMarkdown({value: source.preparationInstruction}); }
    if (source['intendedRoute']) { this.intendedRoute = source.intendedRoute.map((x) => new fhir.CodeableConcept(x)); }
    else { this.intendedRoute = []; }
    if (source['cost']) { this.cost = source.cost.map((x) => new fhir.MedicationKnowledgeCost(x)); }
    else { this.cost = []; }
    if (source['monitoringProgram']) { this.monitoringProgram = source.monitoringProgram.map((x) => new fhir.MedicationKnowledgeMonitoringProgram(x)); }
    else { this.monitoringProgram = []; }
    if (source['administrationGuidelines']) { this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelines(x)); }
    else { this.administrationGuidelines = []; }
    if (source['medicineClassification']) { this.medicineClassification = source.medicineClassification.map((x) => new fhir.MedicationKnowledgeMedicineClassification(x)); }
    else { this.medicineClassification = []; }
    if (source['packaging']) { this.packaging = new fhir.MedicationKnowledgePackaging(source.packaging); }
    if (source['drugCharacteristic']) { this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhir.MedicationKnowledgeDrugCharacteristic(x)); }
    else { this.drugCharacteristic = []; }
    if (source['contraindication']) { this.contraindication = source.contraindication.map((x) => new fhir.Reference(x)); }
    else { this.contraindication = []; }
    if (source['regulatory']) { this.regulatory = source.regulatory.map((x) => new fhir.MedicationKnowledgeRegulatory(x)); }
    else { this.regulatory = []; }
    if (source['kinetics']) { this.kinetics = source.kinetics.map((x) => new fhir.MedicationKnowledgeKinetics(x)); }
    else { this.kinetics = []; }
  }
  /**
   * Required-bound Value Set for status (MedicationKnowledge.status)
   */
  public static get statusRequiredCodes() {
    return MedicationknowledgeStatusCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicationKnowledge" fhir: MedicationKnowledge.resourceType:"MedicationKnowledge"' });
    }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    if (this['status'] && (!Object.values(MedicationknowledgeStatusCodes).includes(this.status as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<MedicationknowledgeStatusCodeType> fhir: MedicationKnowledge.status:code Required binding to: MedicationknowledgeStatus' });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation()); }
    if (this["manufacturer"]) { issues.push(...this.manufacturer.doModelValidation()); }
    if (this["doseForm"]) { issues.push(...this.doseForm.doModelValidation()); }
    if (this["amount"]) { issues.push(...this.amount.doModelValidation()); }
    if (this["synonym"]) { this.synonym.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["relatedMedicationKnowledge"]) { this.relatedMedicationKnowledge.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["associatedMedication"]) { this.associatedMedication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["productType"]) { this.productType.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["monograph"]) { this.monograph.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["ingredient"]) { this.ingredient.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["preparationInstruction"]) { issues.push(...this.preparationInstruction.doModelValidation()); }
    if (this["intendedRoute"]) { this.intendedRoute.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["cost"]) { this.cost.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["monitoringProgram"]) { this.monitoringProgram.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["administrationGuidelines"]) { this.administrationGuidelines.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["medicineClassification"]) { this.medicineClassification.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["packaging"]) { issues.push(...this.packaging.doModelValidation()); }
    if (this["drugCharacteristic"]) { this.drugCharacteristic.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["contraindication"]) { this.contraindication.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["regulatory"]) { this.regulatory.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["kinetics"]) { this.kinetics.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
