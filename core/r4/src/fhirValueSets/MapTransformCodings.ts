// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-transform|4.0.1

import { CodingArgs } from '../fhir/Coding.js'

/**
 * How data is copied/created.
 */
export type MapTransformCodingType = {
  /**
   * append: append(source...) - source is element or string.
   */
  Append: CodingArgs;
  /**
   * c: Create a Coding. Parameters = (system. Code[, display]).
   */
  C: CodingArgs;
  /**
   * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.
   */
  Cast: CodingArgs;
  /**
   * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).
   */
  Cc: CodingArgs;
  /**
   * copy: copy(source).
   */
  Copy: CodingArgs;
  /**
   * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.
   */
  Cp: CodingArgs;
  /**
   * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.
   */
  Create: CodingArgs;
  /**
   * dateOp: Perform a date operation. *Parameters to be documented*.
   */
  DateOp: CodingArgs;
  /**
   * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.
   */
  Escape: CodingArgs;
  /**
   * evaluate: Execute the supplied FHIRPath expression and use the value returned by that.
   */
  Evaluate: CodingArgs;
  /**
   * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.
   */
  Id: CodingArgs;
  /**
   * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.
   */
  Pointer: CodingArgs;
  /**
   * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.
   */
  Qty: CodingArgs;
  /**
   * reference: reference(source : object) - return a string that references the provided tree properly.
   */
  Reference: CodingArgs;
  /**
   * translate: translate(source, uri_of_map) - use the translate operation.
   */
  Translate: CodingArgs;
  /**
   * truncate: truncate(source, length) - source must be stringy type.
   */
  Truncate: CodingArgs;
  /**
   * uuid: Generate a random UUID (in lowercase). No Parameters.
   */
  Uuid: CodingArgs;
}

/**
 * How data is copied/created.
 */
export const MapTransformCodings:MapTransformCodingType = {
  /**
   * append: append(source...) - source is element or string.
   */
  Append: {
    display: "append",
    code: "append",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * c: Create a Coding. Parameters = (system. Code[, display]).
   */
  C: {
    display: "c",
    code: "c",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.
   */
  Cast: {
    display: "cast",
    code: "cast",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).
   */
  Cc: {
    display: "cc",
    code: "cc",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * copy: copy(source).
   */
  Copy: {
    display: "copy",
    code: "copy",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.
   */
  Cp: {
    display: "cp",
    code: "cp",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.
   */
  Create: {
    display: "create",
    code: "create",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * dateOp: Perform a date operation. *Parameters to be documented*.
   */
  DateOp: {
    display: "dateOp",
    code: "dateOp",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.
   */
  Escape: {
    display: "escape",
    code: "escape",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * evaluate: Execute the supplied FHIRPath expression and use the value returned by that.
   */
  Evaluate: {
    display: "evaluate",
    code: "evaluate",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.
   */
  Id: {
    display: "id",
    code: "id",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.
   */
  Pointer: {
    display: "pointer",
    code: "pointer",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.
   */
  Qty: {
    display: "qty",
    code: "qty",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * reference: reference(source : object) - return a string that references the provided tree properly.
   */
  Reference: {
    display: "reference",
    code: "reference",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * translate: translate(source, uri_of_map) - use the translate operation.
   */
  Translate: {
    display: "translate",
    code: "translate",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * truncate: truncate(source, length) - source must be stringy type.
   */
  Truncate: {
    display: "truncate",
    code: "truncate",
    system: "http://hl7.org/fhir/map-transform",
  },
  /**
   * uuid: Generate a random UUID (in lowercase). No Parameters.
   */
  Uuid: {
    display: "uuid",
    code: "uuid",
    system: "http://hl7.org/fhir/map-transform",
  },
} as const;
