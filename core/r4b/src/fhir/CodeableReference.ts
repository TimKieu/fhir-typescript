// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: CodeableReference

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the CodeableReference type.
 */
export interface CodeableReferenceArgs extends fhir.FhirElementArgs {
  /**
   * A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.
   */
  concept?: fhir.CodeableConceptArgs|undefined;
  /**
   * A reference to a resource the provides exact details about the information being referenced.
   */
  reference?: fhir.ReferenceArgs|undefined;
}

/**
 * A reference to a resource (by instance), or instead, a reference to a concept defined in a terminology or ontology (by class).
 */
export class CodeableReference extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeableReference';
  /**
   * A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.
   */
  public concept?: fhir.CodeableConcept|undefined;
  /**
   * A reference to a resource the provides exact details about the information being referenced.
   */
  public reference?: fhir.Reference|undefined;
  /**
   * Default constructor for CodeableReference - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeableReferenceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['concept']) { this.concept = new fhir.CodeableConcept(source.concept); }
    if (source['reference']) { this.reference = new fhir.Reference(source.reference); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'CodeableReference' }
    this.vOS('concept',exp)
    this.vOS('reference',exp)
    return issues;
  }
}
