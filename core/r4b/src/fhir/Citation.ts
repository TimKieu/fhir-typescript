// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Citation

import * as fhir from '../fhir.js';

// @ts-ignore
import { CitationSummaryStyleCodes,  CitationSummaryStyleCodeType } from '../fhirValueSets/CitationSummaryStyleCodes.js';
// @ts-ignore
import { CitationSummaryStyleVsValidation } from '../fhirValueSets/CitationSummaryStyleVsValidation.js';
// @ts-ignore
import { CitationClassificationTypeCodes,  CitationClassificationTypeCodeType } from '../fhirValueSets/CitationClassificationTypeCodes.js';
// @ts-ignore
import { CitationClassificationTypeVsValidation } from '../fhirValueSets/CitationClassificationTypeVsValidation.js';
// @ts-ignore
import { CitationArtifactClassifierCodes,  CitationArtifactClassifierCodeType } from '../fhirValueSets/CitationArtifactClassifierCodes.js';
// @ts-ignore
import { CitationArtifactClassifierVsValidation } from '../fhirValueSets/CitationArtifactClassifierVsValidation.js';
// @ts-ignore
import { CitationStatusTypeCodes,  CitationStatusTypeCodeType } from '../fhirValueSets/CitationStatusTypeCodes.js';
// @ts-ignore
import { CitationStatusTypeVsValidation } from '../fhirValueSets/CitationStatusTypeVsValidation.js';
// @ts-ignore
import { ArtifactRelationshipTypeCodes,  ArtifactRelationshipTypeCodeType } from '../fhirValueSets/ArtifactRelationshipTypeCodes.js';
// @ts-ignore
import { ArtifactRelationshipTypeVsValidation } from '../fhirValueSets/ArtifactRelationshipTypeVsValidation.js';
// @ts-ignore
import { CitedArtifactStatusTypeCodes,  CitedArtifactStatusTypeCodeType } from '../fhirValueSets/CitedArtifactStatusTypeCodes.js';
// @ts-ignore
import { CitedArtifactStatusTypeVsValidation } from '../fhirValueSets/CitedArtifactStatusTypeVsValidation.js';
// @ts-ignore
import { TitleTypeCodes,  TitleTypeCodeType } from '../fhirValueSets/TitleTypeCodes.js';
// @ts-ignore
import { TitleTypeVsValidation } from '../fhirValueSets/TitleTypeVsValidation.js';
// @ts-ignore
import { LanguagesCodes,  LanguagesCodeType } from '../fhirValueSets/LanguagesCodes.js';
// @ts-ignore
import { LanguagesVsValidation } from '../fhirValueSets/LanguagesVsValidation.js';
// @ts-ignore
import { CitedArtifactAbstractTypeCodes,  CitedArtifactAbstractTypeCodeType } from '../fhirValueSets/CitedArtifactAbstractTypeCodes.js';
// @ts-ignore
import { CitedArtifactAbstractTypeVsValidation } from '../fhirValueSets/CitedArtifactAbstractTypeVsValidation.js';
// @ts-ignore
import { CitedArtifactPartTypeCodes,  CitedArtifactPartTypeCodeType } from '../fhirValueSets/CitedArtifactPartTypeCodes.js';
// @ts-ignore
import { CitedArtifactPartTypeVsValidation } from '../fhirValueSets/CitedArtifactPartTypeVsValidation.js';
// @ts-ignore
import { PublishedInTypeCodes,  PublishedInTypeCodeType } from '../fhirValueSets/PublishedInTypeCodes.js';
// @ts-ignore
import { PublishedInTypeVsValidation } from '../fhirValueSets/PublishedInTypeVsValidation.js';
// @ts-ignore
import { CitedMediumCodes,  CitedMediumCodeType } from '../fhirValueSets/CitedMediumCodes.js';
// @ts-ignore
import { CitedMediumVsValidation } from '../fhirValueSets/CitedMediumVsValidation.js';
// @ts-ignore
import { ArticleUrlTypeCodes,  ArticleUrlTypeCodeType } from '../fhirValueSets/ArticleUrlTypeCodes.js';
// @ts-ignore
import { ArticleUrlTypeVsValidation } from '../fhirValueSets/ArticleUrlTypeVsValidation.js';
// @ts-ignore
import { CitedArtifactClassificationTypeCodes,  CitedArtifactClassificationTypeCodeType } from '../fhirValueSets/CitedArtifactClassificationTypeCodes.js';
// @ts-ignore
import { CitedArtifactClassificationTypeVsValidation } from '../fhirValueSets/CitedArtifactClassificationTypeVsValidation.js';
// @ts-ignore
import { ArtifactContributionInstanceTypeCodes,  ArtifactContributionInstanceTypeCodeType } from '../fhirValueSets/ArtifactContributionInstanceTypeCodes.js';
// @ts-ignore
import { ArtifactContributionInstanceTypeVsValidation } from '../fhirValueSets/ArtifactContributionInstanceTypeVsValidation.js';
// @ts-ignore
import { ArtifactContributionTypeCodes,  ArtifactContributionTypeCodeType } from '../fhirValueSets/ArtifactContributionTypeCodes.js';
// @ts-ignore
import { ArtifactContributionTypeVsValidation } from '../fhirValueSets/ArtifactContributionTypeVsValidation.js';
// @ts-ignore
import { ContributorRoleCodes,  ContributorRoleCodeType } from '../fhirValueSets/ContributorRoleCodes.js';
// @ts-ignore
import { ContributorRoleVsValidation } from '../fhirValueSets/ContributorRoleVsValidation.js';
// @ts-ignore
import { ContributorSummaryTypeCodes,  ContributorSummaryTypeCodeType } from '../fhirValueSets/ContributorSummaryTypeCodes.js';
// @ts-ignore
import { ContributorSummaryTypeVsValidation } from '../fhirValueSets/ContributorSummaryTypeVsValidation.js';
// @ts-ignore
import { ContributorSummaryStyleCodes,  ContributorSummaryStyleCodeType } from '../fhirValueSets/ContributorSummaryStyleCodes.js';
// @ts-ignore
import { ContributorSummaryStyleVsValidation } from '../fhirValueSets/ContributorSummaryStyleVsValidation.js';
// @ts-ignore
import { ContributorSummarySourceCodes,  ContributorSummarySourceCodeType } from '../fhirValueSets/ContributorSummarySourceCodes.js';
// @ts-ignore
import { ContributorSummarySourceVsValidation } from '../fhirValueSets/ContributorSummarySourceVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { JurisdictionCodes,  JurisdictionCodeType } from '../fhirValueSets/JurisdictionCodes.js';
// @ts-ignore
import { JurisdictionVsValidation } from '../fhirValueSets/JurisdictionVsValidation.js';
/**
 * Valid arguments for the CitationSummary type.
 */
export interface CitationSummaryArgs extends fhir.BackboneElementArgs {
  /**
   * Format for display of the citation.
   */
  style?: fhir.CodeableConceptArgs|undefined;
  /**
   * The human-readable display of the citation.
   */
  text: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.summary.text
   */
  _text?:fhir.FhirElementArgs;
}

/**
 * A human-readable display of the citation.
 */
export class CitationSummary extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationSummary';
  /**
   * Format for display of the citation.
   */
  public style?: fhir.CodeableConcept|undefined;
  /**
   * The human-readable display of the citation.
   */
  public text: fhir.FhirMarkdown|null;
  /**
   * Default constructor for CitationSummary - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationSummaryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['style']) { this.style = new fhir.CodeableConcept(source.style, options); }
    if (source['text'] !== undefined) { this.text = new fhir.FhirMarkdown({value: source.text}, options); }
    else { this.text = null; }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirMarkdown(source._text as Partial<fhir.FhirMarkdownArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.summary' }
    iss.push(...this.vOS('style',exp));
    iss.push(...this.vRS('text',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationClassification type.
 */
export interface CitationClassificationArgs extends fhir.BackboneElementArgs {
  /**
   * The kind of classifier (e.g. publication type, keyword).
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The specific classification value.
   */
  classifier?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * The assignment to an organizing scheme.
 */
export class CitationClassification extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationClassification';
  /**
   * The kind of classifier (e.g. publication type, keyword).
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The specific classification value.
   */
  public classifier: fhir.CodeableConcept[];
  /**
   * Default constructor for CitationClassification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationClassificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['classifier']) { this.classifier = source.classifier.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.classifier = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.classification' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOA('classifier',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationStatusDate type.
 */
export interface CitationStatusDateArgs extends fhir.BackboneElementArgs {
  /**
   * Classification of the status.
   */
  activity: fhir.CodeableConceptArgs|null;
  /**
   * Either occurred or expected.
   */
  actual?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Citation.statusDate.actual
   */
  _actual?:fhir.FhirElementArgs;
  /**
   * For an instance, place the same value in both start and end elements.
   */
  period: fhir.PeriodArgs|null;
}

/**
 * An effective date or period for a status of the citation.
 */
export class CitationStatusDate extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationStatusDate';
  /**
   * Classification of the status.
   */
  public activity: fhir.CodeableConcept|null;
  /**
   * Either occurred or expected.
   */
  public actual?: fhir.FhirBoolean|undefined;
  /**
   * For an instance, place the same value in both start and end elements.
   */
  public period: fhir.Period|null;
  /**
   * Default constructor for CitationStatusDate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationStatusDateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['activity']) { this.activity = new fhir.CodeableConcept(source.activity, options); }
    else { this.activity = null; }
    if (source['actual'] !== undefined) { this.actual = new fhir.FhirBoolean({value: source.actual}, options); }
    if (source['_actual']) {
      if (this.actual) { this.actual.addExtendedProperties(source._actual!); }
      else { this.actual = new fhir.FhirBoolean(source._actual as Partial<fhir.FhirBooleanArgs>, options); }
    }
    if (source['period']) { this.period = new fhir.Period(source.period, options); }
    else { this.period = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.statusDate' }
    iss.push(...this.vRS('activity',exp));
    iss.push(...this.vOS('actual',exp));
    iss.push(...this.vRS('period',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationRelatesTo type.
 */
export interface CitationRelatesToArgs extends fhir.BackboneElementArgs {
  /**
   * How the Citation resource relates to the target artifact.
   */
  relationshipType: fhir.CodeableConceptArgs|null;
  /**
   * The clasification of the related artifact.
   */
  targetClassifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The article or artifact that the Citation Resource is related to.
   */
  target?: fhir.FhirUri|fhir.Identifier|fhir.Reference|fhir.Attachment|undefined;
  /**
   * The article or artifact that the Citation Resource is related to.
   */
  targetUri?: fhir.FhirUri|string|undefined;
  /**
   * The article or artifact that the Citation Resource is related to.
   */
  targetIdentifier?: fhir.IdentifierArgs|undefined;
  /**
   * The article or artifact that the Citation Resource is related to.
   */
  targetReference?: fhir.ReferenceArgs|undefined;
  /**
   * The article or artifact that the Citation Resource is related to.
   */
  targetAttachment?: fhir.AttachmentArgs|undefined;
}

/**
 * Artifact related to the Citation Resource.
 */
export class CitationRelatesTo extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationRelatesTo';
  /**
   * How the Citation resource relates to the target artifact.
   */
  public relationshipType: fhir.CodeableConcept|null;
  /**
   * The clasification of the related artifact.
   */
  public targetClassifier: fhir.CodeableConcept[];
  /**
   * The article or artifact that the Citation Resource is related to.
   */
  public target: (fhir.FhirUri|fhir.Identifier|fhir.Reference|fhir.Attachment)|null;
  /**
   * Internal flag to properly serialize choice-type element Citation.relatesTo.target[x]
   */
  protected static readonly _fts_targetIsChoice:true = true;
  /**
   * Default constructor for CitationRelatesTo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationRelatesToArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['relationshipType']) { this.relationshipType = new fhir.CodeableConcept(source.relationshipType, options); }
    else { this.relationshipType = null; }
    if (source['targetClassifier']) { this.targetClassifier = source.targetClassifier.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.targetClassifier = []; }
    if (source['target']) { this.target = source.target; }
    else if (source['targetUri'] !== undefined) { this.target = new fhir.FhirUri({value: source.targetUri}, options); }
    else if (source['targetIdentifier']) { this.target = new fhir.Identifier(source.targetIdentifier, options); }
    else if (source['targetReference']) { this.target = new fhir.Reference(source.targetReference, options); }
    else if (source['targetAttachment']) { this.target = new fhir.Attachment(source.targetAttachment, options); }
    else { this.target = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.relatesTo' }
    iss.push(...this.vRS('relationshipType',exp));
    iss.push(...this.vOA('targetClassifier',exp));
    iss.push(...this.vRS('target',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactVersion type.
 */
export interface CitationCitedArtifactVersionArgs extends fhir.BackboneElementArgs {
  /**
   * The version number or other version identifier.
   */
  value: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.version.value
   */
  _value?:fhir.FhirElementArgs;
  /**
   * Citation for the main version of the cited artifact.
   */
  baseCitation?: fhir.ReferenceArgs|undefined;
}

/**
 * The defined version of the cited artifact.
 */
export class CitationCitedArtifactVersion extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactVersion';
  /**
   * The version number or other version identifier.
   */
  public value: fhir.FhirString|null;
  /**
   * Citation for the main version of the cited artifact.
   */
  public baseCitation?: fhir.Reference|undefined;
  /**
   * Default constructor for CitationCitedArtifactVersion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactVersionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value'] !== undefined) { this.value = new fhir.FhirString({value: source.value}, options); }
    else { this.value = null; }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirString(source._value as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['baseCitation']) { this.baseCitation = new fhir.Reference(source.baseCitation, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.version' }
    iss.push(...this.vRS('value',exp));
    iss.push(...this.vOS('baseCitation',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactStatusDate type.
 */
export interface CitationCitedArtifactStatusDateArgs extends fhir.BackboneElementArgs {
  /**
   * Classification of the status.
   */
  activity: fhir.CodeableConceptArgs|null;
  /**
   * Either occurred or expected.
   */
  actual?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.statusDate.actual
   */
  _actual?:fhir.FhirElementArgs;
  /**
   * For an instance, place the same value in both start and end elements.
   */
  period: fhir.PeriodArgs|null;
}

/**
 * An effective date or period for a status of the cited artifact.
 */
export class CitationCitedArtifactStatusDate extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactStatusDate';
  /**
   * Classification of the status.
   */
  public activity: fhir.CodeableConcept|null;
  /**
   * Either occurred or expected.
   */
  public actual?: fhir.FhirBoolean|undefined;
  /**
   * For an instance, place the same value in both start and end elements.
   */
  public period: fhir.Period|null;
  /**
   * Default constructor for CitationCitedArtifactStatusDate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactStatusDateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['activity']) { this.activity = new fhir.CodeableConcept(source.activity, options); }
    else { this.activity = null; }
    if (source['actual'] !== undefined) { this.actual = new fhir.FhirBoolean({value: source.actual}, options); }
    if (source['_actual']) {
      if (this.actual) { this.actual.addExtendedProperties(source._actual!); }
      else { this.actual = new fhir.FhirBoolean(source._actual as Partial<fhir.FhirBooleanArgs>, options); }
    }
    if (source['period']) { this.period = new fhir.Period(source.period, options); }
    else { this.period = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.statusDate' }
    iss.push(...this.vRS('activity',exp));
    iss.push(...this.vOS('actual',exp));
    iss.push(...this.vRS('period',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactTitle type.
 */
export interface CitationCitedArtifactTitleArgs extends fhir.BackboneElementArgs {
  /**
   * Used to express the reason or specific aspect for the title.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Used to express the specific language.
   */
  language?: fhir.CodeableConceptArgs|undefined;
  /**
   * The title of the article or artifact.
   */
  text: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.title.text
   */
  _text?:fhir.FhirElementArgs;
}

/**
 * The title details of the article or artifact.
 */
export class CitationCitedArtifactTitle extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactTitle';
  /**
   * Used to express the reason or specific aspect for the title.
   */
  public type: fhir.CodeableConcept[];
  /**
   * Used to express the specific language.
   */
  public language?: fhir.CodeableConcept|undefined;
  /**
   * The title of the article or artifact.
   */
  public text: fhir.FhirMarkdown|null;
  /**
   * Default constructor for CitationCitedArtifactTitle - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactTitleArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.type = []; }
    if (source['language']) { this.language = new fhir.CodeableConcept(source.language, options); }
    if (source['text'] !== undefined) { this.text = new fhir.FhirMarkdown({value: source.text}, options); }
    else { this.text = null; }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirMarkdown(source._text as Partial<fhir.FhirMarkdownArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.title' }
    iss.push(...this.vOA('type',exp));
    iss.push(...this.vOS('language',exp));
    iss.push(...this.vRS('text',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactAbstract type.
 */
export interface CitationCitedArtifactAbstractArgs extends fhir.BackboneElementArgs {
  /**
   * Used to express the reason or specific aspect for the abstract.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Used to express the specific language.
   */
  language?: fhir.CodeableConceptArgs|undefined;
  /**
   * Abstract content.
   */
  text: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.abstract.text
   */
  _text?:fhir.FhirElementArgs;
  /**
   * Copyright notice for the abstract.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.abstract.copyright
   */
  _copyright?:fhir.FhirElementArgs;
}

/**
 * Summary of the article or artifact.
 */
export class CitationCitedArtifactAbstract extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactAbstract';
  /**
   * Used to express the reason or specific aspect for the abstract.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Used to express the specific language.
   */
  public language?: fhir.CodeableConcept|undefined;
  /**
   * Abstract content.
   */
  public text: fhir.FhirMarkdown|null;
  /**
   * Copyright notice for the abstract.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * Default constructor for CitationCitedArtifactAbstract - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactAbstractArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['language']) { this.language = new fhir.CodeableConcept(source.language, options); }
    if (source['text'] !== undefined) { this.text = new fhir.FhirMarkdown({value: source.text}, options); }
    else { this.text = null; }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirMarkdown(source._text as Partial<fhir.FhirMarkdownArgs>, options); }
    }
    if (source['copyright'] !== undefined) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}, options); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.abstract' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('language',exp));
    iss.push(...this.vRS('text',exp));
    iss.push(...this.vOS('copyright',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactPart type.
 */
export interface CitationCitedArtifactPartArgs extends fhir.BackboneElementArgs {
  /**
   * The kind of component.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The specification of the component.
   */
  value?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.part.value
   */
  _value?:fhir.FhirElementArgs;
  /**
   * The citation for the full article or artifact.
   */
  baseCitation?: fhir.ReferenceArgs|undefined;
}

/**
 * The component of the article or artifact.
 */
export class CitationCitedArtifactPart extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactPart';
  /**
   * The kind of component.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The specification of the component.
   */
  public value?: fhir.FhirString|undefined;
  /**
   * The citation for the full article or artifact.
   */
  public baseCitation?: fhir.Reference|undefined;
  /**
   * Default constructor for CitationCitedArtifactPart - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactPartArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['value'] !== undefined) { this.value = new fhir.FhirString({value: source.value}, options); }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirString(source._value as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['baseCitation']) { this.baseCitation = new fhir.Reference(source.baseCitation, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.part' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('value',exp));
    iss.push(...this.vOS('baseCitation',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactRelatesTo type.
 */
export interface CitationCitedArtifactRelatesToArgs extends fhir.BackboneElementArgs {
  /**
   * How the cited artifact relates to the target artifact.
   */
  relationshipType: fhir.CodeableConceptArgs|null;
  /**
   * The clasification of the related artifact.
   */
  targetClassifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The article or artifact that the cited artifact is related to.
   */
  target?: fhir.FhirUri|fhir.Identifier|fhir.Reference|fhir.Attachment|undefined;
  /**
   * The article or artifact that the cited artifact is related to.
   */
  targetUri?: fhir.FhirUri|string|undefined;
  /**
   * The article or artifact that the cited artifact is related to.
   */
  targetIdentifier?: fhir.IdentifierArgs|undefined;
  /**
   * The article or artifact that the cited artifact is related to.
   */
  targetReference?: fhir.ReferenceArgs|undefined;
  /**
   * The article or artifact that the cited artifact is related to.
   */
  targetAttachment?: fhir.AttachmentArgs|undefined;
}

/**
 * The artifact related to the cited artifact.
 */
export class CitationCitedArtifactRelatesTo extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactRelatesTo';
  /**
   * How the cited artifact relates to the target artifact.
   */
  public relationshipType: fhir.CodeableConcept|null;
  /**
   * The clasification of the related artifact.
   */
  public targetClassifier: fhir.CodeableConcept[];
  /**
   * The article or artifact that the cited artifact is related to.
   */
  public target: (fhir.FhirUri|fhir.Identifier|fhir.Reference|fhir.Attachment)|null;
  /**
   * Internal flag to properly serialize choice-type element Citation.citedArtifact.relatesTo.target[x]
   */
  protected static readonly _fts_targetIsChoice:true = true;
  /**
   * Default constructor for CitationCitedArtifactRelatesTo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactRelatesToArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['relationshipType']) { this.relationshipType = new fhir.CodeableConcept(source.relationshipType, options); }
    else { this.relationshipType = null; }
    if (source['targetClassifier']) { this.targetClassifier = source.targetClassifier.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.targetClassifier = []; }
    if (source['target']) { this.target = source.target; }
    else if (source['targetUri'] !== undefined) { this.target = new fhir.FhirUri({value: source.targetUri}, options); }
    else if (source['targetIdentifier']) { this.target = new fhir.Identifier(source.targetIdentifier, options); }
    else if (source['targetReference']) { this.target = new fhir.Reference(source.targetReference, options); }
    else if (source['targetAttachment']) { this.target = new fhir.Attachment(source.targetAttachment, options); }
    else { this.target = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.relatesTo' }
    iss.push(...this.vRS('relationshipType',exp));
    iss.push(...this.vOA('targetClassifier',exp));
    iss.push(...this.vRS('target',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactPublicationFormPublishedIn type.
 */
export interface CitationCitedArtifactPublicationFormPublishedInArgs extends fhir.BackboneElementArgs {
  /**
   * Journals and newspapers are coded as Periodical.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * ClinicalTrials.gov is a name of a database.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.publishedIn.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * Name of the publisher.
   */
  publisher?: fhir.ReferenceArgs|undefined;
  /**
   * Geographic location of the publisher.
   */
  publisherLocation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.publishedIn.publisherLocation
   */
  _publisherLocation?:fhir.FhirElementArgs;
}

/**
 * The collection the cited article or artifact is published in.
 */
export class CitationCitedArtifactPublicationFormPublishedIn extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactPublicationFormPublishedIn';
  /**
   * Journals and newspapers are coded as Periodical.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
   */
  public identifier: fhir.Identifier[];
  /**
   * ClinicalTrials.gov is a name of a database.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Name of the publisher.
   */
  public publisher?: fhir.Reference|undefined;
  /**
   * Geographic location of the publisher.
   */
  public publisherLocation?: fhir.FhirString|undefined;
  /**
   * Default constructor for CitationCitedArtifactPublicationFormPublishedIn - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactPublicationFormPublishedInArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['title'] !== undefined) { this.title = new fhir.FhirString({value: source.title}, options); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['publisher']) { this.publisher = new fhir.Reference(source.publisher, options); }
    if (source['publisherLocation'] !== undefined) { this.publisherLocation = new fhir.FhirString({value: source.publisherLocation}, options); }
    if (source['_publisherLocation']) {
      if (this.publisherLocation) { this.publisherLocation.addExtendedProperties(source._publisherLocation!); }
      else { this.publisherLocation = new fhir.FhirString(source._publisherLocation as Partial<fhir.FhirStringArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.publicationForm.publishedIn' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('title',exp));
    iss.push(...this.vOS('publisher',exp));
    iss.push(...this.vOS('publisherLocation',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication type.
 */
export interface CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublicationArgs extends fhir.BackboneElementArgs {
  /**
   * Date on which the issue of the journal was published.
   */
  date?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Year on which the issue of the journal was published.
   */
  year?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication.year
   */
  _year?:fhir.FhirElementArgs;
  /**
   * Month on which the issue of the journal was published.
   */
  month?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication.month
   */
  _month?:fhir.FhirElementArgs;
  /**
   * Day on which the issue of the journal was published.
   */
  day?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication.day
   */
  _day?:fhir.FhirElementArgs;
  /**
   * Spring, Summer, Fall/Autumn, Winter.
   */
  season?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication.season
   */
  _season?:fhir.FhirElementArgs;
  /**
   * Text representation of the date of which the issue of the journal was published.
   */
  text?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication.text
   */
  _text?:fhir.FhirElementArgs;
}

/**
 * Defining the date on which the issue of the journal was published.
 */
export class CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication';
  /**
   * Date on which the issue of the journal was published.
   */
  public date?: fhir.FhirDate|undefined;
  /**
   * Year on which the issue of the journal was published.
   */
  public year?: fhir.FhirString|undefined;
  /**
   * Month on which the issue of the journal was published.
   */
  public month?: fhir.FhirString|undefined;
  /**
   * Day on which the issue of the journal was published.
   */
  public day?: fhir.FhirString|undefined;
  /**
   * Spring, Summer, Fall/Autumn, Winter.
   */
  public season?: fhir.FhirString|undefined;
  /**
   * Text representation of the date of which the issue of the journal was published.
   */
  public text?: fhir.FhirString|undefined;
  /**
   * Default constructor for CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublicationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['date'] !== undefined) { this.date = new fhir.FhirDate({value: source.date}, options); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDate(source._date as Partial<fhir.FhirDateArgs>, options); }
    }
    if (source['year'] !== undefined) { this.year = new fhir.FhirString({value: source.year}, options); }
    if (source['_year']) {
      if (this.year) { this.year.addExtendedProperties(source._year!); }
      else { this.year = new fhir.FhirString(source._year as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['month'] !== undefined) { this.month = new fhir.FhirString({value: source.month}, options); }
    if (source['_month']) {
      if (this.month) { this.month.addExtendedProperties(source._month!); }
      else { this.month = new fhir.FhirString(source._month as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['day'] !== undefined) { this.day = new fhir.FhirString({value: source.day}, options); }
    if (source['_day']) {
      if (this.day) { this.day.addExtendedProperties(source._day!); }
      else { this.day = new fhir.FhirString(source._day as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['season'] !== undefined) { this.season = new fhir.FhirString({value: source.season}, options); }
    if (source['_season']) {
      if (this.season) { this.season.addExtendedProperties(source._season!); }
      else { this.season = new fhir.FhirString(source._season as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['text'] !== undefined) { this.text = new fhir.FhirString({value: source.text}, options); }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirString(source._text as Partial<fhir.FhirStringArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication' }
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('year',exp));
    iss.push(...this.vOS('month',exp));
    iss.push(...this.vOS('day',exp));
    iss.push(...this.vOS('season',exp));
    iss.push(...this.vOS('text',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactPublicationFormPeriodicRelease type.
 */
export interface CitationCitedArtifactPublicationFormPeriodicReleaseArgs extends fhir.BackboneElementArgs {
  /**
   * National Library of Medicine uses the codes "Internet" or "Print".
   */
  citedMedium?: fhir.CodeableConceptArgs|undefined;
  /**
   * Volume number of journal in which the article is published.
   */
  volume?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.volume
   */
  _volume?:fhir.FhirElementArgs;
  /**
   * Issue, part or supplement of journal in which the article is published.
   */
  issue?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.periodicRelease.issue
   */
  _issue?:fhir.FhirElementArgs;
  /**
   * Defining the date on which the issue of the journal was published.
   */
  dateOfPublication?: fhir.CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublicationArgs|undefined;
}

/**
 * The specific issue in which the cited article resides.
 */
export class CitationCitedArtifactPublicationFormPeriodicRelease extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactPublicationFormPeriodicRelease';
  /**
   * National Library of Medicine uses the codes "Internet" or "Print".
   */
  public citedMedium?: fhir.CodeableConcept|undefined;
  /**
   * Volume number of journal in which the article is published.
   */
  public volume?: fhir.FhirString|undefined;
  /**
   * Issue, part or supplement of journal in which the article is published.
   */
  public issue?: fhir.FhirString|undefined;
  /**
   * Defining the date on which the issue of the journal was published.
   */
  public dateOfPublication?: fhir.CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication|undefined;
  /**
   * Default constructor for CitationCitedArtifactPublicationFormPeriodicRelease - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactPublicationFormPeriodicReleaseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['citedMedium']) { this.citedMedium = new fhir.CodeableConcept(source.citedMedium, options); }
    if (source['volume'] !== undefined) { this.volume = new fhir.FhirString({value: source.volume}, options); }
    if (source['_volume']) {
      if (this.volume) { this.volume.addExtendedProperties(source._volume!); }
      else { this.volume = new fhir.FhirString(source._volume as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['issue'] !== undefined) { this.issue = new fhir.FhirString({value: source.issue}, options); }
    if (source['_issue']) {
      if (this.issue) { this.issue.addExtendedProperties(source._issue!); }
      else { this.issue = new fhir.FhirString(source._issue as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['dateOfPublication']) { this.dateOfPublication = new fhir.CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(source.dateOfPublication, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.publicationForm.periodicRelease' }
    iss.push(...this.vOS('citedMedium',exp));
    iss.push(...this.vOS('volume',exp));
    iss.push(...this.vOS('issue',exp));
    iss.push(...this.vOS('dateOfPublication',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactPublicationForm type.
 */
export interface CitationCitedArtifactPublicationFormArgs extends fhir.BackboneElementArgs {
  /**
   * The collection the cited article or artifact is published in.
   */
  publishedIn?: fhir.CitationCitedArtifactPublicationFormPublishedInArgs|undefined;
  /**
   * The specific issue in which the cited article resides.
   */
  periodicRelease?: fhir.CitationCitedArtifactPublicationFormPeriodicReleaseArgs|undefined;
  /**
   * The date the article was added to the database, or the date the article was released (which may differ from the journal issue publication date).
   */
  articleDate?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.articleDate
   */
  _articleDate?:fhir.FhirElementArgs;
  /**
   * The date the article was last revised or updated in the database.
   */
  lastRevisionDate?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.lastRevisionDate
   */
  _lastRevisionDate?:fhir.FhirElementArgs;
  /**
   * Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
   */
  language?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Entry number or identifier for inclusion in a database.
   */
  accessionNumber?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.accessionNumber
   */
  _accessionNumber?:fhir.FhirElementArgs;
  /**
   * Used for full display of pagination.
   */
  pageString?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.pageString
   */
  _pageString?:fhir.FhirElementArgs;
  /**
   * Used for isolated representation of first page.
   */
  firstPage?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.firstPage
   */
  _firstPage?:fhir.FhirElementArgs;
  /**
   * Used for isolated representation of last page.
   */
  lastPage?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.lastPage
   */
  _lastPage?:fhir.FhirElementArgs;
  /**
   * Actual or approximate number of pages or screens.
   */
  pageCount?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.pageCount
   */
  _pageCount?:fhir.FhirElementArgs;
  /**
   * Copyright notice for the full article or artifact.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.publicationForm.copyright
   */
  _copyright?:fhir.FhirElementArgs;
}

/**
 * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
 */
export class CitationCitedArtifactPublicationForm extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactPublicationForm';
  /**
   * The collection the cited article or artifact is published in.
   */
  public publishedIn?: fhir.CitationCitedArtifactPublicationFormPublishedIn|undefined;
  /**
   * The specific issue in which the cited article resides.
   */
  public periodicRelease?: fhir.CitationCitedArtifactPublicationFormPeriodicRelease|undefined;
  /**
   * The date the article was added to the database, or the date the article was released (which may differ from the journal issue publication date).
   */
  public articleDate?: fhir.FhirDateTime|undefined;
  /**
   * The date the article was last revised or updated in the database.
   */
  public lastRevisionDate?: fhir.FhirDateTime|undefined;
  /**
   * Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
   */
  public language: fhir.CodeableConcept[];
  /**
   * Entry number or identifier for inclusion in a database.
   */
  public accessionNumber?: fhir.FhirString|undefined;
  /**
   * Used for full display of pagination.
   */
  public pageString?: fhir.FhirString|undefined;
  /**
   * Used for isolated representation of first page.
   */
  public firstPage?: fhir.FhirString|undefined;
  /**
   * Used for isolated representation of last page.
   */
  public lastPage?: fhir.FhirString|undefined;
  /**
   * Actual or approximate number of pages or screens.
   */
  public pageCount?: fhir.FhirString|undefined;
  /**
   * Copyright notice for the full article or artifact.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * Default constructor for CitationCitedArtifactPublicationForm - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactPublicationFormArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['publishedIn']) { this.publishedIn = new fhir.CitationCitedArtifactPublicationFormPublishedIn(source.publishedIn, options); }
    if (source['periodicRelease']) { this.periodicRelease = new fhir.CitationCitedArtifactPublicationFormPeriodicRelease(source.periodicRelease, options); }
    if (source['articleDate'] !== undefined) { this.articleDate = new fhir.FhirDateTime({value: source.articleDate}, options); }
    if (source['_articleDate']) {
      if (this.articleDate) { this.articleDate.addExtendedProperties(source._articleDate!); }
      else { this.articleDate = new fhir.FhirDateTime(source._articleDate as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['lastRevisionDate'] !== undefined) { this.lastRevisionDate = new fhir.FhirDateTime({value: source.lastRevisionDate}, options); }
    if (source['_lastRevisionDate']) {
      if (this.lastRevisionDate) { this.lastRevisionDate.addExtendedProperties(source._lastRevisionDate!); }
      else { this.lastRevisionDate = new fhir.FhirDateTime(source._lastRevisionDate as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['language']) { this.language = source.language.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.language = []; }
    if (source['accessionNumber'] !== undefined) { this.accessionNumber = new fhir.FhirString({value: source.accessionNumber}, options); }
    if (source['_accessionNumber']) {
      if (this.accessionNumber) { this.accessionNumber.addExtendedProperties(source._accessionNumber!); }
      else { this.accessionNumber = new fhir.FhirString(source._accessionNumber as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['pageString'] !== undefined) { this.pageString = new fhir.FhirString({value: source.pageString}, options); }
    if (source['_pageString']) {
      if (this.pageString) { this.pageString.addExtendedProperties(source._pageString!); }
      else { this.pageString = new fhir.FhirString(source._pageString as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['firstPage'] !== undefined) { this.firstPage = new fhir.FhirString({value: source.firstPage}, options); }
    if (source['_firstPage']) {
      if (this.firstPage) { this.firstPage.addExtendedProperties(source._firstPage!); }
      else { this.firstPage = new fhir.FhirString(source._firstPage as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['lastPage'] !== undefined) { this.lastPage = new fhir.FhirString({value: source.lastPage}, options); }
    if (source['_lastPage']) {
      if (this.lastPage) { this.lastPage.addExtendedProperties(source._lastPage!); }
      else { this.lastPage = new fhir.FhirString(source._lastPage as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['pageCount'] !== undefined) { this.pageCount = new fhir.FhirString({value: source.pageCount}, options); }
    if (source['_pageCount']) {
      if (this.pageCount) { this.pageCount.addExtendedProperties(source._pageCount!); }
      else { this.pageCount = new fhir.FhirString(source._pageCount as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['copyright'] !== undefined) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}, options); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.publicationForm' }
    iss.push(...this.vOS('publishedIn',exp));
    iss.push(...this.vOS('periodicRelease',exp));
    iss.push(...this.vOS('articleDate',exp));
    iss.push(...this.vOS('lastRevisionDate',exp));
    iss.push(...this.vOA('language',exp));
    iss.push(...this.vOS('accessionNumber',exp));
    iss.push(...this.vOS('pageString',exp));
    iss.push(...this.vOS('firstPage',exp));
    iss.push(...this.vOS('lastPage',exp));
    iss.push(...this.vOS('pageCount',exp));
    iss.push(...this.vOS('copyright',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactWebLocation type.
 */
export interface CitationCitedArtifactWebLocationArgs extends fhir.BackboneElementArgs {
  /**
   * Code the reason for different URLs, e.g. abstract and full-text.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Persistent URLs, like doi, are preferred.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.webLocation.url
   */
  _url?:fhir.FhirElementArgs;
}

/**
 * Used for any URL for the article or artifact cited.
 */
export class CitationCitedArtifactWebLocation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactWebLocation';
  /**
   * Code the reason for different URLs, e.g. abstract and full-text.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Persistent URLs, like doi, are preferred.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Default constructor for CitationCitedArtifactWebLocation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactWebLocationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['url'] !== undefined) { this.url = new fhir.FhirUri({value: source.url}, options); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.webLocation' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('url',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactClassificationWhoClassified type.
 */
export interface CitationCitedArtifactClassificationWhoClassifiedArgs extends fhir.BackboneElementArgs {
  /**
   * Person who created the classification.
   */
  person?: fhir.ReferenceArgs|undefined;
  /**
   * Organization who created the classification.
   */
  organization?: fhir.ReferenceArgs|undefined;
  /**
   * The publisher of the classification, not the publisher of the article or artifact being cited.
   */
  publisher?: fhir.ReferenceArgs|undefined;
  /**
   * Rights management statement for the classification.
   */
  classifierCopyright?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.classification.whoClassified.classifierCopyright
   */
  _classifierCopyright?:fhir.FhirElementArgs;
  /**
   * Acceptable to re-use the classification.
   */
  freeToShare?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.classification.whoClassified.freeToShare
   */
  _freeToShare?:fhir.FhirElementArgs;
}

/**
 * Provenance and copyright of classification.
 */
export class CitationCitedArtifactClassificationWhoClassified extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactClassificationWhoClassified';
  /**
   * Person who created the classification.
   */
  public person?: fhir.Reference|undefined;
  /**
   * Organization who created the classification.
   */
  public organization?: fhir.Reference|undefined;
  /**
   * The publisher of the classification, not the publisher of the article or artifact being cited.
   */
  public publisher?: fhir.Reference|undefined;
  /**
   * Rights management statement for the classification.
   */
  public classifierCopyright?: fhir.FhirString|undefined;
  /**
   * Acceptable to re-use the classification.
   */
  public freeToShare?: fhir.FhirBoolean|undefined;
  /**
   * Default constructor for CitationCitedArtifactClassificationWhoClassified - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactClassificationWhoClassifiedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['person']) { this.person = new fhir.Reference(source.person, options); }
    if (source['organization']) { this.organization = new fhir.Reference(source.organization, options); }
    if (source['publisher']) { this.publisher = new fhir.Reference(source.publisher, options); }
    if (source['classifierCopyright'] !== undefined) { this.classifierCopyright = new fhir.FhirString({value: source.classifierCopyright}, options); }
    if (source['_classifierCopyright']) {
      if (this.classifierCopyright) { this.classifierCopyright.addExtendedProperties(source._classifierCopyright!); }
      else { this.classifierCopyright = new fhir.FhirString(source._classifierCopyright as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['freeToShare'] !== undefined) { this.freeToShare = new fhir.FhirBoolean({value: source.freeToShare}, options); }
    if (source['_freeToShare']) {
      if (this.freeToShare) { this.freeToShare.addExtendedProperties(source._freeToShare!); }
      else { this.freeToShare = new fhir.FhirBoolean(source._freeToShare as Partial<fhir.FhirBooleanArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.classification.whoClassified' }
    iss.push(...this.vOS('person',exp));
    iss.push(...this.vOS('organization',exp));
    iss.push(...this.vOS('publisher',exp));
    iss.push(...this.vOS('classifierCopyright',exp));
    iss.push(...this.vOS('freeToShare',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactClassification type.
 */
export interface CitationCitedArtifactClassificationArgs extends fhir.BackboneElementArgs {
  /**
   * The kind of classifier (e.g. publication type, keyword).
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The specific classification value.
   */
  classifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Provenance and copyright of classification.
   */
  whoClassified?: fhir.CitationCitedArtifactClassificationWhoClassifiedArgs|undefined;
}

/**
 * The assignment to an organizing scheme.
 */
export class CitationCitedArtifactClassification extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactClassification';
  /**
   * The kind of classifier (e.g. publication type, keyword).
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The specific classification value.
   */
  public classifier: fhir.CodeableConcept[];
  /**
   * Provenance and copyright of classification.
   */
  public whoClassified?: fhir.CitationCitedArtifactClassificationWhoClassified|undefined;
  /**
   * Default constructor for CitationCitedArtifactClassification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactClassificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['classifier']) { this.classifier = source.classifier.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.classifier = []; }
    if (source['whoClassified']) { this.whoClassified = new fhir.CitationCitedArtifactClassificationWhoClassified(source.whoClassified, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.classification' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOA('classifier',exp));
    iss.push(...this.vOS('whoClassified',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactContributorshipEntryAffiliationInfo type.
 */
export interface CitationCitedArtifactContributorshipEntryAffiliationInfoArgs extends fhir.BackboneElementArgs {
  /**
   * Display for the organization.
   */
  affiliation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.affiliationInfo.affiliation
   */
  _affiliation?:fhir.FhirElementArgs;
  /**
   * Role within the organization, such as professional title.
   */
  role?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.affiliationInfo.role
   */
  _role?:fhir.FhirElementArgs;
  /**
   * Identifier for the organization.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
}

/**
 * Organization affiliated with the entity.
 */
export class CitationCitedArtifactContributorshipEntryAffiliationInfo extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactContributorshipEntryAffiliationInfo';
  /**
   * Display for the organization.
   */
  public affiliation?: fhir.FhirString|undefined;
  /**
   * Role within the organization, such as professional title.
   */
  public role?: fhir.FhirString|undefined;
  /**
   * Identifier for the organization.
   */
  public identifier: fhir.Identifier[];
  /**
   * Default constructor for CitationCitedArtifactContributorshipEntryAffiliationInfo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactContributorshipEntryAffiliationInfoArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['affiliation'] !== undefined) { this.affiliation = new fhir.FhirString({value: source.affiliation}, options); }
    if (source['_affiliation']) {
      if (this.affiliation) { this.affiliation.addExtendedProperties(source._affiliation!); }
      else { this.affiliation = new fhir.FhirString(source._affiliation as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['role'] !== undefined) { this.role = new fhir.FhirString({value: source.role}, options); }
    if (source['_role']) {
      if (this.role) { this.role.addExtendedProperties(source._role!); }
      else { this.role = new fhir.FhirString(source._role as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.contributorship.entry.affiliationInfo' }
    iss.push(...this.vOS('affiliation',exp));
    iss.push(...this.vOS('role',exp));
    iss.push(...this.vOA('identifier',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactContributorshipEntryContributionInstance type.
 */
export interface CitationCitedArtifactContributorshipEntryContributionInstanceArgs extends fhir.BackboneElementArgs {
  /**
   * The specific contribution.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The time that the contribution was made.
   */
  time?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.contributionInstance.time
   */
  _time?:fhir.FhirElementArgs;
}

/**
 * Contributions with accounting for time or number.
 */
export class CitationCitedArtifactContributorshipEntryContributionInstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactContributorshipEntryContributionInstance';
  /**
   * The specific contribution.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The time that the contribution was made.
   */
  public time?: fhir.FhirDateTime|undefined;
  /**
   * Default constructor for CitationCitedArtifactContributorshipEntryContributionInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactContributorshipEntryContributionInstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    else { this.type = null; }
    if (source['time'] !== undefined) { this.time = new fhir.FhirDateTime({value: source.time}, options); }
    if (source['_time']) {
      if (this.time) { this.time.addExtendedProperties(source._time!); }
      else { this.time = new fhir.FhirDateTime(source._time as Partial<fhir.FhirDateTimeArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.contributorship.entry.contributionInstance' }
    iss.push(...this.vRS('type',exp));
    iss.push(...this.vOS('time',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactContributorshipEntry type.
 */
export interface CitationCitedArtifactContributorshipEntryArgs extends fhir.BackboneElementArgs {
  /**
   * humanName.family can match MEDLINE-based lastName (used for surname or single name), humanName.given can match MEDLINE-based forename (used for remainder of name except for suffix), humanName.suffix can match MEDLINE-based suffix (eg 2nd, 3rd, Jr, Sr).
   */
  name?: fhir.HumanNameArgs|undefined;
  /**
   * This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
   */
  initials?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.initials
   */
  _initials?:fhir.FhirElementArgs;
  /**
   * This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
   */
  collectiveName?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.collectiveName
   */
  _collectiveName?:fhir.FhirElementArgs;
  /**
   * Avoids needing to disambiguate common last names or changes of name. ORCID is commonly used as author identifier.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Organization affiliated with the entity.
   */
  affiliationInfo?: fhir.CitationCitedArtifactContributorshipEntryAffiliationInfoArgs[]|undefined;
  /**
   * Physical mailing address for the author or contributor.
   */
  address?: fhir.AddressArgs[]|undefined;
  /**
   * Email or telephone contact methods for the author or contributor.
   */
  telecom?: fhir.ContactPointArgs[]|undefined;
  /**
   * The CreDiT taxonomy provides a way to encode contribution information inside article XML files. The purpose of CRediT is to provide transparency in contributions to scholarly published work, to enable improved systems of attribution, credit, and accountability.
   */
  contributionType?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The role of the contributor (e.g. author, editor, reviewer).
   */
  role?: fhir.CodeableConceptArgs|undefined;
  /**
   * Contributions with accounting for time or number.
   */
  contributionInstance?: fhir.CitationCitedArtifactContributorshipEntryContributionInstanceArgs[]|undefined;
  /**
   * Indication of which contributor is the corresponding contributor for the role.
   */
  correspondingContact?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.correspondingContact
   */
  _correspondingContact?:fhir.FhirElementArgs;
  /**
   * Used to code order of authors.
   */
  listOrder?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.entry.listOrder
   */
  _listOrder?:fhir.FhirElementArgs;
}

/**
 * Used to report contributorship in individualized ways.
 */
export class CitationCitedArtifactContributorshipEntry extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactContributorshipEntry';
  /**
   * humanName.family can match MEDLINE-based lastName (used for surname or single name), humanName.given can match MEDLINE-based forename (used for remainder of name except for suffix), humanName.suffix can match MEDLINE-based suffix (eg 2nd, 3rd, Jr, Sr).
   */
  public name?: fhir.HumanName|undefined;
  /**
   * This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
   */
  public initials?: fhir.FhirString|undefined;
  /**
   * This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
   */
  public collectiveName?: fhir.FhirString|undefined;
  /**
   * Avoids needing to disambiguate common last names or changes of name. ORCID is commonly used as author identifier.
   */
  public identifier: fhir.Identifier[];
  /**
   * Organization affiliated with the entity.
   */
  public affiliationInfo: fhir.CitationCitedArtifactContributorshipEntryAffiliationInfo[];
  /**
   * Physical mailing address for the author or contributor.
   */
  public address: fhir.Address[];
  /**
   * Email or telephone contact methods for the author or contributor.
   */
  public telecom: fhir.ContactPoint[];
  /**
   * The CreDiT taxonomy provides a way to encode contribution information inside article XML files. The purpose of CRediT is to provide transparency in contributions to scholarly published work, to enable improved systems of attribution, credit, and accountability.
   */
  public contributionType: fhir.CodeableConcept[];
  /**
   * The role of the contributor (e.g. author, editor, reviewer).
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * Contributions with accounting for time or number.
   */
  public contributionInstance: fhir.CitationCitedArtifactContributorshipEntryContributionInstance[];
  /**
   * Indication of which contributor is the corresponding contributor for the role.
   */
  public correspondingContact?: fhir.FhirBoolean|undefined;
  /**
   * Used to code order of authors.
   */
  public listOrder?: fhir.FhirPositiveInt|undefined;
  /**
   * Default constructor for CitationCitedArtifactContributorshipEntry - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactContributorshipEntryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.HumanName(source.name, options); }
    if (source['initials'] !== undefined) { this.initials = new fhir.FhirString({value: source.initials}, options); }
    if (source['_initials']) {
      if (this.initials) { this.initials.addExtendedProperties(source._initials!); }
      else { this.initials = new fhir.FhirString(source._initials as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['collectiveName'] !== undefined) { this.collectiveName = new fhir.FhirString({value: source.collectiveName}, options); }
    if (source['_collectiveName']) {
      if (this.collectiveName) { this.collectiveName.addExtendedProperties(source._collectiveName!); }
      else { this.collectiveName = new fhir.FhirString(source._collectiveName as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['affiliationInfo']) { this.affiliationInfo = source.affiliationInfo.map((x) => new fhir.CitationCitedArtifactContributorshipEntryAffiliationInfo(x, options)); }
    else { this.affiliationInfo = []; }
    if (source['address']) { this.address = source.address.map((x) => new fhir.Address(x, options)); }
    else { this.address = []; }
    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options)); }
    else { this.telecom = []; }
    if (source['contributionType']) { this.contributionType = source.contributionType.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.contributionType = []; }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role, options); }
    if (source['contributionInstance']) { this.contributionInstance = source.contributionInstance.map((x) => new fhir.CitationCitedArtifactContributorshipEntryContributionInstance(x, options)); }
    else { this.contributionInstance = []; }
    if (source['correspondingContact'] !== undefined) { this.correspondingContact = new fhir.FhirBoolean({value: source.correspondingContact}, options); }
    if (source['_correspondingContact']) {
      if (this.correspondingContact) { this.correspondingContact.addExtendedProperties(source._correspondingContact!); }
      else { this.correspondingContact = new fhir.FhirBoolean(source._correspondingContact as Partial<fhir.FhirBooleanArgs>, options); }
    }
    if (source['listOrder'] !== undefined) { this.listOrder = new fhir.FhirPositiveInt({value: source.listOrder}, options); }
    if (source['_listOrder']) {
      if (this.listOrder) { this.listOrder.addExtendedProperties(source._listOrder!); }
      else { this.listOrder = new fhir.FhirPositiveInt(source._listOrder as Partial<fhir.FhirPositiveIntArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.contributorship.entry' }
    iss.push(...this.vOS('name',exp));
    iss.push(...this.vOS('initials',exp));
    iss.push(...this.vOS('collectiveName',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOA('affiliationInfo',exp));
    iss.push(...this.vOA('address',exp));
    iss.push(...this.vOA('telecom',exp));
    iss.push(...this.vOA('contributionType',exp));
    iss.push(...this.vOS('role',exp));
    iss.push(...this.vOA('contributionInstance',exp));
    iss.push(...this.vOS('correspondingContact',exp));
    iss.push(...this.vOS('listOrder',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactContributorshipSummary type.
 */
export interface CitationCitedArtifactContributorshipSummaryArgs extends fhir.BackboneElementArgs {
  /**
   * Used most commonly to express an author list or a contributorship statement.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The format for the display string.
   */
  style?: fhir.CodeableConceptArgs|undefined;
  /**
   * Used to code the producer or rule for creating the display string.
   */
  source?: fhir.CodeableConceptArgs|undefined;
  /**
   * The display string for the author list, contributor list, or contributorship statement.
   */
  value: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.summary.value
   */
  _value?:fhir.FhirElementArgs;
}

/**
 * Used to record a display of the author/contributor list without separate coding for each list member.
 */
export class CitationCitedArtifactContributorshipSummary extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactContributorshipSummary';
  /**
   * Used most commonly to express an author list or a contributorship statement.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The format for the display string.
   */
  public style?: fhir.CodeableConcept|undefined;
  /**
   * Used to code the producer or rule for creating the display string.
   */
  public source?: fhir.CodeableConcept|undefined;
  /**
   * The display string for the author list, contributor list, or contributorship statement.
   */
  public value: fhir.FhirMarkdown|null;
  /**
   * Default constructor for CitationCitedArtifactContributorshipSummary - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactContributorshipSummaryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['style']) { this.style = new fhir.CodeableConcept(source.style, options); }
    if (source['source']) { this.source = new fhir.CodeableConcept(source.source, options); }
    if (source['value'] !== undefined) { this.value = new fhir.FhirMarkdown({value: source.value}, options); }
    else { this.value = null; }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirMarkdown(source._value as Partial<fhir.FhirMarkdownArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.contributorship.summary' }
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('style',exp));
    iss.push(...this.vOS('source',exp));
    iss.push(...this.vRS('value',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifactContributorship type.
 */
export interface CitationCitedArtifactContributorshipArgs extends fhir.BackboneElementArgs {
  /**
   * If list is incomplete "et al" can be appended to Contributorship.summary.value for display purposes.
   */
  complete?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.contributorship.complete
   */
  _complete?:fhir.FhirElementArgs;
  /**
   * Used to report contributorship in individualized ways.
   */
  entry?: fhir.CitationCitedArtifactContributorshipEntryArgs[]|undefined;
  /**
   * Used to record a display of the author/contributor list without separate coding for each list member.
   */
  summary?: fhir.CitationCitedArtifactContributorshipSummaryArgs[]|undefined;
}

/**
 * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
 */
export class CitationCitedArtifactContributorship extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifactContributorship';
  /**
   * If list is incomplete "et al" can be appended to Contributorship.summary.value for display purposes.
   */
  public complete?: fhir.FhirBoolean|undefined;
  /**
   * Used to report contributorship in individualized ways.
   */
  public entry: fhir.CitationCitedArtifactContributorshipEntry[];
  /**
   * Used to record a display of the author/contributor list without separate coding for each list member.
   */
  public summary: fhir.CitationCitedArtifactContributorshipSummary[];
  /**
   * Default constructor for CitationCitedArtifactContributorship - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactContributorshipArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['complete'] !== undefined) { this.complete = new fhir.FhirBoolean({value: source.complete}, options); }
    if (source['_complete']) {
      if (this.complete) { this.complete.addExtendedProperties(source._complete!); }
      else { this.complete = new fhir.FhirBoolean(source._complete as Partial<fhir.FhirBooleanArgs>, options); }
    }
    if (source['entry']) { this.entry = source.entry.map((x) => new fhir.CitationCitedArtifactContributorshipEntry(x, options)); }
    else { this.entry = []; }
    if (source['summary']) { this.summary = source.summary.map((x) => new fhir.CitationCitedArtifactContributorshipSummary(x, options)); }
    else { this.summary = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact.contributorship' }
    iss.push(...this.vOS('complete',exp));
    iss.push(...this.vOA('entry',exp));
    iss.push(...this.vOA('summary',exp));
    return iss;
  }
}
/**
 * Valid arguments for the CitationCitedArtifact type.
 */
export interface CitationCitedArtifactArgs extends fhir.BackboneElementArgs {
  /**
   * May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This identifier can be valid for multiple citation resources.
   */
  relatedIdentifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * When the cited artifact was accessed.
   */
  dateAccessed?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Citation.citedArtifact.dateAccessed
   */
  _dateAccessed?:fhir.FhirElementArgs;
  /**
   * The defined version of the cited artifact.
   */
  version?: fhir.CitationCitedArtifactVersionArgs|undefined;
  /**
   * The status of the cited artifact.
   */
  currentState?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * An effective date or period for a status of the cited artifact.
   */
  statusDate?: fhir.CitationCitedArtifactStatusDateArgs[]|undefined;
  /**
   * The title details of the article or artifact.
   */
  title?: fhir.CitationCitedArtifactTitleArgs[]|undefined;
  /**
   * Summary of the article or artifact.
   */
  abstract?: fhir.CitationCitedArtifactAbstractArgs[]|undefined;
  /**
   * The component of the article or artifact.
   */
  part?: fhir.CitationCitedArtifactPartArgs|undefined;
  /**
   * The artifact related to the cited artifact.
   */
  relatesTo?: fhir.CitationCitedArtifactRelatesToArgs[]|undefined;
  /**
   * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
   */
  publicationForm?: fhir.CitationCitedArtifactPublicationFormArgs[]|undefined;
  /**
   * Used for any URL for the article or artifact cited.
   */
  webLocation?: fhir.CitationCitedArtifactWebLocationArgs[]|undefined;
  /**
   * The assignment to an organizing scheme.
   */
  classification?: fhir.CitationCitedArtifactClassificationArgs[]|undefined;
  /**
   * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
   */
  contributorship?: fhir.CitationCitedArtifactContributorshipArgs|undefined;
  /**
   * Any additional information or content for the article or artifact.
   */
  note?: fhir.AnnotationArgs[]|undefined;
}

/**
 * The article or artifact being described.
 */
export class CitationCitedArtifact extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CitationCitedArtifact';
  /**
   * May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
   */
  public identifier: fhir.Identifier[];
  /**
   * May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This identifier can be valid for multiple citation resources.
   */
  public relatedIdentifier: fhir.Identifier[];
  /**
   * When the cited artifact was accessed.
   */
  public dateAccessed?: fhir.FhirDateTime|undefined;
  /**
   * The defined version of the cited artifact.
   */
  public version?: fhir.CitationCitedArtifactVersion|undefined;
  /**
   * The status of the cited artifact.
   */
  public currentState: fhir.CodeableConcept[];
  /**
   * An effective date or period for a status of the cited artifact.
   */
  public statusDate: fhir.CitationCitedArtifactStatusDate[];
  /**
   * The title details of the article or artifact.
   */
  public title: fhir.CitationCitedArtifactTitle[];
  /**
   * Summary of the article or artifact.
   */
  public abstract: fhir.CitationCitedArtifactAbstract[];
  /**
   * The component of the article or artifact.
   */
  public part?: fhir.CitationCitedArtifactPart|undefined;
  /**
   * The artifact related to the cited artifact.
   */
  public relatesTo: fhir.CitationCitedArtifactRelatesTo[];
  /**
   * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
   */
  public publicationForm: fhir.CitationCitedArtifactPublicationForm[];
  /**
   * Used for any URL for the article or artifact cited.
   */
  public webLocation: fhir.CitationCitedArtifactWebLocation[];
  /**
   * The assignment to an organizing scheme.
   */
  public classification: fhir.CitationCitedArtifactClassification[];
  /**
   * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
   */
  public contributorship?: fhir.CitationCitedArtifactContributorship|undefined;
  /**
   * Any additional information or content for the article or artifact.
   */
  public note: fhir.Annotation[];
  /**
   * Default constructor for CitationCitedArtifact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationCitedArtifactArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['relatedIdentifier']) { this.relatedIdentifier = source.relatedIdentifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.relatedIdentifier = []; }
    if (source['dateAccessed'] !== undefined) { this.dateAccessed = new fhir.FhirDateTime({value: source.dateAccessed}, options); }
    if (source['_dateAccessed']) {
      if (this.dateAccessed) { this.dateAccessed.addExtendedProperties(source._dateAccessed!); }
      else { this.dateAccessed = new fhir.FhirDateTime(source._dateAccessed as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['version']) { this.version = new fhir.CitationCitedArtifactVersion(source.version, options); }
    if (source['currentState']) { this.currentState = source.currentState.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.currentState = []; }
    if (source['statusDate']) { this.statusDate = source.statusDate.map((x) => new fhir.CitationCitedArtifactStatusDate(x, options)); }
    else { this.statusDate = []; }
    if (source['title']) { this.title = source.title.map((x) => new fhir.CitationCitedArtifactTitle(x, options)); }
    else { this.title = []; }
    if (source['abstract']) { this.abstract = source.abstract.map((x) => new fhir.CitationCitedArtifactAbstract(x, options)); }
    else { this.abstract = []; }
    if (source['part']) { this.part = new fhir.CitationCitedArtifactPart(source.part, options); }
    if (source['relatesTo']) { this.relatesTo = source.relatesTo.map((x) => new fhir.CitationCitedArtifactRelatesTo(x, options)); }
    else { this.relatesTo = []; }
    if (source['publicationForm']) { this.publicationForm = source.publicationForm.map((x) => new fhir.CitationCitedArtifactPublicationForm(x, options)); }
    else { this.publicationForm = []; }
    if (source['webLocation']) { this.webLocation = source.webLocation.map((x) => new fhir.CitationCitedArtifactWebLocation(x, options)); }
    else { this.webLocation = []; }
    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.CitationCitedArtifactClassification(x, options)); }
    else { this.classification = []; }
    if (source['contributorship']) { this.contributorship = new fhir.CitationCitedArtifactContributorship(source.contributorship, options); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x, options)); }
    else { this.note = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation.citedArtifact' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOA('relatedIdentifier',exp));
    iss.push(...this.vOS('dateAccessed',exp));
    iss.push(...this.vOS('version',exp));
    iss.push(...this.vOA('currentState',exp));
    iss.push(...this.vOA('statusDate',exp));
    iss.push(...this.vOA('title',exp));
    iss.push(...this.vOA('abstract',exp));
    iss.push(...this.vOS('part',exp));
    iss.push(...this.vOA('relatesTo',exp));
    iss.push(...this.vOA('publicationForm',exp));
    iss.push(...this.vOA('webLocation',exp));
    iss.push(...this.vOA('classification',exp));
    iss.push(...this.vOS('contributorship',exp));
    iss.push(...this.vOA('note',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Citation type.
 */
export interface CitationArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Citation"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Citation.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different citation instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the citation with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * Allows filtering of summarys s that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Citation.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows filtering of citations that are appropriate for use versus not.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Citation.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the citation. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Citation.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the citation is the organization or individual primarily responsible for the maintenance and upkeep of the citation. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the citation. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Citation.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the citation was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the citation as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the citation is presumed to be the predominant language in the place the citation was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the citation to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element does not describe the usage of the citation. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this citation.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.purpose
   */
  _purpose?:fhir.FhirElementArgs;
  /**
   * Use and/or publishing restrictions for the Citation, not for the cited artifact.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Citation.copyright
   */
  _copyright?:fhir.FhirElementArgs;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Citation.approvalDate
   */
  _approvalDate?:fhir.FhirElementArgs;
  /**
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Citation.lastReviewDate
   */
  _lastReviewDate?:fhir.FhirElementArgs;
  /**
   * The effective period for a citation  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Who authored the Citation.
   */
  author?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Who edited the Citation.
   */
  editor?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Who reviewed the Citation.
   */
  reviewer?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Who endorsed the Citation.
   */
  endorser?: fhir.ContactDetailArgs[]|undefined;
  /**
   * A human-readable display of the citation.
   */
  summary?: fhir.CitationSummaryArgs[]|undefined;
  /**
   * The assignment to an organizing scheme.
   */
  classification?: fhir.CitationClassificationArgs[]|undefined;
  /**
   * Used for general notes and annotations not coded elsewhere.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * The status of the citation.
   */
  currentState?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * An effective date or period for a status of the citation.
   */
  statusDate?: fhir.CitationStatusDateArgs[]|undefined;
  /**
   * Artifact related to the Citation Resource.
   */
  relatesTo?: fhir.CitationRelatesToArgs[]|undefined;
  /**
   * The article or artifact being described.
   */
  citedArtifact?: fhir.CitationCitedArtifactArgs|undefined;
}

/**
 * The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
 */
export class Citation extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Citation';
  /**
   * Resource Type Name
   */
  public override resourceType: "Citation";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
   */
  public identifier: fhir.Identifier[];
  /**
   * There may be different citation instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the citation with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Allows filtering of summarys s that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of citations that are appropriate for use versus not.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the citation. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the citation is the organization or individual primarily responsible for the maintenance and upkeep of the citation. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the citation. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the citation was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the citation as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the citation is presumed to be the predominant language in the place the citation was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the citation to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * This element does not describe the usage of the citation. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this citation.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * Use and/or publishing restrictions for the Citation, not for the cited artifact.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  public approvalDate?: fhir.FhirDate|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  public lastReviewDate?: fhir.FhirDate|undefined;
  /**
   * The effective period for a citation  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  public effectivePeriod?: fhir.Period|undefined;
  /**
   * Who authored the Citation.
   */
  public author: fhir.ContactDetail[];
  /**
   * Who edited the Citation.
   */
  public editor: fhir.ContactDetail[];
  /**
   * Who reviewed the Citation.
   */
  public reviewer: fhir.ContactDetail[];
  /**
   * Who endorsed the Citation.
   */
  public endorser: fhir.ContactDetail[];
  /**
   * A human-readable display of the citation.
   */
  public summary: fhir.CitationSummary[];
  /**
   * The assignment to an organizing scheme.
   */
  public classification: fhir.CitationClassification[];
  /**
   * Used for general notes and annotations not coded elsewhere.
   */
  public note: fhir.Annotation[];
  /**
   * The status of the citation.
   */
  public currentState: fhir.CodeableConcept[];
  /**
   * An effective date or period for a status of the citation.
   */
  public statusDate: fhir.CitationStatusDate[];
  /**
   * Artifact related to the Citation Resource.
   */
  public relatesTo: fhir.CitationRelatesTo[];
  /**
   * The article or artifact being described.
   */
  public citedArtifact?: fhir.CitationCitedArtifact|undefined;
  /**
   * Default constructor for Citation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CitationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Citation';
    if (source['url'] !== undefined) { this.url = new fhir.FhirUri({value: source.url}, options); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>, options); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['version'] !== undefined) { this.version = new fhir.FhirString({value: source.version}, options); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['name'] !== undefined) { this.name = new fhir.FhirString({value: source.name}, options); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['title'] !== undefined) { this.title = new fhir.FhirString({value: source.title}, options); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['status'] !== undefined) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}, options); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>, options); }
    }
    if (source['experimental'] !== undefined) { this.experimental = new fhir.FhirBoolean({value: source.experimental}, options); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>, options); }
    }
    if (source['date'] !== undefined) { this.date = new fhir.FhirDateTime({value: source.date}, options); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['publisher'] !== undefined) { this.publisher = new fhir.FhirString({value: source.publisher}, options); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options)); }
    else { this.contact = []; }
    if (source['description'] !== undefined) { this.description = new fhir.FhirMarkdown({value: source.description}, options); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>, options); }
    }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.jurisdiction = []; }
    if (source['purpose'] !== undefined) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}, options); }
    if (source['_purpose']) {
      if (this.purpose) { this.purpose.addExtendedProperties(source._purpose!); }
      else { this.purpose = new fhir.FhirMarkdown(source._purpose as Partial<fhir.FhirMarkdownArgs>, options); }
    }
    if (source['copyright'] !== undefined) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}, options); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>, options); }
    }
    if (source['approvalDate'] !== undefined) { this.approvalDate = new fhir.FhirDate({value: source.approvalDate}, options); }
    if (source['_approvalDate']) {
      if (this.approvalDate) { this.approvalDate.addExtendedProperties(source._approvalDate!); }
      else { this.approvalDate = new fhir.FhirDate(source._approvalDate as Partial<fhir.FhirDateArgs>, options); }
    }
    if (source['lastReviewDate'] !== undefined) { this.lastReviewDate = new fhir.FhirDate({value: source.lastReviewDate}, options); }
    if (source['_lastReviewDate']) {
      if (this.lastReviewDate) { this.lastReviewDate.addExtendedProperties(source._lastReviewDate!); }
      else { this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate as Partial<fhir.FhirDateArgs>, options); }
    }
    if (source['effectivePeriod']) { this.effectivePeriod = new fhir.Period(source.effectivePeriod, options); }
    if (source['author']) { this.author = source.author.map((x) => new fhir.ContactDetail(x, options)); }
    else { this.author = []; }
    if (source['editor']) { this.editor = source.editor.map((x) => new fhir.ContactDetail(x, options)); }
    else { this.editor = []; }
    if (source['reviewer']) { this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x, options)); }
    else { this.reviewer = []; }
    if (source['endorser']) { this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x, options)); }
    else { this.endorser = []; }
    if (source['summary']) { this.summary = source.summary.map((x) => new fhir.CitationSummary(x, options)); }
    else { this.summary = []; }
    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.CitationClassification(x, options)); }
    else { this.classification = []; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x, options)); }
    else { this.note = []; }
    if (source['currentState']) { this.currentState = source.currentState.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.currentState = []; }
    if (source['statusDate']) { this.statusDate = source.statusDate.map((x) => new fhir.CitationStatusDate(x, options)); }
    else { this.statusDate = []; }
    if (source['relatesTo']) { this.relatesTo = source.relatesTo.map((x) => new fhir.CitationRelatesTo(x, options)); }
    else { this.relatesTo = []; }
    if (source['citedArtifact']) { this.citedArtifact = new fhir.CitationCitedArtifact(source.citedArtifact, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Citation' }
    iss.push(...this.vOS('url',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('version',exp));
    iss.push(...this.vOS('name',exp));
    iss.push(...this.vOS('title',exp));
    iss.push(...this.vRSV('status',exp,'PublicationStatus',PublicationStatusVsValidation,'r'));
    iss.push(...this.vOS('experimental',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('publisher',exp));
    iss.push(...this.vOA('contact',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('useContext',exp));
    iss.push(...this.vOA('jurisdiction',exp));
    iss.push(...this.vOS('purpose',exp));
    iss.push(...this.vOS('copyright',exp));
    iss.push(...this.vOS('approvalDate',exp));
    iss.push(...this.vOS('lastReviewDate',exp));
    iss.push(...this.vOS('effectivePeriod',exp));
    iss.push(...this.vOA('author',exp));
    iss.push(...this.vOA('editor',exp));
    iss.push(...this.vOA('reviewer',exp));
    iss.push(...this.vOA('endorser',exp));
    iss.push(...this.vOA('summary',exp));
    iss.push(...this.vOA('classification',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOA('currentState',exp));
    iss.push(...this.vOA('statusDate',exp));
    iss.push(...this.vOA('relatesTo',exp));
    iss.push(...this.vOS('citedArtifact',exp));
    return iss;
  }
}
