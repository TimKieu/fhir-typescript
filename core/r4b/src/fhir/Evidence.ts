// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Evidence

import * as fhir from '../fhir.js';

// @ts-ignore
import { VariableRoleCodes,  VariableRoleCodeType } from '../fhirValueSets/VariableRoleCodes.js';
// @ts-ignore
import { VariableRoleVsValidation } from '../fhirValueSets/VariableRoleVsValidation.js';
// @ts-ignore
import { DirectnessCodes,  DirectnessCodeType } from '../fhirValueSets/DirectnessCodes.js';
// @ts-ignore
import { DirectnessVsValidation } from '../fhirValueSets/DirectnessVsValidation.js';
// @ts-ignore
import { AttributeEstimateTypeCodes,  AttributeEstimateTypeCodeType } from '../fhirValueSets/AttributeEstimateTypeCodes.js';
// @ts-ignore
import { AttributeEstimateTypeVsValidation } from '../fhirValueSets/AttributeEstimateTypeVsValidation.js';
// @ts-ignore
import { VariableHandlingCodes,  VariableHandlingCodeType } from '../fhirValueSets/VariableHandlingCodes.js';
// @ts-ignore
import { VariableHandlingVsValidation } from '../fhirValueSets/VariableHandlingVsValidation.js';
// @ts-ignore
import { StatisticModelCodes,  StatisticModelCodeType } from '../fhirValueSets/StatisticModelCodes.js';
// @ts-ignore
import { StatisticModelVsValidation } from '../fhirValueSets/StatisticModelVsValidation.js';
// @ts-ignore
import { StatisticTypeCodes,  StatisticTypeCodeType } from '../fhirValueSets/StatisticTypeCodes.js';
// @ts-ignore
import { StatisticTypeVsValidation } from '../fhirValueSets/StatisticTypeVsValidation.js';
// @ts-ignore
import { CertaintyTypeCodes,  CertaintyTypeCodeType } from '../fhirValueSets/CertaintyTypeCodes.js';
// @ts-ignore
import { CertaintyTypeVsValidation } from '../fhirValueSets/CertaintyTypeVsValidation.js';
// @ts-ignore
import { CertaintyRatingCodes,  CertaintyRatingCodeType } from '../fhirValueSets/CertaintyRatingCodes.js';
// @ts-ignore
import { CertaintyRatingVsValidation } from '../fhirValueSets/CertaintyRatingVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { SynthesisTypeCodes,  SynthesisTypeCodeType } from '../fhirValueSets/SynthesisTypeCodes.js';
// @ts-ignore
import { SynthesisTypeVsValidation } from '../fhirValueSets/SynthesisTypeVsValidation.js';
// @ts-ignore
import { StudyTypeCodes,  StudyTypeCodeType } from '../fhirValueSets/StudyTypeCodes.js';
// @ts-ignore
import { StudyTypeVsValidation } from '../fhirValueSets/StudyTypeVsValidation.js';
/**
 * Valid arguments for the EvidenceVariableDefinition type.
 */
export interface EvidenceVariableDefinitionArgs extends fhir.BackboneElementArgs {
  /**
   * A text description or summary of the variable.
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.variableDefinition.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
   */
  variableRole: fhir.CodeableConceptArgs|null;
  /**
   * Definition of the actual variable related to the statistic(s).
   */
  observed?: fhir.ReferenceArgs|undefined;
  /**
   * Definition of the intended variable related to the Evidence.
   */
  intended?: fhir.ReferenceArgs|undefined;
  /**
   * Indication of quality of match between intended variable to actual variable.
   */
  directnessMatch?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Evidence variable such as population, exposure, or outcome.
 */
export class EvidenceVariableDefinition extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceVariableDefinition';
  /**
   * A text description or summary of the variable.
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  public note: fhir.Annotation[];
  /**
   * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
   */
  public variableRole: fhir.CodeableConcept|null;
  /**
   * Definition of the actual variable related to the statistic(s).
   */
  public observed?: fhir.Reference|undefined;
  /**
   * Definition of the intended variable related to the Evidence.
   */
  public intended?: fhir.Reference|undefined;
  /**
   * Indication of quality of match between intended variable to actual variable.
   */
  public directnessMatch?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for EvidenceVariableDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceVariableDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['variableRole']) { this.variableRole = new fhir.CodeableConcept(source.variableRole); }
    else { this.variableRole = null; }
    if (source['observed']) { this.observed = new fhir.Reference(source.observed); }
    if (source['intended']) { this.intended = new fhir.Reference(source.intended); }
    if (source['directnessMatch']) { this.directnessMatch = new fhir.CodeableConcept(source.directnessMatch); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.variableDefinition' }
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vRS('variableRole',exp));
    iss.push(...this.vOS('observed',exp));
    iss.push(...this.vOS('intended',exp));
    iss.push(...this.vOS('directnessMatch',exp));
    return iss;
  }
}
/**
 * Valid arguments for the EvidenceStatisticSampleSize type.
 */
export interface EvidenceStatisticSampleSizeArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of population sample size.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.sampleSize.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Footnote or explanatory note about the sample size.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * Number of participants in the population.
   */
  numberOfStudies?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.sampleSize.numberOfStudies
   */
  _numberOfStudies?:fhir.FhirElementArgs;
  /**
   * A human-readable string to clarify or explain concepts about the sample size.
   */
  numberOfParticipants?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.sampleSize.numberOfParticipants
   */
  _numberOfParticipants?:fhir.FhirElementArgs;
  /**
   * Number of participants with known results for measured variables.
   */
  knownDataCount?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.sampleSize.knownDataCount
   */
  _knownDataCount?:fhir.FhirElementArgs;
}

/**
 * Number of samples in the statistic.
 */
export class EvidenceStatisticSampleSize extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceStatisticSampleSize';
  /**
   * Human-readable summary of population sample size.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Footnote or explanatory note about the sample size.
   */
  public note: fhir.Annotation[];
  /**
   * Number of participants in the population.
   */
  public numberOfStudies?: fhir.FhirUnsignedInt|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the sample size.
   */
  public numberOfParticipants?: fhir.FhirUnsignedInt|undefined;
  /**
   * Number of participants with known results for measured variables.
   */
  public knownDataCount?: fhir.FhirUnsignedInt|undefined;
  /**
   * Default constructor for EvidenceStatisticSampleSize - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceStatisticSampleSizeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['numberOfStudies']) { this.numberOfStudies = new fhir.FhirUnsignedInt({value: source.numberOfStudies}); }
    if (source['_numberOfStudies']) {
      if (this.numberOfStudies) { this.numberOfStudies.addExtendedProperties(source._numberOfStudies!); }
      else { this.numberOfStudies = new fhir.FhirUnsignedInt(source._numberOfStudies as Partial<fhir.FhirUnsignedIntArgs>); }
    }
    if (source['numberOfParticipants']) { this.numberOfParticipants = new fhir.FhirUnsignedInt({value: source.numberOfParticipants}); }
    if (source['_numberOfParticipants']) {
      if (this.numberOfParticipants) { this.numberOfParticipants.addExtendedProperties(source._numberOfParticipants!); }
      else { this.numberOfParticipants = new fhir.FhirUnsignedInt(source._numberOfParticipants as Partial<fhir.FhirUnsignedIntArgs>); }
    }
    if (source['knownDataCount']) { this.knownDataCount = new fhir.FhirUnsignedInt({value: source.knownDataCount}); }
    if (source['_knownDataCount']) {
      if (this.knownDataCount) { this.knownDataCount.addExtendedProperties(source._knownDataCount!); }
      else { this.knownDataCount = new fhir.FhirUnsignedInt(source._knownDataCount as Partial<fhir.FhirUnsignedIntArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.statistic.sampleSize' }
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOS('numberOfStudies',exp));
    iss.push(...this.vOS('numberOfParticipants',exp));
    iss.push(...this.vOS('knownDataCount',exp));
    return iss;
  }
}
/**
 * Valid arguments for the EvidenceStatisticAttributeEstimate type.
 */
export interface EvidenceStatisticAttributeEstimateArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of the estimate.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.attributeEstimate.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Footnote or explanatory note about the estimate.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * The type of attribute estimate, eg confidence interval or p value.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Often the p value
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  level?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.attributeEstimate.level
   */
  _level?:fhir.FhirElementArgs;
  /**
   * Lower bound of confidence interval.
   */
  range?: fhir.RangeArgs|undefined;
  /**
   * A nested attribute estimate; which is the attribute estimate of an attribute estimate
   */
  attributeEstimate?: fhir.EvidenceStatisticAttributeEstimateArgs[]|undefined;
}

/**
 * A statistical attribute of the statistic such as a measure of heterogeneity.
 */
export class EvidenceStatisticAttributeEstimate extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceStatisticAttributeEstimate';
  /**
   * Human-readable summary of the estimate.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Footnote or explanatory note about the estimate.
   */
  public note: fhir.Annotation[];
  /**
   * The type of attribute estimate, eg confidence interval or p value.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Often the p value
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  public level?: fhir.FhirDecimal|undefined;
  /**
   * Lower bound of confidence interval.
   */
  public range?: fhir.Range|undefined;
  /**
   * A nested attribute estimate; which is the attribute estimate of an attribute estimate
   */
  public attributeEstimate: fhir.EvidenceStatisticAttributeEstimate[];
  /**
   * Default constructor for EvidenceStatisticAttributeEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceStatisticAttributeEstimateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['level']) { this.level = new fhir.FhirDecimal({value: source.level}); }
    if (source['_level']) {
      if (this.level) { this.level.addExtendedProperties(source._level!); }
      else { this.level = new fhir.FhirDecimal(source._level as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['range']) { this.range = new fhir.Range(source.range); }
    if (source['attributeEstimate']) { this.attributeEstimate = source.attributeEstimate.map((x) => new fhir.EvidenceStatisticAttributeEstimate(x)); }
    else { this.attributeEstimate = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.statistic.attributeEstimate' }
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('quantity',exp));
    iss.push(...this.vOS('level',exp));
    iss.push(...this.vOS('range',exp));
    iss.push(...this.vOA('attributeEstimate',exp));
    return iss;
  }
}
/**
 * Valid arguments for the EvidenceStatisticModelCharacteristicVariable type.
 */
export interface EvidenceStatisticModelCharacteristicVariableArgs extends fhir.BackboneElementArgs {
  /**
   * Description of the variable.
   */
  variableDefinition: fhir.ReferenceArgs|null;
  /**
   * How the variable is classified for use in adjusted analysis.
   */
  handling?: fhir.FhirCode<VariableHandlingCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.modelCharacteristic.variable.handling
   */
  _handling?:fhir.FhirElementArgs;
  /**
   * Description for grouping of ordinal or polychotomous variables.
   */
  valueCategory?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Discrete value for grouping of ordinal or polychotomous variables.
   */
  valueQuantity?: fhir.QuantityArgs[]|undefined;
  /**
   * Range of values for grouping of ordinal or polychotomous variables.
   */
  valueRange?: fhir.RangeArgs[]|undefined;
}

/**
 * A variable adjusted for in the adjusted analysis.
 */
export class EvidenceStatisticModelCharacteristicVariable extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceStatisticModelCharacteristicVariable';
  /**
   * Description of the variable.
   */
  public variableDefinition: fhir.Reference|null;
  /**
   * How the variable is classified for use in adjusted analysis.
   */
  public handling?: fhir.FhirCode<VariableHandlingCodeType>|undefined;
  /**
   * Description for grouping of ordinal or polychotomous variables.
   */
  public valueCategory: fhir.CodeableConcept[];
  /**
   * Discrete value for grouping of ordinal or polychotomous variables.
   */
  public valueQuantity: fhir.Quantity[];
  /**
   * Range of values for grouping of ordinal or polychotomous variables.
   */
  public valueRange: fhir.Range[];
  /**
   * Default constructor for EvidenceStatisticModelCharacteristicVariable - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceStatisticModelCharacteristicVariableArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['variableDefinition']) { this.variableDefinition = new fhir.Reference(source.variableDefinition); }
    else { this.variableDefinition = null; }
    if (source['handling']) { this.handling = new fhir.FhirCode<VariableHandlingCodeType>({value: source.handling}); }
    if (source['_handling']) {
      if (this.handling) { this.handling.addExtendedProperties(source._handling!); }
      else { this.handling = new fhir.FhirCode<VariableHandlingCodeType>(source._handling as Partial<fhir.FhirCode>); }
    }
    if (source['valueCategory']) { this.valueCategory = source.valueCategory.map((x) => new fhir.CodeableConcept(x)); }
    else { this.valueCategory = []; }
    if (source['valueQuantity']) { this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x)); }
    else { this.valueQuantity = []; }
    if (source['valueRange']) { this.valueRange = source.valueRange.map((x) => new fhir.Range(x)); }
    else { this.valueRange = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.statistic.modelCharacteristic.variable' }
    iss.push(...this.vRS('variableDefinition',exp));
    iss.push(...this.vOSV('handling',exp,'VariableHandling',VariableHandlingVsValidation,'r'));
    iss.push(...this.vOA('valueCategory',exp));
    iss.push(...this.vOA('valueQuantity',exp));
    iss.push(...this.vOA('valueRange',exp));
    return iss;
  }
}
/**
 * Valid arguments for the EvidenceStatisticModelCharacteristic type.
 */
export interface EvidenceStatisticModelCharacteristicArgs extends fhir.BackboneElementArgs {
  /**
   * Description of a component of the method to generate the statistic.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * Further specification of the quantified value of the component of the method to generate the statistic.
   */
  value?: fhir.QuantityArgs|undefined;
  /**
   * A variable adjusted for in the adjusted analysis.
   */
  variable?: fhir.EvidenceStatisticModelCharacteristicVariableArgs[]|undefined;
  /**
   * An attribute of the statistic used as a model characteristic.
   */
  attributeEstimate?: fhir.EvidenceStatisticAttributeEstimateArgs[]|undefined;
}

/**
 * A component of the method to generate the statistic.
 */
export class EvidenceStatisticModelCharacteristic extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceStatisticModelCharacteristic';
  /**
   * Description of a component of the method to generate the statistic.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Further specification of the quantified value of the component of the method to generate the statistic.
   */
  public value?: fhir.Quantity|undefined;
  /**
   * A variable adjusted for in the adjusted analysis.
   */
  public variable: fhir.EvidenceStatisticModelCharacteristicVariable[];
  /**
   * An attribute of the statistic used as a model characteristic.
   */
  public attributeEstimate: fhir.EvidenceStatisticAttributeEstimate[];
  /**
   * Default constructor for EvidenceStatisticModelCharacteristic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceStatisticModelCharacteristicArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['value']) { this.value = new fhir.Quantity(source.value); }
    if (source['variable']) { this.variable = source.variable.map((x) => new fhir.EvidenceStatisticModelCharacteristicVariable(x)); }
    else { this.variable = []; }
    if (source['attributeEstimate']) { this.attributeEstimate = source.attributeEstimate.map((x) => new fhir.EvidenceStatisticAttributeEstimate(x)); }
    else { this.attributeEstimate = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.statistic.modelCharacteristic' }
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vOS('value',exp));
    iss.push(...this.vOA('variable',exp));
    iss.push(...this.vOA('attributeEstimate',exp));
    return iss;
  }
}
/**
 * Valid arguments for the EvidenceStatistic type.
 */
export interface EvidenceStatisticArgs extends fhir.BackboneElementArgs {
  /**
   * A description of the content value of the statistic.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * Type of statistic, eg relative risk.
   */
  statisticType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Simple strings can be used for descriptive purposes. Exact matching to EvidenceVariable.category.name for the Evidence.variableDefinition[variableRole=measuredVariable].observed=Reference(EvidenceVariable) could facilitate validation within datasets.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * Statistic value.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * When the number of events is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberOfEvents to record the total number of events rather than the number of participants with events.
   */
  numberOfEvents?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.numberOfEvents
   */
  _numberOfEvents?:fhir.FhirElementArgs;
  /**
   * When the number affected is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is a Proportion, use Evidence.statistic.numberAffected and enter an integer as the value. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberAffected to record the number of participants with events rather than the total number of events.
   */
  numberAffected?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Evidence.statistic.numberAffected
   */
  _numberAffected?:fhir.FhirElementArgs;
  /**
   * Number of samples in the statistic.
   */
  sampleSize?: fhir.EvidenceStatisticSampleSizeArgs|undefined;
  /**
   * A statistical attribute of the statistic such as a measure of heterogeneity.
   */
  attributeEstimate?: fhir.EvidenceStatisticAttributeEstimateArgs[]|undefined;
  /**
   * A component of the method to generate the statistic.
   */
  modelCharacteristic?: fhir.EvidenceStatisticModelCharacteristicArgs[]|undefined;
}

/**
 * Values and parameters for a single statistic.
 */
export class EvidenceStatistic extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceStatistic';
  /**
   * A description of the content value of the statistic.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  public note: fhir.Annotation[];
  /**
   * Type of statistic, eg relative risk.
   */
  public statisticType?: fhir.CodeableConcept|undefined;
  /**
   * Simple strings can be used for descriptive purposes. Exact matching to EvidenceVariable.category.name for the Evidence.variableDefinition[variableRole=measuredVariable].observed=Reference(EvidenceVariable) could facilitate validation within datasets.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * Statistic value.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * When the number of events is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberOfEvents to record the total number of events rather than the number of participants with events.
   */
  public numberOfEvents?: fhir.FhirUnsignedInt|undefined;
  /**
   * When the number affected is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is a Proportion, use Evidence.statistic.numberAffected and enter an integer as the value. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberAffected to record the number of participants with events rather than the total number of events.
   */
  public numberAffected?: fhir.FhirUnsignedInt|undefined;
  /**
   * Number of samples in the statistic.
   */
  public sampleSize?: fhir.EvidenceStatisticSampleSize|undefined;
  /**
   * A statistical attribute of the statistic such as a measure of heterogeneity.
   */
  public attributeEstimate: fhir.EvidenceStatisticAttributeEstimate[];
  /**
   * A component of the method to generate the statistic.
   */
  public modelCharacteristic: fhir.EvidenceStatisticModelCharacteristic[];
  /**
   * Default constructor for EvidenceStatistic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceStatisticArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['statisticType']) { this.statisticType = new fhir.CodeableConcept(source.statisticType); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['numberOfEvents']) { this.numberOfEvents = new fhir.FhirUnsignedInt({value: source.numberOfEvents}); }
    if (source['_numberOfEvents']) {
      if (this.numberOfEvents) { this.numberOfEvents.addExtendedProperties(source._numberOfEvents!); }
      else { this.numberOfEvents = new fhir.FhirUnsignedInt(source._numberOfEvents as Partial<fhir.FhirUnsignedIntArgs>); }
    }
    if (source['numberAffected']) { this.numberAffected = new fhir.FhirUnsignedInt({value: source.numberAffected}); }
    if (source['_numberAffected']) {
      if (this.numberAffected) { this.numberAffected.addExtendedProperties(source._numberAffected!); }
      else { this.numberAffected = new fhir.FhirUnsignedInt(source._numberAffected as Partial<fhir.FhirUnsignedIntArgs>); }
    }
    if (source['sampleSize']) { this.sampleSize = new fhir.EvidenceStatisticSampleSize(source.sampleSize); }
    if (source['attributeEstimate']) { this.attributeEstimate = source.attributeEstimate.map((x) => new fhir.EvidenceStatisticAttributeEstimate(x)); }
    else { this.attributeEstimate = []; }
    if (source['modelCharacteristic']) { this.modelCharacteristic = source.modelCharacteristic.map((x) => new fhir.EvidenceStatisticModelCharacteristic(x)); }
    else { this.modelCharacteristic = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.statistic' }
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOS('statisticType',exp));
    iss.push(...this.vOS('category',exp));
    iss.push(...this.vOS('quantity',exp));
    iss.push(...this.vOS('numberOfEvents',exp));
    iss.push(...this.vOS('numberAffected',exp));
    iss.push(...this.vOS('sampleSize',exp));
    iss.push(...this.vOA('attributeEstimate',exp));
    iss.push(...this.vOA('modelCharacteristic',exp));
    return iss;
  }
}
/**
 * Valid arguments for the EvidenceCertainty type.
 */
export interface EvidenceCertaintyArgs extends fhir.BackboneElementArgs {
  /**
   * Textual description of certainty.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.certainty.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * Aspect of certainty being rated.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Assessment or judgement of the aspect.
   */
  rating?: fhir.CodeableConceptArgs|undefined;
  /**
   * Individual or group who did the rating.
   */
  rater?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.certainty.rater
   */
  _rater?:fhir.FhirElementArgs;
  /**
   * A domain or subdomain of certainty.
   */
  subcomponent?: fhir.EvidenceCertaintyArgs[]|undefined;
}

/**
 * Assessment of certainty, confidence in the estimates, or quality of the evidence.
 */
export class EvidenceCertainty extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'EvidenceCertainty';
  /**
   * Textual description of certainty.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  public note: fhir.Annotation[];
  /**
   * Aspect of certainty being rated.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Assessment or judgement of the aspect.
   */
  public rating?: fhir.CodeableConcept|undefined;
  /**
   * Individual or group who did the rating.
   */
  public rater?: fhir.FhirString|undefined;
  /**
   * A domain or subdomain of certainty.
   */
  public subcomponent: fhir.EvidenceCertainty[];
  /**
   * Default constructor for EvidenceCertainty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceCertaintyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['rating']) { this.rating = new fhir.CodeableConcept(source.rating); }
    if (source['rater']) { this.rater = new fhir.FhirString({value: source.rater}); }
    if (source['_rater']) {
      if (this.rater) { this.rater.addExtendedProperties(source._rater!); }
      else { this.rater = new fhir.FhirString(source._rater as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subcomponent']) { this.subcomponent = source.subcomponent.map((x) => new fhir.EvidenceCertainty(x)); }
    else { this.subcomponent = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence.certainty' }
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('rating',exp));
    iss.push(...this.vOS('rater',exp));
    iss.push(...this.vOA('subcomponent',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Evidence type.
 */
export interface EvidenceArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Evidence"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * Citation Resource or display of suggested citation for this evidence.
   */
  citeAs?: fhir.Reference|fhir.FhirMarkdown|undefined;
  /**
   * Citation Resource or display of suggested citation for this evidence.
   */
  citeAsReference?: fhir.ReferenceArgs|undefined;
  /**
   * Citation Resource or display of suggested citation for this evidence.
   */
  citeAsMarkdown?: fhir.FhirMarkdown|string|undefined;
  /**
   * Allows filtering of summarys s that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the summary. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.approvalDate
   */
  _approvalDate?:fhir.FhirElementArgs;
  /**
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.lastReviewDate
   */
  _lastReviewDate?:fhir.FhirElementArgs;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the evidence is the organization or individual primarily responsible for the maintenance and upkeep of the evidence. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  author?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  editor?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  reviewer?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  endorser?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Link or citation to artifact associated with the summary.
   */
  relatedArtifact?: fhir.RelatedArtifactArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the evidence was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence is presumed to be the predominant language in the place the evidence was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Declarative description of the Evidence.
   */
  assertion?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Evidence.assertion
   */
  _assertion?:fhir.FhirElementArgs;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * Evidence variable such as population, exposure, or outcome.
   */
  variableDefinition: fhir.EvidenceVariableDefinitionArgs[]|null;
  /**
   * The method to combine studies.
   */
  synthesisType?: fhir.CodeableConceptArgs|undefined;
  /**
   * The type of study that produced this evidence.
   */
  studyType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Values and parameters for a single statistic.
   */
  statistic?: fhir.EvidenceStatisticArgs[]|undefined;
  /**
   * Assessment of certainty, confidence in the estimates, or quality of the evidence.
   */
  certainty?: fhir.EvidenceCertaintyArgs[]|undefined;
}

/**
 * The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (eg population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.
 */
export class Evidence extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Evidence';
  /**
   * Resource Type Name
   */
  public override resourceType: "Evidence";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier: fhir.Identifier[];
  /**
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
   */
  public version?: fhir.FhirString|undefined;
  /**
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Citation Resource or display of suggested citation for this evidence.
   */
  public citeAs?: (fhir.Reference|fhir.FhirMarkdown)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Evidence.citeAs[x]
   */
  protected static readonly _fts_citeAsIsChoice:true = true;
  /**
   * Allows filtering of summarys s that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the summary. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  public approvalDate?: fhir.FhirDate|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  public lastReviewDate?: fhir.FhirDate|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the evidence is the organization or individual primarily responsible for the maintenance and upkeep of the evidence. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  public contact: fhir.ContactDetail[];
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  public author: fhir.ContactDetail[];
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  public editor: fhir.ContactDetail[];
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  public reviewer: fhir.ContactDetail[];
  /**
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).
   */
  public endorser: fhir.ContactDetail[];
  /**
   * Link or citation to artifact associated with the summary.
   */
  public relatedArtifact: fhir.RelatedArtifact[];
  /**
   * This description can be used to capture details such as why the evidence was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence is presumed to be the predominant language in the place the evidence was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * Declarative description of the Evidence.
   */
  public assertion?: fhir.FhirMarkdown|undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  public note: fhir.Annotation[];
  /**
   * Evidence variable such as population, exposure, or outcome.
   */
  public variableDefinition: fhir.EvidenceVariableDefinition[];
  /**
   * The method to combine studies.
   */
  public synthesisType?: fhir.CodeableConcept|undefined;
  /**
   * The type of study that produced this evidence.
   */
  public studyType?: fhir.CodeableConcept|undefined;
  /**
   * Values and parameters for a single statistic.
   */
  public statistic: fhir.EvidenceStatistic[];
  /**
   * Assessment of certainty, confidence in the estimates, or quality of the evidence.
   */
  public certainty: fhir.EvidenceCertainty[];
  /**
   * Default constructor for Evidence - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<EvidenceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Evidence';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['citeAs']) { this.citeAs = source.citeAs; }
    else if (source['citeAsReference']) { this.citeAs = new fhir.Reference(source.citeAsReference); }
    else if (source['citeAsMarkdown']) { this.citeAs = new fhir.FhirMarkdown({value: source.citeAsMarkdown}); }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['approvalDate']) { this.approvalDate = new fhir.FhirDate({value: source.approvalDate}); }
    if (source['_approvalDate']) {
      if (this.approvalDate) { this.approvalDate.addExtendedProperties(source._approvalDate!); }
      else { this.approvalDate = new fhir.FhirDate(source._approvalDate as Partial<fhir.FhirDateArgs>); }
    }
    if (source['lastReviewDate']) { this.lastReviewDate = new fhir.FhirDate({value: source.lastReviewDate}); }
    if (source['_lastReviewDate']) {
      if (this.lastReviewDate) { this.lastReviewDate.addExtendedProperties(source._lastReviewDate!); }
      else { this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate as Partial<fhir.FhirDateArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['author']) { this.author = source.author.map((x) => new fhir.ContactDetail(x)); }
    else { this.author = []; }
    if (source['editor']) { this.editor = source.editor.map((x) => new fhir.ContactDetail(x)); }
    else { this.editor = []; }
    if (source['reviewer']) { this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x)); }
    else { this.reviewer = []; }
    if (source['endorser']) { this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x)); }
    else { this.endorser = []; }
    if (source['relatedArtifact']) { this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x)); }
    else { this.relatedArtifact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['assertion']) { this.assertion = new fhir.FhirMarkdown({value: source.assertion}); }
    if (source['_assertion']) {
      if (this.assertion) { this.assertion.addExtendedProperties(source._assertion!); }
      else { this.assertion = new fhir.FhirMarkdown(source._assertion as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['variableDefinition']) { this.variableDefinition = source.variableDefinition.map((x) => new fhir.EvidenceVariableDefinition(x)); }
    else { this.variableDefinition = []; }
    if (source['synthesisType']) { this.synthesisType = new fhir.CodeableConcept(source.synthesisType); }
    if (source['studyType']) { this.studyType = new fhir.CodeableConcept(source.studyType); }
    if (source['statistic']) { this.statistic = source.statistic.map((x) => new fhir.EvidenceStatistic(x)); }
    else { this.statistic = []; }
    if (source['certainty']) { this.certainty = source.certainty.map((x) => new fhir.EvidenceCertainty(x)); }
    else { this.certainty = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Evidence' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOS('url',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('version',exp));
    iss.push(...this.vOS('title',exp));
    iss.push(...this.vOS('citeAs',exp));
    iss.push(...this.vRSV('status',exp,'PublicationStatus',PublicationStatusVsValidation,'r'));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOA('useContext',exp));
    iss.push(...this.vOS('approvalDate',exp));
    iss.push(...this.vOS('lastReviewDate',exp));
    iss.push(...this.vOS('publisher',exp));
    iss.push(...this.vOA('contact',exp));
    iss.push(...this.vOA('author',exp));
    iss.push(...this.vOA('editor',exp));
    iss.push(...this.vOA('reviewer',exp));
    iss.push(...this.vOA('endorser',exp));
    iss.push(...this.vOA('relatedArtifact',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOS('assertion',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vRA('variableDefinition',exp));
    iss.push(...this.vOS('synthesisType',exp));
    iss.push(...this.vOS('studyType',exp));
    iss.push(...this.vOA('statistic',exp));
    iss.push(...this.vOA('certainty',exp));
    return iss;
  }
}
