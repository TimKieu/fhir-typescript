// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClinicalUseDefinition

import * as fhir from '../fhir.js';

// @ts-ignore
import { TherapyRelationshipTypeCodes,  TherapyRelationshipTypeCodeType } from '../fhirValueSets/TherapyRelationshipTypeCodes.js';
// @ts-ignore
import { TherapyRelationshipTypeVsValidation } from '../fhirValueSets/TherapyRelationshipTypeVsValidation.js';
// @ts-ignore
import { TherapyCodes,  TherapyCodeType } from '../fhirValueSets/TherapyCodes.js';
// @ts-ignore
import { TherapyVsValidation } from '../fhirValueSets/TherapyVsValidation.js';
// @ts-ignore
import { DiseaseSymptomProcedureCodes,  DiseaseSymptomProcedureCodeType } from '../fhirValueSets/DiseaseSymptomProcedureCodes.js';
// @ts-ignore
import { DiseaseSymptomProcedureVsValidation } from '../fhirValueSets/DiseaseSymptomProcedureVsValidation.js';
// @ts-ignore
import { DiseaseStatusCodes,  DiseaseStatusCodeType } from '../fhirValueSets/DiseaseStatusCodes.js';
// @ts-ignore
import { DiseaseStatusVsValidation } from '../fhirValueSets/DiseaseStatusVsValidation.js';
// @ts-ignore
import { ProductIntendedUseCodes,  ProductIntendedUseCodeType } from '../fhirValueSets/ProductIntendedUseCodes.js';
// @ts-ignore
import { ProductIntendedUseVsValidation } from '../fhirValueSets/ProductIntendedUseVsValidation.js';
// @ts-ignore
import { InteractionTypeCodes,  InteractionTypeCodeType } from '../fhirValueSets/InteractionTypeCodes.js';
// @ts-ignore
import { InteractionTypeVsValidation } from '../fhirValueSets/InteractionTypeVsValidation.js';
// @ts-ignore
import { InteractionEffectCodes,  InteractionEffectCodeType } from '../fhirValueSets/InteractionEffectCodes.js';
// @ts-ignore
import { InteractionEffectVsValidation } from '../fhirValueSets/InteractionEffectVsValidation.js';
// @ts-ignore
import { InteractionIncidenceCodes,  InteractionIncidenceCodeType } from '../fhirValueSets/InteractionIncidenceCodes.js';
// @ts-ignore
import { InteractionIncidenceVsValidation } from '../fhirValueSets/InteractionIncidenceVsValidation.js';
// @ts-ignore
import { InteractionManagementCodes,  InteractionManagementCodeType } from '../fhirValueSets/InteractionManagementCodes.js';
// @ts-ignore
import { InteractionManagementVsValidation } from '../fhirValueSets/InteractionManagementVsValidation.js';
// @ts-ignore
import { UndesirableEffectSymptomCodes,  UndesirableEffectSymptomCodeType } from '../fhirValueSets/UndesirableEffectSymptomCodes.js';
// @ts-ignore
import { UndesirableEffectSymptomVsValidation } from '../fhirValueSets/UndesirableEffectSymptomVsValidation.js';
// @ts-ignore
import { UndesirableEffectClassificationCodes,  UndesirableEffectClassificationCodeType } from '../fhirValueSets/UndesirableEffectClassificationCodes.js';
// @ts-ignore
import { UndesirableEffectClassificationVsValidation } from '../fhirValueSets/UndesirableEffectClassificationVsValidation.js';
// @ts-ignore
import { UndesirableEffectFrequencyCodes,  UndesirableEffectFrequencyCodeType } from '../fhirValueSets/UndesirableEffectFrequencyCodes.js';
// @ts-ignore
import { UndesirableEffectFrequencyVsValidation } from '../fhirValueSets/UndesirableEffectFrequencyVsValidation.js';
// @ts-ignore
import { WarningTypeCodes,  WarningTypeCodeType } from '../fhirValueSets/WarningTypeCodes.js';
// @ts-ignore
import { WarningTypeVsValidation } from '../fhirValueSets/WarningTypeVsValidation.js';
// @ts-ignore
import { ClinicalUseDefinitionTypeCodes,  ClinicalUseDefinitionTypeCodeType } from '../fhirValueSets/ClinicalUseDefinitionTypeCodes.js';
// @ts-ignore
import { ClinicalUseDefinitionTypeVsValidation } from '../fhirValueSets/ClinicalUseDefinitionTypeVsValidation.js';
// @ts-ignore
import { ClinicalUseDefinitionCategoryCodes,  ClinicalUseDefinitionCategoryCodeType } from '../fhirValueSets/ClinicalUseDefinitionCategoryCodes.js';
// @ts-ignore
import { ClinicalUseDefinitionCategoryVsValidation } from '../fhirValueSets/ClinicalUseDefinitionCategoryVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Valid arguments for the ClinicalUseDefinitionContraindicationOtherTherapy type.
 */
export interface ClinicalUseDefinitionContraindicationOtherTherapyArgs extends fhir.BackboneElementArgs {
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  relationshipType: fhir.CodeableConceptArgs|null;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  therapy: fhir.CodeableReferenceArgs|null;
}

/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
 */
export class ClinicalUseDefinitionContraindicationOtherTherapy extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionContraindicationOtherTherapy';
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  public relationshipType: fhir.CodeableConcept|null;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
   */
  public therapy: fhir.CodeableReference|null;
  /**
   * Default constructor for ClinicalUseDefinitionContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionContraindicationOtherTherapyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['relationshipType']) { this.relationshipType = new fhir.CodeableConcept(source.relationshipType); }
    else { this.relationshipType = null; }
    if (source['therapy']) { this.therapy = new fhir.CodeableReference(source.therapy); }
    else { this.therapy = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.contraindication.otherTherapy' }
    this.vRS('relationshipType',exp)
    this.vRS('therapy',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinitionContraindication type.
 */
export interface ClinicalUseDefinitionContraindicationArgs extends fhir.BackboneElementArgs {
  /**
   * The situation that is being documented as contraindicating against this item.
   */
  diseaseSymptomProcedure?: fhir.CodeableReferenceArgs|undefined;
  /**
   * The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
   */
  diseaseStatus?: fhir.CodeableReferenceArgs|undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  comorbidity?: fhir.CodeableReferenceArgs[]|undefined;
  /**
   * The indication which this is a contraidication for.
   */
  indication?: fhir.ReferenceArgs[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
   */
  otherTherapy?: fhir.ClinicalUseDefinitionContraindicationOtherTherapyArgs[]|undefined;
}

/**
 * Specifics for when this is a contraindication.
 */
export class ClinicalUseDefinitionContraindication extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionContraindication';
  /**
   * The situation that is being documented as contraindicating against this item.
   */
  public diseaseSymptomProcedure?: fhir.CodeableReference|undefined;
  /**
   * The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
   */
  public diseaseStatus?: fhir.CodeableReference|undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  public comorbidity: fhir.CodeableReference[];
  /**
   * The indication which this is a contraidication for.
   */
  public indication: fhir.Reference[];
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
   */
  public otherTherapy: fhir.ClinicalUseDefinitionContraindicationOtherTherapy[];
  /**
   * Default constructor for ClinicalUseDefinitionContraindication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionContraindicationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['diseaseSymptomProcedure']) { this.diseaseSymptomProcedure = new fhir.CodeableReference(source.diseaseSymptomProcedure); }
    if (source['diseaseStatus']) { this.diseaseStatus = new fhir.CodeableReference(source.diseaseStatus); }
    if (source['comorbidity']) { this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableReference(x)); }
    else { this.comorbidity = []; }
    if (source['indication']) { this.indication = source.indication.map((x) => new fhir.Reference(x)); }
    else { this.indication = []; }
    if (source['otherTherapy']) { this.otherTherapy = source.otherTherapy.map((x) => new fhir.ClinicalUseDefinitionContraindicationOtherTherapy(x)); }
    else { this.otherTherapy = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.contraindication' }
    this.vOS('diseaseSymptomProcedure',exp)
    this.vOS('diseaseStatus',exp)
    this.vOA('comorbidity',exp)
    this.vOA('indication',exp)
    this.vOA('otherTherapy',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinitionIndication type.
 */
export interface ClinicalUseDefinitionIndicationArgs extends fhir.BackboneElementArgs {
  /**
   * The situation that is being documented as an indicaton for this item.
   */
  diseaseSymptomProcedure?: fhir.CodeableReferenceArgs|undefined;
  /**
   * The status of the disease or symptom for the indication, for example "chronic" or "metastatic".
   */
  diseaseStatus?: fhir.CodeableReferenceArgs|undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection as part of the indication.
   */
  comorbidity?: fhir.CodeableReferenceArgs[]|undefined;
  /**
   * The intended effect, aim or strategy to be achieved.
   */
  intendedEffect?: fhir.CodeableReferenceArgs|undefined;
  /**
   * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
   */
  duration?: fhir.Range|fhir.FhirString|undefined;
  /**
   * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
   */
  durationRange?: fhir.RangeArgs|undefined;
  /**
   * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
   */
  durationString?: fhir.FhirString|string|undefined;
  /**
   * An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.
   */
  undesirableEffect?: fhir.ReferenceArgs[]|undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  otherTherapy?: fhir.ClinicalUseDefinitionContraindicationOtherTherapyArgs[]|undefined;
}

/**
 * Specifics for when this is an indication.
 */
export class ClinicalUseDefinitionIndication extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionIndication';
  /**
   * The situation that is being documented as an indicaton for this item.
   */
  public diseaseSymptomProcedure?: fhir.CodeableReference|undefined;
  /**
   * The status of the disease or symptom for the indication, for example "chronic" or "metastatic".
   */
  public diseaseStatus?: fhir.CodeableReference|undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection as part of the indication.
   */
  public comorbidity: fhir.CodeableReference[];
  /**
   * The intended effect, aim or strategy to be achieved.
   */
  public intendedEffect?: fhir.CodeableReference|undefined;
  /**
   * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
   */
  public duration?: (fhir.Range|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ClinicalUseDefinition.indication.duration[x]
   */
  protected static readonly _fts_durationIsChoice:true = true;
  /**
   * An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.
   */
  public undesirableEffect: fhir.Reference[];
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  public otherTherapy: fhir.ClinicalUseDefinitionContraindicationOtherTherapy[];
  /**
   * Default constructor for ClinicalUseDefinitionIndication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionIndicationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['diseaseSymptomProcedure']) { this.diseaseSymptomProcedure = new fhir.CodeableReference(source.diseaseSymptomProcedure); }
    if (source['diseaseStatus']) { this.diseaseStatus = new fhir.CodeableReference(source.diseaseStatus); }
    if (source['comorbidity']) { this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableReference(x)); }
    else { this.comorbidity = []; }
    if (source['intendedEffect']) { this.intendedEffect = new fhir.CodeableReference(source.intendedEffect); }
    if (source['duration']) { this.duration = source.duration; }
    else if (source['durationRange']) { this.duration = new fhir.Range(source.durationRange); }
    else if (source['durationString']) { this.duration = new fhir.FhirString({value: source.durationString}); }
    if (source['undesirableEffect']) { this.undesirableEffect = source.undesirableEffect.map((x) => new fhir.Reference(x)); }
    else { this.undesirableEffect = []; }
    if (source['otherTherapy']) { this.otherTherapy = source.otherTherapy.map((x) => new fhir.ClinicalUseDefinitionContraindicationOtherTherapy(x)); }
    else { this.otherTherapy = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.indication' }
    this.vOS('diseaseSymptomProcedure',exp)
    this.vOS('diseaseStatus',exp)
    this.vOA('comorbidity',exp)
    this.vOS('intendedEffect',exp)
    this.vOS('duration',exp)
    this.vOA('undesirableEffect',exp)
    this.vOA('otherTherapy',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinitionInteractionInteractant type.
 */
export interface ClinicalUseDefinitionInteractionInteractantArgs extends fhir.BackboneElementArgs {
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  item?: fhir.Reference|fhir.CodeableConcept|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  itemReference?: fhir.ReferenceArgs|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  itemCodeableConcept?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The specific medication, food, substance or laboratory test that interacts.
 */
export class ClinicalUseDefinitionInteractionInteractant extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionInteractionInteractant';
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  public item: (fhir.Reference|fhir.CodeableConcept)|null;
  /**
   * Internal flag to properly serialize choice-type element ClinicalUseDefinition.interaction.interactant.item[x]
   */
  protected static readonly _fts_itemIsChoice:true = true;
  /**
   * Default constructor for ClinicalUseDefinitionInteractionInteractant - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionInteractionInteractantArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = source.item; }
    else if (source['itemReference']) { this.item = new fhir.Reference(source.itemReference); }
    else if (source['itemCodeableConcept']) { this.item = new fhir.CodeableConcept(source.itemCodeableConcept); }
    else { this.item = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.interaction.interactant' }
    this.vRS('item',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinitionInteraction type.
 */
export interface ClinicalUseDefinitionInteractionArgs extends fhir.BackboneElementArgs {
  /**
   * The specific medication, food, substance or laboratory test that interacts.
   */
  interactant?: fhir.ClinicalUseDefinitionInteractionInteractantArgs[]|undefined;
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  effect?: fhir.CodeableReferenceArgs|undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  incidence?: fhir.CodeableConceptArgs|undefined;
  /**
   * Actions for managing the interaction.
   */
  management?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * Specifics for when this is an interaction.
 */
export class ClinicalUseDefinitionInteraction extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionInteraction';
  /**
   * The specific medication, food, substance or laboratory test that interacts.
   */
  public interactant: fhir.ClinicalUseDefinitionInteractionInteractant[];
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  public effect?: fhir.CodeableReference|undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  public incidence?: fhir.CodeableConcept|undefined;
  /**
   * Actions for managing the interaction.
   */
  public management: fhir.CodeableConcept[];
  /**
   * Default constructor for ClinicalUseDefinitionInteraction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionInteractionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['interactant']) { this.interactant = source.interactant.map((x) => new fhir.ClinicalUseDefinitionInteractionInteractant(x)); }
    else { this.interactant = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['effect']) { this.effect = new fhir.CodeableReference(source.effect); }
    if (source['incidence']) { this.incidence = new fhir.CodeableConcept(source.incidence); }
    if (source['management']) { this.management = source.management.map((x) => new fhir.CodeableConcept(x)); }
    else { this.management = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.interaction' }
    this.vOA('interactant',exp)
    this.vOS('type',exp)
    this.vOS('effect',exp)
    this.vOS('incidence',exp)
    this.vOA('management',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinitionUndesirableEffect type.
 */
export interface ClinicalUseDefinitionUndesirableEffectArgs extends fhir.BackboneElementArgs {
  /**
   * The situation in which the undesirable effect may manifest.
   */
  symptomConditionEffect?: fhir.CodeableReferenceArgs|undefined;
  /**
   * High level classification of the effect.
   */
  classification?: fhir.CodeableConceptArgs|undefined;
  /**
   * How often the effect is seen.
   */
  frequencyOfOccurrence?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
 */
export class ClinicalUseDefinitionUndesirableEffect extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionUndesirableEffect';
  /**
   * The situation in which the undesirable effect may manifest.
   */
  public symptomConditionEffect?: fhir.CodeableReference|undefined;
  /**
   * High level classification of the effect.
   */
  public classification?: fhir.CodeableConcept|undefined;
  /**
   * How often the effect is seen.
   */
  public frequencyOfOccurrence?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClinicalUseDefinitionUndesirableEffect - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionUndesirableEffectArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['symptomConditionEffect']) { this.symptomConditionEffect = new fhir.CodeableReference(source.symptomConditionEffect); }
    if (source['classification']) { this.classification = new fhir.CodeableConcept(source.classification); }
    if (source['frequencyOfOccurrence']) { this.frequencyOfOccurrence = new fhir.CodeableConcept(source.frequencyOfOccurrence); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.undesirableEffect' }
    this.vOS('symptomConditionEffect',exp)
    this.vOS('classification',exp)
    this.vOS('frequencyOfOccurrence',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinitionWarning type.
 */
export interface ClinicalUseDefinitionWarningArgs extends fhir.BackboneElementArgs {
  /**
   * A textual definition of this warning, with formatting.
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ClinicalUseDefinition.warning.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * A coded or unformatted textual definition of this warning.
   */
  code?: fhir.CodeableConceptArgs|undefined;
}

/**
 * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
 */
export class ClinicalUseDefinitionWarning extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinitionWarning';
  /**
   * A textual definition of this warning, with formatting.
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * A coded or unformatted textual definition of this warning.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClinicalUseDefinitionWarning - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionWarningArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition.warning' }
    this.vOS('description',exp)
    this.vOS('code',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ClinicalUseDefinition type.
 */
export interface ClinicalUseDefinitionArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ClinicalUseDefinition"|undefined;
  /**
   * Business identifier for this issue.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * indication | contraindication | interaction | undesirable-effect | warning.
   */
  type: fhir.FhirCode<ClinicalUseDefinitionTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ClinicalUseDefinition.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability to Drive and Use Machines".
   */
  category?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The medication or procedure for which this is an indication.
   */
  subject?: fhir.ReferenceArgs[]|undefined;
  /**
   * Whether this is a current issue or one that has been retired etc.
   */
  status?: fhir.CodeableConceptArgs|undefined;
  /**
   * Specifics for when this is a contraindication.
   */
  contraindication?: fhir.ClinicalUseDefinitionContraindicationArgs|undefined;
  /**
   * Specifics for when this is an indication.
   */
  indication?: fhir.ClinicalUseDefinitionIndicationArgs|undefined;
  /**
   * Specifics for when this is an interaction.
   */
  interaction?: fhir.ClinicalUseDefinitionInteractionArgs|undefined;
  /**
   * The population group to which this applies.
   */
  population?: fhir.ReferenceArgs[]|undefined;
  /**
   * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
   */
  undesirableEffect?: fhir.ClinicalUseDefinitionUndesirableEffectArgs|undefined;
  /**
   * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
   */
  warning?: fhir.ClinicalUseDefinitionWarningArgs|undefined;
}

/**
 * A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.
 */
export class ClinicalUseDefinition extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClinicalUseDefinition';
  /**
   * Resource Type Name
   */
  public override resourceType: "ClinicalUseDefinition";
  /**
   * Business identifier for this issue.
   */
  public identifier: fhir.Identifier[];
  /**
   * indication | contraindication | interaction | undesirable-effect | warning.
   */
  public type: fhir.FhirCode<ClinicalUseDefinitionTypeCodeType>|null;
  /**
   * A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability to Drive and Use Machines".
   */
  public category: fhir.CodeableConcept[];
  /**
   * The medication or procedure for which this is an indication.
   */
  public subject: fhir.Reference[];
  /**
   * Whether this is a current issue or one that has been retired etc.
   */
  public status?: fhir.CodeableConcept|undefined;
  /**
   * Specifics for when this is a contraindication.
   */
  public contraindication?: fhir.ClinicalUseDefinitionContraindication|undefined;
  /**
   * Specifics for when this is an indication.
   */
  public indication?: fhir.ClinicalUseDefinitionIndication|undefined;
  /**
   * Specifics for when this is an interaction.
   */
  public interaction?: fhir.ClinicalUseDefinitionInteraction|undefined;
  /**
   * The population group to which this applies.
   */
  public population: fhir.Reference[];
  /**
   * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
   */
  public undesirableEffect?: fhir.ClinicalUseDefinitionUndesirableEffect|undefined;
  /**
   * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
   */
  public warning?: fhir.ClinicalUseDefinitionWarning|undefined;
  /**
   * Default constructor for ClinicalUseDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClinicalUseDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ClinicalUseDefinition';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['type']) { this.type = new fhir.FhirCode<ClinicalUseDefinitionTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<ClinicalUseDefinitionTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    else { this.category = []; }
    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }
    else { this.subject = []; }
    if (source['status']) { this.status = new fhir.CodeableConcept(source.status); }
    if (source['contraindication']) { this.contraindication = new fhir.ClinicalUseDefinitionContraindication(source.contraindication); }
    if (source['indication']) { this.indication = new fhir.ClinicalUseDefinitionIndication(source.indication); }
    if (source['interaction']) { this.interaction = new fhir.ClinicalUseDefinitionInteraction(source.interaction); }
    if (source['population']) { this.population = source.population.map((x) => new fhir.Reference(x)); }
    else { this.population = []; }
    if (source['undesirableEffect']) { this.undesirableEffect = new fhir.ClinicalUseDefinitionUndesirableEffect(source.undesirableEffect); }
    if (source['warning']) { this.warning = new fhir.ClinicalUseDefinitionWarning(source.warning); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ClinicalUseDefinition' }
    this.vRS('resourceType',exp)
    this.vOA('identifier',exp)
    this.vRSV('type',exp,'ClinicalUseDefinitionType',ClinicalUseDefinitionTypeVsValidation,'r')
    this.vOA('category',exp)
    this.vOA('subject',exp)
    this.vOS('status',exp)
    this.vOS('contraindication',exp)
    this.vOS('indication',exp)
    this.vOS('interaction',exp)
    this.vOA('population',exp)
    this.vOS('undesirableEffect',exp)
    this.vOS('warning',exp)
    return issues;
  }
}
