// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Ratio

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the Ratio type.
 */
export interface RatioArgs extends fhir.FhirElementArgs {
  /**
   * The value of the numerator.
   */
  numerator?: fhir.QuantityArgs|undefined;
  /**
   * The value of the denominator.
   */
  denominator?: fhir.QuantityArgs|undefined;
}

/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
export class Ratio extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Ratio';
  /**
   * The value of the numerator.
   */
  public numerator?: fhir.Quantity|undefined;
  /**
   * The value of the denominator.
   */
  public denominator?: fhir.Quantity|undefined;
  /**
   * Default constructor for Ratio - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RatioArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['numerator']) { this.numerator = new fhir.Quantity(source.numerator); }
    if (source['denominator']) { this.denominator = new fhir.Quantity(source.denominator); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Ratio' }
    iss.push(...this.vOS('numerator',exp));
    iss.push(...this.vOS('denominator',exp));
    return iss;
  }
}
