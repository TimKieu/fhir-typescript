// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionProduct

import * as fhir from '../fhir.js';

// @ts-ignore
import { NutritionproductStatusCodes,  NutritionproductStatusCodeType } from '../fhirValueSets/NutritionproductStatusCodes.js';
// @ts-ignore
import { NutritionproductStatusVsValidation } from '../fhirValueSets/NutritionproductStatusVsValidation.js';
/**
 * Valid arguments for the NutritionProductNutrient type.
 */
export interface NutritionProductNutrientArgs extends fhir.BackboneElementArgs {
  /**
   * The (relevant) nutrients in the product.
   */
  item?: fhir.CodeableReferenceArgs|undefined;
  /**
   * The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
   */
  amount?: fhir.RatioArgs[]|undefined;
}

/**
 * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
 */
export class NutritionProductNutrient extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'NutritionProductNutrient';
  /**
   * The (relevant) nutrients in the product.
   */
  public item?: fhir.CodeableReference|undefined;
  /**
   * The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
   */
  public amount: fhir.Ratio[];
  /**
   * Default constructor for NutritionProductNutrient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<NutritionProductNutrientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = new fhir.CodeableReference(source.item); }
    if (source['amount']) { this.amount = source.amount.map((x) => new fhir.Ratio(x)); }
    else { this.amount = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'NutritionProduct.nutrient' }
    iss.push(...this.vOS('item',exp));
    iss.push(...this.vOA('amount',exp));
    return iss;
  }
}
/**
 * Valid arguments for the NutritionProductIngredient type.
 */
export interface NutritionProductIngredientArgs extends fhir.BackboneElementArgs {
  /**
   * The ingredient contained in the product.
   */
  item: fhir.CodeableReferenceArgs|null;
  /**
   * The amount of ingredient that is in the product.
   */
  amount?: fhir.RatioArgs[]|undefined;
}

/**
 * Ingredients contained in this product.
 */
export class NutritionProductIngredient extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'NutritionProductIngredient';
  /**
   * The ingredient contained in the product.
   */
  public item: fhir.CodeableReference|null;
  /**
   * The amount of ingredient that is in the product.
   */
  public amount: fhir.Ratio[];
  /**
   * Default constructor for NutritionProductIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<NutritionProductIngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = new fhir.CodeableReference(source.item); }
    else { this.item = null; }
    if (source['amount']) { this.amount = source.amount.map((x) => new fhir.Ratio(x)); }
    else { this.amount = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'NutritionProduct.ingredient' }
    iss.push(...this.vRS('item',exp));
    iss.push(...this.vOA('amount',exp));
    return iss;
  }
}
/**
 * Valid arguments for the NutritionProductProductCharacteristic type.
 */
export interface NutritionProductProductCharacteristicArgs extends fhir.BackboneElementArgs {
  /**
   * A code specifying which characteristic of the product is being described (for example, colour, shape).
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  value?: fhir.CodeableConcept|fhir.FhirString|fhir.Quantity|fhir.FhirBase64Binary|fhir.Attachment|fhir.FhirBoolean|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueBase64Binary?: fhir.FhirBase64Binary|string|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueAttachment?: fhir.AttachmentArgs|undefined;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
}

/**
 * Specifies descriptive properties of the nutrition product.
 */
export class NutritionProductProductCharacteristic extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'NutritionProductProductCharacteristic';
  /**
   * A code specifying which characteristic of the product is being described (for example, colour, shape).
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  public value: (fhir.CodeableConcept|fhir.FhirString|fhir.Quantity|fhir.FhirBase64Binary|fhir.Attachment|fhir.FhirBoolean)|null;
  /**
   * Internal flag to properly serialize choice-type element NutritionProduct.productCharacteristic.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * Default constructor for NutritionProductProductCharacteristic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<NutritionProductProductCharacteristicArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['value']) { this.value = source.value; }
    else if (source['valueCodeableConcept']) { this.value = new fhir.CodeableConcept(source.valueCodeableConcept); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueQuantity']) { this.value = new fhir.Quantity(source.valueQuantity); }
    else if (source['valueBase64Binary']) { this.value = new fhir.FhirBase64Binary({value: source.valueBase64Binary}); }
    else if (source['valueAttachment']) { this.value = new fhir.Attachment(source.valueAttachment); }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
    else { this.value = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'NutritionProduct.productCharacteristic' }
    iss.push(...this.vRS('type',exp));
    iss.push(...this.vRS('value',exp));
    return iss;
  }
}
/**
 * Valid arguments for the NutritionProductInstance type.
 */
export interface NutritionProductInstanceArgs extends fhir.BackboneElementArgs {
  /**
   * The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * The identifier for the physical instance, typically a serial number.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The identification of the batch or lot of the product.
   */
  lotNumber?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: NutritionProduct.instance.lotNumber
   */
  _lotNumber?:fhir.FhirElementArgs;
  /**
   * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
   */
  expiry?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: NutritionProduct.instance.expiry
   */
  _expiry?:fhir.FhirElementArgs;
  /**
   * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
   */
  useBy?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: NutritionProduct.instance.useBy
   */
  _useBy?:fhir.FhirElementArgs;
}

/**
 * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
 */
export class NutritionProductInstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'NutritionProductInstance';
  /**
   * The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * The identifier for the physical instance, typically a serial number.
   */
  public identifier: fhir.Identifier[];
  /**
   * The identification of the batch or lot of the product.
   */
  public lotNumber?: fhir.FhirString|undefined;
  /**
   * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
   */
  public expiry?: fhir.FhirDateTime|undefined;
  /**
   * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
   */
  public useBy?: fhir.FhirDateTime|undefined;
  /**
   * Default constructor for NutritionProductInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<NutritionProductInstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['lotNumber']) { this.lotNumber = new fhir.FhirString({value: source.lotNumber}); }
    if (source['_lotNumber']) {
      if (this.lotNumber) { this.lotNumber.addExtendedProperties(source._lotNumber!); }
      else { this.lotNumber = new fhir.FhirString(source._lotNumber as Partial<fhir.FhirStringArgs>); }
    }
    if (source['expiry']) { this.expiry = new fhir.FhirDateTime({value: source.expiry}); }
    if (source['_expiry']) {
      if (this.expiry) { this.expiry.addExtendedProperties(source._expiry!); }
      else { this.expiry = new fhir.FhirDateTime(source._expiry as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['useBy']) { this.useBy = new fhir.FhirDateTime({value: source.useBy}); }
    if (source['_useBy']) {
      if (this.useBy) { this.useBy.addExtendedProperties(source._useBy!); }
      else { this.useBy = new fhir.FhirDateTime(source._useBy as Partial<fhir.FhirDateTimeArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'NutritionProduct.instance' }
    iss.push(...this.vOS('quantity',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('lotNumber',exp));
    iss.push(...this.vOS('expiry',exp));
    iss.push(...this.vOS('useBy',exp));
    return iss;
  }
}
/**
 * Valid arguments for the NutritionProduct type.
 */
export interface NutritionProductArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "NutritionProduct"|undefined;
  /**
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: fhir.FhirCode<NutritionproductStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: NutritionProduct.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
   */
  category?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The code assigned to the product, for example a manufacturer number or other terminology.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The organisation (manufacturer, representative or legal authorisation holder) that is responsible for the device.
   */
  manufacturer?: fhir.ReferenceArgs[]|undefined;
  /**
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  nutrient?: fhir.NutritionProductNutrientArgs[]|undefined;
  /**
   * Ingredients contained in this product.
   */
  ingredient?: fhir.NutritionProductIngredientArgs[]|undefined;
  /**
   * Allergens that are known or suspected to be a part of this nutrition product.
   */
  knownAllergen?: fhir.CodeableReferenceArgs[]|undefined;
  /**
   * Specifies descriptive properties of the nutrition product.
   */
  productCharacteristic?: fhir.NutritionProductProductCharacteristicArgs[]|undefined;
  /**
   * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
   */
  instance?: fhir.NutritionProductInstanceArgs|undefined;
  /**
   * Comments made about the product.
   */
  note?: fhir.AnnotationArgs[]|undefined;
}

/**
 * A food or fluid product that is consumed by patients.
 */
export class NutritionProduct extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'NutritionProduct';
  /**
   * Resource Type Name
   */
  public override resourceType: "NutritionProduct";
  /**
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  public status: fhir.FhirCode<NutritionproductStatusCodeType>|null;
  /**
   * Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
   */
  public category: fhir.CodeableConcept[];
  /**
   * The code assigned to the product, for example a manufacturer number or other terminology.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The organisation (manufacturer, representative or legal authorisation holder) that is responsible for the device.
   */
  public manufacturer: fhir.Reference[];
  /**
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  public nutrient: fhir.NutritionProductNutrient[];
  /**
   * Ingredients contained in this product.
   */
  public ingredient: fhir.NutritionProductIngredient[];
  /**
   * Allergens that are known or suspected to be a part of this nutrition product.
   */
  public knownAllergen: fhir.CodeableReference[];
  /**
   * Specifies descriptive properties of the nutrition product.
   */
  public productCharacteristic: fhir.NutritionProductProductCharacteristic[];
  /**
   * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
   */
  public instance?: fhir.NutritionProductInstance|undefined;
  /**
   * Comments made about the product.
   */
  public note: fhir.Annotation[];
  /**
   * Default constructor for NutritionProduct - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<NutritionProductArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'NutritionProduct';
    if (source['status']) { this.status = new fhir.FhirCode<NutritionproductStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<NutritionproductStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }
    else { this.category = []; }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    else { this.manufacturer = []; }
    if (source['nutrient']) { this.nutrient = source.nutrient.map((x) => new fhir.NutritionProductNutrient(x)); }
    else { this.nutrient = []; }
    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.NutritionProductIngredient(x)); }
    else { this.ingredient = []; }
    if (source['knownAllergen']) { this.knownAllergen = source.knownAllergen.map((x) => new fhir.CodeableReference(x)); }
    else { this.knownAllergen = []; }
    if (source['productCharacteristic']) { this.productCharacteristic = source.productCharacteristic.map((x) => new fhir.NutritionProductProductCharacteristic(x)); }
    else { this.productCharacteristic = []; }
    if (source['instance']) { this.instance = new fhir.NutritionProductInstance(source.instance); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'NutritionProduct' }
    iss.push(...this.vRSV('status',exp,'NutritionproductStatus',NutritionproductStatusVsValidation,'r'));
    iss.push(...this.vOA('category',exp));
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOA('manufacturer',exp));
    iss.push(...this.vOA('nutrient',exp));
    iss.push(...this.vOA('ingredient',exp));
    iss.push(...this.vOA('knownAllergen',exp));
    iss.push(...this.vOA('productCharacteristic',exp));
    iss.push(...this.vOS('instance',exp));
    iss.push(...this.vOA('note',exp));
    return iss;
  }
}
