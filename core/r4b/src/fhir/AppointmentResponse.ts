// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: AppointmentResponse

import * as fhir from '../fhir.js';

// @ts-ignore
import { EncounterParticipantTypeCodes,  EncounterParticipantTypeCodeType } from '../fhirValueSets/EncounterParticipantTypeCodes.js';
// @ts-ignore
import { EncounterParticipantTypeVsValidation } from '../fhirValueSets/EncounterParticipantTypeVsValidation.js';
// @ts-ignore
import { ParticipationstatusCodes,  ParticipationstatusCodeType } from '../fhirValueSets/ParticipationstatusCodes.js';
// @ts-ignore
import { ParticipationstatusVsValidation } from '../fhirValueSets/ParticipationstatusVsValidation.js';
/**
 * Valid arguments for the AppointmentResponse type.
 */
export interface AppointmentResponseArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "AppointmentResponse"|undefined;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment: fhir.ReferenceArgs|null;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: fhir.FhirInstant|string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.start
   */
  _start?:fhir.FhirElementArgs;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: fhir.FhirInstant|string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.end
   */
  _end?:fhir.FhirElementArgs;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  actor?: fhir.ReferenceArgs|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus: fhir.FhirCode<ParticipationstatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.participantStatus
   */
  _participantStatus?:fhir.FhirElementArgs;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: AppointmentResponse.comment
   */
  _comment?:fhir.FhirElementArgs;
}

/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'AppointmentResponse';
  /**
   * Resource Type Name
   */
  public override resourceType: "AppointmentResponse";
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier: fhir.Identifier[];
  /**
   * Appointment that this response is replying to.
   */
  public appointment: fhir.Reference|null;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  public start?: fhir.FhirInstant|undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  public end?: fhir.FhirInstant|undefined;
  /**
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  public participantType: fhir.CodeableConcept[];
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  public actor?: fhir.Reference|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  public participantStatus: fhir.FhirCode<ParticipationstatusCodeType>|null;
  /**
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  public comment?: fhir.FhirString|undefined;
  /**
   * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AppointmentResponseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'AppointmentResponse';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['appointment']) { this.appointment = new fhir.Reference(source.appointment); }
    else { this.appointment = null; }
    if (source['start']) { this.start = new fhir.FhirInstant({value: source.start}); }
    if (source['_start']) {
      if (this.start) { this.start.addExtendedProperties(source._start!); }
      else { this.start = new fhir.FhirInstant(source._start as Partial<fhir.FhirInstantArgs>); }
    }
    if (source['end']) { this.end = new fhir.FhirInstant({value: source.end}); }
    if (source['_end']) {
      if (this.end) { this.end.addExtendedProperties(source._end!); }
      else { this.end = new fhir.FhirInstant(source._end as Partial<fhir.FhirInstantArgs>); }
    }
    if (source['participantType']) { this.participantType = source.participantType.map((x) => new fhir.CodeableConcept(x)); }
    else { this.participantType = []; }
    if (source['actor']) { this.actor = new fhir.Reference(source.actor); }
    if (source['participantStatus']) { this.participantStatus = new fhir.FhirCode<ParticipationstatusCodeType>({value: source.participantStatus}); }
    else { this.participantStatus = null; }
    if (source['_participantStatus']) {
      if (this.participantStatus) { this.participantStatus.addExtendedProperties(source._participantStatus!); }
      else { this.participantStatus = new fhir.FhirCode<ParticipationstatusCodeType>(source._participantStatus as Partial<fhir.FhirCode>); }
    }
    if (source['comment']) { this.comment = new fhir.FhirString({value: source.comment}); }
    if (source['_comment']) {
      if (this.comment) { this.comment.addExtendedProperties(source._comment!); }
      else { this.comment = new fhir.FhirString(source._comment as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'AppointmentResponse' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vRS('appointment',exp));
    iss.push(...this.vOS('start',exp));
    iss.push(...this.vOS('end',exp));
    iss.push(...this.vOA('participantType',exp));
    iss.push(...this.vOS('actor',exp));
    iss.push(...this.vRSV('participantStatus',exp,'Participationstatus',ParticipationstatusVsValidation,'r'));
    iss.push(...this.vOS('comment',exp));
    return iss;
  }
}
