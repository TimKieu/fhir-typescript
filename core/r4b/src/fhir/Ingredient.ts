// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Ingredient

import * as fhir from '../fhir.js';

// @ts-ignore
import { IngredientManufacturerRoleCodes,  IngredientManufacturerRoleCodeType } from '../fhirValueSets/IngredientManufacturerRoleCodes.js';
// @ts-ignore
import { IngredientManufacturerRoleVsValidation } from '../fhirValueSets/IngredientManufacturerRoleVsValidation.js';
// @ts-ignore
import { CountryCodes,  CountryCodeType } from '../fhirValueSets/CountryCodes.js';
// @ts-ignore
import { CountryVsValidation } from '../fhirValueSets/CountryVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { IngredientRoleCodes,  IngredientRoleCodeType } from '../fhirValueSets/IngredientRoleCodes.js';
// @ts-ignore
import { IngredientRoleVsValidation } from '../fhirValueSets/IngredientRoleVsValidation.js';
// @ts-ignore
import { IngredientFunctionCodes,  IngredientFunctionCodeType } from '../fhirValueSets/IngredientFunctionCodes.js';
// @ts-ignore
import { IngredientFunctionVsValidation } from '../fhirValueSets/IngredientFunctionVsValidation.js';
/**
 * Valid arguments for the IngredientManufacturer type.
 */
export interface IngredientManufacturerArgs extends fhir.BackboneElementArgs {
  /**
   * The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
   */
  role?: fhir.FhirCode<IngredientManufacturerRoleCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Ingredient.manufacturer.role
   */
  _role?:fhir.FhirElementArgs;
  /**
   * An organization that manufactures this ingredient.
   */
  manufacturer: fhir.ReferenceArgs|null;
}

/**
 * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
 */
export class IngredientManufacturer extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'IngredientManufacturer';
  /**
   * The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
   */
  public role?: fhir.FhirCode<IngredientManufacturerRoleCodeType>|undefined;
  /**
   * An organization that manufactures this ingredient.
   */
  public manufacturer: fhir.Reference|null;
  /**
   * Default constructor for IngredientManufacturer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IngredientManufacturerArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['role']) { this.role = new fhir.FhirCode<IngredientManufacturerRoleCodeType>({value: source.role}); }
    if (source['_role']) {
      if (this.role) { this.role.addExtendedProperties(source._role!); }
      else { this.role = new fhir.FhirCode<IngredientManufacturerRoleCodeType>(source._role as Partial<fhir.FhirCode>); }
    }
    if (source['manufacturer']) { this.manufacturer = new fhir.Reference(source.manufacturer); }
    else { this.manufacturer = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Ingredient.manufacturer' }
    iss.push(...this.vOSV('role',exp,'IngredientManufacturerRole',IngredientManufacturerRoleVsValidation,'r'));
    iss.push(...this.vRS('manufacturer',exp));
    return iss;
  }
}
/**
 * Valid arguments for the IngredientSubstanceStrengthReferenceStrength type.
 */
export interface IngredientSubstanceStrengthReferenceStrengthArgs extends fhir.BackboneElementArgs {
  /**
   * Relevant reference substance.
   */
  substance?: fhir.CodeableReferenceArgs|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strength?: fhir.Ratio|fhir.RatioRange|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthRatio?: fhir.RatioArgs|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthRatioRange?: fhir.RatioRangeArgs|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Ingredient.substance.strength.referenceStrength.measurementPoint
   */
  _measurementPoint?:fhir.FhirElementArgs;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
 */
export class IngredientSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'IngredientSubstanceStrengthReferenceStrength';
  /**
   * Relevant reference substance.
   */
  public substance?: fhir.CodeableReference|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strength: (fhir.Ratio|fhir.RatioRange)|null;
  /**
   * Internal flag to properly serialize choice-type element Ingredient.substance.strength.referenceStrength.strength[x]
   */
  protected static readonly _fts_strengthIsChoice:true = true;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: fhir.FhirString|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country: fhir.CodeableConcept[];
  /**
   * Default constructor for IngredientSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IngredientSubstanceStrengthReferenceStrengthArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['substance']) { this.substance = new fhir.CodeableReference(source.substance); }
    if (source['strength']) { this.strength = source.strength; }
    else if (source['strengthRatio']) { this.strength = new fhir.Ratio(source.strengthRatio); }
    else if (source['strengthRatioRange']) { this.strength = new fhir.RatioRange(source.strengthRatioRange); }
    else { this.strength = null; }
    if (source['measurementPoint']) { this.measurementPoint = new fhir.FhirString({value: source.measurementPoint}); }
    if (source['_measurementPoint']) {
      if (this.measurementPoint) { this.measurementPoint.addExtendedProperties(source._measurementPoint!); }
      else { this.measurementPoint = new fhir.FhirString(source._measurementPoint as Partial<fhir.FhirStringArgs>); }
    }
    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }
    else { this.country = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Ingredient.substance.strength.referenceStrength' }
    iss.push(...this.vOS('substance',exp));
    iss.push(...this.vRS('strength',exp));
    iss.push(...this.vOS('measurementPoint',exp));
    iss.push(...this.vOA('country',exp));
    return iss;
  }
}
/**
 * Valid arguments for the IngredientSubstanceStrength type.
 */
export interface IngredientSubstanceStrengthArgs extends fhir.BackboneElementArgs {
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentation?: fhir.Ratio|fhir.RatioRange|undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentationRatio?: fhir.RatioArgs|undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentationRatioRange?: fhir.RatioRangeArgs|undefined;
  /**
   * A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
   */
  textPresentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Ingredient.substance.strength.textPresentation
   */
  _textPresentation?:fhir.FhirElementArgs;
  /**
   * The strength per unitary volume (or mass).
   */
  concentration?: fhir.Ratio|fhir.RatioRange|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentrationRatio?: fhir.RatioArgs|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentrationRatioRange?: fhir.RatioRangeArgs|undefined;
  /**
   * A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
   */
  textConcentration?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Ingredient.substance.strength.textConcentration
   */
  _textConcentration?:fhir.FhirElementArgs;
  /**
   * For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
   */
  measurementPoint?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Ingredient.substance.strength.measurementPoint
   */
  _measurementPoint?:fhir.FhirElementArgs;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
   */
  referenceStrength?: fhir.IngredientSubstanceStrengthReferenceStrengthArgs[]|undefined;
}

/**
 * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
 */
export class IngredientSubstanceStrength extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'IngredientSubstanceStrength';
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  public presentation?: (fhir.Ratio|fhir.RatioRange)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Ingredient.substance.strength.presentation[x]
   */
  protected static readonly _fts_presentationIsChoice:true = true;
  /**
   * A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
   */
  public textPresentation?: fhir.FhirString|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  public concentration?: (fhir.Ratio|fhir.RatioRange)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Ingredient.substance.strength.concentration[x]
   */
  protected static readonly _fts_concentrationIsChoice:true = true;
  /**
   * A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
   */
  public textConcentration?: fhir.FhirString|undefined;
  /**
   * For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
   */
  public measurementPoint?: fhir.FhirString|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country: fhir.CodeableConcept[];
  /**
   * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
   */
  public referenceStrength: fhir.IngredientSubstanceStrengthReferenceStrength[];
  /**
   * Default constructor for IngredientSubstanceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IngredientSubstanceStrengthArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['presentation']) { this.presentation = source.presentation; }
    else if (source['presentationRatio']) { this.presentation = new fhir.Ratio(source.presentationRatio); }
    else if (source['presentationRatioRange']) { this.presentation = new fhir.RatioRange(source.presentationRatioRange); }
    if (source['textPresentation']) { this.textPresentation = new fhir.FhirString({value: source.textPresentation}); }
    if (source['_textPresentation']) {
      if (this.textPresentation) { this.textPresentation.addExtendedProperties(source._textPresentation!); }
      else { this.textPresentation = new fhir.FhirString(source._textPresentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['concentration']) { this.concentration = source.concentration; }
    else if (source['concentrationRatio']) { this.concentration = new fhir.Ratio(source.concentrationRatio); }
    else if (source['concentrationRatioRange']) { this.concentration = new fhir.RatioRange(source.concentrationRatioRange); }
    if (source['textConcentration']) { this.textConcentration = new fhir.FhirString({value: source.textConcentration}); }
    if (source['_textConcentration']) {
      if (this.textConcentration) { this.textConcentration.addExtendedProperties(source._textConcentration!); }
      else { this.textConcentration = new fhir.FhirString(source._textConcentration as Partial<fhir.FhirStringArgs>); }
    }
    if (source['measurementPoint']) { this.measurementPoint = new fhir.FhirString({value: source.measurementPoint}); }
    if (source['_measurementPoint']) {
      if (this.measurementPoint) { this.measurementPoint.addExtendedProperties(source._measurementPoint!); }
      else { this.measurementPoint = new fhir.FhirString(source._measurementPoint as Partial<fhir.FhirStringArgs>); }
    }
    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }
    else { this.country = []; }
    if (source['referenceStrength']) { this.referenceStrength = source.referenceStrength.map((x) => new fhir.IngredientSubstanceStrengthReferenceStrength(x)); }
    else { this.referenceStrength = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Ingredient.substance.strength' }
    iss.push(...this.vOS('presentation',exp));
    iss.push(...this.vOS('textPresentation',exp));
    iss.push(...this.vOS('concentration',exp));
    iss.push(...this.vOS('textConcentration',exp));
    iss.push(...this.vOS('measurementPoint',exp));
    iss.push(...this.vOA('country',exp));
    iss.push(...this.vOA('referenceStrength',exp));
    return iss;
  }
}
/**
 * Valid arguments for the IngredientSubstance type.
 */
export interface IngredientSubstanceArgs extends fhir.BackboneElementArgs {
  /**
   * A code or full resource that represents the ingredient's substance.
   */
  code: fhir.CodeableReferenceArgs|null;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
   */
  strength?: fhir.IngredientSubstanceStrengthArgs[]|undefined;
}

/**
 * The substance that comprises this ingredient.
 */
export class IngredientSubstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'IngredientSubstance';
  /**
   * A code or full resource that represents the ingredient's substance.
   */
  public code: fhir.CodeableReference|null;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
   */
  public strength: fhir.IngredientSubstanceStrength[];
  /**
   * Default constructor for IngredientSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IngredientSubstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableReference(source.code); }
    else { this.code = null; }
    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.IngredientSubstanceStrength(x)); }
    else { this.strength = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Ingredient.substance' }
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vOA('strength',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Ingredient type.
 */
export interface IngredientArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Ingredient"|undefined;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * Allows filtering of ingredient that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Ingredient.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * The product which this ingredient is a constituent part of.
   */
  for?: fhir.ReferenceArgs[]|undefined;
  /**
   * A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
   */
  role: fhir.CodeableConceptArgs|null;
  /**
   * A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.
   */
  function?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
   */
  allergenicIndicator?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Ingredient.allergenicIndicator
   */
  _allergenicIndicator?:fhir.FhirElementArgs;
  /**
   * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
   */
  manufacturer?: fhir.IngredientManufacturerArgs[]|undefined;
  /**
   * The substance that comprises this ingredient.
   */
  substance: fhir.IngredientSubstanceArgs|null;
}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class Ingredient extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Ingredient';
  /**
   * Resource Type Name
   */
  public override resourceType: "Ingredient";
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Allows filtering of ingredient that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * The product which this ingredient is a constituent part of.
   */
  public for: fhir.Reference[];
  /**
   * A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
   */
  public role: fhir.CodeableConcept|null;
  /**
   * A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.
   */
  public function: fhir.CodeableConcept[];
  /**
   * If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
   */
  public allergenicIndicator?: fhir.FhirBoolean|undefined;
  /**
   * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
   */
  public manufacturer: fhir.IngredientManufacturer[];
  /**
   * The substance that comprises this ingredient.
   */
  public substance: fhir.IngredientSubstance|null;
  /**
   * Default constructor for Ingredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<IngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Ingredient';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['for']) { this.for = source.for.map((x) => new fhir.Reference(x)); }
    else { this.for = []; }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }
    else { this.role = null; }
    if (source['function']) { this.function = source.function.map((x) => new fhir.CodeableConcept(x)); }
    else { this.function = []; }
    if (source['allergenicIndicator']) { this.allergenicIndicator = new fhir.FhirBoolean({value: source.allergenicIndicator}); }
    if (source['_allergenicIndicator']) {
      if (this.allergenicIndicator) { this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator!); }
      else { this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.IngredientManufacturer(x)); }
    else { this.manufacturer = []; }
    if (source['substance']) { this.substance = new fhir.IngredientSubstance(source.substance); }
    else { this.substance = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Ingredient' }
    iss.push(...this.vOS('identifier',exp));
    iss.push(...this.vRSV('status',exp,'PublicationStatus',PublicationStatusVsValidation,'r'));
    iss.push(...this.vOA('for',exp));
    iss.push(...this.vRS('role',exp));
    iss.push(...this.vOA('function',exp));
    iss.push(...this.vOS('allergenicIndicator',exp));
    iss.push(...this.vOA('manufacturer',exp));
    iss.push(...this.vRS('substance',exp));
    return iss;
  }
}
