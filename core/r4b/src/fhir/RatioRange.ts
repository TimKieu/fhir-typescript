// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: RatioRange

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the RatioRange type.
 */
export interface RatioRangeArgs extends fhir.FhirElementArgs {
  /**
   * If the low element is missing, the low boundary is not known.
   */
  lowNumerator?: fhir.QuantityArgs|undefined;
  /**
   * If the high element is missing, the high boundary is not known.
   */
  highNumerator?: fhir.QuantityArgs|undefined;
  /**
   * The value of the denominator.
   */
  denominator?: fhir.QuantityArgs|undefined;
}

/**
 * A range of ratios expressed as a low and high numerator and a denominator.
 */
export class RatioRange extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'RatioRange';
  /**
   * If the low element is missing, the low boundary is not known.
   */
  public lowNumerator?: fhir.Quantity|undefined;
  /**
   * If the high element is missing, the high boundary is not known.
   */
  public highNumerator?: fhir.Quantity|undefined;
  /**
   * The value of the denominator.
   */
  public denominator?: fhir.Quantity|undefined;
  /**
   * Default constructor for RatioRange - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RatioRangeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['lowNumerator']) { this.lowNumerator = new fhir.Quantity(source.lowNumerator); }
    if (source['highNumerator']) { this.highNumerator = new fhir.Quantity(source.highNumerator); }
    if (source['denominator']) { this.denominator = new fhir.Quantity(source.denominator); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'RatioRange' }
    this.vOS('lowNumerator',exp)
    this.vOS('highNumerator',exp)
    this.vOS('denominator',exp)
    return issues;
  }
}
