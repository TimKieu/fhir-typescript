// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contributor-summary-source|4.3.0
/**
 * Used to code the producer or rule for creating the display string.
 */
export const ContributorSummarySourceCodings = {
    /**
     * article-copy: Data copied by human from article text.
     */
    CopiedFromArticle: {
        display: "Copied from article",
        code: "article-copy",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-source",
    },
    /**
     * citation-manager: Data copied by machine from citation manager data.
     */
    ReportedByCitationManager: {
        display: "Reported by citation manager",
        code: "citation-manager",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-source",
    },
    /**
     * custom: Custom format (may be described in text note).
     */
    CustomFormat: {
        display: "custom format",
        code: "custom",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-source",
    },
    /**
     * publisher-data: Data copied by machine from publisher data.
     */
    PublisherProvided: {
        display: "Publisher provided",
        code: "publisher-data",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-source",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJpYnV0b3JTdW1tYXJ5U291cmNlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udHJpYnV0b3JTdW1tYXJ5U291cmNlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQywrRUFBK0U7QUEwQi9FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXNDO0lBQ2hGOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0VBQWtFO0tBQzNFO0lBQ0Q7O09BRUc7SUFDSCx5QkFBeUIsRUFBRTtRQUN6QixPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLGtFQUFrRTtLQUMzRTtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0VBQWtFO0tBQzNFO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLGtFQUFrRTtLQUMzRTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbnRyaWJ1dG9yLXN1bW1hcnktc291cmNlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVXNlZCB0byBjb2RlIHRoZSBwcm9kdWNlciBvciBydWxlIGZvciBjcmVhdGluZyB0aGUgZGlzcGxheSBzdHJpbmcuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250cmlidXRvclN1bW1hcnlTb3VyY2VDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFydGljbGUtY29weTogRGF0YSBjb3BpZWQgYnkgaHVtYW4gZnJvbSBhcnRpY2xlIHRleHQuXHJcbiAgICovXHJcbiAgQ29waWVkRnJvbUFydGljbGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2l0YXRpb24tbWFuYWdlcjogRGF0YSBjb3BpZWQgYnkgbWFjaGluZSBmcm9tIGNpdGF0aW9uIG1hbmFnZXIgZGF0YS5cclxuICAgKi9cclxuICBSZXBvcnRlZEJ5Q2l0YXRpb25NYW5hZ2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGN1c3RvbTogQ3VzdG9tIGZvcm1hdCAobWF5IGJlIGRlc2NyaWJlZCBpbiB0ZXh0IG5vdGUpLlxyXG4gICAqL1xyXG4gIEN1c3RvbUZvcm1hdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwdWJsaXNoZXItZGF0YTogRGF0YSBjb3BpZWQgYnkgbWFjaGluZSBmcm9tIHB1Ymxpc2hlciBkYXRhLlxyXG4gICAqL1xyXG4gIFB1Ymxpc2hlclByb3ZpZGVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVXNlZCB0byBjb2RlIHRoZSBwcm9kdWNlciBvciBydWxlIGZvciBjcmVhdGluZyB0aGUgZGlzcGxheSBzdHJpbmcuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29udHJpYnV0b3JTdW1tYXJ5U291cmNlQ29kaW5nczpDb250cmlidXRvclN1bW1hcnlTb3VyY2VDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFydGljbGUtY29weTogRGF0YSBjb3BpZWQgYnkgaHVtYW4gZnJvbSBhcnRpY2xlIHRleHQuXHJcbiAgICovXHJcbiAgQ29waWVkRnJvbUFydGljbGU6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29waWVkIGZyb20gYXJ0aWNsZVwiLFxyXG4gICAgY29kZTogXCJhcnRpY2xlLWNvcHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyaWJ1dG9yLXN1bW1hcnktc291cmNlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjaXRhdGlvbi1tYW5hZ2VyOiBEYXRhIGNvcGllZCBieSBtYWNoaW5lIGZyb20gY2l0YXRpb24gbWFuYWdlciBkYXRhLlxyXG4gICAqL1xyXG4gIFJlcG9ydGVkQnlDaXRhdGlvbk1hbmFnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVwb3J0ZWQgYnkgY2l0YXRpb24gbWFuYWdlclwiLFxyXG4gICAgY29kZTogXCJjaXRhdGlvbi1tYW5hZ2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1zdW1tYXJ5LXNvdXJjZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY3VzdG9tOiBDdXN0b20gZm9ybWF0IChtYXkgYmUgZGVzY3JpYmVkIGluIHRleHQgbm90ZSkuXHJcbiAgICovXHJcbiAgQ3VzdG9tRm9ybWF0OiB7XHJcbiAgICBkaXNwbGF5OiBcImN1c3RvbSBmb3JtYXRcIixcclxuICAgIGNvZGU6IFwiY3VzdG9tXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1zdW1tYXJ5LXNvdXJjZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHVibGlzaGVyLWRhdGE6IERhdGEgY29waWVkIGJ5IG1hY2hpbmUgZnJvbSBwdWJsaXNoZXIgZGF0YS5cclxuICAgKi9cclxuICBQdWJsaXNoZXJQcm92aWRlZDoge1xyXG4gICAgZGlzcGxheTogXCJQdWJsaXNoZXIgcHJvdmlkZWRcIixcclxuICAgIGNvZGU6IFwicHVibGlzaGVyLWRhdGFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyaWJ1dG9yLXN1bW1hcnktc291cmNlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19