// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/participation-role-type|4.3.0
/**
 * This FHIR value set is comprised of Actor participation Type codes, which can be used to value FHIR agents, actors, and other role         elements. The FHIR Actor participation type value set is based on    DICOM Audit Message, C402;   ASTM Standard, E1762-95 [2013]; selected codes and          derived actor roles from HL7 RoleClass OID 2.16.840.1.113883.5.110;    HL7 Role Code 2.16.840.1.113883.5.111, including AgentRoleType;          HL7 ParticipationType OID: 2.16.840.1.113883.5.90; and    HL7 ParticipationFunction codes OID: 2.16.840.1.113883.5.88.           This value set includes, by reference, role codes from external code systems: NUCC Health Care Provider Taxonomy OID: 2.16.840.1.113883.6.101;          North American Industry Classification System [NAICS]OID: 2.16.840.1.113883.6.85; IndustryClassificationSystem 2.16.840.1.113883.1.11.16039;          and US Census Occupation Code OID: 2.16.840.1.113883.6.243 for relevant recipient or custodian codes not included in this value set.            If no source is indicated in the definition comments, then these are example FHIR codes.
 */
export const ParticipationRoleTypeCodes = {
    /**
     * Code: _CitizenRoleType
     */
    CitizenRoleType: "_CitizenRoleType",
    /**
     * 110150: Audit participant role ID of software application
     */
    Application: "110150",
    /**
     * 110151: Audit participant role ID of software application launcher, i.e., the entity that started or stopped an application
     */
    ApplicationLauncher: "110151",
    /**
     * 110152: Audit participant role ID of the receiver of data
     */
    DestinationRoleID: "110152",
    /**
     * 110153: Audit participant role ID of the sender of data
     */
    SourceRoleID: "110153",
    /**
     * 110154: Audit participant role ID of media receiving data during an export
     */
    DestinationMedia: "110154",
    /**
     * 110155: Audit participant role ID of media providing data during an import
     */
    SourceMedia: "110155",
    /**
     * Code: AFFL
     */
    AFFL: "AFFL",
    /**
     * Code: AGNT
     */
    AGNT: "AGNT",
    /**
     * Code: AMENDER
     */
    AMENDER: "AMENDER",
    /**
     * Code: ASSIGNED
     */
    ASSIGNED: "ASSIGNED",
    /**
     * Code: AUCG
     */
    AUCG: "AUCG",
    /**
     * Code: AULR
     */
    AULR: "AULR",
    /**
     * Code: AUT
     */
    AUT: "AUT",
    /**
     * authserver: An entity providing authorization services to enable the electronic sharing of health-related information based on resource owner's preapproved permissions. For example, an UMA Authorization Server[UMA]
     */
    AuthorizationServer: "authserver",
    /**
     * Code: AUTM
     */
    AUTM: "AUTM",
    /**
     * Code: AUWA
     */
    AUWA: "AUWA",
    /**
     * Code: CAS
     */
    AsylumSeeker: "CAS",
    /**
     * Code: CASM
     */
    SingleMinorAsylumSeeker: "CASM",
    /**
     * Code: CLAIM
     */
    CLAIM: "CLAIM",
    /**
     * Code: CLASSIFIER
     */
    CLASSIFIER: "CLASSIFIER",
    /**
     * Code: CN
     */
    National: "CN",
    /**
     * Code: CNRP
     */
    NonCountryMemberWithoutResidencePermit: "CNRP",
    /**
     * Code: CNRPM
     */
    NonCountryMemberMinorWithoutResidencePermit: "CNRPM",
    /**
     * Code: COAUTH
     */
    COAUTH: "COAUTH",
    /**
     * Code: CONSENTER
     */
    CONSENTER: "CONSENTER",
    /**
     * Code: CONSWIT
     */
    CONSWIT: "CONSWIT",
    /**
     * Code: CONT
     */
    CONT: "CONT",
    /**
     * Code: COPART
     */
    COPART: "COPART",
    /**
     * Code: COVPTY
     */
    COVPTY: "COVPTY",
    /**
     * Code: CPCA
     */
    PermitCardApplicant: "CPCA",
    /**
     * Code: CRP
     */
    NonCountryMemberWithResidencePermit: "CRP",
    /**
     * Code: CRPM
     */
    NonCountryMemberMinorWithResidencePermit: "CRPM",
    /**
     * Code: CST
     */
    CST: "CST",
    /**
     * datacollector: An entity that collects information over which the data subject may have certain rights under policy or law to control that information's management and distribution by data collectors, including the right to access, retrieve, distribute, or delete that information.
     */
    DataCollector: "datacollector",
    /**
     * dataprocessor: An entity that processes collected information over which the data subject may have certain rights under policy or law to control that information's management and distribution by data processors, including the right to access, retrieve, distribute, or delete that information.
     */
    DataProcessor: "dataprocessor",
    /**
     * datasubject: A person whose personal information is collected or processed, and who may have certain rights under policy or law to control that information's management and distribution by data collectors or processors, including the right to access, retrieve, distribute, or delete that information.
     */
    DataSubject: "datasubject",
    /**
     * Code: DECLASSIFIER
     */
    DECLASSIFIER: "DECLASSIFIER",
    /**
     * Code: DELEGATEE
     */
    DELEGATEE: "DELEGATEE",
    /**
     * Code: DELEGATOR
     */
    DELEGATOR: "DELEGATOR",
    /**
     * Code: DEPEN
     */
    DEPEN: "DEPEN",
    /**
     * Code: DOWNGRDER
     */
    DOWNGRDER: "DOWNGRDER",
    /**
     * Code: DPOWATT
     */
    DPOWATT: "DPOWATT",
    /**
     * Code: ECON
     */
    ECON: "ECON",
    /**
     * Code: EMP
     */
    EMP: "EMP",
    /**
     * Code: EVTWIT
     */
    EVTWIT: "EVTWIT",
    /**
     * Code: EXCEST
     */
    EXCEST: "EXCEST",
    /**
     * Code: GRANTEE
     */
    GRANTEE: "GRANTEE",
    /**
     * Code: GRANTOR
     */
    GRANTOR: "GRANTOR",
    /**
     * Code: GT
     */
    GT: "GT",
    /**
     * Code: GUADLTM
     */
    GUADLTM: "GUADLTM",
    /**
     * Code: GUARD
     */
    GUARD: "GUARD",
    /**
     * Code: HPOWATT
     */
    HPOWATT: "HPOWATT",
    /**
     * humanuser: The human user that has participated.
     */
    HumanUser: "humanuser",
    /**
     * Code: INF
     */
    INF: "INF",
    /**
     * Code: INTPRTER
     */
    INTPRTER: "INTPRTER",
    /**
     * Code: INVSBJ
     */
    INVSBJ: "INVSBJ",
    /**
     * Code: IRCP
     */
    IRCP: "IRCP",
    /**
     * Code: LA
     */
    LA: "LA",
    /**
     * Code: NAMED
     */
    NAMED: "NAMED",
    /**
     * Code: NOK
     */
    NOK: "NOK",
    /**
     * Code: NOT
     */
    NOT: "NOT",
    /**
     * Code: PAT
     */
    PAT: "PAT",
    /**
     * Code: POWATT
     */
    POWATT: "POWATT",
    /**
     * Code: PRIMAUTH
     */
    PRIMAUTH: "PRIMAUTH",
    /**
     * Code: PROMSK
     */
    PROMSK: "PROMSK",
    /**
     * Code: PROV
     */
    PROV: "PROV",
    /**
     * Code: RESPRSN
     */
    RESPRSN: "RESPRSN",
    /**
     * Code: REVIEWER
     */
    REVIEWER: "REVIEWER",
    /**
     * Code: SOURCE
     */
    SOURCE: "SOURCE",
    /**
     * Code: SPOWATT
     */
    SPOWATT: "SPOWATT",
    /**
     * Code: TRANS
     */
    TRANS: "TRANS",
    /**
     * Code: TRC
     */
    TRC: "TRC",
    /**
     * Code: VALID
     */
    VALID: "VALID",
    /**
     * Code: VERF
     */
    VERF: "VERF",
    /**
     * Code: WIT
     */
    WIT: "WIT",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhdGlvblJvbGVUeXBlQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1BhcnRpY2lwYXRpb25Sb2xlVHlwZUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHO0lBQ3hDOztPQUVHO0lBQ0gsZUFBZSxFQUFFLGtCQUFrQjtJQUNuQzs7T0FFRztJQUNILFdBQVcsRUFBRSxRQUFRO0lBQ3JCOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsUUFBUTtJQUM3Qjs7T0FFRztJQUNILGlCQUFpQixFQUFFLFFBQVE7SUFDM0I7O09BRUc7SUFDSCxZQUFZLEVBQUUsUUFBUTtJQUN0Qjs7T0FFRztJQUNILGdCQUFnQixFQUFFLFFBQVE7SUFDMUI7O09BRUc7SUFDSCxXQUFXLEVBQUUsUUFBUTtJQUNyQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILG1CQUFtQixFQUFFLFlBQVk7SUFDakM7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILFlBQVksRUFBRSxLQUFLO0lBQ25COztPQUVHO0lBQ0gsdUJBQXVCLEVBQUUsTUFBTTtJQUMvQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7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bnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9wYXJ0aWNpcGF0aW9uLXJvbGUtdHlwZXw0LjMuMFxyXG5cclxuLyoqXHJcbiAqIFRoaXMgRkhJUiB2YWx1ZSBzZXQgaXMgY29tcHJpc2VkIG9mIEFjdG9yIHBhcnRpY2lwYXRpb24gVHlwZSBjb2Rlcywgd2hpY2ggY2FuIGJlIHVzZWQgdG8gdmFsdWUgRkhJUiBhZ2VudHMsIGFjdG9ycywgYW5kIG90aGVyIHJvbGUgICAgICAgICBlbGVtZW50cy4gVGhlIEZISVIgQWN0b3IgcGFydGljaXBhdGlvbiB0eXBlIHZhbHVlIHNldCBpcyBiYXNlZCBvbiAgICBESUNPTSBBdWRpdCBNZXNzYWdlLCBDNDAyOyAgIEFTVE0gU3RhbmRhcmQsIEUxNzYyLTk1IFsyMDEzXTsgc2VsZWN0ZWQgY29kZXMgYW5kICAgICAgICAgIGRlcml2ZWQgYWN0b3Igcm9sZXMgZnJvbSBITDcgUm9sZUNsYXNzIE9JRCAyLjE2Ljg0MC4xLjExMzg4My41LjExMDsgICAgSEw3IFJvbGUgQ29kZSAyLjE2Ljg0MC4xLjExMzg4My41LjExMSwgaW5jbHVkaW5nIEFnZW50Um9sZVR5cGU7ICAgICAgICAgIEhMNyBQYXJ0aWNpcGF0aW9uVHlwZSBPSUQ6IDIuMTYuODQwLjEuMTEzODgzLjUuOTA7IGFuZCAgICBITDcgUGFydGljaXBhdGlvbkZ1bmN0aW9uIGNvZGVzIE9JRDogMi4xNi44NDAuMS4xMTM4ODMuNS44OC4gICAgICAgICAgIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzLCBieSByZWZlcmVuY2UsIHJvbGUgY29kZXMgZnJvbSBleHRlcm5hbCBjb2RlIHN5c3RlbXM6IE5VQ0MgSGVhbHRoIENhcmUgUHJvdmlkZXIgVGF4b25vbXkgT0lEOiAyLjE2Ljg0MC4xLjExMzg4My42LjEwMTsgICAgICAgICAgTm9ydGggQW1lcmljYW4gSW5kdXN0cnkgQ2xhc3NpZmljYXRpb24gU3lzdGVtIFtOQUlDU11PSUQ6IDIuMTYuODQwLjEuMTEzODgzLjYuODU7IEluZHVzdHJ5Q2xhc3NpZmljYXRpb25TeXN0ZW0gMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4xNjAzOTsgICAgICAgICAgYW5kIFVTIENlbnN1cyBPY2N1cGF0aW9uIENvZGUgT0lEOiAyLjE2Ljg0MC4xLjExMzg4My42LjI0MyBmb3IgcmVsZXZhbnQgcmVjaXBpZW50IG9yIGN1c3RvZGlhbiBjb2RlcyBub3QgaW5jbHVkZWQgaW4gdGhpcyB2YWx1ZSBzZXQuICAgICAgICAgICAgSWYgbm8gc291cmNlIGlzIGluZGljYXRlZCBpbiB0aGUgZGVmaW5pdGlvbiBjb21tZW50cywgdGhlbiB0aGVzZSBhcmUgZXhhbXBsZSBGSElSIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBhcnRpY2lwYXRpb25Sb2xlVHlwZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IF9DaXRpemVuUm9sZVR5cGVcclxuICAgKi9cclxuICBDaXRpemVuUm9sZVR5cGU6IFwiX0NpdGl6ZW5Sb2xlVHlwZVwiLFxyXG4gIC8qKlxyXG4gICAqIDExMDE1MDogQXVkaXQgcGFydGljaXBhbnQgcm9sZSBJRCBvZiBzb2Z0d2FyZSBhcHBsaWNhdGlvblxyXG4gICAqL1xyXG4gIEFwcGxpY2F0aW9uOiBcIjExMDE1MFwiLFxyXG4gIC8qKlxyXG4gICAqIDExMDE1MTogQXVkaXQgcGFydGljaXBhbnQgcm9sZSBJRCBvZiBzb2Z0d2FyZSBhcHBsaWNhdGlvbiBsYXVuY2hlciwgaS5lLiwgdGhlIGVudGl0eSB0aGF0IHN0YXJ0ZWQgb3Igc3RvcHBlZCBhbiBhcHBsaWNhdGlvblxyXG4gICAqL1xyXG4gIEFwcGxpY2F0aW9uTGF1bmNoZXI6IFwiMTEwMTUxXCIsXHJcbiAgLyoqXHJcbiAgICogMTEwMTUyOiBBdWRpdCBwYXJ0aWNpcGFudCByb2xlIElEIG9mIHRoZSByZWNlaXZlciBvZiBkYXRhXHJcbiAgICovXHJcbiAgRGVzdGluYXRpb25Sb2xlSUQ6IFwiMTEwMTUyXCIsXHJcbiAgLyoqXHJcbiAgICogMTEwMTUzOiBBdWRpdCBwYXJ0aWNpcGFudCByb2xlIElEIG9mIHRoZSBzZW5kZXIgb2YgZGF0YVxyXG4gICAqL1xyXG4gIFNvdXJjZVJvbGVJRDogXCIxMTAxNTNcIixcclxuICAvKipcclxuICAgKiAxMTAxNTQ6IEF1ZGl0IHBhcnRpY2lwYW50IHJvbGUgSUQgb2YgbWVkaWEgcmVjZWl2aW5nIGRhdGEgZHVyaW5nIGFuIGV4cG9ydFxyXG4gICAqL1xyXG4gIERlc3RpbmF0aW9uTWVkaWE6IFwiMTEwMTU0XCIsXHJcbiAgLyoqXHJcbiAgICogMTEwMTU1OiBBdWRpdCBwYXJ0aWNpcGFudCByb2xlIElEIG9mIG1lZGlhIHByb3ZpZGluZyBkYXRhIGR1cmluZyBhbiBpbXBvcnRcclxuICAgKi9cclxuICBTb3VyY2VNZWRpYTogXCIxMTAxNTVcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBRkZMXHJcbiAgICovXHJcbiAgQUZGTDogXCJBRkZMXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUdOVFxyXG4gICAqL1xyXG4gIEFHTlQ6IFwiQUdOVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFNRU5ERVJcclxuICAgKi9cclxuICBBTUVOREVSOiBcIkFNRU5ERVJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBU1NJR05FRFxyXG4gICAqL1xyXG4gIEFTU0lHTkVEOiBcIkFTU0lHTkVEXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQVVDR1xyXG4gICAqL1xyXG4gIEFVQ0c6IFwiQVVDR1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFVTFJcclxuICAgKi9cclxuICBBVUxSOiBcIkFVTFJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBVVRcclxuICAgKi9cclxuICBBVVQ6IFwiQVVUXCIsXHJcbiAgLyoqXHJcbiAgICogYXV0aHNlcnZlcjogQW4gZW50aXR5IHByb3ZpZGluZyBhdXRob3JpemF0aW9uIHNlcnZpY2VzIHRvIGVuYWJsZSB0aGUgZWxlY3Ryb25pYyBzaGFyaW5nIG9mIGhlYWx0aC1yZWxhdGVkIGluZm9ybWF0aW9uIGJhc2VkIG9uIHJlc291cmNlIG93bmVyJ3MgcHJlYXBwcm92ZWQgcGVybWlzc2lvbnMuIEZvciBleGFtcGxlLCBhbiBVTUEgQXV0aG9yaXphdGlvbiBTZXJ2ZXJbVU1BXVxyXG4gICAqL1xyXG4gIEF1dGhvcml6YXRpb25TZXJ2ZXI6IFwiYXV0aHNlcnZlclwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFVVE1cclxuICAgKi9cclxuICBBVVRNOiBcIkFVVE1cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBVVdBXHJcbiAgICovXHJcbiAgQVVXQTogXCJBVVdBXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0FTXHJcbiAgICovXHJcbiAgQXN5bHVtU2Vla2VyOiBcIkNBU1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENBU01cclxuICAgKi9cclxuICBTaW5nbGVNaW5vckFzeWx1bVNlZWtlcjogXCJDQVNNXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0xBSU1cclxuICAgKi9cclxuICBDTEFJTTogXCJDTEFJTVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENMQVNTSUZJRVJcclxuICAgKi9cclxuICBDTEFTU0lGSUVSOiBcIkNMQVNTSUZJRVJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDTlxyXG4gICAqL1xyXG4gIE5hdGlvbmFsOiBcIkNOXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ05SUFxyXG4gICAqL1xyXG4gIE5vbkNvdW50cnlNZW1iZXJXaXRob3V0UmVzaWRlbmNlUGVybWl0OiBcIkNOUlBcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDTlJQTVxyXG4gICAqL1xyXG4gIE5vbkNvdW50cnlNZW1iZXJNaW5vcldpdGhvdXRSZXNpZGVuY2VQZXJtaXQ6IFwiQ05SUE1cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDT0FVVEhcclxuICAgKi9cclxuICBDT0FVVEg6IFwiQ09BVVRIXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09OU0VOVEVSXHJcbiAgICovXHJcbiAgQ09OU0VOVEVSOiBcIkNPTlNFTlRFUlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENPTlNXSVRcclxuICAgKi9cclxuICBDT05TV0lUOiBcIkNPTlNXSVRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDT05UXHJcbiAgICovXHJcbiAgQ09OVDogXCJDT05UXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09QQVJUXHJcbiAgICovXHJcbiAgQ09QQVJUOiBcIkNPUEFSVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENPVlBUWVxyXG4gICAqL1xyXG4gIENPVlBUWTogXCJDT1ZQVFlcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDUENBXHJcbiAgICovXHJcbiAgUGVybWl0Q2FyZEFwcGxpY2FudDogXCJDUENBXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ1JQXHJcbiAgICovXHJcbiAgTm9uQ291bnRyeU1lbWJlcldpdGhSZXNpZGVuY2VQZXJtaXQ6IFwiQ1JQXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ1JQTVxyXG4gICAqL1xyXG4gIE5vbkNvdW50cnlNZW1iZXJNaW5vcldpdGhSZXNpZGVuY2VQZXJtaXQ6IFwiQ1JQTVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENTVFxyXG4gICAqL1xyXG4gIENTVDogXCJDU1RcIixcclxuICAvKipcclxuICAgKiBkYXRhY29sbGVjdG9yOiBBbiBlbnRpdHkgdGhhdCBjb2xsZWN0cyBpbmZvcm1hdGlvbiBvdmVyIHdoaWNoIHRoZSBkYXRhIHN1YmplY3QgbWF5IGhhdmUgY2VydGFpbiByaWdodHMgdW5kZXIgcG9saWN5IG9yIGxhdyB0byBjb250cm9sIHRoYXQgaW5mb3JtYXRpb24ncyBtYW5hZ2VtZW50IGFuZCBkaXN0cmlidXRpb24gYnkgZGF0YSBjb2xsZWN0b3JzLCBpbmNsdWRpbmcgdGhlIHJpZ2h0IHRvIGFjY2VzcywgcmV0cmlldmUsIGRpc3RyaWJ1dGUsIG9yIGRlbGV0ZSB0aGF0IGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIERhdGFDb2xsZWN0b3I6IFwiZGF0YWNvbGxlY3RvclwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGFwcm9jZXNzb3I6IEFuIGVudGl0eSB0aGF0IHByb2Nlc3NlcyBjb2xsZWN0ZWQgaW5mb3JtYXRpb24gb3ZlciB3aGljaCB0aGUgZGF0YSBzdWJqZWN0IG1heSBoYXZlIGNlcnRhaW4gcmlnaHRzIHVuZGVyIHBvbGljeSBvciBsYXcgdG8gY29udHJvbCB0aGF0IGluZm9ybWF0aW9uJ3MgbWFuYWdlbWVudCBhbmQgZGlzdHJpYnV0aW9uIGJ5IGRhdGEgcHJvY2Vzc29ycywgaW5jbHVkaW5nIHRoZSByaWdodCB0byBhY2Nlc3MsIHJldHJpZXZlLCBkaXN0cmlidXRlLCBvciBkZWxldGUgdGhhdCBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBEYXRhUHJvY2Vzc29yOiBcImRhdGFwcm9jZXNzb3JcIixcclxuICAvKipcclxuICAgKiBkYXRhc3ViamVjdDogQSBwZXJzb24gd2hvc2UgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgY29sbGVjdGVkIG9yIHByb2Nlc3NlZCwgYW5kIHdobyBtYXkgaGF2ZSBjZXJ0YWluIHJpZ2h0cyB1bmRlciBwb2xpY3kgb3IgbGF3IHRvIGNvbnRyb2wgdGhhdCBpbmZvcm1hdGlvbidzIG1hbmFnZW1lbnQgYW5kIGRpc3RyaWJ1dGlvbiBieSBkYXRhIGNvbGxlY3RvcnMgb3IgcHJvY2Vzc29ycywgaW5jbHVkaW5nIHRoZSByaWdodCB0byBhY2Nlc3MsIHJldHJpZXZlLCBkaXN0cmlidXRlLCBvciBkZWxldGUgdGhhdCBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBEYXRhU3ViamVjdDogXCJkYXRhc3ViamVjdFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERFQ0xBU1NJRklFUlxyXG4gICAqL1xyXG4gIERFQ0xBU1NJRklFUjogXCJERUNMQVNTSUZJRVJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBERUxFR0FURUVcclxuICAgKi9cclxuICBERUxFR0FURUU6IFwiREVMRUdBVEVFXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogREVMRUdBVE9SXHJcbiAgICovXHJcbiAgREVMRUdBVE9SOiBcIkRFTEVHQVRPUlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERFUEVOXHJcbiAgICovXHJcbiAgREVQRU46IFwiREVQRU5cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBET1dOR1JERVJcclxuICAgKi9cclxuICBET1dOR1JERVI6IFwiRE9XTkdSREVSXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRFBPV0FUVFxyXG4gICAqL1xyXG4gIERQT1dBVFQ6IFwiRFBPV0FUVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVDT05cclxuICAgKi9cclxuICBFQ09OOiBcIkVDT05cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBFTVBcclxuICAgKi9cclxuICBFTVA6IFwiRU1QXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRVZUV0lUXHJcbiAgICovXHJcbiAgRVZUV0lUOiBcIkVWVFdJVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVYQ0VTVFxyXG4gICAqL1xyXG4gIEVYQ0VTVDogXCJFWENFU1RcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBHUkFOVEVFXHJcbiAgICovXHJcbiAgR1JBTlRFRTogXCJHUkFOVEVFXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogR1JBTlRPUlxyXG4gICAqL1xyXG4gIEdSQU5UT1I6IFwiR1JBTlRPUlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdUXHJcbiAgICovXHJcbiAgR1Q6IFwiR1RcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBHVUFETFRNXHJcbiAgICovXHJcbiAgR1VBRExUTTogXCJHVUFETFRNXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogR1VBUkRcclxuICAgKi9cclxuICBHVUFSRDogXCJHVUFSRFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhQT1dBVFRcclxuICAgKi9cclxuICBIUE9XQVRUOiBcIkhQT1dBVFRcIixcclxuICAvKipcclxuICAgKiBodW1hbnVzZXI6IFRoZSBodW1hbiB1c2VyIHRoYXQgaGFzIHBhcnRpY2lwYXRlZC5cclxuICAgKi9cclxuICBIdW1hblVzZXI6IFwiaHVtYW51c2VyXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSU5GXHJcbiAgICovXHJcbiAgSU5GOiBcIklORlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IElOVFBSVEVSXHJcbiAgICovXHJcbiAgSU5UUFJURVI6IFwiSU5UUFJURVJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBJTlZTQkpcclxuICAgKi9cclxuICBJTlZTQko6IFwiSU5WU0JKXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSVJDUFxyXG4gICAqL1xyXG4gIElSQ1A6IFwiSVJDUFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IExBXHJcbiAgICovXHJcbiAgTEE6IFwiTEFcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBOQU1FRFxyXG4gICAqL1xyXG4gIE5BTUVEOiBcIk5BTUVEXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTk9LXHJcbiAgICovXHJcbiAgTk9LOiBcIk5PS1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5PVFxyXG4gICAqL1xyXG4gIE5PVDogXCJOT1RcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBQQVRcclxuICAgKi9cclxuICBQQVQ6IFwiUEFUXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUE9XQVRUXHJcbiAgICovXHJcbiAgUE9XQVRUOiBcIlBPV0FUVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBSSU1BVVRIXHJcbiAgICovXHJcbiAgUFJJTUFVVEg6IFwiUFJJTUFVVEhcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBQUk9NU0tcclxuICAgKi9cclxuICBQUk9NU0s6IFwiUFJPTVNLXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUFJPVlxyXG4gICAqL1xyXG4gIFBST1Y6IFwiUFJPVlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFJFU1BSU05cclxuICAgKi9cclxuICBSRVNQUlNOOiBcIlJFU1BSU05cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBSRVZJRVdFUlxyXG4gICAqL1xyXG4gIFJFVklFV0VSOiBcIlJFVklFV0VSXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU09VUkNFXHJcbiAgICovXHJcbiAgU09VUkNFOiBcIlNPVVJDRVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNQT1dBVFRcclxuICAgKi9cclxuICBTUE9XQVRUOiBcIlNQT1dBVFRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBUUkFOU1xyXG4gICAqL1xyXG4gIFRSQU5TOiBcIlRSQU5TXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVFJDXHJcbiAgICovXHJcbiAgVFJDOiBcIlRSQ1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFZBTElEXHJcbiAgICovXHJcbiAgVkFMSUQ6IFwiVkFMSURcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBWRVJGXHJcbiAgICovXHJcbiAgVkVSRjogXCJWRVJGXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogV0lUXHJcbiAgICovXHJcbiAgV0lUOiBcIldJVFwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgRkhJUiB2YWx1ZSBzZXQgaXMgY29tcHJpc2VkIG9mIEFjdG9yIHBhcnRpY2lwYXRpb24gVHlwZSBjb2Rlcywgd2hpY2ggY2FuIGJlIHVzZWQgdG8gdmFsdWUgRkhJUiBhZ2VudHMsIGFjdG9ycywgYW5kIG90aGVyIHJvbGUgICAgICAgICBlbGVtZW50cy4gVGhlIEZISVIgQWN0b3IgcGFydGljaXBhdGlvbiB0eXBlIHZhbHVlIHNldCBpcyBiYXNlZCBvbiAgICBESUNPTSBBdWRpdCBNZXNzYWdlLCBDNDAyOyAgIEFTVE0gU3RhbmRhcmQsIEUxNzYyLTk1IFsyMDEzXTsgc2VsZWN0ZWQgY29kZXMgYW5kICAgICAgICAgIGRlcml2ZWQgYWN0b3Igcm9sZXMgZnJvbSBITDcgUm9sZUNsYXNzIE9JRCAyLjE2Ljg0MC4xLjExMzg4My41LjExMDsgICAgSEw3IFJvbGUgQ29kZSAyLjE2Ljg0MC4xLjExMzg4My41LjExMSwgaW5jbHVkaW5nIEFnZW50Um9sZVR5cGU7ICAgICAgICAgIEhMNyBQYXJ0aWNpcGF0aW9uVHlwZSBPSUQ6IDIuMTYuODQwLjEuMTEzODgzLjUuOTA7IGFuZCAgICBITDcgUGFydGljaXBhdGlvbkZ1bmN0aW9uIGNvZGVzIE9JRDogMi4xNi44NDAuMS4xMTM4ODMuNS44OC4gICAgICAgICAgIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzLCBieSByZWZlcmVuY2UsIHJvbGUgY29kZXMgZnJvbSBleHRlcm5hbCBjb2RlIHN5c3RlbXM6IE5VQ0MgSGVhbHRoIENhcmUgUHJvdmlkZXIgVGF4b25vbXkgT0lEOiAyLjE2Ljg0MC4xLjExMzg4My42LjEwMTsgICAgICAgICAgTm9ydGggQW1lcmljYW4gSW5kdXN0cnkgQ2xhc3NpZmljYXRpb24gU3lzdGVtIFtOQUlDU11PSUQ6IDIuMTYuODQwLjEuMTEzODgzLjYuODU7IEluZHVzdHJ5Q2xhc3NpZmljYXRpb25TeXN0ZW0gMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4xNjAzOTsgICAgICAgICAgYW5kIFVTIENlbnN1cyBPY2N1cGF0aW9uIENvZGUgT0lEOiAyLjE2Ljg0MC4xLjExMzg4My42LjI0MyBmb3IgcmVsZXZhbnQgcmVjaXBpZW50IG9yIGN1c3RvZGlhbiBjb2RlcyBub3QgaW5jbHVkZWQgaW4gdGhpcyB2YWx1ZSBzZXQuICAgICAgICAgICAgSWYgbm8gc291cmNlIGlzIGluZGljYXRlZCBpbiB0aGUgZGVmaW5pdGlvbiBjb21tZW50cywgdGhlbiB0aGVzZSBhcmUgZXhhbXBsZSBGSElSIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGFydGljaXBhdGlvblJvbGVUeXBlQ29kZVR5cGUgPSB0eXBlb2YgUGFydGljaXBhdGlvblJvbGVUeXBlQ29kZXNba2V5b2YgdHlwZW9mIFBhcnRpY2lwYXRpb25Sb2xlVHlwZUNvZGVzXTtcclxuIl19