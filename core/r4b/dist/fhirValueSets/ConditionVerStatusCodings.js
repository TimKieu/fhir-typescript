// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/condition-ver-status|4.3.0
/**
 * The verification status to support or decline the clinical status of the condition or diagnosis.
 */
export const ConditionVerStatusCodings = {
    /**
     * confirmed: There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Confirmed: {
        display: "Confirmed",
        code: "confirmed",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * differential: One of a set of potential (and typically mutually exclusive) diagnoses asserted to further guide the diagnostic process and preliminary treatment.
     */
    Differential: {
        display: "Differential",
        code: "differential",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * entered-in-error: The statement was entered in error and is not valid.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * provisional: This is a tentative diagnosis - still a candidate that is under consideration.
     */
    Provisional: {
        display: "Provisional",
        code: "provisional",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * refuted: This condition has been ruled out by diagnostic and clinical evidence.
     */
    Refuted: {
        display: "Refuted",
        code: "refuted",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * unconfirmed: There is not sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Unconfirmed: {
        display: "Unconfirmed",
        code: "unconfirmed",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx5RUFBeUU7QUFrQ3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbmRpdGlvbi12ZXItc3RhdHVzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHZlcmlmaWNhdGlvbiBzdGF0dXMgdG8gc3VwcG9ydCBvciBkZWNsaW5lIHRoZSBjbGluaWNhbCBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiBvciBkaWFnbm9zaXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb25kaXRpb25WZXJTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbmZpcm1lZDogVGhlcmUgaXMgc3VmZmljaWVudCBkaWFnbm9zdGljIGFuZC9vciBjbGluaWNhbCBldmlkZW5jZSB0byB0cmVhdCB0aGlzIGFzIGEgY29uZmlybWVkIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBDb25maXJtZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGlmZmVyZW50aWFsOiBPbmUgb2YgYSBzZXQgb2YgcG90ZW50aWFsIChhbmQgdHlwaWNhbGx5IG11dHVhbGx5IGV4Y2x1c2l2ZSkgZGlhZ25vc2VzIGFzc2VydGVkIHRvIGZ1cnRoZXIgZ3VpZGUgdGhlIGRpYWdub3N0aWMgcHJvY2VzcyBhbmQgcHJlbGltaW5hcnkgdHJlYXRtZW50LlxyXG4gICAqL1xyXG4gIERpZmZlcmVudGlhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgc3RhdGVtZW50IHdhcyBlbnRlcmVkIGluIGVycm9yIGFuZCBpcyBub3QgdmFsaWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJvdmlzaW9uYWw6IFRoaXMgaXMgYSB0ZW50YXRpdmUgZGlhZ25vc2lzIC0gc3RpbGwgYSBjYW5kaWRhdGUgdGhhdCBpcyB1bmRlciBjb25zaWRlcmF0aW9uLlxyXG4gICAqL1xyXG4gIFByb3Zpc2lvbmFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlZnV0ZWQ6IFRoaXMgY29uZGl0aW9uIGhhcyBiZWVuIHJ1bGVkIG91dCBieSBkaWFnbm9zdGljIGFuZCBjbGluaWNhbCBldmlkZW5jZS5cclxuICAgKi9cclxuICBSZWZ1dGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVuY29uZmlybWVkOiBUaGVyZSBpcyBub3Qgc3VmZmljaWVudCBkaWFnbm9zdGljIGFuZC9vciBjbGluaWNhbCBldmlkZW5jZSB0byB0cmVhdCB0aGlzIGFzIGEgY29uZmlybWVkIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBVbmNvbmZpcm1lZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB2ZXJpZmljYXRpb24gc3RhdHVzIHRvIHN1cHBvcnQgb3IgZGVjbGluZSB0aGUgY2xpbmljYWwgc3RhdHVzIG9mIHRoZSBjb25kaXRpb24gb3IgZGlhZ25vc2lzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbmRpdGlvblZlclN0YXR1c0NvZGluZ3M6Q29uZGl0aW9uVmVyU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb25maXJtZWQ6IFRoZXJlIGlzIHN1ZmZpY2llbnQgZGlhZ25vc3RpYyBhbmQvb3IgY2xpbmljYWwgZXZpZGVuY2UgdG8gdHJlYXQgdGhpcyBhcyBhIGNvbmZpcm1lZCBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgQ29uZmlybWVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbmZpcm1lZFwiLFxyXG4gICAgY29kZTogXCJjb25maXJtZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkaWZmZXJlbnRpYWw6IE9uZSBvZiBhIHNldCBvZiBwb3RlbnRpYWwgKGFuZCB0eXBpY2FsbHkgbXV0dWFsbHkgZXhjbHVzaXZlKSBkaWFnbm9zZXMgYXNzZXJ0ZWQgdG8gZnVydGhlciBndWlkZSB0aGUgZGlhZ25vc3RpYyBwcm9jZXNzIGFuZCBwcmVsaW1pbmFyeSB0cmVhdG1lbnQuXHJcbiAgICovXHJcbiAgRGlmZmVyZW50aWFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpZmZlcmVudGlhbFwiLFxyXG4gICAgY29kZTogXCJkaWZmZXJlbnRpYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgc3RhdGVtZW50IHdhcyBlbnRlcmVkIGluIGVycm9yIGFuZCBpcyBub3QgdmFsaWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBFcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvdmlzaW9uYWw6IFRoaXMgaXMgYSB0ZW50YXRpdmUgZGlhZ25vc2lzIC0gc3RpbGwgYSBjYW5kaWRhdGUgdGhhdCBpcyB1bmRlciBjb25zaWRlcmF0aW9uLlxyXG4gICAqL1xyXG4gIFByb3Zpc2lvbmFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3Zpc2lvbmFsXCIsXHJcbiAgICBjb2RlOiBcInByb3Zpc2lvbmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVmdXRlZDogVGhpcyBjb25kaXRpb24gaGFzIGJlZW4gcnVsZWQgb3V0IGJ5IGRpYWdub3N0aWMgYW5kIGNsaW5pY2FsIGV2aWRlbmNlLlxyXG4gICAqL1xyXG4gIFJlZnV0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVmdXRlZFwiLFxyXG4gICAgY29kZTogXCJyZWZ1dGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5jb25maXJtZWQ6IFRoZXJlIGlzIG5vdCBzdWZmaWNpZW50IGRpYWdub3N0aWMgYW5kL29yIGNsaW5pY2FsIGV2aWRlbmNlIHRvIHRyZWF0IHRoaXMgYXMgYSBjb25maXJtZWQgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIFVuY29uZmlybWVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVuY29uZmlybWVkXCIsXHJcbiAgICBjb2RlOiBcInVuY29uZmlybWVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==