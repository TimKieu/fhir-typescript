// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-state-codes|4.3.0
/**
 * Indicates the state of the consent.
 */
export const ConsentStateCodings = {
    /**
     * active: The consent is to be followed and enforced.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * draft: The consent is in development or awaiting use but is not yet intended to be acted upon.
     */
    Pending: {
        display: "Pending",
        code: "draft",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * entered-in-error: The consent was created wrongly (e.g. wrong patient) and should be ignored.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * inactive: The consent is terminated or replaced.
     */
    Inactive: {
        display: "Inactive",
        code: "inactive",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * proposed: The consent has been proposed but not yet agreed to by all parties. The negotiation stage.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * rejected: The consent has been rejected by one or more of the parties.
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc2VudFN0YXRlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uc2VudFN0YXRlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx3RUFBd0U7QUFrQ3hFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29uc2VudC1zdGF0ZS1jb2Rlc3w0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGUgc3RhdGUgb2YgdGhlIGNvbnNlbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb25zZW50U3RhdGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIGNvbnNlbnQgaXMgdG8gYmUgZm9sbG93ZWQgYW5kIGVuZm9yY2VkLlxyXG4gICAqL1xyXG4gIEFjdGl2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkcmFmdDogVGhlIGNvbnNlbnQgaXMgaW4gZGV2ZWxvcG1lbnQgb3IgYXdhaXRpbmcgdXNlIGJ1dCBpcyBub3QgeWV0IGludGVuZGVkIHRvIGJlIGFjdGVkIHVwb24uXHJcbiAgICovXHJcbiAgUGVuZGluZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgY29uc2VudCB3YXMgY3JlYXRlZCB3cm9uZ2x5IChlLmcuIHdyb25nIHBhdGllbnQpIGFuZCBzaG91bGQgYmUgaWdub3JlZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbmFjdGl2ZTogVGhlIGNvbnNlbnQgaXMgdGVybWluYXRlZCBvciByZXBsYWNlZC5cclxuICAgKi9cclxuICBJbmFjdGl2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm9wb3NlZDogVGhlIGNvbnNlbnQgaGFzIGJlZW4gcHJvcG9zZWQgYnV0IG5vdCB5ZXQgYWdyZWVkIHRvIGJ5IGFsbCBwYXJ0aWVzLiBUaGUgbmVnb3RpYXRpb24gc3RhZ2UuXHJcbiAgICovXHJcbiAgUHJvcG9zZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSBjb25zZW50IGhhcyBiZWVuIHJlamVjdGVkIGJ5IG9uZSBvciBtb3JlIG9mIHRoZSBwYXJ0aWVzLlxyXG4gICAqL1xyXG4gIFJlamVjdGVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29uc2VudC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb25zZW50U3RhdGVDb2RpbmdzOkNvbnNlbnRTdGF0ZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWN0aXZlOiBUaGUgY29uc2VudCBpcyB0byBiZSBmb2xsb3dlZCBhbmQgZW5mb3JjZWQuXHJcbiAgICovXHJcbiAgQWN0aXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjdGl2ZVwiLFxyXG4gICAgY29kZTogXCJhY3RpdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgY29uc2VudCBpcyBpbiBkZXZlbG9wbWVudCBvciBhd2FpdGluZyB1c2UgYnV0IGlzIG5vdCB5ZXQgaW50ZW5kZWQgdG8gYmUgYWN0ZWQgdXBvbi5cclxuICAgKi9cclxuICBQZW5kaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlbmRpbmdcIixcclxuICAgIGNvZGU6IFwiZHJhZnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBjb25zZW50IHdhcyBjcmVhdGVkIHdyb25nbHkgKGUuZy4gd3JvbmcgcGF0aWVudCkgYW5kIHNob3VsZCBiZSBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW5hY3RpdmU6IFRoZSBjb25zZW50IGlzIHRlcm1pbmF0ZWQgb3IgcmVwbGFjZWQuXHJcbiAgICovXHJcbiAgSW5hY3RpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5hY3RpdmVcIixcclxuICAgIGNvZGU6IFwiaW5hY3RpdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2VkOiBUaGUgY29uc2VudCBoYXMgYmVlbiBwcm9wb3NlZCBidXQgbm90IHlldCBhZ3JlZWQgdG8gYnkgYWxsIHBhcnRpZXMuIFRoZSBuZWdvdGlhdGlvbiBzdGFnZS5cclxuICAgKi9cclxuICBQcm9wb3NlZDoge1xyXG4gICAgZGlzcGxheTogXCJQcm9wb3NlZFwiLFxyXG4gICAgY29kZTogXCJwcm9wb3NlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSBjb25zZW50IGhhcyBiZWVuIHJlamVjdGVkIGJ5IG9uZSBvciBtb3JlIG9mIHRoZSBwYXJ0aWVzLlxyXG4gICAqL1xyXG4gIFJlamVjdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlamVjdGVkXCIsXHJcbiAgICBjb2RlOiBcInJlamVjdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19