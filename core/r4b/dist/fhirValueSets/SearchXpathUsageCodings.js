// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-xpath-usage|4.3.0
/**
 * How a search parameter relates to the set of elements returned by evaluating its xpath query.
 */
export const SearchXpathUsageCodings = {
    /**
     * distance: The search parameter is based on a spatial transform of the selected nodes, using physical distance from the middle.
     */
    Distance: {
        display: "Distance",
        code: "distance",
        system: "http://hl7.org/fhir/search-xpath-usage",
    },
    /**
     * nearby: The search parameter is based on a spatial transform of the selected nodes.
     */
    Nearby: {
        display: "Nearby",
        code: "nearby",
        system: "http://hl7.org/fhir/search-xpath-usage",
    },
    /**
     * normal: The search parameter is derived directly from the selected nodes based on the type definitions.
     */
    Normal: {
        display: "Normal",
        code: "normal",
        system: "http://hl7.org/fhir/search-xpath-usage",
    },
    /**
     * other: The interpretation of the xpath statement is unknown (and can't be automated).
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/search-xpath-usage",
    },
    /**
     * phonetic: The search parameter is derived by a phonetic transform from the selected nodes.
     */
    Phonetic: {
        display: "Phonetic",
        code: "phonetic",
        system: "http://hl7.org/fhir/search-xpath-usage",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoWHBhdGhVc2FnZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaFhwYXRoVXNhZ2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLHVFQUF1RTtBQThCdkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBOEI7SUFDaEU7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc2VhcmNoLXhwYXRoLXVzYWdlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSG93IGEgc2VhcmNoIHBhcmFtZXRlciByZWxhdGVzIHRvIHRoZSBzZXQgb2YgZWxlbWVudHMgcmV0dXJuZWQgYnkgZXZhbHVhdGluZyBpdHMgeHBhdGggcXVlcnkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTZWFyY2hYcGF0aFVzYWdlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkaXN0YW5jZTogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgYmFzZWQgb24gYSBzcGF0aWFsIHRyYW5zZm9ybSBvZiB0aGUgc2VsZWN0ZWQgbm9kZXMsIHVzaW5nIHBoeXNpY2FsIGRpc3RhbmNlIGZyb20gdGhlIG1pZGRsZS5cclxuICAgKi9cclxuICBEaXN0YW5jZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuZWFyYnk6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGJhc2VkIG9uIGEgc3BhdGlhbCB0cmFuc2Zvcm0gb2YgdGhlIHNlbGVjdGVkIG5vZGVzLlxyXG4gICAqL1xyXG4gIE5lYXJieTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3JtYWw6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGRlcml2ZWQgZGlyZWN0bHkgZnJvbSB0aGUgc2VsZWN0ZWQgbm9kZXMgYmFzZWQgb24gdGhlIHR5cGUgZGVmaW5pdGlvbnMuXHJcbiAgICovXHJcbiAgTm9ybWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBUaGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHhwYXRoIHN0YXRlbWVudCBpcyB1bmtub3duIChhbmQgY2FuJ3QgYmUgYXV0b21hdGVkKS5cclxuICAgKi9cclxuICBPdGhlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwaG9uZXRpYzogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgZGVyaXZlZCBieSBhIHBob25ldGljIHRyYW5zZm9ybSBmcm9tIHRoZSBzZWxlY3RlZCBub2Rlcy5cclxuICAgKi9cclxuICBQaG9uZXRpYzogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEhvdyBhIHNlYXJjaCBwYXJhbWV0ZXIgcmVsYXRlcyB0byB0aGUgc2V0IG9mIGVsZW1lbnRzIHJldHVybmVkIGJ5IGV2YWx1YXRpbmcgaXRzIHhwYXRoIHF1ZXJ5LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNlYXJjaFhwYXRoVXNhZ2VDb2RpbmdzOlNlYXJjaFhwYXRoVXNhZ2VDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRpc3RhbmNlOiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBiYXNlZCBvbiBhIHNwYXRpYWwgdHJhbnNmb3JtIG9mIHRoZSBzZWxlY3RlZCBub2RlcywgdXNpbmcgcGh5c2ljYWwgZGlzdGFuY2UgZnJvbSB0aGUgbWlkZGxlLlxyXG4gICAqL1xyXG4gIERpc3RhbmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpc3RhbmNlXCIsXHJcbiAgICBjb2RlOiBcImRpc3RhbmNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gteHBhdGgtdXNhZ2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5lYXJieTogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgYmFzZWQgb24gYSBzcGF0aWFsIHRyYW5zZm9ybSBvZiB0aGUgc2VsZWN0ZWQgbm9kZXMuXHJcbiAgICovXHJcbiAgTmVhcmJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIk5lYXJieVwiLFxyXG4gICAgY29kZTogXCJuZWFyYnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC14cGF0aC11c2FnZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm9ybWFsOiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBkZXJpdmVkIGRpcmVjdGx5IGZyb20gdGhlIHNlbGVjdGVkIG5vZGVzIGJhc2VkIG9uIHRoZSB0eXBlIGRlZmluaXRpb25zLlxyXG4gICAqL1xyXG4gIE5vcm1hbDoge1xyXG4gICAgZGlzcGxheTogXCJOb3JtYWxcIixcclxuICAgIGNvZGU6IFwibm9ybWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gteHBhdGgtdXNhZ2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBUaGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHhwYXRoIHN0YXRlbWVudCBpcyB1bmtub3duIChhbmQgY2FuJ3QgYmUgYXV0b21hdGVkKS5cclxuICAgKi9cclxuICBPdGhlcjoge1xyXG4gICAgZGlzcGxheTogXCJPdGhlclwiLFxyXG4gICAgY29kZTogXCJvdGhlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXhwYXRoLXVzYWdlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwaG9uZXRpYzogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgZGVyaXZlZCBieSBhIHBob25ldGljIHRyYW5zZm9ybSBmcm9tIHRoZSBzZWxlY3RlZCBub2Rlcy5cclxuICAgKi9cclxuICBQaG9uZXRpYzoge1xyXG4gICAgZGlzcGxheTogXCJQaG9uZXRpY1wiLFxyXG4gICAgY29kZTogXCJwaG9uZXRpY1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXhwYXRoLXVzYWdlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19