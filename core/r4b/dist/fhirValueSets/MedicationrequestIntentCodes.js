// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationrequest-intent|4.3.0
/**
 * MedicationRequest Intent Codes
 */
export const MedicationrequestIntentCodes = {
    /**
     * filler-order: The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
     */
    FillerOrder: "filler-order",
    /**
     * instance-order: The request represents an instance for the particular order, for example a medication administration record.
     */
    InstanceOrder: "instance-order",
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or  other constraints among a set of requests.
     */
    Option: "option",
    /**
     * order: The request represents a request/demand and authorization for action
     */
    Order: "order",
    /**
     * original-order: The request represents the original authorization for the medication request.
     */
    OriginalOrder: "original-order",
    /**
     * plan: The request represents an intention to ensure something occurs without providing an authorization for others to act.
     */
    Plan: "plan",
    /**
     * proposal: The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
     */
    Proposal: "proposal",
    /**
     * reflex-order: The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization..
     */
    ReflexOrder: "reflex-order",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyw2RUFBNkU7QUFFN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRztJQUMxQzs7T0FFRztJQUNILFdBQVcsRUFBRSxjQUFjO0lBQzNCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGdCQUFnQjtJQUMvQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZWRpY2F0aW9ucmVxdWVzdC1pbnRlbnR8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uUmVxdWVzdCBJbnRlbnQgQ29kZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGZpbGxlci1vcmRlcjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyB0aGUgdmlldyBvZiBhbiBhdXRob3JpemF0aW9uIGluc3RhbnRpYXRlZCBieSBhIGZ1bGZpbGxpbmcgc3lzdGVtIHJlcHJlc2VudGluZyB0aGUgZGV0YWlscyBvZiB0aGUgZnVsZmlsbGVyJ3MgaW50ZW50aW9uIHRvIGFjdCB1cG9uIGEgc3VibWl0dGVkIG9yZGVyLlxyXG4gICAqL1xyXG4gIEZpbGxlck9yZGVyOiBcImZpbGxlci1vcmRlclwiLFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGluc3RhbmNlIGZvciB0aGUgcGFydGljdWxhciBvcmRlciwgZm9yIGV4YW1wbGUgYSBtZWRpY2F0aW9uIGFkbWluaXN0cmF0aW9uIHJlY29yZC5cclxuICAgKi9cclxuICBJbnN0YW5jZU9yZGVyOiBcImluc3RhbmNlLW9yZGVyXCIsXHJcbiAgLyoqXHJcbiAgICogb3B0aW9uOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgY29tcG9uZW50IG9yIG9wdGlvbiBmb3IgYSBSZXF1ZXN0R3JvdXAgdGhhdCBlc3RhYmxpc2hlcyB0aW1pbmcsIGNvbmRpdGlvbmFsaXR5IGFuZC9vciAgb3RoZXIgY29uc3RyYWludHMgYW1vbmcgYSBzZXQgb2YgcmVxdWVzdHMuXHJcbiAgICovXHJcbiAgT3B0aW9uOiBcIm9wdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIG9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgcmVxdWVzdC9kZW1hbmQgYW5kIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvblxyXG4gICAqL1xyXG4gIE9yZGVyOiBcIm9yZGVyXCIsXHJcbiAgLyoqXHJcbiAgICogb3JpZ2luYWwtb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgdGhlIG9yaWdpbmFsIGF1dGhvcml6YXRpb24gZm9yIHRoZSBtZWRpY2F0aW9uIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgT3JpZ2luYWxPcmRlcjogXCJvcmlnaW5hbC1vcmRlclwiLFxyXG4gIC8qKlxyXG4gICAqIHBsYW46IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gaW50ZW50aW9uIHRvIGVuc3VyZSBzb21ldGhpbmcgb2NjdXJzIHdpdGhvdXQgcHJvdmlkaW5nIGFuIGF1dGhvcml6YXRpb24gZm9yIG90aGVycyB0byBhY3QuXHJcbiAgICovXHJcbiAgUGxhbjogXCJwbGFuXCIsXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zYWw6IFRoZSByZXF1ZXN0IGlzIGEgc3VnZ2VzdGlvbiBtYWRlIGJ5IHNvbWVvbmUvc29tZXRoaW5nIHRoYXQgZG9lc24ndCBoYXZlIGFuIGludGVudGlvbiB0byBlbnN1cmUgaXQgb2NjdXJzIGFuZCB3aXRob3V0IHByb3ZpZGluZyBhbiBhdXRob3JpemF0aW9uIHRvIGFjdFxyXG4gICAqL1xyXG4gIFByb3Bvc2FsOiBcInByb3Bvc2FsXCIsXHJcbiAgLyoqXHJcbiAgICogcmVmbGV4LW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHN1cHBsZW1lbnRhbCBhdXRob3JpemF0aW9uIGZvciBhY3Rpb24gYmFzZWQgb24gYSBwYXJlbnQgYXV0aG9yaXphdGlvbiB0b2dldGhlciB3aXRoIGluaXRpYWwgcmVzdWx0cyBvZiB0aGUgYWN0aW9uIHRha2VuIGFnYWluc3QgdGhhdCBwYXJlbnQgYXV0aG9yaXphdGlvbi4uXHJcbiAgICovXHJcbiAgUmVmbGV4T3JkZXI6IFwicmVmbGV4LW9yZGVyXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvblJlcXVlc3QgSW50ZW50IENvZGVzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGVUeXBlID0gdHlwZW9mIE1lZGljYXRpb25yZXF1ZXN0SW50ZW50Q29kZXNba2V5b2YgdHlwZW9mIE1lZGljYXRpb25yZXF1ZXN0SW50ZW50Q29kZXNdO1xyXG4iXX0=