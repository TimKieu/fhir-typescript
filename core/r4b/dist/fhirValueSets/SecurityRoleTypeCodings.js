// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/security-role-type|4.3.0
/**
 * This example FHIR value set is comprised of example Actor Type codes, which can be used to value FHIR agents, actors, and other role         elements such as those specified in financial transactions. The FHIR Actor value set is based on    DICOM Audit Message, C402;   ASTM Standard, E1762-95 [2013]; selected codes and          derived actor roles from HL7 RoleClass OID 2.16.840.1.113883.5.110;    HL7 Role Code 2.16.840.1.113883.5.111, including AgentRoleType;          HL7 ParticipationType OID: 2.16.840.1.113883.5.90; and    HL7 ParticipationFunction codes OID: 2.16.840.1.113883.5.88.           This value set includes, by reference, role codes from external code systems: NUCC Health Care Provider Taxonomy OID: 2.16.840.1.113883.6.101;          North American Industry Classification System [NAICS]OID: 2.16.840.1.113883.6.85; IndustryClassificationSystem 2.16.840.1.113883.1.11.16039;          and US Census Occupation Code OID: 2.16.840.1.113883.6.243 for relevant recipient or custodian codes not included in this value set.            If no source is indicated in the definition comments, then these are example FHIR codes.          It can be extended with appropriate roles described by SNOMED as well as those described in the HL7 Role Based Access Control Catalog and the          HL7 Healthcare (Security and Privacy) Access Control Catalog.            In Role-Based Access Control (RBAC), permissions are operations on an object that a user wishes to access. Permissions are grouped into roles.          A role characterizes the functions a user is allowed to perform. Roles are assigned to users. If the user's role has the appropriate permissions          to access an object, then that user is granted access to the object. FHIR readily enables RBAC, as FHIR Resources are object types and the CRUDE          events (the FHIR equivalent to permissions in the RBAC scheme) are operations on those objects.          In Attribute-Based Access Control (ABAC), a user requests to perform operations on objects. That user's access request is granted or denied          based on a set of access control policies that are specified in terms of attributes and conditions. FHIR readily enables ABAC, as instances of          a Resource in FHIR (again, Resources are object types) can have attributes associated with them. These attributes include security tags,          environment conditions, and a host of user and object characteristics, which are the same attributes as those used in ABAC. Attributes help          define the access control policies that determine the operations a user may perform on a Resource (in FHIR) or object (in ABAC). For example,          a tag (or attribute) may specify that the identified Resource (object) is not to be further disclosed without explicit consent from the patient.
 */
export const SecurityRoleTypeCodings = {
    /**
     * Code: _CitizenRoleType
     */
    CitizenRoleType: {
        display: "CitizenRoleType",
        code: "_CitizenRoleType",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * 110150: Audit participant role ID of software application
     */
    Application: {
        display: "Application",
        code: "110150",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110151: Audit participant role ID of software application launcher, i.e., the entity that started or stopped an application
     */
    ApplicationLauncher: {
        display: "Application Launcher",
        code: "110151",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110152: Audit participant role ID of the receiver of data
     */
    DestinationRoleID: {
        display: "Destination Role ID",
        code: "110152",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110153: Audit participant role ID of the sender of data
     */
    SourceRoleID: {
        display: "Source Role ID",
        code: "110153",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110154: Audit participant role ID of media receiving data during an export
     */
    DestinationMedia: {
        display: "Destination Media",
        code: "110154",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110155: Audit participant role ID of media providing data during an import
     */
    SourceMedia: {
        display: "Source Media",
        code: "110155",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: AFFL
     */
    AFFL: {
        code: "AFFL",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: AGNT
     */
    AGNT: {
        code: "AGNT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: AMENDER
     */
    AMENDER: {
        code: "AMENDER",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: ASSIGNED
     */
    ASSIGNED: {
        code: "ASSIGNED",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: AUCG
     */
    AUCG: {
        code: "AUCG",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationFunction",
    },
    /**
     * Code: AULR
     */
    AULR: {
        code: "AULR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationFunction",
    },
    /**
     * Code: AUT
     */
    AUT: {
        code: "AUT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * authserver: An entity providing authorization services to enable the electronic sharing of health-related information based on resource owner's preapproved permissions. For example, an UMA Authorization Server[UMA]
     */
    AuthorizationServer: {
        display: "authorization server",
        code: "authserver",
        system: "http://terminology.hl7.org/CodeSystem/extra-security-role-type",
    },
    /**
     * Code: AUTM
     */
    AUTM: {
        code: "AUTM",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationFunction",
    },
    /**
     * Code: AUWA
     */
    AUWA: {
        code: "AUWA",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationFunction",
    },
    /**
     * Code: CAS
     */
    AsylumSeeker: {
        display: "asylum seeker",
        code: "CAS",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CASM
     */
    SingleMinorAsylumSeeker: {
        display: "single minor asylum seeker",
        code: "CASM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CLAIM
     */
    CLAIM: {
        code: "CLAIM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: CLASSIFIER
     */
    CLASSIFIER: {
        code: "CLASSIFIER",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CN
     */
    National: {
        display: "national",
        code: "CN",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CNRP
     */
    NonCountryMemberWithoutResidencePermit: {
        display: "non-country member without residence permit",
        code: "CNRP",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CNRPM
     */
    NonCountryMemberMinorWithoutResidencePermit: {
        display: "non-country member minor without residence permit",
        code: "CNRPM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: COAUTH
     */
    COAUTH: {
        code: "COAUTH",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: CONSENTER
     */
    CONSENTER: {
        code: "CONSENTER",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CONSWIT
     */
    CONSWIT: {
        code: "CONSWIT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CONT
     */
    CONT: {
        code: "CONT",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: COPART
     */
    COPART: {
        code: "COPART",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: COVPTY
     */
    COVPTY: {
        code: "COVPTY",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: CPCA
     */
    PermitCardApplicant: {
        display: "permit card applicant",
        code: "CPCA",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CRP
     */
    NonCountryMemberWithResidencePermit: {
        display: "non-country member with residence permit",
        code: "CRP",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CRPM
     */
    NonCountryMemberMinorWithResidencePermit: {
        display: "non-country member minor with residence permit",
        code: "CRPM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: CST
     */
    CST: {
        code: "CST",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * datacollector: An entity that collects information over which the data subject may have certain rights under policy or law to control that information's management and distribution by data collectors, including the right to access, retrieve, distribute, or delete that information.
     */
    DataCollector: {
        display: "data collector",
        code: "datacollector",
        system: "http://terminology.hl7.org/CodeSystem/extra-security-role-type",
    },
    /**
     * dataprocessor: An entity that processes collected information over which the data subject may have certain rights under policy or law to control that information's management and distribution by data processors, including the right to access, retrieve, distribute, or delete that information.
     */
    DataProcessor: {
        display: "data processor",
        code: "dataprocessor",
        system: "http://terminology.hl7.org/CodeSystem/extra-security-role-type",
    },
    /**
     * datasubject: A person whose personal information is collected or processed, and who may have certain rights under policy or law to control that information's management and distribution by data collectors or processors, including the right to access, retrieve, distribute, or delete that information.
     */
    DataSubject: {
        display: "data subject",
        code: "datasubject",
        system: "http://terminology.hl7.org/CodeSystem/extra-security-role-type",
    },
    /**
     * Code: DECLASSIFIER
     */
    DECLASSIFIER: {
        code: "DECLASSIFIER",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: DELEGATEE
     */
    DELEGATEE: {
        code: "DELEGATEE",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: DELEGATOR
     */
    DELEGATOR: {
        code: "DELEGATOR",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: DEPEN
     */
    DEPEN: {
        code: "DEPEN",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: DOWNGRDER
     */
    DOWNGRDER: {
        code: "DOWNGRDER",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: DPOWATT
     */
    DPOWATT: {
        code: "DPOWATT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: ECON
     */
    ECON: {
        code: "ECON",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: EMP
     */
    EMP: {
        code: "EMP",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: EVTWIT
     */
    EVTWIT: {
        code: "EVTWIT",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: EXCEST
     */
    EXCEST: {
        code: "EXCEST",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: GRANTEE
     */
    GRANTEE: {
        code: "GRANTEE",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: GRANTOR
     */
    GRANTOR: {
        code: "GRANTOR",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: GT
     */
    GT: {
        code: "GT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: GUADLTM
     */
    GUADLTM: {
        code: "GUADLTM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: GUARD
     */
    GUARD: {
        code: "GUARD",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: HPOWATT
     */
    HPOWATT: {
        code: "HPOWATT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * humanuser: The human user that has participated.
     */
    HumanUser: {
        display: "human user",
        code: "humanuser",
        system: "http://terminology.hl7.org/CodeSystem/extra-security-role-type",
    },
    /**
     * Code: INF
     */
    INF: {
        code: "INF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: INTPRTER
     */
    INTPRTER: {
        code: "INTPRTER",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: INVSBJ
     */
    INVSBJ: {
        code: "INVSBJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: IRCP
     */
    IRCP: {
        code: "IRCP",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: LA
     */
    LA: {
        code: "LA",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: NAMED
     */
    NAMED: {
        code: "NAMED",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: NOK
     */
    NOK: {
        code: "NOK",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: NOT
     */
    NOT: {
        code: "NOT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: PAT
     */
    PAT: {
        code: "PAT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: POWATT
     */
    POWATT: {
        code: "POWATT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: PRIMAUTH
     */
    PRIMAUTH: {
        code: "PRIMAUTH",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: PROMSK
     */
    PROMSK: {
        code: "PROMSK",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationFunction",
    },
    /**
     * Code: PROV
     */
    PROV: {
        code: "PROV",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleClass",
    },
    /**
     * Code: RESPRSN
     */
    RESPRSN: {
        code: "RESPRSN",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: REVIEWER
     */
    REVIEWER: {
        code: "REVIEWER",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: SOURCE
     */
    SOURCE: {
        code: "SOURCE",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: SPOWATT
     */
    SPOWATT: {
        code: "SPOWATT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RoleCode",
    },
    /**
     * Code: TRANS
     */
    TRANS: {
        code: "TRANS",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: TRC
     */
    TRC: {
        code: "TRC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: VALID
     */
    VALID: {
        code: "VALID",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: VERF
     */
    VERF: {
        code: "VERF",
        system: "http://terminology.hl7.org/CodeSystem/contractsignertypecodes",
    },
    /**
     * Code: WIT
     */
    WIT: {
        code: "WIT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
};
//# sourceMappingURL=data:application/json;base64,