// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-modifier-code|4.3.0
/**
 * A supported modifier for a search parameter.
 */
export const SearchModifierCodes = {
    /**
     * above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
     */
    Above: "above",
    /**
     * below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
     */
    Below: "below",
    /**
     * contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
     */
    Contains: "contains",
    /**
     * exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
     */
    Exact: "exact",
    /**
     * identifier: The search parameter applies to the identifier on the resource, not the reference.
     */
    Identifier: "identifier",
    /**
     * in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
     */
    In: "in",
    /**
     * missing: The search parameter returns resources that have a value or not.
     */
    Missing: "missing",
    /**
     * not: The search parameter returns resources that do not contain a match.
     */
    Not: "not",
    /**
     * not-in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
     */
    NotIn: "not-in",
    /**
     * ofType: The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
     */
    OfType: "ofType",
    /**
     * text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
     */
    Text: "text",
    /**
     * type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
     */
    Type: "type",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoTW9kaWZpZXJDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU2VhcmNoTW9kaWZpZXJDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQzs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFlBQVk7SUFDeEI7O09BRUc7SUFDSCxFQUFFLEVBQUUsSUFBSTtJQUNSOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxHQUFHLEVBQUUsS0FBSztJQUNWOztPQUVHO0lBQ0gsS0FBSyxFQUFFLFFBQVE7SUFDZjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc2VhcmNoLW1vZGlmaWVyLWNvZGV8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBBIHN1cHBvcnRlZCBtb2RpZmllciBmb3IgYSBzZWFyY2ggcGFyYW1ldGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNlYXJjaE1vZGlmaWVyQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYWJvdmU6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIHRlc3RzIHdoZXRoZXIgdGhlIHZhbHVlIGluIGEgcmVzb3VyY2Ugc3Vic3VtZXMgdGhlIHNwZWNpZmllZCB2YWx1ZSAoaXMtYSwgb3IgaGllcmFyY2hpY2FsIHJlbGF0aW9uc2hpcHMpLlxyXG4gICAqL1xyXG4gIEFib3ZlOiBcImFib3ZlXCIsXHJcbiAgLyoqXHJcbiAgICogYmVsb3c6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIHRlc3RzIHdoZXRoZXIgdGhlIHZhbHVlIGluIGEgcmVzb3VyY2UgaXMgc3Vic3VtZWQgYnkgdGhlIHNwZWNpZmllZCB2YWx1ZSAoaXMtYSwgb3IgaGllcmFyY2hpY2FsIHJlbGF0aW9uc2hpcHMpLlxyXG4gICAqL1xyXG4gIEJlbG93OiBcImJlbG93XCIsXHJcbiAgLyoqXHJcbiAgICogY29udGFpbnM6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIHJldHVybnMgcmVzb3VyY2VzIHRoYXQgaW5jbHVkZSB0aGUgc3VwcGxpZWQgcGFyYW1ldGVyIHZhbHVlIGFueXdoZXJlIHdpdGhpbiB0aGUgZmllbGQgYmVpbmcgc2VhcmNoZWQuXHJcbiAgICovXHJcbiAgQ29udGFpbnM6IFwiY29udGFpbnNcIixcclxuICAvKipcclxuICAgKiBleGFjdDogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBoYXZlIGEgdmFsdWUgdGhhdCBleGFjdGx5IG1hdGNoZXMgdGhlIHN1cHBsaWVkIHBhcmFtZXRlciAodGhlIHdob2xlIHN0cmluZywgaW5jbHVkaW5nIGNhc2luZyBhbmQgYWNjZW50cykuXHJcbiAgICovXHJcbiAgRXhhY3Q6IFwiZXhhY3RcIixcclxuICAvKipcclxuICAgKiBpZGVudGlmaWVyOiBUaGUgc2VhcmNoIHBhcmFtZXRlciBhcHBsaWVzIHRvIHRoZSBpZGVudGlmaWVyIG9uIHRoZSByZXNvdXJjZSwgbm90IHRoZSByZWZlcmVuY2UuXHJcbiAgICovXHJcbiAgSWRlbnRpZmllcjogXCJpZGVudGlmaWVyXCIsXHJcbiAgLyoqXHJcbiAgICogaW46IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGEgVVJJIChyZWxhdGl2ZSBvciBhYnNvbHV0ZSkgdGhhdCBpZGVudGlmaWVzIGEgdmFsdWUgc2V0LCBhbmQgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgY29kaW5nIGlzIGluIHRoZSBzcGVjaWZpZWQgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIEluOiBcImluXCIsXHJcbiAgLyoqXHJcbiAgICogbWlzc2luZzogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBoYXZlIGEgdmFsdWUgb3Igbm90LlxyXG4gICAqL1xyXG4gIE1pc3Npbmc6IFwibWlzc2luZ1wiLFxyXG4gIC8qKlxyXG4gICAqIG5vdDogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBkbyBub3QgY29udGFpbiBhIG1hdGNoLlxyXG4gICAqL1xyXG4gIE5vdDogXCJub3RcIixcclxuICAvKipcclxuICAgKiBub3QtaW46IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGEgVVJJIChyZWxhdGl2ZSBvciBhYnNvbHV0ZSkgdGhhdCBpZGVudGlmaWVzIGEgdmFsdWUgc2V0LCBhbmQgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgY29kaW5nIGlzIG5vdCBpbiB0aGUgc3BlY2lmaWVkIHZhbHVlIHNldC5cclxuICAgKi9cclxuICBOb3RJbjogXCJub3QtaW5cIixcclxuICAvKipcclxuICAgKiBvZlR5cGU6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGhhcyB0aGUgZm9ybWF0IHN5c3RlbXxjb2RlfHZhbHVlLCB3aGVyZSB0aGUgc3lzdGVtIGFuZCBjb2RlIHJlZmVyIHRvIGFuIElkZW50aWZpZXIudHlwZS5jb2Rpbmcuc3lzdGVtIGFuZCAuY29kZSwgYW5kIG1hdGNoIGlmIGFueSBvZiB0aGUgdHlwZSBjb2RlcyBtYXRjaC4gQWxsIDMgcGFydHMgbXVzdCBiZSBwcmVzZW50LlxyXG4gICAqL1xyXG4gIE9mVHlwZTogXCJvZlR5cGVcIixcclxuICAvKipcclxuICAgKiB0ZXh0OiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBwcm9jZXNzZWQgYXMgYSBzdHJpbmcgdGhhdCBzZWFyY2hlcyB0ZXh0IGFzc29jaWF0ZWQgd2l0aCB0aGUgY29kZS92YWx1ZSAtIGVpdGhlciBDb2RlYWJsZUNvbmNlcHQudGV4dCwgQ29kaW5nLmRpc3BsYXksIG9yIElkZW50aWZpZXIudHlwZS50ZXh0LlxyXG4gICAqL1xyXG4gIFRleHQ6IFwidGV4dFwiLFxyXG4gIC8qKlxyXG4gICAqIHR5cGU6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIG9ubHkgYXBwbGllcyB0byB0aGUgUmVzb3VyY2UgVHlwZSBzcGVjaWZpZWQgYXMgYSBtb2RpZmllciAoZS5nLiB0aGUgbW9kaWZpZXIgaXMgbm90IGFjdHVhbGx5IDp0eXBlLCBidXQgOlBhdGllbnQgZXRjLikuXHJcbiAgICovXHJcbiAgVHlwZTogXCJ0eXBlXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQSBzdXBwb3J0ZWQgbW9kaWZpZXIgZm9yIGEgc2VhcmNoIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNlYXJjaE1vZGlmaWVyQ29kZVR5cGUgPSB0eXBlb2YgU2VhcmNoTW9kaWZpZXJDb2Rlc1trZXlvZiB0eXBlb2YgU2VhcmNoTW9kaWZpZXJDb2Rlc107XHJcbiJdfQ==