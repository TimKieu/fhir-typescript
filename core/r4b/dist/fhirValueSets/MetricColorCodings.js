// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/metric-color|4.3.0
/**
 * Describes the typical color of representation.
 */
export const MetricColorCodings = {
    /**
     * black: Color for representation - black.
     */
    ColorBlack: {
        display: "Color Black",
        code: "black",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * blue: Color for representation - blue.
     */
    ColorBlue: {
        display: "Color Blue",
        code: "blue",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * cyan: Color for representation - cyan.
     */
    ColorCyan: {
        display: "Color Cyan",
        code: "cyan",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * green: Color for representation - green.
     */
    ColorGreen: {
        display: "Color Green",
        code: "green",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * magenta: Color for representation - magenta.
     */
    ColorMagenta: {
        display: "Color Magenta",
        code: "magenta",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * red: Color for representation - red.
     */
    ColorRed: {
        display: "Color Red",
        code: "red",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * white: Color for representation - white.
     */
    ColorWhite: {
        display: "Color White",
        code: "white",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * yellow: Color for representation - yellow.
     */
    ColorYellow: {
        display: "Color Yellow",
        code: "yellow",
        system: "http://hl7.org/fhir/metric-color",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0cmljQ29sb3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZXRyaWNDb2xvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBMENqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWV0cmljLWNvbG9yfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSB0eXBpY2FsIGNvbG9yIG9mIHJlcHJlc2VudGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWV0cmljQ29sb3JDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJsYWNrOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBibGFjay5cclxuICAgKi9cclxuICBDb2xvckJsYWNrOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGJsdWU6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIGJsdWUuXHJcbiAgICovXHJcbiAgQ29sb3JCbHVlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGN5YW46IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIGN5YW4uXHJcbiAgICovXHJcbiAgQ29sb3JDeWFuOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGdyZWVuOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBncmVlbi5cclxuICAgKi9cclxuICBDb2xvckdyZWVuOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG1hZ2VudGE6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIG1hZ2VudGEuXHJcbiAgICovXHJcbiAgQ29sb3JNYWdlbnRhOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlZDogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gcmVkLlxyXG4gICAqL1xyXG4gIENvbG9yUmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHdoaXRlOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSB3aGl0ZS5cclxuICAgKi9cclxuICBDb2xvcldoaXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHllbGxvdzogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0geWVsbG93LlxyXG4gICAqL1xyXG4gIENvbG9yWWVsbG93OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSB0eXBpY2FsIGNvbG9yIG9mIHJlcHJlc2VudGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1ldHJpY0NvbG9yQ29kaW5nczpNZXRyaWNDb2xvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmxhY2s6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIGJsYWNrLlxyXG4gICAqL1xyXG4gIENvbG9yQmxhY2s6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgQmxhY2tcIixcclxuICAgIGNvZGU6IFwiYmxhY2tcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYmx1ZTogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gYmx1ZS5cclxuICAgKi9cclxuICBDb2xvckJsdWU6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgQmx1ZVwiLFxyXG4gICAgY29kZTogXCJibHVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGN5YW46IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIGN5YW4uXHJcbiAgICovXHJcbiAgQ29sb3JDeWFuOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIEN5YW5cIixcclxuICAgIGNvZGU6IFwiY3lhblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBncmVlbjogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gZ3JlZW4uXHJcbiAgICovXHJcbiAgQ29sb3JHcmVlbjoge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBHcmVlblwiLFxyXG4gICAgY29kZTogXCJncmVlblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtYWdlbnRhOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBtYWdlbnRhLlxyXG4gICAqL1xyXG4gIENvbG9yTWFnZW50YToge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBNYWdlbnRhXCIsXHJcbiAgICBjb2RlOiBcIm1hZ2VudGFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVkOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSByZWQuXHJcbiAgICovXHJcbiAgQ29sb3JSZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgUmVkXCIsXHJcbiAgICBjb2RlOiBcInJlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3aGl0ZTogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gd2hpdGUuXHJcbiAgICovXHJcbiAgQ29sb3JXaGl0ZToge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBXaGl0ZVwiLFxyXG4gICAgY29kZTogXCJ3aGl0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB5ZWxsb3c6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIHllbGxvdy5cclxuICAgKi9cclxuICBDb2xvclllbGxvdzoge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBZZWxsb3dcIixcclxuICAgIGNvZGU6IFwieWVsbG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=