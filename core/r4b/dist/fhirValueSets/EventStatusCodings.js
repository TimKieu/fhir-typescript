// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/event-status|4.3.0
/**
 * Codes identifying the lifecycle stage of an event.
 */
export const EventStatusCodings = {
    /**
     * completed: The event has now concluded.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * entered-in-error: This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "stopped" rather than "entered-in-error".).
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * in-progress: The event is currently occurring.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * not-done: The event was terminated prior to any activity beyond preparation.  I.e. The 'main' activity has not yet begun.  The boundary between preparatory and the 'main' activity is context-specific.
     */
    NotDone: {
        display: "Not Done",
        code: "not-done",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * on-hold: The event has been temporarily stopped but is expected to resume in the future.
     */
    OnHold: {
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * preparation: The core event has not started yet, but some staging activities have begun (e.g. surgical suite preparation).  Preparation stages may be tracked for billing purposes.
     */
    Preparation: {
        display: "Preparation",
        code: "preparation",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * stopped: The event was terminated prior to the full completion of the intended activity but after at least some of the 'main' activity (beyond preparation) has occurred.
     */
    Stopped: {
        display: "Stopped",
        code: "stopped",
        system: "http://hl7.org/fhir/event-status",
    },
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this event.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/event-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FdmVudFN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBMENqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZXZlbnQtc3RhdHVzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgaWRlbnRpZnlpbmcgdGhlIGxpZmVjeWNsZSBzdGFnZSBvZiBhbiBldmVudC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEV2ZW50U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSBldmVudCBoYXMgbm93IGNvbmNsdWRlZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcInN0b3BwZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgZXZlbnQgaXMgY3VycmVudGx5IG9jY3VycmluZy5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdC1kb25lOiBUaGUgZXZlbnQgd2FzIHRlcm1pbmF0ZWQgcHJpb3IgdG8gYW55IGFjdGl2aXR5IGJleW9uZCBwcmVwYXJhdGlvbi4gIEkuZS4gVGhlICdtYWluJyBhY3Rpdml0eSBoYXMgbm90IHlldCBiZWd1bi4gIFRoZSBib3VuZGFyeSBiZXR3ZWVuIHByZXBhcmF0b3J5IGFuZCB0aGUgJ21haW4nIGFjdGl2aXR5IGlzIGNvbnRleHQtc3BlY2lmaWMuXHJcbiAgICovXHJcbiAgTm90RG9uZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbi1ob2xkOiBUaGUgZXZlbnQgaGFzIGJlZW4gdGVtcG9yYXJpbHkgc3RvcHBlZCBidXQgaXMgZXhwZWN0ZWQgdG8gcmVzdW1lIGluIHRoZSBmdXR1cmUuXHJcbiAgICovXHJcbiAgT25Ib2xkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByZXBhcmF0aW9uOiBUaGUgY29yZSBldmVudCBoYXMgbm90IHN0YXJ0ZWQgeWV0LCBidXQgc29tZSBzdGFnaW5nIGFjdGl2aXRpZXMgaGF2ZSBiZWd1biAoZS5nLiBzdXJnaWNhbCBzdWl0ZSBwcmVwYXJhdGlvbikuICBQcmVwYXJhdGlvbiBzdGFnZXMgbWF5IGJlIHRyYWNrZWQgZm9yIGJpbGxpbmcgcHVycG9zZXMuXHJcbiAgICovXHJcbiAgUHJlcGFyYXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3RvcHBlZDogVGhlIGV2ZW50IHdhcyB0ZXJtaW5hdGVkIHByaW9yIHRvIHRoZSBmdWxsIGNvbXBsZXRpb24gb2YgdGhlIGludGVuZGVkIGFjdGl2aXR5IGJ1dCBhZnRlciBhdCBsZWFzdCBzb21lIG9mIHRoZSAnbWFpbicgYWN0aXZpdHkgKGJleW9uZCBwcmVwYXJhdGlvbikgaGFzIG9jY3VycmVkLlxyXG4gICAqL1xyXG4gIFN0b3BwZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgZXZlbnQuICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCAgYnV0IHRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoLlxyXG4gICAqL1xyXG4gIFVua25vd246IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpZGVudGlmeWluZyB0aGUgbGlmZWN5Y2xlIHN0YWdlIG9mIGFuIGV2ZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEV2ZW50U3RhdHVzQ29kaW5nczpFdmVudFN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgZXZlbnQgaGFzIG5vdyBjb25jbHVkZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2V2ZW50LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcInN0b3BwZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIGV2ZW50IGlzIGN1cnJlbnRseSBvY2N1cnJpbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3QtZG9uZTogVGhlIGV2ZW50IHdhcyB0ZXJtaW5hdGVkIHByaW9yIHRvIGFueSBhY3Rpdml0eSBiZXlvbmQgcHJlcGFyYXRpb24uICBJLmUuIFRoZSAnbWFpbicgYWN0aXZpdHkgaGFzIG5vdCB5ZXQgYmVndW4uICBUaGUgYm91bmRhcnkgYmV0d2VlbiBwcmVwYXJhdG9yeSBhbmQgdGhlICdtYWluJyBhY3Rpdml0eSBpcyBjb250ZXh0LXNwZWNpZmljLlxyXG4gICAqL1xyXG4gIE5vdERvbmU6IHtcclxuICAgIGRpc3BsYXk6IFwiTm90IERvbmVcIixcclxuICAgIGNvZGU6IFwibm90LWRvbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2V2ZW50LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGhlIGV2ZW50IGhhcyBiZWVuIHRlbXBvcmFyaWx5IHN0b3BwZWQgYnV0IGlzIGV4cGVjdGVkIHRvIHJlc3VtZSBpbiB0aGUgZnV0dXJlLlxyXG4gICAqL1xyXG4gIE9uSG9sZDoge1xyXG4gICAgZGlzcGxheTogXCJPbiBIb2xkXCIsXHJcbiAgICBjb2RlOiBcIm9uLWhvbGRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2V2ZW50LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJlcGFyYXRpb246IFRoZSBjb3JlIGV2ZW50IGhhcyBub3Qgc3RhcnRlZCB5ZXQsIGJ1dCBzb21lIHN0YWdpbmcgYWN0aXZpdGllcyBoYXZlIGJlZ3VuIChlLmcuIHN1cmdpY2FsIHN1aXRlIHByZXBhcmF0aW9uKS4gIFByZXBhcmF0aW9uIHN0YWdlcyBtYXkgYmUgdHJhY2tlZCBmb3IgYmlsbGluZyBwdXJwb3Nlcy5cclxuICAgKi9cclxuICBQcmVwYXJhdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJQcmVwYXJhdGlvblwiLFxyXG4gICAgY29kZTogXCJwcmVwYXJhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBUaGUgZXZlbnQgd2FzIHRlcm1pbmF0ZWQgcHJpb3IgdG8gdGhlIGZ1bGwgY29tcGxldGlvbiBvZiB0aGUgaW50ZW5kZWQgYWN0aXZpdHkgYnV0IGFmdGVyIGF0IGxlYXN0IHNvbWUgb2YgdGhlICdtYWluJyBhY3Rpdml0eSAoYmV5b25kIHByZXBhcmF0aW9uKSBoYXMgb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgU3RvcHBlZDoge1xyXG4gICAgZGlzcGxheTogXCJTdG9wcGVkXCIsXHJcbiAgICBjb2RlOiBcInN0b3BwZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2V2ZW50LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgZXZlbnQuICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCAgYnV0IHRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoLlxyXG4gICAqL1xyXG4gIFVua25vd246IHtcclxuICAgIGRpc3BsYXk6IFwiVW5rbm93blwiLFxyXG4gICAgY29kZTogXCJ1bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ldmVudC1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=