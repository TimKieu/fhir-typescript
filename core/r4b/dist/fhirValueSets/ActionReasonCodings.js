// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-reason-code|4.3.0
/**
 * Provides examples of reasons for actions to be performed.
 */
export const ActionReasonCodings = {
    /**
     * care-gap: The action should be performed to address a detected care gap.
     */
    CareGapDetected: {
        display: "Care gap detected",
        code: "care-gap",
        system: "http://terminology.hl7.org/CodeSystem/action-reason-code",
    },
    /**
     * drug-drug-interaction: The action should be performed to address a detected potential drug-drug interaction.
     */
    DrugDrugInteraction: {
        display: "Drug-drug interaction",
        code: "drug-drug-interaction",
        system: "http://terminology.hl7.org/CodeSystem/action-reason-code",
    },
    /**
     * off-pathway: The action should be performed because the patient was determined to be off pathway.
     */
    OffPathway: {
        display: "Off pathway",
        code: "off-pathway",
        system: "http://terminology.hl7.org/CodeSystem/action-reason-code",
    },
    /**
     * quality-measure: The action should be performed to bring the patient's care in line with a quality measure.
     */
    QualityMeasure: {
        display: "Quality measure",
        code: "quality-measure",
        system: "http://terminology.hl7.org/CodeSystem/action-reason-code",
    },
    /**
     * risk-assessment: The action should be performed based on a particular risk assessment.
     */
    RiskAssessment: {
        display: "Risk assessment",
        code: "risk-assessment",
        system: "http://terminology.hl7.org/CodeSystem/action-reason-code",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uUmVhc29uQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQWN0aW9uUmVhc29uQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx1RUFBdUU7QUE4QnZFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRTtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkU7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWN0aW9uLXJlYXNvbi1jb2RlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgZXhhbXBsZXMgb2YgcmVhc29ucyBmb3IgYWN0aW9ucyB0byBiZSBwZXJmb3JtZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25SZWFzb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhcmUtZ2FwOiBUaGUgYWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgdG8gYWRkcmVzcyBhIGRldGVjdGVkIGNhcmUgZ2FwLlxyXG4gICAqL1xyXG4gIENhcmVHYXBEZXRlY3RlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkcnVnLWRydWctaW50ZXJhY3Rpb246IFRoZSBhY3Rpb24gc2hvdWxkIGJlIHBlcmZvcm1lZCB0byBhZGRyZXNzIGEgZGV0ZWN0ZWQgcG90ZW50aWFsIGRydWctZHJ1ZyBpbnRlcmFjdGlvbi5cclxuICAgKi9cclxuICBEcnVnRHJ1Z0ludGVyYWN0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9mZi1wYXRod2F5OiBUaGUgYWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgYmVjYXVzZSB0aGUgcGF0aWVudCB3YXMgZGV0ZXJtaW5lZCB0byBiZSBvZmYgcGF0aHdheS5cclxuICAgKi9cclxuICBPZmZQYXRod2F5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHF1YWxpdHktbWVhc3VyZTogVGhlIGFjdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkIHRvIGJyaW5nIHRoZSBwYXRpZW50J3MgY2FyZSBpbiBsaW5lIHdpdGggYSBxdWFsaXR5IG1lYXN1cmUuXHJcbiAgICovXHJcbiAgUXVhbGl0eU1lYXN1cmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmlzay1hc3Nlc3NtZW50OiBUaGUgYWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgYmFzZWQgb24gYSBwYXJ0aWN1bGFyIHJpc2sgYXNzZXNzbWVudC5cclxuICAgKi9cclxuICBSaXNrQXNzZXNzbWVudDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFByb3ZpZGVzIGV4YW1wbGVzIG9mIHJlYXNvbnMgZm9yIGFjdGlvbnMgdG8gYmUgcGVyZm9ybWVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFjdGlvblJlYXNvbkNvZGluZ3M6QWN0aW9uUmVhc29uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYXJlLWdhcDogVGhlIGFjdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkIHRvIGFkZHJlc3MgYSBkZXRlY3RlZCBjYXJlIGdhcC5cclxuICAgKi9cclxuICBDYXJlR2FwRGV0ZWN0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2FyZSBnYXAgZGV0ZWN0ZWRcIixcclxuICAgIGNvZGU6IFwiY2FyZS1nYXBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FjdGlvbi1yZWFzb24tY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZHJ1Zy1kcnVnLWludGVyYWN0aW9uOiBUaGUgYWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgdG8gYWRkcmVzcyBhIGRldGVjdGVkIHBvdGVudGlhbCBkcnVnLWRydWcgaW50ZXJhY3Rpb24uXHJcbiAgICovXHJcbiAgRHJ1Z0RydWdJbnRlcmFjdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJEcnVnLWRydWcgaW50ZXJhY3Rpb25cIixcclxuICAgIGNvZGU6IFwiZHJ1Zy1kcnVnLWludGVyYWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hY3Rpb24tcmVhc29uLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9mZi1wYXRod2F5OiBUaGUgYWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgYmVjYXVzZSB0aGUgcGF0aWVudCB3YXMgZGV0ZXJtaW5lZCB0byBiZSBvZmYgcGF0aHdheS5cclxuICAgKi9cclxuICBPZmZQYXRod2F5OiB7XHJcbiAgICBkaXNwbGF5OiBcIk9mZiBwYXRod2F5XCIsXHJcbiAgICBjb2RlOiBcIm9mZi1wYXRod2F5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hY3Rpb24tcmVhc29uLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHF1YWxpdHktbWVhc3VyZTogVGhlIGFjdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkIHRvIGJyaW5nIHRoZSBwYXRpZW50J3MgY2FyZSBpbiBsaW5lIHdpdGggYSBxdWFsaXR5IG1lYXN1cmUuXHJcbiAgICovXHJcbiAgUXVhbGl0eU1lYXN1cmU6IHtcclxuICAgIGRpc3BsYXk6IFwiUXVhbGl0eSBtZWFzdXJlXCIsXHJcbiAgICBjb2RlOiBcInF1YWxpdHktbWVhc3VyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWN0aW9uLXJlYXNvbi1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByaXNrLWFzc2Vzc21lbnQ6IFRoZSBhY3Rpb24gc2hvdWxkIGJlIHBlcmZvcm1lZCBiYXNlZCBvbiBhIHBhcnRpY3VsYXIgcmlzayBhc3Nlc3NtZW50LlxyXG4gICAqL1xyXG4gIFJpc2tBc3Nlc3NtZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIlJpc2sgYXNzZXNzbWVudFwiLFxyXG4gICAgY29kZTogXCJyaXNrLWFzc2Vzc21lbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FjdGlvbi1yZWFzb24tY29kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==