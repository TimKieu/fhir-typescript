// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/communication-not-done-reason|4.3.0
/**
 * Codes for the reason why a communication did not happen.
 */
export const CommunicationNotDoneReasonCodings = {
    /**
     * family-objection: The communication was not done due to a family objection.
     */
    FamilyObjection: {
        display: "Family Objection",
        code: "family-objection",
        system: "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
    },
    /**
     * invalid-phone-number: The communication was not done due to an invalid phone number.
     */
    InvalidPhoneNumber: {
        display: "Invalid Phone Number",
        code: "invalid-phone-number",
        system: "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
    },
    /**
     * patient-objection: The communication was not done due to a patient objection.
     */
    PatientObjection: {
        display: "Patient Objection",
        code: "patient-objection",
        system: "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
    },
    /**
     * recipient-unavailable: The communication was not done due to the recipient being unavailable.
     */
    RecipientUnavailable: {
        display: "Recipient Unavailable",
        code: "recipient-unavailable",
        system: "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
    },
    /**
     * system-error: The communication was not done due to a system error.
     */
    SystemError: {
        display: "System Error",
        code: "system-error",
        system: "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
    },
    /**
     * unknown: The communication was not done due to an unknown reason.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbXVuaWNhdGlvbk5vdERvbmVSZWFzb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db21tdW5pY2F0aW9uTm90RG9uZVJlYXNvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsa0ZBQWtGO0FBa0NsRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUF3QztJQUNwRjs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0lBQ0Q7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLHFFQUFxRTtLQUM5RTtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSxxRUFBcUU7S0FDOUU7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxxRUFBcUU7S0FDOUU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb21tdW5pY2F0aW9uLW5vdC1kb25lLXJlYXNvbnw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGZvciB0aGUgcmVhc29uIHdoeSBhIGNvbW11bmljYXRpb24gZGlkIG5vdCBoYXBwZW4uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb21tdW5pY2F0aW9uTm90RG9uZVJlYXNvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmFtaWx5LW9iamVjdGlvbjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhIGZhbWlseSBvYmplY3Rpb24uXHJcbiAgICovXHJcbiAgRmFtaWx5T2JqZWN0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGludmFsaWQtcGhvbmUtbnVtYmVyOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGFuIGludmFsaWQgcGhvbmUgbnVtYmVyLlxyXG4gICAqL1xyXG4gIEludmFsaWRQaG9uZU51bWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXRpZW50LW9iamVjdGlvbjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhIHBhdGllbnQgb2JqZWN0aW9uLlxyXG4gICAqL1xyXG4gIFBhdGllbnRPYmplY3Rpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVjaXBpZW50LXVuYXZhaWxhYmxlOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIHRoZSByZWNpcGllbnQgYmVpbmcgdW5hdmFpbGFibGUuXHJcbiAgICovXHJcbiAgUmVjaXBpZW50VW5hdmFpbGFibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3lzdGVtLWVycm9yOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGEgc3lzdGVtIGVycm9yLlxyXG4gICAqL1xyXG4gIFN5c3RlbUVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSBjb21tdW5pY2F0aW9uIHdhcyBub3QgZG9uZSBkdWUgdG8gYW4gdW5rbm93biByZWFzb24uXHJcbiAgICovXHJcbiAgVW5rbm93bjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvZGVzIGZvciB0aGUgcmVhc29uIHdoeSBhIGNvbW11bmljYXRpb24gZGlkIG5vdCBoYXBwZW4uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29tbXVuaWNhdGlvbk5vdERvbmVSZWFzb25Db2RpbmdzOkNvbW11bmljYXRpb25Ob3REb25lUmVhc29uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBmYW1pbHktb2JqZWN0aW9uOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGEgZmFtaWx5IG9iamVjdGlvbi5cclxuICAgKi9cclxuICBGYW1pbHlPYmplY3Rpb246IHtcclxuICAgIGRpc3BsYXk6IFwiRmFtaWx5IE9iamVjdGlvblwiLFxyXG4gICAgY29kZTogXCJmYW1pbHktb2JqZWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb21tdW5pY2F0aW9uLW5vdC1kb25lLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW52YWxpZC1waG9uZS1udW1iZXI6IFRoZSBjb21tdW5pY2F0aW9uIHdhcyBub3QgZG9uZSBkdWUgdG8gYW4gaW52YWxpZCBwaG9uZSBudW1iZXIuXHJcbiAgICovXHJcbiAgSW52YWxpZFBob25lTnVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkludmFsaWQgUGhvbmUgTnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcImludmFsaWQtcGhvbmUtbnVtYmVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb21tdW5pY2F0aW9uLW5vdC1kb25lLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGF0aWVudC1vYmplY3Rpb246IFRoZSBjb21tdW5pY2F0aW9uIHdhcyBub3QgZG9uZSBkdWUgdG8gYSBwYXRpZW50IG9iamVjdGlvbi5cclxuICAgKi9cclxuICBQYXRpZW50T2JqZWN0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBhdGllbnQgT2JqZWN0aW9uXCIsXHJcbiAgICBjb2RlOiBcInBhdGllbnQtb2JqZWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb21tdW5pY2F0aW9uLW5vdC1kb25lLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVjaXBpZW50LXVuYXZhaWxhYmxlOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIHRoZSByZWNpcGllbnQgYmVpbmcgdW5hdmFpbGFibGUuXHJcbiAgICovXHJcbiAgUmVjaXBpZW50VW5hdmFpbGFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVjaXBpZW50IFVuYXZhaWxhYmxlXCIsXHJcbiAgICBjb2RlOiBcInJlY2lwaWVudC11bmF2YWlsYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29tbXVuaWNhdGlvbi1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN5c3RlbS1lcnJvcjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhIHN5c3RlbSBlcnJvci5cclxuICAgKi9cclxuICBTeXN0ZW1FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJTeXN0ZW0gRXJyb3JcIixcclxuICAgIGNvZGU6IFwic3lzdGVtLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb21tdW5pY2F0aW9uLW5vdC1kb25lLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhbiB1bmtub3duIHJlYXNvbi5cclxuICAgKi9cclxuICBVbmtub3duOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29tbXVuaWNhdGlvbi1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=