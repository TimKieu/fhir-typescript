// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/invoice-priceComponentType|4.3.0
/**
 * Codes indicating the kind of the price component.
 */
export const InvoicePriceComponentTypeCodings = {
    /**
     * base: the amount is the base price used for calculating the total price before applying surcharges, discount or taxes.
     */
    BasePrice: {
        display: "base price",
        code: "base",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * deduction: the amount is a deduction applied on the base price.
     */
    Deduction: {
        display: "deduction",
        code: "deduction",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * discount: the amount is a discount applied on the base price.
     */
    Discount: {
        display: "discount",
        code: "discount",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * informational: the amount is of informational character, it has not been applied in the calculation of the total price.
     */
    Informational: {
        display: "informational",
        code: "informational",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * surcharge: the amount is a surcharge applied on the base price.
     */
    Surcharge: {
        display: "surcharge",
        code: "surcharge",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * tax: the amount is the tax component of the total price.
     */
    Tax: {
        display: "tax",
        code: "tax",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW52b2ljZVByaWNlQ29tcG9uZW50VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0ludm9pY2VQcmljZUNvbXBvbmVudFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLCtFQUErRTtBQWtDL0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBdUM7SUFDbEY7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvaW52b2ljZS1wcmljZUNvbXBvbmVudFR5cGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpbmRpY2F0aW5nIHRoZSBraW5kIG9mIHRoZSBwcmljZSBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbnZvaWNlUHJpY2VDb21wb25lbnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBiYXNlOiB0aGUgYW1vdW50IGlzIHRoZSBiYXNlIHByaWNlIHVzZWQgZm9yIGNhbGN1bGF0aW5nIHRoZSB0b3RhbCBwcmljZSBiZWZvcmUgYXBwbHlpbmcgc3VyY2hhcmdlcywgZGlzY291bnQgb3IgdGF4ZXMuXHJcbiAgICovXHJcbiAgQmFzZVByaWNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRlZHVjdGlvbjogdGhlIGFtb3VudCBpcyBhIGRlZHVjdGlvbiBhcHBsaWVkIG9uIHRoZSBiYXNlIHByaWNlLlxyXG4gICAqL1xyXG4gIERlZHVjdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkaXNjb3VudDogdGhlIGFtb3VudCBpcyBhIGRpc2NvdW50IGFwcGxpZWQgb24gdGhlIGJhc2UgcHJpY2UuXHJcbiAgICovXHJcbiAgRGlzY291bnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW5mb3JtYXRpb25hbDogdGhlIGFtb3VudCBpcyBvZiBpbmZvcm1hdGlvbmFsIGNoYXJhY3RlciwgaXQgaGFzIG5vdCBiZWVuIGFwcGxpZWQgaW4gdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSB0b3RhbCBwcmljZS5cclxuICAgKi9cclxuICBJbmZvcm1hdGlvbmFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1cmNoYXJnZTogdGhlIGFtb3VudCBpcyBhIHN1cmNoYXJnZSBhcHBsaWVkIG9uIHRoZSBiYXNlIHByaWNlLlxyXG4gICAqL1xyXG4gIFN1cmNoYXJnZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0YXg6IHRoZSBhbW91bnQgaXMgdGhlIHRheCBjb21wb25lbnQgb2YgdGhlIHRvdGFsIHByaWNlLlxyXG4gICAqL1xyXG4gIFRheDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvZGVzIGluZGljYXRpbmcgdGhlIGtpbmQgb2YgdGhlIHByaWNlIGNvbXBvbmVudC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbnZvaWNlUHJpY2VDb21wb25lbnRUeXBlQ29kaW5nczpJbnZvaWNlUHJpY2VDb21wb25lbnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBiYXNlOiB0aGUgYW1vdW50IGlzIHRoZSBiYXNlIHByaWNlIHVzZWQgZm9yIGNhbGN1bGF0aW5nIHRoZSB0b3RhbCBwcmljZSBiZWZvcmUgYXBwbHlpbmcgc3VyY2hhcmdlcywgZGlzY291bnQgb3IgdGF4ZXMuXHJcbiAgICovXHJcbiAgQmFzZVByaWNlOiB7XHJcbiAgICBkaXNwbGF5OiBcImJhc2UgcHJpY2VcIixcclxuICAgIGNvZGU6IFwiYmFzZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaW52b2ljZS1wcmljZUNvbXBvbmVudFR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRlZHVjdGlvbjogdGhlIGFtb3VudCBpcyBhIGRlZHVjdGlvbiBhcHBsaWVkIG9uIHRoZSBiYXNlIHByaWNlLlxyXG4gICAqL1xyXG4gIERlZHVjdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJkZWR1Y3Rpb25cIixcclxuICAgIGNvZGU6IFwiZGVkdWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGlzY291bnQ6IHRoZSBhbW91bnQgaXMgYSBkaXNjb3VudCBhcHBsaWVkIG9uIHRoZSBiYXNlIHByaWNlLlxyXG4gICAqL1xyXG4gIERpc2NvdW50OiB7XHJcbiAgICBkaXNwbGF5OiBcImRpc2NvdW50XCIsXHJcbiAgICBjb2RlOiBcImRpc2NvdW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW5mb3JtYXRpb25hbDogdGhlIGFtb3VudCBpcyBvZiBpbmZvcm1hdGlvbmFsIGNoYXJhY3RlciwgaXQgaGFzIG5vdCBiZWVuIGFwcGxpZWQgaW4gdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSB0b3RhbCBwcmljZS5cclxuICAgKi9cclxuICBJbmZvcm1hdGlvbmFsOiB7XHJcbiAgICBkaXNwbGF5OiBcImluZm9ybWF0aW9uYWxcIixcclxuICAgIGNvZGU6IFwiaW5mb3JtYXRpb25hbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaW52b2ljZS1wcmljZUNvbXBvbmVudFR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN1cmNoYXJnZTogdGhlIGFtb3VudCBpcyBhIHN1cmNoYXJnZSBhcHBsaWVkIG9uIHRoZSBiYXNlIHByaWNlLlxyXG4gICAqL1xyXG4gIFN1cmNoYXJnZToge1xyXG4gICAgZGlzcGxheTogXCJzdXJjaGFyZ2VcIixcclxuICAgIGNvZGU6IFwic3VyY2hhcmdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdGF4OiB0aGUgYW1vdW50IGlzIHRoZSB0YXggY29tcG9uZW50IG9mIHRoZSB0b3RhbCBwcmljZS5cclxuICAgKi9cclxuICBUYXg6IHtcclxuICAgIGRpc3BsYXk6IFwidGF4XCIsXHJcbiAgICBjb2RlOiBcInRheFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaW52b2ljZS1wcmljZUNvbXBvbmVudFR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=