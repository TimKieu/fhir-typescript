// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/imagingstudy-status|4.3.0
/**
 * The status of the ImagingStudy.
 */
export const ImagingstudyStatusCodings = {
    /**
     * available: At least one instance has been associated with this imaging study.
     */
    Available: {
        display: "Available",
        code: "available",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * cancelled: The imaging study is unavailable because the imaging study was not started or not completed (also sometimes called "aborted").
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * entered-in-error: The imaging study has been withdrawn following a previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * registered: The existence of the imaging study is registered, but there is nothing yet available.
     */
    Registered: {
        display: "Registered",
        code: "registered",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * unknown: The system does not know which of the status values currently applies for this request. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2luZ3N0dWR5U3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSW1hZ2luZ3N0dWR5U3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx3RUFBd0U7QUE4QnhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2ltYWdpbmdzdHVkeS1zdGF0dXN8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgc3RhdHVzIG9mIHRoZSBJbWFnaW5nU3R1ZHkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbWFnaW5nc3R1ZHlTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGF2YWlsYWJsZTogQXQgbGVhc3Qgb25lIGluc3RhbmNlIGhhcyBiZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGltYWdpbmcgc3R1ZHkuXHJcbiAgICovXHJcbiAgQXZhaWxhYmxlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIGltYWdpbmcgc3R1ZHkgaXMgdW5hdmFpbGFibGUgYmVjYXVzZSB0aGUgaW1hZ2luZyBzdHVkeSB3YXMgbm90IHN0YXJ0ZWQgb3Igbm90IGNvbXBsZXRlZCAoYWxzbyBzb21ldGltZXMgY2FsbGVkIFwiYWJvcnRlZFwiKS5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIGltYWdpbmcgc3R1ZHkgaGFzIGJlZW4gd2l0aGRyYXduIGZvbGxvd2luZyBhIHByZXZpb3VzIGZpbmFsIHJlbGVhc2UuICBUaGlzIGVsZWN0cm9uaWMgcmVjb3JkIHNob3VsZCBuZXZlciBoYXZlIGV4aXN0ZWQsIHRob3VnaCBpdCBpcyBwb3NzaWJsZSB0aGF0IHJlYWwtd29ybGQgZGVjaXNpb25zIHdlcmUgYmFzZWQgb24gaXQuIChJZiByZWFsLXdvcmxkIGFjdGl2aXR5IGhhcyBvY2N1cnJlZCwgdGhlIHN0YXR1cyBzaG91bGQgYmUgXCJjYW5jZWxsZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlZ2lzdGVyZWQ6IFRoZSBleGlzdGVuY2Ugb2YgdGhlIGltYWdpbmcgc3R1ZHkgaXMgcmVnaXN0ZXJlZCwgYnV0IHRoZXJlIGlzIG5vdGhpbmcgeWV0IGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBSZWdpc3RlcmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaCBvZiB0aGUgc3RhdHVzIHZhbHVlcyBjdXJyZW50bHkgYXBwbGllcyBmb3IgdGhpcyByZXF1ZXN0LiBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCBpdCdzIGp1c3Qgbm90IGtub3duIHdoaWNoIG9uZS5cclxuICAgKi9cclxuICBVbmtub3duOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHN0YXR1cyBvZiB0aGUgSW1hZ2luZ1N0dWR5LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEltYWdpbmdzdHVkeVN0YXR1c0NvZGluZ3M6SW1hZ2luZ3N0dWR5U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhdmFpbGFibGU6IEF0IGxlYXN0IG9uZSBpbnN0YW5jZSBoYXMgYmVlbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbWFnaW5nIHN0dWR5LlxyXG4gICAqL1xyXG4gIEF2YWlsYWJsZToge1xyXG4gICAgZGlzcGxheTogXCJBdmFpbGFibGVcIixcclxuICAgIGNvZGU6IFwiYXZhaWxhYmxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbWFnaW5nc3R1ZHktc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBpbWFnaW5nIHN0dWR5IGlzIHVuYXZhaWxhYmxlIGJlY2F1c2UgdGhlIGltYWdpbmcgc3R1ZHkgd2FzIG5vdCBzdGFydGVkIG9yIG5vdCBjb21wbGV0ZWQgKGFsc28gc29tZXRpbWVzIGNhbGxlZCBcImFib3J0ZWRcIikuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhbmNlbGxlZFwiLFxyXG4gICAgY29kZTogXCJjYW5jZWxsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ltYWdpbmdzdHVkeS1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBpbWFnaW5nIHN0dWR5IGhhcyBiZWVuIHdpdGhkcmF3biBmb2xsb3dpbmcgYSBwcmV2aW91cyBmaW5hbCByZWxlYXNlLiAgVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAoSWYgcmVhbC13b3JsZCBhY3Rpdml0eSBoYXMgb2NjdXJyZWQsIHRoZSBzdGF0dXMgc2hvdWxkIGJlIFwiY2FuY2VsbGVkXCIgcmF0aGVyIHRoYW4gXCJlbnRlcmVkLWluLWVycm9yXCIuKS5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ltYWdpbmdzdHVkeS1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlZ2lzdGVyZWQ6IFRoZSBleGlzdGVuY2Ugb2YgdGhlIGltYWdpbmcgc3R1ZHkgaXMgcmVnaXN0ZXJlZCwgYnV0IHRoZXJlIGlzIG5vdGhpbmcgeWV0IGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBSZWdpc3RlcmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlZ2lzdGVyZWRcIixcclxuICAgIGNvZGU6IFwicmVnaXN0ZXJlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaW1hZ2luZ3N0dWR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGN1cnJlbnRseSBhcHBsaWVzIGZvciB0aGlzIHJlcXVlc3QuIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksIGl0J3MganVzdCBub3Qga25vd24gd2hpY2ggb25lLlxyXG4gICAqL1xyXG4gIFVua25vd246IHtcclxuICAgIGRpc3BsYXk6IFwiVW5rbm93blwiLFxyXG4gICAgY29kZTogXCJ1bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbWFnaW5nc3R1ZHktc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19