// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/reference-handling-policy|4.3.0
/**
 * A set of flags that defines how references are supported.
 */
export const ReferenceHandlingPolicyCodings = {
    /**
     * enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
     */
    ReferenceIntegrityEnforced: {
        display: "Reference Integrity Enforced",
        code: "enforced",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * literal: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
     */
    LiteralReferences: {
        display: "Literal References",
        code: "literal",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * local: The server does not support references that point to other servers.
     */
    LocalReferencesOnly: {
        display: "Local References Only",
        code: "local",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * logical: The server allows logical references (i.e. using Reference.identifier).
     */
    LogicalReferences: {
        display: "Logical References",
        code: "logical",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * resolves: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
     */
    ResolvesReferences: {
        display: "Resolves References",
        code: "resolves",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBOEI5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILDBCQUEwQixFQUFFO1FBQzFCLE9BQU8sRUFBRSw4QkFBOEI7UUFDdkMsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILG1CQUFtQixFQUFFO1FBQ25CLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEEgc2V0IG9mIGZsYWdzIHRoYXQgZGVmaW5lcyBob3cgcmVmZXJlbmNlcyBhcmUgc3VwcG9ydGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGVuZm9yY2VkOiBUaGUgc2VydmVyIGVuZm9yY2VzIHRoYXQgcmVmZXJlbmNlcyBoYXZlIGludGVncml0eSAtIGUuZy4gaXQgZW5zdXJlcyB0aGF0IHJlZmVyZW5jZXMgY2FuIGFsd2F5cyBiZSByZXNvbHZlZC4gVGhpcyBpcyB0eXBpY2FsbHkgdGhlIGNhc2UgZm9yIGNsaW5pY2FsIHJlY29yZCBzeXN0ZW1zLCBidXQgb2Z0ZW4gbm90IHRoZSBjYXNlIGZvciBtaWRkbGV3YXJlL3Byb3h5IHN5c3RlbXMuXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlSW50ZWdyaXR5RW5mb3JjZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGl0ZXJhbDogVGhlIHNlcnZlciBzdXBwb3J0cyBhbmQgcG9wdWxhdGVzIExpdGVyYWwgcmVmZXJlbmNlcyAoaS5lLiB1c2luZyBSZWZlcmVuY2UucmVmZXJlbmNlKSB3aGVyZSB0aGV5IGFyZSBrbm93biAodGhpcyBjb2RlIGRvZXMgbm90IGd1YXJhbnRlZSB0aGF0IGFsbCByZWZlcmVuY2VzIGFyZSBsaXRlcmFsOyBzZWUgJ2VuZm9yY2VkJykuXHJcbiAgICovXHJcbiAgTGl0ZXJhbFJlZmVyZW5jZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbG9jYWw6IFRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCByZWZlcmVuY2VzIHRoYXQgcG9pbnQgdG8gb3RoZXIgc2VydmVycy5cclxuICAgKi9cclxuICBMb2NhbFJlZmVyZW5jZXNPbmx5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxvZ2ljYWw6IFRoZSBzZXJ2ZXIgYWxsb3dzIGxvZ2ljYWwgcmVmZXJlbmNlcyAoaS5lLiB1c2luZyBSZWZlcmVuY2UuaWRlbnRpZmllcikuXHJcbiAgICovXHJcbiAgTG9naWNhbFJlZmVyZW5jZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVzb2x2ZXM6IFRoZSBzZXJ2ZXIgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgbG9naWNhbCByZWZlcmVuY2VzIHRvIGxpdGVyYWwgcmVmZXJlbmNlcyAtIGkuZS4gY29udmVydGluZyBSZWZlcmVuY2UuaWRlbnRpZmllciB0byBSZWZlcmVuY2UucmVmZXJlbmNlIChpZiByZXNvbHV0aW9uIGZhaWxzLCB0aGUgc2VydmVyIG1heSBzdGlsbCBhY2NlcHQgcmVzb3VyY2VzOyBzZWUgbG9naWNhbCkuXHJcbiAgICovXHJcbiAgUmVzb2x2ZXNSZWZlcmVuY2VzOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgZmxhZ3MgdGhhdCBkZWZpbmVzIGhvdyByZWZlcmVuY2VzIGFyZSBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdzOlJlZmVyZW5jZUhhbmRsaW5nUG9saWN5Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBlbmZvcmNlZDogVGhlIHNlcnZlciBlbmZvcmNlcyB0aGF0IHJlZmVyZW5jZXMgaGF2ZSBpbnRlZ3JpdHkgLSBlLmcuIGl0IGVuc3VyZXMgdGhhdCByZWZlcmVuY2VzIGNhbiBhbHdheXMgYmUgcmVzb2x2ZWQuIFRoaXMgaXMgdHlwaWNhbGx5IHRoZSBjYXNlIGZvciBjbGluaWNhbCByZWNvcmQgc3lzdGVtcywgYnV0IG9mdGVuIG5vdCB0aGUgY2FzZSBmb3IgbWlkZGxld2FyZS9wcm94eSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIFJlZmVyZW5jZUludGVncml0eUVuZm9yY2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlZmVyZW5jZSBJbnRlZ3JpdHkgRW5mb3JjZWRcIixcclxuICAgIGNvZGU6IFwiZW5mb3JjZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVyZW5jZS1oYW5kbGluZy1wb2xpY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxpdGVyYWw6IFRoZSBzZXJ2ZXIgc3VwcG9ydHMgYW5kIHBvcHVsYXRlcyBMaXRlcmFsIHJlZmVyZW5jZXMgKGkuZS4gdXNpbmcgUmVmZXJlbmNlLnJlZmVyZW5jZSkgd2hlcmUgdGhleSBhcmUga25vd24gKHRoaXMgY29kZSBkb2VzIG5vdCBndWFyYW50ZWUgdGhhdCBhbGwgcmVmZXJlbmNlcyBhcmUgbGl0ZXJhbDsgc2VlICdlbmZvcmNlZCcpLlxyXG4gICAqL1xyXG4gIExpdGVyYWxSZWZlcmVuY2VzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxpdGVyYWwgUmVmZXJlbmNlc1wiLFxyXG4gICAgY29kZTogXCJsaXRlcmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsb2NhbDogVGhlIHNlcnZlciBkb2VzIG5vdCBzdXBwb3J0IHJlZmVyZW5jZXMgdGhhdCBwb2ludCB0byBvdGhlciBzZXJ2ZXJzLlxyXG4gICAqL1xyXG4gIExvY2FsUmVmZXJlbmNlc09ubHk6IHtcclxuICAgIGRpc3BsYXk6IFwiTG9jYWwgUmVmZXJlbmNlcyBPbmx5XCIsXHJcbiAgICBjb2RlOiBcImxvY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsb2dpY2FsOiBUaGUgc2VydmVyIGFsbG93cyBsb2dpY2FsIHJlZmVyZW5jZXMgKGkuZS4gdXNpbmcgUmVmZXJlbmNlLmlkZW50aWZpZXIpLlxyXG4gICAqL1xyXG4gIExvZ2ljYWxSZWZlcmVuY2VzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxvZ2ljYWwgUmVmZXJlbmNlc1wiLFxyXG4gICAgY29kZTogXCJsb2dpY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXNvbHZlczogVGhlIHNlcnZlciB3aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBsb2dpY2FsIHJlZmVyZW5jZXMgdG8gbGl0ZXJhbCByZWZlcmVuY2VzIC0gaS5lLiBjb252ZXJ0aW5nIFJlZmVyZW5jZS5pZGVudGlmaWVyIHRvIFJlZmVyZW5jZS5yZWZlcmVuY2UgKGlmIHJlc29sdXRpb24gZmFpbHMsIHRoZSBzZXJ2ZXIgbWF5IHN0aWxsIGFjY2VwdCByZXNvdXJjZXM7IHNlZSBsb2dpY2FsKS5cclxuICAgKi9cclxuICBSZXNvbHZlc1JlZmVyZW5jZXM6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVzb2x2ZXMgUmVmZXJlbmNlc1wiLFxyXG4gICAgY29kZTogXCJyZXNvbHZlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==