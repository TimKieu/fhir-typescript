// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-recommendation-status|4.3.0
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the status of the patient towards perceived immunity against a vaccine preventable disease. This value set is provided as a suggestive example.
 */
export const ImmunizationRecommendationStatusCodings = {
    /**
     * complete: The patient is fully protected and no further doses are recommended.
     */
    Complete: {
        display: "Complete",
        code: "complete",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * contraindicated: The patient is contraindicated for futher doses.
     */
    Contraindicated: {
        display: "Contraindicated",
        code: "contraindicated",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * due: The patient is due for their next vaccination.
     */
    Due: {
        display: "Due",
        code: "due",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * immune: The patient is immune to the target disease and further immunization against the disease is not likely to provide benefit.
     */
    Immune: {
        display: "Immune",
        code: "immune",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * overdue: The patient is considered overdue for their next vaccination.
     */
    Overdue: {
        display: "Overdue",
        code: "overdue",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25TdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsdUZBQXVGO0FBOEJ2Rjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUE4QztJQUNoRzs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsMEVBQTBFO0tBQ25GO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDBFQUEwRTtLQUNuRjtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMEVBQTBFO0tBQ25GO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSBzdGF0dXMgb2YgdGhlIHBhdGllbnQgdG93YXJkcyBwZXJjZWl2ZWQgaW1tdW5pdHkgYWdhaW5zdCBhIHZhY2NpbmUgcHJldmVudGFibGUgZGlzZWFzZS4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGU6IFRoZSBwYXRpZW50IGlzIGZ1bGx5IHByb3RlY3RlZCBhbmQgbm8gZnVydGhlciBkb3NlcyBhcmUgcmVjb21tZW5kZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29udHJhaW5kaWNhdGVkOiBUaGUgcGF0aWVudCBpcyBjb250cmFpbmRpY2F0ZWQgZm9yIGZ1dGhlciBkb3Nlcy5cclxuICAgKi9cclxuICBDb250cmFpbmRpY2F0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZHVlOiBUaGUgcGF0aWVudCBpcyBkdWUgZm9yIHRoZWlyIG5leHQgdmFjY2luYXRpb24uXHJcbiAgICovXHJcbiAgRHVlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGltbXVuZTogVGhlIHBhdGllbnQgaXMgaW1tdW5lIHRvIHRoZSB0YXJnZXQgZGlzZWFzZSBhbmQgZnVydGhlciBpbW11bml6YXRpb24gYWdhaW5zdCB0aGUgZGlzZWFzZSBpcyBub3QgbGlrZWx5IHRvIHByb3ZpZGUgYmVuZWZpdC5cclxuICAgKi9cclxuICBJbW11bmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3ZlcmR1ZTogVGhlIHBhdGllbnQgaXMgY29uc2lkZXJlZCBvdmVyZHVlIGZvciB0aGVpciBuZXh0IHZhY2NpbmF0aW9uLlxyXG4gICAqL1xyXG4gIE92ZXJkdWU6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHN0YXR1cyBvZiB0aGUgcGF0aWVudCB0b3dhcmRzIHBlcmNlaXZlZCBpbW11bml0eSBhZ2FpbnN0IGEgdmFjY2luZSBwcmV2ZW50YWJsZSBkaXNlYXNlLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ3M6SW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25TdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlOiBUaGUgcGF0aWVudCBpcyBmdWxseSBwcm90ZWN0ZWQgYW5kIG5vIGZ1cnRoZXIgZG9zZXMgYXJlIHJlY29tbWVuZGVkLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlXCIsXHJcbiAgICBjb2RlOiBcImNvbXBsZXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb250cmFpbmRpY2F0ZWQ6IFRoZSBwYXRpZW50IGlzIGNvbnRyYWluZGljYXRlZCBmb3IgZnV0aGVyIGRvc2VzLlxyXG4gICAqL1xyXG4gIENvbnRyYWluZGljYXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJDb250cmFpbmRpY2F0ZWRcIixcclxuICAgIGNvZGU6IFwiY29udHJhaW5kaWNhdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkdWU6IFRoZSBwYXRpZW50IGlzIGR1ZSBmb3IgdGhlaXIgbmV4dCB2YWNjaW5hdGlvbi5cclxuICAgKi9cclxuICBEdWU6IHtcclxuICAgIGRpc3BsYXk6IFwiRHVlXCIsXHJcbiAgICBjb2RlOiBcImR1ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXJlY29tbWVuZGF0aW9uLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW1tdW5lOiBUaGUgcGF0aWVudCBpcyBpbW11bmUgdG8gdGhlIHRhcmdldCBkaXNlYXNlIGFuZCBmdXJ0aGVyIGltbXVuaXphdGlvbiBhZ2FpbnN0IHRoZSBkaXNlYXNlIGlzIG5vdCBsaWtlbHkgdG8gcHJvdmlkZSBiZW5lZml0LlxyXG4gICAqL1xyXG4gIEltbXVuZToge1xyXG4gICAgZGlzcGxheTogXCJJbW11bmVcIixcclxuICAgIGNvZGU6IFwiaW1tdW5lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvdmVyZHVlOiBUaGUgcGF0aWVudCBpcyBjb25zaWRlcmVkIG92ZXJkdWUgZm9yIHRoZWlyIG5leHQgdmFjY2luYXRpb24uXHJcbiAgICovXHJcbiAgT3ZlcmR1ZToge1xyXG4gICAgZGlzcGxheTogXCJPdmVyZHVlXCIsXHJcbiAgICBjb2RlOiBcIm92ZXJkdWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=