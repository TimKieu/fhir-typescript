// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contract-signer-type|4.3.0
/**
 * This value set includes sample Contract Signer Type codes.
 */
export const ContractSignerTypeCodes = {
    /**
     * Code: AFFL
     */
    Affiliate: "AFFL",
    /**
     * Code: AGNT
     */
    Agent: "AGNT",
    /**
     * Code: AMENDER
     */
    Amender: "AMENDER",
    /**
     * Code: ASSIGNED
     */
    AssignedEntity: "ASSIGNED",
    /**
     * Code: AUT
     */
    Author: "AUT",
    /**
     * Code: AUTHN
     */
    Authenticator: "AUTHN",
    /**
     * Code: CIT
     */
    Citizen: "CIT",
    /**
     * Code: CLAIMANT
     */
    Claimant: "CLAIMANT",
    /**
     * Code: COAUTH
     */
    CoAuthor: "COAUTH",
    /**
     * Code: CONSENTER
     */
    Consenter: "CONSENTER",
    /**
     * Code: CONSWIT
     */
    ConsentWitness: "CONSWIT",
    /**
     * Code: CONT
     */
    Contact: "CONT",
    /**
     * Code: COPART
     */
    CoParticipant: "COPART",
    /**
     * Code: COVPTY
     */
    CoveredParty: "COVPTY",
    /**
     * Code: DELEGATEE
     */
    Delegatee: "DELEGATEE",
    /**
     * Code: delegator
     */
    Delegator: "delegator",
    /**
     * Code: DEPEND
     */
    Dependent: "DEPEND",
    /**
     * Code: DPOWATT
     */
    DurablePowerOfAttorney: "DPOWATT",
    /**
     * Code: EMGCON
     */
    EmergencyContact: "EMGCON",
    /**
     * Code: EVTWIT
     */
    EventWitness: "EVTWIT",
    /**
     * Code: EXCEST
     */
    ExecutorOfEstate: "EXCEST",
    /**
     * Code: GRANTEE
     */
    Grantee: "GRANTEE",
    /**
     * Code: GRANTOR
     */
    Grantor: "GRANTOR",
    /**
     * Code: GUADLTM
     */
    GuardianAdLidem: "GUADLTM",
    /**
     * Code: GUAR
     */
    Guarantor: "GUAR",
    /**
     * Code: GUARD
     */
    Guardian: "GUARD",
    /**
     * Code: HPOWATT
     */
    HealthcarePowerOfAttorney: "HPOWATT",
    /**
     * Code: HPROV
     */
    HealthcareProvider: "HPROV",
    /**
     * Code: INF
     */
    Informant: "INF",
    /**
     * Code: INSBJ
     */
    InvestigationSubject: "INSBJ",
    /**
     * Code: INTPRT
     */
    Interpreter: "INTPRT",
    /**
     * Code: LEGAUTHN
     */
    LegalAuthenticator: "LEGAUTHN",
    /**
     * Code: NMDINS
     */
    NamedInsured: "NMDINS",
    /**
     * Code: NOK
     */
    NextOfKin: "NOK",
    /**
     * Code: NOTARY
     */
    Notary: "NOTARY",
    /**
     * Code: PAT
     */
    Patient: "PAT",
    /**
     * Code: POWATT
     */
    PowerOfAttorney: "POWATT",
    /**
     * Code: PRIMAUTH
     */
    PrimaryAuthor: "PRIMAUTH",
    /**
     * Code: PRIRECIP
     */
    PrimaryResponsibleParty: "PRIRECIP",
    /**
     * Code: RECIP
     */
    Recipient: "RECIP",
    /**
     * Code: RESPRSN
     */
    ResponsibleParty: "RESPRSN",
    /**
     * Code: REVIEWER
     */
    Reviewer: "REVIEWER",
    /**
     * Code: SOURCE
     */
    Source: "SOURCE",
    /**
     * Code: SPOWATT
     */
    SpecialPowerOfAttorney: "SPOWATT",
    /**
     * Code: TRANS
     */
    Transcriber: "TRANS",
    /**
     * Code: VALID
     */
    Validator: "VALID",
    /**
     * Code: VERF
     */
    Verifier: "VERF",
    /**
     * Code: WIT
     */
    Witness: "WIT",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3RTaWduZXJUeXBlQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvbnRyYWN0U2lnbmVyVHlwZUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLHlFQUF5RTtBQUV6RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHO0lBQ3JDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLE1BQU07SUFDakI7O09BRUc7SUFDSCxLQUFLLEVBQUUsTUFBTTtJQUNiOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxjQUFjLEVBQUUsVUFBVTtJQUMxQjs7T0FFRztJQUNILE1BQU0sRUFBRSxLQUFLO0lBQ2I7O09BRUc7SUFDSCxhQUFhLEVBQUUsT0FBTztJQUN0Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxLQUFLO0lBQ2Q7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFFBQVEsRUFBRSxRQUFRO0lBQ2xCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxjQUFjLEVBQUUsU0FBUztJQUN6Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxNQUFNO0lBQ2Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsUUFBUTtJQUN2Qjs7T0FFRztJQUNILFlBQVksRUFBRSxRQUFRO0lBQ3RCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxRQUFRO0lBQ25COztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsU0FBUztJQUNqQzs7T0FFRztJQUNILGdCQUFnQixFQUFFLFFBQVE7SUFDMUI7O09BRUc7SUFDSCxZQUFZLEVBQUUsUUFBUTtJQUN0Qjs7T0FFRztJQUNILGdCQUFnQixFQUFFLFFBQVE7SUFDMUI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLFNBQVM7SUFDMUI7O09BRUc7SUFDSCxTQUFTLEVBQUUsTUFBTTtJQUNqQjs7T0FFRztJQUNILFFBQVEsRUFBRSxPQUFPO0lBQ2pCOztPQUVHO0lBQ0gseUJBQXlCLEVBQUUsU0FBUztJQUNwQzs7T0FFRztJQUNILGtCQUFrQixFQUFFLE9BQU87SUFDM0I7O09BRUc7SUFDSCxTQUFTLEVBQUUsS0FBSztJQUNoQjs7T0FFRztJQUNILG9CQUFvQixFQUFFLE9BQU87SUFDN0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsUUFBUTtJQUNyQjs7T0FFRztJQUNILGtCQUFrQixFQUFFLFVBQVU7SUFDOUI7O09BRUc7SUFDSCxZQUFZLEVBQUUsUUFBUTtJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxLQUFLO0lBQ2hCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsS0FBSztJQUNkOztPQUVHO0lBQ0gsZUFBZSxFQUFFLFFBQVE7SUFDekI7O09BRUc7SUFDSCxhQUFhLEVBQUUsVUFBVTtJQUN6Qjs7T0FFRztJQUNILHVCQUF1QixFQUFFLFVBQVU7SUFDbkM7O09BRUc7SUFDSCxTQUFTLEVBQUUsT0FBTztJQUNsQjs7T0FFRztJQUNILGdCQUFnQixFQUFFLFNBQVM7SUFDM0I7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsU0FBUztJQUNqQzs7T0FFRztJQUNILFdBQVcsRUFBRSxPQUFPO0lBQ3BCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLE9BQU87SUFDbEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsTUFBTTtJQUNoQjs7T0FFRztJQUNILE9BQU8sRUFBRSxLQUFLO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29udHJhY3Qtc2lnbmVyLXR5cGV8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBzYW1wbGUgQ29udHJhY3QgU2lnbmVyIFR5cGUgY29kZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29udHJhY3RTaWduZXJUeXBlQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUZGTFxyXG4gICAqL1xyXG4gIEFmZmlsaWF0ZTogXCJBRkZMXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUdOVFxyXG4gICAqL1xyXG4gIEFnZW50OiBcIkFHTlRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBTUVOREVSXHJcbiAgICovXHJcbiAgQW1lbmRlcjogXCJBTUVOREVSXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQVNTSUdORURcclxuICAgKi9cclxuICBBc3NpZ25lZEVudGl0eTogXCJBU1NJR05FRFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFVVFxyXG4gICAqL1xyXG4gIEF1dGhvcjogXCJBVVRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBVVRITlxyXG4gICAqL1xyXG4gIEF1dGhlbnRpY2F0b3I6IFwiQVVUSE5cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDSVRcclxuICAgKi9cclxuICBDaXRpemVuOiBcIkNJVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENMQUlNQU5UXHJcbiAgICovXHJcbiAgQ2xhaW1hbnQ6IFwiQ0xBSU1BTlRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDT0FVVEhcclxuICAgKi9cclxuICBDb0F1dGhvcjogXCJDT0FVVEhcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDT05TRU5URVJcclxuICAgKi9cclxuICBDb25zZW50ZXI6IFwiQ09OU0VOVEVSXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09OU1dJVFxyXG4gICAqL1xyXG4gIENvbnNlbnRXaXRuZXNzOiBcIkNPTlNXSVRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDT05UXHJcbiAgICovXHJcbiAgQ29udGFjdDogXCJDT05UXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09QQVJUXHJcbiAgICovXHJcbiAgQ29QYXJ0aWNpcGFudDogXCJDT1BBUlRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBDT1ZQVFlcclxuICAgKi9cclxuICBDb3ZlcmVkUGFydHk6IFwiQ09WUFRZXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogREVMRUdBVEVFXHJcbiAgICovXHJcbiAgRGVsZWdhdGVlOiBcIkRFTEVHQVRFRVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IGRlbGVnYXRvclxyXG4gICAqL1xyXG4gIERlbGVnYXRvcjogXCJkZWxlZ2F0b3JcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBERVBFTkRcclxuICAgKi9cclxuICBEZXBlbmRlbnQ6IFwiREVQRU5EXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRFBPV0FUVFxyXG4gICAqL1xyXG4gIER1cmFibGVQb3dlck9mQXR0b3JuZXk6IFwiRFBPV0FUVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVNR0NPTlxyXG4gICAqL1xyXG4gIEVtZXJnZW5jeUNvbnRhY3Q6IFwiRU1HQ09OXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRVZUV0lUXHJcbiAgICovXHJcbiAgRXZlbnRXaXRuZXNzOiBcIkVWVFdJVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVYQ0VTVFxyXG4gICAqL1xyXG4gIEV4ZWN1dG9yT2ZFc3RhdGU6IFwiRVhDRVNUXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogR1JBTlRFRVxyXG4gICAqL1xyXG4gIEdyYW50ZWU6IFwiR1JBTlRFRVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdSQU5UT1JcclxuICAgKi9cclxuICBHcmFudG9yOiBcIkdSQU5UT1JcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBHVUFETFRNXHJcbiAgICovXHJcbiAgR3VhcmRpYW5BZExpZGVtOiBcIkdVQURMVE1cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBHVUFSXHJcbiAgICovXHJcbiAgR3VhcmFudG9yOiBcIkdVQVJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBHVUFSRFxyXG4gICAqL1xyXG4gIEd1YXJkaWFuOiBcIkdVQVJEXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSFBPV0FUVFxyXG4gICAqL1xyXG4gIEhlYWx0aGNhcmVQb3dlck9mQXR0b3JuZXk6IFwiSFBPV0FUVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhQUk9WXHJcbiAgICovXHJcbiAgSGVhbHRoY2FyZVByb3ZpZGVyOiBcIkhQUk9WXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSU5GXHJcbiAgICovXHJcbiAgSW5mb3JtYW50OiBcIklORlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IElOU0JKXHJcbiAgICovXHJcbiAgSW52ZXN0aWdhdGlvblN1YmplY3Q6IFwiSU5TQkpcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBJTlRQUlRcclxuICAgKi9cclxuICBJbnRlcnByZXRlcjogXCJJTlRQUlRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBMRUdBVVRITlxyXG4gICAqL1xyXG4gIExlZ2FsQXV0aGVudGljYXRvcjogXCJMRUdBVVRITlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5NRElOU1xyXG4gICAqL1xyXG4gIE5hbWVkSW5zdXJlZDogXCJOTURJTlNcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBOT0tcclxuICAgKi9cclxuICBOZXh0T2ZLaW46IFwiTk9LXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTk9UQVJZXHJcbiAgICovXHJcbiAgTm90YXJ5OiBcIk5PVEFSWVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBBVFxyXG4gICAqL1xyXG4gIFBhdGllbnQ6IFwiUEFUXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUE9XQVRUXHJcbiAgICovXHJcbiAgUG93ZXJPZkF0dG9ybmV5OiBcIlBPV0FUVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBSSU1BVVRIXHJcbiAgICovXHJcbiAgUHJpbWFyeUF1dGhvcjogXCJQUklNQVVUSFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBSSVJFQ0lQXHJcbiAgICovXHJcbiAgUHJpbWFyeVJlc3BvbnNpYmxlUGFydHk6IFwiUFJJUkVDSVBcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBSRUNJUFxyXG4gICAqL1xyXG4gIFJlY2lwaWVudDogXCJSRUNJUFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFJFU1BSU05cclxuICAgKi9cclxuICBSZXNwb25zaWJsZVBhcnR5OiBcIlJFU1BSU05cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBSRVZJRVdFUlxyXG4gICAqL1xyXG4gIFJldmlld2VyOiBcIlJFVklFV0VSXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU09VUkNFXHJcbiAgICovXHJcbiAgU291cmNlOiBcIlNPVVJDRVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNQT1dBVFRcclxuICAgKi9cclxuICBTcGVjaWFsUG93ZXJPZkF0dG9ybmV5OiBcIlNQT1dBVFRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBUUkFOU1xyXG4gICAqL1xyXG4gIFRyYW5zY3JpYmVyOiBcIlRSQU5TXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVkFMSURcclxuICAgKi9cclxuICBWYWxpZGF0b3I6IFwiVkFMSURcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBWRVJGXHJcbiAgICovXHJcbiAgVmVyaWZpZXI6IFwiVkVSRlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFdJVFxyXG4gICAqL1xyXG4gIFdpdG5lc3M6IFwiV0lUXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgc2FtcGxlIENvbnRyYWN0IFNpZ25lciBUeXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29udHJhY3RTaWduZXJUeXBlQ29kZVR5cGUgPSB0eXBlb2YgQ29udHJhY3RTaWduZXJUeXBlQ29kZXNba2V5b2YgdHlwZW9mIENvbnRyYWN0U2lnbmVyVHlwZUNvZGVzXTtcclxuIl19