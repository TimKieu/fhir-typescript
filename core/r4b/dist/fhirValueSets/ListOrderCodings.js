// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-order|4.3.0
/**
 * Base values for the order of the items in a list resource.
 */
export const ListOrderCodings = {
    /**
     * alphabetic: The list is sorted alphabetically by an unspecified property of the items in the list.
     */
    SortedAlphabetically: {
        display: "Sorted Alphabetically",
        code: "alphabetic",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * category: The list is sorted categorically by an unspecified property of the items in the list.
     */
    SortedByCategory: {
        display: "Sorted by Category",
        code: "category",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * entry-date: The list is sorted by the date the item was added to the list. Note that the date added to the list is not explicit in the list itself.
     */
    SortedByItemDate: {
        display: "Sorted by Item Date",
        code: "entry-date",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * event-date: The list is sorted by the data of the event. This can be used when the list has items which are dates with past or future events.
     */
    SortedByEventDate: {
        display: "Sorted by Event Date",
        code: "event-date",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * patient: The list is sorted by patient, with items for each patient grouped together.
     */
    SortedByPatient: {
        display: "Sorted by Patient",
        code: "patient",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * priority: The list is sorted by priority. The exact method in which priority has been determined is not specified.
     */
    SortedByPriority: {
        display: "Sorted by Priority",
        code: "priority",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * system: The list was sorted by the system. The criteria the user used are not specified; define additional codes to specify a particular order (or use other defined codes).
     */
    SortedBySystem: {
        display: "Sorted by System",
        code: "system",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * user: The list was sorted by a user. The criteria the user used are not specified.
     */
    SortedByUser: {
        display: "Sorted by User",
        code: "user",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdE9yZGVyQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTGlzdE9yZGVyQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQywrREFBK0Q7QUEwQy9EOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQXVCO0lBQ2xEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9saXN0LW9yZGVyfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQmFzZSB2YWx1ZXMgZm9yIHRoZSBvcmRlciBvZiB0aGUgaXRlbXMgaW4gYSBsaXN0IHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTGlzdE9yZGVyQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbHBoYWJldGljOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkgYnkgYW4gdW5zcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGl0ZW1zIGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIFNvcnRlZEFscGhhYmV0aWNhbGx5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhdGVnb3J5OiBUaGUgbGlzdCBpcyBzb3J0ZWQgY2F0ZWdvcmljYWxseSBieSBhbiB1bnNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgaXRlbXMgaW4gdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgU29ydGVkQnlDYXRlZ29yeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbnRyeS1kYXRlOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgdGhlIGRhdGUgdGhlIGl0ZW0gd2FzIGFkZGVkIHRvIHRoZSBsaXN0LiBOb3RlIHRoYXQgdGhlIGRhdGUgYWRkZWQgdG8gdGhlIGxpc3QgaXMgbm90IGV4cGxpY2l0IGluIHRoZSBsaXN0IGl0c2VsZi5cclxuICAgKi9cclxuICBTb3J0ZWRCeUl0ZW1EYXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGV2ZW50LWRhdGU6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSB0aGUgZGF0YSBvZiB0aGUgZXZlbnQuIFRoaXMgY2FuIGJlIHVzZWQgd2hlbiB0aGUgbGlzdCBoYXMgaXRlbXMgd2hpY2ggYXJlIGRhdGVzIHdpdGggcGFzdCBvciBmdXR1cmUgZXZlbnRzLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5RXZlbnREYXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBhdGllbnQ6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSBwYXRpZW50LCB3aXRoIGl0ZW1zIGZvciBlYWNoIHBhdGllbnQgZ3JvdXBlZCB0b2dldGhlci5cclxuICAgKi9cclxuICBTb3J0ZWRCeVBhdGllbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJpb3JpdHk6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSBwcmlvcml0eS4gVGhlIGV4YWN0IG1ldGhvZCBpbiB3aGljaCBwcmlvcml0eSBoYXMgYmVlbiBkZXRlcm1pbmVkIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgU29ydGVkQnlQcmlvcml0eTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzeXN0ZW06IFRoZSBsaXN0IHdhcyBzb3J0ZWQgYnkgdGhlIHN5c3RlbS4gVGhlIGNyaXRlcmlhIHRoZSB1c2VyIHVzZWQgYXJlIG5vdCBzcGVjaWZpZWQ7IGRlZmluZSBhZGRpdGlvbmFsIGNvZGVzIHRvIHNwZWNpZnkgYSBwYXJ0aWN1bGFyIG9yZGVyIChvciB1c2Ugb3RoZXIgZGVmaW5lZCBjb2RlcykuXHJcbiAgICovXHJcbiAgU29ydGVkQnlTeXN0ZW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdXNlcjogVGhlIGxpc3Qgd2FzIHNvcnRlZCBieSBhIHVzZXIuIFRoZSBjcml0ZXJpYSB0aGUgdXNlciB1c2VkIGFyZSBub3Qgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5VXNlcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2UgdmFsdWVzIGZvciB0aGUgb3JkZXIgb2YgdGhlIGl0ZW1zIGluIGEgbGlzdCByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBMaXN0T3JkZXJDb2RpbmdzOkxpc3RPcmRlckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWxwaGFiZXRpYzogVGhlIGxpc3QgaXMgc29ydGVkIGFscGhhYmV0aWNhbGx5IGJ5IGFuIHVuc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBpdGVtcyBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBTb3J0ZWRBbHBoYWJldGljYWxseToge1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgQWxwaGFiZXRpY2FsbHlcIixcclxuICAgIGNvZGU6IFwiYWxwaGFiZXRpY1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY2F0ZWdvcnk6IFRoZSBsaXN0IGlzIHNvcnRlZCBjYXRlZ29yaWNhbGx5IGJ5IGFuIHVuc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBpdGVtcyBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBTb3J0ZWRCeUNhdGVnb3J5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBDYXRlZ29yeVwiLFxyXG4gICAgY29kZTogXCJjYXRlZ29yeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50cnktZGF0ZTogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHRoZSBkYXRlIHRoZSBpdGVtIHdhcyBhZGRlZCB0byB0aGUgbGlzdC4gTm90ZSB0aGF0IHRoZSBkYXRlIGFkZGVkIHRvIHRoZSBsaXN0IGlzIG5vdCBleHBsaWNpdCBpbiB0aGUgbGlzdCBpdHNlbGYuXHJcbiAgICovXHJcbiAgU29ydGVkQnlJdGVtRGF0ZToge1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgSXRlbSBEYXRlXCIsXHJcbiAgICBjb2RlOiBcImVudHJ5LWRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGV2ZW50LWRhdGU6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSB0aGUgZGF0YSBvZiB0aGUgZXZlbnQuIFRoaXMgY2FuIGJlIHVzZWQgd2hlbiB0aGUgbGlzdCBoYXMgaXRlbXMgd2hpY2ggYXJlIGRhdGVzIHdpdGggcGFzdCBvciBmdXR1cmUgZXZlbnRzLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5RXZlbnREYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBFdmVudCBEYXRlXCIsXHJcbiAgICBjb2RlOiBcImV2ZW50LWRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBhdGllbnQ6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSBwYXRpZW50LCB3aXRoIGl0ZW1zIGZvciBlYWNoIHBhdGllbnQgZ3JvdXBlZCB0b2dldGhlci5cclxuICAgKi9cclxuICBTb3J0ZWRCeVBhdGllbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiU29ydGVkIGJ5IFBhdGllbnRcIixcclxuICAgIGNvZGU6IFwicGF0aWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJpb3JpdHk6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSBwcmlvcml0eS4gVGhlIGV4YWN0IG1ldGhvZCBpbiB3aGljaCBwcmlvcml0eSBoYXMgYmVlbiBkZXRlcm1pbmVkIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgU29ydGVkQnlQcmlvcml0eToge1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgUHJpb3JpdHlcIixcclxuICAgIGNvZGU6IFwicHJpb3JpdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN5c3RlbTogVGhlIGxpc3Qgd2FzIHNvcnRlZCBieSB0aGUgc3lzdGVtLiBUaGUgY3JpdGVyaWEgdGhlIHVzZXIgdXNlZCBhcmUgbm90IHNwZWNpZmllZDsgZGVmaW5lIGFkZGl0aW9uYWwgY29kZXMgdG8gc3BlY2lmeSBhIHBhcnRpY3VsYXIgb3JkZXIgKG9yIHVzZSBvdGhlciBkZWZpbmVkIGNvZGVzKS5cclxuICAgKi9cclxuICBTb3J0ZWRCeVN5c3RlbToge1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgU3lzdGVtXCIsXHJcbiAgICBjb2RlOiBcInN5c3RlbVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdXNlcjogVGhlIGxpc3Qgd2FzIHNvcnRlZCBieSBhIHVzZXIuIFRoZSBjcml0ZXJpYSB0aGUgdXNlciB1c2VkIGFyZSBub3Qgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5VXNlcjoge1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgVXNlclwiLFxyXG4gICAgY29kZTogXCJ1c2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LW9yZGVyXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19