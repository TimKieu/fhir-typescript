// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/enteral-route|4.3.0
/**
 * EnteralRouteOfAdministration: Codes specifying the route of administration of enteral formula.  This value set is composed of HL7 V3 codes and is provided as a suggestive example.
 */
export const EnteralRouteCodings = {
    /**
     * Code: EFT
     */
    EFT: {
        code: "EFT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: ENTINSTL
     */
    ENTINSTL: {
        code: "ENTINSTL",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: GJT
     */
    GJT: {
        code: "GJT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: GT
     */
    GT: {
        code: "GT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: JJTINSTL
     */
    JJTINSTL: {
        code: "JJTINSTL",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: NGT
     */
    NGT: {
        code: "NGT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: OGT
     */
    OGT: {
        code: "OGT",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: OJJ
     */
    OJJ: {
        code: "OJJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: PO
     */
    PO: {
        code: "PO",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50ZXJhbFJvdXRlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW50ZXJhbFJvdXRlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxrRUFBa0U7QUE4Q2xFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsR0FBRyxFQUFFO1FBQ0gsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILEVBQUUsRUFBRTtRQUNGLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsR0FBRyxFQUFFO1FBQ0gsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsRUFBRSxFQUFFO1FBQ0YsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZW50ZXJhbC1yb3V0ZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEVudGVyYWxSb3V0ZU9mQWRtaW5pc3RyYXRpb246IENvZGVzIHNwZWNpZnlpbmcgdGhlIHJvdXRlIG9mIGFkbWluaXN0cmF0aW9uIG9mIGVudGVyYWwgZm9ybXVsYS4gIFRoaXMgdmFsdWUgc2V0IGlzIGNvbXBvc2VkIG9mIEhMNyBWMyBjb2RlcyBhbmQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFbnRlcmFsUm91dGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVGVFxyXG4gICAqL1xyXG4gIEVGVDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBFTlRJTlNUTFxyXG4gICAqL1xyXG4gIEVOVElOU1RMOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdKVFxyXG4gICAqL1xyXG4gIEdKVDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBHVFxyXG4gICAqL1xyXG4gIEdUOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEpKVElOU1RMXHJcbiAgICovXHJcbiAgSkpUSU5TVEw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogTkdUXHJcbiAgICovXHJcbiAgTkdUOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9HVFxyXG4gICAqL1xyXG4gIE9HVDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBPSkpcclxuICAgKi9cclxuICBPSko6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogUE9cclxuICAgKi9cclxuICBQTzogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEVudGVyYWxSb3V0ZU9mQWRtaW5pc3RyYXRpb246IENvZGVzIHNwZWNpZnlpbmcgdGhlIHJvdXRlIG9mIGFkbWluaXN0cmF0aW9uIG9mIGVudGVyYWwgZm9ybXVsYS4gIFRoaXMgdmFsdWUgc2V0IGlzIGNvbXBvc2VkIG9mIEhMNyBWMyBjb2RlcyBhbmQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRW50ZXJhbFJvdXRlQ29kaW5nczpFbnRlcmFsUm91dGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVGVFxyXG4gICAqL1xyXG4gIEVGVDoge1xyXG4gICAgY29kZTogXCJFRlRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRU5USU5TVExcclxuICAgKi9cclxuICBFTlRJTlNUTDoge1xyXG4gICAgY29kZTogXCJFTlRJTlNUTFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBHSlRcclxuICAgKi9cclxuICBHSlQ6IHtcclxuICAgIGNvZGU6IFwiR0pUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1Sb3V0ZU9mQWRtaW5pc3RyYXRpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdUXHJcbiAgICovXHJcbiAgR1Q6IHtcclxuICAgIGNvZGU6IFwiR1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSkpUSU5TVExcclxuICAgKi9cclxuICBKSlRJTlNUTDoge1xyXG4gICAgY29kZTogXCJKSlRJTlNUTFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBOR1RcclxuICAgKi9cclxuICBOR1Q6IHtcclxuICAgIGNvZGU6IFwiTkdUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1Sb3V0ZU9mQWRtaW5pc3RyYXRpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9HVFxyXG4gICAqL1xyXG4gIE9HVDoge1xyXG4gICAgY29kZTogXCJPR1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogT0pKXHJcbiAgICovXHJcbiAgT0pKOiB7XHJcbiAgICBjb2RlOiBcIk9KSlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQT1xyXG4gICAqL1xyXG4gIFBPOiB7XHJcbiAgICBjb2RlOiBcIlBPXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1Sb3V0ZU9mQWRtaW5pc3RyYXRpb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=