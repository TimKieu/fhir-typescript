// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/evidence-report-section|4.3.0
/**
 * Evidence Report Section Type.
 */
export const EvidenceReportSectionCodes = {
    /**
     * Assertion: Assertion.
     */
    Assertion: "Assertion",
    /**
     * Certainty-of-Evidence: Certainty of Evidence.
     */
    CertaintyOfEvidence: "Certainty-of-Evidence",
    /**
     * Column-Header: Denotes the header to use for the column for a tabular report.
     */
    ColumnHeader: "Column-Header",
    /**
     * Column-Headers: Denotes a section specifying column headers for a tabular report.
     */
    ColumnHeaders: "Column-Headers",
    /**
     * Control-group-alone-Evidence: Evidence Results for the control exposure only.
     */
    EvidenceResultsForTheControlExposureOnly: "Control-group-alone-Evidence",
    /**
     * Efficacy-outcomes: Outcomes related to efficacy or potential benefits of interventions.
     */
    EfficacyOutcomes: "Efficacy-outcomes",
    /**
     * Evidence: Evidence Results.
     */
    EvidenceResults: "Evidence",
    /**
     * Evidence-Classifier: This section is used for classifiers of the evidence.
     */
    EvidenceClassifierSection: "Evidence-Classifier",
    /**
     * EvidenceVariable: Evidence Variables used.
     */
    EvidenceVariablesUsed: "EvidenceVariable",
    /**
     * EvidenceVariable-exposure: Evidence Variable in variable role Exposure.
     */
    EvidenceVariableInVariableRoleExposure: "EvidenceVariable-exposure",
    /**
     * EvidenceVariable-intended: Evidence Variables intended for interpretation.
     */
    EvidenceVariablesIntendedForInterpretation: "EvidenceVariable-intended",
    /**
     * EvidenceVariable-observed: Evidence Variables as observed in the research data.
     */
    EvidenceVariablesActuallyObserved: "EvidenceVariable-observed",
    /**
     * EvidenceVariable-outcome: Evidence Variable in variable role Outcome (MeasuredVariable).
     */
    EvidenceVariableInVariableRoleOutcomeMeasuredVariable: "EvidenceVariable-outcome",
    /**
     * EvidenceVariable-population: Evidence Variable in variable role Population.
     */
    EvidenceVariableInVariableRolePopulation: "EvidenceVariable-population",
    /**
     * Harms-outcomes: Outcomes related to adverse effects or potential harms of interventions.
     */
    HarmsOutcomes: "Harms-outcomes",
    /**
     * Header: Denotes the header to use for a Text Summary or above a Table.
     */
    Header: "Header",
    /**
     * Intervention-group-alone-Evidence: Evidence Results for the intervention exposure only.
     */
    EvidenceResultsForTheInterventionExposureOnly: "Intervention-group-alone-Evidence",
    /**
     * Intervention-vs-Control-Evidence: Evidence Results for comparison of Intervention and Control.
     */
    EvidenceResultsForComparisonOfInterventionAndControl: "Intervention-vs-Control-Evidence",
    /**
     * Reasons: Reasons.
     */
    Reasons: "Reasons",
    /**
     * References: References.
     */
    References: "References",
    /**
     * Row-Headers: Denotes a section specifying row headers for a tabular report.
     */
    RowHeaders: "Row-Headers",
    /**
     * SampleSize: Sample Size.
     */
    SampleSize: "SampleSize",
    /**
     * SummaryOfBodyOfEvidenceFindings: Summary of Body of Evidence Findings.
     */
    SummaryOfBodyOfEvidenceFindings: "SummaryOfBodyOfEvidenceFindings",
    /**
     * SummaryOfIndividualStudyFindings: Summary of Individual Study Findings.
     */
    SummaryOfIndividualStudyFindings: "SummaryOfIndividualStudyFindings",
    /**
     * Code: Table
     */
    Table: "Table",
    /**
     * Tables: Tables.
     */
    Tables: "Tables",
    /**
     * Text-Summary: Denotes a section specifying text summary for a report.
     */
    TextSummary: "Text-Summary",
    /**
     * Warnings: Warnings.
     */
    Warnings: "Warnings",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZpZGVuY2VSZXBvcnRTZWN0aW9uQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0V2aWRlbmNlUmVwb3J0U2VjdGlvbkNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHO0lBQ3hDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSx1QkFBdUI7SUFDNUM7O09BRUc7SUFDSCxZQUFZLEVBQUUsZUFBZTtJQUM3Qjs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7O09BRUc7SUFDSCx3Q0FBd0MsRUFBRSw4QkFBOEI7SUFDeEU7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxtQkFBbUI7SUFDckM7O09BRUc7SUFDSCxlQUFlLEVBQUUsVUFBVTtJQUMzQjs7T0FFRztJQUNILHlCQUF5QixFQUFFLHFCQUFxQjtJQUNoRDs7T0FFRztJQUNILHFCQUFxQixFQUFFLGtCQUFrQjtJQUN6Qzs7T0FFRztJQUNILHNDQUFzQyxFQUFFLDJCQUEyQjtJQUNuRTs7T0FFRztJQUNILDBDQUEwQyxFQUFFLDJCQUEyQjtJQUN2RTs7T0FFRztJQUNILGlDQUFpQyxFQUFFLDJCQUEyQjtJQUM5RDs7T0FFRztJQUNILHFEQUFxRCxFQUFFLDBCQUEwQjtJQUNqRjs7T0FFRztJQUNILHdDQUF3QyxFQUFFLDZCQUE2QjtJQUN2RTs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILDZDQUE2QyxFQUFFLG1DQUFtQztJQUNsRjs7T0FFRztJQUNILG9EQUFvRCxFQUFFLGtDQUFrQztJQUN4Rjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFlBQVk7SUFDeEI7O09BRUc7SUFDSCxVQUFVLEVBQUUsYUFBYTtJQUN6Qjs7T0FFRztJQUNILFVBQVUsRUFBRSxZQUFZO0lBQ3hCOztPQUVHO0lBQ0gsK0JBQStCLEVBQUUsaUNBQWlDO0lBQ2xFOztPQUVHO0lBQ0gsZ0NBQWdDLEVBQUUsa0NBQWtDO0lBQ3BFOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGNBQWM7SUFDM0I7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtDQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2V2aWRlbmNlLXJlcG9ydC1zZWN0aW9ufDQuMy4wXHJcblxyXG4vKipcclxuICogRXZpZGVuY2UgUmVwb3J0IFNlY3Rpb24gVHlwZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBFdmlkZW5jZVJlcG9ydFNlY3Rpb25Db2RlcyA9IHtcclxuICAvKipcclxuICAgKiBBc3NlcnRpb246IEFzc2VydGlvbi5cclxuICAgKi9cclxuICBBc3NlcnRpb246IFwiQXNzZXJ0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogQ2VydGFpbnR5LW9mLUV2aWRlbmNlOiBDZXJ0YWludHkgb2YgRXZpZGVuY2UuXHJcbiAgICovXHJcbiAgQ2VydGFpbnR5T2ZFdmlkZW5jZTogXCJDZXJ0YWludHktb2YtRXZpZGVuY2VcIixcclxuICAvKipcclxuICAgKiBDb2x1bW4tSGVhZGVyOiBEZW5vdGVzIHRoZSBoZWFkZXIgdG8gdXNlIGZvciB0aGUgY29sdW1uIGZvciBhIHRhYnVsYXIgcmVwb3J0LlxyXG4gICAqL1xyXG4gIENvbHVtbkhlYWRlcjogXCJDb2x1bW4tSGVhZGVyXCIsXHJcbiAgLyoqXHJcbiAgICogQ29sdW1uLUhlYWRlcnM6IERlbm90ZXMgYSBzZWN0aW9uIHNwZWNpZnlpbmcgY29sdW1uIGhlYWRlcnMgZm9yIGEgdGFidWxhciByZXBvcnQuXHJcbiAgICovXHJcbiAgQ29sdW1uSGVhZGVyczogXCJDb2x1bW4tSGVhZGVyc1wiLFxyXG4gIC8qKlxyXG4gICAqIENvbnRyb2wtZ3JvdXAtYWxvbmUtRXZpZGVuY2U6IEV2aWRlbmNlIFJlc3VsdHMgZm9yIHRoZSBjb250cm9sIGV4cG9zdXJlIG9ubHkuXHJcbiAgICovXHJcbiAgRXZpZGVuY2VSZXN1bHRzRm9yVGhlQ29udHJvbEV4cG9zdXJlT25seTogXCJDb250cm9sLWdyb3VwLWFsb25lLUV2aWRlbmNlXCIsXHJcbiAgLyoqXHJcbiAgICogRWZmaWNhY3ktb3V0Y29tZXM6IE91dGNvbWVzIHJlbGF0ZWQgdG8gZWZmaWNhY3kgb3IgcG90ZW50aWFsIGJlbmVmaXRzIG9mIGludGVydmVudGlvbnMuXHJcbiAgICovXHJcbiAgRWZmaWNhY3lPdXRjb21lczogXCJFZmZpY2FjeS1vdXRjb21lc1wiLFxyXG4gIC8qKlxyXG4gICAqIEV2aWRlbmNlOiBFdmlkZW5jZSBSZXN1bHRzLlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlUmVzdWx0czogXCJFdmlkZW5jZVwiLFxyXG4gIC8qKlxyXG4gICAqIEV2aWRlbmNlLUNsYXNzaWZpZXI6IFRoaXMgc2VjdGlvbiBpcyB1c2VkIGZvciBjbGFzc2lmaWVycyBvZiB0aGUgZXZpZGVuY2UuXHJcbiAgICovXHJcbiAgRXZpZGVuY2VDbGFzc2lmaWVyU2VjdGlvbjogXCJFdmlkZW5jZS1DbGFzc2lmaWVyXCIsXHJcbiAgLyoqXHJcbiAgICogRXZpZGVuY2VWYXJpYWJsZTogRXZpZGVuY2UgVmFyaWFibGVzIHVzZWQuXHJcbiAgICovXHJcbiAgRXZpZGVuY2VWYXJpYWJsZXNVc2VkOiBcIkV2aWRlbmNlVmFyaWFibGVcIixcclxuICAvKipcclxuICAgKiBFdmlkZW5jZVZhcmlhYmxlLWV4cG9zdXJlOiBFdmlkZW5jZSBWYXJpYWJsZSBpbiB2YXJpYWJsZSByb2xlIEV4cG9zdXJlLlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlVmFyaWFibGVJblZhcmlhYmxlUm9sZUV4cG9zdXJlOiBcIkV2aWRlbmNlVmFyaWFibGUtZXhwb3N1cmVcIixcclxuICAvKipcclxuICAgKiBFdmlkZW5jZVZhcmlhYmxlLWludGVuZGVkOiBFdmlkZW5jZSBWYXJpYWJsZXMgaW50ZW5kZWQgZm9yIGludGVycHJldGF0aW9uLlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlVmFyaWFibGVzSW50ZW5kZWRGb3JJbnRlcnByZXRhdGlvbjogXCJFdmlkZW5jZVZhcmlhYmxlLWludGVuZGVkXCIsXHJcbiAgLyoqXHJcbiAgICogRXZpZGVuY2VWYXJpYWJsZS1vYnNlcnZlZDogRXZpZGVuY2UgVmFyaWFibGVzIGFzIG9ic2VydmVkIGluIHRoZSByZXNlYXJjaCBkYXRhLlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlVmFyaWFibGVzQWN0dWFsbHlPYnNlcnZlZDogXCJFdmlkZW5jZVZhcmlhYmxlLW9ic2VydmVkXCIsXHJcbiAgLyoqXHJcbiAgICogRXZpZGVuY2VWYXJpYWJsZS1vdXRjb21lOiBFdmlkZW5jZSBWYXJpYWJsZSBpbiB2YXJpYWJsZSByb2xlIE91dGNvbWUgKE1lYXN1cmVkVmFyaWFibGUpLlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlVmFyaWFibGVJblZhcmlhYmxlUm9sZU91dGNvbWVNZWFzdXJlZFZhcmlhYmxlOiBcIkV2aWRlbmNlVmFyaWFibGUtb3V0Y29tZVwiLFxyXG4gIC8qKlxyXG4gICAqIEV2aWRlbmNlVmFyaWFibGUtcG9wdWxhdGlvbjogRXZpZGVuY2UgVmFyaWFibGUgaW4gdmFyaWFibGUgcm9sZSBQb3B1bGF0aW9uLlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlVmFyaWFibGVJblZhcmlhYmxlUm9sZVBvcHVsYXRpb246IFwiRXZpZGVuY2VWYXJpYWJsZS1wb3B1bGF0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogSGFybXMtb3V0Y29tZXM6IE91dGNvbWVzIHJlbGF0ZWQgdG8gYWR2ZXJzZSBlZmZlY3RzIG9yIHBvdGVudGlhbCBoYXJtcyBvZiBpbnRlcnZlbnRpb25zLlxyXG4gICAqL1xyXG4gIEhhcm1zT3V0Y29tZXM6IFwiSGFybXMtb3V0Y29tZXNcIixcclxuICAvKipcclxuICAgKiBIZWFkZXI6IERlbm90ZXMgdGhlIGhlYWRlciB0byB1c2UgZm9yIGEgVGV4dCBTdW1tYXJ5IG9yIGFib3ZlIGEgVGFibGUuXHJcbiAgICovXHJcbiAgSGVhZGVyOiBcIkhlYWRlclwiLFxyXG4gIC8qKlxyXG4gICAqIEludGVydmVudGlvbi1ncm91cC1hbG9uZS1FdmlkZW5jZTogRXZpZGVuY2UgUmVzdWx0cyBmb3IgdGhlIGludGVydmVudGlvbiBleHBvc3VyZSBvbmx5LlxyXG4gICAqL1xyXG4gIEV2aWRlbmNlUmVzdWx0c0ZvclRoZUludGVydmVudGlvbkV4cG9zdXJlT25seTogXCJJbnRlcnZlbnRpb24tZ3JvdXAtYWxvbmUtRXZpZGVuY2VcIixcclxuICAvKipcclxuICAgKiBJbnRlcnZlbnRpb24tdnMtQ29udHJvbC1FdmlkZW5jZTogRXZpZGVuY2UgUmVzdWx0cyBmb3IgY29tcGFyaXNvbiBvZiBJbnRlcnZlbnRpb24gYW5kIENvbnRyb2wuXHJcbiAgICovXHJcbiAgRXZpZGVuY2VSZXN1bHRzRm9yQ29tcGFyaXNvbk9mSW50ZXJ2ZW50aW9uQW5kQ29udHJvbDogXCJJbnRlcnZlbnRpb24tdnMtQ29udHJvbC1FdmlkZW5jZVwiLFxyXG4gIC8qKlxyXG4gICAqIFJlYXNvbnM6IFJlYXNvbnMuXHJcbiAgICovXHJcbiAgUmVhc29uczogXCJSZWFzb25zXCIsXHJcbiAgLyoqXHJcbiAgICogUmVmZXJlbmNlczogUmVmZXJlbmNlcy5cclxuICAgKi9cclxuICBSZWZlcmVuY2VzOiBcIlJlZmVyZW5jZXNcIixcclxuICAvKipcclxuICAgKiBSb3ctSGVhZGVyczogRGVub3RlcyBhIHNlY3Rpb24gc3BlY2lmeWluZyByb3cgaGVhZGVycyBmb3IgYSB0YWJ1bGFyIHJlcG9ydC5cclxuICAgKi9cclxuICBSb3dIZWFkZXJzOiBcIlJvdy1IZWFkZXJzXCIsXHJcbiAgLyoqXHJcbiAgICogU2FtcGxlU2l6ZTogU2FtcGxlIFNpemUuXHJcbiAgICovXHJcbiAgU2FtcGxlU2l6ZTogXCJTYW1wbGVTaXplXCIsXHJcbiAgLyoqXHJcbiAgICogU3VtbWFyeU9mQm9keU9mRXZpZGVuY2VGaW5kaW5nczogU3VtbWFyeSBvZiBCb2R5IG9mIEV2aWRlbmNlIEZpbmRpbmdzLlxyXG4gICAqL1xyXG4gIFN1bW1hcnlPZkJvZHlPZkV2aWRlbmNlRmluZGluZ3M6IFwiU3VtbWFyeU9mQm9keU9mRXZpZGVuY2VGaW5kaW5nc1wiLFxyXG4gIC8qKlxyXG4gICAqIFN1bW1hcnlPZkluZGl2aWR1YWxTdHVkeUZpbmRpbmdzOiBTdW1tYXJ5IG9mIEluZGl2aWR1YWwgU3R1ZHkgRmluZGluZ3MuXHJcbiAgICovXHJcbiAgU3VtbWFyeU9mSW5kaXZpZHVhbFN0dWR5RmluZGluZ3M6IFwiU3VtbWFyeU9mSW5kaXZpZHVhbFN0dWR5RmluZGluZ3NcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBUYWJsZVxyXG4gICAqL1xyXG4gIFRhYmxlOiBcIlRhYmxlXCIsXHJcbiAgLyoqXHJcbiAgICogVGFibGVzOiBUYWJsZXMuXHJcbiAgICovXHJcbiAgVGFibGVzOiBcIlRhYmxlc1wiLFxyXG4gIC8qKlxyXG4gICAqIFRleHQtU3VtbWFyeTogRGVub3RlcyBhIHNlY3Rpb24gc3BlY2lmeWluZyB0ZXh0IHN1bW1hcnkgZm9yIGEgcmVwb3J0LlxyXG4gICAqL1xyXG4gIFRleHRTdW1tYXJ5OiBcIlRleHQtU3VtbWFyeVwiLFxyXG4gIC8qKlxyXG4gICAqIFdhcm5pbmdzOiBXYXJuaW5ncy5cclxuICAgKi9cclxuICBXYXJuaW5nczogXCJXYXJuaW5nc1wiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEV2aWRlbmNlIFJlcG9ydCBTZWN0aW9uIFR5cGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFdmlkZW5jZVJlcG9ydFNlY3Rpb25Db2RlVHlwZSA9IHR5cGVvZiBFdmlkZW5jZVJlcG9ydFNlY3Rpb25Db2Rlc1trZXlvZiB0eXBlb2YgRXZpZGVuY2VSZXBvcnRTZWN0aW9uQ29kZXNdO1xyXG4iXX0=