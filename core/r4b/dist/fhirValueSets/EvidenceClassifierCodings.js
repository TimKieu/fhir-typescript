// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/evidence-classifier-code|4.3.0
/**
 * Commonly used classifiers for evidence sets.
 */
export const EvidenceClassifierCodings = {
    /**
     * AllocConcealNotStated: Allocation concealment not stated.
     */
    AllocationConcealmentNotStated: {
        display: "Allocation concealment not stated",
        code: "AllocConcealNotStated",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * BaselineImbalance: Differences between groups at start of trial may confound or bias the findings.
     */
    BaselineImbalances: {
        display: "Baseline imbalances",
        code: "BaselineImbalance",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * COVID19HumanResearch: contains human COVID-19 disease in the research data as any variable (population, exposure or outcome).
     */
    COVID19HumanDataInPopulationExposureOrOutcome: {
        display: "COVID-19 human data in population, exposure, or outcome",
        code: "COVID19HumanResearch",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * COVID19Relevant: Not about COVID-19 but relevant to COVID-19 management or understanding.
     */
    COVID19RelevantButNotSpecificArticle: {
        display: "COVID-19 relevant (but not specific) article",
        code: "COVID19Relevant",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * COVID19Specific: About COVID-19.
     */
    COVID19SpecificArticle: {
        display: "COVID-19 specific article",
        code: "COVID19Specific",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * Diagnosis: about methods to distinguish having or not having a condition.
     */
    ArticleAboutDiagnosis: {
        display: "Article about diagnosis",
        code: "Diagnosis",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * EarlyTrialTermination: Early trial termination.
     */
    EarlyTrialTermination: {
        display: "Early trial termination",
        code: "EarlyTrialTermination",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * Guideline: for clinical practice guidelines.
     */
    ArticleIncludesGuideline: {
        display: "Article includes guideline",
        code: "Guideline",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * NoBlinding: No blinding.
     */
    NoBlinding: {
        display: "No blinding",
        code: "NoBlinding",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * NoITT: No intention-to-treat analysis.
     */
    NoIntentionToTreatAnalysis: {
        display: "No intention-to-treat analysis",
        code: "NoITT",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * NotAssessed: Neither rated as yes nor rated as no.
     */
    NotRatedNotAssessed: {
        display: "Not rated, not assessed",
        code: "NotAssessed",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * NotResearchNotGuideline: for things that are not research reports, research protocols or guidelines.
     */
    ArticleIsNeitherResearchNorGuideline: {
        display: "Article is neither research nor guideline",
        code: "NotResearchNotGuideline",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * OriginalResearch: such as randomized trial, observational study.
     */
    ArticleIncludesOriginalResearch: {
        display: "Article includes original research",
        code: "OriginalResearch",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * PreliminaryAnalysis: Preliminary analysis.
     */
    PreliminaryAnalysis: {
        display: "Preliminary analysis",
        code: "PreliminaryAnalysis",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * Preprint: Results presented in preprint (pre-final publication) form.
     */
    PreprintNotFinalPublication: {
        display: "Preprint (not final publication)",
        code: "Preprint",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * PreventionAndControl: about preventive care and interventions.
     */
    ArticleAboutPreventionAndControl: {
        display: "Article about prevention and control",
        code: "PreventionAndControl",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * PrognosisPrediction: about predicting risk for something or risk factors for it.
     */
    ArticleAboutPrognosisOrPrediction: {
        display: "Article about prognosis or prediction",
        code: "PrognosisPrediction",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsCaseControl: classified as case-control study.
     */
    ClassifiedAsCaseControlStudy: {
        display: "classified as case-control study",
        code: "RatedAsCaseControl",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsComparativeCohort: classified as comparative cohort study (observational).
     */
    ClassifiedAsComparativeCohortStudyObservational: {
        display: "classified as comparative cohort study (observational)",
        code: "RatedAsComparativeCohort",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsControlledTrial: classified as nonrandomized controlled trial (experimental).
     */
    ClassifiedAsNonrandomizedControlledTrialExperimental: {
        display: "classified as nonrandomized controlled trial (experimental)",
        code: "RatedAsControlledTrial",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsMixedMethods: classified as mixed-methods study.
     */
    ClassifiedAsMixedMethodsStudy: {
        display: "classified as mixed-methods study",
        code: "RatedAsMixedMethods",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsNo: Rated as no, negative, absent, or exclude.
     */
    RatedAsNoNegativeAbsentOrExclude: {
        display: "Rated as no, negative, absent, or exclude",
        code: "RatedAsNo",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsOther: classified as other concept (not elsewhere classified).
     */
    ClassifiedAsOtherConceptNotElsewhereClassified: {
        display: "classified as other concept (not elsewhere classified)",
        code: "RatedAsOther",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsRCT: classified as randomized controlled trial.
     */
    ClassifiedAsRandomizedControlledTrial: {
        display: "classified as randomized controlled trial",
        code: "RatedAsRCT",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RatedAsUncontrolledSeries: classified as uncontrolled cohort (case series).
     */
    ClassifiedAsUncontrolledCohortCaseSeries: {
        display: "classified as uncontrolled cohort (case series)",
        code: "RatedAsUncontrolledSeries",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * Code: RatedAsYes
     */
    RatedAsYesAffirmativePositivePresentOrInclude: {
        display: "Rated as yes, affirmative, positive, present, or include",
        code: "RatedAsYes",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * ResearchProtocol: for research protocols.
     */
    ArticleProvidesProtocolWithoutResults: {
        display: "Article provides protocol without results",
        code: "ResearchProtocol",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * ResearchSynthesis: such as systematic review, meta-analysis, rapid review.
     */
    ArticleIncludesSynthesisOfResearch: {
        display: "Article includes synthesis of research",
        code: "ResearchSynthesis",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * RiskOfBias: Risk of bias assessment.
     */
    RiskOfBiasAssessment: {
        display: "Risk of bias assessment",
        code: "RiskOfBias",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * SubgroupAnalysis: Subgroup analysis.
     */
    SubgroupAnalysis: {
        display: "Subgroup analysis",
        code: "SubgroupAnalysis",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
    /**
     * Treatment: about therapeutic interventions.
     */
    ArticleAboutTreatment: {
        display: "Article about treatment",
        code: "Treatment",
        system: "http://terminology.hl7.org/CodeSystem/evidence-classifier-code",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZpZGVuY2VDbGFzc2lmaWVyQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRXZpZGVuY2VDbGFzc2lmaWVyQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyw2RUFBNkU7QUFzSTdFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsOEJBQThCLEVBQUU7UUFDOUIsT0FBTyxFQUFFLG1DQUFtQztRQUM1QyxJQUFJLEVBQUUsdUJBQXVCO1FBQzdCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCw2Q0FBNkMsRUFBRTtRQUM3QyxPQUFPLEVBQUUseURBQXlEO1FBQ2xFLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsb0NBQW9DLEVBQUU7UUFDcEMsT0FBTyxFQUFFLDhDQUE4QztRQUN2RCxJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILHNCQUFzQixFQUFFO1FBQ3RCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JC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QUNEOztPQUVHO0lBQ0gsd0NBQXdDLEVBQUU7UUFDeEMsT0FBTyxFQUFFLGlEQUFpRDtRQUMxRCxJQUFJLEVBQUUsMkJBQTJCO1FBQ2pDLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILDZDQUE2QyxFQUFFO1FBQzdDLE9BQU8sRUFBRSwwREFBMEQ7UUFDbkUsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gscUNBQXFDLEVBQUU7UUFDckMsT0FBTyxFQUFFLDJDQUEyQztRQUNwRCxJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILGtDQUFrQyxFQUFFO1FBQ2xDLE9BQU8sRUFBRSx3Q0FBd0M7UUFDakQsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxvQkFBb0IsRUFBRTtRQUNwQixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb21tb25seSB1c2VkIGNsYXNzaWZpZXJzIGZvciBldmlkZW5jZSBzZXRzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRXZpZGVuY2VDbGFzc2lmaWVyQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBBbGxvY0NvbmNlYWxOb3RTdGF0ZWQ6IEFsbG9jYXRpb24gY29uY2VhbG1lbnQgbm90IHN0YXRlZC5cclxuICAgKi9cclxuICBBbGxvY2F0aW9uQ29uY2VhbG1lbnROb3RTdGF0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQmFzZWxpbmVJbWJhbGFuY2U6IERpZmZlcmVuY2VzIGJldHdlZW4gZ3JvdXBzIGF0IHN0YXJ0IG9mIHRyaWFsIG1heSBjb25mb3VuZCBvciBiaWFzIHRoZSBmaW5kaW5ncy5cclxuICAgKi9cclxuICBCYXNlbGluZUltYmFsYW5jZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ09WSUQxOUh1bWFuUmVzZWFyY2g6IGNvbnRhaW5zIGh1bWFuIENPVklELTE5IGRpc2Vhc2UgaW4gdGhlIHJlc2VhcmNoIGRhdGEgYXMgYW55IHZhcmlhYmxlIChwb3B1bGF0aW9uLCBleHBvc3VyZSBvciBvdXRjb21lKS5cclxuICAgKi9cclxuICBDT1ZJRDE5SHVtYW5EYXRhSW5Qb3B1bGF0aW9uRXhwb3N1cmVPck91dGNvbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ09WSUQxOVJlbGV2YW50OiBOb3QgYWJvdXQgQ09WSUQtMTkgYnV0IHJlbGV2YW50IHRvIENPVklELTE5IG1hbmFnZW1lbnQgb3IgdW5kZXJzdGFuZGluZy5cclxuICAgKi9cclxuICBDT1ZJRDE5UmVsZXZhbnRCdXROb3RTcGVjaWZpY0FydGljbGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ09WSUQxOVNwZWNpZmljOiBBYm91dCBDT1ZJRC0xOS5cclxuICAgKi9cclxuICBDT1ZJRDE5U3BlY2lmaWNBcnRpY2xlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIERpYWdub3NpczogYWJvdXQgbWV0aG9kcyB0byBkaXN0aW5ndWlzaCBoYXZpbmcgb3Igbm90IGhhdmluZyBhIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBBcnRpY2xlQWJvdXREaWFnbm9zaXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogRWFybHlUcmlhbFRlcm1pbmF0aW9uOiBFYXJseSB0cmlhbCB0ZXJtaW5hdGlvbi5cclxuICAgKi9cclxuICBFYXJseVRyaWFsVGVybWluYXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogR3VpZGVsaW5lOiBmb3IgY2xpbmljYWwgcHJhY3RpY2UgZ3VpZGVsaW5lcy5cclxuICAgKi9cclxuICBBcnRpY2xlSW5jbHVkZXNHdWlkZWxpbmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogTm9CbGluZGluZzogTm8gYmxpbmRpbmcuXHJcbiAgICovXHJcbiAgTm9CbGluZGluZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBOb0lUVDogTm8gaW50ZW50aW9uLXRvLXRyZWF0IGFuYWx5c2lzLlxyXG4gICAqL1xyXG4gIE5vSW50ZW50aW9uVG9UcmVhdEFuYWx5c2lzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE5vdEFzc2Vzc2VkOiBOZWl0aGVyIHJhdGVkIGFzIHllcyBub3IgcmF0ZWQgYXMgbm8uXHJcbiAgICovXHJcbiAgTm90UmF0ZWROb3RBc3Nlc3NlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBOb3RSZXNlYXJjaE5vdEd1aWRlbGluZTogZm9yIHRoaW5ncyB0aGF0IGFyZSBub3QgcmVzZWFyY2ggcmVwb3J0cywgcmVzZWFyY2ggcHJvdG9jb2xzIG9yIGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgQXJ0aWNsZUlzTmVpdGhlclJlc2VhcmNoTm9yR3VpZGVsaW5lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE9yaWdpbmFsUmVzZWFyY2g6IHN1Y2ggYXMgcmFuZG9taXplZCB0cmlhbCwgb2JzZXJ2YXRpb25hbCBzdHVkeS5cclxuICAgKi9cclxuICBBcnRpY2xlSW5jbHVkZXNPcmlnaW5hbFJlc2VhcmNoOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFByZWxpbWluYXJ5QW5hbHlzaXM6IFByZWxpbWluYXJ5IGFuYWx5c2lzLlxyXG4gICAqL1xyXG4gIFByZWxpbWluYXJ5QW5hbHlzaXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUHJlcHJpbnQ6IFJlc3VsdHMgcHJlc2VudGVkIGluIHByZXByaW50IChwcmUtZmluYWwgcHVibGljYXRpb24pIGZvcm0uXHJcbiAgICovXHJcbiAgUHJlcHJpbnROb3RGaW5hbFB1YmxpY2F0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFByZXZlbnRpb25BbmRDb250cm9sOiBhYm91dCBwcmV2ZW50aXZlIGNhcmUgYW5kIGludGVydmVudGlvbnMuXHJcbiAgICovXHJcbiAgQXJ0aWNsZUFib3V0UHJldmVudGlvbkFuZENvbnRyb2w6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUHJvZ25vc2lzUHJlZGljdGlvbjogYWJvdXQgcHJlZGljdGluZyByaXNrIGZvciBzb21ldGhpbmcgb3IgcmlzayBmYWN0b3JzIGZvciBpdC5cclxuICAgKi9cclxuICBBcnRpY2xlQWJvdXRQcm9nbm9zaXNPclByZWRpY3Rpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUmF0ZWRBc0Nhc2VDb250cm9sOiBjbGFzc2lmaWVkIGFzIGNhc2UtY29udHJvbCBzdHVkeS5cclxuICAgKi9cclxuICBDbGFzc2lmaWVkQXNDYXNlQ29udHJvbFN0dWR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNDb21wYXJhdGl2ZUNvaG9ydDogY2xhc3NpZmllZCBhcyBjb21wYXJhdGl2ZSBjb2hvcnQgc3R1ZHkgKG9ic2VydmF0aW9uYWwpLlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc0NvbXBhcmF0aXZlQ29ob3J0U3R1ZHlPYnNlcnZhdGlvbmFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNDb250cm9sbGVkVHJpYWw6IGNsYXNzaWZpZWQgYXMgbm9ucmFuZG9taXplZCBjb250cm9sbGVkIHRyaWFsIChleHBlcmltZW50YWwpLlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc05vbnJhbmRvbWl6ZWRDb250cm9sbGVkVHJpYWxFeHBlcmltZW50YWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUmF0ZWRBc01peGVkTWV0aG9kczogY2xhc3NpZmllZCBhcyBtaXhlZC1tZXRob2RzIHN0dWR5LlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc01peGVkTWV0aG9kc1N0dWR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNObzogUmF0ZWQgYXMgbm8sIG5lZ2F0aXZlLCBhYnNlbnQsIG9yIGV4Y2x1ZGUuXHJcbiAgICovXHJcbiAgUmF0ZWRBc05vTmVnYXRpdmVBYnNlbnRPckV4Y2x1ZGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUmF0ZWRBc090aGVyOiBjbGFzc2lmaWVkIGFzIG90aGVyIGNvbmNlcHQgKG5vdCBlbHNld2hlcmUgY2xhc3NpZmllZCkuXHJcbiAgICovXHJcbiAgQ2xhc3NpZmllZEFzT3RoZXJDb25jZXB0Tm90RWxzZXdoZXJlQ2xhc3NpZmllZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBSYXRlZEFzUkNUOiBjbGFzc2lmaWVkIGFzIHJhbmRvbWl6ZWQgY29udHJvbGxlZCB0cmlhbC5cclxuICAgKi9cclxuICBDbGFzc2lmaWVkQXNSYW5kb21pemVkQ29udHJvbGxlZFRyaWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNVbmNvbnRyb2xsZWRTZXJpZXM6IGNsYXNzaWZpZWQgYXMgdW5jb250cm9sbGVkIGNvaG9ydCAoY2FzZSBzZXJpZXMpLlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc1VuY29udHJvbGxlZENvaG9ydENhc2VTZXJpZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogUmF0ZWRBc1llc1xyXG4gICAqL1xyXG4gIFJhdGVkQXNZZXNBZmZpcm1hdGl2ZVBvc2l0aXZlUHJlc2VudE9ySW5jbHVkZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBSZXNlYXJjaFByb3RvY29sOiBmb3IgcmVzZWFyY2ggcHJvdG9jb2xzLlxyXG4gICAqL1xyXG4gIEFydGljbGVQcm92aWRlc1Byb3RvY29sV2l0aG91dFJlc3VsdHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUmVzZWFyY2hTeW50aGVzaXM6IHN1Y2ggYXMgc3lzdGVtYXRpYyByZXZpZXcsIG1ldGEtYW5hbHlzaXMsIHJhcGlkIHJldmlldy5cclxuICAgKi9cclxuICBBcnRpY2xlSW5jbHVkZXNTeW50aGVzaXNPZlJlc2VhcmNoOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJpc2tPZkJpYXM6IFJpc2sgb2YgYmlhcyBhc3Nlc3NtZW50LlxyXG4gICAqL1xyXG4gIFJpc2tPZkJpYXNBc3Nlc3NtZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFN1Ymdyb3VwQW5hbHlzaXM6IFN1Ymdyb3VwIGFuYWx5c2lzLlxyXG4gICAqL1xyXG4gIFN1Ymdyb3VwQW5hbHlzaXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogVHJlYXRtZW50OiBhYm91dCB0aGVyYXBldXRpYyBpbnRlcnZlbnRpb25zLlxyXG4gICAqL1xyXG4gIEFydGljbGVBYm91dFRyZWF0bWVudDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbW1vbmx5IHVzZWQgY2xhc3NpZmllcnMgZm9yIGV2aWRlbmNlIHNldHMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRXZpZGVuY2VDbGFzc2lmaWVyQ29kaW5nczpFdmlkZW5jZUNsYXNzaWZpZXJDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIEFsbG9jQ29uY2VhbE5vdFN0YXRlZDogQWxsb2NhdGlvbiBjb25jZWFsbWVudCBub3Qgc3RhdGVkLlxyXG4gICAqL1xyXG4gIEFsbG9jYXRpb25Db25jZWFsbWVudE5vdFN0YXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJBbGxvY2F0aW9uIGNvbmNlYWxtZW50IG5vdCBzdGF0ZWRcIixcclxuICAgIGNvZGU6IFwiQWxsb2NDb25jZWFsTm90U3RhdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEJhc2VsaW5lSW1iYWxhbmNlOiBEaWZmZXJlbmNlcyBiZXR3ZWVuIGdyb3VwcyBhdCBzdGFydCBvZiB0cmlhbCBtYXkgY29uZm91bmQgb3IgYmlhcyB0aGUgZmluZGluZ3MuXHJcbiAgICovXHJcbiAgQmFzZWxpbmVJbWJhbGFuY2VzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJhc2VsaW5lIGltYmFsYW5jZXNcIixcclxuICAgIGNvZGU6IFwiQmFzZWxpbmVJbWJhbGFuY2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ09WSUQxOUh1bWFuUmVzZWFyY2g6IGNvbnRhaW5zIGh1bWFuIENPVklELTE5IGRpc2Vhc2UgaW4gdGhlIHJlc2VhcmNoIGRhdGEgYXMgYW55IHZhcmlhYmxlIChwb3B1bGF0aW9uLCBleHBvc3VyZSBvciBvdXRjb21lKS5cclxuICAgKi9cclxuICBDT1ZJRDE5SHVtYW5EYXRhSW5Qb3B1bGF0aW9uRXhwb3N1cmVPck91dGNvbWU6IHtcclxuICAgIGRpc3BsYXk6IFwiQ09WSUQtMTkgaHVtYW4gZGF0YSBpbiBwb3B1bGF0aW9uLCBleHBvc3VyZSwgb3Igb3V0Y29tZVwiLFxyXG4gICAgY29kZTogXCJDT1ZJRDE5SHVtYW5SZXNlYXJjaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDT1ZJRDE5UmVsZXZhbnQ6IE5vdCBhYm91dCBDT1ZJRC0xOSBidXQgcmVsZXZhbnQgdG8gQ09WSUQtMTkgbWFuYWdlbWVudCBvciB1bmRlcnN0YW5kaW5nLlxyXG4gICAqL1xyXG4gIENPVklEMTlSZWxldmFudEJ1dE5vdFNwZWNpZmljQXJ0aWNsZToge1xyXG4gICAgZGlzcGxheTogXCJDT1ZJRC0xOSByZWxldmFudCAoYnV0IG5vdCBzcGVjaWZpYykgYXJ0aWNsZVwiLFxyXG4gICAgY29kZTogXCJDT1ZJRDE5UmVsZXZhbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ09WSUQxOVNwZWNpZmljOiBBYm91dCBDT1ZJRC0xOS5cclxuICAgKi9cclxuICBDT1ZJRDE5U3BlY2lmaWNBcnRpY2xlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNPVklELTE5IHNwZWNpZmljIGFydGljbGVcIixcclxuICAgIGNvZGU6IFwiQ09WSUQxOVNwZWNpZmljXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIERpYWdub3NpczogYWJvdXQgbWV0aG9kcyB0byBkaXN0aW5ndWlzaCBoYXZpbmcgb3Igbm90IGhhdmluZyBhIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBBcnRpY2xlQWJvdXREaWFnbm9zaXM6IHtcclxuICAgIGRpc3BsYXk6IFwiQXJ0aWNsZSBhYm91dCBkaWFnbm9zaXNcIixcclxuICAgIGNvZGU6IFwiRGlhZ25vc2lzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEVhcmx5VHJpYWxUZXJtaW5hdGlvbjogRWFybHkgdHJpYWwgdGVybWluYXRpb24uXHJcbiAgICovXHJcbiAgRWFybHlUcmlhbFRlcm1pbmF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVhcmx5IHRyaWFsIHRlcm1pbmF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIkVhcmx5VHJpYWxUZXJtaW5hdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBHdWlkZWxpbmU6IGZvciBjbGluaWNhbCBwcmFjdGljZSBndWlkZWxpbmVzLlxyXG4gICAqL1xyXG4gIEFydGljbGVJbmNsdWRlc0d1aWRlbGluZToge1xyXG4gICAgZGlzcGxheTogXCJBcnRpY2xlIGluY2x1ZGVzIGd1aWRlbGluZVwiLFxyXG4gICAgY29kZTogXCJHdWlkZWxpbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogTm9CbGluZGluZzogTm8gYmxpbmRpbmcuXHJcbiAgICovXHJcbiAgTm9CbGluZGluZzoge1xyXG4gICAgZGlzcGxheTogXCJObyBibGluZGluZ1wiLFxyXG4gICAgY29kZTogXCJOb0JsaW5kaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIE5vSVRUOiBObyBpbnRlbnRpb24tdG8tdHJlYXQgYW5hbHlzaXMuXHJcbiAgICovXHJcbiAgTm9JbnRlbnRpb25Ub1RyZWF0QW5hbHlzaXM6IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gaW50ZW50aW9uLXRvLXRyZWF0IGFuYWx5c2lzXCIsXHJcbiAgICBjb2RlOiBcIk5vSVRUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIE5vdEFzc2Vzc2VkOiBOZWl0aGVyIHJhdGVkIGFzIHllcyBub3IgcmF0ZWQgYXMgbm8uXHJcbiAgICovXHJcbiAgTm90UmF0ZWROb3RBc3Nlc3NlZDoge1xyXG4gICAgZGlzcGxheTogXCJOb3QgcmF0ZWQsIG5vdCBhc3Nlc3NlZFwiLFxyXG4gICAgY29kZTogXCJOb3RBc3Nlc3NlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBOb3RSZXNlYXJjaE5vdEd1aWRlbGluZTogZm9yIHRoaW5ncyB0aGF0IGFyZSBub3QgcmVzZWFyY2ggcmVwb3J0cywgcmVzZWFyY2ggcHJvdG9jb2xzIG9yIGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgQXJ0aWNsZUlzTmVpdGhlclJlc2VhcmNoTm9yR3VpZGVsaW5lOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFydGljbGUgaXMgbmVpdGhlciByZXNlYXJjaCBub3IgZ3VpZGVsaW5lXCIsXHJcbiAgICBjb2RlOiBcIk5vdFJlc2VhcmNoTm90R3VpZGVsaW5lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIE9yaWdpbmFsUmVzZWFyY2g6IHN1Y2ggYXMgcmFuZG9taXplZCB0cmlhbCwgb2JzZXJ2YXRpb25hbCBzdHVkeS5cclxuICAgKi9cclxuICBBcnRpY2xlSW5jbHVkZXNPcmlnaW5hbFJlc2VhcmNoOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFydGljbGUgaW5jbHVkZXMgb3JpZ2luYWwgcmVzZWFyY2hcIixcclxuICAgIGNvZGU6IFwiT3JpZ2luYWxSZXNlYXJjaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQcmVsaW1pbmFyeUFuYWx5c2lzOiBQcmVsaW1pbmFyeSBhbmFseXNpcy5cclxuICAgKi9cclxuICBQcmVsaW1pbmFyeUFuYWx5c2lzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByZWxpbWluYXJ5IGFuYWx5c2lzXCIsXHJcbiAgICBjb2RlOiBcIlByZWxpbWluYXJ5QW5hbHlzaXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUHJlcHJpbnQ6IFJlc3VsdHMgcHJlc2VudGVkIGluIHByZXByaW50IChwcmUtZmluYWwgcHVibGljYXRpb24pIGZvcm0uXHJcbiAgICovXHJcbiAgUHJlcHJpbnROb3RGaW5hbFB1YmxpY2F0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByZXByaW50IChub3QgZmluYWwgcHVibGljYXRpb24pXCIsXHJcbiAgICBjb2RlOiBcIlByZXByaW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFByZXZlbnRpb25BbmRDb250cm9sOiBhYm91dCBwcmV2ZW50aXZlIGNhcmUgYW5kIGludGVydmVudGlvbnMuXHJcbiAgICovXHJcbiAgQXJ0aWNsZUFib3V0UHJldmVudGlvbkFuZENvbnRyb2w6IHtcclxuICAgIGRpc3BsYXk6IFwiQXJ0aWNsZSBhYm91dCBwcmV2ZW50aW9uIGFuZCBjb250cm9sXCIsXHJcbiAgICBjb2RlOiBcIlByZXZlbnRpb25BbmRDb250cm9sXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFByb2dub3Npc1ByZWRpY3Rpb246IGFib3V0IHByZWRpY3RpbmcgcmlzayBmb3Igc29tZXRoaW5nIG9yIHJpc2sgZmFjdG9ycyBmb3IgaXQuXHJcbiAgICovXHJcbiAgQXJ0aWNsZUFib3V0UHJvZ25vc2lzT3JQcmVkaWN0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFydGljbGUgYWJvdXQgcHJvZ25vc2lzIG9yIHByZWRpY3Rpb25cIixcclxuICAgIGNvZGU6IFwiUHJvZ25vc2lzUHJlZGljdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBSYXRlZEFzQ2FzZUNvbnRyb2w6IGNsYXNzaWZpZWQgYXMgY2FzZS1jb250cm9sIHN0dWR5LlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc0Nhc2VDb250cm9sU3R1ZHk6IHtcclxuICAgIGRpc3BsYXk6IFwiY2xhc3NpZmllZCBhcyBjYXNlLWNvbnRyb2wgc3R1ZHlcIixcclxuICAgIGNvZGU6IFwiUmF0ZWRBc0Nhc2VDb250cm9sXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNDb21wYXJhdGl2ZUNvaG9ydDogY2xhc3NpZmllZCBhcyBjb21wYXJhdGl2ZSBjb2hvcnQgc3R1ZHkgKG9ic2VydmF0aW9uYWwpLlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc0NvbXBhcmF0aXZlQ29ob3J0U3R1ZHlPYnNlcnZhdGlvbmFsOiB7XHJcbiAgICBkaXNwbGF5OiBcImNsYXNzaWZpZWQgYXMgY29tcGFyYXRpdmUgY29ob3J0IHN0dWR5IChvYnNlcnZhdGlvbmFsKVwiLFxyXG4gICAgY29kZTogXCJSYXRlZEFzQ29tcGFyYXRpdmVDb2hvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUmF0ZWRBc0NvbnRyb2xsZWRUcmlhbDogY2xhc3NpZmllZCBhcyBub25yYW5kb21pemVkIGNvbnRyb2xsZWQgdHJpYWwgKGV4cGVyaW1lbnRhbCkuXHJcbiAgICovXHJcbiAgQ2xhc3NpZmllZEFzTm9ucmFuZG9taXplZENvbnRyb2xsZWRUcmlhbEV4cGVyaW1lbnRhbDoge1xyXG4gICAgZGlzcGxheTogXCJjbGFzc2lmaWVkIGFzIG5vbnJhbmRvbWl6ZWQgY29udHJvbGxlZCB0cmlhbCAoZXhwZXJpbWVudGFsKVwiLFxyXG4gICAgY29kZTogXCJSYXRlZEFzQ29udHJvbGxlZFRyaWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNNaXhlZE1ldGhvZHM6IGNsYXNzaWZpZWQgYXMgbWl4ZWQtbWV0aG9kcyBzdHVkeS5cclxuICAgKi9cclxuICBDbGFzc2lmaWVkQXNNaXhlZE1ldGhvZHNTdHVkeToge1xyXG4gICAgZGlzcGxheTogXCJjbGFzc2lmaWVkIGFzIG1peGVkLW1ldGhvZHMgc3R1ZHlcIixcclxuICAgIGNvZGU6IFwiUmF0ZWRBc01peGVkTWV0aG9kc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBSYXRlZEFzTm86IFJhdGVkIGFzIG5vLCBuZWdhdGl2ZSwgYWJzZW50LCBvciBleGNsdWRlLlxyXG4gICAqL1xyXG4gIFJhdGVkQXNOb05lZ2F0aXZlQWJzZW50T3JFeGNsdWRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJhdGVkIGFzIG5vLCBuZWdhdGl2ZSwgYWJzZW50LCBvciBleGNsdWRlXCIsXHJcbiAgICBjb2RlOiBcIlJhdGVkQXNOb1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBSYXRlZEFzT3RoZXI6IGNsYXNzaWZpZWQgYXMgb3RoZXIgY29uY2VwdCAobm90IGVsc2V3aGVyZSBjbGFzc2lmaWVkKS5cclxuICAgKi9cclxuICBDbGFzc2lmaWVkQXNPdGhlckNvbmNlcHROb3RFbHNld2hlcmVDbGFzc2lmaWVkOiB7XHJcbiAgICBkaXNwbGF5OiBcImNsYXNzaWZpZWQgYXMgb3RoZXIgY29uY2VwdCAobm90IGVsc2V3aGVyZSBjbGFzc2lmaWVkKVwiLFxyXG4gICAgY29kZTogXCJSYXRlZEFzT3RoZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUmF0ZWRBc1JDVDogY2xhc3NpZmllZCBhcyByYW5kb21pemVkIGNvbnRyb2xsZWQgdHJpYWwuXHJcbiAgICovXHJcbiAgQ2xhc3NpZmllZEFzUmFuZG9taXplZENvbnRyb2xsZWRUcmlhbDoge1xyXG4gICAgZGlzcGxheTogXCJjbGFzc2lmaWVkIGFzIHJhbmRvbWl6ZWQgY29udHJvbGxlZCB0cmlhbFwiLFxyXG4gICAgY29kZTogXCJSYXRlZEFzUkNUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJhdGVkQXNVbmNvbnRyb2xsZWRTZXJpZXM6IGNsYXNzaWZpZWQgYXMgdW5jb250cm9sbGVkIGNvaG9ydCAoY2FzZSBzZXJpZXMpLlxyXG4gICAqL1xyXG4gIENsYXNzaWZpZWRBc1VuY29udHJvbGxlZENvaG9ydENhc2VTZXJpZXM6IHtcclxuICAgIGRpc3BsYXk6IFwiY2xhc3NpZmllZCBhcyB1bmNvbnRyb2xsZWQgY29ob3J0IChjYXNlIHNlcmllcylcIixcclxuICAgIGNvZGU6IFwiUmF0ZWRBc1VuY29udHJvbGxlZFNlcmllc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZXZpZGVuY2UtY2xhc3NpZmllci1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBSYXRlZEFzWWVzXHJcbiAgICovXHJcbiAgUmF0ZWRBc1llc0FmZmlybWF0aXZlUG9zaXRpdmVQcmVzZW50T3JJbmNsdWRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJhdGVkIGFzIHllcywgYWZmaXJtYXRpdmUsIHBvc2l0aXZlLCBwcmVzZW50LCBvciBpbmNsdWRlXCIsXHJcbiAgICBjb2RlOiBcIlJhdGVkQXNZZXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUmVzZWFyY2hQcm90b2NvbDogZm9yIHJlc2VhcmNoIHByb3RvY29scy5cclxuICAgKi9cclxuICBBcnRpY2xlUHJvdmlkZXNQcm90b2NvbFdpdGhvdXRSZXN1bHRzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFydGljbGUgcHJvdmlkZXMgcHJvdG9jb2wgd2l0aG91dCByZXN1bHRzXCIsXHJcbiAgICBjb2RlOiBcIlJlc2VhcmNoUHJvdG9jb2xcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUmVzZWFyY2hTeW50aGVzaXM6IHN1Y2ggYXMgc3lzdGVtYXRpYyByZXZpZXcsIG1ldGEtYW5hbHlzaXMsIHJhcGlkIHJldmlldy5cclxuICAgKi9cclxuICBBcnRpY2xlSW5jbHVkZXNTeW50aGVzaXNPZlJlc2VhcmNoOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFydGljbGUgaW5jbHVkZXMgc3ludGhlc2lzIG9mIHJlc2VhcmNoXCIsXHJcbiAgICBjb2RlOiBcIlJlc2VhcmNoU3ludGhlc2lzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJpc2tPZkJpYXM6IFJpc2sgb2YgYmlhcyBhc3Nlc3NtZW50LlxyXG4gICAqL1xyXG4gIFJpc2tPZkJpYXNBc3Nlc3NtZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIlJpc2sgb2YgYmlhcyBhc3Nlc3NtZW50XCIsXHJcbiAgICBjb2RlOiBcIlJpc2tPZkJpYXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2V2aWRlbmNlLWNsYXNzaWZpZXItY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogU3ViZ3JvdXBBbmFseXNpczogU3ViZ3JvdXAgYW5hbHlzaXMuXHJcbiAgICovXHJcbiAgU3ViZ3JvdXBBbmFseXNpczoge1xyXG4gICAgZGlzcGxheTogXCJTdWJncm91cCBhbmFseXNpc1wiLFxyXG4gICAgY29kZTogXCJTdWJncm91cEFuYWx5c2lzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFRyZWF0bWVudDogYWJvdXQgdGhlcmFwZXV0aWMgaW50ZXJ2ZW50aW9ucy5cclxuICAgKi9cclxuICBBcnRpY2xlQWJvdXRUcmVhdG1lbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQXJ0aWNsZSBhYm91dCB0cmVhdG1lbnRcIixcclxuICAgIGNvZGU6IFwiVHJlYXRtZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9ldmlkZW5jZS1jbGFzc2lmaWVyLWNvZGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=