// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/certainty-rating|4.3.0
/**
 * The assessment of quality, confidence, or certainty.
 */
export const CertaintyRatingCodings = {
    /**
     * absent: possible reason for increasing quality rating was checked and found to be absent.
     */
    Absent: {
        display: "absent",
        code: "absent",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * downcode1: reduce quality rating by 1.
     */
    ReduceRating1: {
        display: "reduce rating: -1",
        code: "downcode1",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * downcode2: reduce quality rating by 2.
     */
    ReduceRating2: {
        display: "reduce rating: -2",
        code: "downcode2",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * downcode3: reduce quality rating by 3.
     */
    ReduceRating3: {
        display: "reduce rating: -3",
        code: "downcode3",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * extremely-serious-concern: extremely serious concern.
     */
    ExtremelySeriousConcern: {
        display: "extremely serious concern",
        code: "extremely-serious-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * high: High quality evidence.
     */
    HighQuality: {
        display: "High quality",
        code: "high",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * low: Low quality evidence.
     */
    LowQuality: {
        display: "Low quality",
        code: "low",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * moderate: Moderate quality evidence.
     */
    ModerateQuality: {
        display: "Moderate quality",
        code: "moderate",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * no-change: no change to quality rating.
     */
    NoChangeToRating: {
        display: "no change to rating",
        code: "no-change",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * no-concern: no serious concern.
     */
    NoSeriousConcern: {
        display: "no serious concern",
        code: "no-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * present: possible reason for increasing quality rating was checked and found to be present.
     */
    Present: {
        display: "present",
        code: "present",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * serious-concern: serious concern.
     */
    SeriousConcern: {
        display: "serious concern",
        code: "serious-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * upcode1: increase quality rating by 1.
     */
    IncreaseRatingPlus1: {
        display: "increase rating: +1",
        code: "upcode1",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * upcode2: increase quality rating by 2.
     */
    IncreaseRatingPlus2: {
        display: "increase rating: +2",
        code: "upcode2",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * very-low: Very low quality evidence.
     */
    VeryLowQuality: {
        display: "Very low quality",
        code: "very-low",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
    /**
     * very-serious-concern: very serious concern.
     */
    VerySeriousConcern: {
        display: "very serious concern",
        code: "very-serious-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-rating",
    },
};
//# sourceMappingURL=data:application/json;base64,