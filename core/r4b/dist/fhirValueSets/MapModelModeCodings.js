// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-model-mode|4.3.0
/**
 * How the referenced structure is used in this mapping.
 */
export const MapModelModeCodings = {
    /**
     * produced: This structure describes an instance that the mapping engine may ask to create that is used a target of data.
     */
    ProducedStructureDefinition: {
        display: "Produced Structure Definition",
        code: "produced",
        system: "http://hl7.org/fhir/map-model-mode",
    },
    /**
     * queried: This structure describes an instance that the mapping engine may ask for that is used a source of data.
     */
    QueriedStructureDefinition: {
        display: "Queried Structure Definition",
        code: "queried",
        system: "http://hl7.org/fhir/map-model-mode",
    },
    /**
     * source: This structure describes an instance passed to the mapping engine that is used a source of data.
     */
    SourceStructureDefinition: {
        display: "Source Structure Definition",
        code: "source",
        system: "http://hl7.org/fhir/map-model-mode",
    },
    /**
     * target: This structure describes an instance passed to the mapping engine that is used a target of data.
     */
    TargetStructureDefinition: {
        display: "Target Structure Definition",
        code: "target",
        system: "http://hl7.org/fhir/map-model-mode",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwTW9kZWxNb2RlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWFwTW9kZWxNb2RlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxtRUFBbUU7QUEwQm5FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsMkJBQTJCLEVBQUU7UUFDM0IsT0FBTyxFQUFFLCtCQUErQjtRQUN4QyxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDO0lBQ0Q7O09BRUc7SUFDSCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9DQUFvQztLQUM3QztJQUNEOztPQUVHO0lBQ0gseUJBQXlCLEVBQUU7UUFDekIsT0FBTyxFQUFFLDZCQUE2QjtRQUN0QyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0M7SUFDRDs7T0FFRztJQUNILHlCQUF5QixFQUFFO1FBQ3pCLE9BQU8sRUFBRSw2QkFBNkI7UUFDdEMsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsb0NBQW9DO0tBQzdDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWFwLW1vZGVsLW1vZGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBIb3cgdGhlIHJlZmVyZW5jZWQgc3RydWN0dXJlIGlzIHVzZWQgaW4gdGhpcyBtYXBwaW5nLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFwTW9kZWxNb2RlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBwcm9kdWNlZDogVGhpcyBzdHJ1Y3R1cmUgZGVzY3JpYmVzIGFuIGluc3RhbmNlIHRoYXQgdGhlIG1hcHBpbmcgZW5naW5lIG1heSBhc2sgdG8gY3JlYXRlIHRoYXQgaXMgdXNlZCBhIHRhcmdldCBvZiBkYXRhLlxyXG4gICAqL1xyXG4gIFByb2R1Y2VkU3RydWN0dXJlRGVmaW5pdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBxdWVyaWVkOiBUaGlzIHN0cnVjdHVyZSBkZXNjcmliZXMgYW4gaW5zdGFuY2UgdGhhdCB0aGUgbWFwcGluZyBlbmdpbmUgbWF5IGFzayBmb3IgdGhhdCBpcyB1c2VkIGEgc291cmNlIG9mIGRhdGEuXHJcbiAgICovXHJcbiAgUXVlcmllZFN0cnVjdHVyZURlZmluaXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc291cmNlOiBUaGlzIHN0cnVjdHVyZSBkZXNjcmliZXMgYW4gaW5zdGFuY2UgcGFzc2VkIHRvIHRoZSBtYXBwaW5nIGVuZ2luZSB0aGF0IGlzIHVzZWQgYSBzb3VyY2Ugb2YgZGF0YS5cclxuICAgKi9cclxuICBTb3VyY2VTdHJ1Y3R1cmVEZWZpbml0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRhcmdldDogVGhpcyBzdHJ1Y3R1cmUgZGVzY3JpYmVzIGFuIGluc3RhbmNlIHBhc3NlZCB0byB0aGUgbWFwcGluZyBlbmdpbmUgdGhhdCBpcyB1c2VkIGEgdGFyZ2V0IG9mIGRhdGEuXHJcbiAgICovXHJcbiAgVGFyZ2V0U3RydWN0dXJlRGVmaW5pdGlvbjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEhvdyB0aGUgcmVmZXJlbmNlZCBzdHJ1Y3R1cmUgaXMgdXNlZCBpbiB0aGlzIG1hcHBpbmcuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWFwTW9kZWxNb2RlQ29kaW5nczpNYXBNb2RlbE1vZGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIHByb2R1Y2VkOiBUaGlzIHN0cnVjdHVyZSBkZXNjcmliZXMgYW4gaW5zdGFuY2UgdGhhdCB0aGUgbWFwcGluZyBlbmdpbmUgbWF5IGFzayB0byBjcmVhdGUgdGhhdCBpcyB1c2VkIGEgdGFyZ2V0IG9mIGRhdGEuXHJcbiAgICovXHJcbiAgUHJvZHVjZWRTdHJ1Y3R1cmVEZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb2R1Y2VkIFN0cnVjdHVyZSBEZWZpbml0aW9uXCIsXHJcbiAgICBjb2RlOiBcInByb2R1Y2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtbW9kZWwtbW9kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcXVlcmllZDogVGhpcyBzdHJ1Y3R1cmUgZGVzY3JpYmVzIGFuIGluc3RhbmNlIHRoYXQgdGhlIG1hcHBpbmcgZW5naW5lIG1heSBhc2sgZm9yIHRoYXQgaXMgdXNlZCBhIHNvdXJjZSBvZiBkYXRhLlxyXG4gICAqL1xyXG4gIFF1ZXJpZWRTdHJ1Y3R1cmVEZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlF1ZXJpZWQgU3RydWN0dXJlIERlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwicXVlcmllZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLW1vZGVsLW1vZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNvdXJjZTogVGhpcyBzdHJ1Y3R1cmUgZGVzY3JpYmVzIGFuIGluc3RhbmNlIHBhc3NlZCB0byB0aGUgbWFwcGluZyBlbmdpbmUgdGhhdCBpcyB1c2VkIGEgc291cmNlIG9mIGRhdGEuXHJcbiAgICovXHJcbiAgU291cmNlU3RydWN0dXJlRGVmaW5pdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJTb3VyY2UgU3RydWN0dXJlIERlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwic291cmNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtbW9kZWwtbW9kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdGFyZ2V0OiBUaGlzIHN0cnVjdHVyZSBkZXNjcmliZXMgYW4gaW5zdGFuY2UgcGFzc2VkIHRvIHRoZSBtYXBwaW5nIGVuZ2luZSB0aGF0IGlzIHVzZWQgYSB0YXJnZXQgb2YgZGF0YS5cclxuICAgKi9cclxuICBUYXJnZXRTdHJ1Y3R1cmVEZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRhcmdldCBTdHJ1Y3R1cmUgRGVmaW5pdGlvblwiLFxyXG4gICAgY29kZTogXCJ0YXJnZXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21hcC1tb2RlbC1tb2RlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19