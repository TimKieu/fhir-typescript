// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/administration-method-codes|4.3.0
/**
 * This value set includes some method codes from SNOMED CT - provided as an exemplar
 */
export const AdministrationMethodCodings = {
    /**
     * Code: 417924000
     */
    Apply: {
        display: "Apply",
        code: "417924000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 418283001
     */
    Administer: {
        display: "Administer",
        code: "418283001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 419385000
     */
    Use: {
        display: "Use",
        code: "419385000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 419582001
     */
    Give: {
        display: "Give",
        code: "419582001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 419652001
     */
    Take: {
        display: "Take",
        code: "419652001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 419747000
     */
    Chew: {
        display: "Chew",
        code: "419747000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420045007
     */
    Suck: {
        display: "Suck",
        code: "420045007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420246001
     */
    AtDosingInstructionFragmentQualifierValue: {
        display: "At - dosing instruction fragment (qualifier value)",
        code: "420246001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420247005
     */
    DosingInstructionImperativeQualifierValue: {
        display: "Dosing instruction imperative (qualifier value)",
        code: "420247005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420295001
     */
    OnlyDosingInstructionFragmentQualifierValue: {
        display: "Only - dosing instruction fragment (qualifier value)",
        code: "420295001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420341009
     */
    ConstantDosingInstructionFragmentQualifierValue: {
        display: "Constant - dosing instruction fragment (qualifier value)",
        code: "420341009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420360002
     */
    SniffDosingInstructionImperativeQualifierValue: {
        display: "Sniff - dosing instruction imperative (qualifier value)",
        code: "420360002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420484009
     */
    SubtractDosingInstructionFragmentQualifierValue: {
        display: "Subtract - dosing instruction fragment (qualifier value)",
        code: "420484009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420503003
     */
    AsDosingInstructionFragmentQualifierValue: {
        display: "As - dosing instruction fragment (qualifier value)",
        code: "420503003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420561004
     */
    OrDosingInstructionFragmentQualifierValue: {
        display: "Or - dosing instruction fragment (qualifier value)",
        code: "420561004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420604000
     */
    FinishDosingInstructionImperativeQualifierValue: {
        display: "Finish - dosing instruction imperative (qualifier value)",
        code: "420604000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420606003
     */
    ShampooDosingInstructionImperativeQualifierValue: {
        display: "Shampoo - dosing instruction imperative (qualifier value)",
        code: "420606003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420620005
     */
    PushDosingInstructionImperativeQualifierValue: {
        display: "Push - dosing instruction imperative (qualifier value)",
        code: "420620005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420652005
     */
    UntilGoneDosingInstructionFragmentQualifierValue: {
        display: "Until gone - dosing instruction fragment (qualifier value)",
        code: "420652005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420771004
     */
    UponDosingInstructionFragmentQualifierValue: {
        display: "Upon - dosing instruction fragment (qualifier value)",
        code: "420771004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420806001
     */
    PerDosingInstructionFragmentQualifierValue: {
        display: "Per - dosing instruction fragment (qualifier value)",
        code: "420806001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420883007
     */
    SparinglyDosingInstructionFragmentQualifierValue: {
        display: "Sparingly - dosing instruction fragment (qualifier value)",
        code: "420883007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420942008
     */
    CallDosingInstructionFragmentQualifierValue: {
        display: "Call - dosing instruction fragment (qualifier value)",
        code: "420942008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 420974001
     */
    WhenDosingInstructionFragmentQualifierValue: {
        display: "When - dosing instruction fragment (qualifier value)",
        code: "420974001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421035004
     */
    ToDosingInstructionFragmentQualifierValue: {
        display: "To - dosing instruction fragment (qualifier value)",
        code: "421035004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421066005
     */
    PlaceDosingInstructionImperativeQualifierValue: {
        display: "Place - dosing instruction imperative (qualifier value)",
        code: "421066005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421067001
     */
    ThenDosingInstructionFragmentQualifierValue: {
        display: "Then - dosing instruction fragment (qualifier value)",
        code: "421067001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421134003
     */
    InhaleDosingInstructionImperativeQualifierValue: {
        display: "Inhale - dosing instruction imperative (qualifier value)",
        code: "421134003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421139008
     */
    HoldDosingInstructionFragmentQualifierValue: {
        display: "Hold - dosing instruction fragment (qualifier value)",
        code: "421139008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421206002
     */
    MultiplyDosingInstructionFragmentQualifierValue: {
        display: "Multiply - dosing instruction fragment (qualifier value)",
        code: "421206002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421257003
     */
    InsertDosingInstructionImperativeQualifierValue: {
        display: "Insert - dosing instruction imperative (qualifier value)",
        code: "421257003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421286000
     */
    DiscontinueDosingInstructionImperativeQualifierValue: {
        display: "Discontinue - dosing instruction imperative (qualifier value)",
        code: "421286000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421298005
     */
    SwishAndSwallowDosingInstructionImperativeQualifierValue: {
        display: "Swish and swallow - dosing instruction imperative (qualifier value)",
        code: "421298005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421399004
     */
    DiluteDosingInstructionImperativeQualifierValue: {
        display: "Dilute - dosing instruction imperative (qualifier value)",
        code: "421399004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421463005
     */
    WithDosingInstructionFragmentQualifierValue: {
        display: "With - dosing instruction fragment (qualifier value)",
        code: "421463005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421484000
     */
    ThenDiscontinueDosingInstructionFragmentQualifierValue: {
        display: "Then discontinue - dosing instruction fragment (qualifier value)",
        code: "421484000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421521009
     */
    SwallowDosingInstructionImperativeQualifierValue: {
        display: "Swallow - dosing instruction imperative (qualifier value)",
        code: "421521009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421538008
     */
    InstillDosingInstructionImperativeQualifierValue: {
        display: "Instill - dosing instruction imperative (qualifier value)",
        code: "421538008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421548005
     */
    UntilDosingInstructionFragmentQualifierValue: {
        display: "Until - dosing instruction fragment (qualifier value)",
        code: "421548005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421612001
     */
    EveryDosingInstructionFragmentQualifierValue: {
        display: "Every - dosing instruction fragment (qualifier value)",
        code: "421612001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421682005
     */
    DissolveDosingInstructionImperativeQualifierValue: {
        display: "Dissolve - dosing instruction imperative (qualifier value)",
        code: "421682005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421718005
     */
    BeforeDosingInstructionFragmentQualifierValue: {
        display: "Before - dosing instruction fragment (qualifier value)",
        code: "421718005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421723005
     */
    NowDosingInstructionFragmentQualifierValue: {
        display: "Now - dosing instruction fragment (qualifier value)",
        code: "421723005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421769005
     */
    FollowDirectionsQualifierValue: {
        display: "Follow directions (qualifier value)",
        code: "421769005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421803000
     */
    IfDosingInstructionFragmentQualifierValue: {
        display: "If - dosing instruction fragment (qualifier value)",
        code: "421803000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421805007
     */
    SwishDosingInstructionImperativeQualifierValue: {
        display: "Swish - dosing instruction imperative (qualifier value)",
        code: "421805007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421829000
     */
    AndDosingInstructionFragmentQualifierValue: {
        display: "And - dosing instruction fragment (qualifier value)",
        code: "421829000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421832002
     */
    TwiceDosingInstructionFragmentQualifierValue: {
        display: "Twice - dosing instruction fragment (qualifier value)",
        code: "421832002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421939007
     */
    FollowDosingInstructionImperativeQualifierValue: {
        display: "Follow - dosing instruction imperative (qualifier value)",
        code: "421939007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421984009
     */
    UntilFinishedDosingInstructionFragmentQualifierValue: {
        display: "Until finished - dosing instruction fragment (qualifier value)",
        code: "421984009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 421994004
     */
    DuringDosingInstructionFragmentQualifierValue: {
        display: "During - dosing instruction fragment (qualifier value)",
        code: "421994004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422033008
     */
    DivideDosingInstructionFragmentQualifierValue: {
        display: "Divide - dosing instruction fragment (qualifier value)",
        code: "422033008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422096002
     */
    DosingInstructionFragmentQualifierValue: {
        display: "Dosing instruction fragment (qualifier value)",
        code: "422096002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422106007
     */
    AddDosingInstructionFragmentQualifierValue: {
        display: "Add - dosing instruction fragment (qualifier value)",
        code: "422106007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422114001
     */
    OnceDosingInstructionFragmentQualifierValue: {
        display: "Once - dosing instruction fragment (qualifier value)",
        code: "422114001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422145002
     */
    InjectDosingInstructionImperativeQualifierValue: {
        display: "Inject - dosing instruction imperative (qualifier value)",
        code: "422145002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422152000
     */
    WashDosingInstructionImperativeQualifierValue: {
        display: "Wash - dosing instruction imperative (qualifier value)",
        code: "422152000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422219000
     */
    SprinkleDosingInstructionImperativeQualifierValue: {
        display: "Sprinkle - dosing instruction imperative (qualifier value)",
        code: "422219000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 422327006
     */
    ThenStopDosingInstructionFragmentQualifierValue: {
        display: "Then stop - dosing instruction fragment (qualifier value)",
        code: "422327006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 769364006
     */
    MedicationContainerEmptyQualifierValue: {
        display: "Medication container empty (qualifier value)",
        code: "769364006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 769407000
     */
    ThoroughlyDosingInstructionFragment: {
        display: "Thoroughly - dosing instruction fragment",
        code: "769407000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 769408005
     */
    CompletelyDosingInstructionFragmentQualifierValue: {
        display: "Completely - dosing instruction fragment (qualifier value)",
        code: "769408005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 769409002
     */
    DeeplyDosingInstructionFragmentQualifierValue: {
        display: "Deeply - dosing instruction fragment (qualifier value)",
        code: "769409002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 769410007
     */
    RepeatedlyDosingInstructionFragmentQualifierValue: {
        display: "Repeatedly - dosing instruction fragment (qualifier value)",
        code: "769410007",
        system: "http://snomed.info/sct",
    },
};
//# sourceMappingURL=data:application/json;base64,