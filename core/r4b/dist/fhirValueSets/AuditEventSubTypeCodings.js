// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/audit-event-sub-type|4.3.0
/**
 * More detailed code concerning the type of the audit event - defined by DICOM with some FHIR specific additions.
 */
export const AuditEventSubTypeCodings = {
    /**
     * 110120: Audit event: Application Entity has started
     */
    ApplicationStart: {
        display: "Application Start",
        code: "110120",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110121: Audit event: Application Entity has stopped
     */
    ApplicationStop: {
        display: "Application Stop",
        code: "110121",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110122: Audit event: User login has been attempted
     */
    Login: {
        display: "Login",
        code: "110122",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110123: Audit event: User logout has been attempted
     */
    Logout: {
        display: "Logout",
        code: "110123",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110124: Audit event: Node has been attached
     */
    Attach: {
        display: "Attach",
        code: "110124",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110125: Audit event: Node has been detached
     */
    Detach: {
        display: "Detach",
        code: "110125",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110126: Audit event: Node Authentication has been attempted
     */
    NodeAuthentication: {
        display: "Node Authentication",
        code: "110126",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110127: Audit event: Emergency Override has started
     */
    EmergencyOverrideStarted: {
        display: "Emergency Override Started",
        code: "110127",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110128: Audit event: Network configuration has been changed
     */
    NetworkConfiguration: {
        display: "Network Configuration",
        code: "110128",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110129: Audit event: Security configuration has been changed
     */
    SecurityConfiguration: {
        display: "Security Configuration",
        code: "110129",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110130: Audit event: Hardware configuration has been changed
     */
    HardwareConfiguration: {
        display: "Hardware Configuration",
        code: "110130",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110131: Audit event: Software configuration has been changed
     */
    SoftwareConfiguration: {
        display: "Software Configuration",
        code: "110131",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110132: Audit event: A use of a restricted function has been attempted
     */
    UseOfRestrictedFunction: {
        display: "Use of Restricted Function",
        code: "110132",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110133: Audit event: Audit recording has been stopped
     */
    AuditRecordingStopped: {
        display: "Audit Recording Stopped",
        code: "110133",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110134: Audit event: Audit recording has been started
     */
    AuditRecordingStarted: {
        display: "Audit Recording Started",
        code: "110134",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110135: Audit event: Security attributes of an object have been changed
     */
    ObjectSecurityAttributesChanged: {
        display: "Object Security Attributes Changed",
        code: "110135",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110136: Audit event: Security roles have been changed
     */
    SecurityRolesChanged: {
        display: "Security Roles Changed",
        code: "110136",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110137: Audit event: Security attributes of a user have been changed
     */
    UserSecurityAttributesChanged: {
        display: "User security Attributes Changed",
        code: "110137",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110138: Audit event: Emergency Override has Stopped
     */
    EmergencyOverrideStopped: {
        display: "Emergency Override Stopped",
        code: "110138",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110139: Audit event: Remote Service Operation has Begun
     */
    RemoteServiceOperationStarted: {
        display: "Remote Service Operation Started",
        code: "110139",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110140: Audit event: Remote Service Operation has Stopped
     */
    RemoteServiceOperationStopped: {
        display: "Remote Service Operation Stopped",
        code: "110140",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110141: Audit event: Local Service Operation has Begun
     */
    LocalServiceOperationStarted: {
        display: "Local Service Operation Started",
        code: "110141",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110142: Audit event: Local Service Operation Stopped
     */
    LocalServiceOperationStopped: {
        display: "Local Service Operation Stopped",
        code: "110142",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * batch: perform a set of a separate interactions in a single http operation
     */
    Batch: {
        display: "batch",
        code: "batch",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * capabilities: Get a Capability Statement for the system.
     */
    Capabilities: {
        display: "capabilities",
        code: "capabilities",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: {
        display: "create",
        code: "create",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * delete: Delete a resource.
     */
    Delete: {
        display: "delete",
        code: "delete",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history: Retrieve the change history for a particular resource, type of resource, or the entire system.
     */
    History: {
        display: "history",
        code: "history",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-instance: Retrieve the change history for a particular resource.
     */
    HistoryInstance: {
        display: "history-instance",
        code: "history-instance",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-system: Retrieve the change history for all resources on a system.
     */
    HistorySystem: {
        display: "history-system",
        code: "history-system",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-type: Retrieve the change history for all resources of a particular type.
     */
    HistoryType: {
        display: "history-type",
        code: "history-type",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * operation: Perform an operation as defined by an OperationDefinition.
     */
    Operation: {
        display: "operation",
        code: "operation",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * patch: Update an existing resource by posting a set of changes to it.
     */
    Patch: {
        display: "patch",
        code: "patch",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * read: Read the current state of the resource.
     */
    Read: {
        display: "read",
        code: "read",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * search: Search a resource type or all resources based on some filter criteria.
     */
    Search: {
        display: "search",
        code: "search",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * search-system: Search all resources based on some filter criteria.
     */
    SearchSystem: {
        display: "search-system",
        code: "search-system",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * search-type: Search all resources of the specified type based on some filter criteria.
     */
    SearchType: {
        display: "search-type",
        code: "search-type",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * transaction: Update, create or delete a set of resources as a single transaction.
     */
    Transaction: {
        display: "transaction",
        code: "transaction",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * update: Update an existing resource by its id (or create it if it is new).
     */
    Update: {
        display: "update",
        code: "update",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * vread: Read the state of a specific version of the resource.
     */
    Vread: {
        display: "vread",
        code: "vread",
        system: "http://hl7.org/fhir/restful-interaction",
    },
};
//# sourceMappingURL=data:application/json;base64,