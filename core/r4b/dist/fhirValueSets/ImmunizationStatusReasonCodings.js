// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-status-reason|4.3.0
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why a dose of vaccine was not administered. This value set is provided as a suggestive example.
 */
export const ImmunizationStatusReasonCodings = {
    /**
     * Code: 171257003
     */
    NoConsentTetanusLowDoseDiphtheriaVaccineFinding: {
        display: "No consent - Tetanus/low dose diphtheria vaccine (finding)",
        code: "171257003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171265000
     */
    PertussisVaccineRefused: {
        display: "Pertussis vaccine refused",
        code: "171265000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171266004
     */
    NoConsentDiphtheriaImmunization: {
        display: "No consent - diphtheria immunization",
        code: "171266004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171267008
     */
    NoConsentTetanusImmunization: {
        display: "No consent - tetanus immunization",
        code: "171267008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171268003
     */
    PolioImmunizationRefused: {
        display: "Polio immunization refused",
        code: "171268003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171269006
     */
    NoConsentMeaslesImmunization: {
        display: "No consent - measles immunization",
        code: "171269006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171270007
     */
    NoConsentRubellaImmunization: {
        display: "No consent - rubella immunization",
        code: "171270007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171271006
     */
    NoConsentBCG: {
        display: "No consent - BCG",
        code: "171271006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171272004
     */
    NoConsentInfluenzaImmunization: {
        display: "No consent - influenza immunization",
        code: "171272004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171280006
     */
    NoConsentForMMR: {
        display: "No consent for MMR",
        code: "171280006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171283008
     */
    NoConsentForAnyPrimaryImmunizationFinding: {
        display: "No consent for any primary immunization (finding)",
        code: "171283008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171285001
     */
    NoConsentPreSchoolVaccinations: {
        display: "No consent - pre-school vaccinations",
        code: "171285001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171286000
     */
    NoConsentSchoolExitVaccinations: {
        display: "No consent - school exit vaccinations",
        code: "171286000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171291004
     */
    NoConsentHaemophilusInfluenzaeTypeBImmunizationFinding: {
        display: "No consent - Haemophilus influenzae type B immunization (finding)",
        code: "171291004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171292006
     */
    NoConsentPneumococcalImmunization: {
        display: "No consent pneumococcal immunization",
        code: "171292006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171293001
     */
    NoConsentForMRMeaslesRubellaVaccine: {
        display: "No consent for MR - Measles/rubella vaccine",
        code: "171293001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 268559007
     */
    NoConsentForAnyImmunization: {
        display: "No consent for any immunization",
        code: "268559007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 310376006
     */
    ImmunizationConsentNotGiven: {
        display: "Immunization consent not given",
        code: "310376006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 310839003
     */
    NoConsentForMMR1: {
        display: "No consent for MMR1",
        code: "310839003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 310840001
     */
    NoConsentForMeaslesMumpsRubellaTwo: {
        display: "No consent for measles/mumps/rubella two",
        code: "310840001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 314768003
     */
    NoConsentDTPImmunization: {
        display: "No consent DTP immunization",
        code: "314768003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 314769006
     */
    NoConsentDTImmunization: {
        display: "No consent DT immunization",
        code: "314769006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 314936001
     */
    NoConsentForMeningitisCImmunization: {
        display: "No consent for meningitis C immunization",
        code: "314936001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 407598009
     */
    NoConsentFor3rdHIBBooster: {
        display: "No consent for 3rd HIB booster",
        code: "407598009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: IMMUNE
     */
    IMMUNE: {
        code: "IMMUNE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * Code: MEDPREC
     */
    MEDPREC: {
        code: "MEDPREC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * Code: OSTOCK
     */
    OSTOCK: {
        code: "OSTOCK",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * Code: PATOBJ
     */
    PATOBJ: {
        code: "PATOBJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
};
//# sourceMappingURL=data:application/json;base64,