// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/knowledge-resource-types|4.3.0
/**
 * A list of all the knowledge resource types defined in this version of the FHIR specification.
 */
export const KnowledgeResourceTypesCodings = {
    /**
     * ActivityDefinition: The definition of a specific activity to be taken, independent of any particular patient or context.
     */
    ActivityDefinition: {
        display: "ActivityDefinition",
        code: "ActivityDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * CodeSystem: A set of codes drawn from one or more code systems.
     */
    CodeSystem: {
        display: "CodeSystem",
        code: "CodeSystem",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * ConceptMap: A map from one set of concepts to one or more other concepts.
     */
    ConceptMap: {
        display: "ConceptMap",
        code: "ConceptMap",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * Library: Represents a library of quality improvement components.
     */
    Library: {
        display: "Library",
        code: "Library",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * Measure: A quality measure definition.
     */
    Measure: {
        display: "Measure",
        code: "Measure",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * PlanDefinition: The definition of a plan for a series of actions, independent of any specific patient or context.
     */
    PlanDefinition: {
        display: "PlanDefinition",
        code: "PlanDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * StructureDefinition: Structural Definition.
     */
    StructureDefinition: {
        display: "StructureDefinition",
        code: "StructureDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * StructureMap: A Map of relationships between 2 structures that can be used to transform data.
     */
    StructureMap: {
        display: "StructureMap",
        code: "StructureMap",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * ValueSet: A set of codes drawn from one or more code systems.
     */
    ValueSet: {
        display: "ValueSet",
        code: "ValueSet",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0tub3dsZWRnZVJlc291cmNlVHlwZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQThDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxvQkFBb0I7UUFDMUIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc3w0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEEgbGlzdCBvZiBhbGwgdGhlIGtub3dsZWRnZSByZXNvdXJjZSB0eXBlcyBkZWZpbmVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgRkhJUiBzcGVjaWZpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQWN0aXZpdHlEZWZpbml0aW9uOiBUaGUgZGVmaW5pdGlvbiBvZiBhIHNwZWNpZmljIGFjdGl2aXR5IHRvIGJlIHRha2VuLCBpbmRlcGVuZGVudCBvZiBhbnkgcGFydGljdWxhciBwYXRpZW50IG9yIGNvbnRleHQuXHJcbiAgICovXHJcbiAgQWN0aXZpdHlEZWZpbml0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGVTeXN0ZW06IEEgc2V0IG9mIGNvZGVzIGRyYXduIGZyb20gb25lIG9yIG1vcmUgY29kZSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIENvZGVTeXN0ZW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29uY2VwdE1hcDogQSBtYXAgZnJvbSBvbmUgc2V0IG9mIGNvbmNlcHRzIHRvIG9uZSBvciBtb3JlIG90aGVyIGNvbmNlcHRzLlxyXG4gICAqL1xyXG4gIENvbmNlcHRNYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogTGlicmFyeTogUmVwcmVzZW50cyBhIGxpYnJhcnkgb2YgcXVhbGl0eSBpbXByb3ZlbWVudCBjb21wb25lbnRzLlxyXG4gICAqL1xyXG4gIExpYnJhcnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogTWVhc3VyZTogQSBxdWFsaXR5IG1lYXN1cmUgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBNZWFzdXJlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFBsYW5EZWZpbml0aW9uOiBUaGUgZGVmaW5pdGlvbiBvZiBhIHBsYW4gZm9yIGEgc2VyaWVzIG9mIGFjdGlvbnMsIGluZGVwZW5kZW50IG9mIGFueSBzcGVjaWZpYyBwYXRpZW50IG9yIGNvbnRleHQuXHJcbiAgICovXHJcbiAgUGxhbkRlZmluaXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogU3RydWN0dXJlRGVmaW5pdGlvbjogU3RydWN0dXJhbCBEZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIFN0cnVjdHVyZURlZmluaXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogU3RydWN0dXJlTWFwOiBBIE1hcCBvZiByZWxhdGlvbnNoaXBzIGJldHdlZW4gMiBzdHJ1Y3R1cmVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gdHJhbnNmb3JtIGRhdGEuXHJcbiAgICovXHJcbiAgU3RydWN0dXJlTWFwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFZhbHVlU2V0OiBBIHNldCBvZiBjb2RlcyBkcmF3biBmcm9tIG9uZSBvciBtb3JlIGNvZGUgc3lzdGVtcy5cclxuICAgKi9cclxuICBWYWx1ZVNldDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgbGlzdCBvZiBhbGwgdGhlIGtub3dsZWRnZSByZXNvdXJjZSB0eXBlcyBkZWZpbmVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgRkhJUiBzcGVjaWZpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEtub3dsZWRnZVJlc291cmNlVHlwZXNDb2RpbmdzOktub3dsZWRnZVJlc291cmNlVHlwZXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIEFjdGl2aXR5RGVmaW5pdGlvbjogVGhlIGRlZmluaXRpb24gb2YgYSBzcGVjaWZpYyBhY3Rpdml0eSB0byBiZSB0YWtlbiwgaW5kZXBlbmRlbnQgb2YgYW55IHBhcnRpY3VsYXIgcGF0aWVudCBvciBjb250ZXh0LlxyXG4gICAqL1xyXG4gIEFjdGl2aXR5RGVmaW5pdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJBY3Rpdml0eURlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwiQWN0aXZpdHlEZWZpbml0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGVTeXN0ZW06IEEgc2V0IG9mIGNvZGVzIGRyYXduIGZyb20gb25lIG9yIG1vcmUgY29kZSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIENvZGVTeXN0ZW06IHtcclxuICAgIGRpc3BsYXk6IFwiQ29kZVN5c3RlbVwiLFxyXG4gICAgY29kZTogXCJDb2RlU3lzdGVtXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvbmNlcHRNYXA6IEEgbWFwIGZyb20gb25lIHNldCBvZiBjb25jZXB0cyB0byBvbmUgb3IgbW9yZSBvdGhlciBjb25jZXB0cy5cclxuICAgKi9cclxuICBDb25jZXB0TWFwOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbmNlcHRNYXBcIixcclxuICAgIGNvZGU6IFwiQ29uY2VwdE1hcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBMaWJyYXJ5OiBSZXByZXNlbnRzIGEgbGlicmFyeSBvZiBxdWFsaXR5IGltcHJvdmVtZW50IGNvbXBvbmVudHMuXHJcbiAgICovXHJcbiAgTGlicmFyeToge1xyXG4gICAgZGlzcGxheTogXCJMaWJyYXJ5XCIsXHJcbiAgICBjb2RlOiBcIkxpYnJhcnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogTWVhc3VyZTogQSBxdWFsaXR5IG1lYXN1cmUgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBNZWFzdXJlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1lYXN1cmVcIixcclxuICAgIGNvZGU6IFwiTWVhc3VyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQbGFuRGVmaW5pdGlvbjogVGhlIGRlZmluaXRpb24gb2YgYSBwbGFuIGZvciBhIHNlcmllcyBvZiBhY3Rpb25zLCBpbmRlcGVuZGVudCBvZiBhbnkgc3BlY2lmaWMgcGF0aWVudCBvciBjb250ZXh0LlxyXG4gICAqL1xyXG4gIFBsYW5EZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5EZWZpbml0aW9uXCIsXHJcbiAgICBjb2RlOiBcIlBsYW5EZWZpbml0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFN0cnVjdHVyZURlZmluaXRpb246IFN0cnVjdHVyYWwgRGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBTdHJ1Y3R1cmVEZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN0cnVjdHVyZURlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwiU3RydWN0dXJlRGVmaW5pdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBTdHJ1Y3R1cmVNYXA6IEEgTWFwIG9mIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiAyIHN0cnVjdHVyZXMgdGhhdCBjYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gZGF0YS5cclxuICAgKi9cclxuICBTdHJ1Y3R1cmVNYXA6IHtcclxuICAgIGRpc3BsYXk6IFwiU3RydWN0dXJlTWFwXCIsXHJcbiAgICBjb2RlOiBcIlN0cnVjdHVyZU1hcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBWYWx1ZVNldDogQSBzZXQgb2YgY29kZXMgZHJhd24gZnJvbSBvbmUgb3IgbW9yZSBjb2RlIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgVmFsdWVTZXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiVmFsdWVTZXRcIixcclxuICAgIGNvZGU6IFwiVmFsdWVTZXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==