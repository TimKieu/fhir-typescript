// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measure-type|4.3.0
/**
 * The type of measure (includes codes from 2.16.840.1.113883.1.11.20368).
 */
export const MeasureTypeCodings = {
    /**
     * composite: A measure that combines multiple component measures in to a single quality measure.
     */
    Composite: {
        display: "Composite",
        code: "composite",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    },
    /**
     * outcome: A measure that indicates the result of the performance (or non-performance) of a function or process.
     */
    Outcome: {
        display: "Outcome",
        code: "outcome",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    },
    /**
     * patient-reported-outcome: A measure that focuses on patient-reported information such as patient engagement or patient experience measures.
     */
    PatientReportedOutcome: {
        display: "Patient Reported Outcome",
        code: "patient-reported-outcome",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    },
    /**
     * process: A measure which focuses on a process which leads to a certain outcome, meaning that a scientific basis exists for believing that the process, when executed well, will increase the probability of achieving a desired outcome.
     */
    Process: {
        display: "Process",
        code: "process",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    },
    /**
     * structure: A measure that focuses on a health care provider's capacity, systems, and processes to provide high-quality care.
     */
    Structure: {
        display: "Structure",
        code: "structure",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBOEJqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsMEJBQTBCO1FBQ2hDLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lYXN1cmUtdHlwZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG1lYXN1cmUgKGluY2x1ZGVzIGNvZGVzIGZyb20gMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4yMDM2OCkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWFzdXJlVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcG9zaXRlOiBBIG1lYXN1cmUgdGhhdCBjb21iaW5lcyBtdWx0aXBsZSBjb21wb25lbnQgbWVhc3VyZXMgaW4gdG8gYSBzaW5nbGUgcXVhbGl0eSBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIENvbXBvc2l0ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvdXRjb21lOiBBIG1lYXN1cmUgdGhhdCBpbmRpY2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcGVyZm9ybWFuY2UgKG9yIG5vbi1wZXJmb3JtYW5jZSkgb2YgYSBmdW5jdGlvbiBvciBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIE91dGNvbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGF0aWVudC1yZXBvcnRlZC1vdXRjb21lOiBBIG1lYXN1cmUgdGhhdCBmb2N1c2VzIG9uIHBhdGllbnQtcmVwb3J0ZWQgaW5mb3JtYXRpb24gc3VjaCBhcyBwYXRpZW50IGVuZ2FnZW1lbnQgb3IgcGF0aWVudCBleHBlcmllbmNlIG1lYXN1cmVzLlxyXG4gICAqL1xyXG4gIFBhdGllbnRSZXBvcnRlZE91dGNvbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJvY2VzczogQSBtZWFzdXJlIHdoaWNoIGZvY3VzZXMgb24gYSBwcm9jZXNzIHdoaWNoIGxlYWRzIHRvIGEgY2VydGFpbiBvdXRjb21lLCBtZWFuaW5nIHRoYXQgYSBzY2llbnRpZmljIGJhc2lzIGV4aXN0cyBmb3IgYmVsaWV2aW5nIHRoYXQgdGhlIHByb2Nlc3MsIHdoZW4gZXhlY3V0ZWQgd2VsbCwgd2lsbCBpbmNyZWFzZSB0aGUgcHJvYmFiaWxpdHkgb2YgYWNoaWV2aW5nIGEgZGVzaXJlZCBvdXRjb21lLlxyXG4gICAqL1xyXG4gIFByb2Nlc3M6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3RydWN0dXJlOiBBIG1lYXN1cmUgdGhhdCBmb2N1c2VzIG9uIGEgaGVhbHRoIGNhcmUgcHJvdmlkZXIncyBjYXBhY2l0eSwgc3lzdGVtcywgYW5kIHByb2Nlc3NlcyB0byBwcm92aWRlIGhpZ2gtcXVhbGl0eSBjYXJlLlxyXG4gICAqL1xyXG4gIFN0cnVjdHVyZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG1lYXN1cmUgKGluY2x1ZGVzIGNvZGVzIGZyb20gMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4yMDM2OCkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVhc3VyZVR5cGVDb2RpbmdzOk1lYXN1cmVUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb21wb3NpdGU6IEEgbWVhc3VyZSB0aGF0IGNvbWJpbmVzIG11bHRpcGxlIGNvbXBvbmVudCBtZWFzdXJlcyBpbiB0byBhIHNpbmdsZSBxdWFsaXR5IG1lYXN1cmUuXHJcbiAgICovXHJcbiAgQ29tcG9zaXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBvc2l0ZVwiLFxyXG4gICAgY29kZTogXCJjb21wb3NpdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lYXN1cmUtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3V0Y29tZTogQSBtZWFzdXJlIHRoYXQgaW5kaWNhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHBlcmZvcm1hbmNlIChvciBub24tcGVyZm9ybWFuY2UpIG9mIGEgZnVuY3Rpb24gb3IgcHJvY2Vzcy5cclxuICAgKi9cclxuICBPdXRjb21lOiB7XHJcbiAgICBkaXNwbGF5OiBcIk91dGNvbWVcIixcclxuICAgIGNvZGU6IFwib3V0Y29tZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVhc3VyZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwYXRpZW50LXJlcG9ydGVkLW91dGNvbWU6IEEgbWVhc3VyZSB0aGF0IGZvY3VzZXMgb24gcGF0aWVudC1yZXBvcnRlZCBpbmZvcm1hdGlvbiBzdWNoIGFzIHBhdGllbnQgZW5nYWdlbWVudCBvciBwYXRpZW50IGV4cGVyaWVuY2UgbWVhc3VyZXMuXHJcbiAgICovXHJcbiAgUGF0aWVudFJlcG9ydGVkT3V0Y29tZToge1xyXG4gICAgZGlzcGxheTogXCJQYXRpZW50IFJlcG9ydGVkIE91dGNvbWVcIixcclxuICAgIGNvZGU6IFwicGF0aWVudC1yZXBvcnRlZC1vdXRjb21lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWFzdXJlLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByb2Nlc3M6IEEgbWVhc3VyZSB3aGljaCBmb2N1c2VzIG9uIGEgcHJvY2VzcyB3aGljaCBsZWFkcyB0byBhIGNlcnRhaW4gb3V0Y29tZSwgbWVhbmluZyB0aGF0IGEgc2NpZW50aWZpYyBiYXNpcyBleGlzdHMgZm9yIGJlbGlldmluZyB0aGF0IHRoZSBwcm9jZXNzLCB3aGVuIGV4ZWN1dGVkIHdlbGwsIHdpbGwgaW5jcmVhc2UgdGhlIHByb2JhYmlsaXR5IG9mIGFjaGlldmluZyBhIGRlc2lyZWQgb3V0Y29tZS5cclxuICAgKi9cclxuICBQcm9jZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb2Nlc3NcIixcclxuICAgIGNvZGU6IFwicHJvY2Vzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVhc3VyZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdHJ1Y3R1cmU6IEEgbWVhc3VyZSB0aGF0IGZvY3VzZXMgb24gYSBoZWFsdGggY2FyZSBwcm92aWRlcidzIGNhcGFjaXR5LCBzeXN0ZW1zLCBhbmQgcHJvY2Vzc2VzIHRvIHByb3ZpZGUgaGlnaC1xdWFsaXR5IGNhcmUuXHJcbiAgICovXHJcbiAgU3RydWN0dXJlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN0cnVjdHVyZVwiLFxyXG4gICAgY29kZTogXCJzdHJ1Y3R1cmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lYXN1cmUtdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==