// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/cited-artifact-abstract-type|4.3.0
/**
 * Used to express the reason and specific aspect for the variant abstract, such as language and specific language.
 */
export const CitedArtifactAbstractTypeCodings = {
    /**
     * autotranslated: Machine translated form of abstract in a different language, language element codes the language into which it was translated by machine
     */
    DifferentLanguageDerivedFromAutotranslation: {
        display: "Different language derived from autotranslation",
        code: "autotranslated",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * different-publisher: Abstract produced by a different publisher than the cited artifact
     */
    DifferentPublisherForAbstract: {
        display: "Different publisher for abstract",
        code: "different-publisher",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * duplicate-pmid: Alternative form of abstract in two or more Medline entries
     */
    DifferentTextInAdditionalMedlineEntry: {
        display: "Different text in additional Medline entry",
        code: "duplicate-pmid",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * earlier-abstract: Alternative form of abstract in an earlier version such as epub ahead of print
     */
    DifferentTextInAnEarlierVersion: {
        display: "Different text in an earlier version",
        code: "earlier-abstract",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * language: Additional form of abstract in a different language
     */
    DifferentLanguage: {
        display: "Different language",
        code: "language",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * long-abstract: Long version of the abstract, for use when abstracts are provided in different sizes or lengths
     */
    LongAbstract: {
        display: "Long abstract",
        code: "long-abstract",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * plain-language: Additional form of abstract written for the general public
     */
    PlainLanguage: {
        display: "Plain language",
        code: "plain-language",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * primary-human-use: Human-friendly main or official abstract
     */
    PrimaryHumanUse: {
        display: "Primary human use",
        code: "primary-human-use",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * primary-machine-use: Machine-friendly main or official abstract
     */
    PrimaryMachineUse: {
        display: "Primary machine use",
        code: "primary-machine-use",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * short-abstract: Brief abstract, for use when abstracts are provided in different sizes or lengths
     */
    ShortAbstract: {
        display: "Short abstract",
        code: "short-abstract",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
    /**
     * truncated: Truncated abstract
     */
    Truncated: {
        display: "Truncated",
        code: "truncated",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-abstract-type",
    },
};
//# sourceMappingURL=data:application/json;base64,