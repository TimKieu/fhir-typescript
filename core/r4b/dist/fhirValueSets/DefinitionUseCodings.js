// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/definition-use|4.3.0
/**
 * Structure Definition Use Codes / Keywords
 */
export const DefinitionUseCodings = {
    /**
     * archetype: This structure captures an analysis of a domain
     */
    DomainAnalysisModel: {
        display: "Domain Analysis Model",
        code: "archetype",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * custom-resource: This structure is intended to be treated like a FHIR resource (e.g. on the FHIR API)
     */
    CustomResource: {
        display: "Custom Resource",
        code: "custom-resource",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * dam: This structure captures an analysis of a domain
     */
    DomainAnalysisModelDam: {
        display: "Domain Analysis Model",
        code: "dam",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * fhir-structure: This structure is defined as part of the base FHIR Specification
     */
    FHIRStructure: {
        display: "FHIR Structure",
        code: "fhir-structure",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * template: This structure is a template (n.b: 'template' has many meanings)
     */
    Template: {
        display: "Template",
        code: "template",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * wire-format: This structure represents and existing structure (e.g. CDA, HL7 v2)
     */
    WireFormat: {
        display: "Wire Format",
        code: "wire-format",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmaW5pdGlvblVzZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQWtDbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsc0RBQXNEO0tBQy9EO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9kZWZpbml0aW9uLXVzZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFN0cnVjdHVyZSBEZWZpbml0aW9uIFVzZSBDb2RlcyAvIEtleXdvcmRzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEZWZpbml0aW9uVXNlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcmNoZXR5cGU6IFRoaXMgc3RydWN0dXJlIGNhcHR1cmVzIGFuIGFuYWx5c2lzIG9mIGEgZG9tYWluXHJcbiAgICovXHJcbiAgRG9tYWluQW5hbHlzaXNNb2RlbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjdXN0b20tcmVzb3VyY2U6IFRoaXMgc3RydWN0dXJlIGlzIGludGVuZGVkIHRvIGJlIHRyZWF0ZWQgbGlrZSBhIEZISVIgcmVzb3VyY2UgKGUuZy4gb24gdGhlIEZISVIgQVBJKVxyXG4gICAqL1xyXG4gIEN1c3RvbVJlc291cmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhbTogVGhpcyBzdHJ1Y3R1cmUgY2FwdHVyZXMgYW4gYW5hbHlzaXMgb2YgYSBkb21haW5cclxuICAgKi9cclxuICBEb21haW5BbmFseXNpc01vZGVsRGFtOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZoaXItc3RydWN0dXJlOiBUaGlzIHN0cnVjdHVyZSBpcyBkZWZpbmVkIGFzIHBhcnQgb2YgdGhlIGJhc2UgRkhJUiBTcGVjaWZpY2F0aW9uXHJcbiAgICovXHJcbiAgRkhJUlN0cnVjdHVyZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0ZW1wbGF0ZTogVGhpcyBzdHJ1Y3R1cmUgaXMgYSB0ZW1wbGF0ZSAobi5iOiAndGVtcGxhdGUnIGhhcyBtYW55IG1lYW5pbmdzKVxyXG4gICAqL1xyXG4gIFRlbXBsYXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHdpcmUtZm9ybWF0OiBUaGlzIHN0cnVjdHVyZSByZXByZXNlbnRzIGFuZCBleGlzdGluZyBzdHJ1Y3R1cmUgKGUuZy4gQ0RBLCBITDcgdjIpXHJcbiAgICovXHJcbiAgV2lyZUZvcm1hdDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0cnVjdHVyZSBEZWZpbml0aW9uIFVzZSBDb2RlcyAvIEtleXdvcmRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRGVmaW5pdGlvblVzZUNvZGluZ3M6RGVmaW5pdGlvblVzZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXJjaGV0eXBlOiBUaGlzIHN0cnVjdHVyZSBjYXB0dXJlcyBhbiBhbmFseXNpcyBvZiBhIGRvbWFpblxyXG4gICAqL1xyXG4gIERvbWFpbkFuYWx5c2lzTW9kZWw6IHtcclxuICAgIGRpc3BsYXk6IFwiRG9tYWluIEFuYWx5c2lzIE1vZGVsXCIsXHJcbiAgICBjb2RlOiBcImFyY2hldHlwZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGVmaW5pdGlvbi11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGN1c3RvbS1yZXNvdXJjZTogVGhpcyBzdHJ1Y3R1cmUgaXMgaW50ZW5kZWQgdG8gYmUgdHJlYXRlZCBsaWtlIGEgRkhJUiByZXNvdXJjZSAoZS5nLiBvbiB0aGUgRkhJUiBBUEkpXHJcbiAgICovXHJcbiAgQ3VzdG9tUmVzb3VyY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiQ3VzdG9tIFJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcImN1c3RvbS1yZXNvdXJjZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGVmaW5pdGlvbi11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhbTogVGhpcyBzdHJ1Y3R1cmUgY2FwdHVyZXMgYW4gYW5hbHlzaXMgb2YgYSBkb21haW5cclxuICAgKi9cclxuICBEb21haW5BbmFseXNpc01vZGVsRGFtOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRvbWFpbiBBbmFseXNpcyBNb2RlbFwiLFxyXG4gICAgY29kZTogXCJkYW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RlZmluaXRpb24tdXNlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmaGlyLXN0cnVjdHVyZTogVGhpcyBzdHJ1Y3R1cmUgaXMgZGVmaW5lZCBhcyBwYXJ0IG9mIHRoZSBiYXNlIEZISVIgU3BlY2lmaWNhdGlvblxyXG4gICAqL1xyXG4gIEZISVJTdHJ1Y3R1cmU6IHtcclxuICAgIGRpc3BsYXk6IFwiRkhJUiBTdHJ1Y3R1cmVcIixcclxuICAgIGNvZGU6IFwiZmhpci1zdHJ1Y3R1cmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RlZmluaXRpb24tdXNlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0ZW1wbGF0ZTogVGhpcyBzdHJ1Y3R1cmUgaXMgYSB0ZW1wbGF0ZSAobi5iOiAndGVtcGxhdGUnIGhhcyBtYW55IG1lYW5pbmdzKVxyXG4gICAqL1xyXG4gIFRlbXBsYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRlbXBsYXRlXCIsXHJcbiAgICBjb2RlOiBcInRlbXBsYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZWZpbml0aW9uLXVzZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd2lyZS1mb3JtYXQ6IFRoaXMgc3RydWN0dXJlIHJlcHJlc2VudHMgYW5kIGV4aXN0aW5nIHN0cnVjdHVyZSAoZS5nLiBDREEsIEhMNyB2MilcclxuICAgKi9cclxuICBXaXJlRm9ybWF0OiB7XHJcbiAgICBkaXNwbGF5OiBcIldpcmUgRm9ybWF0XCIsXHJcbiAgICBjb2RlOiBcIndpcmUtZm9ybWF0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZWZpbml0aW9uLXVzZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==