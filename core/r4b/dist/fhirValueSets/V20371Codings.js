// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://terminology.hl7.org/ValueSet/v2-0371|2.0.0
/**
 * Concepts specifying any additive introduced to the specimen before or at the time of collection.  These additives may be introduced in order to preserve, maintain or enhance the particular nature or component of the specimen.  Used in Version 2 messaging in the SPM segment.
 */
export const V20371Codings = {
    /**
     * Code: ACDA
     */
    ACDSolutionA: {
        display: "ACD Solution A",
        code: "ACDA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: ACDB
     */
    ACDSolutionB: {
        display: "ACD Solution B",
        code: "ACDB",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: ACET
     */
    AceticAcid: {
        display: "Acetic Acid",
        code: "ACET",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: AMIES
     */
    AmiesTransportMedium: {
        display: "Amies transport medium",
        code: "AMIES",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: BACTM
     */
    BacterialTransportMedium: {
        display: "Bacterial Transport medium",
        code: "BACTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: BF10
     */
    Buffered10PercentFormalin: {
        display: "Buffered 10% formalin",
        code: "BF10",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: BOR
     */
    BorateBoricAcid: {
        display: "Borate Boric Acid",
        code: "BOR",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: BOUIN
     */
    BouinQuoteSSolution: {
        display: "Bouin's solution",
        code: "BOUIN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: BSKM
     */
    BufferedSkimMilk: {
        display: "Buffered skim milk",
        code: "BSKM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: C32
     */
    VAL32PercentCitrate: {
        display: "3.2%  Citrate",
        code: "C32",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: C38
     */
    VAL38PercentCitrate: {
        display: "3.8% Citrate",
        code: "C38",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: CARS
     */
    CarsonQuoteSModified10PercentFormalin: {
        display: "Carson's Modified 10% formalin",
        code: "CARS",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: CARY
     */
    CaryBlairMedium: {
        display: "Cary Blair Medium",
        code: "CARY",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: CHLTM
     */
    ChlamydiaTransportMedium: {
        display: "Chlamydia transport medium",
        code: "CHLTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: CTAD
     */
    CTADThisShouldBeSpelledOutIfNotUniversallyUnderstood: {
        display: "CTAD (this should be spelled out if not universally understood)",
        code: "CTAD",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: EDTK
     */
    PotassiumKEDTA: {
        display: "Potassium/K EDTA",
        code: "EDTK",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: EDTK15
     */
    PotassiumKEDTA15Percent: {
        display: "Potassium/K EDTA 15%",
        code: "EDTK15",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: EDTK75
     */
    PotassiumKEDTA75Percent: {
        display: "Potassium/K EDTA 7.5%",
        code: "EDTK75",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: EDTN
     */
    SodiumNaEDTA: {
        display: "Sodium/Na EDTA",
        code: "EDTN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: ENT
     */
    EntericBacteriaTransportMedium: {
        display: "Enteric bacteria transport medium",
        code: "ENT",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: ENT+
     */
    EntericPlus: {
        display: "Enteric plus",
        code: "ENT+",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: F10
     */
    VAL10PercentFormalin: {
        display: "10% Formalin",
        code: "F10",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: FDP
     */
    ThrombinNIHSoybeanTrypsinInhibitorFibrinDegradationProducts: {
        display: "Thrombin NIH; soybean trypsin inhibitor (Fibrin Degradation Products)",
        code: "FDP",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: FL10
     */
    SodiumFluoride10mg: {
        display: "Sodium Fluoride, 10mg",
        code: "FL10",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: FL100
     */
    SodiumFluoride100mg: {
        display: "Sodium Fluoride, 100mg",
        code: "FL100",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: HCL6
     */
    VAL6NHCL: {
        display: "6N HCL",
        code: "HCL6",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: HEPA
     */
    AmmoniumHeparin: {
        display: "Ammonium heparin",
        code: "HEPA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: HEPL
     */
    LithiumLiHeparin: {
        display: "Lithium/Li  Heparin",
        code: "HEPL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: HEPN
     */
    SodiumNaHeparin: {
        display: "Sodium/Na  Heparin",
        code: "HEPN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: HNO3
     */
    NitricAcid: {
        display: "Nitric Acid",
        code: "HNO3",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: JKM
     */
    JonesKendrickMedium: {
        display: "Jones Kendrick Medium",
        code: "JKM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: KARN
     */
    KarnovskyQuoteSFixative: {
        display: "Karnovsky's fixative",
        code: "KARN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: KOX
     */
    PotassiumOxalate: {
        display: "Potassium Oxalate",
        code: "KOX",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: LIA
     */
    LithiumIodoacetate: {
        display: "Lithium iodoacetate",
        code: "LIA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: M4
     */
    M4: {
        display: "M4",
        code: "M4",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: M4RT
     */
    M4RT: {
        display: "M4-RT",
        code: "M4RT",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: M5
     */
    M5: {
        display: "M5",
        code: "M5",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: MICHTM
     */
    MichelQuoteSTransportMedium: {
        display: "Michel's transport medium",
        code: "MICHTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: MMDTM
     */
    MMDTransportMedium: {
        display: "MMD transport medium",
        code: "MMDTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: NAF
     */
    SodiumFluoride: {
        display: "Sodium Fluoride",
        code: "NAF",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: NAPS
     */
    SodiumPolyanetholSulfonate035PercentIn085PercentSodiumChloride: {
        display: "Sodium polyanethol sulfonate 0.35% in 0.85% sodium chloride",
        code: "NAPS",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: NONE
     */
    None: {
        display: "None",
        code: "NONE",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: PAGE
     */
    PagesQuoteSSaline: {
        display: "Pages's Saline",
        code: "PAGE",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: PHENOL
     */
    Phenol: {
        display: "Phenol",
        code: "PHENOL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: PVA
     */
    PVAPolyvinylalcohol: {
        display: "PVA (polyvinylalcohol)",
        code: "PVA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: RLM
     */
    ReaganLoweMedium: {
        display: "Reagan Lowe Medium",
        code: "RLM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: SILICA
     */
    SiliceousEarth12Mg: {
        display: "Siliceous earth, 12 mg",
        code: "SILICA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: SPS
     */
    SPSThisShouldBeSpelledOutIfNotUniversallyUnderstood: {
        display: "SPS(this should be spelled out if not universally understood)",
        code: "SPS",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: SST
     */
    SerumSeparatorTubePolymerGel: {
        display: "Serum Separator Tube (Polymer Gel)",
        code: "SST",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: STUTM
     */
    StuartTransportMedium: {
        display: "Stuart transport medium",
        code: "STUTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: THROM
     */
    Thrombin: {
        display: "Thrombin",
        code: "THROM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: THYMOL
     */
    Thymol: {
        display: "Thymol",
        code: "THYMOL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: THYO
     */
    ThyoglycollateBroth: {
        display: "Thyoglycollate broth",
        code: "THYO",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: TOLU
     */
    Toluene: {
        display: "Toluene",
        code: "TOLU",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: URETM
     */
    UreaplasmaTransportMedium: {
        display: "Ureaplasma transport medium",
        code: "URETM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: VIRTM
     */
    ViralTransportMedium: {
        display: "Viral Transport medium",
        code: "VIRTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
    /**
     * Code: WEST
     */
    BufferedCitrateWestergrenSedimentationRate: {
        display: "Buffered Citrate (Westergren Sedimentation Rate)",
        code: "WEST",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVjIwMzcxQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVjIwMzcxQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxtRUFBbUU7QUE4T25FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFvQjtJQUM1Qzs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxvQkFBb0IsRUFBRTtRQUNwQixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUU7UUFDeEIsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILHlCQUF5QixFQUFFO1FBQ3pCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtD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LE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILHlCQUF5QixFQUFFO1FBQ3pCLE9BQU8sRUFBRSw2QkFBNkI7UUFDdEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxvQkFBb0IsRUFBRTtRQUNwQixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsMENBQTBDLEVBQUU7UUFDMUMsT0FBTyxFQUFFLGtEQUFrRDtRQUMzRCxJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjItMDM3MXwyLjAuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvbmNlcHRzIHNwZWNpZnlpbmcgYW55IGFkZGl0aXZlIGludHJvZHVjZWQgdG8gdGhlIHNwZWNpbWVuIGJlZm9yZSBvciBhdCB0aGUgdGltZSBvZiBjb2xsZWN0aW9uLiAgVGhlc2UgYWRkaXRpdmVzIG1heSBiZSBpbnRyb2R1Y2VkIGluIG9yZGVyIHRvIHByZXNlcnZlLCBtYWludGFpbiBvciBlbmhhbmNlIHRoZSBwYXJ0aWN1bGFyIG5hdHVyZSBvciBjb21wb25lbnQgb2YgdGhlIHNwZWNpbWVuLiAgVXNlZCBpbiBWZXJzaW9uIDIgbWVzc2FnaW5nIGluIHRoZSBTUE0gc2VnbWVudC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFYyMDM3MUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUNEQVxyXG4gICAqL1xyXG4gIEFDRFNvbHV0aW9uQTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBBQ0RCXHJcbiAgICovXHJcbiAgQUNEU29sdXRpb25COiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFDRVRcclxuICAgKi9cclxuICBBY2V0aWNBY2lkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFNSUVTXHJcbiAgICovXHJcbiAgQW1pZXNUcmFuc3BvcnRNZWRpdW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQkFDVE1cclxuICAgKi9cclxuICBCYWN0ZXJpYWxUcmFuc3BvcnRNZWRpdW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQkYxMFxyXG4gICAqL1xyXG4gIEJ1ZmZlcmVkMTBQZXJjZW50Rm9ybWFsaW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQk9SXHJcbiAgICovXHJcbiAgQm9yYXRlQm9yaWNBY2lkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJPVUlOXHJcbiAgICovXHJcbiAgQm91aW5RdW90ZVNTb2x1dGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBCU0tNXHJcbiAgICovXHJcbiAgQnVmZmVyZWRTa2ltTWlsazogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBDMzJcclxuICAgKi9cclxuICBWQUwzMlBlcmNlbnRDaXRyYXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEMzOFxyXG4gICAqL1xyXG4gIFZBTDM4UGVyY2VudENpdHJhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0FSU1xyXG4gICAqL1xyXG4gIENhcnNvblF1b3RlU01vZGlmaWVkMTBQZXJjZW50Rm9ybWFsaW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0FSWVxyXG4gICAqL1xyXG4gIENhcnlCbGFpck1lZGl1bTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBDSExUTVxyXG4gICAqL1xyXG4gIENobGFteWRpYVRyYW5zcG9ydE1lZGl1bTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBDVEFEXHJcbiAgICovXHJcbiAgQ1RBRFRoaXNTaG91bGRCZVNwZWxsZWRPdXRJZk5vdFVuaXZlcnNhbGx5VW5kZXJzdG9vZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBFRFRLXHJcbiAgICovXHJcbiAgUG90YXNzaXVtS0VEVEE6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRURUSzE1XHJcbiAgICovXHJcbiAgUG90YXNzaXVtS0VEVEExNVBlcmNlbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRURUSzc1XHJcbiAgICovXHJcbiAgUG90YXNzaXVtS0VEVEE3NVBlcmNlbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRURUTlxyXG4gICAqL1xyXG4gIFNvZGl1bU5hRURUQTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBFTlRcclxuICAgKi9cclxuICBFbnRlcmljQmFjdGVyaWFUcmFuc3BvcnRNZWRpdW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRU5UK1xyXG4gICAqL1xyXG4gIEVudGVyaWNQbHVzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEYxMFxyXG4gICAqL1xyXG4gIFZBTDEwUGVyY2VudEZvcm1hbGluOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEZEUFxyXG4gICAqL1xyXG4gIFRocm9tYmluTklIU295YmVhblRyeXBzaW5JbmhpYml0b3JGaWJyaW5EZWdyYWRhdGlvblByb2R1Y3RzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEZMMTBcclxuICAgKi9cclxuICBTb2RpdW1GbHVvcmlkZTEwbWc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRkwxMDBcclxuICAgKi9cclxuICBTb2RpdW1GbHVvcmlkZTEwMG1nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhDTDZcclxuICAgKi9cclxuICBWQUw2TkhDTDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBIRVBBXHJcbiAgICovXHJcbiAgQW1tb25pdW1IZXBhcmluOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhFUExcclxuICAgKi9cclxuICBMaXRoaXVtTGlIZXBhcmluOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhFUE5cclxuICAgKi9cclxuICBTb2RpdW1OYUhlcGFyaW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogSE5PM1xyXG4gICAqL1xyXG4gIE5pdHJpY0FjaWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogSktNXHJcbiAgICovXHJcbiAgSm9uZXNLZW5kcmlja01lZGl1bTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBLQVJOXHJcbiAgICovXHJcbiAgS2Fybm92c2t5UXVvdGVTRml4YXRpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogS09YXHJcbiAgICovXHJcbiAgUG90YXNzaXVtT3hhbGF0ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBMSUFcclxuICAgKi9cclxuICBMaXRoaXVtSW9kb2FjZXRhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogTTRcclxuICAgKi9cclxuICBNNDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBNNFJUXHJcbiAgICovXHJcbiAgTTRSVDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBNNVxyXG4gICAqL1xyXG4gIE01OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1JQ0hUTVxyXG4gICAqL1xyXG4gIE1pY2hlbFF1b3RlU1RyYW5zcG9ydE1lZGl1bTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBNTURUTVxyXG4gICAqL1xyXG4gIE1NRFRyYW5zcG9ydE1lZGl1bTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBOQUZcclxuICAgKi9cclxuICBTb2RpdW1GbHVvcmlkZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBOQVBTXHJcbiAgICovXHJcbiAgU29kaXVtUG9seWFuZXRob2xTdWxmb25hdGUwMzVQZXJjZW50SW4wODVQZXJjZW50U29kaXVtQ2hsb3JpZGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogTk9ORVxyXG4gICAqL1xyXG4gIE5vbmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogUEFHRVxyXG4gICAqL1xyXG4gIFBhZ2VzUXVvdGVTU2FsaW5lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBIRU5PTFxyXG4gICAqL1xyXG4gIFBoZW5vbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBQVkFcclxuICAgKi9cclxuICBQVkFQb2x5dmlueWxhbGNvaG9sOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFJMTVxyXG4gICAqL1xyXG4gIFJlYWdhbkxvd2VNZWRpdW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogU0lMSUNBXHJcbiAgICovXHJcbiAgU2lsaWNlb3VzRWFydGgxMk1nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNQU1xyXG4gICAqL1xyXG4gIFNQU1RoaXNTaG91bGRCZVNwZWxsZWRPdXRJZk5vdFVuaXZlcnNhbGx5VW5kZXJzdG9vZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBTU1RcclxuICAgKi9cclxuICBTZXJ1bVNlcGFyYXRvclR1YmVQb2x5bWVyR2VsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNUVVRNXHJcbiAgICovXHJcbiAgU3R1YXJ0VHJhbnNwb3J0TWVkaXVtOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRIUk9NXHJcbiAgICovXHJcbiAgVGhyb21iaW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogVEhZTU9MXHJcbiAgICovXHJcbiAgVGh5bW9sOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRIWU9cclxuICAgKi9cclxuICBUaHlvZ2x5Y29sbGF0ZUJyb3RoOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRPTFVcclxuICAgKi9cclxuICBUb2x1ZW5lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFVSRVRNXHJcbiAgICovXHJcbiAgVXJlYXBsYXNtYVRyYW5zcG9ydE1lZGl1bTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBWSVJUTVxyXG4gICAqL1xyXG4gIFZpcmFsVHJhbnNwb3J0TWVkaXVtOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFdFU1RcclxuICAgKi9cclxuICBCdWZmZXJlZENpdHJhdGVXZXN0ZXJncmVuU2VkaW1lbnRhdGlvblJhdGU6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25jZXB0cyBzcGVjaWZ5aW5nIGFueSBhZGRpdGl2ZSBpbnRyb2R1Y2VkIHRvIHRoZSBzcGVjaW1lbiBiZWZvcmUgb3IgYXQgdGhlIHRpbWUgb2YgY29sbGVjdGlvbi4gIFRoZXNlIGFkZGl0aXZlcyBtYXkgYmUgaW50cm9kdWNlZCBpbiBvcmRlciB0byBwcmVzZXJ2ZSwgbWFpbnRhaW4gb3IgZW5oYW5jZSB0aGUgcGFydGljdWxhciBuYXR1cmUgb3IgY29tcG9uZW50IG9mIHRoZSBzcGVjaW1lbi4gIFVzZWQgaW4gVmVyc2lvbiAyIG1lc3NhZ2luZyBpbiB0aGUgU1BNIHNlZ21lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVjIwMzcxQ29kaW5nczpWMjAzNzFDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFDREFcclxuICAgKi9cclxuICBBQ0RTb2x1dGlvbkE6IHtcclxuICAgIGRpc3BsYXk6IFwiQUNEIFNvbHV0aW9uIEFcIixcclxuICAgIGNvZGU6IFwiQUNEQVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUNEQlxyXG4gICAqL1xyXG4gIEFDRFNvbHV0aW9uQjoge1xyXG4gICAgZGlzcGxheTogXCJBQ0QgU29sdXRpb24gQlwiLFxyXG4gICAgY29kZTogXCJBQ0RCXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBBQ0VUXHJcbiAgICovXHJcbiAgQWNldGljQWNpZDoge1xyXG4gICAgZGlzcGxheTogXCJBY2V0aWMgQWNpZFwiLFxyXG4gICAgY29kZTogXCJBQ0VUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBBTUlFU1xyXG4gICAqL1xyXG4gIEFtaWVzVHJhbnNwb3J0TWVkaXVtOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFtaWVzIHRyYW5zcG9ydCBtZWRpdW1cIixcclxuICAgIGNvZGU6IFwiQU1JRVNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJBQ1RNXHJcbiAgICovXHJcbiAgQmFjdGVyaWFsVHJhbnNwb3J0TWVkaXVtOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJhY3RlcmlhbCBUcmFuc3BvcnQgbWVkaXVtXCIsXHJcbiAgICBjb2RlOiBcIkJBQ1RNXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBCRjEwXHJcbiAgICovXHJcbiAgQnVmZmVyZWQxMFBlcmNlbnRGb3JtYWxpbjoge1xyXG4gICAgZGlzcGxheTogXCJCdWZmZXJlZCAxMCUgZm9ybWFsaW5cIixcclxuICAgIGNvZGU6IFwiQkYxMFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQk9SXHJcbiAgICovXHJcbiAgQm9yYXRlQm9yaWNBY2lkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJvcmF0ZSBCb3JpYyBBY2lkXCIsXHJcbiAgICBjb2RlOiBcIkJPUlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQk9VSU5cclxuICAgKi9cclxuICBCb3VpblF1b3RlU1NvbHV0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJvdWluJ3Mgc29sdXRpb25cIixcclxuICAgIGNvZGU6IFwiQk9VSU5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJTS01cclxuICAgKi9cclxuICBCdWZmZXJlZFNraW1NaWxrOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJ1ZmZlcmVkIHNraW0gbWlsa1wiLFxyXG4gICAgY29kZTogXCJCU0tNXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDMzJcclxuICAgKi9cclxuICBWQUwzMlBlcmNlbnRDaXRyYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIjMuMiUgIENpdHJhdGVcIixcclxuICAgIGNvZGU6IFwiQzMyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDMzhcclxuICAgKi9cclxuICBWQUwzOFBlcmNlbnRDaXRyYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIjMuOCUgQ2l0cmF0ZVwiLFxyXG4gICAgY29kZTogXCJDMzhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENBUlNcclxuICAgKi9cclxuICBDYXJzb25RdW90ZVNNb2RpZmllZDEwUGVyY2VudEZvcm1hbGluOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhcnNvbidzIE1vZGlmaWVkIDEwJSBmb3JtYWxpblwiLFxyXG4gICAgY29kZTogXCJDQVJTXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDQVJZXHJcbiAgICovXHJcbiAgQ2FyeUJsYWlyTWVkaXVtOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhcnkgQmxhaXIgTWVkaXVtXCIsXHJcbiAgICBjb2RlOiBcIkNBUllcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENITFRNXHJcbiAgICovXHJcbiAgQ2hsYW15ZGlhVHJhbnNwb3J0TWVkaXVtOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNobGFteWRpYSB0cmFuc3BvcnQgbWVkaXVtXCIsXHJcbiAgICBjb2RlOiBcIkNITFRNXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDVEFEXHJcbiAgICovXHJcbiAgQ1RBRFRoaXNTaG91bGRCZVNwZWxsZWRPdXRJZk5vdFVuaXZlcnNhbGx5VW5kZXJzdG9vZDoge1xyXG4gICAgZGlzcGxheTogXCJDVEFEICh0aGlzIHNob3VsZCBiZSBzcGVsbGVkIG91dCBpZiBub3QgdW5pdmVyc2FsbHkgdW5kZXJzdG9vZClcIixcclxuICAgIGNvZGU6IFwiQ1RBRFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRURUS1xyXG4gICAqL1xyXG4gIFBvdGFzc2l1bUtFRFRBOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBvdGFzc2l1bS9LIEVEVEFcIixcclxuICAgIGNvZGU6IFwiRURUS1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRURUSzE1XHJcbiAgICovXHJcbiAgUG90YXNzaXVtS0VEVEExNVBlcmNlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUG90YXNzaXVtL0sgRURUQSAxNSVcIixcclxuICAgIGNvZGU6IFwiRURUSzE1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBFRFRLNzVcclxuICAgKi9cclxuICBQb3Rhc3NpdW1LRURUQTc1UGVyY2VudDoge1xyXG4gICAgZGlzcGxheTogXCJQb3Rhc3NpdW0vSyBFRFRBIDcuNSVcIixcclxuICAgIGNvZGU6IFwiRURUSzc1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBFRFROXHJcbiAgICovXHJcbiAgU29kaXVtTmFFRFRBOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvZGl1bS9OYSBFRFRBXCIsXHJcbiAgICBjb2RlOiBcIkVEVE5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVOVFxyXG4gICAqL1xyXG4gIEVudGVyaWNCYWN0ZXJpYVRyYW5zcG9ydE1lZGl1bToge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmljIGJhY3RlcmlhIHRyYW5zcG9ydCBtZWRpdW1cIixcclxuICAgIGNvZGU6IFwiRU5UXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBFTlQrXHJcbiAgICovXHJcbiAgRW50ZXJpY1BsdXM6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJpYyBwbHVzXCIsXHJcbiAgICBjb2RlOiBcIkVOVCtcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEYxMFxyXG4gICAqL1xyXG4gIFZBTDEwUGVyY2VudEZvcm1hbGluOiB7XHJcbiAgICBkaXNwbGF5OiBcIjEwJSBGb3JtYWxpblwiLFxyXG4gICAgY29kZTogXCJGMTBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEZEUFxyXG4gICAqL1xyXG4gIFRocm9tYmluTklIU295YmVhblRyeXBzaW5JbmhpYml0b3JGaWJyaW5EZWdyYWRhdGlvblByb2R1Y3RzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRocm9tYmluIE5JSDsgc295YmVhbiB0cnlwc2luIGluaGliaXRvciAoRmlicmluIERlZ3JhZGF0aW9uIFByb2R1Y3RzKVwiLFxyXG4gICAgY29kZTogXCJGRFBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEZMMTBcclxuICAgKi9cclxuICBTb2RpdW1GbHVvcmlkZTEwbWc6IHtcclxuICAgIGRpc3BsYXk6IFwiU29kaXVtIEZsdW9yaWRlLCAxMG1nXCIsXHJcbiAgICBjb2RlOiBcIkZMMTBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEZMMTAwXHJcbiAgICovXHJcbiAgU29kaXVtRmx1b3JpZGUxMDBtZzoge1xyXG4gICAgZGlzcGxheTogXCJTb2RpdW0gRmx1b3JpZGUsIDEwMG1nXCIsXHJcbiAgICBjb2RlOiBcIkZMMTAwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBIQ0w2XHJcbiAgICovXHJcbiAgVkFMNk5IQ0w6IHtcclxuICAgIGRpc3BsYXk6IFwiNk4gSENMXCIsXHJcbiAgICBjb2RlOiBcIkhDTDZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhFUEFcclxuICAgKi9cclxuICBBbW1vbml1bUhlcGFyaW46IHtcclxuICAgIGRpc3BsYXk6IFwiQW1tb25pdW0gaGVwYXJpblwiLFxyXG4gICAgY29kZTogXCJIRVBBXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBIRVBMXHJcbiAgICovXHJcbiAgTGl0aGl1bUxpSGVwYXJpbjoge1xyXG4gICAgZGlzcGxheTogXCJMaXRoaXVtL0xpICBIZXBhcmluXCIsXHJcbiAgICBjb2RlOiBcIkhFUExcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhFUE5cclxuICAgKi9cclxuICBTb2RpdW1OYUhlcGFyaW46IHtcclxuICAgIGRpc3BsYXk6IFwiU29kaXVtL05hICBIZXBhcmluXCIsXHJcbiAgICBjb2RlOiBcIkhFUE5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhOTzNcclxuICAgKi9cclxuICBOaXRyaWNBY2lkOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5pdHJpYyBBY2lkXCIsXHJcbiAgICBjb2RlOiBcIkhOTzNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEpLTVxyXG4gICAqL1xyXG4gIEpvbmVzS2VuZHJpY2tNZWRpdW06IHtcclxuICAgIGRpc3BsYXk6IFwiSm9uZXMgS2VuZHJpY2sgTWVkaXVtXCIsXHJcbiAgICBjb2RlOiBcIkpLTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogS0FSTlxyXG4gICAqL1xyXG4gIEthcm5vdnNreVF1b3RlU0ZpeGF0aXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkthcm5vdnNreSdzIGZpeGF0aXZlXCIsXHJcbiAgICBjb2RlOiBcIktBUk5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEtPWFxyXG4gICAqL1xyXG4gIFBvdGFzc2l1bU94YWxhdGU6IHtcclxuICAgIGRpc3BsYXk6IFwiUG90YXNzaXVtIE94YWxhdGVcIixcclxuICAgIGNvZGU6IFwiS09YXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBMSUFcclxuICAgKi9cclxuICBMaXRoaXVtSW9kb2FjZXRhdGU6IHtcclxuICAgIGRpc3BsYXk6IFwiTGl0aGl1bSBpb2RvYWNldGF0ZVwiLFxyXG4gICAgY29kZTogXCJMSUFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE00XHJcbiAgICovXHJcbiAgTTQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTTRcIixcclxuICAgIGNvZGU6IFwiTTRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE00UlRcclxuICAgKi9cclxuICBNNFJUOiB7XHJcbiAgICBkaXNwbGF5OiBcIk00LVJUXCIsXHJcbiAgICBjb2RlOiBcIk00UlRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE01XHJcbiAgICovXHJcbiAgTTU6IHtcclxuICAgIGRpc3BsYXk6IFwiTTVcIixcclxuICAgIGNvZGU6IFwiTTVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1JQ0hUTVxyXG4gICAqL1xyXG4gIE1pY2hlbFF1b3RlU1RyYW5zcG9ydE1lZGl1bToge1xyXG4gICAgZGlzcGxheTogXCJNaWNoZWwncyB0cmFuc3BvcnQgbWVkaXVtXCIsXHJcbiAgICBjb2RlOiBcIk1JQ0hUTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTU1EVE1cclxuICAgKi9cclxuICBNTURUcmFuc3BvcnRNZWRpdW06IHtcclxuICAgIGRpc3BsYXk6IFwiTU1EIHRyYW5zcG9ydCBtZWRpdW1cIixcclxuICAgIGNvZGU6IFwiTU1EVE1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5BRlxyXG4gICAqL1xyXG4gIFNvZGl1bUZsdW9yaWRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvZGl1bSBGbHVvcmlkZVwiLFxyXG4gICAgY29kZTogXCJOQUZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5BUFNcclxuICAgKi9cclxuICBTb2RpdW1Qb2x5YW5ldGhvbFN1bGZvbmF0ZTAzNVBlcmNlbnRJbjA4NVBlcmNlbnRTb2RpdW1DaGxvcmlkZToge1xyXG4gICAgZGlzcGxheTogXCJTb2RpdW0gcG9seWFuZXRob2wgc3VsZm9uYXRlIDAuMzUlIGluIDAuODUlIHNvZGl1bSBjaGxvcmlkZVwiLFxyXG4gICAgY29kZTogXCJOQVBTXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBOT05FXHJcbiAgICovXHJcbiAgTm9uZToge1xyXG4gICAgZGlzcGxheTogXCJOb25lXCIsXHJcbiAgICBjb2RlOiBcIk5PTkVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBBR0VcclxuICAgKi9cclxuICBQYWdlc1F1b3RlU1NhbGluZToge1xyXG4gICAgZGlzcGxheTogXCJQYWdlcydzIFNhbGluZVwiLFxyXG4gICAgY29kZTogXCJQQUdFXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQSEVOT0xcclxuICAgKi9cclxuICBQaGVub2w6IHtcclxuICAgIGRpc3BsYXk6IFwiUGhlbm9sXCIsXHJcbiAgICBjb2RlOiBcIlBIRU5PTFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUFZBXHJcbiAgICovXHJcbiAgUFZBUG9seXZpbnlsYWxjb2hvbDoge1xyXG4gICAgZGlzcGxheTogXCJQVkEgKHBvbHl2aW55bGFsY29ob2wpXCIsXHJcbiAgICBjb2RlOiBcIlBWQVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUkxNXHJcbiAgICovXHJcbiAgUmVhZ2FuTG93ZU1lZGl1bToge1xyXG4gICAgZGlzcGxheTogXCJSZWFnYW4gTG93ZSBNZWRpdW1cIixcclxuICAgIGNvZGU6IFwiUkxNXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBTSUxJQ0FcclxuICAgKi9cclxuICBTaWxpY2VvdXNFYXJ0aDEyTWc6IHtcclxuICAgIGRpc3BsYXk6IFwiU2lsaWNlb3VzIGVhcnRoLCAxMiBtZ1wiLFxyXG4gICAgY29kZTogXCJTSUxJQ0FcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNQU1xyXG4gICAqL1xyXG4gIFNQU1RoaXNTaG91bGRCZVNwZWxsZWRPdXRJZk5vdFVuaXZlcnNhbGx5VW5kZXJzdG9vZDoge1xyXG4gICAgZGlzcGxheTogXCJTUFModGhpcyBzaG91bGQgYmUgc3BlbGxlZCBvdXQgaWYgbm90IHVuaXZlcnNhbGx5IHVuZGVyc3Rvb2QpXCIsXHJcbiAgICBjb2RlOiBcIlNQU1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1NUXHJcbiAgICovXHJcbiAgU2VydW1TZXBhcmF0b3JUdWJlUG9seW1lckdlbDoge1xyXG4gICAgZGlzcGxheTogXCJTZXJ1bSBTZXBhcmF0b3IgVHViZSAoUG9seW1lciBHZWwpXCIsXHJcbiAgICBjb2RlOiBcIlNTVFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1RVVE1cclxuICAgKi9cclxuICBTdHVhcnRUcmFuc3BvcnRNZWRpdW06IHtcclxuICAgIGRpc3BsYXk6IFwiU3R1YXJ0IHRyYW5zcG9ydCBtZWRpdW1cIixcclxuICAgIGNvZGU6IFwiU1RVVE1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRIUk9NXHJcbiAgICovXHJcbiAgVGhyb21iaW46IHtcclxuICAgIGRpc3BsYXk6IFwiVGhyb21iaW5cIixcclxuICAgIGNvZGU6IFwiVEhST01cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRIWU1PTFxyXG4gICAqL1xyXG4gIFRoeW1vbDoge1xyXG4gICAgZGlzcGxheTogXCJUaHltb2xcIixcclxuICAgIGNvZGU6IFwiVEhZTU9MXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBUSFlPXHJcbiAgICovXHJcbiAgVGh5b2dseWNvbGxhdGVCcm90aDoge1xyXG4gICAgZGlzcGxheTogXCJUaHlvZ2x5Y29sbGF0ZSBicm90aFwiLFxyXG4gICAgY29kZTogXCJUSFlPXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzcxXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBUT0xVXHJcbiAgICovXHJcbiAgVG9sdWVuZToge1xyXG4gICAgZGlzcGxheTogXCJUb2x1ZW5lXCIsXHJcbiAgICBjb2RlOiBcIlRPTFVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFVSRVRNXHJcbiAgICovXHJcbiAgVXJlYXBsYXNtYVRyYW5zcG9ydE1lZGl1bToge1xyXG4gICAgZGlzcGxheTogXCJVcmVhcGxhc21hIHRyYW5zcG9ydCBtZWRpdW1cIixcclxuICAgIGNvZGU6IFwiVVJFVE1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzFcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFZJUlRNXHJcbiAgICovXHJcbiAgVmlyYWxUcmFuc3BvcnRNZWRpdW06IHtcclxuICAgIGRpc3BsYXk6IFwiVmlyYWwgVHJhbnNwb3J0IG1lZGl1bVwiLFxyXG4gICAgY29kZTogXCJWSVJUTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogV0VTVFxyXG4gICAqL1xyXG4gIEJ1ZmZlcmVkQ2l0cmF0ZVdlc3RlcmdyZW5TZWRpbWVudGF0aW9uUmF0ZToge1xyXG4gICAgZGlzcGxheTogXCJCdWZmZXJlZCBDaXRyYXRlIChXZXN0ZXJncmVuIFNlZGltZW50YXRpb24gUmF0ZSlcIixcclxuICAgIGNvZGU6IFwiV0VTVFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3MVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==