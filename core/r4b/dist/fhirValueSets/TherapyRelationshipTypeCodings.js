// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/therapy-relationship-type|4.3.0
/**
 * Classification of relationship between a therapy and a contraindication or an indication.
 */
export const TherapyRelationshipTypeCodings = {
    /**
     * contraindicated-except-with: Contraindicated unless the other therapy is given
     */
    ContraindicatedUnlessTheOtherTherapyIsGiven: {
        display: "Contraindicated unless the other therapy is given",
        code: "contraindicated-except-with",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * contraindicated-only-with: Only contraindicated if the other therapy is given
     */
    OnlyContraindicatedIfTheOtherTherapyIsGiven: {
        display: "Only contraindicated if the other therapy is given",
        code: "contraindicated-only-with",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * indicated-except-with: Indicated except when the other therapy is given
     */
    IndicatedExceptWhenTheOtherTherapyIsGiven: {
        display: "Indicated except when the other therapy is given",
        code: "indicated-except-with",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * indicated-only-before: Indicated only if the other therapy is planned to be given afterwards (prep)
     */
    IndicatedOnlyIfTheOtherTherapyIsPlannedToBeGivenAfterwardsPrep: {
        display: "Indicated only if the other therapy is planned to be given afterwards (prep)",
        code: "indicated-only-before",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * indicated-only-with: Indicated only when the other therapy is given (co-occurrent)
     */
    IndicatedOnlyWhenTheOtherTherapyIsGivenCoOccurrent: {
        display: "Indicated only when the other therapy is given (co-occurrent)",
        code: "indicated-only-with",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * replace-other-therapy: Indicated to replace the other therapy
     */
    IndicatedToReplaceTheOtherTherapy: {
        display: "Indicated to replace the other therapy",
        code: "replace-other-therapy",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * replace-other-therapy-contraindicated: Indicated to replace the other contraindicated therapy.
     */
    IndicatedToReplaceTheOtherContraindicatedTherapy: {
        display: "Indicated to replace the other contraindicated therapy",
        code: "replace-other-therapy-contraindicated",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * replace-other-therapy-not-effective: Indicated to replace the other therapy not effective on patient
     */
    IndicatedToReplaceTheOtherTherapyNotEffectiveOnPatient: {
        display: "Indicated to replace the other therapy not effective on patient",
        code: "replace-other-therapy-not-effective",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
    /**
     * replace-other-therapy-not-tolerated: Indicated to replace the other therapy not well tolerated by patient
     */
    IndicatedToReplaceTheOtherTherapyNotWellToleratedByPatient: {
        display: "Indicated to replace the other therapy not well tolerated by patient",
        code: "replace-other-therapy-not-tolerated",
        system: "http://hl7.org/fhir/therapy-relationship-type",
    },
};
//# sourceMappingURL=data:application/json;base64,