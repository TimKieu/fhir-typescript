// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/message-reason-encounter|4.3.0
/**
 * Example Message Reasons. These are the set of codes that might be used an updating an encounter using admin-update.
 */
export const MessageReasonEncounterCodings = {
    /**
     * absent: The patient has temporarily left the institution.
     */
    Absent: {
        display: "Absent",
        code: "absent",
        system: "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
    },
    /**
     * admit: The patient has been admitted.
     */
    Admit: {
        display: "Admit",
        code: "admit",
        system: "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
    },
    /**
     * discharge: The patient has been discharged.
     */
    Discharge: {
        display: "Discharge",
        code: "discharge",
        system: "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
    },
    /**
     * edit: Encounter details have been updated (e.g. to correct a coding error).
     */
    Edit: {
        display: "Edit",
        code: "edit",
        system: "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
    },
    /**
     * moved: The patient has been moved to a new location.
     */
    Moved: {
        display: "Moved",
        code: "moved",
        system: "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
    },
    /**
     * return: The patient has returned from a temporary absence.
     */
    Returned: {
        display: "Returned",
        code: "return",
        system: "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVJlYXNvbkVuY291bnRlckNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01lc3NhZ2VSZWFzb25FbmNvdW50ZXJDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQWtDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxpRUFBaUU7S0FDMUU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRTtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxpRUFBaUU7S0FDMUU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsaUVBQWlFO0tBQzFFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVzc2FnZS1yZWFzb24tZW5jb3VudGVyfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRXhhbXBsZSBNZXNzYWdlIFJlYXNvbnMuIFRoZXNlIGFyZSB0aGUgc2V0IG9mIGNvZGVzIHRoYXQgbWlnaHQgYmUgdXNlZCBhbiB1cGRhdGluZyBhbiBlbmNvdW50ZXIgdXNpbmcgYWRtaW4tdXBkYXRlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVzc2FnZVJlYXNvbkVuY291bnRlckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWJzZW50OiBUaGUgcGF0aWVudCBoYXMgdGVtcG9yYXJpbHkgbGVmdCB0aGUgaW5zdGl0dXRpb24uXHJcbiAgICovXHJcbiAgQWJzZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGFkbWl0OiBUaGUgcGF0aWVudCBoYXMgYmVlbiBhZG1pdHRlZC5cclxuICAgKi9cclxuICBBZG1pdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkaXNjaGFyZ2U6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGRpc2NoYXJnZWQuXHJcbiAgICovXHJcbiAgRGlzY2hhcmdlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVkaXQ6IEVuY291bnRlciBkZXRhaWxzIGhhdmUgYmVlbiB1cGRhdGVkIChlLmcuIHRvIGNvcnJlY3QgYSBjb2RpbmcgZXJyb3IpLlxyXG4gICAqL1xyXG4gIEVkaXQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbW92ZWQ6IFRoZSBwYXRpZW50IGhhcyBiZWVuIG1vdmVkIHRvIGEgbmV3IGxvY2F0aW9uLlxyXG4gICAqL1xyXG4gIE1vdmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJldHVybjogVGhlIHBhdGllbnQgaGFzIHJldHVybmVkIGZyb20gYSB0ZW1wb3JhcnkgYWJzZW5jZS5cclxuICAgKi9cclxuICBSZXR1cm5lZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEV4YW1wbGUgTWVzc2FnZSBSZWFzb25zLiBUaGVzZSBhcmUgdGhlIHNldCBvZiBjb2RlcyB0aGF0IG1pZ2h0IGJlIHVzZWQgYW4gdXBkYXRpbmcgYW4gZW5jb3VudGVyIHVzaW5nIGFkbWluLXVwZGF0ZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZXNzYWdlUmVhc29uRW5jb3VudGVyQ29kaW5nczpNZXNzYWdlUmVhc29uRW5jb3VudGVyQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhYnNlbnQ6IFRoZSBwYXRpZW50IGhhcyB0ZW1wb3JhcmlseSBsZWZ0IHRoZSBpbnN0aXR1dGlvbi5cclxuICAgKi9cclxuICBBYnNlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWJzZW50XCIsXHJcbiAgICBjb2RlOiBcImFic2VudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVzc2FnZS1yZWFzb25zLWVuY291bnRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYWRtaXQ6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGFkbWl0dGVkLlxyXG4gICAqL1xyXG4gIEFkbWl0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkFkbWl0XCIsXHJcbiAgICBjb2RlOiBcImFkbWl0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZXNzYWdlLXJlYXNvbnMtZW5jb3VudGVyXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkaXNjaGFyZ2U6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGRpc2NoYXJnZWQuXHJcbiAgICovXHJcbiAgRGlzY2hhcmdlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpc2NoYXJnZVwiLFxyXG4gICAgY29kZTogXCJkaXNjaGFyZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lc3NhZ2UtcmVhc29ucy1lbmNvdW50ZXJcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVkaXQ6IEVuY291bnRlciBkZXRhaWxzIGhhdmUgYmVlbiB1cGRhdGVkIChlLmcuIHRvIGNvcnJlY3QgYSBjb2RpbmcgZXJyb3IpLlxyXG4gICAqL1xyXG4gIEVkaXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRWRpdFwiLFxyXG4gICAgY29kZTogXCJlZGl0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZXNzYWdlLXJlYXNvbnMtZW5jb3VudGVyXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtb3ZlZDogVGhlIHBhdGllbnQgaGFzIGJlZW4gbW92ZWQgdG8gYSBuZXcgbG9jYXRpb24uXHJcbiAgICovXHJcbiAgTW92ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTW92ZWRcIixcclxuICAgIGNvZGU6IFwibW92ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lc3NhZ2UtcmVhc29ucy1lbmNvdW50ZXJcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJldHVybjogVGhlIHBhdGllbnQgaGFzIHJldHVybmVkIGZyb20gYSB0ZW1wb3JhcnkgYWJzZW5jZS5cclxuICAgKi9cclxuICBSZXR1cm5lZDoge1xyXG4gICAgZGlzcGxheTogXCJSZXR1cm5lZFwiLFxyXG4gICAgY29kZTogXCJyZXR1cm5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lc3NhZ2UtcmVhc29ucy1lbmNvdW50ZXJcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=