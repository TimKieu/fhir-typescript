// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/location-physical-type|4.3.0
/**
 * This example value set defines a set of codes that can be used to indicate the physical form of the Location.
 */
export const LocationPhysicalTypeCodings = {
    /**
     * area: A defined physical boundary of something, such as a flood risk zone, region, postcode
     */
    Area: {
        display: "Area",
        code: "area",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * bd: A space that is allocated for sleeping/laying on. This is not the physical bed/trolley that may be moved about, but the space it may occupy.
     */
    Bed: {
        display: "Bed",
        code: "bd",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * bu: Any Building or structure. This may contain rooms, corridors, wings, etc. It might not have walls, or a roof, but is considered a defined/allocated space.
     */
    Building: {
        display: "Building",
        code: "bu",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * ca: A container that can store goods, equipment, medications or other items.
     */
    Cabinet: {
        display: "Cabinet",
        code: "ca",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * co: Any corridor within a Building, that may connect rooms.
     */
    Corridor: {
        display: "Corridor",
        code: "co",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * ho: A residential dwelling. Usually used to reference a location that a person/patient may reside.
     */
    House: {
        display: "House",
        code: "ho",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * jdn: A wide scope that covers a conceptual domain, such as a Nation (Country wide community or Federal Government - e.g. Ministry of Health),  Province or State (community or Government), Business (throughout the enterprise), Nation with a business scope of an agency (e.g. CDC, FDA etc.) or a Business segment (UK Pharmacy), not just an physical boundary
     */
    Jurisdiction: {
        display: "Jurisdiction",
        code: "jdn",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * lvl: A Level in a multi-level Building/Structure.
     */
    Level: {
        display: "Level",
        code: "lvl",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * rd: A defined path to travel between 2 points that has a known name.
     */
    Road: {
        display: "Road",
        code: "rd",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * ro: A space that is allocated as a room, it may have walls/roof etc., but does not require these.
     */
    Room: {
        display: "Room",
        code: "ro",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * si: A collection of buildings or other locations such as a site or a campus.
     */
    Site: {
        display: "Site",
        code: "si",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * ve: A means of transportation.
     */
    Vehicle: {
        display: "Vehicle",
        code: "ve",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * wa: A Ward is a section of a medical facility that may contain rooms and other types of location.
     */
    Ward: {
        display: "Ward",
        code: "wa",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
    /**
     * wi: A Wing within a Building, this often contains levels, rooms and corridors.
     */
    Wing: {
        display: "Wing",
        code: "wi",
        system: "http://terminology.hl7.org/CodeSystem/location-physical-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYXRpb25QaHlzaWNhbFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Mb2NhdGlvblBoeXNpY2FsVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsMkVBQTJFO0FBa0UzRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFrQztJQUN4RTs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSw4REFBOEQ7S0FDdkU7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSw4REFBOEQ7S0FDdkU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSw4REFBOEQ7S0FDdkU7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSw4REFBOEQ7S0FDdkU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9sb2NhdGlvbi1waHlzaWNhbC10eXBlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyBleGFtcGxlIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHBoeXNpY2FsIGZvcm0gb2YgdGhlIExvY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTG9jYXRpb25QaHlzaWNhbFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFyZWE6IEEgZGVmaW5lZCBwaHlzaWNhbCBib3VuZGFyeSBvZiBzb21ldGhpbmcsIHN1Y2ggYXMgYSBmbG9vZCByaXNrIHpvbmUsIHJlZ2lvbiwgcG9zdGNvZGVcclxuICAgKi9cclxuICBBcmVhOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGJkOiBBIHNwYWNlIHRoYXQgaXMgYWxsb2NhdGVkIGZvciBzbGVlcGluZy9sYXlpbmcgb24uIFRoaXMgaXMgbm90IHRoZSBwaHlzaWNhbCBiZWQvdHJvbGxleSB0aGF0IG1heSBiZSBtb3ZlZCBhYm91dCwgYnV0IHRoZSBzcGFjZSBpdCBtYXkgb2NjdXB5LlxyXG4gICAqL1xyXG4gIEJlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBidTogQW55IEJ1aWxkaW5nIG9yIHN0cnVjdHVyZS4gVGhpcyBtYXkgY29udGFpbiByb29tcywgY29ycmlkb3JzLCB3aW5ncywgZXRjLiBJdCBtaWdodCBub3QgaGF2ZSB3YWxscywgb3IgYSByb29mLCBidXQgaXMgY29uc2lkZXJlZCBhIGRlZmluZWQvYWxsb2NhdGVkIHNwYWNlLlxyXG4gICAqL1xyXG4gIEJ1aWxkaW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhOiBBIGNvbnRhaW5lciB0aGF0IGNhbiBzdG9yZSBnb29kcywgZXF1aXBtZW50LCBtZWRpY2F0aW9ucyBvciBvdGhlciBpdGVtcy5cclxuICAgKi9cclxuICBDYWJpbmV0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvOiBBbnkgY29ycmlkb3Igd2l0aGluIGEgQnVpbGRpbmcsIHRoYXQgbWF5IGNvbm5lY3Qgcm9vbXMuXHJcbiAgICovXHJcbiAgQ29ycmlkb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaG86IEEgcmVzaWRlbnRpYWwgZHdlbGxpbmcuIFVzdWFsbHkgdXNlZCB0byByZWZlcmVuY2UgYSBsb2NhdGlvbiB0aGF0IGEgcGVyc29uL3BhdGllbnQgbWF5IHJlc2lkZS5cclxuICAgKi9cclxuICBIb3VzZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBqZG46IEEgd2lkZSBzY29wZSB0aGF0IGNvdmVycyBhIGNvbmNlcHR1YWwgZG9tYWluLCBzdWNoIGFzIGEgTmF0aW9uIChDb3VudHJ5IHdpZGUgY29tbXVuaXR5IG9yIEZlZGVyYWwgR292ZXJubWVudCAtIGUuZy4gTWluaXN0cnkgb2YgSGVhbHRoKSwgIFByb3ZpbmNlIG9yIFN0YXRlIChjb21tdW5pdHkgb3IgR292ZXJubWVudCksIEJ1c2luZXNzICh0aHJvdWdob3V0IHRoZSBlbnRlcnByaXNlKSwgTmF0aW9uIHdpdGggYSBidXNpbmVzcyBzY29wZSBvZiBhbiBhZ2VuY3kgKGUuZy4gQ0RDLCBGREEgZXRjLikgb3IgYSBCdXNpbmVzcyBzZWdtZW50IChVSyBQaGFybWFjeSksIG5vdCBqdXN0IGFuIHBoeXNpY2FsIGJvdW5kYXJ5XHJcbiAgICovXHJcbiAgSnVyaXNkaWN0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGx2bDogQSBMZXZlbCBpbiBhIG11bHRpLWxldmVsIEJ1aWxkaW5nL1N0cnVjdHVyZS5cclxuICAgKi9cclxuICBMZXZlbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZDogQSBkZWZpbmVkIHBhdGggdG8gdHJhdmVsIGJldHdlZW4gMiBwb2ludHMgdGhhdCBoYXMgYSBrbm93biBuYW1lLlxyXG4gICAqL1xyXG4gIFJvYWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcm86IEEgc3BhY2UgdGhhdCBpcyBhbGxvY2F0ZWQgYXMgYSByb29tLCBpdCBtYXkgaGF2ZSB3YWxscy9yb29mIGV0Yy4sIGJ1dCBkb2VzIG5vdCByZXF1aXJlIHRoZXNlLlxyXG4gICAqL1xyXG4gIFJvb206IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc2k6IEEgY29sbGVjdGlvbiBvZiBidWlsZGluZ3Mgb3Igb3RoZXIgbG9jYXRpb25zIHN1Y2ggYXMgYSBzaXRlIG9yIGEgY2FtcHVzLlxyXG4gICAqL1xyXG4gIFNpdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdmU6IEEgbWVhbnMgb2YgdHJhbnNwb3J0YXRpb24uXHJcbiAgICovXHJcbiAgVmVoaWNsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3YTogQSBXYXJkIGlzIGEgc2VjdGlvbiBvZiBhIG1lZGljYWwgZmFjaWxpdHkgdGhhdCBtYXkgY29udGFpbiByb29tcyBhbmQgb3RoZXIgdHlwZXMgb2YgbG9jYXRpb24uXHJcbiAgICovXHJcbiAgV2FyZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3aTogQSBXaW5nIHdpdGhpbiBhIEJ1aWxkaW5nLCB0aGlzIG9mdGVuIGNvbnRhaW5zIGxldmVscywgcm9vbXMgYW5kIGNvcnJpZG9ycy5cclxuICAgKi9cclxuICBXaW5nOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBleGFtcGxlIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHBoeXNpY2FsIGZvcm0gb2YgdGhlIExvY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IExvY2F0aW9uUGh5c2ljYWxUeXBlQ29kaW5nczpMb2NhdGlvblBoeXNpY2FsVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXJlYTogQSBkZWZpbmVkIHBoeXNpY2FsIGJvdW5kYXJ5IG9mIHNvbWV0aGluZywgc3VjaCBhcyBhIGZsb29kIHJpc2sgem9uZSwgcmVnaW9uLCBwb3N0Y29kZVxyXG4gICAqL1xyXG4gIEFyZWE6IHtcclxuICAgIGRpc3BsYXk6IFwiQXJlYVwiLFxyXG4gICAgY29kZTogXCJhcmVhXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBiZDogQSBzcGFjZSB0aGF0IGlzIGFsbG9jYXRlZCBmb3Igc2xlZXBpbmcvbGF5aW5nIG9uLiBUaGlzIGlzIG5vdCB0aGUgcGh5c2ljYWwgYmVkL3Ryb2xsZXkgdGhhdCBtYXkgYmUgbW92ZWQgYWJvdXQsIGJ1dCB0aGUgc3BhY2UgaXQgbWF5IG9jY3VweS5cclxuICAgKi9cclxuICBCZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQmVkXCIsXHJcbiAgICBjb2RlOiBcImJkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBidTogQW55IEJ1aWxkaW5nIG9yIHN0cnVjdHVyZS4gVGhpcyBtYXkgY29udGFpbiByb29tcywgY29ycmlkb3JzLCB3aW5ncywgZXRjLiBJdCBtaWdodCBub3QgaGF2ZSB3YWxscywgb3IgYSByb29mLCBidXQgaXMgY29uc2lkZXJlZCBhIGRlZmluZWQvYWxsb2NhdGVkIHNwYWNlLlxyXG4gICAqL1xyXG4gIEJ1aWxkaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJ1aWxkaW5nXCIsXHJcbiAgICBjb2RlOiBcImJ1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYTogQSBjb250YWluZXIgdGhhdCBjYW4gc3RvcmUgZ29vZHMsIGVxdWlwbWVudCwgbWVkaWNhdGlvbnMgb3Igb3RoZXIgaXRlbXMuXHJcbiAgICovXHJcbiAgQ2FiaW5ldDoge1xyXG4gICAgZGlzcGxheTogXCJDYWJpbmV0XCIsXHJcbiAgICBjb2RlOiBcImNhXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjbzogQW55IGNvcnJpZG9yIHdpdGhpbiBhIEJ1aWxkaW5nLCB0aGF0IG1heSBjb25uZWN0IHJvb21zLlxyXG4gICAqL1xyXG4gIENvcnJpZG9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvcnJpZG9yXCIsXHJcbiAgICBjb2RlOiBcImNvXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBobzogQSByZXNpZGVudGlhbCBkd2VsbGluZy4gVXN1YWxseSB1c2VkIHRvIHJlZmVyZW5jZSBhIGxvY2F0aW9uIHRoYXQgYSBwZXJzb24vcGF0aWVudCBtYXkgcmVzaWRlLlxyXG4gICAqL1xyXG4gIEhvdXNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkhvdXNlXCIsXHJcbiAgICBjb2RlOiBcImhvXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBqZG46IEEgd2lkZSBzY29wZSB0aGF0IGNvdmVycyBhIGNvbmNlcHR1YWwgZG9tYWluLCBzdWNoIGFzIGEgTmF0aW9uIChDb3VudHJ5IHdpZGUgY29tbXVuaXR5IG9yIEZlZGVyYWwgR292ZXJubWVudCAtIGUuZy4gTWluaXN0cnkgb2YgSGVhbHRoKSwgIFByb3ZpbmNlIG9yIFN0YXRlIChjb21tdW5pdHkgb3IgR292ZXJubWVudCksIEJ1c2luZXNzICh0aHJvdWdob3V0IHRoZSBlbnRlcnByaXNlKSwgTmF0aW9uIHdpdGggYSBidXNpbmVzcyBzY29wZSBvZiBhbiBhZ2VuY3kgKGUuZy4gQ0RDLCBGREEgZXRjLikgb3IgYSBCdXNpbmVzcyBzZWdtZW50IChVSyBQaGFybWFjeSksIG5vdCBqdXN0IGFuIHBoeXNpY2FsIGJvdW5kYXJ5XHJcbiAgICovXHJcbiAgSnVyaXNkaWN0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkp1cmlzZGljdGlvblwiLFxyXG4gICAgY29kZTogXCJqZG5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xvY2F0aW9uLXBoeXNpY2FsLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGx2bDogQSBMZXZlbCBpbiBhIG11bHRpLWxldmVsIEJ1aWxkaW5nL1N0cnVjdHVyZS5cclxuICAgKi9cclxuICBMZXZlbDoge1xyXG4gICAgZGlzcGxheTogXCJMZXZlbFwiLFxyXG4gICAgY29kZTogXCJsdmxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xvY2F0aW9uLXBoeXNpY2FsLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJkOiBBIGRlZmluZWQgcGF0aCB0byB0cmF2ZWwgYmV0d2VlbiAyIHBvaW50cyB0aGF0IGhhcyBhIGtub3duIG5hbWUuXHJcbiAgICovXHJcbiAgUm9hZDoge1xyXG4gICAgZGlzcGxheTogXCJSb2FkXCIsXHJcbiAgICBjb2RlOiBcInJkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBybzogQSBzcGFjZSB0aGF0IGlzIGFsbG9jYXRlZCBhcyBhIHJvb20sIGl0IG1heSBoYXZlIHdhbGxzL3Jvb2YgZXRjLiwgYnV0IGRvZXMgbm90IHJlcXVpcmUgdGhlc2UuXHJcbiAgICovXHJcbiAgUm9vbToge1xyXG4gICAgZGlzcGxheTogXCJSb29tXCIsXHJcbiAgICBjb2RlOiBcInJvXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzaTogQSBjb2xsZWN0aW9uIG9mIGJ1aWxkaW5ncyBvciBvdGhlciBsb2NhdGlvbnMgc3VjaCBhcyBhIHNpdGUgb3IgYSBjYW1wdXMuXHJcbiAgICovXHJcbiAgU2l0ZToge1xyXG4gICAgZGlzcGxheTogXCJTaXRlXCIsXHJcbiAgICBjb2RlOiBcInNpXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9sb2NhdGlvbi1waHlzaWNhbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2ZTogQSBtZWFucyBvZiB0cmFuc3BvcnRhdGlvbi5cclxuICAgKi9cclxuICBWZWhpY2xlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlZlaGljbGVcIixcclxuICAgIGNvZGU6IFwidmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xvY2F0aW9uLXBoeXNpY2FsLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdhOiBBIFdhcmQgaXMgYSBzZWN0aW9uIG9mIGEgbWVkaWNhbCBmYWNpbGl0eSB0aGF0IG1heSBjb250YWluIHJvb21zIGFuZCBvdGhlciB0eXBlcyBvZiBsb2NhdGlvbi5cclxuICAgKi9cclxuICBXYXJkOiB7XHJcbiAgICBkaXNwbGF5OiBcIldhcmRcIixcclxuICAgIGNvZGU6IFwid2FcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xvY2F0aW9uLXBoeXNpY2FsLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdpOiBBIFdpbmcgd2l0aGluIGEgQnVpbGRpbmcsIHRoaXMgb2Z0ZW4gY29udGFpbnMgbGV2ZWxzLCByb29tcyBhbmQgY29ycmlkb3JzLlxyXG4gICAqL1xyXG4gIFdpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiV2luZ1wiLFxyXG4gICAgY29kZTogXCJ3aVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbG9jYXRpb24tcGh5c2ljYWwtdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==