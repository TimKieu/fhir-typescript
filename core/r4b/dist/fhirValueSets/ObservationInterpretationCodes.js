// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-interpretation|4.3.0
/**
 * A categorical assessment, providing a rough qualitative interpretation of the observation value,    such as “normal”/ “abnormal”,”low” / “high”, “better” / “worse”, “susceptible” / “resistant”, “expected”/ “not expected”.    The value set is intended to be for ANY use where coded representation of an interpretation is needed.
 *
 *    Notes:
 *
 *    This is being communicated in v2.x in OBX-8 (Observation Interpretation), in v3 in ObservationInterpretation (CWE) in R1 (Representative Realm) and in FHIR in    Observation.interpretation. Historically these values come from the laboratory domain, and these codes are extensively    used. The value set binding is extensible, so codes outside the value set that are needed for interpretation concepts    (i.e. particular meanings) that are not included in the value set can be used, and these new codes may also be added to    the value set and published in a future version.
 */
export const ObservationInterpretationCodes = {
    /**
     * Code: _GeneticObservationInterpretation
     */
    GeneticObservationInterpretation: "_GeneticObservationInterpretation",
    /**
     * Code: _ObservationInterpretationChange
     */
    ObservationInterpretationChange: "_ObservationInterpretationChange",
    /**
     * Code: _ObservationInterpretationExceptions
     */
    ObservationInterpretationExceptions: "_ObservationInterpretationExceptions",
    /**
     * Code: _ObservationInterpretationNormality
     */
    ObservationInterpretationNormality: "_ObservationInterpretationNormality",
    /**
     * Code: _ObservationInterpretationSusceptibility
     */
    ObservationInterpretationSusceptibility: "_ObservationInterpretationSusceptibility",
    /**
     * Code: &lt;
     */
    OffScaleLow: "<",
    /**
     * Code: &gt;
     */
    OffScaleHigh: ">",
    /**
     * Code: A
     */
    Abnormal: "A",
    /**
     * Code: AA
     */
    CriticalAbnormal: "AA",
    /**
     * Code: B
     */
    Better: "B",
    /**
     * Code: CAR
     */
    Carrier: "CAR",
    /**
     * Code: D
     */
    SignificantChangeDown: "D",
    /**
     * Code: DET
     */
    Detected: "DET",
    /**
     * Code: E
     */
    Equivocal: "E",
    /**
     * Code: EX
     */
    OutsideThreshold: "EX",
    /**
     * Code: EXP
     */
    Expected: "EXP",
    /**
     * Code: H
     */
    High: "H",
    /**
     * Code: HH
     */
    CriticalHigh: "HH",
    /**
     * Code: HU
     */
    SignificantlyHigh: "HU",
    /**
     * Code: HX
     */
    AboveHighThreshold: "HX",
    /**
     * Code: I
     */
    Intermediate: "I",
    /**
     * Code: IE
     */
    InsufficientEvidence: "IE",
    /**
     * Code: IND
     */
    Indeterminate: "IND",
    /**
     * Code: L
     */
    Low: "L",
    /**
     * Code: LL
     */
    CriticalLow: "LL",
    /**
     * Code: LU
     */
    SignificantlyLow: "LU",
    /**
     * Code: LX
     */
    BelowLowThreshold: "LX",
    /**
     * Code: N
     */
    Normal: "N",
    /**
     * Code: NCL
     */
    NoCLSIDefinedBreakpoint: "NCL",
    /**
     * Code: ND
     */
    NotDetected: "ND",
    /**
     * Code: NEG
     */
    Negative: "NEG",
    /**
     * Code: NR
     */
    NonReactive: "NR",
    /**
     * Code: NS
     */
    NonSusceptible: "NS",
    /**
     * Code: ObservationInterpretationDetection
     */
    ObservationInterpretationDetection: "ObservationInterpretationDetection",
    /**
     * Code: ObservationInterpretationExpectation
     */
    ObservationInterpretationExpectation: "ObservationInterpretationExpectation",
    /**
     * Code: POS
     */
    Positive: "POS",
    /**
     * Code: R
     */
    Resistant: "R",
    /**
     * Code: ReactivityObservationInterpretation
     */
    ReactivityObservationInterpretation: "ReactivityObservationInterpretation",
    /**
     * Code: RR
     */
    Reactive: "RR",
    /**
     * Code: S
     */
    Susceptible: "S",
    /**
     * Code: SDD
     */
    SusceptibleDoseDependent: "SDD",
    /**
     * Code: SYN-R
     */
    SynergyResistant: "SYN-R",
    /**
     * Code: SYN-S
     */
    SynergySusceptible: "SYN-S",
    /**
     * Code: U
     */
    SignificantChangeUp: "U",
    /**
     * Code: UNE
     */
    Unexpected: "UNE",
    /**
     * Code: W
     */
    Worse: "W",
    /**
     * Code: WR
     */
    WeaklyReactive: "WR",
};
//# sourceMappingURL=data:application/json;base64,