// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/task-status|4.3.0
/**
 * The current status of the task.
 */
export const TaskStatusCodes = {
    /**
     * accepted: The potential performer has agreed to execute the task but has not yet started work.
     */
    Accepted: "accepted",
    /**
     * cancelled: The task was not completed.
     */
    Cancelled: "cancelled",
    /**
     * completed: The task has been completed.
     */
    Completed: "completed",
    /**
     * draft: The task is not yet ready to be acted upon.
     */
    Draft: "draft",
    /**
     * entered-in-error: The task should never have existed and is retained only because of the possibility it may have used.
     */
    EnteredInError: "entered-in-error",
    /**
     * failed: The task was attempted but could not be completed due to some error.
     */
    Failed: "failed",
    /**
     * in-progress: The task has been started but is not yet complete.
     */
    InProgress: "in-progress",
    /**
     * on-hold: The task has been started but work has been paused.
     */
    OnHold: "on-hold",
    /**
     * ready: The task is ready to be performed, but no action has yet been taken.  Used in place of requested/received/accepted/rejected when request assignment and acceptance is a given.
     */
    Ready: "ready",
    /**
     * received: A potential performer has claimed ownership of the task and is evaluating whether to perform it.
     */
    Received: "received",
    /**
     * rejected: The potential performer who claimed ownership of the task has decided not to execute it prior to performing any action.
     */
    Rejected: "rejected",
    /**
     * requested: The task is ready to be acted upon and action is sought.
     */
    Requested: "requested",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza1N0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UYXNrU3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsZ0VBQWdFO0FBRWhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHO0lBQzdCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGNBQWMsRUFBRSxrQkFBa0I7SUFDbEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFVBQVUsRUFBRSxhQUFhO0lBQ3pCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFNBQVM7SUFDakI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0NBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdGFzay1zdGF0dXN8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIHRhc2suXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVGFza1N0YXR1c0NvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjY2VwdGVkOiBUaGUgcG90ZW50aWFsIHBlcmZvcm1lciBoYXMgYWdyZWVkIHRvIGV4ZWN1dGUgdGhlIHRhc2sgYnV0IGhhcyBub3QgeWV0IHN0YXJ0ZWQgd29yay5cclxuICAgKi9cclxuICBBY2NlcHRlZDogXCJhY2NlcHRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIHRhc2sgd2FzIG5vdCBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBcImNhbmNlbGxlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIHRhc2sgaGFzIGJlZW4gY29tcGxldGVkLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDogXCJjb21wbGV0ZWRcIixcclxuICAvKipcclxuICAgKiBkcmFmdDogVGhlIHRhc2sgaXMgbm90IHlldCByZWFkeSB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIERyYWZ0OiBcImRyYWZ0XCIsXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIHRhc2sgc2hvdWxkIG5ldmVyIGhhdmUgZXhpc3RlZCBhbmQgaXMgcmV0YWluZWQgb25seSBiZWNhdXNlIG9mIHRoZSBwb3NzaWJpbGl0eSBpdCBtYXkgaGF2ZSB1c2VkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAvKipcclxuICAgKiBmYWlsZWQ6IFRoZSB0YXNrIHdhcyBhdHRlbXB0ZWQgYnV0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQgZHVlIHRvIHNvbWUgZXJyb3IuXHJcbiAgICovXHJcbiAgRmFpbGVkOiBcImZhaWxlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgdGFzayBoYXMgYmVlbiBzdGFydGVkIGJ1dCBpcyBub3QgeWV0IGNvbXBsZXRlLlxyXG4gICAqL1xyXG4gIEluUHJvZ3Jlc3M6IFwiaW4tcHJvZ3Jlc3NcIixcclxuICAvKipcclxuICAgKiBvbi1ob2xkOiBUaGUgdGFzayBoYXMgYmVlbiBzdGFydGVkIGJ1dCB3b3JrIGhhcyBiZWVuIHBhdXNlZC5cclxuICAgKi9cclxuICBPbkhvbGQ6IFwib24taG9sZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlYWR5OiBUaGUgdGFzayBpcyByZWFkeSB0byBiZSBwZXJmb3JtZWQsIGJ1dCBubyBhY3Rpb24gaGFzIHlldCBiZWVuIHRha2VuLiAgVXNlZCBpbiBwbGFjZSBvZiByZXF1ZXN0ZWQvcmVjZWl2ZWQvYWNjZXB0ZWQvcmVqZWN0ZWQgd2hlbiByZXF1ZXN0IGFzc2lnbm1lbnQgYW5kIGFjY2VwdGFuY2UgaXMgYSBnaXZlbi5cclxuICAgKi9cclxuICBSZWFkeTogXCJyZWFkeVwiLFxyXG4gIC8qKlxyXG4gICAqIHJlY2VpdmVkOiBBIHBvdGVudGlhbCBwZXJmb3JtZXIgaGFzIGNsYWltZWQgb3duZXJzaGlwIG9mIHRoZSB0YXNrIGFuZCBpcyBldmFsdWF0aW5nIHdoZXRoZXIgdG8gcGVyZm9ybSBpdC5cclxuICAgKi9cclxuICBSZWNlaXZlZDogXCJyZWNlaXZlZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlamVjdGVkOiBUaGUgcG90ZW50aWFsIHBlcmZvcm1lciB3aG8gY2xhaW1lZCBvd25lcnNoaXAgb2YgdGhlIHRhc2sgaGFzIGRlY2lkZWQgbm90IHRvIGV4ZWN1dGUgaXQgcHJpb3IgdG8gcGVyZm9ybWluZyBhbnkgYWN0aW9uLlxyXG4gICAqL1xyXG4gIFJlamVjdGVkOiBcInJlamVjdGVkXCIsXHJcbiAgLyoqXHJcbiAgICogcmVxdWVzdGVkOiBUaGUgdGFzayBpcyByZWFkeSB0byBiZSBhY3RlZCB1cG9uIGFuZCBhY3Rpb24gaXMgc291Z2h0LlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlZDogXCJyZXF1ZXN0ZWRcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIHRhc2suXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUYXNrU3RhdHVzQ29kZVR5cGUgPSB0eXBlb2YgVGFza1N0YXR1c0NvZGVzW2tleW9mIHR5cGVvZiBUYXNrU3RhdHVzQ29kZXNdO1xyXG4iXX0=