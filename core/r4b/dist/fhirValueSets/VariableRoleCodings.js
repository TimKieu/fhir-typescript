// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/variable-role|4.3.0
/**
 * The role that the assertion variable plays.
 */
export const VariableRoleCodings = {
    /**
     * confounder: variable represents a confounder.
     */
    Confounder: {
        display: "confounder",
        code: "confounder",
        system: "http://terminology.hl7.org/CodeSystem/variable-role",
    },
    /**
     * exposure: variable represents an exposure.
     */
    Exposure: {
        display: "exposure",
        code: "exposure",
        system: "http://terminology.hl7.org/CodeSystem/variable-role",
    },
    /**
     * measuredVariable: variable represents a measured variable.
     */
    MeasuredVariable: {
        display: "measured variable",
        code: "measuredVariable",
        system: "http://terminology.hl7.org/CodeSystem/variable-role",
    },
    /**
     * population: variable represents a population.
     */
    Population: {
        display: "population",
        code: "population",
        system: "http://terminology.hl7.org/CodeSystem/variable-role",
    },
    /**
     * referenceExposure: variable represents a reference exposure.
     */
    ReferenceExposure: {
        display: "reference exposure",
        code: "referenceExposure",
        system: "http://terminology.hl7.org/CodeSystem/variable-role",
    },
    /**
     * subpopulation: variable represents a subpopulation.
     */
    Subpopulation: {
        display: "subpopulation",
        code: "subpopulation",
        system: "http://terminology.hl7.org/CodeSystem/variable-role",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFyaWFibGVSb2xlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVmFyaWFibGVSb2xlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxrRUFBa0U7QUFrQ2xFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFyaWFibGUtcm9sZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSByb2xlIHRoYXQgdGhlIGFzc2VydGlvbiB2YXJpYWJsZSBwbGF5cy5cclxuICovXHJcbmV4cG9ydCB0eXBlIFZhcmlhYmxlUm9sZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29uZm91bmRlcjogdmFyaWFibGUgcmVwcmVzZW50cyBhIGNvbmZvdW5kZXIuXHJcbiAgICovXHJcbiAgQ29uZm91bmRlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBleHBvc3VyZTogdmFyaWFibGUgcmVwcmVzZW50cyBhbiBleHBvc3VyZS5cclxuICAgKi9cclxuICBFeHBvc3VyZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtZWFzdXJlZFZhcmlhYmxlOiB2YXJpYWJsZSByZXByZXNlbnRzIGEgbWVhc3VyZWQgdmFyaWFibGUuXHJcbiAgICovXHJcbiAgTWVhc3VyZWRWYXJpYWJsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwb3B1bGF0aW9uOiB2YXJpYWJsZSByZXByZXNlbnRzIGEgcG9wdWxhdGlvbi5cclxuICAgKi9cclxuICBQb3B1bGF0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlZmVyZW5jZUV4cG9zdXJlOiB2YXJpYWJsZSByZXByZXNlbnRzIGEgcmVmZXJlbmNlIGV4cG9zdXJlLlxyXG4gICAqL1xyXG4gIFJlZmVyZW5jZUV4cG9zdXJlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1YnBvcHVsYXRpb246IHZhcmlhYmxlIHJlcHJlc2VudHMgYSBzdWJwb3B1bGF0aW9uLlxyXG4gICAqL1xyXG4gIFN1YnBvcHVsYXRpb246IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgcm9sZSB0aGF0IHRoZSBhc3NlcnRpb24gdmFyaWFibGUgcGxheXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVmFyaWFibGVSb2xlQ29kaW5nczpWYXJpYWJsZVJvbGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbmZvdW5kZXI6IHZhcmlhYmxlIHJlcHJlc2VudHMgYSBjb25mb3VuZGVyLlxyXG4gICAqL1xyXG4gIENvbmZvdW5kZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiY29uZm91bmRlclwiLFxyXG4gICAgY29kZTogXCJjb25mb3VuZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92YXJpYWJsZS1yb2xlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBleHBvc3VyZTogdmFyaWFibGUgcmVwcmVzZW50cyBhbiBleHBvc3VyZS5cclxuICAgKi9cclxuICBFeHBvc3VyZToge1xyXG4gICAgZGlzcGxheTogXCJleHBvc3VyZVwiLFxyXG4gICAgY29kZTogXCJleHBvc3VyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmFyaWFibGUtcm9sZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbWVhc3VyZWRWYXJpYWJsZTogdmFyaWFibGUgcmVwcmVzZW50cyBhIG1lYXN1cmVkIHZhcmlhYmxlLlxyXG4gICAqL1xyXG4gIE1lYXN1cmVkVmFyaWFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwibWVhc3VyZWQgdmFyaWFibGVcIixcclxuICAgIGNvZGU6IFwibWVhc3VyZWRWYXJpYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmFyaWFibGUtcm9sZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcG9wdWxhdGlvbjogdmFyaWFibGUgcmVwcmVzZW50cyBhIHBvcHVsYXRpb24uXHJcbiAgICovXHJcbiAgUG9wdWxhdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJwb3B1bGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcInBvcHVsYXRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3ZhcmlhYmxlLXJvbGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlZmVyZW5jZUV4cG9zdXJlOiB2YXJpYWJsZSByZXByZXNlbnRzIGEgcmVmZXJlbmNlIGV4cG9zdXJlLlxyXG4gICAqL1xyXG4gIFJlZmVyZW5jZUV4cG9zdXJlOiB7XHJcbiAgICBkaXNwbGF5OiBcInJlZmVyZW5jZSBleHBvc3VyZVwiLFxyXG4gICAgY29kZTogXCJyZWZlcmVuY2VFeHBvc3VyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmFyaWFibGUtcm9sZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3VicG9wdWxhdGlvbjogdmFyaWFibGUgcmVwcmVzZW50cyBhIHN1YnBvcHVsYXRpb24uXHJcbiAgICovXHJcbiAgU3VicG9wdWxhdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJzdWJwb3B1bGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcInN1YnBvcHVsYXRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3ZhcmlhYmxlLXJvbGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=