// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-code|4.3.0
/**
 * Provides examples of actions to be performed.
 */
export const ActionCodings = {
    /**
     * collect-information: The action indicates that information should be collected from a participant in the process.
     */
    CollectInformation: {
        display: "Collect information",
        code: "collect-information",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * order-service: The action indicates that a particular service should be provided.
     */
    OrderAService: {
        display: "Order a service",
        code: "order-service",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * prescribe-medication: The action indicates that a particular medication should be prescribed to the patient.
     */
    PrescribeAMedication: {
        display: "Prescribe a medication",
        code: "prescribe-medication",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * propose-diagnosis: The action indicates that a particular diagnosis should be proposed.
     */
    ProposeADiagnosis: {
        display: "Propose a diagnosis",
        code: "propose-diagnosis",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * recommend-immunization: The action indicates that a particular immunization should be performed.
     */
    RecommendAnImmunization: {
        display: "Recommend an immunization",
        code: "recommend-immunization",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * record-detected-issue: The action indicates that a particular detected issue should be recorded.
     */
    RecordADetectedIssue: {
        display: "Record a detected issue",
        code: "record-detected-issue",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * record-inference: The action indicates that a particular inference should be recorded.
     */
    RecordAnInference: {
        display: "Record an inference",
        code: "record-inference",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * report-flag: The action indicates that a particular flag should be reported.
     */
    ReportAFlag: {
        display: "Report a flag",
        code: "report-flag",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
    /**
     * send-message: The action indicates that a particular message should be sent to a participant in the process.
     */
    SendAMessage: {
        display: "Send a message",
        code: "send-message",
        system: "http://terminology.hl7.org/CodeSystem/action-code",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQWN0aW9uQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxnRUFBZ0U7QUE4Q2hFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFvQjtJQUM1Qzs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxtQkFBbUI7UUFDekIsTUFBTSxFQUFFLG1EQUFtRDtLQUM1RDtJQUNEOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUU7UUFDdkIsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLG1EQUFtRDtLQUM1RDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLG1EQUFtRDtLQUM1RDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWN0aW9uLWNvZGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyBleGFtcGxlcyBvZiBhY3Rpb25zIHRvIGJlIHBlcmZvcm1lZC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFjdGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29sbGVjdC1pbmZvcm1hdGlvbjogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBpbmZvcm1hdGlvbiBzaG91bGQgYmUgY29sbGVjdGVkIGZyb20gYSBwYXJ0aWNpcGFudCBpbiB0aGUgcHJvY2Vzcy5cclxuICAgKi9cclxuICBDb2xsZWN0SW5mb3JtYXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3JkZXItc2VydmljZTogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgc2VydmljZSBzaG91bGQgYmUgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgT3JkZXJBU2VydmljZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcmVzY3JpYmUtbWVkaWNhdGlvbjogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgbWVkaWNhdGlvbiBzaG91bGQgYmUgcHJlc2NyaWJlZCB0byB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBQcmVzY3JpYmVBTWVkaWNhdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm9wb3NlLWRpYWdub3NpczogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgZGlhZ25vc2lzIHNob3VsZCBiZSBwcm9wb3NlZC5cclxuICAgKi9cclxuICBQcm9wb3NlQURpYWdub3NpczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWNvbW1lbmQtaW1tdW5pemF0aW9uOiBUaGUgYWN0aW9uIGluZGljYXRlcyB0aGF0IGEgcGFydGljdWxhciBpbW11bml6YXRpb24gc2hvdWxkIGJlIHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBSZWNvbW1lbmRBbkltbXVuaXphdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWNvcmQtZGV0ZWN0ZWQtaXNzdWU6IFRoZSBhY3Rpb24gaW5kaWNhdGVzIHRoYXQgYSBwYXJ0aWN1bGFyIGRldGVjdGVkIGlzc3VlIHNob3VsZCBiZSByZWNvcmRlZC5cclxuICAgKi9cclxuICBSZWNvcmRBRGV0ZWN0ZWRJc3N1ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWNvcmQtaW5mZXJlbmNlOiBUaGUgYWN0aW9uIGluZGljYXRlcyB0aGF0IGEgcGFydGljdWxhciBpbmZlcmVuY2Ugc2hvdWxkIGJlIHJlY29yZGVkLlxyXG4gICAqL1xyXG4gIFJlY29yZEFuSW5mZXJlbmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlcG9ydC1mbGFnOiBUaGUgYWN0aW9uIGluZGljYXRlcyB0aGF0IGEgcGFydGljdWxhciBmbGFnIHNob3VsZCBiZSByZXBvcnRlZC5cclxuICAgKi9cclxuICBSZXBvcnRBRmxhZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzZW5kLW1lc3NhZ2U6IFRoZSBhY3Rpb24gaW5kaWNhdGVzIHRoYXQgYSBwYXJ0aWN1bGFyIG1lc3NhZ2Ugc2hvdWxkIGJlIHNlbnQgdG8gYSBwYXJ0aWNpcGFudCBpbiB0aGUgcHJvY2Vzcy5cclxuICAgKi9cclxuICBTZW5kQU1lc3NhZ2U6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyBleGFtcGxlcyBvZiBhY3Rpb25zIHRvIGJlIHBlcmZvcm1lZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBY3Rpb25Db2RpbmdzOkFjdGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29sbGVjdC1pbmZvcm1hdGlvbjogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBpbmZvcm1hdGlvbiBzaG91bGQgYmUgY29sbGVjdGVkIGZyb20gYSBwYXJ0aWNpcGFudCBpbiB0aGUgcHJvY2Vzcy5cclxuICAgKi9cclxuICBDb2xsZWN0SW5mb3JtYXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiQ29sbGVjdCBpbmZvcm1hdGlvblwiLFxyXG4gICAgY29kZTogXCJjb2xsZWN0LWluZm9ybWF0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hY3Rpb24tY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3JkZXItc2VydmljZTogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgc2VydmljZSBzaG91bGQgYmUgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgT3JkZXJBU2VydmljZToge1xyXG4gICAgZGlzcGxheTogXCJPcmRlciBhIHNlcnZpY2VcIixcclxuICAgIGNvZGU6IFwib3JkZXItc2VydmljZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWN0aW9uLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByZXNjcmliZS1tZWRpY2F0aW9uOiBUaGUgYWN0aW9uIGluZGljYXRlcyB0aGF0IGEgcGFydGljdWxhciBtZWRpY2F0aW9uIHNob3VsZCBiZSBwcmVzY3JpYmVkIHRvIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIFByZXNjcmliZUFNZWRpY2F0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByZXNjcmliZSBhIG1lZGljYXRpb25cIixcclxuICAgIGNvZGU6IFwicHJlc2NyaWJlLW1lZGljYXRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FjdGlvbi1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9wb3NlLWRpYWdub3NpczogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgZGlhZ25vc2lzIHNob3VsZCBiZSBwcm9wb3NlZC5cclxuICAgKi9cclxuICBQcm9wb3NlQURpYWdub3Npczoge1xyXG4gICAgZGlzcGxheTogXCJQcm9wb3NlIGEgZGlhZ25vc2lzXCIsXHJcbiAgICBjb2RlOiBcInByb3Bvc2UtZGlhZ25vc2lzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hY3Rpb24tY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVjb21tZW5kLWltbXVuaXphdGlvbjogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgaW1tdW5pemF0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgUmVjb21tZW5kQW5JbW11bml6YXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiUmVjb21tZW5kIGFuIGltbXVuaXphdGlvblwiLFxyXG4gICAgY29kZTogXCJyZWNvbW1lbmQtaW1tdW5pemF0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hY3Rpb24tY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVjb3JkLWRldGVjdGVkLWlzc3VlOiBUaGUgYWN0aW9uIGluZGljYXRlcyB0aGF0IGEgcGFydGljdWxhciBkZXRlY3RlZCBpc3N1ZSBzaG91bGQgYmUgcmVjb3JkZWQuXHJcbiAgICovXHJcbiAgUmVjb3JkQURldGVjdGVkSXNzdWU6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVjb3JkIGEgZGV0ZWN0ZWQgaXNzdWVcIixcclxuICAgIGNvZGU6IFwicmVjb3JkLWRldGVjdGVkLWlzc3VlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hY3Rpb24tY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVjb3JkLWluZmVyZW5jZTogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgaW5mZXJlbmNlIHNob3VsZCBiZSByZWNvcmRlZC5cclxuICAgKi9cclxuICBSZWNvcmRBbkluZmVyZW5jZToge1xyXG4gICAgZGlzcGxheTogXCJSZWNvcmQgYW4gaW5mZXJlbmNlXCIsXHJcbiAgICBjb2RlOiBcInJlY29yZC1pbmZlcmVuY2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FjdGlvbi1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXBvcnQtZmxhZzogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgZmxhZyBzaG91bGQgYmUgcmVwb3J0ZWQuXHJcbiAgICovXHJcbiAgUmVwb3J0QUZsYWc6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVwb3J0IGEgZmxhZ1wiLFxyXG4gICAgY29kZTogXCJyZXBvcnQtZmxhZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWN0aW9uLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNlbmQtbWVzc2FnZTogVGhlIGFjdGlvbiBpbmRpY2F0ZXMgdGhhdCBhIHBhcnRpY3VsYXIgbWVzc2FnZSBzaG91bGQgYmUgc2VudCB0byBhIHBhcnRpY2lwYW50IGluIHRoZSBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIFNlbmRBTWVzc2FnZToge1xyXG4gICAgZGlzcGxheTogXCJTZW5kIGEgbWVzc2FnZVwiLFxyXG4gICAgY29kZTogXCJzZW5kLW1lc3NhZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FjdGlvbi1jb2RlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19