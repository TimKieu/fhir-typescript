// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/report-relation-type|4.3.0
/**
 * The type of relationship between reports.
 */
export const ReportRelationTypeCodings = {
    /**
     * amendedWith: This document was.
     */
    AmendedWith: {
        display: "Amended With",
        code: "amendedWith",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * amends: This document notes corrections or changes to replace or supersede parts of the target document.
     */
    Amends: {
        display: "Amends",
        code: "amends",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * appendedWith: This document was.
     */
    AppendedWith: {
        display: "Appended With",
        code: "appendedWith",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * appends: This document adds additional information to the target document.
     */
    Appends: {
        display: "Appends",
        code: "appends",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * replacedWith: This document was.
     */
    ReplacedWith: {
        display: "Replaced With",
        code: "replacedWith",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * replaces: This document replaces or supersedes the target document.
     */
    Replaces: {
        display: "Replaces",
        code: "replaces",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * transformedWith: This document was.
     */
    TransformedWith: {
        display: "Transformed With",
        code: "transformedWith",
        system: "http://hl7.org/fhir/report-relation-type",
    },
    /**
     * transforms: This document was generated by transforming the target document (eg format or language conversion).
     */
    Transforms: {
        display: "Transforms",
        code: "transforms",
        system: "http://hl7.org/fhir/report-relation-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3J0UmVsYXRpb25UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUmVwb3J0UmVsYXRpb25UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx5RUFBeUU7QUEwQ3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVwb3J0LXJlbGF0aW9uLXR5cGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiByZWxhdGlvbnNoaXAgYmV0d2VlbiByZXBvcnRzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVwb3J0UmVsYXRpb25UeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbWVuZGVkV2l0aDogVGhpcyBkb2N1bWVudCB3YXMuXHJcbiAgICovXHJcbiAgQW1lbmRlZFdpdGg6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYW1lbmRzOiBUaGlzIGRvY3VtZW50IG5vdGVzIGNvcnJlY3Rpb25zIG9yIGNoYW5nZXMgdG8gcmVwbGFjZSBvciBzdXBlcnNlZGUgcGFydHMgb2YgdGhlIHRhcmdldCBkb2N1bWVudC5cclxuICAgKi9cclxuICBBbWVuZHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYXBwZW5kZWRXaXRoOiBUaGlzIGRvY3VtZW50IHdhcy5cclxuICAgKi9cclxuICBBcHBlbmRlZFdpdGg6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYXBwZW5kczogVGhpcyBkb2N1bWVudCBhZGRzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gdGhlIHRhcmdldCBkb2N1bWVudC5cclxuICAgKi9cclxuICBBcHBlbmRzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlcGxhY2VkV2l0aDogVGhpcyBkb2N1bWVudCB3YXMuXHJcbiAgICovXHJcbiAgUmVwbGFjZWRXaXRoOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlcGxhY2VzOiBUaGlzIGRvY3VtZW50IHJlcGxhY2VzIG9yIHN1cGVyc2VkZXMgdGhlIHRhcmdldCBkb2N1bWVudC5cclxuICAgKi9cclxuICBSZXBsYWNlczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0cmFuc2Zvcm1lZFdpdGg6IFRoaXMgZG9jdW1lbnQgd2FzLlxyXG4gICAqL1xyXG4gIFRyYW5zZm9ybWVkV2l0aDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0cmFuc2Zvcm1zOiBUaGlzIGRvY3VtZW50IHdhcyBnZW5lcmF0ZWQgYnkgdHJhbnNmb3JtaW5nIHRoZSB0YXJnZXQgZG9jdW1lbnQgKGVnIGZvcm1hdCBvciBsYW5ndWFnZSBjb252ZXJzaW9uKS5cclxuICAgKi9cclxuICBUcmFuc2Zvcm1zOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgcmVsYXRpb25zaGlwIGJldHdlZW4gcmVwb3J0cy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSZXBvcnRSZWxhdGlvblR5cGVDb2RpbmdzOlJlcG9ydFJlbGF0aW9uVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYW1lbmRlZFdpdGg6IFRoaXMgZG9jdW1lbnQgd2FzLlxyXG4gICAqL1xyXG4gIEFtZW5kZWRXaXRoOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFtZW5kZWQgV2l0aFwiLFxyXG4gICAgY29kZTogXCJhbWVuZGVkV2l0aFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3J0LXJlbGF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGFtZW5kczogVGhpcyBkb2N1bWVudCBub3RlcyBjb3JyZWN0aW9ucyBvciBjaGFuZ2VzIHRvIHJlcGxhY2Ugb3Igc3VwZXJzZWRlIHBhcnRzIG9mIHRoZSB0YXJnZXQgZG9jdW1lbnQuXHJcbiAgICovXHJcbiAgQW1lbmRzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFtZW5kc1wiLFxyXG4gICAgY29kZTogXCJhbWVuZHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcG9ydC1yZWxhdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhcHBlbmRlZFdpdGg6IFRoaXMgZG9jdW1lbnQgd2FzLlxyXG4gICAqL1xyXG4gIEFwcGVuZGVkV2l0aDoge1xyXG4gICAgZGlzcGxheTogXCJBcHBlbmRlZCBXaXRoXCIsXHJcbiAgICBjb2RlOiBcImFwcGVuZGVkV2l0aFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3J0LXJlbGF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGFwcGVuZHM6IFRoaXMgZG9jdW1lbnQgYWRkcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHRvIHRoZSB0YXJnZXQgZG9jdW1lbnQuXHJcbiAgICovXHJcbiAgQXBwZW5kczoge1xyXG4gICAgZGlzcGxheTogXCJBcHBlbmRzXCIsXHJcbiAgICBjb2RlOiBcImFwcGVuZHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcG9ydC1yZWxhdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXBsYWNlZFdpdGg6IFRoaXMgZG9jdW1lbnQgd2FzLlxyXG4gICAqL1xyXG4gIFJlcGxhY2VkV2l0aDoge1xyXG4gICAgZGlzcGxheTogXCJSZXBsYWNlZCBXaXRoXCIsXHJcbiAgICBjb2RlOiBcInJlcGxhY2VkV2l0aFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3J0LXJlbGF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlcGxhY2VzOiBUaGlzIGRvY3VtZW50IHJlcGxhY2VzIG9yIHN1cGVyc2VkZXMgdGhlIHRhcmdldCBkb2N1bWVudC5cclxuICAgKi9cclxuICBSZXBsYWNlczoge1xyXG4gICAgZGlzcGxheTogXCJSZXBsYWNlc1wiLFxyXG4gICAgY29kZTogXCJyZXBsYWNlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3J0LXJlbGF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRyYW5zZm9ybWVkV2l0aDogVGhpcyBkb2N1bWVudCB3YXMuXHJcbiAgICovXHJcbiAgVHJhbnNmb3JtZWRXaXRoOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRyYW5zZm9ybWVkIFdpdGhcIixcclxuICAgIGNvZGU6IFwidHJhbnNmb3JtZWRXaXRoXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXBvcnQtcmVsYXRpb24tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdHJhbnNmb3JtczogVGhpcyBkb2N1bWVudCB3YXMgZ2VuZXJhdGVkIGJ5IHRyYW5zZm9ybWluZyB0aGUgdGFyZ2V0IGRvY3VtZW50IChlZyBmb3JtYXQgb3IgbGFuZ3VhZ2UgY29udmVyc2lvbikuXHJcbiAgICovXHJcbiAgVHJhbnNmb3Jtczoge1xyXG4gICAgZGlzcGxheTogXCJUcmFuc2Zvcm1zXCIsXHJcbiAgICBjb2RlOiBcInRyYW5zZm9ybXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcG9ydC1yZWxhdGlvbi10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19