// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/media-modality|4.3.0
/**
 * Detailed information about the type of the image - its kind, purpose, or the kind of equipment used to generate it.
 */
export const MediaModalityCodings = {
    /**
     * AR: Autorefraction device
     */
    Autorefraction: {
        display: "Autorefraction",
        code: "AR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * BDUS: Ultrasound Bone Densitometry (modality)
     */
    UltrasoundBoneDensitometry: {
        display: "Ultrasound Bone Densitometry",
        code: "BDUS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * BI: Biomagnetic imaging device
     */
    BiomagneticImaging: {
        display: "Biomagnetic imaging",
        code: "BI",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * BMD: Bone Mineral Densitometry by X-Ray (modality), including dual-energy X-Ray absorptiometry (DXA) and morphometric X-Ray absorptiometry (MXA)
     */
    BoneMineralDensitometry: {
        display: "Bone Mineral Densitometry",
        code: "BMD",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * CR: Computed Radiography device
     */
    ComputedRadiography: {
        display: "Computed Radiography",
        code: "CR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * CT: Computed Tomography device
     */
    ComputedTomography: {
        display: "Computed Tomography",
        code: "CT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * DG: Diaphanography device
     */
    Diaphanography: {
        display: "Diaphanography",
        code: "DG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * diagram: A diagram. Often used in diagnostic reports
     */
    Diagram: {
        display: "Diagram",
        code: "diagram",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * Code: DMS
     */
    Dermoscopy: {
        display: "Dermoscopy",
        code: "DMS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * DX: Digital Radiography device
     */
    DigitalRadiography: {
        display: "Digital Radiography",
        code: "DX",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * ECG: Electrocardiography device
     */
    Electrocardiography: {
        display: "Electrocardiography",
        code: "ECG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: EEG
     */
    Electroencephalography: {
        display: "Electroencephalography",
        code: "EEG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: EMG
     */
    Electromyography: {
        display: "Electromyography",
        code: "EMG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: EOG
     */
    Electrooculography: {
        display: "Electrooculography",
        code: "EOG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * EPS: Cardiac Electrophysiology device
     */
    CardiacElectrophysiology: {
        display: "Cardiac Electrophysiology",
        code: "EPS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * ES: Endoscopy device
     */
    Endoscopy: {
        display: "Endoscopy",
        code: "ES",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * face: A face scan used for identification purposes
     */
    FaceScan: {
        display: "Face Scan",
        code: "face",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * fax: A digital record of a fax document
     */
    Fax: {
        display: "Fax",
        code: "fax",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * fingerprint: A finger print scan used for identification purposes
     */
    Fingerprint: {
        display: "Fingerprint",
        code: "fingerprint",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * GM: General Microscopy device
     */
    GeneralMicroscopy: {
        display: "General Microscopy",
        code: "GM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * HD: Hemodynamic Waveform acquisition device
     */
    HemodynamicWaveform: {
        display: "Hemodynamic Waveform",
        code: "HD",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * IO: Intra-oral Radiography device
     */
    IntraOralRadiography: {
        display: "Intra-oral Radiography",
        code: "IO",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * iris: An iris scan used for identification purposes
     */
    IrisScan: {
        display: "Iris Scan",
        code: "iris",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * IVOCT: An acquisition device, process or method that performs intravascular optical coherence tomography
     */
    IntravascularOpticalCoherenceTomography: {
        display: "Intravascular Optical Coherence Tomography",
        code: "IVOCT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * IVUS: Intravascular Ultrasound device
     */
    IntravascularUltrasound: {
        display: "Intravascular Ultrasound",
        code: "IVUS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * KER: Keratometry device
     */
    Keratometry: {
        display: "Keratometry",
        code: "KER",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * LEN: Lensometry device
     */
    Lensometry: {
        display: "Lensometry",
        code: "LEN",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * LS: Laser surface scan device
     */
    LaserSurfaceScan: {
        display: "Laser surface scan",
        code: "LS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * MG: Mammography device
     */
    Mammography: {
        display: "Mammography",
        code: "MG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * MR: Magnetic Resonance device
     */
    MagneticResonance: {
        display: "Magnetic Resonance",
        code: "MR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * NM: Nuclear Medicine device
     */
    NuclearMedicine: {
        display: "Nuclear Medicine",
        code: "NM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OAM: Measurements of the axial length of the eye, which are done by various devices
     */
    OphthalmicAxialMeasurements: {
        display: "Ophthalmic Axial Measurements",
        code: "OAM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OCT: Modality device that uses an interferometric, non-invasive optical tomographic technique to image 2D slices and 3D volumes of tissue using visible and near visible frequencies
     */
    OpticalCoherenceTomography: {
        display: "Optical Coherence Tomography",
        code: "OCT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OP: Ophthalmic photography modality
     */
    OphthalmicPhotography: {
        display: "Ophthalmic photography",
        code: "OP",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPM: Modality device that measures corneal topography, corneal or retinal thickness, and other similar parameters that are typically displayed as maps
     */
    OphthalmicMapping: {
        display: "Ophthalmic Mapping",
        code: "OPM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPT: Tomography of the eye acquired by a modality that is based on light and optical principles. Tomography based on other principles, such as ultrasound, is excluded
     */
    OphthalmicTomography: {
        display: "Ophthalmic Tomography",
        code: "OPT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: OPTBSV
     */
    OphthalmicTomographyBScanVolumeAnalysis: {
        display: "Ophthalmic Tomography B-scan Volume Analysis",
        code: "OPTBSV",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: OPTENF
     */
    OphthalmicTomographyEnFace: {
        display: "Ophthalmic Tomography En Face",
        code: "OPTENF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPV: Modality device that measures visual fields and perform visual perimetry
     */
    OphthalmicVisualField: {
        display: "Ophthalmic Visual Field",
        code: "OPV",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OSS: An acquisition device, process or method that performs optical surface scanning
     */
    OpticalSurvaceScanner: {
        display: "Optical Survace Scanner",
        code: "OSS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * palm: A palm scan used for identification purposes
     */
    PalmScan: {
        display: "Palm Scan",
        code: "palm",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * Code: POS
     */
    PositionSensor: {
        display: "Position Sensor",
        code: "POS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * PT: Positron emission tomography (PET) device
     */
    PositronEmissionTomography: {
        display: "Positron emission tomography",
        code: "PT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * PX: Panoramic X-Ray device
     */
    PanoramicXRay: {
        display: "Panoramic X-Ray",
        code: "PX",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * Code: RESP
     */
    RespiratoryWaveform: {
        display: "Respiratory Waveform",
        code: "RESP",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * retina: A retinal image used for identification purposes
     */
    RetinaScan: {
        display: "Retina Scan",
        code: "retina",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * RF: Radiofluoroscopy device
     */
    Radiofluoroscopy: {
        display: "Radiofluoroscopy",
        code: "RF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * RG: Radiographic imaging (conventional film/screen)
     */
    RadiographicImaging: {
        display: "Radiographic imaging",
        code: "RG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * RTIMAGE: Radiotherapy Imaging device; includes portal imaging
     */
    RadiotherapyImage: {
        display: "Radiotherapy Image",
        code: "RTIMAGE",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * scan: A digital scan of a document. This is reserved for when there is not enough metadata to create a document reference
     */
    ScannedDocument: {
        display: "Scanned Document",
        code: "scan",
        system: "http://terminology.hl7.org/CodeSystem/media-modality",
    },
    /**
     * SM: Slide Microscopy
     */
    SlideMicroscopy: {
        display: "Slide Microscopy",
        code: "SM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * SRF: Subjective Refraction device
     */
    SubjectiveRefraction: {
        display: "Subjective Refraction",
        code: "SRF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * TG: Thermography device
     */
    Thermography: {
        display: "Thermography",
        code: "TG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * US: Ultrasound device
     */
    Ultrasound: {
        display: "Ultrasound",
        code: "US",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * VA: Visual Acuity device
     */
    VisualAcuity: {
        display: "Visual Acuity",
        code: "VA",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * XA: X-Ray Angiography device
     */
    XRayAngiography: {
        display: "X-Ray Angiography",
        code: "XA",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * XC: External-camera Photography device
     */
    ExternalCameraPhotography: {
        display: "External-camera Photography",
        code: "XC",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
};
//# sourceMappingURL=data:application/json;base64,