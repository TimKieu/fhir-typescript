// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/trigger-type|4.3.0
/**
 * The type of trigger.
 */
export const TriggerTypeCodes = {
    /**
     * data-access-ended: The trigger occurs whenever access to data of a particular type is completed.
     */
    DataAccessEnded: "data-access-ended",
    /**
     * data-accessed: The trigger occurs whenever data of a particular type is accessed.
     */
    DataAccessed: "data-accessed",
    /**
     * data-added: The trigger occurs whenever data of a particular type is added.
     */
    DataAdded: "data-added",
    /**
     * data-changed: The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed.
     */
    DataChanged: "data-changed",
    /**
     * data-modified: The trigger occurs whenever data of a particular type is modified.
     */
    DataUpdated: "data-modified",
    /**
     * data-removed: The trigger occurs whenever data of a particular type is removed.
     */
    DataRemoved: "data-removed",
    /**
     * named-event: The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided.
     */
    NamedEvent: "named-event",
    /**
     * periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event.
     */
    Periodic: "periodic",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJpZ2dlclR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVHJpZ2dlclR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxpRUFBaUU7QUFFakU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRztJQUM5Qjs7T0FFRztJQUNILGVBQWUsRUFBRSxtQkFBbUI7SUFDcEM7O09BRUc7SUFDSCxZQUFZLEVBQUUsZUFBZTtJQUM3Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxZQUFZO0lBQ3ZCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGNBQWM7SUFDM0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsZUFBZTtJQUM1Qjs7T0FFRztJQUNILFdBQVcsRUFBRSxjQUFjO0lBQzNCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtDQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3RyaWdnZXItdHlwZXw0LjMuMFxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIHRyaWdnZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVHJpZ2dlclR5cGVDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzcy1lbmRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGFjY2VzcyB0byBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBEYXRhQWNjZXNzRW5kZWQ6IFwiZGF0YS1hY2Nlc3MtZW5kZWRcIixcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzc2VkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBhY2Nlc3NlZC5cclxuICAgKi9cclxuICBEYXRhQWNjZXNzZWQ6IFwiZGF0YS1hY2Nlc3NlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWRkZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGFkZGVkLlxyXG4gICAqL1xyXG4gIERhdGFBZGRlZDogXCJkYXRhLWFkZGVkXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0YS1jaGFuZ2VkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBjaGFuZ2VkIGluIGFueSB3YXksIGVpdGhlciBhZGRlZCwgbW9kaWZpZWQsIG9yIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgRGF0YUNoYW5nZWQ6IFwiZGF0YS1jaGFuZ2VkXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0YS1tb2RpZmllZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgbW9kaWZpZWQuXHJcbiAgICovXHJcbiAgRGF0YVVwZGF0ZWQ6IFwiZGF0YS1tb2RpZmllZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtcmVtb3ZlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgcmVtb3ZlZC5cclxuICAgKi9cclxuICBEYXRhUmVtb3ZlZDogXCJkYXRhLXJlbW92ZWRcIixcclxuICAvKipcclxuICAgKiBuYW1lZC1ldmVudDogVGhlIHRyaWdnZXIgb2NjdXJzIGluIHJlc3BvbnNlIHRvIGEgc3BlY2lmaWMgbmFtZWQgZXZlbnQsIGFuZCBubyBvdGhlciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdHJpZ2dlciBpcyBzcGVjaWZpZWQuIE5hbWVkIGV2ZW50cyBhcmUgY29tcGxldGVseSBwcmUtY29vcmRpbmF0ZWQsIGFuZCB0aGUgZm9ybWFsIHNlbWFudGljcyBvZiB0aGUgdHJpZ2dlciBhcmUgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIE5hbWVkRXZlbnQ6IFwibmFtZWQtZXZlbnRcIixcclxuICAvKipcclxuICAgKiBwZXJpb2RpYzogVGhlIHRyaWdnZXIgb2NjdXJzIGF0IGEgc3BlY2lmaWMgdGltZSBvciBwZXJpb2RpY2FsbHkgYXMgZGVzY3JpYmVkIGJ5IGEgdGltaW5nIG9yIHNjaGVkdWxlLiBBIHBlcmlvZGljIGV2ZW50IGNhbm5vdCBoYXZlIGFueSBkYXRhIGVsZW1lbnRzLCBidXQgbWF5IGhhdmUgYSBuYW1lIGFzc2lnbmVkIGFzIGEgc2hvcnRoYW5kIGZvciB0aGUgZXZlbnQuXHJcbiAgICovXHJcbiAgUGVyaW9kaWM6IFwicGVyaW9kaWNcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0cmlnZ2VyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHJpZ2dlclR5cGVDb2RlVHlwZSA9IHR5cGVvZiBUcmlnZ2VyVHlwZUNvZGVzW2tleW9mIHR5cGVvZiBUcmlnZ2VyVHlwZUNvZGVzXTtcclxuIl19