// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/device-status-reason|4.3.0
/**
 * The availability status reason of the device.
 */
export const DeviceStatusReasonCodings = {
    /**
     * hw-discon: The device hardware is disconnected.
     */
    HardwareDisconnected: {
        display: "Hardware Disconnected",
        code: "hw-discon",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * not-ready: The device is not ready.
     */
    NotReady: {
        display: "Not Ready",
        code: "not-ready",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * off: The device is off.
     */
    Off: {
        display: "Off",
        code: "off",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * offline: The device is offline.
     */
    Offline: {
        display: "Offline",
        code: "offline",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * online: The device is off.
     */
    Online: {
        display: "Online",
        code: "online",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * paused: The device is paused.
     */
    Paused: {
        display: "Paused",
        code: "paused",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * standby: The device is ready but not actively operating.
     */
    Standby: {
        display: "Standby",
        code: "standby",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
    /**
     * transduc-discon: The device transducer is disconnected.
     */
    TransducerDisconnected: {
        display: "Transducer Disconnected",
        code: "transduc-discon",
        system: "http://terminology.hl7.org/CodeSystem/device-status-reason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlU3RhdHVzUmVhc29uQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRGV2aWNlU3RhdHVzUmVhc29uQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx5RUFBeUU7QUEwQ3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2RldmljZS1zdGF0dXMtcmVhc29ufDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIGF2YWlsYWJpbGl0eSBzdGF0dXMgcmVhc29uIG9mIHRoZSBkZXZpY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEZXZpY2VTdGF0dXNSZWFzb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGh3LWRpc2NvbjogVGhlIGRldmljZSBoYXJkd2FyZSBpcyBkaXNjb25uZWN0ZWQuXHJcbiAgICovXHJcbiAgSGFyZHdhcmVEaXNjb25uZWN0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90LXJlYWR5OiBUaGUgZGV2aWNlIGlzIG5vdCByZWFkeS5cclxuICAgKi9cclxuICBOb3RSZWFkeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvZmY6IFRoZSBkZXZpY2UgaXMgb2ZmLlxyXG4gICAqL1xyXG4gIE9mZjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvZmZsaW5lOiBUaGUgZGV2aWNlIGlzIG9mZmxpbmUuXHJcbiAgICovXHJcbiAgT2ZmbGluZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbmxpbmU6IFRoZSBkZXZpY2UgaXMgb2ZmLlxyXG4gICAqL1xyXG4gIE9ubGluZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXVzZWQ6IFRoZSBkZXZpY2UgaXMgcGF1c2VkLlxyXG4gICAqL1xyXG4gIFBhdXNlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzdGFuZGJ5OiBUaGUgZGV2aWNlIGlzIHJlYWR5IGJ1dCBub3QgYWN0aXZlbHkgb3BlcmF0aW5nLlxyXG4gICAqL1xyXG4gIFN0YW5kYnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdHJhbnNkdWMtZGlzY29uOiBUaGUgZGV2aWNlIHRyYW5zZHVjZXIgaXMgZGlzY29ubmVjdGVkLlxyXG4gICAqL1xyXG4gIFRyYW5zZHVjZXJEaXNjb25uZWN0ZWQ6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgYXZhaWxhYmlsaXR5IHN0YXR1cyByZWFzb24gb2YgdGhlIGRldmljZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBEZXZpY2VTdGF0dXNSZWFzb25Db2RpbmdzOkRldmljZVN0YXR1c1JlYXNvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogaHctZGlzY29uOiBUaGUgZGV2aWNlIGhhcmR3YXJlIGlzIGRpc2Nvbm5lY3RlZC5cclxuICAgKi9cclxuICBIYXJkd2FyZURpc2Nvbm5lY3RlZDoge1xyXG4gICAgZGlzcGxheTogXCJIYXJkd2FyZSBEaXNjb25uZWN0ZWRcIixcclxuICAgIGNvZGU6IFwiaHctZGlzY29uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZXZpY2Utc3RhdHVzLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90LXJlYWR5OiBUaGUgZGV2aWNlIGlzIG5vdCByZWFkeS5cclxuICAgKi9cclxuICBOb3RSZWFkeToge1xyXG4gICAgZGlzcGxheTogXCJOb3QgUmVhZHlcIixcclxuICAgIGNvZGU6IFwibm90LXJlYWR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZXZpY2Utc3RhdHVzLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb2ZmOiBUaGUgZGV2aWNlIGlzIG9mZi5cclxuICAgKi9cclxuICBPZmY6IHtcclxuICAgIGRpc3BsYXk6IFwiT2ZmXCIsXHJcbiAgICBjb2RlOiBcIm9mZlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGV2aWNlLXN0YXR1cy1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9mZmxpbmU6IFRoZSBkZXZpY2UgaXMgb2ZmbGluZS5cclxuICAgKi9cclxuICBPZmZsaW5lOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9mZmxpbmVcIixcclxuICAgIGNvZGU6IFwib2ZmbGluZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGV2aWNlLXN0YXR1cy1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9ubGluZTogVGhlIGRldmljZSBpcyBvZmYuXHJcbiAgICovXHJcbiAgT25saW5lOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9ubGluZVwiLFxyXG4gICAgY29kZTogXCJvbmxpbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RldmljZS1zdGF0dXMtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwYXVzZWQ6IFRoZSBkZXZpY2UgaXMgcGF1c2VkLlxyXG4gICAqL1xyXG4gIFBhdXNlZDoge1xyXG4gICAgZGlzcGxheTogXCJQYXVzZWRcIixcclxuICAgIGNvZGU6IFwicGF1c2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZXZpY2Utc3RhdHVzLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3RhbmRieTogVGhlIGRldmljZSBpcyByZWFkeSBidXQgbm90IGFjdGl2ZWx5IG9wZXJhdGluZy5cclxuICAgKi9cclxuICBTdGFuZGJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlN0YW5kYnlcIixcclxuICAgIGNvZGU6IFwic3RhbmRieVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGV2aWNlLXN0YXR1cy1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRyYW5zZHVjLWRpc2NvbjogVGhlIGRldmljZSB0cmFuc2R1Y2VyIGlzIGRpc2Nvbm5lY3RlZC5cclxuICAgKi9cclxuICBUcmFuc2R1Y2VyRGlzY29ubmVjdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRyYW5zZHVjZXIgRGlzY29ubmVjdGVkXCIsXHJcbiAgICBjb2RlOiBcInRyYW5zZHVjLWRpc2NvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGV2aWNlLXN0YXR1cy1yZWFzb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=