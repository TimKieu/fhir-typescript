// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/subscriber-relationship|4.3.0
/**
 * This value set includes codes for the relationship between the Subscriber and the Beneficiary (insured/covered party/patient).
 */
export const SubscriberRelationshipCodings = {
    /**
     * child: The Beneficiary is a child of the Subscriber
     */
    Child: {
        display: "Child",
        code: "child",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * common: The Beneficiary is a common law spouse or equivalent of the Subscriber
     */
    CommonLawSpouse: {
        display: "Common Law Spouse",
        code: "common",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * injured: The Beneficiary is covered under insurance of the subscriber due to an injury.
     */
    InjuredParty: {
        display: "Injured Party",
        code: "injured",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * other: The Beneficiary has some other relationship the Subscriber
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * parent: The Beneficiary is a parent of the Subscriber
     */
    Parent: {
        display: "Parent",
        code: "parent",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * self: The Beneficiary is the Subscriber
     */
    Self: {
        display: "Self",
        code: "self",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * spouse: The Beneficiary is a spouse or equivalent of the Subscriber
     */
    Spouse: {
        display: "Spouse",
        code: "spouse",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic2NyaWJlclJlbGF0aW9uc2hpcENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1N1YnNjcmliZXJSZWxhdGlvbnNoaXBDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQXNDNUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwrREFBK0Q7S0FDeEU7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsK0RBQStEO0tBQ3hFO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrREFBK0Q7S0FDeEU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLCtEQUErRDtLQUN4RTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsK0RBQStEO0tBQ3hFO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLCtEQUErRDtLQUN4RTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsK0RBQStEO0tBQ3hFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc3Vic2NyaWJlci1yZWxhdGlvbnNoaXB8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBjb2RlcyBmb3IgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBTdWJzY3JpYmVyIGFuZCB0aGUgQmVuZWZpY2lhcnkgKGluc3VyZWQvY292ZXJlZCBwYXJ0eS9wYXRpZW50KS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFN1YnNjcmliZXJSZWxhdGlvbnNoaXBDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNoaWxkOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBjaGlsZCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIENoaWxkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbW1vbjogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgY29tbW9uIGxhdyBzcG91c2Ugb3IgZXF1aXZhbGVudCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIENvbW1vbkxhd1Nwb3VzZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbmp1cmVkOiBUaGUgQmVuZWZpY2lhcnkgaXMgY292ZXJlZCB1bmRlciBpbnN1cmFuY2Ugb2YgdGhlIHN1YnNjcmliZXIgZHVlIHRvIGFuIGluanVyeS5cclxuICAgKi9cclxuICBJbmp1cmVkUGFydHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFRoZSBCZW5lZmljaWFyeSBoYXMgc29tZSBvdGhlciByZWxhdGlvbnNoaXAgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBPdGhlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXJlbnQ6IFRoZSBCZW5lZmljaWFyeSBpcyBhIHBhcmVudCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIFBhcmVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzZWxmOiBUaGUgQmVuZWZpY2lhcnkgaXMgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBTZWxmOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNwb3VzZTogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgc3BvdXNlIG9yIGVxdWl2YWxlbnQgb2YgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBTcG91c2U6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBjb2RlcyBmb3IgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBTdWJzY3JpYmVyIGFuZCB0aGUgQmVuZWZpY2lhcnkgKGluc3VyZWQvY292ZXJlZCBwYXJ0eS9wYXRpZW50KS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTdWJzY3JpYmVyUmVsYXRpb25zaGlwQ29kaW5nczpTdWJzY3JpYmVyUmVsYXRpb25zaGlwQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjaGlsZDogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgY2hpbGQgb2YgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBDaGlsZDoge1xyXG4gICAgZGlzcGxheTogXCJDaGlsZFwiLFxyXG4gICAgY29kZTogXCJjaGlsZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3Vic2NyaWJlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbW1vbjogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgY29tbW9uIGxhdyBzcG91c2Ugb3IgZXF1aXZhbGVudCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIENvbW1vbkxhd1Nwb3VzZToge1xyXG4gICAgZGlzcGxheTogXCJDb21tb24gTGF3IFNwb3VzZVwiLFxyXG4gICAgY29kZTogXCJjb21tb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N1YnNjcmliZXItcmVsYXRpb25zaGlwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbmp1cmVkOiBUaGUgQmVuZWZpY2lhcnkgaXMgY292ZXJlZCB1bmRlciBpbnN1cmFuY2Ugb2YgdGhlIHN1YnNjcmliZXIgZHVlIHRvIGFuIGluanVyeS5cclxuICAgKi9cclxuICBJbmp1cmVkUGFydHk6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5qdXJlZCBQYXJ0eVwiLFxyXG4gICAgY29kZTogXCJpbmp1cmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdWJzY3JpYmVyLXJlbGF0aW9uc2hpcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFRoZSBCZW5lZmljaWFyeSBoYXMgc29tZSBvdGhlciByZWxhdGlvbnNoaXAgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBPdGhlcjoge1xyXG4gICAgZGlzcGxheTogXCJPdGhlclwiLFxyXG4gICAgY29kZTogXCJvdGhlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3Vic2NyaWJlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBhcmVudDogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgcGFyZW50IG9mIHRoZSBTdWJzY3JpYmVyXHJcbiAgICovXHJcbiAgUGFyZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIlBhcmVudFwiLFxyXG4gICAgY29kZTogXCJwYXJlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N1YnNjcmliZXItcmVsYXRpb25zaGlwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzZWxmOiBUaGUgQmVuZWZpY2lhcnkgaXMgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBTZWxmOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNlbGZcIixcclxuICAgIGNvZGU6IFwic2VsZlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3Vic2NyaWJlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNwb3VzZTogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgc3BvdXNlIG9yIGVxdWl2YWxlbnQgb2YgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBTcG91c2U6IHtcclxuICAgIGRpc3BsYXk6IFwiU3BvdXNlXCIsXHJcbiAgICBjb2RlOiBcInNwb3VzZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3Vic2NyaWJlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=