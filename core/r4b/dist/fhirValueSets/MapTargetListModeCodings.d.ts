import { CodingArgs } from '../fhir/Coding.js';
/**
 * If field is a list, how to manage the production.
 */
export declare type MapTargetListModeCodingType = {
    /**
     * collate: re-use the first item in the list, and keep adding content to it.
     */
    Collate: CodingArgs;
    /**
     * first: when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error.
     */
    First: CodingArgs;
    /**
     * last: when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error.
     */
    Last: CodingArgs;
    /**
     * share: the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones).
     */
    Share: CodingArgs;
};
/**
 * If field is a list, how to manage the production.
 */
export declare const MapTargetListModeCodings: MapTargetListModeCodingType;
//# sourceMappingURL=MapTargetListModeCodings.d.ts.map