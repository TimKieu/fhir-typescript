// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/event-status|4.3.0
/**
 * Codes identifying the lifecycle stage of an event.
 */
export const EventStatusCodes = {
    /**
     * completed: The event has now concluded.
     */
    Completed: "completed",
    /**
     * entered-in-error: This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "stopped" rather than "entered-in-error".).
     */
    EnteredInError: "entered-in-error",
    /**
     * in-progress: The event is currently occurring.
     */
    InProgress: "in-progress",
    /**
     * not-done: The event was terminated prior to any activity beyond preparation.  I.e. The 'main' activity has not yet begun.  The boundary between preparatory and the 'main' activity is context-specific.
     */
    NotDone: "not-done",
    /**
     * on-hold: The event has been temporarily stopped but is expected to resume in the future.
     */
    OnHold: "on-hold",
    /**
     * preparation: The core event has not started yet, but some staging activities have begun (e.g. surgical suite preparation).  Preparation stages may be tracked for billing purposes.
     */
    Preparation: "preparation",
    /**
     * stopped: The event was terminated prior to the full completion of the intended activity but after at least some of the 'main' activity (beyond preparation) has occurred.
     */
    Stopped: "stopped",
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this event.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdGF0dXNDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRXZlbnRTdGF0dXNDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxpRUFBaUU7QUFFakU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRztJQUM5Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLGtCQUFrQjtJQUNsQzs7T0FFRztJQUNILFVBQVUsRUFBRSxhQUFhO0lBQ3pCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFVBQVU7SUFDbkI7O09BRUc7SUFDSCxNQUFNLEVBQUUsU0FBUztJQUNqQjs7T0FFRztJQUNILFdBQVcsRUFBRSxhQUFhO0lBQzFCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztDQUNWLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2V2ZW50LXN0YXR1c3w0LjMuMFxyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIHRoZSBsaWZlY3ljbGUgc3RhZ2Ugb2YgYW4gZXZlbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRXZlbnRTdGF0dXNDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSBldmVudCBoYXMgbm93IGNvbmNsdWRlZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IFwiY29tcGxldGVkXCIsXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcInN0b3BwZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIGV2ZW50IGlzIGN1cnJlbnRseSBvY2N1cnJpbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogXCJpbi1wcm9ncmVzc1wiLFxyXG4gIC8qKlxyXG4gICAqIG5vdC1kb25lOiBUaGUgZXZlbnQgd2FzIHRlcm1pbmF0ZWQgcHJpb3IgdG8gYW55IGFjdGl2aXR5IGJleW9uZCBwcmVwYXJhdGlvbi4gIEkuZS4gVGhlICdtYWluJyBhY3Rpdml0eSBoYXMgbm90IHlldCBiZWd1bi4gIFRoZSBib3VuZGFyeSBiZXR3ZWVuIHByZXBhcmF0b3J5IGFuZCB0aGUgJ21haW4nIGFjdGl2aXR5IGlzIGNvbnRleHQtc3BlY2lmaWMuXHJcbiAgICovXHJcbiAgTm90RG9uZTogXCJub3QtZG9uZVwiLFxyXG4gIC8qKlxyXG4gICAqIG9uLWhvbGQ6IFRoZSBldmVudCBoYXMgYmVlbiB0ZW1wb3JhcmlseSBzdG9wcGVkIGJ1dCBpcyBleHBlY3RlZCB0byByZXN1bWUgaW4gdGhlIGZ1dHVyZS5cclxuICAgKi9cclxuICBPbkhvbGQ6IFwib24taG9sZFwiLFxyXG4gIC8qKlxyXG4gICAqIHByZXBhcmF0aW9uOiBUaGUgY29yZSBldmVudCBoYXMgbm90IHN0YXJ0ZWQgeWV0LCBidXQgc29tZSBzdGFnaW5nIGFjdGl2aXRpZXMgaGF2ZSBiZWd1biAoZS5nLiBzdXJnaWNhbCBzdWl0ZSBwcmVwYXJhdGlvbikuICBQcmVwYXJhdGlvbiBzdGFnZXMgbWF5IGJlIHRyYWNrZWQgZm9yIGJpbGxpbmcgcHVycG9zZXMuXHJcbiAgICovXHJcbiAgUHJlcGFyYXRpb246IFwicHJlcGFyYXRpb25cIixcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBUaGUgZXZlbnQgd2FzIHRlcm1pbmF0ZWQgcHJpb3IgdG8gdGhlIGZ1bGwgY29tcGxldGlvbiBvZiB0aGUgaW50ZW5kZWQgYWN0aXZpdHkgYnV0IGFmdGVyIGF0IGxlYXN0IHNvbWUgb2YgdGhlICdtYWluJyBhY3Rpdml0eSAoYmV5b25kIHByZXBhcmF0aW9uKSBoYXMgb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgU3RvcHBlZDogXCJzdG9wcGVkXCIsXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgZXZlbnQuICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCAgYnV0IHRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoLlxyXG4gICAqL1xyXG4gIFVua25vd246IFwidW5rbm93blwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIHRoZSBsaWZlY3ljbGUgc3RhZ2Ugb2YgYW4gZXZlbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFdmVudFN0YXR1c0NvZGVUeXBlID0gdHlwZW9mIEV2ZW50U3RhdHVzQ29kZXNba2V5b2YgdHlwZW9mIEV2ZW50U3RhdHVzQ29kZXNdO1xyXG4iXX0=