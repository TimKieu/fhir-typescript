// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/cited-artifact-status-type|4.3.0
/**
 * Cited Artifact Status Type
 */
export const CitedArtifactStatusTypeCodings = {
    /**
     * accepted: The content that was not published yet has been approved for publication by the publisher and/or editor.
     */
    Accepted: {
        display: "Accepted",
        code: "accepted",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * active: The content is considered complete for its current state by the content creator.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * approved: The content has been approved for a state transition, with the focus of approval described in the text associated with this coding.
     */
    Approved: {
        display: "Approved",
        code: "approved",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * archived: The content is retired or considered no longer current but still available as part of the public record.
     */
    Archived: {
        display: "Archived",
        code: "archived",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * created: The content was originally constructed or composed.
     */
    Created: {
        display: "Created",
        code: "created",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * draft: The content is considered unfinished or incomplete and not representative of the current state desired by the content creator.
     */
    Draft: {
        display: "Draft",
        code: "draft",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * post-review-pre-published: The content is in a state between the review(s) being completed and being published.
     */
    PostReviewPrePublished: {
        display: "Post review pre published",
        code: "post-review-pre-published",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * pre-review: The content is awaiting assignment and delivery to reviewer(s).
     */
    PreReview: {
        display: "Pre review",
        code: "pre-review",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * published-early-form: The content is published but future changes to the published version are expected.
     */
    PublishedEarlyForm: {
        display: "Published early form",
        code: "published-early-form",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * published-final-form: The content is published and further changes to the content are not expected.
     */
    PublishedFinalForm: {
        display: "Published final form",
        code: "published-final-form",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * rejected: The content that was not published has been removed from consideration for publishing by a publisher or editor.
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * retracted: The content that was published is removed from publication and should no longer be considered part of the public record.
     */
    Retracted: {
        display: "Retracted",
        code: "retracted",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * submitted: The content was sent to the publisher for consideration of publication.
     */
    Submitted: {
        display: "Submitted",
        code: "submitted",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * under-review: The content is in a state of being reviewed.
     */
    UnderReview: {
        display: "Under review",
        code: "under-review",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
    /**
     * withdrawn: The content that was not published has been removed from consideration for publishing by the submitter.
     */
    Withdrawn: {
        display: "Withdrawn",
        code: "withdrawn",
        system: "http://terminology.hl7.org/CodeSystem/cited-artifact-status-type",
    },
};
//# sourceMappingURL=data:application/json;base64,