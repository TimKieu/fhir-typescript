// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/trigger-type|4.3.0
/**
 * The type of trigger.
 */
export const TriggerTypeCodings = {
    /**
     * data-access-ended: The trigger occurs whenever access to data of a particular type is completed.
     */
    DataAccessEnded: {
        display: "Data Access Ended",
        code: "data-access-ended",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-accessed: The trigger occurs whenever data of a particular type is accessed.
     */
    DataAccessed: {
        display: "Data Accessed",
        code: "data-accessed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-added: The trigger occurs whenever data of a particular type is added.
     */
    DataAdded: {
        display: "Data Added",
        code: "data-added",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-changed: The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed.
     */
    DataChanged: {
        display: "Data Changed",
        code: "data-changed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-modified: The trigger occurs whenever data of a particular type is modified.
     */
    DataUpdated: {
        display: "Data Updated",
        code: "data-modified",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-removed: The trigger occurs whenever data of a particular type is removed.
     */
    DataRemoved: {
        display: "Data Removed",
        code: "data-removed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * named-event: The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided.
     */
    NamedEvent: {
        display: "Named Event",
        code: "named-event",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event.
     */
    Periodic: {
        display: "Periodic",
        code: "periodic",
        system: "http://hl7.org/fhir/trigger-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJpZ2dlclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UcmlnZ2VyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBMENqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdHJpZ2dlci10eXBlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdHJpZ2dlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRyaWdnZXJUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzcy1lbmRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGFjY2VzcyB0byBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBEYXRhQWNjZXNzRW5kZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1hY2Nlc3NlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWNjZXNzZWQuXHJcbiAgICovXHJcbiAgRGF0YUFjY2Vzc2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWRkZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGFkZGVkLlxyXG4gICAqL1xyXG4gIERhdGFBZGRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkYXRhLWNoYW5nZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNoYW5nZWQgaW4gYW55IHdheSwgZWl0aGVyIGFkZGVkLCBtb2RpZmllZCwgb3IgcmVtb3ZlZC5cclxuICAgKi9cclxuICBEYXRhQ2hhbmdlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkYXRhLW1vZGlmaWVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBtb2RpZmllZC5cclxuICAgKi9cclxuICBEYXRhVXBkYXRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkYXRhLXJlbW92ZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgRGF0YVJlbW92ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbmFtZWQtZXZlbnQ6IFRoZSB0cmlnZ2VyIG9jY3VycyBpbiByZXNwb25zZSB0byBhIHNwZWNpZmljIG5hbWVkIGV2ZW50LCBhbmQgbm8gb3RoZXIgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRyaWdnZXIgaXMgc3BlY2lmaWVkLiBOYW1lZCBldmVudHMgYXJlIGNvbXBsZXRlbHkgcHJlLWNvb3JkaW5hdGVkLCBhbmQgdGhlIGZvcm1hbCBzZW1hbnRpY3Mgb2YgdGhlIHRyaWdnZXIgYXJlIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBOYW1lZEV2ZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBlcmlvZGljOiBUaGUgdHJpZ2dlciBvY2N1cnMgYXQgYSBzcGVjaWZpYyB0aW1lIG9yIHBlcmlvZGljYWxseSBhcyBkZXNjcmliZWQgYnkgYSB0aW1pbmcgb3Igc2NoZWR1bGUuIEEgcGVyaW9kaWMgZXZlbnQgY2Fubm90IGhhdmUgYW55IGRhdGEgZWxlbWVudHMsIGJ1dCBtYXkgaGF2ZSBhIG5hbWUgYXNzaWduZWQgYXMgYSBzaG9ydGhhbmQgZm9yIHRoZSBldmVudC5cclxuICAgKi9cclxuICBQZXJpb2RpYzogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIHRyaWdnZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVHJpZ2dlclR5cGVDb2RpbmdzOlRyaWdnZXJUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzcy1lbmRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGFjY2VzcyB0byBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBEYXRhQWNjZXNzRW5kZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBBY2Nlc3MgRW5kZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1hY2Nlc3MtZW5kZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF0YS1hY2Nlc3NlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWNjZXNzZWQuXHJcbiAgICovXHJcbiAgRGF0YUFjY2Vzc2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgQWNjZXNzZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1hY2Nlc3NlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhLWFkZGVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBhZGRlZC5cclxuICAgKi9cclxuICBEYXRhQWRkZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBBZGRlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWFkZGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtY2hhbmdlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgY2hhbmdlZCBpbiBhbnkgd2F5LCBlaXRoZXIgYWRkZWQsIG1vZGlmaWVkLCBvciByZW1vdmVkLlxyXG4gICAqL1xyXG4gIERhdGFDaGFuZ2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgQ2hhbmdlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWNoYW5nZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF0YS1tb2RpZmllZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgbW9kaWZpZWQuXHJcbiAgICovXHJcbiAgRGF0YVVwZGF0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBVcGRhdGVkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtbW9kaWZpZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF0YS1yZW1vdmVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyByZW1vdmVkLlxyXG4gICAqL1xyXG4gIERhdGFSZW1vdmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgUmVtb3ZlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLXJlbW92ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbmFtZWQtZXZlbnQ6IFRoZSB0cmlnZ2VyIG9jY3VycyBpbiByZXNwb25zZSB0byBhIHNwZWNpZmljIG5hbWVkIGV2ZW50LCBhbmQgbm8gb3RoZXIgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRyaWdnZXIgaXMgc3BlY2lmaWVkLiBOYW1lZCBldmVudHMgYXJlIGNvbXBsZXRlbHkgcHJlLWNvb3JkaW5hdGVkLCBhbmQgdGhlIGZvcm1hbCBzZW1hbnRpY3Mgb2YgdGhlIHRyaWdnZXIgYXJlIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBOYW1lZEV2ZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIk5hbWVkIEV2ZW50XCIsXHJcbiAgICBjb2RlOiBcIm5hbWVkLWV2ZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBlcmlvZGljOiBUaGUgdHJpZ2dlciBvY2N1cnMgYXQgYSBzcGVjaWZpYyB0aW1lIG9yIHBlcmlvZGljYWxseSBhcyBkZXNjcmliZWQgYnkgYSB0aW1pbmcgb3Igc2NoZWR1bGUuIEEgcGVyaW9kaWMgZXZlbnQgY2Fubm90IGhhdmUgYW55IGRhdGEgZWxlbWVudHMsIGJ1dCBtYXkgaGF2ZSBhIG5hbWUgYXNzaWduZWQgYXMgYSBzaG9ydGhhbmQgZm9yIHRoZSBldmVudC5cclxuICAgKi9cclxuICBQZXJpb2RpYzoge1xyXG4gICAgZGlzcGxheTogXCJQZXJpb2RpY1wiLFxyXG4gICAgY29kZTogXCJwZXJpb2RpY1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19