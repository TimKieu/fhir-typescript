// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-participant-type|4.3.0
/**
 * This value set defines a set of codes that can be used to indicate how an individual participates in an encounter.
 */
export const EncounterParticipantTypeCodings = {
    /**
     * Code: ADM
     */
    Admitter: {
        display: "admitter",
        code: "ADM",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: ATND
     */
    Attender: {
        display: "attender",
        code: "ATND",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: CALLBCK
     */
    CallbackContact: {
        display: "callback contact",
        code: "CALLBCK",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: CON
     */
    Consultant: {
        display: "consultant",
        code: "CON",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: DIS
     */
    Discharger: {
        display: "discharger",
        code: "DIS",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * emergency: A person to be contacted in case of an emergency during the encounter.
     */
    Emergency: {
        display: "Emergency",
        code: "emergency",
        system: "http://terminology.hl7.org/CodeSystem/participant-type",
    },
    /**
     * Code: ESC
     */
    Escort: {
        display: "escort",
        code: "ESC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: PART
     */
    PART: {
        code: "PART",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: PPRF
     */
    PPRF: {
        code: "PPRF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: REF
     */
    Referrer: {
        display: "referrer",
        code: "REF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * Code: SPRF
     */
    SPRF: {
        code: "SPRF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    },
    /**
     * translator: A translator who is facilitating communication with the patient during the encounter.
     */
    Translator: {
        display: "Translator",
        code: "translator",
        system: "http://terminology.hl7.org/CodeSystem/participant-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQywrRUFBK0U7QUEwRC9FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXNDO0lBQ2hGOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbmNvdW50ZXItcGFydGljaXBhbnQtdHlwZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBob3cgYW4gaW5kaXZpZHVhbCBwYXJ0aWNpcGF0ZXMgaW4gYW4gZW5jb3VudGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiBBRE1cclxuICAgKi9cclxuICBBZG1pdHRlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBBVE5EXHJcbiAgICovXHJcbiAgQXR0ZW5kZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0FMTEJDS1xyXG4gICAqL1xyXG4gIENhbGxiYWNrQ29udGFjdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBDT05cclxuICAgKi9cclxuICBDb25zdWx0YW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IERJU1xyXG4gICAqL1xyXG4gIERpc2NoYXJnZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW1lcmdlbmN5OiBBIHBlcnNvbiB0byBiZSBjb250YWN0ZWQgaW4gY2FzZSBvZiBhbiBlbWVyZ2VuY3kgZHVyaW5nIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgRW1lcmdlbmN5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVTQ1xyXG4gICAqL1xyXG4gIEVzY29ydDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBQQVJUXHJcbiAgICovXHJcbiAgUEFSVDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBQUFJGXHJcbiAgICovXHJcbiAgUFBSRjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBSRUZcclxuICAgKi9cclxuICBSZWZlcnJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBTUFJGXHJcbiAgICovXHJcbiAgU1BSRjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0cmFuc2xhdG9yOiBBIHRyYW5zbGF0b3Igd2hvIGlzIGZhY2lsaXRhdGluZyBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHBhdGllbnQgZHVyaW5nIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgVHJhbnNsYXRvcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBob3cgYW4gaW5kaXZpZHVhbCBwYXJ0aWNpcGF0ZXMgaW4gYW4gZW5jb3VudGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVuY291bnRlclBhcnRpY2lwYW50VHlwZUNvZGluZ3M6RW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiBBRE1cclxuICAgKi9cclxuICBBZG1pdHRlcjoge1xyXG4gICAgZGlzcGxheTogXCJhZG1pdHRlclwiLFxyXG4gICAgY29kZTogXCJBRE1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBBVE5EXHJcbiAgICovXHJcbiAgQXR0ZW5kZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiYXR0ZW5kZXJcIixcclxuICAgIGNvZGU6IFwiQVRORFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUGFydGljaXBhdGlvblR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENBTExCQ0tcclxuICAgKi9cclxuICBDYWxsYmFja0NvbnRhY3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiY2FsbGJhY2sgY29udGFjdFwiLFxyXG4gICAgY29kZTogXCJDQUxMQkNLXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1QYXJ0aWNpcGF0aW9uVHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09OXHJcbiAgICovXHJcbiAgQ29uc3VsdGFudDoge1xyXG4gICAgZGlzcGxheTogXCJjb25zdWx0YW50XCIsXHJcbiAgICBjb2RlOiBcIkNPTlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUGFydGljaXBhdGlvblR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERJU1xyXG4gICAqL1xyXG4gIERpc2NoYXJnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiZGlzY2hhcmdlclwiLFxyXG4gICAgY29kZTogXCJESVNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbWVyZ2VuY3k6IEEgcGVyc29uIHRvIGJlIGNvbnRhY3RlZCBpbiBjYXNlIG9mIGFuIGVtZXJnZW5jeSBkdXJpbmcgdGhlIGVuY291bnRlci5cclxuICAgKi9cclxuICBFbWVyZ2VuY3k6IHtcclxuICAgIGRpc3BsYXk6IFwiRW1lcmdlbmN5XCIsXHJcbiAgICBjb2RlOiBcImVtZXJnZW5jeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcGFydGljaXBhbnQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRVNDXHJcbiAgICovXHJcbiAgRXNjb3J0OiB7XHJcbiAgICBkaXNwbGF5OiBcImVzY29ydFwiLFxyXG4gICAgY29kZTogXCJFU0NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQQVJUXHJcbiAgICovXHJcbiAgUEFSVDoge1xyXG4gICAgY29kZTogXCJQQVJUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1QYXJ0aWNpcGF0aW9uVHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUFBSRlxyXG4gICAqL1xyXG4gIFBQUkY6IHtcclxuICAgIGNvZGU6IFwiUFBSRlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUGFydGljaXBhdGlvblR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFJFRlxyXG4gICAqL1xyXG4gIFJlZmVycmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcInJlZmVycmVyXCIsXHJcbiAgICBjb2RlOiBcIlJFRlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUGFydGljaXBhdGlvblR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNQUkZcclxuICAgKi9cclxuICBTUFJGOiB7XHJcbiAgICBjb2RlOiBcIlNQUkZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0cmFuc2xhdG9yOiBBIHRyYW5zbGF0b3Igd2hvIGlzIGZhY2lsaXRhdGluZyBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHBhdGllbnQgZHVyaW5nIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgVHJhbnNsYXRvcjoge1xyXG4gICAgZGlzcGxheTogXCJUcmFuc2xhdG9yXCIsXHJcbiAgICBjb2RlOiBcInRyYW5zbGF0b3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3BhcnRpY2lwYW50LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=