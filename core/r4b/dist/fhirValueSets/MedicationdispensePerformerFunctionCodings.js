// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationdispense-performer-function|4.3.0
/**
 * MedicationDispense Performer Function Codes
 */
export const MedicationdispensePerformerFunctionCodings = {
    /**
     * checker: Performed initial quality assurance on the prepared medication
     */
    Checker: {
        display: "Checker",
        code: "checker",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
    /**
     * dataenterer: Recorded the details of the request
     */
    DataEnterer: {
        display: "Data Enterer",
        code: "dataenterer",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
    /**
     * finalchecker: Performed the final quality assurance on the prepared medication against the request. Typically, this is a pharmacist function.
     */
    FinalChecker: {
        display: "Final Checker",
        code: "finalchecker",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
    /**
     * packager: Prepared the medication.
     */
    Packager: {
        display: "Packager",
        code: "packager",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbmRpc3BlbnNlUGVyZm9ybWVyRnVuY3Rpb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsMEZBQTBGO0FBMEIxRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBDQUEwQyxHQUFpRDtJQUN0Rzs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lZGljYXRpb25kaXNwZW5zZS1wZXJmb3JtZXItZnVuY3Rpb258NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uRGlzcGVuc2UgUGVyZm9ybWVyIEZ1bmN0aW9uIENvZGVzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY2hlY2tlcjogUGVyZm9ybWVkIGluaXRpYWwgcXVhbGl0eSBhc3N1cmFuY2Ugb24gdGhlIHByZXBhcmVkIG1lZGljYXRpb25cclxuICAgKi9cclxuICBDaGVja2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGFlbnRlcmVyOiBSZWNvcmRlZCB0aGUgZGV0YWlscyBvZiB0aGUgcmVxdWVzdFxyXG4gICAqL1xyXG4gIERhdGFFbnRlcmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZpbmFsY2hlY2tlcjogUGVyZm9ybWVkIHRoZSBmaW5hbCBxdWFsaXR5IGFzc3VyYW5jZSBvbiB0aGUgcHJlcGFyZWQgbWVkaWNhdGlvbiBhZ2FpbnN0IHRoZSByZXF1ZXN0LiBUeXBpY2FsbHksIHRoaXMgaXMgYSBwaGFybWFjaXN0IGZ1bmN0aW9uLlxyXG4gICAqL1xyXG4gIEZpbmFsQ2hlY2tlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYWNrYWdlcjogUHJlcGFyZWQgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgUGFja2FnZXI6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uRGlzcGVuc2UgUGVyZm9ybWVyIEZ1bmN0aW9uIENvZGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVkaWNhdGlvbmRpc3BlbnNlUGVyZm9ybWVyRnVuY3Rpb25Db2RpbmdzOk1lZGljYXRpb25kaXNwZW5zZVBlcmZvcm1lckZ1bmN0aW9uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjaGVja2VyOiBQZXJmb3JtZWQgaW5pdGlhbCBxdWFsaXR5IGFzc3VyYW5jZSBvbiB0aGUgcHJlcGFyZWQgbWVkaWNhdGlvblxyXG4gICAqL1xyXG4gIENoZWNrZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2hlY2tlclwiLFxyXG4gICAgY29kZTogXCJjaGVja2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9uZGlzcGVuc2UtcGVyZm9ybWVyLWZ1bmN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhZW50ZXJlcjogUmVjb3JkZWQgdGhlIGRldGFpbHMgb2YgdGhlIHJlcXVlc3RcclxuICAgKi9cclxuICBEYXRhRW50ZXJlcjoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIEVudGVyZXJcIixcclxuICAgIGNvZGU6IFwiZGF0YWVudGVyZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25kaXNwZW5zZS1wZXJmb3JtZXItZnVuY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZpbmFsY2hlY2tlcjogUGVyZm9ybWVkIHRoZSBmaW5hbCBxdWFsaXR5IGFzc3VyYW5jZSBvbiB0aGUgcHJlcGFyZWQgbWVkaWNhdGlvbiBhZ2FpbnN0IHRoZSByZXF1ZXN0LiBUeXBpY2FsbHksIHRoaXMgaXMgYSBwaGFybWFjaXN0IGZ1bmN0aW9uLlxyXG4gICAqL1xyXG4gIEZpbmFsQ2hlY2tlcjoge1xyXG4gICAgZGlzcGxheTogXCJGaW5hbCBDaGVja2VyXCIsXHJcbiAgICBjb2RlOiBcImZpbmFsY2hlY2tlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXBlcmZvcm1lci1mdW5jdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGFja2FnZXI6IFByZXBhcmVkIHRoZSBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIFBhY2thZ2VyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBhY2thZ2VyXCIsXHJcbiAgICBjb2RlOiBcInBhY2thZ2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9uZGlzcGVuc2UtcGVyZm9ybWVyLWZ1bmN0aW9uXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19