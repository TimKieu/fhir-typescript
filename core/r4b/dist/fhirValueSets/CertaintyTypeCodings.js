// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/certainty-type|4.3.0
/**
 * The aspect of quality, confidence, or certainty.
 */
export const CertaintyTypeCodings = {
    /**
     * DoseResponseGradient: higher certainty due to dose response relationship.
     */
    DoseResponseGradient: {
        display: "Dose response gradient",
        code: "DoseResponseGradient",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * Imprecision: fuzzy or wide variability.
     */
    Imprecision: {
        display: "Imprecision",
        code: "Imprecision",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * Inconsistency: concerns that findings are not similar enough to support certainty.
     */
    Inconsistency: {
        display: "Inconsistency",
        code: "Inconsistency",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * Indirectness: concerns reducing external validity.
     */
    Indirectness: {
        display: "Indirectness",
        code: "Indirectness",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * LargeEffect: higher certainty due to large effect size.
     */
    LargeEffect: {
        display: "Large effect",
        code: "LargeEffect",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * Overall: Overall certainty of evidence (quality of evidence).
     */
    OverallCertainty: {
        display: "Overall certainty",
        code: "Overall",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * PlausibleConfounding: higher certainty due to risk of bias in opposite direction.
     */
    PlausibleConfounding: {
        display: "Plausible confounding",
        code: "PlausibleConfounding",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * PublicationBias: likelihood that what is published misrepresents what is available to publish.
     */
    PublicationBias: {
        display: "Publication bias",
        code: "PublicationBias",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
    /**
     * RiskOfBias: methodologic concerns reducing internal validity.
     */
    RiskOfBias: {
        display: "Risk of bias",
        code: "RiskOfBias",
        system: "http://terminology.hl7.org/CodeSystem/certainty-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2VydGFpbnR5VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NlcnRhaW50eVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQThDbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxvQkFBb0IsRUFBRTtRQUNwQixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixNQUFNLEVBQUUsc0RBQXNEO0tBQy9EO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NlcnRhaW50eS10eXBlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIGFzcGVjdCBvZiBxdWFsaXR5LCBjb25maWRlbmNlLCBvciBjZXJ0YWludHkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDZXJ0YWludHlUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBEb3NlUmVzcG9uc2VHcmFkaWVudDogaGlnaGVyIGNlcnRhaW50eSBkdWUgdG8gZG9zZSByZXNwb25zZSByZWxhdGlvbnNoaXAuXHJcbiAgICovXHJcbiAgRG9zZVJlc3BvbnNlR3JhZGllbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW1wcmVjaXNpb246IGZ1enp5IG9yIHdpZGUgdmFyaWFiaWxpdHkuXHJcbiAgICovXHJcbiAgSW1wcmVjaXNpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW5jb25zaXN0ZW5jeTogY29uY2VybnMgdGhhdCBmaW5kaW5ncyBhcmUgbm90IHNpbWlsYXIgZW5vdWdoIHRvIHN1cHBvcnQgY2VydGFpbnR5LlxyXG4gICAqL1xyXG4gIEluY29uc2lzdGVuY3k6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW5kaXJlY3RuZXNzOiBjb25jZXJucyByZWR1Y2luZyBleHRlcm5hbCB2YWxpZGl0eS5cclxuICAgKi9cclxuICBJbmRpcmVjdG5lc3M6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogTGFyZ2VFZmZlY3Q6IGhpZ2hlciBjZXJ0YWludHkgZHVlIHRvIGxhcmdlIGVmZmVjdCBzaXplLlxyXG4gICAqL1xyXG4gIExhcmdlRWZmZWN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE92ZXJhbGw6IE92ZXJhbGwgY2VydGFpbnR5IG9mIGV2aWRlbmNlIChxdWFsaXR5IG9mIGV2aWRlbmNlKS5cclxuICAgKi9cclxuICBPdmVyYWxsQ2VydGFpbnR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFBsYXVzaWJsZUNvbmZvdW5kaW5nOiBoaWdoZXIgY2VydGFpbnR5IGR1ZSB0byByaXNrIG9mIGJpYXMgaW4gb3Bwb3NpdGUgZGlyZWN0aW9uLlxyXG4gICAqL1xyXG4gIFBsYXVzaWJsZUNvbmZvdW5kaW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFB1YmxpY2F0aW9uQmlhczogbGlrZWxpaG9vZCB0aGF0IHdoYXQgaXMgcHVibGlzaGVkIG1pc3JlcHJlc2VudHMgd2hhdCBpcyBhdmFpbGFibGUgdG8gcHVibGlzaC5cclxuICAgKi9cclxuICBQdWJsaWNhdGlvbkJpYXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUmlza09mQmlhczogbWV0aG9kb2xvZ2ljIGNvbmNlcm5zIHJlZHVjaW5nIGludGVybmFsIHZhbGlkaXR5LlxyXG4gICAqL1xyXG4gIFJpc2tPZkJpYXM6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgYXNwZWN0IG9mIHF1YWxpdHksIGNvbmZpZGVuY2UsIG9yIGNlcnRhaW50eS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDZXJ0YWludHlUeXBlQ29kaW5nczpDZXJ0YWludHlUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBEb3NlUmVzcG9uc2VHcmFkaWVudDogaGlnaGVyIGNlcnRhaW50eSBkdWUgdG8gZG9zZSByZXNwb25zZSByZWxhdGlvbnNoaXAuXHJcbiAgICovXHJcbiAgRG9zZVJlc3BvbnNlR3JhZGllbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRG9zZSByZXNwb25zZSBncmFkaWVudFwiLFxyXG4gICAgY29kZTogXCJEb3NlUmVzcG9uc2VHcmFkaWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEltcHJlY2lzaW9uOiBmdXp6eSBvciB3aWRlIHZhcmlhYmlsaXR5LlxyXG4gICAqL1xyXG4gIEltcHJlY2lzaW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkltcHJlY2lzaW9uXCIsXHJcbiAgICBjb2RlOiBcIkltcHJlY2lzaW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogSW5jb25zaXN0ZW5jeTogY29uY2VybnMgdGhhdCBmaW5kaW5ncyBhcmUgbm90IHNpbWlsYXIgZW5vdWdoIHRvIHN1cHBvcnQgY2VydGFpbnR5LlxyXG4gICAqL1xyXG4gIEluY29uc2lzdGVuY3k6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5jb25zaXN0ZW5jeVwiLFxyXG4gICAgY29kZTogXCJJbmNvbnNpc3RlbmN5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogSW5kaXJlY3RuZXNzOiBjb25jZXJucyByZWR1Y2luZyBleHRlcm5hbCB2YWxpZGl0eS5cclxuICAgKi9cclxuICBJbmRpcmVjdG5lc3M6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5kaXJlY3RuZXNzXCIsXHJcbiAgICBjb2RlOiBcIkluZGlyZWN0bmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIExhcmdlRWZmZWN0OiBoaWdoZXIgY2VydGFpbnR5IGR1ZSB0byBsYXJnZSBlZmZlY3Qgc2l6ZS5cclxuICAgKi9cclxuICBMYXJnZUVmZmVjdDoge1xyXG4gICAgZGlzcGxheTogXCJMYXJnZSBlZmZlY3RcIixcclxuICAgIGNvZGU6IFwiTGFyZ2VFZmZlY3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBPdmVyYWxsOiBPdmVyYWxsIGNlcnRhaW50eSBvZiBldmlkZW5jZSAocXVhbGl0eSBvZiBldmlkZW5jZSkuXHJcbiAgICovXHJcbiAgT3ZlcmFsbENlcnRhaW50eToge1xyXG4gICAgZGlzcGxheTogXCJPdmVyYWxsIGNlcnRhaW50eVwiLFxyXG4gICAgY29kZTogXCJPdmVyYWxsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUGxhdXNpYmxlQ29uZm91bmRpbmc6IGhpZ2hlciBjZXJ0YWludHkgZHVlIHRvIHJpc2sgb2YgYmlhcyBpbiBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICovXHJcbiAgUGxhdXNpYmxlQ29uZm91bmRpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhdXNpYmxlIGNvbmZvdW5kaW5nXCIsXHJcbiAgICBjb2RlOiBcIlBsYXVzaWJsZUNvbmZvdW5kaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUHVibGljYXRpb25CaWFzOiBsaWtlbGlob29kIHRoYXQgd2hhdCBpcyBwdWJsaXNoZWQgbWlzcmVwcmVzZW50cyB3aGF0IGlzIGF2YWlsYWJsZSB0byBwdWJsaXNoLlxyXG4gICAqL1xyXG4gIFB1YmxpY2F0aW9uQmlhczoge1xyXG4gICAgZGlzcGxheTogXCJQdWJsaWNhdGlvbiBiaWFzXCIsXHJcbiAgICBjb2RlOiBcIlB1YmxpY2F0aW9uQmlhc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJpc2tPZkJpYXM6IG1ldGhvZG9sb2dpYyBjb25jZXJucyByZWR1Y2luZyBpbnRlcm5hbCB2YWxpZGl0eS5cclxuICAgKi9cclxuICBSaXNrT2ZCaWFzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJpc2sgb2YgYmlhc1wiLFxyXG4gICAgY29kZTogXCJSaXNrT2ZCaWFzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==