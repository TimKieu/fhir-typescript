// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/care-plan-activity-status|4.3.0
/**
 * Codes that reflect the current state of a care plan activity within its overall life cycle.
 */
export const CarePlanActivityStatusCodes = {
    /**
     * cancelled: The planned care plan activity has been withdrawn.
     */
    Cancelled: "cancelled",
    /**
     * completed: Care plan activity has been completed (more or less) as planned.
     */
    Completed: "completed",
    /**
     * entered-in-error: Care plan activity was entered in error and voided.
     */
    EnteredInError: "entered-in-error",
    /**
     * in-progress: Care plan activity has been started but is not yet complete.
     */
    InProgress: "in-progress",
    /**
     * not-started: Care plan activity is planned but no action has yet been taken.
     */
    NotStarted: "not-started",
    /**
     * on-hold: Care plan activity was started but has temporarily ceased with an expectation of resumption at a future time.
     */
    OnHold: "on-hold",
    /**
     * scheduled: Appointment or other booking has occurred but activity has not yet begun.
     */
    Scheduled: "scheduled",
    /**
     * stopped: The planned care plan activity has been ended prior to completion after the activity was started.
     */
    Stopped: "stopped",
    /**
     * unknown: The current state of the care plan activity is not known.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which one.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9DYXJlUGxhbkFjdGl2aXR5U3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBRTlFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUc7SUFDekM7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLGtCQUFrQjtJQUNsQzs7T0FFRztJQUNILFVBQVUsRUFBRSxhQUFhO0lBQ3pCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxNQUFNLEVBQUUsU0FBUztJQUNqQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztDQUNWLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXN8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyB0aGF0IHJlZmxlY3QgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBjYXJlIHBsYW4gYWN0aXZpdHkgd2l0aGluIGl0cyBvdmVyYWxsIGxpZmUgY3ljbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIHBsYW5uZWQgY2FyZSBwbGFuIGFjdGl2aXR5IGhhcyBiZWVuIHdpdGhkcmF3bi5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IFwiY2FuY2VsbGVkXCIsXHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBDYXJlIHBsYW4gYWN0aXZpdHkgaGFzIGJlZW4gY29tcGxldGVkIChtb3JlIG9yIGxlc3MpIGFzIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBcImNvbXBsZXRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IENhcmUgcGxhbiBhY3Rpdml0eSB3YXMgZW50ZXJlZCBpbiBlcnJvciBhbmQgdm9pZGVkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogQ2FyZSBwbGFuIGFjdGl2aXR5IGhhcyBiZWVuIHN0YXJ0ZWQgYnV0IGlzIG5vdCB5ZXQgY29tcGxldGUuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogXCJpbi1wcm9ncmVzc1wiLFxyXG4gIC8qKlxyXG4gICAqIG5vdC1zdGFydGVkOiBDYXJlIHBsYW4gYWN0aXZpdHkgaXMgcGxhbm5lZCBidXQgbm8gYWN0aW9uIGhhcyB5ZXQgYmVlbiB0YWtlbi5cclxuICAgKi9cclxuICBOb3RTdGFydGVkOiBcIm5vdC1zdGFydGVkXCIsXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogQ2FyZSBwbGFuIGFjdGl2aXR5IHdhcyBzdGFydGVkIGJ1dCBoYXMgdGVtcG9yYXJpbHkgY2Vhc2VkIHdpdGggYW4gZXhwZWN0YXRpb24gb2YgcmVzdW1wdGlvbiBhdCBhIGZ1dHVyZSB0aW1lLlxyXG4gICAqL1xyXG4gIE9uSG9sZDogXCJvbi1ob2xkXCIsXHJcbiAgLyoqXHJcbiAgICogc2NoZWR1bGVkOiBBcHBvaW50bWVudCBvciBvdGhlciBib29raW5nIGhhcyBvY2N1cnJlZCBidXQgYWN0aXZpdHkgaGFzIG5vdCB5ZXQgYmVndW4uXHJcbiAgICovXHJcbiAgU2NoZWR1bGVkOiBcInNjaGVkdWxlZFwiLFxyXG4gIC8qKlxyXG4gICAqIHN0b3BwZWQ6IFRoZSBwbGFubmVkIGNhcmUgcGxhbiBhY3Rpdml0eSBoYXMgYmVlbiBlbmRlZCBwcmlvciB0byBjb21wbGV0aW9uIGFmdGVyIHRoZSBhY3Rpdml0eSB3YXMgc3RhcnRlZC5cclxuICAgKi9cclxuICBTdG9wcGVkOiBcInN0b3BwZWRcIixcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY2FyZSBwbGFuIGFjdGl2aXR5IGlzIG5vdCBrbm93bi4gIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksIGJ1dCB0aGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaCBvbmUuXHJcbiAgICovXHJcbiAgVW5rbm93bjogXCJ1bmtub3duXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZXMgdGhhdCByZWZsZWN0IHRoZSBjdXJyZW50IHN0YXRlIG9mIGEgY2FyZSBwbGFuIGFjdGl2aXR5IHdpdGhpbiBpdHMgb3ZlcmFsbCBsaWZlIGN5Y2xlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGVUeXBlID0gdHlwZW9mIENhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2Rlc1trZXlvZiB0eXBlb2YgQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGVzXTtcclxuIl19