// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/med-admin-perform-function|4.3.0
/**
 * MedicationAdministration Performer Function Codes
 */
export const MedAdminPerformFunctionCodings = {
    /**
     * performer: A person, non-person living subject, organization or device that who actually and principally carries out the action
     */
    Performer: {
        display: "Performer",
        code: "performer",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    },
    /**
     * verifier: A person who verifies the correctness and appropriateness of the service (plan, order, event, etc.) and hence takes on accountability.
     */
    Verifier: {
        display: "Verifier",
        code: "verifier",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    },
    /**
     * witness: A person witnessing the action happening without doing anything. A witness is not necessarily aware, much less approves of anything stated in the service event. Example for a witness is students watching an operation or an advanced directive witness.
     */
    Witness: {
        display: "Witness",
        code: "witness",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkQWRtaW5QZXJmb3JtRnVuY3Rpb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRBZG1pblBlcmZvcm1GdW5jdGlvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBc0IvRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrRUFBa0U7S0FDM0U7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrRUFBa0U7S0FDM0U7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtFQUFrRTtLQUMzRTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lZC1hZG1pbi1wZXJmb3JtLWZ1bmN0aW9ufDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uIFBlcmZvcm1lciBGdW5jdGlvbiBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVkQWRtaW5QZXJmb3JtRnVuY3Rpb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIHBlcmZvcm1lcjogQSBwZXJzb24sIG5vbi1wZXJzb24gbGl2aW5nIHN1YmplY3QsIG9yZ2FuaXphdGlvbiBvciBkZXZpY2UgdGhhdCB3aG8gYWN0dWFsbHkgYW5kIHByaW5jaXBhbGx5IGNhcnJpZXMgb3V0IHRoZSBhY3Rpb25cclxuICAgKi9cclxuICBQZXJmb3JtZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdmVyaWZpZXI6IEEgcGVyc29uIHdobyB2ZXJpZmllcyB0aGUgY29ycmVjdG5lc3MgYW5kIGFwcHJvcHJpYXRlbmVzcyBvZiB0aGUgc2VydmljZSAocGxhbiwgb3JkZXIsIGV2ZW50LCBldGMuKSBhbmQgaGVuY2UgdGFrZXMgb24gYWNjb3VudGFiaWxpdHkuXHJcbiAgICovXHJcbiAgVmVyaWZpZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd2l0bmVzczogQSBwZXJzb24gd2l0bmVzc2luZyB0aGUgYWN0aW9uIGhhcHBlbmluZyB3aXRob3V0IGRvaW5nIGFueXRoaW5nLiBBIHdpdG5lc3MgaXMgbm90IG5lY2Vzc2FyaWx5IGF3YXJlLCBtdWNoIGxlc3MgYXBwcm92ZXMgb2YgYW55dGhpbmcgc3RhdGVkIGluIHRoZSBzZXJ2aWNlIGV2ZW50LiBFeGFtcGxlIGZvciBhIHdpdG5lc3MgaXMgc3R1ZGVudHMgd2F0Y2hpbmcgYW4gb3BlcmF0aW9uIG9yIGFuIGFkdmFuY2VkIGRpcmVjdGl2ZSB3aXRuZXNzLlxyXG4gICAqL1xyXG4gIFdpdG5lc3M6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24gUGVyZm9ybWVyIEZ1bmN0aW9uIENvZGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVkQWRtaW5QZXJmb3JtRnVuY3Rpb25Db2RpbmdzOk1lZEFkbWluUGVyZm9ybUZ1bmN0aW9uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBwZXJmb3JtZXI6IEEgcGVyc29uLCBub24tcGVyc29uIGxpdmluZyBzdWJqZWN0LCBvcmdhbml6YXRpb24gb3IgZGV2aWNlIHRoYXQgd2hvIGFjdHVhbGx5IGFuZCBwcmluY2lwYWxseSBjYXJyaWVzIG91dCB0aGUgYWN0aW9uXHJcbiAgICovXHJcbiAgUGVyZm9ybWVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlcmZvcm1lclwiLFxyXG4gICAgY29kZTogXCJwZXJmb3JtZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZC1hZG1pbi1wZXJmb3JtLWZ1bmN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2ZXJpZmllcjogQSBwZXJzb24gd2hvIHZlcmlmaWVzIHRoZSBjb3JyZWN0bmVzcyBhbmQgYXBwcm9wcmlhdGVuZXNzIG9mIHRoZSBzZXJ2aWNlIChwbGFuLCBvcmRlciwgZXZlbnQsIGV0Yy4pIGFuZCBoZW5jZSB0YWtlcyBvbiBhY2NvdW50YWJpbGl0eS5cclxuICAgKi9cclxuICBWZXJpZmllcjoge1xyXG4gICAgZGlzcGxheTogXCJWZXJpZmllclwiLFxyXG4gICAgY29kZTogXCJ2ZXJpZmllclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkLWFkbWluLXBlcmZvcm0tZnVuY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdpdG5lc3M6IEEgcGVyc29uIHdpdG5lc3NpbmcgdGhlIGFjdGlvbiBoYXBwZW5pbmcgd2l0aG91dCBkb2luZyBhbnl0aGluZy4gQSB3aXRuZXNzIGlzIG5vdCBuZWNlc3NhcmlseSBhd2FyZSwgbXVjaCBsZXNzIGFwcHJvdmVzIG9mIGFueXRoaW5nIHN0YXRlZCBpbiB0aGUgc2VydmljZSBldmVudC4gRXhhbXBsZSBmb3IgYSB3aXRuZXNzIGlzIHN0dWRlbnRzIHdhdGNoaW5nIGFuIG9wZXJhdGlvbiBvciBhbiBhZHZhbmNlZCBkaXJlY3RpdmUgd2l0bmVzcy5cclxuICAgKi9cclxuICBXaXRuZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIldpdG5lc3NcIixcclxuICAgIGNvZGU6IFwid2l0bmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkLWFkbWluLXBlcmZvcm0tZnVuY3Rpb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=