// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contract-content-derivative|4.3.0
/**
 * This is an example set of Content Derivative type codes, which represent the minimal content derived from the basal information source at a specific stage in its lifecycle, which is sufficient to manage that source information, for example, in a repository, registry, processes and workflows, for making access control decisions, and providing query responses.
 */
export const ContractContentDerivativeCodings = {
    /**
     * Code: registration
     */
    ContentRegistration: {
        display: "Content Registration",
        code: "registration",
        system: "http://terminology.hl7.org/CodeSystem/contract-content-derivative",
    },
    /**
     * Code: retrieval
     */
    ContentRetrieval: {
        display: "Content Retrieval",
        code: "retrieval",
        system: "http://terminology.hl7.org/CodeSystem/contract-content-derivative",
    },
    /**
     * Code: shareable
     */
    ShareableContent: {
        display: "Shareable Content",
        code: "shareable",
        system: "http://terminology.hl7.org/CodeSystem/contract-content-derivative",
    },
    /**
     * Code: statement
     */
    ContentStatement: {
        display: "Content Statement",
        code: "statement",
        system: "http://terminology.hl7.org/CodeSystem/contract-content-derivative",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3RDb250ZW50RGVyaXZhdGl2ZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvbnRyYWN0Q29udGVudERlcml2YXRpdmVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLGdGQUFnRjtBQTBCaEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBdUM7SUFDbEY7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxtRUFBbUU7S0FDNUU7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RTtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxtRUFBbUU7S0FDNUU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250cmFjdC1jb250ZW50LWRlcml2YXRpdmV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGFuIGV4YW1wbGUgc2V0IG9mIENvbnRlbnQgRGVyaXZhdGl2ZSB0eXBlIGNvZGVzLCB3aGljaCByZXByZXNlbnQgdGhlIG1pbmltYWwgY29udGVudCBkZXJpdmVkIGZyb20gdGhlIGJhc2FsIGluZm9ybWF0aW9uIHNvdXJjZSBhdCBhIHNwZWNpZmljIHN0YWdlIGluIGl0cyBsaWZlY3ljbGUsIHdoaWNoIGlzIHN1ZmZpY2llbnQgdG8gbWFuYWdlIHRoYXQgc291cmNlIGluZm9ybWF0aW9uLCBmb3IgZXhhbXBsZSwgaW4gYSByZXBvc2l0b3J5LCByZWdpc3RyeSwgcHJvY2Vzc2VzIGFuZCB3b3JrZmxvd3MsIGZvciBtYWtpbmcgYWNjZXNzIGNvbnRyb2wgZGVjaXNpb25zLCBhbmQgcHJvdmlkaW5nIHF1ZXJ5IHJlc3BvbnNlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRyYWN0Q29udGVudERlcml2YXRpdmVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IHJlZ2lzdHJhdGlvblxyXG4gICAqL1xyXG4gIENvbnRlbnRSZWdpc3RyYXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogcmV0cmlldmFsXHJcbiAgICovXHJcbiAgQ29udGVudFJldHJpZXZhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBzaGFyZWFibGVcclxuICAgKi9cclxuICBTaGFyZWFibGVDb250ZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IHN0YXRlbWVudFxyXG4gICAqL1xyXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGFuIGV4YW1wbGUgc2V0IG9mIENvbnRlbnQgRGVyaXZhdGl2ZSB0eXBlIGNvZGVzLCB3aGljaCByZXByZXNlbnQgdGhlIG1pbmltYWwgY29udGVudCBkZXJpdmVkIGZyb20gdGhlIGJhc2FsIGluZm9ybWF0aW9uIHNvdXJjZSBhdCBhIHNwZWNpZmljIHN0YWdlIGluIGl0cyBsaWZlY3ljbGUsIHdoaWNoIGlzIHN1ZmZpY2llbnQgdG8gbWFuYWdlIHRoYXQgc291cmNlIGluZm9ybWF0aW9uLCBmb3IgZXhhbXBsZSwgaW4gYSByZXBvc2l0b3J5LCByZWdpc3RyeSwgcHJvY2Vzc2VzIGFuZCB3b3JrZmxvd3MsIGZvciBtYWtpbmcgYWNjZXNzIGNvbnRyb2wgZGVjaXNpb25zLCBhbmQgcHJvdmlkaW5nIHF1ZXJ5IHJlc3BvbnNlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb250cmFjdENvbnRlbnREZXJpdmF0aXZlQ29kaW5nczpDb250cmFjdENvbnRlbnREZXJpdmF0aXZlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiByZWdpc3RyYXRpb25cclxuICAgKi9cclxuICBDb250ZW50UmVnaXN0cmF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbnRlbnQgUmVnaXN0cmF0aW9uXCIsXHJcbiAgICBjb2RlOiBcInJlZ2lzdHJhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJhY3QtY29udGVudC1kZXJpdmF0aXZlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiByZXRyaWV2YWxcclxuICAgKi9cclxuICBDb250ZW50UmV0cmlldmFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbnRlbnQgUmV0cmlldmFsXCIsXHJcbiAgICBjb2RlOiBcInJldHJpZXZhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJhY3QtY29udGVudC1kZXJpdmF0aXZlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBzaGFyZWFibGVcclxuICAgKi9cclxuICBTaGFyZWFibGVDb250ZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIlNoYXJlYWJsZSBDb250ZW50XCIsXHJcbiAgICBjb2RlOiBcInNoYXJlYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJhY3QtY29udGVudC1kZXJpdmF0aXZlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBzdGF0ZW1lbnRcclxuICAgKi9cclxuICBDb250ZW50U3RhdGVtZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbnRlbnQgU3RhdGVtZW50XCIsXHJcbiAgICBjb2RlOiBcInN0YXRlbWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJhY3QtY29udGVudC1kZXJpdmF0aXZlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19