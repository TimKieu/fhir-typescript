// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-example-codes|4.3.0
/**
 * Example use codes for the List resource - typical kinds of use.
 */
export const ListExampleCodings = {
    /**
     * adverserxns: A list of part adverse reactions.
     */
    AdverseReactions: {
        display: "Adverse Reactions",
        code: "adverserxns",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * alerts: A list of alerts for the patient.
     */
    Alerts: {
        display: "Alerts",
        code: "alerts",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * allergies: A list of Allergies for the patient.
     */
    Allergies: {
        display: "Allergies",
        code: "allergies",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * medications: A list of medication statements for the patient.
     */
    MedicationList: {
        display: "Medication List",
        code: "medications",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * plans: A set of care plans that apply in a particular context of care.
     */
    CarePlans: {
        display: "Care Plans",
        code: "plans",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * problems: A list of problems that the patient is known of have (or have had in the past).
     */
    ProblemList: {
        display: "Problem List",
        code: "problems",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * protocols: A set of protocols to be followed.
     */
    Protocols: {
        display: "Protocols",
        code: "protocols",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * waiting: A list of items waiting for an event (perhaps a surgical patient waiting list).
     */
    WaitingList: {
        display: "Waiting List",
        code: "waiting",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
    /**
     * worklist: A list of items that constitute a set of work to be performed (typically this code would be specialized for more specific uses, such as a ward round list).
     */
    Worklist: {
        display: "Worklist",
        code: "worklist",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEV4YW1wbGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9MaXN0RXhhbXBsZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBOEN2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw4REFBOEQ7S0FDdkU7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbGlzdC1leGFtcGxlLWNvZGVzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRXhhbXBsZSB1c2UgY29kZXMgZm9yIHRoZSBMaXN0IHJlc291cmNlIC0gdHlwaWNhbCBraW5kcyBvZiB1c2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaXN0RXhhbXBsZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWR2ZXJzZXJ4bnM6IEEgbGlzdCBvZiBwYXJ0IGFkdmVyc2UgcmVhY3Rpb25zLlxyXG4gICAqL1xyXG4gIEFkdmVyc2VSZWFjdGlvbnM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYWxlcnRzOiBBIGxpc3Qgb2YgYWxlcnRzIGZvciB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBBbGVydHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYWxsZXJnaWVzOiBBIGxpc3Qgb2YgQWxsZXJnaWVzIGZvciB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBBbGxlcmdpZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWVkaWNhdGlvbnM6IEEgbGlzdCBvZiBtZWRpY2F0aW9uIHN0YXRlbWVudHMgZm9yIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIE1lZGljYXRpb25MaXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBsYW5zOiBBIHNldCBvZiBjYXJlIHBsYW5zIHRoYXQgYXBwbHkgaW4gYSBwYXJ0aWN1bGFyIGNvbnRleHQgb2YgY2FyZS5cclxuICAgKi9cclxuICBDYXJlUGxhbnM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJvYmxlbXM6IEEgbGlzdCBvZiBwcm9ibGVtcyB0aGF0IHRoZSBwYXRpZW50IGlzIGtub3duIG9mIGhhdmUgKG9yIGhhdmUgaGFkIGluIHRoZSBwYXN0KS5cclxuICAgKi9cclxuICBQcm9ibGVtTGlzdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm90b2NvbHM6IEEgc2V0IG9mIHByb3RvY29scyB0byBiZSBmb2xsb3dlZC5cclxuICAgKi9cclxuICBQcm90b2NvbHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd2FpdGluZzogQSBsaXN0IG9mIGl0ZW1zIHdhaXRpbmcgZm9yIGFuIGV2ZW50IChwZXJoYXBzIGEgc3VyZ2ljYWwgcGF0aWVudCB3YWl0aW5nIGxpc3QpLlxyXG4gICAqL1xyXG4gIFdhaXRpbmdMaXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHdvcmtsaXN0OiBBIGxpc3Qgb2YgaXRlbXMgdGhhdCBjb25zdGl0dXRlIGEgc2V0IG9mIHdvcmsgdG8gYmUgcGVyZm9ybWVkICh0eXBpY2FsbHkgdGhpcyBjb2RlIHdvdWxkIGJlIHNwZWNpYWxpemVkIGZvciBtb3JlIHNwZWNpZmljIHVzZXMsIHN1Y2ggYXMgYSB3YXJkIHJvdW5kIGxpc3QpLlxyXG4gICAqL1xyXG4gIFdvcmtsaXN0OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRXhhbXBsZSB1c2UgY29kZXMgZm9yIHRoZSBMaXN0IHJlc291cmNlIC0gdHlwaWNhbCBraW5kcyBvZiB1c2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTGlzdEV4YW1wbGVDb2RpbmdzOkxpc3RFeGFtcGxlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhZHZlcnNlcnhuczogQSBsaXN0IG9mIHBhcnQgYWR2ZXJzZSByZWFjdGlvbnMuXHJcbiAgICovXHJcbiAgQWR2ZXJzZVJlYWN0aW9uczoge1xyXG4gICAgZGlzcGxheTogXCJBZHZlcnNlIFJlYWN0aW9uc1wiLFxyXG4gICAgY29kZTogXCJhZHZlcnNlcnhuc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYWxlcnRzOiBBIGxpc3Qgb2YgYWxlcnRzIGZvciB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBBbGVydHM6IHtcclxuICAgIGRpc3BsYXk6IFwiQWxlcnRzXCIsXHJcbiAgICBjb2RlOiBcImFsZXJ0c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYWxsZXJnaWVzOiBBIGxpc3Qgb2YgQWxsZXJnaWVzIGZvciB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBBbGxlcmdpZXM6IHtcclxuICAgIGRpc3BsYXk6IFwiQWxsZXJnaWVzXCIsXHJcbiAgICBjb2RlOiBcImFsbGVyZ2llc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbWVkaWNhdGlvbnM6IEEgbGlzdCBvZiBtZWRpY2F0aW9uIHN0YXRlbWVudHMgZm9yIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIE1lZGljYXRpb25MaXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIk1lZGljYXRpb24gTGlzdFwiLFxyXG4gICAgY29kZTogXCJtZWRpY2F0aW9uc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGxhbnM6IEEgc2V0IG9mIGNhcmUgcGxhbnMgdGhhdCBhcHBseSBpbiBhIHBhcnRpY3VsYXIgY29udGV4dCBvZiBjYXJlLlxyXG4gICAqL1xyXG4gIENhcmVQbGFuczoge1xyXG4gICAgZGlzcGxheTogXCJDYXJlIFBsYW5zXCIsXHJcbiAgICBjb2RlOiBcInBsYW5zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9ibGVtczogQSBsaXN0IG9mIHByb2JsZW1zIHRoYXQgdGhlIHBhdGllbnQgaXMga25vd24gb2YgaGF2ZSAob3IgaGF2ZSBoYWQgaW4gdGhlIHBhc3QpLlxyXG4gICAqL1xyXG4gIFByb2JsZW1MaXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb2JsZW0gTGlzdFwiLFxyXG4gICAgY29kZTogXCJwcm9ibGVtc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvdG9jb2xzOiBBIHNldCBvZiBwcm90b2NvbHMgdG8gYmUgZm9sbG93ZWQuXHJcbiAgICovXHJcbiAgUHJvdG9jb2xzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3RvY29sc1wiLFxyXG4gICAgY29kZTogXCJwcm90b2NvbHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3QtZXhhbXBsZS11c2UtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdhaXRpbmc6IEEgbGlzdCBvZiBpdGVtcyB3YWl0aW5nIGZvciBhbiBldmVudCAocGVyaGFwcyBhIHN1cmdpY2FsIHBhdGllbnQgd2FpdGluZyBsaXN0KS5cclxuICAgKi9cclxuICBXYWl0aW5nTGlzdDoge1xyXG4gICAgZGlzcGxheTogXCJXYWl0aW5nIExpc3RcIixcclxuICAgIGNvZGU6IFwid2FpdGluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd29ya2xpc3Q6IEEgbGlzdCBvZiBpdGVtcyB0aGF0IGNvbnN0aXR1dGUgYSBzZXQgb2Ygd29yayB0byBiZSBwZXJmb3JtZWQgKHR5cGljYWxseSB0aGlzIGNvZGUgd291bGQgYmUgc3BlY2lhbGl6ZWQgZm9yIG1vcmUgc3BlY2lmaWMgdXNlcywgc3VjaCBhcyBhIHdhcmQgcm91bmQgbGlzdCkuXHJcbiAgICovXHJcbiAgV29ya2xpc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiV29ya2xpc3RcIixcclxuICAgIGNvZGU6IFwid29ya2xpc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3QtZXhhbXBsZS11c2UtY29kZXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=