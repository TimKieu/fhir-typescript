// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-relationship-type|4.3.0
/**
 * Defines the types of relationships between actions.
 */
export const ActionRelationshipTypeCodings = {
    /**
     * after: The action must be performed after the related action.
     */
    After: {
        display: "After",
        code: "after",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * after-end: The action must be performed after the end of the related action.
     */
    AfterEnd: {
        display: "After End",
        code: "after-end",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * after-start: The action must be performed after the start of the related action.
     */
    AfterStart: {
        display: "After Start",
        code: "after-start",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * before: The action must be performed before the related action.
     */
    Before: {
        display: "Before",
        code: "before",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * before-end: The action must be performed before the end of the related action.
     */
    BeforeEnd: {
        display: "Before End",
        code: "before-end",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * before-start: The action must be performed before the start of the related action.
     */
    BeforeStart: {
        display: "Before Start",
        code: "before-start",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * concurrent: The action must be performed concurrent with the related action.
     */
    Concurrent: {
        display: "Concurrent",
        code: "concurrent",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * concurrent-with-end: The action must be performed concurrent with the end of the related action.
     */
    ConcurrentWithEnd: {
        display: "Concurrent With End",
        code: "concurrent-with-end",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
    /**
     * concurrent-with-start: The action must be performed concurrent with the start of the related action.
     */
    ConcurrentWithStart: {
        display: "Concurrent With Start",
        code: "concurrent-with-start",
        system: "http://hl7.org/fhir/action-relationship-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uUmVsYXRpb25zaGlwVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0FjdGlvblJlbGF0aW9uc2hpcFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQThDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUscUJBQXFCO1FBQzNCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILG1CQUFtQixFQUFFO1FBQ25CLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgdHlwZXMgb2YgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGFjdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhZnRlcjogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBhZnRlciB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQWZ0ZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYWZ0ZXItZW5kOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGFmdGVyIHRoZSBlbmQgb2YgdGhlIHJlbGF0ZWQgYWN0aW9uLlxyXG4gICAqL1xyXG4gIEFmdGVyRW5kOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGFmdGVyLXN0YXJ0OiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGFmdGVyIHRoZSBzdGFydCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQWZ0ZXJTdGFydDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBiZWZvcmU6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYmVmb3JlIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBCZWZvcmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYmVmb3JlLWVuZDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlRW5kOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGJlZm9yZS1zdGFydDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBiZWZvcmUgdGhlIHN0YXJ0IG9mIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBCZWZvcmVTdGFydDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50OiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGNvbmN1cnJlbnQgd2l0aCB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQ29uY3VycmVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50LXdpdGgtZW5kOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGNvbmN1cnJlbnQgd2l0aCB0aGUgZW5kIG9mIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBDb25jdXJyZW50V2l0aEVuZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50LXdpdGgtc3RhcnQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgY29uY3VycmVudCB3aXRoIHRoZSBzdGFydCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQ29uY3VycmVudFdpdGhTdGFydDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgdGhlIHR5cGVzIG9mIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBhY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFjdGlvblJlbGF0aW9uc2hpcFR5cGVDb2RpbmdzOkFjdGlvblJlbGF0aW9uc2hpcFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFmdGVyOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGFmdGVyIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBBZnRlcjoge1xyXG4gICAgZGlzcGxheTogXCJBZnRlclwiLFxyXG4gICAgY29kZTogXCJhZnRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhZnRlci1lbmQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQWZ0ZXJFbmQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWZ0ZXIgRW5kXCIsXHJcbiAgICBjb2RlOiBcImFmdGVyLWVuZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhZnRlci1zdGFydDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBhZnRlciB0aGUgc3RhcnQgb2YgdGhlIHJlbGF0ZWQgYWN0aW9uLlxyXG4gICAqL1xyXG4gIEFmdGVyU3RhcnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWZ0ZXIgU3RhcnRcIixcclxuICAgIGNvZGU6IFwiYWZ0ZXItc3RhcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1yZWxhdGlvbnNoaXAtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYmVmb3JlOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGJlZm9yZSB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJlZm9yZVwiLFxyXG4gICAgY29kZTogXCJiZWZvcmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1yZWxhdGlvbnNoaXAtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYmVmb3JlLWVuZDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlRW5kOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJlZm9yZSBFbmRcIixcclxuICAgIGNvZGU6IFwiYmVmb3JlLWVuZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBiZWZvcmUtc3RhcnQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYmVmb3JlIHRoZSBzdGFydCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlU3RhcnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQmVmb3JlIFN0YXJ0XCIsXHJcbiAgICBjb2RlOiBcImJlZm9yZS1zdGFydFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50OiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGNvbmN1cnJlbnQgd2l0aCB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQ29uY3VycmVudDoge1xyXG4gICAgZGlzcGxheTogXCJDb25jdXJyZW50XCIsXHJcbiAgICBjb2RlOiBcImNvbmN1cnJlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1yZWxhdGlvbnNoaXAtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29uY3VycmVudC13aXRoLWVuZDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBjb25jdXJyZW50IHdpdGggdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQ29uY3VycmVudFdpdGhFbmQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29uY3VycmVudCBXaXRoIEVuZFwiLFxyXG4gICAgY29kZTogXCJjb25jdXJyZW50LXdpdGgtZW5kXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tcmVsYXRpb25zaGlwLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbmN1cnJlbnQtd2l0aC1zdGFydDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBjb25jdXJyZW50IHdpdGggdGhlIHN0YXJ0IG9mIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBDb25jdXJyZW50V2l0aFN0YXJ0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbmN1cnJlbnQgV2l0aCBTdGFydFwiLFxyXG4gICAgY29kZTogXCJjb25jdXJyZW50LXdpdGgtc3RhcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1yZWxhdGlvbnNoaXAtdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==