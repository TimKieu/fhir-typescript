// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/container-cap|4.3.0
/**
 * Color of the container cap.
 */
export const ContainerCapCodings = {
    /**
     * black: black cap.
     */
    BlackCap: {
        display: "black cap",
        code: "black",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * brown: brown cap.
     */
    BrownCap: {
        display: "brown cap",
        code: "brown",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * dark-yellow: dark yellow cap.
     */
    DarkYellowCap: {
        display: "dark yellow cap",
        code: "dark-yellow",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * green: green cap.
     */
    GreenCap: {
        display: "green cap",
        code: "green",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * grey: grey cap.
     */
    GreyCap: {
        display: "grey cap",
        code: "grey",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * lavender: lavender cap.
     */
    LavenderCap: {
        display: "lavender cap",
        code: "lavender",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * light-blue: light blue cap.
     */
    LightBlueCap: {
        display: "light blue cap",
        code: "light-blue",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * light-green: light green cap.
     */
    LightGreenCap: {
        display: "light green cap",
        code: "light-green",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * pink: pink cap.
     */
    PinkCap: {
        display: "pink cap",
        code: "pink",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * red: red cap.
     */
    RedCap: {
        display: "red cap",
        code: "red",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * white: white cap.
     */
    WhiteCap: {
        display: "white cap",
        code: "white",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * yellow: yellow cap.
     */
    YellowCap: {
        display: "yellow cap",
        code: "yellow",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFpbmVyQ2FwQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udGFpbmVyQ2FwQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxrRUFBa0U7QUEwRGxFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250YWluZXItY2FwfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29sb3Igb2YgdGhlIGNvbnRhaW5lciBjYXAuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250YWluZXJDYXBDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJsYWNrOiBibGFjayBjYXAuXHJcbiAgICovXHJcbiAgQmxhY2tDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYnJvd246IGJyb3duIGNhcC5cclxuICAgKi9cclxuICBCcm93bkNhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkYXJrLXllbGxvdzogZGFyayB5ZWxsb3cgY2FwLlxyXG4gICAqL1xyXG4gIERhcmtZZWxsb3dDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ3JlZW46IGdyZWVuIGNhcC5cclxuICAgKi9cclxuICBHcmVlbkNhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBncmV5OiBncmV5IGNhcC5cclxuICAgKi9cclxuICBHcmV5Q2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxhdmVuZGVyOiBsYXZlbmRlciBjYXAuXHJcbiAgICovXHJcbiAgTGF2ZW5kZXJDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGlnaHQtYmx1ZTogbGlnaHQgYmx1ZSBjYXAuXHJcbiAgICovXHJcbiAgTGlnaHRCbHVlQ2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxpZ2h0LWdyZWVuOiBsaWdodCBncmVlbiBjYXAuXHJcbiAgICovXHJcbiAgTGlnaHRHcmVlbkNhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwaW5rOiBwaW5rIGNhcC5cclxuICAgKi9cclxuICBQaW5rQ2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlZDogcmVkIGNhcC5cclxuICAgKi9cclxuICBSZWRDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd2hpdGU6IHdoaXRlIGNhcC5cclxuICAgKi9cclxuICBXaGl0ZUNhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB5ZWxsb3c6IHllbGxvdyBjYXAuXHJcbiAgICovXHJcbiAgWWVsbG93Q2FwOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ29sb3Igb2YgdGhlIGNvbnRhaW5lciBjYXAuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyQ2FwQ29kaW5nczpDb250YWluZXJDYXBDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJsYWNrOiBibGFjayBjYXAuXHJcbiAgICovXHJcbiAgQmxhY2tDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwiYmxhY2sgY2FwXCIsXHJcbiAgICBjb2RlOiBcImJsYWNrXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBicm93bjogYnJvd24gY2FwLlxyXG4gICAqL1xyXG4gIEJyb3duQ2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcImJyb3duIGNhcFwiLFxyXG4gICAgY29kZTogXCJicm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGFyay15ZWxsb3c6IGRhcmsgeWVsbG93IGNhcC5cclxuICAgKi9cclxuICBEYXJrWWVsbG93Q2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcImRhcmsgeWVsbG93IGNhcFwiLFxyXG4gICAgY29kZTogXCJkYXJrLXllbGxvd1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ3JlZW46IGdyZWVuIGNhcC5cclxuICAgKi9cclxuICBHcmVlbkNhcDoge1xyXG4gICAgZGlzcGxheTogXCJncmVlbiBjYXBcIixcclxuICAgIGNvZGU6IFwiZ3JlZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGdyZXk6IGdyZXkgY2FwLlxyXG4gICAqL1xyXG4gIEdyZXlDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwiZ3JleSBjYXBcIixcclxuICAgIGNvZGU6IFwiZ3JleVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbGF2ZW5kZXI6IGxhdmVuZGVyIGNhcC5cclxuICAgKi9cclxuICBMYXZlbmRlckNhcDoge1xyXG4gICAgZGlzcGxheTogXCJsYXZlbmRlciBjYXBcIixcclxuICAgIGNvZGU6IFwibGF2ZW5kZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxpZ2h0LWJsdWU6IGxpZ2h0IGJsdWUgY2FwLlxyXG4gICAqL1xyXG4gIExpZ2h0Qmx1ZUNhcDoge1xyXG4gICAgZGlzcGxheTogXCJsaWdodCBibHVlIGNhcFwiLFxyXG4gICAgY29kZTogXCJsaWdodC1ibHVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsaWdodC1ncmVlbjogbGlnaHQgZ3JlZW4gY2FwLlxyXG4gICAqL1xyXG4gIExpZ2h0R3JlZW5DYXA6IHtcclxuICAgIGRpc3BsYXk6IFwibGlnaHQgZ3JlZW4gY2FwXCIsXHJcbiAgICBjb2RlOiBcImxpZ2h0LWdyZWVuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwaW5rOiBwaW5rIGNhcC5cclxuICAgKi9cclxuICBQaW5rQ2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcInBpbmsgY2FwXCIsXHJcbiAgICBjb2RlOiBcInBpbmtcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlZDogcmVkIGNhcC5cclxuICAgKi9cclxuICBSZWRDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwicmVkIGNhcFwiLFxyXG4gICAgY29kZTogXCJyZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdoaXRlOiB3aGl0ZSBjYXAuXHJcbiAgICovXHJcbiAgV2hpdGVDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwid2hpdGUgY2FwXCIsXHJcbiAgICBjb2RlOiBcIndoaXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB5ZWxsb3c6IHllbGxvdyBjYXAuXHJcbiAgICovXHJcbiAgWWVsbG93Q2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcInllbGxvdyBjYXBcIixcclxuICAgIGNvZGU6IFwieWVsbG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19