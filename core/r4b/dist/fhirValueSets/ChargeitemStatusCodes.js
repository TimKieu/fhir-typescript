// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/chargeitem-status|4.3.0
/**
 * Codes identifying the lifecycle stage of a ChargeItem.
 */
export const ChargeitemStatusCodes = {
    /**
     * aborted: The processing of the charge was aborted.
     */
    Aborted: "aborted",
    /**
     * billable: The charge item is ready for billing.
     */
    Billable: "billable",
    /**
     * billed: The charge item has been billed (e.g. a billing engine has generated financial transactions by applying the associated ruled for the charge item to the context of the Encounter, and placed them into Claims/Invoices.
     */
    Billed: "billed",
    /**
     * entered-in-error: The charge item has been entered in error and should not be processed for billing.
     */
    EnteredInError: "entered-in-error",
    /**
     * not-billable: The charge item has been determined to be not billable (e.g. due to rules associated with the billing code).
     */
    NotBillable: "not-billable",
    /**
     * planned: The charge item has been entered, but the charged service is not  yet complete, so it shall not be billed yet but might be used in the context of pre-authorization.
     */
    Planned: "planned",
    /**
     * unknown: The authoring system does not know which of the status values currently applies for this charge item  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmdlaXRlbVN0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9DaGFyZ2VpdGVtU3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsc0VBQXNFO0FBRXRFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUc7SUFDbkM7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxjQUFjLEVBQUUsa0JBQWtCO0lBQ2xDOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGNBQWM7SUFDM0I7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0NBQ1YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY2hhcmdlaXRlbS1zdGF0dXN8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpZGVudGlmeWluZyB0aGUgbGlmZWN5Y2xlIHN0YWdlIG9mIGEgQ2hhcmdlSXRlbS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDaGFyZ2VpdGVtU3RhdHVzQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYWJvcnRlZDogVGhlIHByb2Nlc3Npbmcgb2YgdGhlIGNoYXJnZSB3YXMgYWJvcnRlZC5cclxuICAgKi9cclxuICBBYm9ydGVkOiBcImFib3J0ZWRcIixcclxuICAvKipcclxuICAgKiBiaWxsYWJsZTogVGhlIGNoYXJnZSBpdGVtIGlzIHJlYWR5IGZvciBiaWxsaW5nLlxyXG4gICAqL1xyXG4gIEJpbGxhYmxlOiBcImJpbGxhYmxlXCIsXHJcbiAgLyoqXHJcbiAgICogYmlsbGVkOiBUaGUgY2hhcmdlIGl0ZW0gaGFzIGJlZW4gYmlsbGVkIChlLmcuIGEgYmlsbGluZyBlbmdpbmUgaGFzIGdlbmVyYXRlZCBmaW5hbmNpYWwgdHJhbnNhY3Rpb25zIGJ5IGFwcGx5aW5nIHRoZSBhc3NvY2lhdGVkIHJ1bGVkIGZvciB0aGUgY2hhcmdlIGl0ZW0gdG8gdGhlIGNvbnRleHQgb2YgdGhlIEVuY291bnRlciwgYW5kIHBsYWNlZCB0aGVtIGludG8gQ2xhaW1zL0ludm9pY2VzLlxyXG4gICAqL1xyXG4gIEJpbGxlZDogXCJiaWxsZWRcIixcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgY2hhcmdlIGl0ZW0gaGFzIGJlZW4gZW50ZXJlZCBpbiBlcnJvciBhbmQgc2hvdWxkIG5vdCBiZSBwcm9jZXNzZWQgZm9yIGJpbGxpbmcuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gIC8qKlxyXG4gICAqIG5vdC1iaWxsYWJsZTogVGhlIGNoYXJnZSBpdGVtIGhhcyBiZWVuIGRldGVybWluZWQgdG8gYmUgbm90IGJpbGxhYmxlIChlLmcuIGR1ZSB0byBydWxlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGJpbGxpbmcgY29kZSkuXHJcbiAgICovXHJcbiAgTm90QmlsbGFibGU6IFwibm90LWJpbGxhYmxlXCIsXHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIGNoYXJnZSBpdGVtIGhhcyBiZWVuIGVudGVyZWQsIGJ1dCB0aGUgY2hhcmdlZCBzZXJ2aWNlIGlzIG5vdCAgeWV0IGNvbXBsZXRlLCBzbyBpdCBzaGFsbCBub3QgYmUgYmlsbGVkIHlldCBidXQgbWlnaHQgYmUgdXNlZCBpbiB0aGUgY29udGV4dCBvZiBwcmUtYXV0aG9yaXphdGlvbi5cclxuICAgKi9cclxuICBQbGFubmVkOiBcInBsYW5uZWRcIixcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgYXV0aG9yaW5nIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGN1cnJlbnRseSBhcHBsaWVzIGZvciB0aGlzIGNoYXJnZSBpdGVtICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCBpdCdzIGp1c3Qgbm90IGtub3duIHdoaWNoIG9uZS5cclxuICAgKi9cclxuICBVbmtub3duOiBcInVua25vd25cIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpZGVudGlmeWluZyB0aGUgbGlmZWN5Y2xlIHN0YWdlIG9mIGEgQ2hhcmdlSXRlbS5cclxuICovXHJcbmV4cG9ydCB0eXBlIENoYXJnZWl0ZW1TdGF0dXNDb2RlVHlwZSA9IHR5cGVvZiBDaGFyZ2VpdGVtU3RhdHVzQ29kZXNba2V5b2YgdHlwZW9mIENoYXJnZWl0ZW1TdGF0dXNDb2Rlc107XHJcbiJdfQ==