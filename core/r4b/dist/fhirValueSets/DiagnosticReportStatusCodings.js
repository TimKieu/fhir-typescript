// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/diagnostic-report-status|4.3.0
/**
 * The status of the diagnostic report.
 */
export const DiagnosticReportStatusCodings = {
    /**
     * amended: Subsequent to being final, the report has been modified.  This includes any change in the results, diagnosis, narrative text, or other content of a report that has been issued.
     */
    Amended: {
        display: "Amended",
        code: "amended",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * appended: Subsequent to being final, the report has been modified by adding new content. The existing content is unchanged.
     */
    Appended: {
        display: "Appended",
        code: "appended",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * cancelled: The report is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * corrected: Subsequent to being final, the report has been modified  to correct an error in the report or referenced results.
     */
    Corrected: {
        display: "Corrected",
        code: "corrected",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * entered-in-error: The report has been withdrawn following a previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * final: The report is complete and verified by an authorized person.
     */
    Final: {
        display: "Final",
        code: "final",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * partial: This is a partial (e.g. initial, interim or preliminary) report: data in the report may be incomplete or unverified.
     */
    Partial: {
        display: "Partial",
        code: "partial",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * preliminary: Verified early results are available, but not all  results are final.
     */
    Preliminary: {
        display: "Preliminary",
        code: "preliminary",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * registered: The existence of the report is registered, but there is nothing yet available.
     */
    Registered: {
        display: "Registered",
        code: "registered",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/diagnostic-report-status",
    },
};
//# sourceMappingURL=data:application/json;base64,