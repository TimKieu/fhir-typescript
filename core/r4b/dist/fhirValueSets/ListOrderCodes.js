// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-order|4.3.0
/**
 * Base values for the order of the items in a list resource.
 */
export const ListOrderCodes = {
    /**
     * alphabetic: The list is sorted alphabetically by an unspecified property of the items in the list.
     */
    SortedAlphabetically: "alphabetic",
    /**
     * category: The list is sorted categorically by an unspecified property of the items in the list.
     */
    SortedByCategory: "category",
    /**
     * entry-date: The list is sorted by the date the item was added to the list. Note that the date added to the list is not explicit in the list itself.
     */
    SortedByItemDate: "entry-date",
    /**
     * event-date: The list is sorted by the data of the event. This can be used when the list has items which are dates with past or future events.
     */
    SortedByEventDate: "event-date",
    /**
     * patient: The list is sorted by patient, with items for each patient grouped together.
     */
    SortedByPatient: "patient",
    /**
     * priority: The list is sorted by priority. The exact method in which priority has been determined is not specified.
     */
    SortedByPriority: "priority",
    /**
     * system: The list was sorted by the system. The criteria the user used are not specified; define additional codes to specify a particular order (or use other defined codes).
     */
    SortedBySystem: "system",
    /**
     * user: The list was sorted by a user. The criteria the user used are not specified.
     */
    SortedByUser: "user",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdE9yZGVyQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0xpc3RPcmRlckNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLCtEQUErRDtBQUUvRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRztJQUM1Qjs7T0FFRztJQUNILG9CQUFvQixFQUFFLFlBQVk7SUFDbEM7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxVQUFVO0lBQzVCOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsWUFBWTtJQUM5Qjs7T0FFRztJQUNILGlCQUFpQixFQUFFLFlBQVk7SUFDL0I7O09BRUc7SUFDSCxlQUFlLEVBQUUsU0FBUztJQUMxQjs7T0FFRztJQUNILGdCQUFnQixFQUFFLFVBQVU7SUFDNUI7O09BRUc7SUFDSCxjQUFjLEVBQUUsUUFBUTtJQUN4Qjs7T0FFRztJQUNILFlBQVksRUFBRSxNQUFNO0NBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbGlzdC1vcmRlcnw0LjMuMFxyXG5cclxuLyoqXHJcbiAqIEJhc2UgdmFsdWVzIGZvciB0aGUgb3JkZXIgb2YgdGhlIGl0ZW1zIGluIGEgbGlzdCByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBMaXN0T3JkZXJDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhbHBoYWJldGljOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkgYnkgYW4gdW5zcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGl0ZW1zIGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIFNvcnRlZEFscGhhYmV0aWNhbGx5OiBcImFscGhhYmV0aWNcIixcclxuICAvKipcclxuICAgKiBjYXRlZ29yeTogVGhlIGxpc3QgaXMgc29ydGVkIGNhdGVnb3JpY2FsbHkgYnkgYW4gdW5zcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGl0ZW1zIGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5Q2F0ZWdvcnk6IFwiY2F0ZWdvcnlcIixcclxuICAvKipcclxuICAgKiBlbnRyeS1kYXRlOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgdGhlIGRhdGUgdGhlIGl0ZW0gd2FzIGFkZGVkIHRvIHRoZSBsaXN0LiBOb3RlIHRoYXQgdGhlIGRhdGUgYWRkZWQgdG8gdGhlIGxpc3QgaXMgbm90IGV4cGxpY2l0IGluIHRoZSBsaXN0IGl0c2VsZi5cclxuICAgKi9cclxuICBTb3J0ZWRCeUl0ZW1EYXRlOiBcImVudHJ5LWRhdGVcIixcclxuICAvKipcclxuICAgKiBldmVudC1kYXRlOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgdGhlIGRhdGEgb2YgdGhlIGV2ZW50LiBUaGlzIGNhbiBiZSB1c2VkIHdoZW4gdGhlIGxpc3QgaGFzIGl0ZW1zIHdoaWNoIGFyZSBkYXRlcyB3aXRoIHBhc3Qgb3IgZnV0dXJlIGV2ZW50cy5cclxuICAgKi9cclxuICBTb3J0ZWRCeUV2ZW50RGF0ZTogXCJldmVudC1kYXRlXCIsXHJcbiAgLyoqXHJcbiAgICogcGF0aWVudDogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHBhdGllbnQsIHdpdGggaXRlbXMgZm9yIGVhY2ggcGF0aWVudCBncm91cGVkIHRvZ2V0aGVyLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5UGF0aWVudDogXCJwYXRpZW50XCIsXHJcbiAgLyoqXHJcbiAgICogcHJpb3JpdHk6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSBwcmlvcml0eS4gVGhlIGV4YWN0IG1ldGhvZCBpbiB3aGljaCBwcmlvcml0eSBoYXMgYmVlbiBkZXRlcm1pbmVkIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgU29ydGVkQnlQcmlvcml0eTogXCJwcmlvcml0eVwiLFxyXG4gIC8qKlxyXG4gICAqIHN5c3RlbTogVGhlIGxpc3Qgd2FzIHNvcnRlZCBieSB0aGUgc3lzdGVtLiBUaGUgY3JpdGVyaWEgdGhlIHVzZXIgdXNlZCBhcmUgbm90IHNwZWNpZmllZDsgZGVmaW5lIGFkZGl0aW9uYWwgY29kZXMgdG8gc3BlY2lmeSBhIHBhcnRpY3VsYXIgb3JkZXIgKG9yIHVzZSBvdGhlciBkZWZpbmVkIGNvZGVzKS5cclxuICAgKi9cclxuICBTb3J0ZWRCeVN5c3RlbTogXCJzeXN0ZW1cIixcclxuICAvKipcclxuICAgKiB1c2VyOiBUaGUgbGlzdCB3YXMgc29ydGVkIGJ5IGEgdXNlci4gVGhlIGNyaXRlcmlhIHRoZSB1c2VyIHVzZWQgYXJlIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgU29ydGVkQnlVc2VyOiBcInVzZXJcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBCYXNlIHZhbHVlcyBmb3IgdGhlIG9yZGVyIG9mIHRoZSBpdGVtcyBpbiBhIGxpc3QgcmVzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaXN0T3JkZXJDb2RlVHlwZSA9IHR5cGVvZiBMaXN0T3JkZXJDb2Rlc1trZXlvZiB0eXBlb2YgTGlzdE9yZGVyQ29kZXNdO1xyXG4iXX0=