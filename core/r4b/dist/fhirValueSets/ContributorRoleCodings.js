// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contributor-role|4.3.0
/**
 * Used to code the format of the display string.
 */
export const ContributorRoleCodings = {
    /**
     * author: An entity primarily responsible for making the resource, often called author or creator
     */
    AuthorCreator: {
        display: "Author/Creator",
        code: "author",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
    /**
     * editor: Entity that revises or has authority to control the content
     */
    Editor: {
        display: "Editor",
        code: "editor",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
    /**
     * endorser: Entity that supports, approves, or advocates for the content
     */
    Endorser: {
        display: "Endorser",
        code: "endorser",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
    /**
     * funder: Entity that supplies financial support
     */
    Funder: {
        display: "Funder",
        code: "funder",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
    /**
     * informant: Entity that supplies information
     */
    Informant: {
        display: "Informant",
        code: "informant",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
    /**
     * publisher: Entity that makes the content available for public use
     */
    Publisher: {
        display: "Publisher",
        code: "publisher",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
    /**
     * reviewer: Entity that examines the content, formally or informally, and suggests revisions or comments
     */
    Reviewer: {
        display: "Reviewer",
        code: "reviewer",
        system: "http://terminology.hl7.org/CodeSystem/contributor-role",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJpYnV0b3JSb2xlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udHJpYnV0b3JSb2xlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxxRUFBcUU7QUFzQ3JFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29udHJpYnV0b3Itcm9sZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gY29kZSB0aGUgZm9ybWF0IG9mIHRoZSBkaXNwbGF5IHN0cmluZy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRyaWJ1dG9yUm9sZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXV0aG9yOiBBbiBlbnRpdHkgcHJpbWFyaWx5IHJlc3BvbnNpYmxlIGZvciBtYWtpbmcgdGhlIHJlc291cmNlLCBvZnRlbiBjYWxsZWQgYXV0aG9yIG9yIGNyZWF0b3JcclxuICAgKi9cclxuICBBdXRob3JDcmVhdG9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVkaXRvcjogRW50aXR5IHRoYXQgcmV2aXNlcyBvciBoYXMgYXV0aG9yaXR5IHRvIGNvbnRyb2wgdGhlIGNvbnRlbnRcclxuICAgKi9cclxuICBFZGl0b3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW5kb3JzZXI6IEVudGl0eSB0aGF0IHN1cHBvcnRzLCBhcHByb3Zlcywgb3IgYWR2b2NhdGVzIGZvciB0aGUgY29udGVudFxyXG4gICAqL1xyXG4gIEVuZG9yc2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZ1bmRlcjogRW50aXR5IHRoYXQgc3VwcGxpZXMgZmluYW5jaWFsIHN1cHBvcnRcclxuICAgKi9cclxuICBGdW5kZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW5mb3JtYW50OiBFbnRpdHkgdGhhdCBzdXBwbGllcyBpbmZvcm1hdGlvblxyXG4gICAqL1xyXG4gIEluZm9ybWFudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwdWJsaXNoZXI6IEVudGl0eSB0aGF0IG1ha2VzIHRoZSBjb250ZW50IGF2YWlsYWJsZSBmb3IgcHVibGljIHVzZVxyXG4gICAqL1xyXG4gIFB1Ymxpc2hlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXZpZXdlcjogRW50aXR5IHRoYXQgZXhhbWluZXMgdGhlIGNvbnRlbnQsIGZvcm1hbGx5IG9yIGluZm9ybWFsbHksIGFuZCBzdWdnZXN0cyByZXZpc2lvbnMgb3IgY29tbWVudHNcclxuICAgKi9cclxuICBSZXZpZXdlcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gY29kZSB0aGUgZm9ybWF0IG9mIHRoZSBkaXNwbGF5IHN0cmluZy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb250cmlidXRvclJvbGVDb2RpbmdzOkNvbnRyaWJ1dG9yUm9sZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXV0aG9yOiBBbiBlbnRpdHkgcHJpbWFyaWx5IHJlc3BvbnNpYmxlIGZvciBtYWtpbmcgdGhlIHJlc291cmNlLCBvZnRlbiBjYWxsZWQgYXV0aG9yIG9yIGNyZWF0b3JcclxuICAgKi9cclxuICBBdXRob3JDcmVhdG9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkF1dGhvci9DcmVhdG9yXCIsXHJcbiAgICBjb2RlOiBcImF1dGhvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJpYnV0b3Itcm9sZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZWRpdG9yOiBFbnRpdHkgdGhhdCByZXZpc2VzIG9yIGhhcyBhdXRob3JpdHkgdG8gY29udHJvbCB0aGUgY29udGVudFxyXG4gICAqL1xyXG4gIEVkaXRvcjoge1xyXG4gICAgZGlzcGxheTogXCJFZGl0b3JcIixcclxuICAgIGNvZGU6IFwiZWRpdG9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1yb2xlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbmRvcnNlcjogRW50aXR5IHRoYXQgc3VwcG9ydHMsIGFwcHJvdmVzLCBvciBhZHZvY2F0ZXMgZm9yIHRoZSBjb250ZW50XHJcbiAgICovXHJcbiAgRW5kb3JzZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRW5kb3JzZXJcIixcclxuICAgIGNvZGU6IFwiZW5kb3JzZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyaWJ1dG9yLXJvbGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZ1bmRlcjogRW50aXR5IHRoYXQgc3VwcGxpZXMgZmluYW5jaWFsIHN1cHBvcnRcclxuICAgKi9cclxuICBGdW5kZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRnVuZGVyXCIsXHJcbiAgICBjb2RlOiBcImZ1bmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJpYnV0b3Itcm9sZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW5mb3JtYW50OiBFbnRpdHkgdGhhdCBzdXBwbGllcyBpbmZvcm1hdGlvblxyXG4gICAqL1xyXG4gIEluZm9ybWFudDoge1xyXG4gICAgZGlzcGxheTogXCJJbmZvcm1hbnRcIixcclxuICAgIGNvZGU6IFwiaW5mb3JtYW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1yb2xlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwdWJsaXNoZXI6IEVudGl0eSB0aGF0IG1ha2VzIHRoZSBjb250ZW50IGF2YWlsYWJsZSBmb3IgcHVibGljIHVzZVxyXG4gICAqL1xyXG4gIFB1Ymxpc2hlcjoge1xyXG4gICAgZGlzcGxheTogXCJQdWJsaXNoZXJcIixcclxuICAgIGNvZGU6IFwicHVibGlzaGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1yb2xlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXZpZXdlcjogRW50aXR5IHRoYXQgZXhhbWluZXMgdGhlIGNvbnRlbnQsIGZvcm1hbGx5IG9yIGluZm9ybWFsbHksIGFuZCBzdWdnZXN0cyByZXZpc2lvbnMgb3IgY29tbWVudHNcclxuICAgKi9cclxuICBSZXZpZXdlcjoge1xyXG4gICAgZGlzcGxheTogXCJSZXZpZXdlclwiLFxyXG4gICAgY29kZTogXCJyZXZpZXdlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJpYnV0b3Itcm9sZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==