// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-route|4.3.0
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the administrative routes used during vaccination. This value set is provided as a suggestive example.
 */
export const ImmunizationRouteCodings = {
    /**
     * Code: IDINJ
     */
    InjectionIntradermal: {
        display: "Injection, intradermal",
        code: "IDINJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: IM
     */
    InjectionIntramuscular: {
        display: "Injection, intramuscular",
        code: "IM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: IVINJ
     */
    InjectionIntravenous: {
        display: "Injection, intravenous",
        code: "IVINJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: NASINHLC
     */
    InhalationNasal: {
        display: "Inhalation, nasal",
        code: "NASINHLC",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: PO
     */
    SwallowOral: {
        display: "Swallow, oral",
        code: "PO",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: SQ
     */
    InjectionSubcutaneous: {
        display: "Injection, subcutaneous",
        code: "SQ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
    /**
     * Code: TRNSDERM
     */
    Transdermal: {
        display: "Transdermal",
        code: "TRNSDERM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uUm91dGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25Sb3V0ZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBc0N2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2ltbXVuaXphdGlvbi1yb3V0ZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB2YWx1ZSBzZXQgdG8gaW5zdGFudGlhdGUgdGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIGRyYXduIGZyb20gYSB0ZXJtaW5vbG9naWNhbGx5IHJvYnVzdCBjb2RlIHN5c3RlbSB0aGF0IGNvbnNpc3RzIG9mIG9yIGNvbnRhaW5zIGNvbmNlcHRzIHRvIHN1cHBvcnQgZGVzY3JpYmluZyB0aGUgYWRtaW5pc3RyYXRpdmUgcm91dGVzIHVzZWQgZHVyaW5nIHZhY2NpbmF0aW9uLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltbXVuaXphdGlvblJvdXRlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiBJRElOSlxyXG4gICAqL1xyXG4gIEluamVjdGlvbkludHJhZGVybWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IElNXHJcbiAgICovXHJcbiAgSW5qZWN0aW9uSW50cmFtdXNjdWxhcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBJVklOSlxyXG4gICAqL1xyXG4gIEluamVjdGlvbkludHJhdmVub3VzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5BU0lOSExDXHJcbiAgICovXHJcbiAgSW5oYWxhdGlvbk5hc2FsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBPXHJcbiAgICovXHJcbiAgU3dhbGxvd09yYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1FcclxuICAgKi9cclxuICBJbmplY3Rpb25TdWJjdXRhbmVvdXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogVFJOU0RFUk1cclxuICAgKi9cclxuICBUcmFuc2Rlcm1hbDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB2YWx1ZSBzZXQgdG8gaW5zdGFudGlhdGUgdGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIGRyYXduIGZyb20gYSB0ZXJtaW5vbG9naWNhbGx5IHJvYnVzdCBjb2RlIHN5c3RlbSB0aGF0IGNvbnNpc3RzIG9mIG9yIGNvbnRhaW5zIGNvbmNlcHRzIHRvIHN1cHBvcnQgZGVzY3JpYmluZyB0aGUgYWRtaW5pc3RyYXRpdmUgcm91dGVzIHVzZWQgZHVyaW5nIHZhY2NpbmF0aW9uLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbW11bml6YXRpb25Sb3V0ZUNvZGluZ3M6SW1tdW5pemF0aW9uUm91dGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IElESU5KXHJcbiAgICovXHJcbiAgSW5qZWN0aW9uSW50cmFkZXJtYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5qZWN0aW9uLCBpbnRyYWRlcm1hbFwiLFxyXG4gICAgY29kZTogXCJJRElOSlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBJTVxyXG4gICAqL1xyXG4gIEluamVjdGlvbkludHJhbXVzY3VsYXI6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5qZWN0aW9uLCBpbnRyYW11c2N1bGFyXCIsXHJcbiAgICBjb2RlOiBcIklNXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1Sb3V0ZU9mQWRtaW5pc3RyYXRpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IElWSU5KXHJcbiAgICovXHJcbiAgSW5qZWN0aW9uSW50cmF2ZW5vdXM6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5qZWN0aW9uLCBpbnRyYXZlbm91c1wiLFxyXG4gICAgY29kZTogXCJJVklOSlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBOQVNJTkhMQ1xyXG4gICAqL1xyXG4gIEluaGFsYXRpb25OYXNhbDoge1xyXG4gICAgZGlzcGxheTogXCJJbmhhbGF0aW9uLCBuYXNhbFwiLFxyXG4gICAgY29kZTogXCJOQVNJTkhMQ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQT1xyXG4gICAqL1xyXG4gIFN3YWxsb3dPcmFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN3YWxsb3csIG9yYWxcIixcclxuICAgIGNvZGU6IFwiUE9cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1FcclxuICAgKi9cclxuICBJbmplY3Rpb25TdWJjdXRhbmVvdXM6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5qZWN0aW9uLCBzdWJjdXRhbmVvdXNcIixcclxuICAgIGNvZGU6IFwiU1FcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVFJOU0RFUk1cclxuICAgKi9cclxuICBUcmFuc2Rlcm1hbDoge1xyXG4gICAgZGlzcGxheTogXCJUcmFuc2Rlcm1hbFwiLFxyXG4gICAgY29kZTogXCJUUk5TREVSTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19