// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/linkage-type|4.3.0
/**
 * Used to distinguish different roles a resource can play within a set of linked resources.
 */
export const LinkageTypeCodings = {
    /**
     * alternate: The resource represents an alternative view of the underlying event/condition/etc.  The resource may still be actively maintained, even though it is not considered to be the source of truth.
     */
    AlternateRecord: {
        display: "Alternate Record",
        code: "alternate",
        system: "http://hl7.org/fhir/linkage-type",
    },
    /**
     * historical: The resource represents an obsolete record of the underlying event/condition/etc.  It is not expected to be actively maintained.
     */
    HistoricalObsoleteRecord: {
        display: "Historical/Obsolete Record",
        code: "historical",
        system: "http://hl7.org/fhir/linkage-type",
    },
    /**
     * source: The resource represents the "source of truth" (from the perspective of this Linkage resource) for the underlying event/condition/etc.
     */
    SourceOfTruth: {
        display: "Source of Truth",
        code: "source",
        system: "http://hl7.org/fhir/linkage-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua2FnZVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9MaW5rYWdlVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBc0JqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUU7UUFDeEIsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2xpbmthZ2UtdHlwZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gZGlzdGluZ3Vpc2ggZGlmZmVyZW50IHJvbGVzIGEgcmVzb3VyY2UgY2FuIHBsYXkgd2l0aGluIGEgc2V0IG9mIGxpbmtlZCByZXNvdXJjZXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaW5rYWdlVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWx0ZXJuYXRlOiBUaGUgcmVzb3VyY2UgcmVwcmVzZW50cyBhbiBhbHRlcm5hdGl2ZSB2aWV3IG9mIHRoZSB1bmRlcmx5aW5nIGV2ZW50L2NvbmRpdGlvbi9ldGMuICBUaGUgcmVzb3VyY2UgbWF5IHN0aWxsIGJlIGFjdGl2ZWx5IG1haW50YWluZWQsIGV2ZW4gdGhvdWdoIGl0IGlzIG5vdCBjb25zaWRlcmVkIHRvIGJlIHRoZSBzb3VyY2Ugb2YgdHJ1dGguXHJcbiAgICovXHJcbiAgQWx0ZXJuYXRlUmVjb3JkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGhpc3RvcmljYWw6IFRoZSByZXNvdXJjZSByZXByZXNlbnRzIGFuIG9ic29sZXRlIHJlY29yZCBvZiB0aGUgdW5kZXJseWluZyBldmVudC9jb25kaXRpb24vZXRjLiAgSXQgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGFjdGl2ZWx5IG1haW50YWluZWQuXHJcbiAgICovXHJcbiAgSGlzdG9yaWNhbE9ic29sZXRlUmVjb3JkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNvdXJjZTogVGhlIHJlc291cmNlIHJlcHJlc2VudHMgdGhlIFwic291cmNlIG9mIHRydXRoXCIgKGZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIHRoaXMgTGlua2FnZSByZXNvdXJjZSkgZm9yIHRoZSB1bmRlcmx5aW5nIGV2ZW50L2NvbmRpdGlvbi9ldGMuXHJcbiAgICovXHJcbiAgU291cmNlT2ZUcnV0aDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gZGlzdGluZ3Vpc2ggZGlmZmVyZW50IHJvbGVzIGEgcmVzb3VyY2UgY2FuIHBsYXkgd2l0aGluIGEgc2V0IG9mIGxpbmtlZCByZXNvdXJjZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTGlua2FnZVR5cGVDb2RpbmdzOkxpbmthZ2VUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbHRlcm5hdGU6IFRoZSByZXNvdXJjZSByZXByZXNlbnRzIGFuIGFsdGVybmF0aXZlIHZpZXcgb2YgdGhlIHVuZGVybHlpbmcgZXZlbnQvY29uZGl0aW9uL2V0Yy4gIFRoZSByZXNvdXJjZSBtYXkgc3RpbGwgYmUgYWN0aXZlbHkgbWFpbnRhaW5lZCwgZXZlbiB0aG91Z2ggaXQgaXMgbm90IGNvbnNpZGVyZWQgdG8gYmUgdGhlIHNvdXJjZSBvZiB0cnV0aC5cclxuICAgKi9cclxuICBBbHRlcm5hdGVSZWNvcmQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWx0ZXJuYXRlIFJlY29yZFwiLFxyXG4gICAgY29kZTogXCJhbHRlcm5hdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2xpbmthZ2UtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGlzdG9yaWNhbDogVGhlIHJlc291cmNlIHJlcHJlc2VudHMgYW4gb2Jzb2xldGUgcmVjb3JkIG9mIHRoZSB1bmRlcmx5aW5nIGV2ZW50L2NvbmRpdGlvbi9ldGMuICBJdCBpcyBub3QgZXhwZWN0ZWQgdG8gYmUgYWN0aXZlbHkgbWFpbnRhaW5lZC5cclxuICAgKi9cclxuICBIaXN0b3JpY2FsT2Jzb2xldGVSZWNvcmQ6IHtcclxuICAgIGRpc3BsYXk6IFwiSGlzdG9yaWNhbC9PYnNvbGV0ZSBSZWNvcmRcIixcclxuICAgIGNvZGU6IFwiaGlzdG9yaWNhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbGlua2FnZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzb3VyY2U6IFRoZSByZXNvdXJjZSByZXByZXNlbnRzIHRoZSBcInNvdXJjZSBvZiB0cnV0aFwiIChmcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiB0aGlzIExpbmthZ2UgcmVzb3VyY2UpIGZvciB0aGUgdW5kZXJseWluZyBldmVudC9jb25kaXRpb24vZXRjLlxyXG4gICAqL1xyXG4gIFNvdXJjZU9mVHJ1dGg6IHtcclxuICAgIGRpc3BsYXk6IFwiU291cmNlIG9mIFRydXRoXCIsXHJcbiAgICBjb2RlOiBcInNvdXJjZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbGlua2FnZS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19