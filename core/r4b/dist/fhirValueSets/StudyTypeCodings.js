// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/study-type|4.3.0
/**
 * The type of study the evidence was derived from.
 */
export const StudyTypeCodings = {
    /**
     * case-control: case-control study.
     */
    CaseControlStudy: {
        display: "case-control study",
        code: "case-control",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * case-report: a single case report.
     */
    CaseReport: {
        display: "case report",
        code: "case-report",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * CCT: controlled (but not randomized) trial.
     */
    ControlledTrialNonRandomized: {
        display: "controlled trial (non-randomized)",
        code: "CCT",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * cohort: observational study comparing cohorts.
     */
    ComparativeCohortStudy: {
        display: "comparative cohort study",
        code: "cohort",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * mixed: a combination of 1 or more types of studies.
     */
    MixedMethods: {
        display: "mixed methods",
        code: "mixed",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * RCT: randomized controlled trial.
     */
    RandomizedTrial: {
        display: "randomized trial",
        code: "RCT",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * series: uncontrolled cohort or case series.
     */
    UncontrolledCohortOrCaseSeries: {
        display: "uncontrolled cohort or case series",
        code: "series",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R1ZHlUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU3R1ZHlUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQywrREFBK0Q7QUFzQy9EOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQXVCO0lBQ2xEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCw0QkFBNEIsRUFBRTtRQUM1QixPQUFPLEVBQUUsbUNBQW1DO1FBQzVDLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILDhCQUE4QixFQUFFO1FBQzlCLE9BQU8sRUFBRSxvQ0FBb0M7UUFDN0MsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc3R1ZHktdHlwZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIHN0dWR5IHRoZSBldmlkZW5jZSB3YXMgZGVyaXZlZCBmcm9tLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3R1ZHlUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYXNlLWNvbnRyb2w6IGNhc2UtY29udHJvbCBzdHVkeS5cclxuICAgKi9cclxuICBDYXNlQ29udHJvbFN0dWR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhc2UtcmVwb3J0OiBhIHNpbmdsZSBjYXNlIHJlcG9ydC5cclxuICAgKi9cclxuICBDYXNlUmVwb3J0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENDVDogY29udHJvbGxlZCAoYnV0IG5vdCByYW5kb21pemVkKSB0cmlhbC5cclxuICAgKi9cclxuICBDb250cm9sbGVkVHJpYWxOb25SYW5kb21pemVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvaG9ydDogb2JzZXJ2YXRpb25hbCBzdHVkeSBjb21wYXJpbmcgY29ob3J0cy5cclxuICAgKi9cclxuICBDb21wYXJhdGl2ZUNvaG9ydFN0dWR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG1peGVkOiBhIGNvbWJpbmF0aW9uIG9mIDEgb3IgbW9yZSB0eXBlcyBvZiBzdHVkaWVzLlxyXG4gICAqL1xyXG4gIE1peGVkTWV0aG9kczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBSQ1Q6IHJhbmRvbWl6ZWQgY29udHJvbGxlZCB0cmlhbC5cclxuICAgKi9cclxuICBSYW5kb21pemVkVHJpYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc2VyaWVzOiB1bmNvbnRyb2xsZWQgY29ob3J0IG9yIGNhc2Ugc2VyaWVzLlxyXG4gICAqL1xyXG4gIFVuY29udHJvbGxlZENvaG9ydE9yQ2FzZVNlcmllczogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIHN0dWR5IHRoZSBldmlkZW5jZSB3YXMgZGVyaXZlZCBmcm9tLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFN0dWR5VHlwZUNvZGluZ3M6U3R1ZHlUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYXNlLWNvbnRyb2w6IGNhc2UtY29udHJvbCBzdHVkeS5cclxuICAgKi9cclxuICBDYXNlQ29udHJvbFN0dWR5OiB7XHJcbiAgICBkaXNwbGF5OiBcImNhc2UtY29udHJvbCBzdHVkeVwiLFxyXG4gICAgY29kZTogXCJjYXNlLWNvbnRyb2xcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNhc2UtcmVwb3J0OiBhIHNpbmdsZSBjYXNlIHJlcG9ydC5cclxuICAgKi9cclxuICBDYXNlUmVwb3J0OiB7XHJcbiAgICBkaXNwbGF5OiBcImNhc2UgcmVwb3J0XCIsXHJcbiAgICBjb2RlOiBcImNhc2UtcmVwb3J0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDQ1Q6IGNvbnRyb2xsZWQgKGJ1dCBub3QgcmFuZG9taXplZCkgdHJpYWwuXHJcbiAgICovXHJcbiAgQ29udHJvbGxlZFRyaWFsTm9uUmFuZG9taXplZDoge1xyXG4gICAgZGlzcGxheTogXCJjb250cm9sbGVkIHRyaWFsIChub24tcmFuZG9taXplZClcIixcclxuICAgIGNvZGU6IFwiQ0NUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb2hvcnQ6IG9ic2VydmF0aW9uYWwgc3R1ZHkgY29tcGFyaW5nIGNvaG9ydHMuXHJcbiAgICovXHJcbiAgQ29tcGFyYXRpdmVDb2hvcnRTdHVkeToge1xyXG4gICAgZGlzcGxheTogXCJjb21wYXJhdGl2ZSBjb2hvcnQgc3R1ZHlcIixcclxuICAgIGNvZGU6IFwiY29ob3J0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtaXhlZDogYSBjb21iaW5hdGlvbiBvZiAxIG9yIG1vcmUgdHlwZXMgb2Ygc3R1ZGllcy5cclxuICAgKi9cclxuICBNaXhlZE1ldGhvZHM6IHtcclxuICAgIGRpc3BsYXk6IFwibWl4ZWQgbWV0aG9kc1wiLFxyXG4gICAgY29kZTogXCJtaXhlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3R1ZHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUkNUOiByYW5kb21pemVkIGNvbnRyb2xsZWQgdHJpYWwuXHJcbiAgICovXHJcbiAgUmFuZG9taXplZFRyaWFsOiB7XHJcbiAgICBkaXNwbGF5OiBcInJhbmRvbWl6ZWQgdHJpYWxcIixcclxuICAgIGNvZGU6IFwiUkNUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzZXJpZXM6IHVuY29udHJvbGxlZCBjb2hvcnQgb3IgY2FzZSBzZXJpZXMuXHJcbiAgICovXHJcbiAgVW5jb250cm9sbGVkQ29ob3J0T3JDYXNlU2VyaWVzOiB7XHJcbiAgICBkaXNwbGF5OiBcInVuY29udHJvbGxlZCBjb2hvcnQgb3IgY2FzZSBzZXJpZXNcIixcclxuICAgIGNvZGU6IFwic2VyaWVzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19