// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/permitted-data-type|4.3.0
/**
 * Permitted data type for observation value.
 */
export const PermittedDataTypeCodings = {
    /**
     * boolean: true or false.
     */
    VALBoolean: {
        display: "boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * CodeableConcept: A coded concept from a reference terminology and/or text.
     */
    CodeableConcept: {
        display: "CodeableConcept",
        code: "CodeableConcept",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * dateTime: A date, date-time or partial date (e.g. just year or year + month) as used in human communication.
     */
    DateTime: {
        display: "dateTime",
        code: "dateTime",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * integer: A signed integer.
     */
    Integer: {
        display: "integer",
        code: "integer",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Period: A time range defined by start and end date/time.
     */
    Period: {
        display: "Period",
        code: "Period",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Quantity: A measured amount.
     */
    Quantity: {
        display: "Quantity",
        code: "Quantity",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Range: A set of values bounded by low and high.
     */
    Range: {
        display: "Range",
        code: "Range",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Ratio: A ratio of two Quantity values - a numerator and a denominator.
     */
    Ratio: {
        display: "Ratio",
        code: "Ratio",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * SampledData: A series of measurements taken by a device.
     */
    SampledData: {
        display: "SampledData",
        code: "SampledData",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * string: A sequence of Unicode characters.
     */
    VALString: {
        display: "string",
        code: "string",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * time: A time during the day, in the format hh:mm:ss.
     */
    Time: {
        display: "time",
        code: "time",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVybWl0dGVkRGF0YVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9QZXJtaXR0ZWREYXRhVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBc0R4RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Blcm1pdHRlZC1kYXRhLXR5cGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBQZXJtaXR0ZWQgZGF0YSB0eXBlIGZvciBvYnNlcnZhdGlvbiB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFBlcm1pdHRlZERhdGFUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBib29sZWFuOiB0cnVlIG9yIGZhbHNlLlxyXG4gICAqL1xyXG4gIFZBTEJvb2xlYW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZWFibGVDb25jZXB0OiBBIGNvZGVkIGNvbmNlcHQgZnJvbSBhIHJlZmVyZW5jZSB0ZXJtaW5vbG9neSBhbmQvb3IgdGV4dC5cclxuICAgKi9cclxuICBDb2RlYWJsZUNvbmNlcHQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0ZVRpbWU6IEEgZGF0ZSwgZGF0ZS10aW1lIG9yIHBhcnRpYWwgZGF0ZSAoZS5nLiBqdXN0IHllYXIgb3IgeWVhciArIG1vbnRoKSBhcyB1c2VkIGluIGh1bWFuIGNvbW11bmljYXRpb24uXHJcbiAgICovXHJcbiAgRGF0ZVRpbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW50ZWdlcjogQSBzaWduZWQgaW50ZWdlci5cclxuICAgKi9cclxuICBJbnRlZ2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFBlcmlvZDogQSB0aW1lIHJhbmdlIGRlZmluZWQgYnkgc3RhcnQgYW5kIGVuZCBkYXRlL3RpbWUuXHJcbiAgICovXHJcbiAgUGVyaW9kOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFF1YW50aXR5OiBBIG1lYXN1cmVkIGFtb3VudC5cclxuICAgKi9cclxuICBRdWFudGl0eTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBSYW5nZTogQSBzZXQgb2YgdmFsdWVzIGJvdW5kZWQgYnkgbG93IGFuZCBoaWdoLlxyXG4gICAqL1xyXG4gIFJhbmdlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJhdGlvOiBBIHJhdGlvIG9mIHR3byBRdWFudGl0eSB2YWx1ZXMgLSBhIG51bWVyYXRvciBhbmQgYSBkZW5vbWluYXRvci5cclxuICAgKi9cclxuICBSYXRpbzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBTYW1wbGVkRGF0YTogQSBzZXJpZXMgb2YgbWVhc3VyZW1lbnRzIHRha2VuIGJ5IGEgZGV2aWNlLlxyXG4gICAqL1xyXG4gIFNhbXBsZWREYXRhOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogQSBzZXF1ZW5jZSBvZiBVbmljb2RlIGNoYXJhY3RlcnMuXHJcbiAgICovXHJcbiAgVkFMU3RyaW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRpbWU6IEEgdGltZSBkdXJpbmcgdGhlIGRheSwgaW4gdGhlIGZvcm1hdCBoaDptbTpzcy5cclxuICAgKi9cclxuICBUaW1lOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogUGVybWl0dGVkIGRhdGEgdHlwZSBmb3Igb2JzZXJ2YXRpb24gdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUGVybWl0dGVkRGF0YVR5cGVDb2RpbmdzOlBlcm1pdHRlZERhdGFUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBib29sZWFuOiB0cnVlIG9yIGZhbHNlLlxyXG4gICAqL1xyXG4gIFZBTEJvb2xlYW46IHtcclxuICAgIGRpc3BsYXk6IFwiYm9vbGVhblwiLFxyXG4gICAgY29kZTogXCJib29sZWFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlYWJsZUNvbmNlcHQ6IEEgY29kZWQgY29uY2VwdCBmcm9tIGEgcmVmZXJlbmNlIHRlcm1pbm9sb2d5IGFuZC9vciB0ZXh0LlxyXG4gICAqL1xyXG4gIENvZGVhYmxlQ29uY2VwdDoge1xyXG4gICAgZGlzcGxheTogXCJDb2RlYWJsZUNvbmNlcHRcIixcclxuICAgIGNvZGU6IFwiQ29kZWFibGVDb25jZXB0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRlVGltZTogQSBkYXRlLCBkYXRlLXRpbWUgb3IgcGFydGlhbCBkYXRlIChlLmcuIGp1c3QgeWVhciBvciB5ZWFyICsgbW9udGgpIGFzIHVzZWQgaW4gaHVtYW4gY29tbXVuaWNhdGlvbi5cclxuICAgKi9cclxuICBEYXRlVGltZToge1xyXG4gICAgZGlzcGxheTogXCJkYXRlVGltZVwiLFxyXG4gICAgY29kZTogXCJkYXRlVGltZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW50ZWdlcjogQSBzaWduZWQgaW50ZWdlci5cclxuICAgKi9cclxuICBJbnRlZ2VyOiB7XHJcbiAgICBkaXNwbGF5OiBcImludGVnZXJcIixcclxuICAgIGNvZGU6IFwiaW50ZWdlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUGVyaW9kOiBBIHRpbWUgcmFuZ2UgZGVmaW5lZCBieSBzdGFydCBhbmQgZW5kIGRhdGUvdGltZS5cclxuICAgKi9cclxuICBQZXJpb2Q6IHtcclxuICAgIGRpc3BsYXk6IFwiUGVyaW9kXCIsXHJcbiAgICBjb2RlOiBcIlBlcmlvZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUXVhbnRpdHk6IEEgbWVhc3VyZWQgYW1vdW50LlxyXG4gICAqL1xyXG4gIFF1YW50aXR5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlF1YW50aXR5XCIsXHJcbiAgICBjb2RlOiBcIlF1YW50aXR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBSYW5nZTogQSBzZXQgb2YgdmFsdWVzIGJvdW5kZWQgYnkgbG93IGFuZCBoaWdoLlxyXG4gICAqL1xyXG4gIFJhbmdlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJhbmdlXCIsXHJcbiAgICBjb2RlOiBcIlJhbmdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBSYXRpbzogQSByYXRpbyBvZiB0d28gUXVhbnRpdHkgdmFsdWVzIC0gYSBudW1lcmF0b3IgYW5kIGEgZGVub21pbmF0b3IuXHJcbiAgICovXHJcbiAgUmF0aW86IHtcclxuICAgIGRpc3BsYXk6IFwiUmF0aW9cIixcclxuICAgIGNvZGU6IFwiUmF0aW9cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFNhbXBsZWREYXRhOiBBIHNlcmllcyBvZiBtZWFzdXJlbWVudHMgdGFrZW4gYnkgYSBkZXZpY2UuXHJcbiAgICovXHJcbiAgU2FtcGxlZERhdGE6IHtcclxuICAgIGRpc3BsYXk6IFwiU2FtcGxlZERhdGFcIixcclxuICAgIGNvZGU6IFwiU2FtcGxlZERhdGFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogQSBzZXF1ZW5jZSBvZiBVbmljb2RlIGNoYXJhY3RlcnMuXHJcbiAgICovXHJcbiAgVkFMU3RyaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcInN0cmluZ1wiLFxyXG4gICAgY29kZTogXCJzdHJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRpbWU6IEEgdGltZSBkdXJpbmcgdGhlIGRheSwgaW4gdGhlIGZvcm1hdCBoaDptbTpzcy5cclxuICAgKi9cclxuICBUaW1lOiB7XHJcbiAgICBkaXNwbGF5OiBcInRpbWVcIixcclxuICAgIGNvZGU6IFwidGltZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==