// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/statistic-model-code|4.3.0
/**
 * The handling of the variable in statistical analysis for exposures or outcomes.
 */
export const StatisticModelCodes = {
    /**
     * adjusted: Used for adjusted analysis, paired with variable element(s)
     */
    AdjustedAnalysis: "adjusted",
    /**
     * anova: Used for ANOVA method of analysis, may be paired with "value" to express degrees of freedom
     */
    ANOVAANalysisOfVAriance: "anova",
    /**
     * anovaOneWay: Used for one-way ANOVA method of analysis, may be paired with "value" to express degrees of freedom
     */
    OneWayANOVA: "anovaOneWay",
    /**
     * anovaThreeWay: Used for 3-way ANOVA method of analysis, may be paired with "value" to express degrees of freedom
     */
    VAL3WayANOVA: "anovaThreeWay",
    /**
     * anovaTwoWay: Used for 2-way ANOVA without replication method of analysis, may be paired with "value" to express degrees of freedom
     */
    VAL2WayANOVAWithoutReplication: "anovaTwoWay",
    /**
     * anovaTwoWayReplication: Used for 2-way ANOVA with replication method of analysis, may be paired with "value" to express degrees of freedom
     */
    VAL2WayANOVAWithReplication: "anovaTwoWayReplication",
    /**
     * binomialDistributionRegression: Used for Binomial Distribution for Regression, no additional elements needed
     */
    BinomialDistributionForRegression: "binomialDistributionRegression",
    /**
     * chiSquareTest: Used for Chi-square test, may be paired with "value" to express degrees of freedom
     */
    ChiSquareTest: "chiSquareTest",
    /**
     * chiSquareTestHomogeneity: Used for Chi-square test for homogeneity, may be paired with "value" to express degrees of freedom
     */
    ChiSquareTestForHomogeneity: "chiSquareTestHomogeneity",
    /**
     * chiSquareTestTrend: Used for Chi-square test for trend, may be paired with "value" to express degrees of freedom
     */
    ChiSquareTestForTrend: "chiSquareTestTrend",
    /**
     * coxProportionalHazards: Used for Cox proportional hazards method of analysis, no additional elements needed
     */
    CoxProportionalHazards: "coxProportionalHazards",
    /**
     * dersimonianLairdMethod: Used for Dersimonian-Laird method of tau estimation, no additional elements needed
     */
    DersimonianLairdMethod: "dersimonianLairdMethod",
    /**
     * effectsFixed: From a fixed-effects analysis, no additional elements needed
     */
    FixedEffects: "effectsFixed",
    /**
     * effectsRandom: From a random-effects analysis, no additional elements needed
     */
    RandomEffects: "effectsRandom",
    /**
     * empiricalBayes: Used for Empirical Bayes method of tau estimation, no additional elements needed
     */
    EmpiricalBayesMethod: "empiricalBayes",
    /**
     * fishersExactTest: Used for Fisher's exact test, may be paired with "value" to express degrees of freedom
     */
    FisherQuoteSExactTest: "fishersExactTest",
    /**
     * friedmanTest: Used for Friedman test, no additional elements needed
     */
    FriedmanTest: "friedmanTest",
    /**
     * glm: Used for GLM (Generalized Linear Model), no additional elements needed
     */
    GLMGeneralizedLinearModel: "glm",
    /**
     * glmGeneralizedLogit: Used for GLM with generalized logit link, no additional elements needed
     */
    GLMWithGeneralizedLogitLink: "glmGeneralizedLogit",
    /**
     * glmIdentity: Used for GLM with identity link, no additional elements needed
     */
    GLMWithIdentityLink: "glmIdentity",
    /**
     * glmLog: Used for GLM with log link, no additional elements needed
     */
    GLMWithLogLink: "glmLog",
    /**
     * glmLogit: Used for GLM with logit link, no additional elements needed
     */
    GLMWithLogitLink: "glmLogit",
    /**
     * glmm: Used for Generalized linear mixed model (GLMM), no additional elements needed
     */
    GeneralizedLinearMixedModelGLMM: "glmm",
    /**
     * glmmGeneralizedLogit: Used for GLMM with generalized logit link, no additional elements needed
     */
    GLMMWithGeneralizedLogitLink: "glmmGeneralizedLogit",
    /**
     * glmmIdentity: Used for GLMM with identity link, no additional elements needed
     */
    GLMMWithIdentityLink: "glmmIdentity",
    /**
     * glmmLog: Used for GLMM with log link, no additional elements needed
     */
    GLMMWithLogLink: "glmmLog",
    /**
     * glmmLogit: Used for GLMM with logit link, no additional elements needed
     */
    GLMMWithLogitLink: "glmmLogit",
    /**
     * glmmProbit: Used for GLMM with probit link, no additional elements needed
     */
    GLMMWithProbitLink: "glmmProbit",
    /**
     * glmProbit: Used for GLM with probit link, no additional elements needed
     */
    GLMWithProbitLink: "glmProbit",
    /**
     * goodmanKruskasGamma: Used for Goodman Kruskaâ€™s Gamma, no additional elements needed
     */
    GoodmanKruskaQuoteSGamma: "goodmanKruskasGamma",
    /**
     * hartungKnapp: Hartung-Knapp/Hartung-Knapp-Sidik-Jonkman adjustment used in meta-analysis, no additional elements needed
     */
    HartungKnappAdjustment: "hartungKnapp",
    /**
     * hedgesMethod: Used for Hedges method of tau estimation, no additional elements needed
     */
    HedgesMethod: "hedgesMethod",
    /**
     * hunterSchmidt: Used for Hunter-Schmidt method of tau estimation, no additional elements needed
     */
    HunterSchmidtMethod: "hunterSchmidt",
    /**
     * interactionTerm: Used for interaction term, paired with "value" and two or more variable elements
     */
    InteractionTerm: "interactionTerm",
    /**
     * inverseVariance: Used for inverse variance method of meta-analysis, no additional elements needed
     */
    InverseVarianceMethod: "inverseVariance",
    /**
     * kendallCorrelation: Used for Kendall correlation, no additional elements needed
     */
    KendallCorrelation: "kendallCorrelation",
    /**
     * kruskalWallisTest: Used for Kruskal Wallis test, may be paired with "value" to express degrees of freedom
     */
    KruskalWallisTest: "kruskalWallisTest",
    /**
     * linearRegression: Used for linear regression method of analysis, no additional elements needed
     */
    LinearRegression: "linearRegression",
    /**
     * logisticRegression: Used for logistic regression method of analysis, no additional elements needed
     */
    LogisticRegression: "logisticRegression",
    /**
     * mannWhitneyUTest: Used for Mann-Whitney U test, no additional elements needed
     */
    MannWhitneyUTest: "mannWhitneyUTest",
    /**
     * manova: Used for multivariate ANOVA (MANOVA) method of analysis, may be paired with "value" to express degrees of freedom
     */
    MultivariateANOVAMANOVA: "manova",
    /**
     * manteHaenszelMethod: Used for Mantel-Haenszel method, no additional elements needed
     */
    MantelHaenszelMethod: "manteHaenszelMethod",
    /**
     * maximumLikelihood: Used for Maximum Likelihood method of tau estimation, no additional elements needed
     */
    MaximumLikelihoodMethod: "maximumLikelihood",
    /**
     * mcnemarsTest: Used for McNemar's test, no additional elements needed
     */
    McNemarQuoteSTest: "mcnemarsTest",
    /**
     * metaAnalysis: Used for meta-analysis, no additional elements needed
     */
    MetaAnalysis: "metaAnalysis",
    /**
     * modifiedHartungKnapp: Modified Hartung-Knapp/Hartung-Knapp-Sidik-Jonkman adjustment used in meta-analysis, no additional elements needed
     */
    ModifiedHartungKnappAdjustment: "modifiedHartungKnapp",
    /**
     * multinomialDistributionRegression: Used for Multinomial Distribution for Regression, no additional elements needed
     */
    MultinomialDistributionForRegression: "multinomialDistributionRegression",
    /**
     * negativeBinomialRegression: Used for Negative Binomial Regression, no additional elements needed
     */
    NegativeBinomialRegression: "negativeBinomialRegression",
    /**
     * oneSampleTTest: Used for 1-sample t-test, may be paired with "value" to express degrees of freedom
     */
    VAL1SampleTTest: "oneSampleTTest",
    /**
     * oneTailedTest: Used for one-tailed test (1 threshold), no additional elements needed
     */
    OneTailedTest1Threshold: "oneTailedTest",
    /**
     * pairedTTest: Used for paired t-test, may be paired with "value" to express degrees of freedom
     */
    PairedTTest: "pairedTTest",
    /**
     * pauleMandelMethod: Used for Paule-Mandel method of tau estimation, no additional elements needed
     */
    PauleMandelMethod: "pauleMandelMethod",
    /**
     * pearsonCorrelation: Used for Pearson correlation, no additional elements needed
     */
    PearsonCorrelation: "pearsonCorrelation",
    /**
     * petoMethod: Used for Peto method of meta-analysis, no additional elements needed
     */
    PetoMethod: "petoMethod",
    /**
     * poissonRegression: Used for Poisson Regression, no additional elements needed
     */
    PoissonRegression: "poissonRegression",
    /**
     * polynomialRegression: Used for Polynomial regression method of analysis, no additional elements needed
     */
    PolynomialRegression: "polynomialRegression",
    /**
     * poolGeneralizedLinearMixedModel: Generalized linear mixed model (GLMM) method for pooling in meta-analysis
     */
    GeneralizedLinearMixedModelGLMMPoolGeneralizedLinearMixedModel: "poolGeneralizedLinearMixedModel",
    /**
     * poolInverseVariance: Inverse variance method for pooling in meta-analysis
     */
    InverseVarianceMethodPoolInverseVariance: "poolInverseVariance",
    /**
     * poolMantelHaenzsel: Mantel-Haenszel method for pooling in meta-analysis
     */
    MantelHaenszelMethodPoolMantelHaenzsel: "poolMantelHaenzsel",
    /**
     * poolPeto: Peto method for pooling in meta-analysis
     */
    PetoMethodPoolPeto: "poolPeto",
    /**
     * restrictedLikelihood: Used for Restricted Maximum Likelihood method of tau estimation, no additional elements needed
     */
    RestrictedMaximumLikelihoodMethod: "restrictedLikelihood",
    /**
     * sidikJonkman: Used for Sidik-Jonkman method of tau estimation, no additional elements needed
     */
    SidikJonkmanMethod: "sidikJonkman",
    /**
     * signTest: Used for sign test, no additional elements needed
     */
    SignTest: "signTest",
    /**
     * spearmanCorrelation: Used for Spearman correlation, no additional elements needed
     */
    SpearmanCorrelation: "spearmanCorrelation",
    /**
     * tauDersimonianLaird: Dersimonian-Laird method for tau squared
     */
    DersimonianLairdMethodTauDersimonianLaird: "tauDersimonianLaird",
    /**
     * tauEmpiricalBayes: Empirical Bayes method for tau squared
     */
    EmpiricalBayesMethodTauEmpiricalBayes: "tauEmpiricalBayes",
    /**
     * tauHedges: Hedges method for tau squared
     */
    HedgesMethodTauHedges: "tauHedges",
    /**
     * tauHunterSchmidt: Hunter-Schmidt method for tau squared
     */
    HunterSchmidtMethodTauHunterSchmidt: "tauHunterSchmidt",
    /**
     * tauMaximumLikelihood: Maximum Likelihood method for tau squared
     */
    MaximumLikelihoodMethodTauMaximumLikelihood: "tauMaximumLikelihood",
    /**
     * tauPauleMandel: Paule-Mandel method for tau squared
     */
    PauleMandelMethodTauPauleMandel: "tauPauleMandel",
    /**
     * tauRestrictedMaximumLikelihood: Restricted Maximum Likelihood method for tau squared
     */
    RestrictedMaximumLikelihoodMethodTauRestrictedMaximumLikelihood: "tauRestrictedMaximumLikelihood",
    /**
     * tauSidikJonkman: Sidik-Jonkman method for tau squared
     */
    SidikJonkmanMethodTauSidikJonkman: "tauSidikJonkman",
    /**
     * twoSampleTTest: Used for 2-sample t-test, may be paired with "value" to express degrees of freedom
     */
    VAL2SampleTTest: "twoSampleTTest",
    /**
     * twoTailedTest: Used for two-tailed test (2 threshold), no additional elements needed
     */
    TwoTailedTest2Thresholds: "twoTailedTest",
    /**
     * wilcoxonRankSumTest: Used for Wilcoxon rank-sum test, no additional elements needed
     */
    WilcoxonRankSumTest: "wilcoxonRankSumTest",
    /**
     * wilcoxonSignedRankTest: Used for Wilcoxon signed-rank test, no additional elements needed
     */
    WilcoxonSignedRankTest: "wilcoxonSignedRankTest",
    /**
     * zeroCellConstant: Zero-cell adjustment done by adding a constant to all cells of affected studies, paired with "value" to define the constant
     */
    ZeroCellAdjustmentWithConstant: "zeroCellConstant",
    /**
     * zeroCellContinuityCorrection: Zero-cell adjustment done by treatment arm continuity correction, no additional elements needed
     */
    ZeroCellAdjustmentWithContinuityCorrection: "zeroCellContinuityCorrection",
    /**
     * zTest: Used for z-test, no additional elements needed
     */
    ZTest: "zTest",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGlzdGljTW9kZWxDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU3RhdGlzdGljTW9kZWxDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQzs7T0FFRztJQUNILGdCQUFnQixFQUFFLFVBQVU7SUFDNUI7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxPQUFPO0lBQ2hDOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7SUFDMUI7O09BRUc7SUFDSCxZQUFZLEVBQUUsZUFBZTtJQUM3Qjs7T0FFRztJQUNILDhCQUE4QixFQUFFLGFBQWE7SUFDN0M7O09BRUc7SUFDSCwyQkFBMkIsRUFBRSx3QkFBd0I7SUFDckQ7O09BRUc7SUFDSCxpQ0FBaUMsRUFBRSxnQ0FBZ0M7SUFDbkU7O09BRUc7SUFDSCxhQUFhLEVBQUUsZUFBZTtJQUM5Qjs7T0FFRztJQUNILDJCQUEyQixFQUFFLDBCQUEwQjtJQUN2RDs7T0FFRztJQUNILHFCQUFxQixFQUFFLG9CQUFvQjtJQUMzQzs7T0FFRztJQUNILHNCQUFzQixFQUFFLHdCQUF3QjtJQUNoRDs7T0FFRztJQUNILHNCQUFzQixFQUFFLHdCQUF3QjtJQUNoRDs7T0FFRztJQUNILFlBQVksRUFBRSxjQUFjO0lBQzVCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGVBQWU7SUFDOUI7O09BRUc7SUFDSCxvQkFBb0IsRUFBRSxnQkFBZ0I7SUFDdEM7O09BRUc7SUFDSCxxQkFBcUIsRUFBRSxrQkFBa0I7SUFDekM7O09BRUc7SUFDSCxZQUFZLEVBQUUsY0FBYztJQUM1Qjs7T0FFRztJQUNILHlCQUF5QixFQUFFLEtBQUs7SUFDaEM7O09BRUc7SUFDSCwyQkFBMkIsRUFBRSxxQkFBcUI7SUFDbEQ7O09BRUc7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Q2pHOztPQUVHO0lBQ0gsaUNBQWlDLEVBQUUsaUJBQWlCO0lBQ3BEOztPQUVHO0lBQ0gsZUFBZSxFQUFFLGdCQUFnQjtJQUNqQzs7T0FFRztJQUNILHdCQUF3QixFQUFFLGVBQWU7SUFDekM7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxxQkFBcUI7SUFDMUM7O09BRUc7SUFDSCxzQkFBc0IsRUFBRSx3QkFBd0I7SUFDaEQ7O09BRUc7SUFDSCw4QkFBOEIsRUFBRSxrQkFBa0I7SUFDbEQ7O09BRUc7SUFDSCwwQ0FBMEMsRUFBRSw4QkFBOEI7SUFDMUU7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3N0YXRpc3RpYy1tb2RlbC1jb2RlfDQuMy4wXHJcblxyXG4vKipcclxuICogVGhlIGhhbmRsaW5nIG9mIHRoZSB2YXJpYWJsZSBpbiBzdGF0aXN0aWNhbCBhbmFseXNpcyBmb3IgZXhwb3N1cmVzIG9yIG91dGNvbWVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFN0YXRpc3RpY01vZGVsQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYWRqdXN0ZWQ6IFVzZWQgZm9yIGFkanVzdGVkIGFuYWx5c2lzLCBwYWlyZWQgd2l0aCB2YXJpYWJsZSBlbGVtZW50KHMpXHJcbiAgICovXHJcbiAgQWRqdXN0ZWRBbmFseXNpczogXCJhZGp1c3RlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGFub3ZhOiBVc2VkIGZvciBBTk9WQSBtZXRob2Qgb2YgYW5hbHlzaXMsIG1heSBiZSBwYWlyZWQgd2l0aCBcInZhbHVlXCIgdG8gZXhwcmVzcyBkZWdyZWVzIG9mIGZyZWVkb21cclxuICAgKi9cclxuICBBTk9WQUFOYWx5c2lzT2ZWQXJpYW5jZTogXCJhbm92YVwiLFxyXG4gIC8qKlxyXG4gICAqIGFub3ZhT25lV2F5OiBVc2VkIGZvciBvbmUtd2F5IEFOT1ZBIG1ldGhvZCBvZiBhbmFseXNpcywgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIE9uZVdheUFOT1ZBOiBcImFub3ZhT25lV2F5XCIsXHJcbiAgLyoqXHJcbiAgICogYW5vdmFUaHJlZVdheTogVXNlZCBmb3IgMy13YXkgQU5PVkEgbWV0aG9kIG9mIGFuYWx5c2lzLCBtYXkgYmUgcGFpcmVkIHdpdGggXCJ2YWx1ZVwiIHRvIGV4cHJlc3MgZGVncmVlcyBvZiBmcmVlZG9tXHJcbiAgICovXHJcbiAgVkFMM1dheUFOT1ZBOiBcImFub3ZhVGhyZWVXYXlcIixcclxuICAvKipcclxuICAgKiBhbm92YVR3b1dheTogVXNlZCBmb3IgMi13YXkgQU5PVkEgd2l0aG91dCByZXBsaWNhdGlvbiBtZXRob2Qgb2YgYW5hbHlzaXMsIG1heSBiZSBwYWlyZWQgd2l0aCBcInZhbHVlXCIgdG8gZXhwcmVzcyBkZWdyZWVzIG9mIGZyZWVkb21cclxuICAgKi9cclxuICBWQUwyV2F5QU5PVkFXaXRob3V0UmVwbGljYXRpb246IFwiYW5vdmFUd29XYXlcIixcclxuICAvKipcclxuICAgKiBhbm92YVR3b1dheVJlcGxpY2F0aW9uOiBVc2VkIGZvciAyLXdheSBBTk9WQSB3aXRoIHJlcGxpY2F0aW9uIG1ldGhvZCBvZiBhbmFseXNpcywgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIFZBTDJXYXlBTk9WQVdpdGhSZXBsaWNhdGlvbjogXCJhbm92YVR3b1dheVJlcGxpY2F0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogYmlub21pYWxEaXN0cmlidXRpb25SZWdyZXNzaW9uOiBVc2VkIGZvciBCaW5vbWlhbCBEaXN0cmlidXRpb24gZm9yIFJlZ3Jlc3Npb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgQmlub21pYWxEaXN0cmlidXRpb25Gb3JSZWdyZXNzaW9uOiBcImJpbm9taWFsRGlzdHJpYnV0aW9uUmVncmVzc2lvblwiLFxyXG4gIC8qKlxyXG4gICAqIGNoaVNxdWFyZVRlc3Q6IFVzZWQgZm9yIENoaS1zcXVhcmUgdGVzdCwgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIENoaVNxdWFyZVRlc3Q6IFwiY2hpU3F1YXJlVGVzdFwiLFxyXG4gIC8qKlxyXG4gICAqIGNoaVNxdWFyZVRlc3RIb21vZ2VuZWl0eTogVXNlZCBmb3IgQ2hpLXNxdWFyZSB0ZXN0IGZvciBob21vZ2VuZWl0eSwgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIENoaVNxdWFyZVRlc3RGb3JIb21vZ2VuZWl0eTogXCJjaGlTcXVhcmVUZXN0SG9tb2dlbmVpdHlcIixcclxuICAvKipcclxuICAgKiBjaGlTcXVhcmVUZXN0VHJlbmQ6IFVzZWQgZm9yIENoaS1zcXVhcmUgdGVzdCBmb3IgdHJlbmQsIG1heSBiZSBwYWlyZWQgd2l0aCBcInZhbHVlXCIgdG8gZXhwcmVzcyBkZWdyZWVzIG9mIGZyZWVkb21cclxuICAgKi9cclxuICBDaGlTcXVhcmVUZXN0Rm9yVHJlbmQ6IFwiY2hpU3F1YXJlVGVzdFRyZW5kXCIsXHJcbiAgLyoqXHJcbiAgICogY294UHJvcG9ydGlvbmFsSGF6YXJkczogVXNlZCBmb3IgQ294IHByb3BvcnRpb25hbCBoYXphcmRzIG1ldGhvZCBvZiBhbmFseXNpcywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBDb3hQcm9wb3J0aW9uYWxIYXphcmRzOiBcImNveFByb3BvcnRpb25hbEhhemFyZHNcIixcclxuICAvKipcclxuICAgKiBkZXJzaW1vbmlhbkxhaXJkTWV0aG9kOiBVc2VkIGZvciBEZXJzaW1vbmlhbi1MYWlyZCBtZXRob2Qgb2YgdGF1IGVzdGltYXRpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgRGVyc2ltb25pYW5MYWlyZE1ldGhvZDogXCJkZXJzaW1vbmlhbkxhaXJkTWV0aG9kXCIsXHJcbiAgLyoqXHJcbiAgICogZWZmZWN0c0ZpeGVkOiBGcm9tIGEgZml4ZWQtZWZmZWN0cyBhbmFseXNpcywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBGaXhlZEVmZmVjdHM6IFwiZWZmZWN0c0ZpeGVkXCIsXHJcbiAgLyoqXHJcbiAgICogZWZmZWN0c1JhbmRvbTogRnJvbSBhIHJhbmRvbS1lZmZlY3RzIGFuYWx5c2lzLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIFJhbmRvbUVmZmVjdHM6IFwiZWZmZWN0c1JhbmRvbVwiLFxyXG4gIC8qKlxyXG4gICAqIGVtcGlyaWNhbEJheWVzOiBVc2VkIGZvciBFbXBpcmljYWwgQmF5ZXMgbWV0aG9kIG9mIHRhdSBlc3RpbWF0aW9uLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIEVtcGlyaWNhbEJheWVzTWV0aG9kOiBcImVtcGlyaWNhbEJheWVzXCIsXHJcbiAgLyoqXHJcbiAgICogZmlzaGVyc0V4YWN0VGVzdDogVXNlZCBmb3IgRmlzaGVyJ3MgZXhhY3QgdGVzdCwgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIEZpc2hlclF1b3RlU0V4YWN0VGVzdDogXCJmaXNoZXJzRXhhY3RUZXN0XCIsXHJcbiAgLyoqXHJcbiAgICogZnJpZWRtYW5UZXN0OiBVc2VkIGZvciBGcmllZG1hbiB0ZXN0LCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIEZyaWVkbWFuVGVzdDogXCJmcmllZG1hblRlc3RcIixcclxuICAvKipcclxuICAgKiBnbG06IFVzZWQgZm9yIEdMTSAoR2VuZXJhbGl6ZWQgTGluZWFyIE1vZGVsKSwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHTE1HZW5lcmFsaXplZExpbmVhck1vZGVsOiBcImdsbVwiLFxyXG4gIC8qKlxyXG4gICAqIGdsbUdlbmVyYWxpemVkTG9naXQ6IFVzZWQgZm9yIEdMTSB3aXRoIGdlbmVyYWxpemVkIGxvZ2l0IGxpbmssIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgR0xNV2l0aEdlbmVyYWxpemVkTG9naXRMaW5rOiBcImdsbUdlbmVyYWxpemVkTG9naXRcIixcclxuICAvKipcclxuICAgKiBnbG1JZGVudGl0eTogVXNlZCBmb3IgR0xNIHdpdGggaWRlbnRpdHkgbGluaywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHTE1XaXRoSWRlbnRpdHlMaW5rOiBcImdsbUlkZW50aXR5XCIsXHJcbiAgLyoqXHJcbiAgICogZ2xtTG9nOiBVc2VkIGZvciBHTE0gd2l0aCBsb2cgbGluaywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHTE1XaXRoTG9nTGluazogXCJnbG1Mb2dcIixcclxuICAvKipcclxuICAgKiBnbG1Mb2dpdDogVXNlZCBmb3IgR0xNIHdpdGggbG9naXQgbGluaywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHTE1XaXRoTG9naXRMaW5rOiBcImdsbUxvZ2l0XCIsXHJcbiAgLyoqXHJcbiAgICogZ2xtbTogVXNlZCBmb3IgR2VuZXJhbGl6ZWQgbGluZWFyIG1peGVkIG1vZGVsIChHTE1NKSwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHZW5lcmFsaXplZExpbmVhck1peGVkTW9kZWxHTE1NOiBcImdsbW1cIixcclxuICAvKipcclxuICAgKiBnbG1tR2VuZXJhbGl6ZWRMb2dpdDogVXNlZCBmb3IgR0xNTSB3aXRoIGdlbmVyYWxpemVkIGxvZ2l0IGxpbmssIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgR0xNTVdpdGhHZW5lcmFsaXplZExvZ2l0TGluazogXCJnbG1tR2VuZXJhbGl6ZWRMb2dpdFwiLFxyXG4gIC8qKlxyXG4gICAqIGdsbW1JZGVudGl0eTogVXNlZCBmb3IgR0xNTSB3aXRoIGlkZW50aXR5IGxpbmssIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgR0xNTVdpdGhJZGVudGl0eUxpbms6IFwiZ2xtbUlkZW50aXR5XCIsXHJcbiAgLyoqXHJcbiAgICogZ2xtbUxvZzogVXNlZCBmb3IgR0xNTSB3aXRoIGxvZyBsaW5rLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIEdMTU1XaXRoTG9nTGluazogXCJnbG1tTG9nXCIsXHJcbiAgLyoqXHJcbiAgICogZ2xtbUxvZ2l0OiBVc2VkIGZvciBHTE1NIHdpdGggbG9naXQgbGluaywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHTE1NV2l0aExvZ2l0TGluazogXCJnbG1tTG9naXRcIixcclxuICAvKipcclxuICAgKiBnbG1tUHJvYml0OiBVc2VkIGZvciBHTE1NIHdpdGggcHJvYml0IGxpbmssIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgR0xNTVdpdGhQcm9iaXRMaW5rOiBcImdsbW1Qcm9iaXRcIixcclxuICAvKipcclxuICAgKiBnbG1Qcm9iaXQ6IFVzZWQgZm9yIEdMTSB3aXRoIHByb2JpdCBsaW5rLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIEdMTVdpdGhQcm9iaXRMaW5rOiBcImdsbVByb2JpdFwiLFxyXG4gIC8qKlxyXG4gICAqIGdvb2RtYW5LcnVza2FzR2FtbWE6IFVzZWQgZm9yIEdvb2RtYW4gS3J1c2th4oCZcyBHYW1tYSwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBHb29kbWFuS3J1c2thUXVvdGVTR2FtbWE6IFwiZ29vZG1hbktydXNrYXNHYW1tYVwiLFxyXG4gIC8qKlxyXG4gICAqIGhhcnR1bmdLbmFwcDogSGFydHVuZy1LbmFwcC9IYXJ0dW5nLUtuYXBwLVNpZGlrLUpvbmttYW4gYWRqdXN0bWVudCB1c2VkIGluIG1ldGEtYW5hbHlzaXMsIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgSGFydHVuZ0tuYXBwQWRqdXN0bWVudDogXCJoYXJ0dW5nS25hcHBcIixcclxuICAvKipcclxuICAgKiBoZWRnZXNNZXRob2Q6IFVzZWQgZm9yIEhlZGdlcyBtZXRob2Qgb2YgdGF1IGVzdGltYXRpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgSGVkZ2VzTWV0aG9kOiBcImhlZGdlc01ldGhvZFwiLFxyXG4gIC8qKlxyXG4gICAqIGh1bnRlclNjaG1pZHQ6IFVzZWQgZm9yIEh1bnRlci1TY2htaWR0IG1ldGhvZCBvZiB0YXUgZXN0aW1hdGlvbiwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBIdW50ZXJTY2htaWR0TWV0aG9kOiBcImh1bnRlclNjaG1pZHRcIixcclxuICAvKipcclxuICAgKiBpbnRlcmFjdGlvblRlcm06IFVzZWQgZm9yIGludGVyYWN0aW9uIHRlcm0sIHBhaXJlZCB3aXRoIFwidmFsdWVcIiBhbmQgdHdvIG9yIG1vcmUgdmFyaWFibGUgZWxlbWVudHNcclxuICAgKi9cclxuICBJbnRlcmFjdGlvblRlcm06IFwiaW50ZXJhY3Rpb25UZXJtXCIsXHJcbiAgLyoqXHJcbiAgICogaW52ZXJzZVZhcmlhbmNlOiBVc2VkIGZvciBpbnZlcnNlIHZhcmlhbmNlIG1ldGhvZCBvZiBtZXRhLWFuYWx5c2lzLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIEludmVyc2VWYXJpYW5jZU1ldGhvZDogXCJpbnZlcnNlVmFyaWFuY2VcIixcclxuICAvKipcclxuICAgKiBrZW5kYWxsQ29ycmVsYXRpb246IFVzZWQgZm9yIEtlbmRhbGwgY29ycmVsYXRpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgS2VuZGFsbENvcnJlbGF0aW9uOiBcImtlbmRhbGxDb3JyZWxhdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIGtydXNrYWxXYWxsaXNUZXN0OiBVc2VkIGZvciBLcnVza2FsIFdhbGxpcyB0ZXN0LCBtYXkgYmUgcGFpcmVkIHdpdGggXCJ2YWx1ZVwiIHRvIGV4cHJlc3MgZGVncmVlcyBvZiBmcmVlZG9tXHJcbiAgICovXHJcbiAgS3J1c2thbFdhbGxpc1Rlc3Q6IFwia3J1c2thbFdhbGxpc1Rlc3RcIixcclxuICAvKipcclxuICAgKiBsaW5lYXJSZWdyZXNzaW9uOiBVc2VkIGZvciBsaW5lYXIgcmVncmVzc2lvbiBtZXRob2Qgb2YgYW5hbHlzaXMsIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgTGluZWFyUmVncmVzc2lvbjogXCJsaW5lYXJSZWdyZXNzaW9uXCIsXHJcbiAgLyoqXHJcbiAgICogbG9naXN0aWNSZWdyZXNzaW9uOiBVc2VkIGZvciBsb2dpc3RpYyByZWdyZXNzaW9uIG1ldGhvZCBvZiBhbmFseXNpcywgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBMb2dpc3RpY1JlZ3Jlc3Npb246IFwibG9naXN0aWNSZWdyZXNzaW9uXCIsXHJcbiAgLyoqXHJcbiAgICogbWFubldoaXRuZXlVVGVzdDogVXNlZCBmb3IgTWFubi1XaGl0bmV5IFUgdGVzdCwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBNYW5uV2hpdG5leVVUZXN0OiBcIm1hbm5XaGl0bmV5VVRlc3RcIixcclxuICAvKipcclxuICAgKiBtYW5vdmE6IFVzZWQgZm9yIG11bHRpdmFyaWF0ZSBBTk9WQSAoTUFOT1ZBKSBtZXRob2Qgb2YgYW5hbHlzaXMsIG1heSBiZSBwYWlyZWQgd2l0aCBcInZhbHVlXCIgdG8gZXhwcmVzcyBkZWdyZWVzIG9mIGZyZWVkb21cclxuICAgKi9cclxuICBNdWx0aXZhcmlhdGVBTk9WQU1BTk9WQTogXCJtYW5vdmFcIixcclxuICAvKipcclxuICAgKiBtYW50ZUhhZW5zemVsTWV0aG9kOiBVc2VkIGZvciBNYW50ZWwtSGFlbnN6ZWwgbWV0aG9kLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIE1hbnRlbEhhZW5zemVsTWV0aG9kOiBcIm1hbnRlSGFlbnN6ZWxNZXRob2RcIixcclxuICAvKipcclxuICAgKiBtYXhpbXVtTGlrZWxpaG9vZDogVXNlZCBmb3IgTWF4aW11bSBMaWtlbGlob29kIG1ldGhvZCBvZiB0YXUgZXN0aW1hdGlvbiwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBNYXhpbXVtTGlrZWxpaG9vZE1ldGhvZDogXCJtYXhpbXVtTGlrZWxpaG9vZFwiLFxyXG4gIC8qKlxyXG4gICAqIG1jbmVtYXJzVGVzdDogVXNlZCBmb3IgTWNOZW1hcidzIHRlc3QsIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgTWNOZW1hclF1b3RlU1Rlc3Q6IFwibWNuZW1hcnNUZXN0XCIsXHJcbiAgLyoqXHJcbiAgICogbWV0YUFuYWx5c2lzOiBVc2VkIGZvciBtZXRhLWFuYWx5c2lzLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIE1ldGFBbmFseXNpczogXCJtZXRhQW5hbHlzaXNcIixcclxuICAvKipcclxuICAgKiBtb2RpZmllZEhhcnR1bmdLbmFwcDogTW9kaWZpZWQgSGFydHVuZy1LbmFwcC9IYXJ0dW5nLUtuYXBwLVNpZGlrLUpvbmttYW4gYWRqdXN0bWVudCB1c2VkIGluIG1ldGEtYW5hbHlzaXMsIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgTW9kaWZpZWRIYXJ0dW5nS25hcHBBZGp1c3RtZW50OiBcIm1vZGlmaWVkSGFydHVuZ0tuYXBwXCIsXHJcbiAgLyoqXHJcbiAgICogbXVsdGlub21pYWxEaXN0cmlidXRpb25SZWdyZXNzaW9uOiBVc2VkIGZvciBNdWx0aW5vbWlhbCBEaXN0cmlidXRpb24gZm9yIFJlZ3Jlc3Npb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgTXVsdGlub21pYWxEaXN0cmlidXRpb25Gb3JSZWdyZXNzaW9uOiBcIm11bHRpbm9taWFsRGlzdHJpYnV0aW9uUmVncmVzc2lvblwiLFxyXG4gIC8qKlxyXG4gICAqIG5lZ2F0aXZlQmlub21pYWxSZWdyZXNzaW9uOiBVc2VkIGZvciBOZWdhdGl2ZSBCaW5vbWlhbCBSZWdyZXNzaW9uLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIE5lZ2F0aXZlQmlub21pYWxSZWdyZXNzaW9uOiBcIm5lZ2F0aXZlQmlub21pYWxSZWdyZXNzaW9uXCIsXHJcbiAgLyoqXHJcbiAgICogb25lU2FtcGxlVFRlc3Q6IFVzZWQgZm9yIDEtc2FtcGxlIHQtdGVzdCwgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIFZBTDFTYW1wbGVUVGVzdDogXCJvbmVTYW1wbGVUVGVzdFwiLFxyXG4gIC8qKlxyXG4gICAqIG9uZVRhaWxlZFRlc3Q6IFVzZWQgZm9yIG9uZS10YWlsZWQgdGVzdCAoMSB0aHJlc2hvbGQpLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIE9uZVRhaWxlZFRlc3QxVGhyZXNob2xkOiBcIm9uZVRhaWxlZFRlc3RcIixcclxuICAvKipcclxuICAgKiBwYWlyZWRUVGVzdDogVXNlZCBmb3IgcGFpcmVkIHQtdGVzdCwgbWF5IGJlIHBhaXJlZCB3aXRoIFwidmFsdWVcIiB0byBleHByZXNzIGRlZ3JlZXMgb2YgZnJlZWRvbVxyXG4gICAqL1xyXG4gIFBhaXJlZFRUZXN0OiBcInBhaXJlZFRUZXN0XCIsXHJcbiAgLyoqXHJcbiAgICogcGF1bGVNYW5kZWxNZXRob2Q6IFVzZWQgZm9yIFBhdWxlLU1hbmRlbCBtZXRob2Qgb2YgdGF1IGVzdGltYXRpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgUGF1bGVNYW5kZWxNZXRob2Q6IFwicGF1bGVNYW5kZWxNZXRob2RcIixcclxuICAvKipcclxuICAgKiBwZWFyc29uQ29ycmVsYXRpb246IFVzZWQgZm9yIFBlYXJzb24gY29ycmVsYXRpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgUGVhcnNvbkNvcnJlbGF0aW9uOiBcInBlYXJzb25Db3JyZWxhdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIHBldG9NZXRob2Q6IFVzZWQgZm9yIFBldG8gbWV0aG9kIG9mIG1ldGEtYW5hbHlzaXMsIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgUGV0b01ldGhvZDogXCJwZXRvTWV0aG9kXCIsXHJcbiAgLyoqXHJcbiAgICogcG9pc3NvblJlZ3Jlc3Npb246IFVzZWQgZm9yIFBvaXNzb24gUmVncmVzc2lvbiwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBQb2lzc29uUmVncmVzc2lvbjogXCJwb2lzc29uUmVncmVzc2lvblwiLFxyXG4gIC8qKlxyXG4gICAqIHBvbHlub21pYWxSZWdyZXNzaW9uOiBVc2VkIGZvciBQb2x5bm9taWFsIHJlZ3Jlc3Npb24gbWV0aG9kIG9mIGFuYWx5c2lzLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIFBvbHlub21pYWxSZWdyZXNzaW9uOiBcInBvbHlub21pYWxSZWdyZXNzaW9uXCIsXHJcbiAgLyoqXHJcbiAgICogcG9vbEdlbmVyYWxpemVkTGluZWFyTWl4ZWRNb2RlbDogR2VuZXJhbGl6ZWQgbGluZWFyIG1peGVkIG1vZGVsIChHTE1NKSBtZXRob2QgZm9yIHBvb2xpbmcgaW4gbWV0YS1hbmFseXNpc1xyXG4gICAqL1xyXG4gIEdlbmVyYWxpemVkTGluZWFyTWl4ZWRNb2RlbEdMTU1Qb29sR2VuZXJhbGl6ZWRMaW5lYXJNaXhlZE1vZGVsOiBcInBvb2xHZW5lcmFsaXplZExpbmVhck1peGVkTW9kZWxcIixcclxuICAvKipcclxuICAgKiBwb29sSW52ZXJzZVZhcmlhbmNlOiBJbnZlcnNlIHZhcmlhbmNlIG1ldGhvZCBmb3IgcG9vbGluZyBpbiBtZXRhLWFuYWx5c2lzXHJcbiAgICovXHJcbiAgSW52ZXJzZVZhcmlhbmNlTWV0aG9kUG9vbEludmVyc2VWYXJpYW5jZTogXCJwb29sSW52ZXJzZVZhcmlhbmNlXCIsXHJcbiAgLyoqXHJcbiAgICogcG9vbE1hbnRlbEhhZW56c2VsOiBNYW50ZWwtSGFlbnN6ZWwgbWV0aG9kIGZvciBwb29saW5nIGluIG1ldGEtYW5hbHlzaXNcclxuICAgKi9cclxuICBNYW50ZWxIYWVuc3plbE1ldGhvZFBvb2xNYW50ZWxIYWVuenNlbDogXCJwb29sTWFudGVsSGFlbnpzZWxcIixcclxuICAvKipcclxuICAgKiBwb29sUGV0bzogUGV0byBtZXRob2QgZm9yIHBvb2xpbmcgaW4gbWV0YS1hbmFseXNpc1xyXG4gICAqL1xyXG4gIFBldG9NZXRob2RQb29sUGV0bzogXCJwb29sUGV0b1wiLFxyXG4gIC8qKlxyXG4gICAqIHJlc3RyaWN0ZWRMaWtlbGlob29kOiBVc2VkIGZvciBSZXN0cmljdGVkIE1heGltdW0gTGlrZWxpaG9vZCBtZXRob2Qgb2YgdGF1IGVzdGltYXRpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgUmVzdHJpY3RlZE1heGltdW1MaWtlbGlob29kTWV0aG9kOiBcInJlc3RyaWN0ZWRMaWtlbGlob29kXCIsXHJcbiAgLyoqXHJcbiAgICogc2lkaWtKb25rbWFuOiBVc2VkIGZvciBTaWRpay1Kb25rbWFuIG1ldGhvZCBvZiB0YXUgZXN0aW1hdGlvbiwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBTaWRpa0pvbmttYW5NZXRob2Q6IFwic2lkaWtKb25rbWFuXCIsXHJcbiAgLyoqXHJcbiAgICogc2lnblRlc3Q6IFVzZWQgZm9yIHNpZ24gdGVzdCwgbm8gYWRkaXRpb25hbCBlbGVtZW50cyBuZWVkZWRcclxuICAgKi9cclxuICBTaWduVGVzdDogXCJzaWduVGVzdFwiLFxyXG4gIC8qKlxyXG4gICAqIHNwZWFybWFuQ29ycmVsYXRpb246IFVzZWQgZm9yIFNwZWFybWFuIGNvcnJlbGF0aW9uLCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIFNwZWFybWFuQ29ycmVsYXRpb246IFwic3BlYXJtYW5Db3JyZWxhdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIHRhdURlcnNpbW9uaWFuTGFpcmQ6IERlcnNpbW9uaWFuLUxhaXJkIG1ldGhvZCBmb3IgdGF1IHNxdWFyZWRcclxuICAgKi9cclxuICBEZXJzaW1vbmlhbkxhaXJkTWV0aG9kVGF1RGVyc2ltb25pYW5MYWlyZDogXCJ0YXVEZXJzaW1vbmlhbkxhaXJkXCIsXHJcbiAgLyoqXHJcbiAgICogdGF1RW1waXJpY2FsQmF5ZXM6IEVtcGlyaWNhbCBCYXllcyBtZXRob2QgZm9yIHRhdSBzcXVhcmVkXHJcbiAgICovXHJcbiAgRW1waXJpY2FsQmF5ZXNNZXRob2RUYXVFbXBpcmljYWxCYXllczogXCJ0YXVFbXBpcmljYWxCYXllc1wiLFxyXG4gIC8qKlxyXG4gICAqIHRhdUhlZGdlczogSGVkZ2VzIG1ldGhvZCBmb3IgdGF1IHNxdWFyZWRcclxuICAgKi9cclxuICBIZWRnZXNNZXRob2RUYXVIZWRnZXM6IFwidGF1SGVkZ2VzXCIsXHJcbiAgLyoqXHJcbiAgICogdGF1SHVudGVyU2NobWlkdDogSHVudGVyLVNjaG1pZHQgbWV0aG9kIGZvciB0YXUgc3F1YXJlZFxyXG4gICAqL1xyXG4gIEh1bnRlclNjaG1pZHRNZXRob2RUYXVIdW50ZXJTY2htaWR0OiBcInRhdUh1bnRlclNjaG1pZHRcIixcclxuICAvKipcclxuICAgKiB0YXVNYXhpbXVtTGlrZWxpaG9vZDogTWF4aW11bSBMaWtlbGlob29kIG1ldGhvZCBmb3IgdGF1IHNxdWFyZWRcclxuICAgKi9cclxuICBNYXhpbXVtTGlrZWxpaG9vZE1ldGhvZFRhdU1heGltdW1MaWtlbGlob29kOiBcInRhdU1heGltdW1MaWtlbGlob29kXCIsXHJcbiAgLyoqXHJcbiAgICogdGF1UGF1bGVNYW5kZWw6IFBhdWxlLU1hbmRlbCBtZXRob2QgZm9yIHRhdSBzcXVhcmVkXHJcbiAgICovXHJcbiAgUGF1bGVNYW5kZWxNZXRob2RUYXVQYXVsZU1hbmRlbDogXCJ0YXVQYXVsZU1hbmRlbFwiLFxyXG4gIC8qKlxyXG4gICAqIHRhdVJlc3RyaWN0ZWRNYXhpbXVtTGlrZWxpaG9vZDogUmVzdHJpY3RlZCBNYXhpbXVtIExpa2VsaWhvb2QgbWV0aG9kIGZvciB0YXUgc3F1YXJlZFxyXG4gICAqL1xyXG4gIFJlc3RyaWN0ZWRNYXhpbXVtTGlrZWxpaG9vZE1ldGhvZFRhdVJlc3RyaWN0ZWRNYXhpbXVtTGlrZWxpaG9vZDogXCJ0YXVSZXN0cmljdGVkTWF4aW11bUxpa2VsaWhvb2RcIixcclxuICAvKipcclxuICAgKiB0YXVTaWRpa0pvbmttYW46IFNpZGlrLUpvbmttYW4gbWV0aG9kIGZvciB0YXUgc3F1YXJlZFxyXG4gICAqL1xyXG4gIFNpZGlrSm9ua21hbk1ldGhvZFRhdVNpZGlrSm9ua21hbjogXCJ0YXVTaWRpa0pvbmttYW5cIixcclxuICAvKipcclxuICAgKiB0d29TYW1wbGVUVGVzdDogVXNlZCBmb3IgMi1zYW1wbGUgdC10ZXN0LCBtYXkgYmUgcGFpcmVkIHdpdGggXCJ2YWx1ZVwiIHRvIGV4cHJlc3MgZGVncmVlcyBvZiBmcmVlZG9tXHJcbiAgICovXHJcbiAgVkFMMlNhbXBsZVRUZXN0OiBcInR3b1NhbXBsZVRUZXN0XCIsXHJcbiAgLyoqXHJcbiAgICogdHdvVGFpbGVkVGVzdDogVXNlZCBmb3IgdHdvLXRhaWxlZCB0ZXN0ICgyIHRocmVzaG9sZCksIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgVHdvVGFpbGVkVGVzdDJUaHJlc2hvbGRzOiBcInR3b1RhaWxlZFRlc3RcIixcclxuICAvKipcclxuICAgKiB3aWxjb3hvblJhbmtTdW1UZXN0OiBVc2VkIGZvciBXaWxjb3hvbiByYW5rLXN1bSB0ZXN0LCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIFdpbGNveG9uUmFua1N1bVRlc3Q6IFwid2lsY294b25SYW5rU3VtVGVzdFwiLFxyXG4gIC8qKlxyXG4gICAqIHdpbGNveG9uU2lnbmVkUmFua1Rlc3Q6IFVzZWQgZm9yIFdpbGNveG9uIHNpZ25lZC1yYW5rIHRlc3QsIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgV2lsY294b25TaWduZWRSYW5rVGVzdDogXCJ3aWxjb3hvblNpZ25lZFJhbmtUZXN0XCIsXHJcbiAgLyoqXHJcbiAgICogemVyb0NlbGxDb25zdGFudDogWmVyby1jZWxsIGFkanVzdG1lbnQgZG9uZSBieSBhZGRpbmcgYSBjb25zdGFudCB0byBhbGwgY2VsbHMgb2YgYWZmZWN0ZWQgc3R1ZGllcywgcGFpcmVkIHdpdGggXCJ2YWx1ZVwiIHRvIGRlZmluZSB0aGUgY29uc3RhbnRcclxuICAgKi9cclxuICBaZXJvQ2VsbEFkanVzdG1lbnRXaXRoQ29uc3RhbnQ6IFwiemVyb0NlbGxDb25zdGFudFwiLFxyXG4gIC8qKlxyXG4gICAqIHplcm9DZWxsQ29udGludWl0eUNvcnJlY3Rpb246IFplcm8tY2VsbCBhZGp1c3RtZW50IGRvbmUgYnkgdHJlYXRtZW50IGFybSBjb250aW51aXR5IGNvcnJlY3Rpb24sIG5vIGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkXHJcbiAgICovXHJcbiAgWmVyb0NlbGxBZGp1c3RtZW50V2l0aENvbnRpbnVpdHlDb3JyZWN0aW9uOiBcInplcm9DZWxsQ29udGludWl0eUNvcnJlY3Rpb25cIixcclxuICAvKipcclxuICAgKiB6VGVzdDogVXNlZCBmb3Igei10ZXN0LCBubyBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZFxyXG4gICAqL1xyXG4gIFpUZXN0OiBcInpUZXN0XCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIGhhbmRsaW5nIG9mIHRoZSB2YXJpYWJsZSBpbiBzdGF0aXN0aWNhbCBhbmFseXNpcyBmb3IgZXhwb3N1cmVzIG9yIG91dGNvbWVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3RhdGlzdGljTW9kZWxDb2RlVHlwZSA9IHR5cGVvZiBTdGF0aXN0aWNNb2RlbENvZGVzW2tleW9mIHR5cGVvZiBTdGF0aXN0aWNNb2RlbENvZGVzXTtcclxuIl19