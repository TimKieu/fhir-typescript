// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-status|4.3.0
/**
 * Current state of the encounter.
 */
export const EncounterStatusCodings = {
    /**
     * arrived: The Patient is present for the encounter, however is not currently meeting with a practitioner.
     */
    Arrived: {
        display: "Arrived",
        code: "arrived",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * cancelled: The Encounter has ended before it has begun.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * entered-in-error: This instance should not have been part of this patient's medical record.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * finished: The Encounter has ended.
     */
    Finished: {
        display: "Finished",
        code: "finished",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * in-progress: The Encounter has begun and the patient is present / the practitioner and the patient are meeting.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * onleave: The Encounter has begun, but the patient is temporarily on leave.
     */
    OnLeave: {
        display: "On Leave",
        code: "onleave",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * planned: The Encounter has not yet started.
     */
    Planned: {
        display: "Planned",
        code: "planned",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * triaged: The patient has been assessed for the priority of their treatment based on the severity of their condition.
     */
    Triaged: {
        display: "Triaged",
        code: "triaged",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * unknown: The encounter status is unknown. Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown".
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/encounter-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW5jb3VudGVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxxRUFBcUU7QUE4Q3JFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxzQ0FBc0M7S0FDL0M7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZW5jb3VudGVyLXN0YXR1c3w0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEN1cnJlbnQgc3RhdGUgb2YgdGhlIGVuY291bnRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEVuY291bnRlclN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXJyaXZlZDogVGhlIFBhdGllbnQgaXMgcHJlc2VudCBmb3IgdGhlIGVuY291bnRlciwgaG93ZXZlciBpcyBub3QgY3VycmVudGx5IG1lZXRpbmcgd2l0aCBhIHByYWN0aXRpb25lci5cclxuICAgKi9cclxuICBBcnJpdmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIEVuY291bnRlciBoYXMgZW5kZWQgYmVmb3JlIGl0IGhhcyBiZWd1bi5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBpbnN0YW5jZSBzaG91bGQgbm90IGhhdmUgYmVlbiBwYXJ0IG9mIHRoaXMgcGF0aWVudCdzIG1lZGljYWwgcmVjb3JkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZpbmlzaGVkOiBUaGUgRW5jb3VudGVyIGhhcyBlbmRlZC5cclxuICAgKi9cclxuICBGaW5pc2hlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIEVuY291bnRlciBoYXMgYmVndW4gYW5kIHRoZSBwYXRpZW50IGlzIHByZXNlbnQgLyB0aGUgcHJhY3RpdGlvbmVyIGFuZCB0aGUgcGF0aWVudCBhcmUgbWVldGluZy5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9ubGVhdmU6IFRoZSBFbmNvdW50ZXIgaGFzIGJlZ3VuLCBidXQgdGhlIHBhdGllbnQgaXMgdGVtcG9yYXJpbHkgb24gbGVhdmUuXHJcbiAgICovXHJcbiAgT25MZWF2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwbGFubmVkOiBUaGUgRW5jb3VudGVyIGhhcyBub3QgeWV0IHN0YXJ0ZWQuXHJcbiAgICovXHJcbiAgUGxhbm5lZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0cmlhZ2VkOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBhc3Nlc3NlZCBmb3IgdGhlIHByaW9yaXR5IG9mIHRoZWlyIHRyZWF0bWVudCBiYXNlZCBvbiB0aGUgc2V2ZXJpdHkgb2YgdGhlaXIgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIFRyaWFnZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGVuY291bnRlciBzdGF0dXMgaXMgdW5rbm93bi4gTm90ZSB0aGF0IFwidW5rbm93blwiIGlzIGEgdmFsdWUgb2YgbGFzdCByZXNvcnQgYW5kIGV2ZXJ5IGF0dGVtcHQgc2hvdWxkIGJlIG1hZGUgdG8gcHJvdmlkZSBhIG1lYW5pbmdmdWwgdmFsdWUgb3RoZXIgdGhhbiBcInVua25vd25cIi5cclxuICAgKi9cclxuICBVbmtub3duOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ3VycmVudCBzdGF0ZSBvZiB0aGUgZW5jb3VudGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVuY291bnRlclN0YXR1c0NvZGluZ3M6RW5jb3VudGVyU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcnJpdmVkOiBUaGUgUGF0aWVudCBpcyBwcmVzZW50IGZvciB0aGUgZW5jb3VudGVyLCBob3dldmVyIGlzIG5vdCBjdXJyZW50bHkgbWVldGluZyB3aXRoIGEgcHJhY3RpdGlvbmVyLlxyXG4gICAqL1xyXG4gIEFycml2ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQXJyaXZlZFwiLFxyXG4gICAgY29kZTogXCJhcnJpdmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIGVuZGVkIGJlZm9yZSBpdCBoYXMgYmVndW4uXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhbmNlbGxlZFwiLFxyXG4gICAgY29kZTogXCJjYW5jZWxsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgaW5zdGFuY2Ugc2hvdWxkIG5vdCBoYXZlIGJlZW4gcGFydCBvZiB0aGlzIHBhdGllbnQncyBtZWRpY2FsIHJlY29yZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZpbmlzaGVkOiBUaGUgRW5jb3VudGVyIGhhcyBlbmRlZC5cclxuICAgKi9cclxuICBGaW5pc2hlZDoge1xyXG4gICAgZGlzcGxheTogXCJGaW5pc2hlZFwiLFxyXG4gICAgY29kZTogXCJmaW5pc2hlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW4tcHJvZ3Jlc3M6IFRoZSBFbmNvdW50ZXIgaGFzIGJlZ3VuIGFuZCB0aGUgcGF0aWVudCBpcyBwcmVzZW50IC8gdGhlIHByYWN0aXRpb25lciBhbmQgdGhlIHBhdGllbnQgYXJlIG1lZXRpbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb25sZWF2ZTogVGhlIEVuY291bnRlciBoYXMgYmVndW4sIGJ1dCB0aGUgcGF0aWVudCBpcyB0ZW1wb3JhcmlseSBvbiBsZWF2ZS5cclxuICAgKi9cclxuICBPbkxlYXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9uIExlYXZlXCIsXHJcbiAgICBjb2RlOiBcIm9ubGVhdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBsYW5uZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIG5vdCB5ZXQgc3RhcnRlZC5cclxuICAgKi9cclxuICBQbGFubmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5uZWRcIixcclxuICAgIGNvZGU6IFwicGxhbm5lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdHJpYWdlZDogVGhlIHBhdGllbnQgaGFzIGJlZW4gYXNzZXNzZWQgZm9yIHRoZSBwcmlvcml0eSBvZiB0aGVpciB0cmVhdG1lbnQgYmFzZWQgb24gdGhlIHNldmVyaXR5IG9mIHRoZWlyIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBUcmlhZ2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRyaWFnZWRcIixcclxuICAgIGNvZGU6IFwidHJpYWdlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGVuY291bnRlciBzdGF0dXMgaXMgdW5rbm93bi4gTm90ZSB0aGF0IFwidW5rbm93blwiIGlzIGEgdmFsdWUgb2YgbGFzdCByZXNvcnQgYW5kIGV2ZXJ5IGF0dGVtcHQgc2hvdWxkIGJlIG1hZGUgdG8gcHJvdmlkZSBhIG1lYW5pbmdmdWwgdmFsdWUgb3RoZXIgdGhhbiBcInVua25vd25cIi5cclxuICAgKi9cclxuICBVbmtub3duOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==