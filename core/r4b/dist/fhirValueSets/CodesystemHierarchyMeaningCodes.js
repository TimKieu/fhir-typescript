// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/codesystem-hierarchy-meaning|4.3.0
/**
 * The meaning of the hierarchy of concepts in a code system.
 */
export const CodesystemHierarchyMeaningCodes = {
    /**
     * classified-with: Child concepts in the hierarchy may have only one parent, and there is a presumption that the code system is a "closed world" meaning all things must be in the hierarchy. This results in concepts such as "not otherwise classified.".
     */
    ClassifiedWith: "classified-with",
    /**
     * grouped-by: No particular relationship between the concepts can be assumed, except what can be determined by inspection of the definitions of the elements (possible reasons to use this: importing from a source where this is not defined, or where various parts of the hierarchy have different meanings).
     */
    GroupedBy: "grouped-by",
    /**
     * is-a: A hierarchy where the child concepts have an IS-A relationship with the parents - that is, all the properties of the parent are also true for its child concepts. Not that is-a is a property of the concepts, so additional subsumption relationships may be defined using properties or the [subsumes](extension-codesystem-subsumes.html) extension.
     */
    IsA: "is-a",
    /**
     * part-of: Child elements list the individual parts of a composite whole (e.g. body site).
     */
    PartOf: "part-of",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxpRkFBaUY7QUFFakY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRztJQUM3Qzs7T0FFRztJQUNILGNBQWMsRUFBRSxpQkFBaUI7SUFDakM7O09BRUc7SUFDSCxTQUFTLEVBQUUsWUFBWTtJQUN2Qjs7T0FFRztJQUNILEdBQUcsRUFBRSxNQUFNO0lBQ1g7O09BRUc7SUFDSCxNQUFNLEVBQUUsU0FBUztDQUNULENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvZGVzeXN0ZW0taGllcmFyY2h5LW1lYW5pbmd8NC4zLjBcclxuXHJcbi8qKlxyXG4gKiBUaGUgbWVhbmluZyBvZiB0aGUgaGllcmFyY2h5IG9mIGNvbmNlcHRzIGluIGEgY29kZSBzeXN0ZW0uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBjbGFzc2lmaWVkLXdpdGg6IENoaWxkIGNvbmNlcHRzIGluIHRoZSBoaWVyYXJjaHkgbWF5IGhhdmUgb25seSBvbmUgcGFyZW50LCBhbmQgdGhlcmUgaXMgYSBwcmVzdW1wdGlvbiB0aGF0IHRoZSBjb2RlIHN5c3RlbSBpcyBhIFwiY2xvc2VkIHdvcmxkXCIgbWVhbmluZyBhbGwgdGhpbmdzIG11c3QgYmUgaW4gdGhlIGhpZXJhcmNoeS4gVGhpcyByZXN1bHRzIGluIGNvbmNlcHRzIHN1Y2ggYXMgXCJub3Qgb3RoZXJ3aXNlIGNsYXNzaWZpZWQuXCIuXHJcbiAgICovXHJcbiAgQ2xhc3NpZmllZFdpdGg6IFwiY2xhc3NpZmllZC13aXRoXCIsXHJcbiAgLyoqXHJcbiAgICogZ3JvdXBlZC1ieTogTm8gcGFydGljdWxhciByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgY29uY2VwdHMgY2FuIGJlIGFzc3VtZWQsIGV4Y2VwdCB3aGF0IGNhbiBiZSBkZXRlcm1pbmVkIGJ5IGluc3BlY3Rpb24gb2YgdGhlIGRlZmluaXRpb25zIG9mIHRoZSBlbGVtZW50cyAocG9zc2libGUgcmVhc29ucyB0byB1c2UgdGhpczogaW1wb3J0aW5nIGZyb20gYSBzb3VyY2Ugd2hlcmUgdGhpcyBpcyBub3QgZGVmaW5lZCwgb3Igd2hlcmUgdmFyaW91cyBwYXJ0cyBvZiB0aGUgaGllcmFyY2h5IGhhdmUgZGlmZmVyZW50IG1lYW5pbmdzKS5cclxuICAgKi9cclxuICBHcm91cGVkQnk6IFwiZ3JvdXBlZC1ieVwiLFxyXG4gIC8qKlxyXG4gICAqIGlzLWE6IEEgaGllcmFyY2h5IHdoZXJlIHRoZSBjaGlsZCBjb25jZXB0cyBoYXZlIGFuIElTLUEgcmVsYXRpb25zaGlwIHdpdGggdGhlIHBhcmVudHMgLSB0aGF0IGlzLCBhbGwgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHBhcmVudCBhcmUgYWxzbyB0cnVlIGZvciBpdHMgY2hpbGQgY29uY2VwdHMuIE5vdCB0aGF0IGlzLWEgaXMgYSBwcm9wZXJ0eSBvZiB0aGUgY29uY2VwdHMsIHNvIGFkZGl0aW9uYWwgc3Vic3VtcHRpb24gcmVsYXRpb25zaGlwcyBtYXkgYmUgZGVmaW5lZCB1c2luZyBwcm9wZXJ0aWVzIG9yIHRoZSBbc3Vic3VtZXNdKGV4dGVuc2lvbi1jb2Rlc3lzdGVtLXN1YnN1bWVzLmh0bWwpIGV4dGVuc2lvbi5cclxuICAgKi9cclxuICBJc0E6IFwiaXMtYVwiLFxyXG4gIC8qKlxyXG4gICAqIHBhcnQtb2Y6IENoaWxkIGVsZW1lbnRzIGxpc3QgdGhlIGluZGl2aWR1YWwgcGFydHMgb2YgYSBjb21wb3NpdGUgd2hvbGUgKGUuZy4gYm9keSBzaXRlKS5cclxuICAgKi9cclxuICBQYXJ0T2Y6IFwicGFydC1vZlwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBtZWFuaW5nIG9mIHRoZSBoaWVyYXJjaHkgb2YgY29uY2VwdHMgaW4gYSBjb2RlIHN5c3RlbS5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvZGVzeXN0ZW1IaWVyYXJjaHlNZWFuaW5nQ29kZVR5cGUgPSB0eXBlb2YgQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2Rlc1trZXlvZiB0eXBlb2YgQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2Rlc107XHJcbiJdfQ==