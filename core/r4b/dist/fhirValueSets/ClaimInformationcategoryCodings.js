// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/claim-informationcategory|4.3.0
/**
 * This value set includes sample Information Category codes.
 */
export const ClaimInformationcategoryCodings = {
    /**
     * attachment: Materials attached such as images, documents and resources.
     */
    Attachment: {
        display: "Attachment",
        code: "attachment",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * discharge: Discharge status and discharge to locations.
     */
    Discharge: {
        display: "Discharge",
        code: "discharge",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * employmentimpacted: An indication that the patient was unable to work, the period if known otherwise a Yes/No (boolean).
     */
    EmploymentImpacted: {
        display: "EmploymentImpacted",
        code: "employmentimpacted",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * exception: Insurance policy exceptions.
     */
    Exception: {
        display: "Exception",
        code: "exception",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * externalcause: The external cause of an illness or injury.
     */
    ExternalCaause: {
        display: "External Caause",
        code: "externalcause",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * hospitalized: An indication that the patient was hospitalized, the period if known otherwise a Yes/No (boolean).
     */
    Hospitalized: {
        display: "Hospitalized",
        code: "hospitalized",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * info: Codes conveying additional situation and condition information.
     */
    Information: {
        display: "Information",
        code: "info",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * material: Materials being forwarded, e.g. Models, molds, images, documents.
     */
    MaterialsForwarded: {
        display: "Materials Forwarded",
        code: "material",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * missingtooth: Teeth which are missing for any reason, for example: prior extraction, never developed.
     */
    MissingTooth: {
        display: "Missing Tooth",
        code: "missingtooth",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * onset: Period, start or end dates of aspects of the Condition.
     */
    Onset: {
        display: "Onset",
        code: "onset",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * other: Other information identified by the type.system.
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * patientreasonforvisit: The reason for the patient visit.
     */
    PatientReasonForVisit: {
        display: "Patient Reason for Visit",
        code: "patientreasonforvisit",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * prosthesis: The type of prosthesis and date of supply if a previously supplied prosthesis.
     */
    Prosthesis: {
        display: "Prosthesis",
        code: "prosthesis",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
    /**
     * related: Nature and date of the related event e.g. Last exam, service, X-ray etc.
     */
    RelatedServices: {
        display: "Related Services",
        code: "related",
        system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhaW1JbmZvcm1hdGlvbmNhdGVnb3J5Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ2xhaW1JbmZvcm1hdGlvbmNhdGVnb3J5Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyw4RUFBOEU7QUFrRTlFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXNDO0lBQ2hGOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jbGFpbS1pbmZvcm1hdGlvbmNhdGVnb3J5fDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgc2FtcGxlIEluZm9ybWF0aW9uIENhdGVnb3J5IGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2xhaW1JbmZvcm1hdGlvbmNhdGVnb3J5Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhdHRhY2htZW50OiBNYXRlcmlhbHMgYXR0YWNoZWQgc3VjaCBhcyBpbWFnZXMsIGRvY3VtZW50cyBhbmQgcmVzb3VyY2VzLlxyXG4gICAqL1xyXG4gIEF0dGFjaG1lbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGlzY2hhcmdlOiBEaXNjaGFyZ2Ugc3RhdHVzIGFuZCBkaXNjaGFyZ2UgdG8gbG9jYXRpb25zLlxyXG4gICAqL1xyXG4gIERpc2NoYXJnZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbXBsb3ltZW50aW1wYWN0ZWQ6IEFuIGluZGljYXRpb24gdGhhdCB0aGUgcGF0aWVudCB3YXMgdW5hYmxlIHRvIHdvcmssIHRoZSBwZXJpb2QgaWYga25vd24gb3RoZXJ3aXNlIGEgWWVzL05vIChib29sZWFuKS5cclxuICAgKi9cclxuICBFbXBsb3ltZW50SW1wYWN0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZXhjZXB0aW9uOiBJbnN1cmFuY2UgcG9saWN5IGV4Y2VwdGlvbnMuXHJcbiAgICovXHJcbiAgRXhjZXB0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGV4dGVybmFsY2F1c2U6IFRoZSBleHRlcm5hbCBjYXVzZSBvZiBhbiBpbGxuZXNzIG9yIGluanVyeS5cclxuICAgKi9cclxuICBFeHRlcm5hbENhYXVzZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBob3NwaXRhbGl6ZWQ6IEFuIGluZGljYXRpb24gdGhhdCB0aGUgcGF0aWVudCB3YXMgaG9zcGl0YWxpemVkLCB0aGUgcGVyaW9kIGlmIGtub3duIG90aGVyd2lzZSBhIFllcy9ObyAoYm9vbGVhbikuXHJcbiAgICovXHJcbiAgSG9zcGl0YWxpemVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluZm86IENvZGVzIGNvbnZleWluZyBhZGRpdGlvbmFsIHNpdHVhdGlvbiBhbmQgY29uZGl0aW9uIGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIEluZm9ybWF0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG1hdGVyaWFsOiBNYXRlcmlhbHMgYmVpbmcgZm9yd2FyZGVkLCBlLmcuIE1vZGVscywgbW9sZHMsIGltYWdlcywgZG9jdW1lbnRzLlxyXG4gICAqL1xyXG4gIE1hdGVyaWFsc0ZvcndhcmRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtaXNzaW5ndG9vdGg6IFRlZXRoIHdoaWNoIGFyZSBtaXNzaW5nIGZvciBhbnkgcmVhc29uLCBmb3IgZXhhbXBsZTogcHJpb3IgZXh0cmFjdGlvbiwgbmV2ZXIgZGV2ZWxvcGVkLlxyXG4gICAqL1xyXG4gIE1pc3NpbmdUb290aDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbnNldDogUGVyaW9kLCBzdGFydCBvciBlbmQgZGF0ZXMgb2YgYXNwZWN0cyBvZiB0aGUgQ29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIE9uc2V0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBPdGhlciBpbmZvcm1hdGlvbiBpZGVudGlmaWVkIGJ5IHRoZSB0eXBlLnN5c3RlbS5cclxuICAgKi9cclxuICBPdGhlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXRpZW50cmVhc29uZm9ydmlzaXQ6IFRoZSByZWFzb24gZm9yIHRoZSBwYXRpZW50IHZpc2l0LlxyXG4gICAqL1xyXG4gIFBhdGllbnRSZWFzb25Gb3JWaXNpdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm9zdGhlc2lzOiBUaGUgdHlwZSBvZiBwcm9zdGhlc2lzIGFuZCBkYXRlIG9mIHN1cHBseSBpZiBhIHByZXZpb3VzbHkgc3VwcGxpZWQgcHJvc3RoZXNpcy5cclxuICAgKi9cclxuICBQcm9zdGhlc2lzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlbGF0ZWQ6IE5hdHVyZSBhbmQgZGF0ZSBvZiB0aGUgcmVsYXRlZCBldmVudCBlLmcuIExhc3QgZXhhbSwgc2VydmljZSwgWC1yYXkgZXRjLlxyXG4gICAqL1xyXG4gIFJlbGF0ZWRTZXJ2aWNlczogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIHNhbXBsZSBJbmZvcm1hdGlvbiBDYXRlZ29yeSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDbGFpbUluZm9ybWF0aW9uY2F0ZWdvcnlDb2RpbmdzOkNsYWltSW5mb3JtYXRpb25jYXRlZ29yeUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXR0YWNobWVudDogTWF0ZXJpYWxzIGF0dGFjaGVkIHN1Y2ggYXMgaW1hZ2VzLCBkb2N1bWVudHMgYW5kIHJlc291cmNlcy5cclxuICAgKi9cclxuICBBdHRhY2htZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIkF0dGFjaG1lbnRcIixcclxuICAgIGNvZGU6IFwiYXR0YWNobWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2xhaW1pbmZvcm1hdGlvbmNhdGVnb3J5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkaXNjaGFyZ2U6IERpc2NoYXJnZSBzdGF0dXMgYW5kIGRpc2NoYXJnZSB0byBsb2NhdGlvbnMuXHJcbiAgICovXHJcbiAgRGlzY2hhcmdlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpc2NoYXJnZVwiLFxyXG4gICAgY29kZTogXCJkaXNjaGFyZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NsYWltaW5mb3JtYXRpb25jYXRlZ29yeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW1wbG95bWVudGltcGFjdGVkOiBBbiBpbmRpY2F0aW9uIHRoYXQgdGhlIHBhdGllbnQgd2FzIHVuYWJsZSB0byB3b3JrLCB0aGUgcGVyaW9kIGlmIGtub3duIG90aGVyd2lzZSBhIFllcy9ObyAoYm9vbGVhbikuXHJcbiAgICovXHJcbiAgRW1wbG95bWVudEltcGFjdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVtcGxveW1lbnRJbXBhY3RlZFwiLFxyXG4gICAgY29kZTogXCJlbXBsb3ltZW50aW1wYWN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NsYWltaW5mb3JtYXRpb25jYXRlZ29yeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXhjZXB0aW9uOiBJbnN1cmFuY2UgcG9saWN5IGV4Y2VwdGlvbnMuXHJcbiAgICovXHJcbiAgRXhjZXB0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkV4Y2VwdGlvblwiLFxyXG4gICAgY29kZTogXCJleGNlcHRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NsYWltaW5mb3JtYXRpb25jYXRlZ29yeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXh0ZXJuYWxjYXVzZTogVGhlIGV4dGVybmFsIGNhdXNlIG9mIGFuIGlsbG5lc3Mgb3IgaW5qdXJ5LlxyXG4gICAqL1xyXG4gIEV4dGVybmFsQ2FhdXNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkV4dGVybmFsIENhYXVzZVwiLFxyXG4gICAgY29kZTogXCJleHRlcm5hbGNhdXNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jbGFpbWluZm9ybWF0aW9uY2F0ZWdvcnlcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGhvc3BpdGFsaXplZDogQW4gaW5kaWNhdGlvbiB0aGF0IHRoZSBwYXRpZW50IHdhcyBob3NwaXRhbGl6ZWQsIHRoZSBwZXJpb2QgaWYga25vd24gb3RoZXJ3aXNlIGEgWWVzL05vIChib29sZWFuKS5cclxuICAgKi9cclxuICBIb3NwaXRhbGl6ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiSG9zcGl0YWxpemVkXCIsXHJcbiAgICBjb2RlOiBcImhvc3BpdGFsaXplZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2xhaW1pbmZvcm1hdGlvbmNhdGVnb3J5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbmZvOiBDb2RlcyBjb252ZXlpbmcgYWRkaXRpb25hbCBzaXR1YXRpb24gYW5kIGNvbmRpdGlvbiBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBJbmZvcm1hdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJJbmZvcm1hdGlvblwiLFxyXG4gICAgY29kZTogXCJpbmZvXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jbGFpbWluZm9ybWF0aW9uY2F0ZWdvcnlcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1hdGVyaWFsOiBNYXRlcmlhbHMgYmVpbmcgZm9yd2FyZGVkLCBlLmcuIE1vZGVscywgbW9sZHMsIGltYWdlcywgZG9jdW1lbnRzLlxyXG4gICAqL1xyXG4gIE1hdGVyaWFsc0ZvcndhcmRlZDoge1xyXG4gICAgZGlzcGxheTogXCJNYXRlcmlhbHMgRm9yd2FyZGVkXCIsXHJcbiAgICBjb2RlOiBcIm1hdGVyaWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jbGFpbWluZm9ybWF0aW9uY2F0ZWdvcnlcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1pc3Npbmd0b290aDogVGVldGggd2hpY2ggYXJlIG1pc3NpbmcgZm9yIGFueSByZWFzb24sIGZvciBleGFtcGxlOiBwcmlvciBleHRyYWN0aW9uLCBuZXZlciBkZXZlbG9wZWQuXHJcbiAgICovXHJcbiAgTWlzc2luZ1Rvb3RoOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1pc3NpbmcgVG9vdGhcIixcclxuICAgIGNvZGU6IFwibWlzc2luZ3Rvb3RoXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jbGFpbWluZm9ybWF0aW9uY2F0ZWdvcnlcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9uc2V0OiBQZXJpb2QsIHN0YXJ0IG9yIGVuZCBkYXRlcyBvZiBhc3BlY3RzIG9mIHRoZSBDb25kaXRpb24uXHJcbiAgICovXHJcbiAgT25zZXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiT25zZXRcIixcclxuICAgIGNvZGU6IFwib25zZXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NsYWltaW5mb3JtYXRpb25jYXRlZ29yeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IE90aGVyIGluZm9ybWF0aW9uIGlkZW50aWZpZWQgYnkgdGhlIHR5cGUuc3lzdGVtLlxyXG4gICAqL1xyXG4gIE90aGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk90aGVyXCIsXHJcbiAgICBjb2RlOiBcIm90aGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jbGFpbWluZm9ybWF0aW9uY2F0ZWdvcnlcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBhdGllbnRyZWFzb25mb3J2aXNpdDogVGhlIHJlYXNvbiBmb3IgdGhlIHBhdGllbnQgdmlzaXQuXHJcbiAgICovXHJcbiAgUGF0aWVudFJlYXNvbkZvclZpc2l0OiB7XHJcbiAgICBkaXNwbGF5OiBcIlBhdGllbnQgUmVhc29uIGZvciBWaXNpdFwiLFxyXG4gICAgY29kZTogXCJwYXRpZW50cmVhc29uZm9ydmlzaXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NsYWltaW5mb3JtYXRpb25jYXRlZ29yeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvc3RoZXNpczogVGhlIHR5cGUgb2YgcHJvc3RoZXNpcyBhbmQgZGF0ZSBvZiBzdXBwbHkgaWYgYSBwcmV2aW91c2x5IHN1cHBsaWVkIHByb3N0aGVzaXMuXHJcbiAgICovXHJcbiAgUHJvc3RoZXNpczoge1xyXG4gICAgZGlzcGxheTogXCJQcm9zdGhlc2lzXCIsXHJcbiAgICBjb2RlOiBcInByb3N0aGVzaXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NsYWltaW5mb3JtYXRpb25jYXRlZ29yeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVsYXRlZDogTmF0dXJlIGFuZCBkYXRlIG9mIHRoZSByZWxhdGVkIGV2ZW50IGUuZy4gTGFzdCBleGFtLCBzZXJ2aWNlLCBYLXJheSBldGMuXHJcbiAgICovXHJcbiAgUmVsYXRlZFNlcnZpY2VzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlbGF0ZWQgU2VydmljZXNcIixcclxuICAgIGNvZGU6IFwicmVsYXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2xhaW1pbmZvcm1hdGlvbmNhdGVnb3J5XCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19