// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/coverage-copay-type|4.3.0
/**
 * This value set includes sample Coverage Copayment Type codes.
 */
export const CoverageCopayTypeCodes = {
    /**
     * copay: A standard fixed currency amount applied to all classes or service or product not otherwise specified.
     */
    CopayAmount: "copay",
    /**
     * copaypct: A standard percentage applied to all classes or service or product not otherwise specified.
     */
    CopayPercentage: "copaypct",
    /**
     * deductible: The accumulated amount of patient payment before the coverage begins to pay for services.
     */
    Deductible: "deductible",
    /**
     * emergency: An episode in an emergency department.
     */
    Emergency: "emergency",
    /**
     * gpvisit: An office visit for a general practitioner of a discipline.
     */
    GPOfficeVisit: "gpvisit",
    /**
     * inpthosp: An episode of an Inpatient hospital stay.
     */
    InpatientHospital: "inpthosp",
    /**
     * maxoutofpocket: The maximum amout of payment for services which a patient, or family, is expected to incur - typically annually.
     */
    MaximumOutOfPocket: "maxoutofpocket",
    /**
     * spvisit: An office visit for a specialist practitioner of a discipline
     */
    SpecialistOfficeVisit: "spvisit",
    /**
     * televisit: A visit held where the patient is remote relative to the practitioner, e.g. by phone, computer or video conference.
     */
    TeleVisit: "televisit",
    /**
     * urgentcare: A visit to an urgent care facility - typically a community care clinic.
     */
    UrgentCare: "urgentcare",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2VDb3BheVR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ292ZXJhZ2VDb3BheVR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx3RUFBd0U7QUFFeEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRztJQUNwQzs7T0FFRztJQUNILFdBQVcsRUFBRSxPQUFPO0lBQ3BCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLFVBQVU7SUFDM0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLFNBQVM7SUFDeEI7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxVQUFVO0lBQzdCOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsZ0JBQWdCO0lBQ3BDOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsU0FBUztJQUNoQzs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFlBQVk7Q0FDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY292ZXJhZ2UtY29wYXktdHlwZXw0LjMuMFxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIHNhbXBsZSBDb3ZlcmFnZSBDb3BheW1lbnQgVHlwZSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb3ZlcmFnZUNvcGF5VHlwZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvcGF5OiBBIHN0YW5kYXJkIGZpeGVkIGN1cnJlbmN5IGFtb3VudCBhcHBsaWVkIHRvIGFsbCBjbGFzc2VzIG9yIHNlcnZpY2Ugb3IgcHJvZHVjdCBub3Qgb3RoZXJ3aXNlIHNwZWNpZmllZC5cclxuICAgKi9cclxuICBDb3BheUFtb3VudDogXCJjb3BheVwiLFxyXG4gIC8qKlxyXG4gICAqIGNvcGF5cGN0OiBBIHN0YW5kYXJkIHBlcmNlbnRhZ2UgYXBwbGllZCB0byBhbGwgY2xhc3NlcyBvciBzZXJ2aWNlIG9yIHByb2R1Y3Qgbm90IG90aGVyd2lzZSBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgQ29wYXlQZXJjZW50YWdlOiBcImNvcGF5cGN0XCIsXHJcbiAgLyoqXHJcbiAgICogZGVkdWN0aWJsZTogVGhlIGFjY3VtdWxhdGVkIGFtb3VudCBvZiBwYXRpZW50IHBheW1lbnQgYmVmb3JlIHRoZSBjb3ZlcmFnZSBiZWdpbnMgdG8gcGF5IGZvciBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBEZWR1Y3RpYmxlOiBcImRlZHVjdGlibGVcIixcclxuICAvKipcclxuICAgKiBlbWVyZ2VuY3k6IEFuIGVwaXNvZGUgaW4gYW4gZW1lcmdlbmN5IGRlcGFydG1lbnQuXHJcbiAgICovXHJcbiAgRW1lcmdlbmN5OiBcImVtZXJnZW5jeVwiLFxyXG4gIC8qKlxyXG4gICAqIGdwdmlzaXQ6IEFuIG9mZmljZSB2aXNpdCBmb3IgYSBnZW5lcmFsIHByYWN0aXRpb25lciBvZiBhIGRpc2NpcGxpbmUuXHJcbiAgICovXHJcbiAgR1BPZmZpY2VWaXNpdDogXCJncHZpc2l0XCIsXHJcbiAgLyoqXHJcbiAgICogaW5wdGhvc3A6IEFuIGVwaXNvZGUgb2YgYW4gSW5wYXRpZW50IGhvc3BpdGFsIHN0YXkuXHJcbiAgICovXHJcbiAgSW5wYXRpZW50SG9zcGl0YWw6IFwiaW5wdGhvc3BcIixcclxuICAvKipcclxuICAgKiBtYXhvdXRvZnBvY2tldDogVGhlIG1heGltdW0gYW1vdXQgb2YgcGF5bWVudCBmb3Igc2VydmljZXMgd2hpY2ggYSBwYXRpZW50LCBvciBmYW1pbHksIGlzIGV4cGVjdGVkIHRvIGluY3VyIC0gdHlwaWNhbGx5IGFubnVhbGx5LlxyXG4gICAqL1xyXG4gIE1heGltdW1PdXRPZlBvY2tldDogXCJtYXhvdXRvZnBvY2tldFwiLFxyXG4gIC8qKlxyXG4gICAqIHNwdmlzaXQ6IEFuIG9mZmljZSB2aXNpdCBmb3IgYSBzcGVjaWFsaXN0IHByYWN0aXRpb25lciBvZiBhIGRpc2NpcGxpbmVcclxuICAgKi9cclxuICBTcGVjaWFsaXN0T2ZmaWNlVmlzaXQ6IFwic3B2aXNpdFwiLFxyXG4gIC8qKlxyXG4gICAqIHRlbGV2aXNpdDogQSB2aXNpdCBoZWxkIHdoZXJlIHRoZSBwYXRpZW50IGlzIHJlbW90ZSByZWxhdGl2ZSB0byB0aGUgcHJhY3RpdGlvbmVyLCBlLmcuIGJ5IHBob25lLCBjb21wdXRlciBvciB2aWRlbyBjb25mZXJlbmNlLlxyXG4gICAqL1xyXG4gIFRlbGVWaXNpdDogXCJ0ZWxldmlzaXRcIixcclxuICAvKipcclxuICAgKiB1cmdlbnRjYXJlOiBBIHZpc2l0IHRvIGFuIHVyZ2VudCBjYXJlIGZhY2lsaXR5IC0gdHlwaWNhbGx5IGEgY29tbXVuaXR5IGNhcmUgY2xpbmljLlxyXG4gICAqL1xyXG4gIFVyZ2VudENhcmU6IFwidXJnZW50Y2FyZVwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIHNhbXBsZSBDb3ZlcmFnZSBDb3BheW1lbnQgVHlwZSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvdmVyYWdlQ29wYXlUeXBlQ29kZVR5cGUgPSB0eXBlb2YgQ292ZXJhZ2VDb3BheVR5cGVDb2Rlc1trZXlvZiB0eXBlb2YgQ292ZXJhZ2VDb3BheVR5cGVDb2Rlc107XHJcbiJdfQ==