// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/request-status|4.3.0
/**
 * Codes identifying the lifecycle stage of a request.
 */
export const RequestStatusCodes = {
    /**
     * active: The request is in force and ready to be acted upon.
     */
    Active: "active",
    /**
     * completed: The activity described by the request has been fully performed.  No further activity will occur.
     */
    Completed: "completed",
    /**
     * draft: The request has been created but is not yet complete or ready for action.
     */
    Draft: "draft",
    /**
     * entered-in-error: This request should never have existed and should be considered 'void'.  (It is possible that real-world decisions were based on it.  If real-world activity has occurred, the status should be "revoked" rather than "entered-in-error".).
     */
    EnteredInError: "entered-in-error",
    /**
     * on-hold: The request (and any implicit authorization to act) has been temporarily withdrawn but is expected to resume in the future.
     */
    OnHold: "on-hold",
    /**
     * revoked: The request (and any implicit authorization to act) has been terminated prior to the known full completion of the intended actions.  No further activity should occur.
     */
    Revoked: "revoked",
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this request.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdFN0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZXF1ZXN0U3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsbUVBQW1FO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUc7SUFDaEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGNBQWMsRUFBRSxrQkFBa0I7SUFDbEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsU0FBUztJQUNqQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7Q0FDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZXF1ZXN0LXN0YXR1c3w0LjMuMFxyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIHRoZSBsaWZlY3ljbGUgc3RhZ2Ugb2YgYSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJlcXVlc3RTdGF0dXNDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSByZXF1ZXN0IGlzIGluIGZvcmNlIGFuZCByZWFkeSB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIEFjdGl2ZTogXCJhY3RpdmVcIixcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSBhY3Rpdml0eSBkZXNjcmliZWQgYnkgdGhlIHJlcXVlc3QgaGFzIGJlZW4gZnVsbHkgcGVyZm9ybWVkLiAgTm8gZnVydGhlciBhY3Rpdml0eSB3aWxsIG9jY3VyLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDogXCJjb21wbGV0ZWRcIixcclxuICAvKipcclxuICAgKiBkcmFmdDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gY3JlYXRlZCBidXQgaXMgbm90IHlldCBjb21wbGV0ZSBvciByZWFkeSBmb3IgYWN0aW9uLlxyXG4gICAqL1xyXG4gIERyYWZ0OiBcImRyYWZ0XCIsXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyByZXF1ZXN0IHNob3VsZCBuZXZlciBoYXZlIGV4aXN0ZWQgYW5kIHNob3VsZCBiZSBjb25zaWRlcmVkICd2b2lkJy4gIChJdCBpcyBwb3NzaWJsZSB0aGF0IHJlYWwtd29ybGQgZGVjaXNpb25zIHdlcmUgYmFzZWQgb24gaXQuICBJZiByZWFsLXdvcmxkIGFjdGl2aXR5IGhhcyBvY2N1cnJlZCwgdGhlIHN0YXR1cyBzaG91bGQgYmUgXCJyZXZva2VkXCIgcmF0aGVyIHRoYW4gXCJlbnRlcmVkLWluLWVycm9yXCIuKS5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGhlIHJlcXVlc3QgKGFuZCBhbnkgaW1wbGljaXQgYXV0aG9yaXphdGlvbiB0byBhY3QpIGhhcyBiZWVuIHRlbXBvcmFyaWx5IHdpdGhkcmF3biBidXQgaXMgZXhwZWN0ZWQgdG8gcmVzdW1lIGluIHRoZSBmdXR1cmUuXHJcbiAgICovXHJcbiAgT25Ib2xkOiBcIm9uLWhvbGRcIixcclxuICAvKipcclxuICAgKiByZXZva2VkOiBUaGUgcmVxdWVzdCAoYW5kIGFueSBpbXBsaWNpdCBhdXRob3JpemF0aW9uIHRvIGFjdCkgaGFzIGJlZW4gdGVybWluYXRlZCBwcmlvciB0byB0aGUga25vd24gZnVsbCBjb21wbGV0aW9uIG9mIHRoZSBpbnRlbmRlZCBhY3Rpb25zLiAgTm8gZnVydGhlciBhY3Rpdml0eSBzaG91bGQgb2NjdXIuXHJcbiAgICovXHJcbiAgUmV2b2tlZDogXCJyZXZva2VkXCIsXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgcmVxdWVzdC4gIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksICBidXQgdGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2guXHJcbiAgICovXHJcbiAgVW5rbm93bjogXCJ1bmtub3duXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZXMgaWRlbnRpZnlpbmcgdGhlIGxpZmVjeWNsZSBzdGFnZSBvZiBhIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZXF1ZXN0U3RhdHVzQ29kZVR5cGUgPSB0eXBlb2YgUmVxdWVzdFN0YXR1c0NvZGVzW2tleW9mIHR5cGVvZiBSZXF1ZXN0U3RhdHVzQ29kZXNdO1xyXG4iXX0=