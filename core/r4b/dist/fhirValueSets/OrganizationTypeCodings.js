// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/organization-type|4.3.0
/**
 * This example value set defines a set of codes that can be used to indicate a type of organization.
 */
export const OrganizationTypeCodings = {
    /**
     * bus: An organization that is a registered business or corporation but not identified by other types.
     */
    NonHealthcareBusinessOrCorporation: {
        display: "Non-Healthcare Business or Corporation",
        code: "bus",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * cg: An un-incorporated community group.
     */
    CommunityGroup: {
        display: "Community Group",
        code: "cg",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * crs: An organization that is identified as a Pharmaceutical/Clinical Research Sponsor.
     */
    ClinicalResearchSponsor: {
        display: "Clinical Research Sponsor",
        code: "crs",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * dept: A department or ward within a hospital (Generally is not applicable to top level organizations)
     */
    HospitalDepartment: {
        display: "Hospital Department",
        code: "dept",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * edu: An educational institution that provides education or research facilities.
     */
    EducationalInstitute: {
        display: "Educational Institute",
        code: "edu",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * govt: A political body, often used when including organization records for government bodies such as a Federal Government, State or Local Government.
     */
    Government: {
        display: "Government",
        code: "govt",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * ins: A company that provides insurance to its subscribers that may include healthcare related policies.
     */
    InsuranceCompany: {
        display: "Insurance Company",
        code: "ins",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * other: Other type of organization not already specified.
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * pay: A company, charity, or governmental organization, which processes claims and/or issues payments to providers on behalf of patients or groups of patients.
     */
    Payer: {
        display: "Payer",
        code: "pay",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * prov: An organization that provides healthcare services.
     */
    HealthcareProvider: {
        display: "Healthcare Provider",
        code: "prov",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * reli: An organization that is identified as a part of a religious institution.
     */
    ReligiousInstitution: {
        display: "Religious Institution",
        code: "reli",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
    /**
     * team: An organizational team is usually a grouping of practitioners that perform a specific function within an organization (which could be a top level organization, or a department).
     */
    OrganizationalTeam: {
        display: "Organizational team",
        code: "team",
        system: "http://terminology.hl7.org/CodeSystem/organization-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JnYW5pemF0aW9uVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL09yZ2FuaXphdGlvblR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLHNFQUFzRTtBQTBEdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBOEI7SUFDaEU7O09BRUc7SUFDSCxrQ0FBa0MsRUFBRTtRQUNsQyxPQUFPLEVBQUUsd0NBQXdDO1FBQ2pELElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHlEQUF5RDtLQUNsRTtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILHVCQUF1QixFQUFFO1FBQ3ZCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0lBQ0Q7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHlEQUF5RDtLQUNsRTtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHlEQUF5RDtLQUNsRTtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlEQUF5RDtLQUNsRTtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0lBQ0Q7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHlEQUF5RDtLQUNsRTtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvb3JnYW5pemF0aW9uLXR5cGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGV4YW1wbGUgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBhIHR5cGUgb2Ygb3JnYW5pemF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT3JnYW5pemF0aW9uVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYnVzOiBBbiBvcmdhbml6YXRpb24gdGhhdCBpcyBhIHJlZ2lzdGVyZWQgYnVzaW5lc3Mgb3IgY29ycG9yYXRpb24gYnV0IG5vdCBpZGVudGlmaWVkIGJ5IG90aGVyIHR5cGVzLlxyXG4gICAqL1xyXG4gIE5vbkhlYWx0aGNhcmVCdXNpbmVzc09yQ29ycG9yYXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2c6IEFuIHVuLWluY29ycG9yYXRlZCBjb21tdW5pdHkgZ3JvdXAuXHJcbiAgICovXHJcbiAgQ29tbXVuaXR5R3JvdXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY3JzOiBBbiBvcmdhbml6YXRpb24gdGhhdCBpcyBpZGVudGlmaWVkIGFzIGEgUGhhcm1hY2V1dGljYWwvQ2xpbmljYWwgUmVzZWFyY2ggU3BvbnNvci5cclxuICAgKi9cclxuICBDbGluaWNhbFJlc2VhcmNoU3BvbnNvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkZXB0OiBBIGRlcGFydG1lbnQgb3Igd2FyZCB3aXRoaW4gYSBob3NwaXRhbCAoR2VuZXJhbGx5IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRvcCBsZXZlbCBvcmdhbml6YXRpb25zKVxyXG4gICAqL1xyXG4gIEhvc3BpdGFsRGVwYXJ0bWVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlZHU6IEFuIGVkdWNhdGlvbmFsIGluc3RpdHV0aW9uIHRoYXQgcHJvdmlkZXMgZWR1Y2F0aW9uIG9yIHJlc2VhcmNoIGZhY2lsaXRpZXMuXHJcbiAgICovXHJcbiAgRWR1Y2F0aW9uYWxJbnN0aXR1dGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ292dDogQSBwb2xpdGljYWwgYm9keSwgb2Z0ZW4gdXNlZCB3aGVuIGluY2x1ZGluZyBvcmdhbml6YXRpb24gcmVjb3JkcyBmb3IgZ292ZXJubWVudCBib2RpZXMgc3VjaCBhcyBhIEZlZGVyYWwgR292ZXJubWVudCwgU3RhdGUgb3IgTG9jYWwgR292ZXJubWVudC5cclxuICAgKi9cclxuICBHb3Zlcm5tZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluczogQSBjb21wYW55IHRoYXQgcHJvdmlkZXMgaW5zdXJhbmNlIHRvIGl0cyBzdWJzY3JpYmVycyB0aGF0IG1heSBpbmNsdWRlIGhlYWx0aGNhcmUgcmVsYXRlZCBwb2xpY2llcy5cclxuICAgKi9cclxuICBJbnN1cmFuY2VDb21wYW55OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBPdGhlciB0eXBlIG9mIG9yZ2FuaXphdGlvbiBub3QgYWxyZWFkeSBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgT3RoZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGF5OiBBIGNvbXBhbnksIGNoYXJpdHksIG9yIGdvdmVybm1lbnRhbCBvcmdhbml6YXRpb24sIHdoaWNoIHByb2Nlc3NlcyBjbGFpbXMgYW5kL29yIGlzc3VlcyBwYXltZW50cyB0byBwcm92aWRlcnMgb24gYmVoYWxmIG9mIHBhdGllbnRzIG9yIGdyb3VwcyBvZiBwYXRpZW50cy5cclxuICAgKi9cclxuICBQYXllcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm92OiBBbiBvcmdhbml6YXRpb24gdGhhdCBwcm92aWRlcyBoZWFsdGhjYXJlIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIEhlYWx0aGNhcmVQcm92aWRlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWxpOiBBbiBvcmdhbml6YXRpb24gdGhhdCBpcyBpZGVudGlmaWVkIGFzIGEgcGFydCBvZiBhIHJlbGlnaW91cyBpbnN0aXR1dGlvbi5cclxuICAgKi9cclxuICBSZWxpZ2lvdXNJbnN0aXR1dGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0ZWFtOiBBbiBvcmdhbml6YXRpb25hbCB0ZWFtIGlzIHVzdWFsbHkgYSBncm91cGluZyBvZiBwcmFjdGl0aW9uZXJzIHRoYXQgcGVyZm9ybSBhIHNwZWNpZmljIGZ1bmN0aW9uIHdpdGhpbiBhbiBvcmdhbml6YXRpb24gKHdoaWNoIGNvdWxkIGJlIGEgdG9wIGxldmVsIG9yZ2FuaXphdGlvbiwgb3IgYSBkZXBhcnRtZW50KS5cclxuICAgKi9cclxuICBPcmdhbml6YXRpb25hbFRlYW06IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGV4YW1wbGUgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBhIHR5cGUgb2Ygb3JnYW5pemF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE9yZ2FuaXphdGlvblR5cGVDb2RpbmdzOk9yZ2FuaXphdGlvblR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJ1czogQW4gb3JnYW5pemF0aW9uIHRoYXQgaXMgYSByZWdpc3RlcmVkIGJ1c2luZXNzIG9yIGNvcnBvcmF0aW9uIGJ1dCBub3QgaWRlbnRpZmllZCBieSBvdGhlciB0eXBlcy5cclxuICAgKi9cclxuICBOb25IZWFsdGhjYXJlQnVzaW5lc3NPckNvcnBvcmF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vbi1IZWFsdGhjYXJlIEJ1c2luZXNzIG9yIENvcnBvcmF0aW9uXCIsXHJcbiAgICBjb2RlOiBcImJ1c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vb3JnYW5pemF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNnOiBBbiB1bi1pbmNvcnBvcmF0ZWQgY29tbXVuaXR5IGdyb3VwLlxyXG4gICAqL1xyXG4gIENvbW11bml0eUdyb3VwOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbW11bml0eSBHcm91cFwiLFxyXG4gICAgY29kZTogXCJjZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vb3JnYW5pemF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNyczogQW4gb3JnYW5pemF0aW9uIHRoYXQgaXMgaWRlbnRpZmllZCBhcyBhIFBoYXJtYWNldXRpY2FsL0NsaW5pY2FsIFJlc2VhcmNoIFNwb25zb3IuXHJcbiAgICovXHJcbiAgQ2xpbmljYWxSZXNlYXJjaFNwb25zb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2xpbmljYWwgUmVzZWFyY2ggU3BvbnNvclwiLFxyXG4gICAgY29kZTogXCJjcnNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkZXB0OiBBIGRlcGFydG1lbnQgb3Igd2FyZCB3aXRoaW4gYSBob3NwaXRhbCAoR2VuZXJhbGx5IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRvcCBsZXZlbCBvcmdhbml6YXRpb25zKVxyXG4gICAqL1xyXG4gIEhvc3BpdGFsRGVwYXJ0bWVudDoge1xyXG4gICAgZGlzcGxheTogXCJIb3NwaXRhbCBEZXBhcnRtZW50XCIsXHJcbiAgICBjb2RlOiBcImRlcHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlZHU6IEFuIGVkdWNhdGlvbmFsIGluc3RpdHV0aW9uIHRoYXQgcHJvdmlkZXMgZWR1Y2F0aW9uIG9yIHJlc2VhcmNoIGZhY2lsaXRpZXMuXHJcbiAgICovXHJcbiAgRWR1Y2F0aW9uYWxJbnN0aXR1dGU6IHtcclxuICAgIGRpc3BsYXk6IFwiRWR1Y2F0aW9uYWwgSW5zdGl0dXRlXCIsXHJcbiAgICBjb2RlOiBcImVkdVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vb3JnYW5pemF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGdvdnQ6IEEgcG9saXRpY2FsIGJvZHksIG9mdGVuIHVzZWQgd2hlbiBpbmNsdWRpbmcgb3JnYW5pemF0aW9uIHJlY29yZHMgZm9yIGdvdmVybm1lbnQgYm9kaWVzIHN1Y2ggYXMgYSBGZWRlcmFsIEdvdmVybm1lbnQsIFN0YXRlIG9yIExvY2FsIEdvdmVybm1lbnQuXHJcbiAgICovXHJcbiAgR292ZXJubWVudDoge1xyXG4gICAgZGlzcGxheTogXCJHb3Zlcm5tZW50XCIsXHJcbiAgICBjb2RlOiBcImdvdnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbnM6IEEgY29tcGFueSB0aGF0IHByb3ZpZGVzIGluc3VyYW5jZSB0byBpdHMgc3Vic2NyaWJlcnMgdGhhdCBtYXkgaW5jbHVkZSBoZWFsdGhjYXJlIHJlbGF0ZWQgcG9saWNpZXMuXHJcbiAgICovXHJcbiAgSW5zdXJhbmNlQ29tcGFueToge1xyXG4gICAgZGlzcGxheTogXCJJbnN1cmFuY2UgQ29tcGFueVwiLFxyXG4gICAgY29kZTogXCJpbnNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvdGhlcjogT3RoZXIgdHlwZSBvZiBvcmdhbml6YXRpb24gbm90IGFscmVhZHkgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIE90aGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk90aGVyXCIsXHJcbiAgICBjb2RlOiBcIm90aGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9vcmdhbml6YXRpb24tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGF5OiBBIGNvbXBhbnksIGNoYXJpdHksIG9yIGdvdmVybm1lbnRhbCBvcmdhbml6YXRpb24sIHdoaWNoIHByb2Nlc3NlcyBjbGFpbXMgYW5kL29yIGlzc3VlcyBwYXltZW50cyB0byBwcm92aWRlcnMgb24gYmVoYWxmIG9mIHBhdGllbnRzIG9yIGdyb3VwcyBvZiBwYXRpZW50cy5cclxuICAgKi9cclxuICBQYXllcjoge1xyXG4gICAgZGlzcGxheTogXCJQYXllclwiLFxyXG4gICAgY29kZTogXCJwYXlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm92OiBBbiBvcmdhbml6YXRpb24gdGhhdCBwcm92aWRlcyBoZWFsdGhjYXJlIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIEhlYWx0aGNhcmVQcm92aWRlcjoge1xyXG4gICAgZGlzcGxheTogXCJIZWFsdGhjYXJlIFByb3ZpZGVyXCIsXHJcbiAgICBjb2RlOiBcInByb3ZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWxpOiBBbiBvcmdhbml6YXRpb24gdGhhdCBpcyBpZGVudGlmaWVkIGFzIGEgcGFydCBvZiBhIHJlbGlnaW91cyBpbnN0aXR1dGlvbi5cclxuICAgKi9cclxuICBSZWxpZ2lvdXNJbnN0aXR1dGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJSZWxpZ2lvdXMgSW5zdGl0dXRpb25cIixcclxuICAgIGNvZGU6IFwicmVsaVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vb3JnYW5pemF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRlYW06IEFuIG9yZ2FuaXphdGlvbmFsIHRlYW0gaXMgdXN1YWxseSBhIGdyb3VwaW5nIG9mIHByYWN0aXRpb25lcnMgdGhhdCBwZXJmb3JtIGEgc3BlY2lmaWMgZnVuY3Rpb24gd2l0aGluIGFuIG9yZ2FuaXphdGlvbiAod2hpY2ggY291bGQgYmUgYSB0b3AgbGV2ZWwgb3JnYW5pemF0aW9uLCBvciBhIGRlcGFydG1lbnQpLlxyXG4gICAqL1xyXG4gIE9yZ2FuaXphdGlvbmFsVGVhbToge1xyXG4gICAgZGlzcGxheTogXCJPcmdhbml6YXRpb25hbCB0ZWFtXCIsXHJcbiAgICBjb2RlOiBcInRlYW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29yZ2FuaXphdGlvbi10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19