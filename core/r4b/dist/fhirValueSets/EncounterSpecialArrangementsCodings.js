// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-special-arrangements|4.3.0
/**
 * This value set defines a set of codes that can be used to indicate the kinds of special arrangements in place for a patients visit.
 */
export const EncounterSpecialArrangementsCodings = {
    /**
     * add-bed: An additional bed made available for a person accompanying the patient, for example a parent accompanying a child.
     */
    AdditionalBedding: {
        display: "Additional bedding",
        code: "add-bed",
        system: "http://terminology.hl7.org/CodeSystem/encounter-special-arrangements",
    },
    /**
     * att: A person who accompanies a patient to provide assistive services necessary for the patient's care during the encounter.
     */
    Attendant: {
        display: "Attendant",
        code: "att",
        system: "http://terminology.hl7.org/CodeSystem/encounter-special-arrangements",
    },
    /**
     * dog: The patient has a guide dog and the location used for the encounter should be able to support the presence of the service animal.
     */
    GuideDog: {
        display: "Guide dog",
        code: "dog",
        system: "http://terminology.hl7.org/CodeSystem/encounter-special-arrangements",
    },
    /**
     * int: The patient is not fluent in the local language and requires an interpreter to be available. Refer to the Patient.Language property for the type of interpreter required.
     */
    Interpreter: {
        display: "Interpreter",
        code: "int",
        system: "http://terminology.hl7.org/CodeSystem/encounter-special-arrangements",
    },
    /**
     * wheel: The patient requires a wheelchair to be made available for the encounter.
     */
    Wheelchair: {
        display: "Wheelchair",
        code: "wheel",
        system: "http://terminology.hl7.org/CodeSystem/encounter-special-arrangements",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyU3BlY2lhbEFycmFuZ2VtZW50c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0VuY291bnRlclNwZWNpYWxBcnJhbmdlbWVudHNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLG1GQUFtRjtBQThCbkY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBMEM7SUFDeEY7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHNFQUFzRTtLQUMvRTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsc0VBQXNFO0tBQy9FO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxzRUFBc0U7S0FDL0U7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHNFQUFzRTtLQUMvRTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsc0VBQXNFO0tBQy9FO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZW5jb3VudGVyLXNwZWNpYWwtYXJyYW5nZW1lbnRzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRoZSBraW5kcyBvZiBzcGVjaWFsIGFycmFuZ2VtZW50cyBpbiBwbGFjZSBmb3IgYSBwYXRpZW50cyB2aXNpdC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEVuY291bnRlclNwZWNpYWxBcnJhbmdlbWVudHNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFkZC1iZWQ6IEFuIGFkZGl0aW9uYWwgYmVkIG1hZGUgYXZhaWxhYmxlIGZvciBhIHBlcnNvbiBhY2NvbXBhbnlpbmcgdGhlIHBhdGllbnQsIGZvciBleGFtcGxlIGEgcGFyZW50IGFjY29tcGFueWluZyBhIGNoaWxkLlxyXG4gICAqL1xyXG4gIEFkZGl0aW9uYWxCZWRkaW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGF0dDogQSBwZXJzb24gd2hvIGFjY29tcGFuaWVzIGEgcGF0aWVudCB0byBwcm92aWRlIGFzc2lzdGl2ZSBzZXJ2aWNlcyBuZWNlc3NhcnkgZm9yIHRoZSBwYXRpZW50J3MgY2FyZSBkdXJpbmcgdGhlIGVuY291bnRlci5cclxuICAgKi9cclxuICBBdHRlbmRhbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZG9nOiBUaGUgcGF0aWVudCBoYXMgYSBndWlkZSBkb2cgYW5kIHRoZSBsb2NhdGlvbiB1c2VkIGZvciB0aGUgZW5jb3VudGVyIHNob3VsZCBiZSBhYmxlIHRvIHN1cHBvcnQgdGhlIHByZXNlbmNlIG9mIHRoZSBzZXJ2aWNlIGFuaW1hbC5cclxuICAgKi9cclxuICBHdWlkZURvZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbnQ6IFRoZSBwYXRpZW50IGlzIG5vdCBmbHVlbnQgaW4gdGhlIGxvY2FsIGxhbmd1YWdlIGFuZCByZXF1aXJlcyBhbiBpbnRlcnByZXRlciB0byBiZSBhdmFpbGFibGUuIFJlZmVyIHRvIHRoZSBQYXRpZW50Lkxhbmd1YWdlIHByb3BlcnR5IGZvciB0aGUgdHlwZSBvZiBpbnRlcnByZXRlciByZXF1aXJlZC5cclxuICAgKi9cclxuICBJbnRlcnByZXRlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3aGVlbDogVGhlIHBhdGllbnQgcmVxdWlyZXMgYSB3aGVlbGNoYWlyIHRvIGJlIG1hZGUgYXZhaWxhYmxlIGZvciB0aGUgZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIFdoZWVsY2hhaXI6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIGtpbmRzIG9mIHNwZWNpYWwgYXJyYW5nZW1lbnRzIGluIHBsYWNlIGZvciBhIHBhdGllbnRzIHZpc2l0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVuY291bnRlclNwZWNpYWxBcnJhbmdlbWVudHNDb2RpbmdzOkVuY291bnRlclNwZWNpYWxBcnJhbmdlbWVudHNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFkZC1iZWQ6IEFuIGFkZGl0aW9uYWwgYmVkIG1hZGUgYXZhaWxhYmxlIGZvciBhIHBlcnNvbiBhY2NvbXBhbnlpbmcgdGhlIHBhdGllbnQsIGZvciBleGFtcGxlIGEgcGFyZW50IGFjY29tcGFueWluZyBhIGNoaWxkLlxyXG4gICAqL1xyXG4gIEFkZGl0aW9uYWxCZWRkaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFkZGl0aW9uYWwgYmVkZGluZ1wiLFxyXG4gICAgY29kZTogXCJhZGQtYmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9lbmNvdW50ZXItc3BlY2lhbC1hcnJhbmdlbWVudHNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGF0dDogQSBwZXJzb24gd2hvIGFjY29tcGFuaWVzIGEgcGF0aWVudCB0byBwcm92aWRlIGFzc2lzdGl2ZSBzZXJ2aWNlcyBuZWNlc3NhcnkgZm9yIHRoZSBwYXRpZW50J3MgY2FyZSBkdXJpbmcgdGhlIGVuY291bnRlci5cclxuICAgKi9cclxuICBBdHRlbmRhbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQXR0ZW5kYW50XCIsXHJcbiAgICBjb2RlOiBcImF0dFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZW5jb3VudGVyLXNwZWNpYWwtYXJyYW5nZW1lbnRzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkb2c6IFRoZSBwYXRpZW50IGhhcyBhIGd1aWRlIGRvZyBhbmQgdGhlIGxvY2F0aW9uIHVzZWQgZm9yIHRoZSBlbmNvdW50ZXIgc2hvdWxkIGJlIGFibGUgdG8gc3VwcG9ydCB0aGUgcHJlc2VuY2Ugb2YgdGhlIHNlcnZpY2UgYW5pbWFsLlxyXG4gICAqL1xyXG4gIEd1aWRlRG9nOiB7XHJcbiAgICBkaXNwbGF5OiBcIkd1aWRlIGRvZ1wiLFxyXG4gICAgY29kZTogXCJkb2dcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2VuY291bnRlci1zcGVjaWFsLWFycmFuZ2VtZW50c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW50OiBUaGUgcGF0aWVudCBpcyBub3QgZmx1ZW50IGluIHRoZSBsb2NhbCBsYW5ndWFnZSBhbmQgcmVxdWlyZXMgYW4gaW50ZXJwcmV0ZXIgdG8gYmUgYXZhaWxhYmxlLiBSZWZlciB0byB0aGUgUGF0aWVudC5MYW5ndWFnZSBwcm9wZXJ0eSBmb3IgdGhlIHR5cGUgb2YgaW50ZXJwcmV0ZXIgcmVxdWlyZWQuXHJcbiAgICovXHJcbiAgSW50ZXJwcmV0ZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiSW50ZXJwcmV0ZXJcIixcclxuICAgIGNvZGU6IFwiaW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9lbmNvdW50ZXItc3BlY2lhbC1hcnJhbmdlbWVudHNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdoZWVsOiBUaGUgcGF0aWVudCByZXF1aXJlcyBhIHdoZWVsY2hhaXIgdG8gYmUgbWFkZSBhdmFpbGFibGUgZm9yIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgV2hlZWxjaGFpcjoge1xyXG4gICAgZGlzcGxheTogXCJXaGVlbGNoYWlyXCIsXHJcbiAgICBjb2RlOiBcIndoZWVsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9lbmNvdW50ZXItc3BlY2lhbC1hcnJhbmdlbWVudHNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=