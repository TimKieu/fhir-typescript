// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicinal-product-cross-reference-type|4.3.0
/**
 * Relationship to another Medicinal Product.
 */
export const MedicinalProductCrossReferenceTypeCodings = {
    /**
     * ActualProduct: Link Virtual to Actual Product
     */
    LinkVirtualToActualProduct: {
        display: "Link Virtual to Actual Product",
        code: "ActualProduct",
        system: "http://hl7.org/fhir/medicinal-product-cross-reference-type",
    },
    /**
     * BrandedProduct: Link Generic to Branded Product
     */
    LinkGenericToBrandedProduct: {
        display: "Link Generic to Branded Product",
        code: "BrandedProduct",
        system: "http://hl7.org/fhir/medicinal-product-cross-reference-type",
    },
    /**
     * GenericProduct: Link Branded to Generic Product
     */
    LinkBrandedToGenericProduct: {
        display: "Link Branded to Generic Product",
        code: "GenericProduct",
        system: "http://hl7.org/fhir/medicinal-product-cross-reference-type",
    },
    /**
     * InvestigationalProduct: Link to Investigational (Development) Product
     */
    LinkToInvestigationalProduct: {
        display: "Link to Investigational Product",
        code: "InvestigationalProduct",
        system: "http://hl7.org/fhir/medicinal-product-cross-reference-type",
    },
    /**
     * Parallel: Link to Parallel Import Product
     */
    LinkToParallelImportProduct: {
        display: "Link to Parallel Import Product",
        code: "Parallel",
        system: "http://hl7.org/fhir/medicinal-product-cross-reference-type",
    },
    /**
     * VirtualProduct: Link Actual to Virtual Product
     */
    LinkActualToVirtualProduct: {
        display: "Link Actual to Virtual Product",
        code: "VirtualProduct",
        system: "http://hl7.org/fhir/medicinal-product-cross-reference-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNpbmFsUHJvZHVjdENyb3NzUmVmZXJlbmNlVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01lZGljaW5hbFByb2R1Y3RDcm9zc1JlZmVyZW5jZVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDJGQUEyRjtBQWtDM0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBZ0Q7SUFDcEc7O09BRUc7SUFDSCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUMsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCwyQkFBMkIsRUFBRTtRQUMzQixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsNEJBQTRCLEVBQUU7UUFDNUIsT0FBTyxFQUFFLGlDQUFpQztRQUMxQyxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUMsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLGdDQUFnQztRQUN6QyxJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZWRpY2luYWwtcHJvZHVjdC1jcm9zcy1yZWZlcmVuY2UtdHlwZXw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFJlbGF0aW9uc2hpcCB0byBhbm90aGVyIE1lZGljaW5hbCBQcm9kdWN0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVkaWNpbmFsUHJvZHVjdENyb3NzUmVmZXJlbmNlVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQWN0dWFsUHJvZHVjdDogTGluayBWaXJ0dWFsIHRvIEFjdHVhbCBQcm9kdWN0XHJcbiAgICovXHJcbiAgTGlua1ZpcnR1YWxUb0FjdHVhbFByb2R1Y3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQnJhbmRlZFByb2R1Y3Q6IExpbmsgR2VuZXJpYyB0byBCcmFuZGVkIFByb2R1Y3RcclxuICAgKi9cclxuICBMaW5rR2VuZXJpY1RvQnJhbmRlZFByb2R1Y3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogR2VuZXJpY1Byb2R1Y3Q6IExpbmsgQnJhbmRlZCB0byBHZW5lcmljIFByb2R1Y3RcclxuICAgKi9cclxuICBMaW5rQnJhbmRlZFRvR2VuZXJpY1Byb2R1Y3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW52ZXN0aWdhdGlvbmFsUHJvZHVjdDogTGluayB0byBJbnZlc3RpZ2F0aW9uYWwgKERldmVsb3BtZW50KSBQcm9kdWN0XHJcbiAgICovXHJcbiAgTGlua1RvSW52ZXN0aWdhdGlvbmFsUHJvZHVjdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBQYXJhbGxlbDogTGluayB0byBQYXJhbGxlbCBJbXBvcnQgUHJvZHVjdFxyXG4gICAqL1xyXG4gIExpbmtUb1BhcmFsbGVsSW1wb3J0UHJvZHVjdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBWaXJ0dWFsUHJvZHVjdDogTGluayBBY3R1YWwgdG8gVmlydHVhbCBQcm9kdWN0XHJcbiAgICovXHJcbiAgTGlua0FjdHVhbFRvVmlydHVhbFByb2R1Y3Q6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWxhdGlvbnNoaXAgdG8gYW5vdGhlciBNZWRpY2luYWwgUHJvZHVjdC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWRpY2luYWxQcm9kdWN0Q3Jvc3NSZWZlcmVuY2VUeXBlQ29kaW5nczpNZWRpY2luYWxQcm9kdWN0Q3Jvc3NSZWZlcmVuY2VUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBBY3R1YWxQcm9kdWN0OiBMaW5rIFZpcnR1YWwgdG8gQWN0dWFsIFByb2R1Y3RcclxuICAgKi9cclxuICBMaW5rVmlydHVhbFRvQWN0dWFsUHJvZHVjdDoge1xyXG4gICAgZGlzcGxheTogXCJMaW5rIFZpcnR1YWwgdG8gQWN0dWFsIFByb2R1Y3RcIixcclxuICAgIGNvZGU6IFwiQWN0dWFsUHJvZHVjdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVkaWNpbmFsLXByb2R1Y3QtY3Jvc3MtcmVmZXJlbmNlLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEJyYW5kZWRQcm9kdWN0OiBMaW5rIEdlbmVyaWMgdG8gQnJhbmRlZCBQcm9kdWN0XHJcbiAgICovXHJcbiAgTGlua0dlbmVyaWNUb0JyYW5kZWRQcm9kdWN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkxpbmsgR2VuZXJpYyB0byBCcmFuZGVkIFByb2R1Y3RcIixcclxuICAgIGNvZGU6IFwiQnJhbmRlZFByb2R1Y3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lZGljaW5hbC1wcm9kdWN0LWNyb3NzLXJlZmVyZW5jZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBHZW5lcmljUHJvZHVjdDogTGluayBCcmFuZGVkIHRvIEdlbmVyaWMgUHJvZHVjdFxyXG4gICAqL1xyXG4gIExpbmtCcmFuZGVkVG9HZW5lcmljUHJvZHVjdDoge1xyXG4gICAgZGlzcGxheTogXCJMaW5rIEJyYW5kZWQgdG8gR2VuZXJpYyBQcm9kdWN0XCIsXHJcbiAgICBjb2RlOiBcIkdlbmVyaWNQcm9kdWN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWRpY2luYWwtcHJvZHVjdC1jcm9zcy1yZWZlcmVuY2UtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogSW52ZXN0aWdhdGlvbmFsUHJvZHVjdDogTGluayB0byBJbnZlc3RpZ2F0aW9uYWwgKERldmVsb3BtZW50KSBQcm9kdWN0XHJcbiAgICovXHJcbiAgTGlua1RvSW52ZXN0aWdhdGlvbmFsUHJvZHVjdDoge1xyXG4gICAgZGlzcGxheTogXCJMaW5rIHRvIEludmVzdGlnYXRpb25hbCBQcm9kdWN0XCIsXHJcbiAgICBjb2RlOiBcIkludmVzdGlnYXRpb25hbFByb2R1Y3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lZGljaW5hbC1wcm9kdWN0LWNyb3NzLXJlZmVyZW5jZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQYXJhbGxlbDogTGluayB0byBQYXJhbGxlbCBJbXBvcnQgUHJvZHVjdFxyXG4gICAqL1xyXG4gIExpbmtUb1BhcmFsbGVsSW1wb3J0UHJvZHVjdDoge1xyXG4gICAgZGlzcGxheTogXCJMaW5rIHRvIFBhcmFsbGVsIEltcG9ydCBQcm9kdWN0XCIsXHJcbiAgICBjb2RlOiBcIlBhcmFsbGVsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWRpY2luYWwtcHJvZHVjdC1jcm9zcy1yZWZlcmVuY2UtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogVmlydHVhbFByb2R1Y3Q6IExpbmsgQWN0dWFsIHRvIFZpcnR1YWwgUHJvZHVjdFxyXG4gICAqL1xyXG4gIExpbmtBY3R1YWxUb1ZpcnR1YWxQcm9kdWN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkxpbmsgQWN0dWFsIHRvIFZpcnR1YWwgUHJvZHVjdFwiLFxyXG4gICAgY29kZTogXCJWaXJ0dWFsUHJvZHVjdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVkaWNpbmFsLXByb2R1Y3QtY3Jvc3MtcmVmZXJlbmNlLXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=