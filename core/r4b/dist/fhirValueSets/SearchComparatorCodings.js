// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-comparator|4.3.0
/**
 * What Search Comparator Codes are supported in search.
 */
export const SearchComparatorCodings = {
    /**
     * ap: the value for the parameter in the resource is approximately the same to the provided value.
     */
    Approximately: {
        display: "Approximately",
        code: "ap",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * eb: the value for the parameter in the resource ends before the provided value.
     */
    EndsBefore: {
        display: "Ends Before",
        code: "eb",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * eq: the value for the parameter in the resource is equal to the provided value.
     */
    Equals: {
        display: "Equals",
        code: "eq",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * ge: the value for the parameter in the resource is greater or equal to the provided value.
     */
    GreaterOrEquals: {
        display: "Greater or Equals",
        code: "ge",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * gt: the value for the parameter in the resource is greater than the provided value.
     */
    GreaterThan: {
        display: "Greater Than",
        code: "gt",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * le: the value for the parameter in the resource is less or equal to the provided value.
     */
    LessOfEqual: {
        display: "Less of Equal",
        code: "le",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * lt: the value for the parameter in the resource is less than the provided value.
     */
    LessThan: {
        display: "Less Than",
        code: "lt",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * ne: the value for the parameter in the resource is not equal to the provided value.
     */
    NotEquals: {
        display: "Not Equals",
        code: "ne",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * sa: the value for the parameter in the resource starts after the provided value.
     */
    StartsAfter: {
        display: "Starts After",
        code: "sa",
        system: "http://hl7.org/fhir/search-comparator",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoQ29tcGFyYXRvckNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaENvbXBhcmF0b3JDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLHNFQUFzRTtBQThDdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBOEI7SUFDaEU7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zZWFyY2gtY29tcGFyYXRvcnw0LjMuMFxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFdoYXQgU2VhcmNoIENvbXBhcmF0b3IgQ29kZXMgYXJlIHN1cHBvcnRlZCBpbiBzZWFyY2guXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTZWFyY2hDb21wYXJhdG9yQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcDogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBBcHByb3hpbWF0ZWx5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGViOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGVuZHMgYmVmb3JlIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBFbmRzQmVmb3JlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVxOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBFcXVhbHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ2U6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgR3JlYXRlck9yRXF1YWxzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGd0OiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgR3JlYXRlclRoYW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGU6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgbGVzcyBvciBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTGVzc09mRXF1YWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbHQ6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgbGVzcyB0aGFuIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBMZXNzVGhhbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuZTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBub3QgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIE5vdEVxdWFsczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzYTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBzdGFydHMgYWZ0ZXIgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIFN0YXJ0c0FmdGVyOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogV2hhdCBTZWFyY2ggQ29tcGFyYXRvciBDb2RlcyBhcmUgc3VwcG9ydGVkIGluIHNlYXJjaC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hDb21wYXJhdG9yQ29kaW5nczpTZWFyY2hDb21wYXJhdG9yQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcDogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBBcHByb3hpbWF0ZWx5OiB7XHJcbiAgICBkaXNwbGF5OiBcIkFwcHJveGltYXRlbHlcIixcclxuICAgIGNvZGU6IFwiYXBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlYjogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBlbmRzIGJlZm9yZSB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgRW5kc0JlZm9yZToge1xyXG4gICAgZGlzcGxheTogXCJFbmRzIEJlZm9yZVwiLFxyXG4gICAgY29kZTogXCJlYlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLWNvbXBhcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVxOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBFcXVhbHM6IHtcclxuICAgIGRpc3BsYXk6IFwiRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcImVxXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ2U6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgR3JlYXRlck9yRXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkdyZWF0ZXIgb3IgRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcImdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ3Q6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgZ3JlYXRlciB0aGFuIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBHcmVhdGVyVGhhbjoge1xyXG4gICAgZGlzcGxheTogXCJHcmVhdGVyIFRoYW5cIixcclxuICAgIGNvZGU6IFwiZ3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsZTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBsZXNzIG9yIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBMZXNzT2ZFcXVhbDoge1xyXG4gICAgZGlzcGxheTogXCJMZXNzIG9mIEVxdWFsXCIsXHJcbiAgICBjb2RlOiBcImxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbHQ6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgbGVzcyB0aGFuIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBMZXNzVGhhbjoge1xyXG4gICAgZGlzcGxheTogXCJMZXNzIFRoYW5cIixcclxuICAgIGNvZGU6IFwibHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuZTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBub3QgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIE5vdEVxdWFsczoge1xyXG4gICAgZGlzcGxheTogXCJOb3QgRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcIm5lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc2E6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2Ugc3RhcnRzIGFmdGVyIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBTdGFydHNBZnRlcjoge1xyXG4gICAgZGlzcGxheTogXCJTdGFydHMgQWZ0ZXJcIixcclxuICAgIGNvZGU6IFwic2FcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19