// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/type-restful-interaction|4.3.0
/**
 * Operations supported by REST at the type or instance level.
 */
export const TypeRestfulInteractionCodings = {
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: {
        display: "create",
        code: "create",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * delete: Delete a resource.
     */
    Delete: {
        display: "delete",
        code: "delete",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-instance: Retrieve the change history for a particular resource.
     */
    HistoryInstance: {
        display: "history-instance",
        code: "history-instance",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-type: Retrieve the change history for all resources of a particular type.
     */
    HistoryType: {
        display: "history-type",
        code: "history-type",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * patch: Update an existing resource by posting a set of changes to it.
     */
    Patch: {
        display: "patch",
        code: "patch",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * read: Read the current state of the resource.
     */
    Read: {
        display: "read",
        code: "read",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * search-type: Search all resources of the specified type based on some filter criteria.
     */
    SearchType: {
        display: "search-type",
        code: "search-type",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * update: Update an existing resource by its id (or create it if it is new).
     */
    Update: {
        display: "update",
        code: "update",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * vread: Read the state of a specific version of the resource.
     */
    Vread: {
        display: "vread",
        code: "vread",
        system: "http://hl7.org/fhir/restful-interaction",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1R5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQThDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdHlwZS1yZXN0ZnVsLWludGVyYWN0aW9ufDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogT3BlcmF0aW9ucyBzdXBwb3J0ZWQgYnkgUkVTVCBhdCB0aGUgdHlwZSBvciBpbnN0YW5jZSBsZXZlbC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZTogQ3JlYXRlIGEgbmV3IHJlc291cmNlIHdpdGggYSBzZXJ2ZXIgYXNzaWduZWQgaWQuXHJcbiAgICovXHJcbiAgQ3JlYXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRlbGV0ZTogRGVsZXRlIGEgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgRGVsZXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGhpc3RvcnktaW5zdGFuY2U6IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYSBwYXJ0aWN1bGFyIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIEhpc3RvcnlJbnN0YW5jZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBoaXN0b3J5LXR5cGU6IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYWxsIHJlc291cmNlcyBvZiBhIHBhcnRpY3VsYXIgdHlwZS5cclxuICAgKi9cclxuICBIaXN0b3J5VHlwZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXRjaDogVXBkYXRlIGFuIGV4aXN0aW5nIHJlc291cmNlIGJ5IHBvc3RpbmcgYSBzZXQgb2YgY2hhbmdlcyB0byBpdC5cclxuICAgKi9cclxuICBQYXRjaDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWFkOiBSZWFkIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBSZWFkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNlYXJjaC10eXBlOiBTZWFyY2ggYWxsIHJlc291cmNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgYmFzZWQgb24gc29tZSBmaWx0ZXIgY3JpdGVyaWEuXHJcbiAgICovXHJcbiAgU2VhcmNoVHlwZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1cGRhdGU6IFVwZGF0ZSBhbiBleGlzdGluZyByZXNvdXJjZSBieSBpdHMgaWQgKG9yIGNyZWF0ZSBpdCBpZiBpdCBpcyBuZXcpLlxyXG4gICAqL1xyXG4gIFVwZGF0ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB2cmVhZDogUmVhZCB0aGUgc3RhdGUgb2YgYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBWcmVhZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wZXJhdGlvbnMgc3VwcG9ydGVkIGJ5IFJFU1QgYXQgdGhlIHR5cGUgb3IgaW5zdGFuY2UgbGV2ZWwuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGluZ3M6VHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY3JlYXRlOiBDcmVhdGUgYSBuZXcgcmVzb3VyY2Ugd2l0aCBhIHNlcnZlciBhc3NpZ25lZCBpZC5cclxuICAgKi9cclxuICBDcmVhdGU6IHtcclxuICAgIGRpc3BsYXk6IFwiY3JlYXRlXCIsXHJcbiAgICBjb2RlOiBcImNyZWF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGVsZXRlOiBEZWxldGUgYSByZXNvdXJjZS5cclxuICAgKi9cclxuICBEZWxldGU6IHtcclxuICAgIGRpc3BsYXk6IFwiZGVsZXRlXCIsXHJcbiAgICBjb2RlOiBcImRlbGV0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGlzdG9yeS1pbnN0YW5jZTogUmV0cmlldmUgdGhlIGNoYW5nZSBoaXN0b3J5IGZvciBhIHBhcnRpY3VsYXIgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgSGlzdG9yeUluc3RhbmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcImhpc3RvcnktaW5zdGFuY2VcIixcclxuICAgIGNvZGU6IFwiaGlzdG9yeS1pbnN0YW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGlzdG9yeS10eXBlOiBSZXRyaWV2ZSB0aGUgY2hhbmdlIGhpc3RvcnkgZm9yIGFsbCByZXNvdXJjZXMgb2YgYSBwYXJ0aWN1bGFyIHR5cGUuXHJcbiAgICovXHJcbiAgSGlzdG9yeVR5cGU6IHtcclxuICAgIGRpc3BsYXk6IFwiaGlzdG9yeS10eXBlXCIsXHJcbiAgICBjb2RlOiBcImhpc3RvcnktdHlwZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGF0Y2g6IFVwZGF0ZSBhbiBleGlzdGluZyByZXNvdXJjZSBieSBwb3N0aW5nIGEgc2V0IG9mIGNoYW5nZXMgdG8gaXQuXHJcbiAgICovXHJcbiAgUGF0Y2g6IHtcclxuICAgIGRpc3BsYXk6IFwicGF0Y2hcIixcclxuICAgIGNvZGU6IFwicGF0Y2hcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlYWQ6IFJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFJlYWQ6IHtcclxuICAgIGRpc3BsYXk6IFwicmVhZFwiLFxyXG4gICAgY29kZTogXCJyZWFkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzZWFyY2gtdHlwZTogU2VhcmNoIGFsbCByZXNvdXJjZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlIGJhc2VkIG9uIHNvbWUgZmlsdGVyIGNyaXRlcmlhLlxyXG4gICAqL1xyXG4gIFNlYXJjaFR5cGU6IHtcclxuICAgIGRpc3BsYXk6IFwic2VhcmNoLXR5cGVcIixcclxuICAgIGNvZGU6IFwic2VhcmNoLXR5cGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHVwZGF0ZTogVXBkYXRlIGFuIGV4aXN0aW5nIHJlc291cmNlIGJ5IGl0cyBpZCAob3IgY3JlYXRlIGl0IGlmIGl0IGlzIG5ldykuXHJcbiAgICovXHJcbiAgVXBkYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcInVwZGF0ZVwiLFxyXG4gICAgY29kZTogXCJ1cGRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHZyZWFkOiBSZWFkIHRoZSBzdGF0ZSBvZiBhIHNwZWNpZmljIHZlcnNpb24gb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFZyZWFkOiB7XHJcbiAgICBkaXNwbGF5OiBcInZyZWFkXCIsXHJcbiAgICBjb2RlOiBcInZyZWFkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19