// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/article-url-type|4.3.0
/**
 * Code the reason for different URLs, eg abstract and full-text.
 */
export const ArticleUrlTypeCodes = {
    /**
     * abstract: URL to reach the abstract for the article.
     */
    Abstract: "abstract",
    /**
     * abstract-version: URL to reach a specific version of the abstract for the article.
     */
    AbstractVersion: "abstract-version",
    /**
     * compressed-file: Compressed archive file (e.g. a zip file) that contains multiple files
     */
    CompressedFile: "compressed-file",
    /**
     * doi-based: URL derived from DOI.
     */
    DOIBased: "doi-based",
    /**
     * full-text: URL to reach the full-text of the article.
     */
    FullText: "full-text",
    /**
     * full-text-version: URL to reach a specific version of the full-text of the article.
     */
    FullTextVersion: "full-text-version",
    /**
     * json: URL to reach computable content in JSON format.
     */
    JSON: "json",
    /**
     * json-version: URL to reach a specific version of computable content in JSON format.
     */
    JSONVersion: "json-version",
    /**
     * not-specified: Used when URL type is not specified, commonly when only a single URL is provided.
     */
    NotSpecified: "not-specified",
    /**
     * pdf: URL to reach the full-text of the article in PDF form.
     */
    PDF: "pdf",
    /**
     * pdf-version: URL to reach a specific version of the full-text of the article in PDF form.
     */
    PDFVersion: "pdf-version",
    /**
     * supplement: Supplement
     */
    Supplement: "supplement",
    /**
     * supplementary-file-directory: Supplementary file directory
     */
    SupplementaryFileDirectory: "supplementary-file-directory",
    /**
     * webpage: Used when URL type is a webpage, but other codes do not apply.
     */
    Webpage: "webpage",
    /**
     * xml: URL to reach computable content in XML format.
     */
    XML: "xml",
    /**
     * xml-version: URL to reach a specific version of computable content in XML format.
     */
    XMLXmlVersion: "xml-version",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJ0aWNsZVVybFR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQXJ0aWNsZVVybFR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxxRUFBcUU7QUFFckU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQzs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLGtCQUFrQjtJQUNuQzs7T0FFRztJQUNILGNBQWMsRUFBRSxpQkFBaUI7SUFDakM7O09BRUc7SUFDSCxRQUFRLEVBQUUsV0FBVztJQUNyQjs7T0FFRztJQUNILFFBQVEsRUFBRSxXQUFXO0lBQ3JCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLG1CQUFtQjtJQUNwQzs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILFlBQVksRUFBRSxlQUFlO0lBQzdCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILFVBQVUsRUFBRSxhQUFhO0lBQ3pCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFlBQVk7SUFDeEI7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSw4QkFBOEI7SUFDMUQ7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0lBQ1Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsYUFBYTtDQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hcnRpY2xlLXVybC10eXBlfDQuMy4wXHJcblxyXG4vKipcclxuICogQ29kZSB0aGUgcmVhc29uIGZvciBkaWZmZXJlbnQgVVJMcywgZWcgYWJzdHJhY3QgYW5kIGZ1bGwtdGV4dC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBcnRpY2xlVXJsVHlwZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFic3RyYWN0OiBVUkwgdG8gcmVhY2ggdGhlIGFic3RyYWN0IGZvciB0aGUgYXJ0aWNsZS5cclxuICAgKi9cclxuICBBYnN0cmFjdDogXCJhYnN0cmFjdFwiLFxyXG4gIC8qKlxyXG4gICAqIGFic3RyYWN0LXZlcnNpb246IFVSTCB0byByZWFjaCBhIHNwZWNpZmljIHZlcnNpb24gb2YgdGhlIGFic3RyYWN0IGZvciB0aGUgYXJ0aWNsZS5cclxuICAgKi9cclxuICBBYnN0cmFjdFZlcnNpb246IFwiYWJzdHJhY3QtdmVyc2lvblwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbXByZXNzZWQtZmlsZTogQ29tcHJlc3NlZCBhcmNoaXZlIGZpbGUgKGUuZy4gYSB6aXAgZmlsZSkgdGhhdCBjb250YWlucyBtdWx0aXBsZSBmaWxlc1xyXG4gICAqL1xyXG4gIENvbXByZXNzZWRGaWxlOiBcImNvbXByZXNzZWQtZmlsZVwiLFxyXG4gIC8qKlxyXG4gICAqIGRvaS1iYXNlZDogVVJMIGRlcml2ZWQgZnJvbSBET0kuXHJcbiAgICovXHJcbiAgRE9JQmFzZWQ6IFwiZG9pLWJhc2VkXCIsXHJcbiAgLyoqXHJcbiAgICogZnVsbC10ZXh0OiBVUkwgdG8gcmVhY2ggdGhlIGZ1bGwtdGV4dCBvZiB0aGUgYXJ0aWNsZS5cclxuICAgKi9cclxuICBGdWxsVGV4dDogXCJmdWxsLXRleHRcIixcclxuICAvKipcclxuICAgKiBmdWxsLXRleHQtdmVyc2lvbjogVVJMIHRvIHJlYWNoIGEgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgZnVsbC10ZXh0IG9mIHRoZSBhcnRpY2xlLlxyXG4gICAqL1xyXG4gIEZ1bGxUZXh0VmVyc2lvbjogXCJmdWxsLXRleHQtdmVyc2lvblwiLFxyXG4gIC8qKlxyXG4gICAqIGpzb246IFVSTCB0byByZWFjaCBjb21wdXRhYmxlIGNvbnRlbnQgaW4gSlNPTiBmb3JtYXQuXHJcbiAgICovXHJcbiAgSlNPTjogXCJqc29uXCIsXHJcbiAgLyoqXHJcbiAgICoganNvbi12ZXJzaW9uOiBVUkwgdG8gcmVhY2ggYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIGNvbXB1dGFibGUgY29udGVudCBpbiBKU09OIGZvcm1hdC5cclxuICAgKi9cclxuICBKU09OVmVyc2lvbjogXCJqc29uLXZlcnNpb25cIixcclxuICAvKipcclxuICAgKiBub3Qtc3BlY2lmaWVkOiBVc2VkIHdoZW4gVVJMIHR5cGUgaXMgbm90IHNwZWNpZmllZCwgY29tbW9ubHkgd2hlbiBvbmx5IGEgc2luZ2xlIFVSTCBpcyBwcm92aWRlZC5cclxuICAgKi9cclxuICBOb3RTcGVjaWZpZWQ6IFwibm90LXNwZWNpZmllZFwiLFxyXG4gIC8qKlxyXG4gICAqIHBkZjogVVJMIHRvIHJlYWNoIHRoZSBmdWxsLXRleHQgb2YgdGhlIGFydGljbGUgaW4gUERGIGZvcm0uXHJcbiAgICovXHJcbiAgUERGOiBcInBkZlwiLFxyXG4gIC8qKlxyXG4gICAqIHBkZi12ZXJzaW9uOiBVUkwgdG8gcmVhY2ggYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHRoZSBmdWxsLXRleHQgb2YgdGhlIGFydGljbGUgaW4gUERGIGZvcm0uXHJcbiAgICovXHJcbiAgUERGVmVyc2lvbjogXCJwZGYtdmVyc2lvblwiLFxyXG4gIC8qKlxyXG4gICAqIHN1cHBsZW1lbnQ6IFN1cHBsZW1lbnRcclxuICAgKi9cclxuICBTdXBwbGVtZW50OiBcInN1cHBsZW1lbnRcIixcclxuICAvKipcclxuICAgKiBzdXBwbGVtZW50YXJ5LWZpbGUtZGlyZWN0b3J5OiBTdXBwbGVtZW50YXJ5IGZpbGUgZGlyZWN0b3J5XHJcbiAgICovXHJcbiAgU3VwcGxlbWVudGFyeUZpbGVEaXJlY3Rvcnk6IFwic3VwcGxlbWVudGFyeS1maWxlLWRpcmVjdG9yeVwiLFxyXG4gIC8qKlxyXG4gICAqIHdlYnBhZ2U6IFVzZWQgd2hlbiBVUkwgdHlwZSBpcyBhIHdlYnBhZ2UsIGJ1dCBvdGhlciBjb2RlcyBkbyBub3QgYXBwbHkuXHJcbiAgICovXHJcbiAgV2VicGFnZTogXCJ3ZWJwYWdlXCIsXHJcbiAgLyoqXHJcbiAgICogeG1sOiBVUkwgdG8gcmVhY2ggY29tcHV0YWJsZSBjb250ZW50IGluIFhNTCBmb3JtYXQuXHJcbiAgICovXHJcbiAgWE1MOiBcInhtbFwiLFxyXG4gIC8qKlxyXG4gICAqIHhtbC12ZXJzaW9uOiBVUkwgdG8gcmVhY2ggYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIGNvbXB1dGFibGUgY29udGVudCBpbiBYTUwgZm9ybWF0LlxyXG4gICAqL1xyXG4gIFhNTFhtbFZlcnNpb246IFwieG1sLXZlcnNpb25cIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlIHRoZSByZWFzb24gZm9yIGRpZmZlcmVudCBVUkxzLCBlZyBhYnN0cmFjdCBhbmQgZnVsbC10ZXh0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXJ0aWNsZVVybFR5cGVDb2RlVHlwZSA9IHR5cGVvZiBBcnRpY2xlVXJsVHlwZUNvZGVzW2tleW9mIHR5cGVvZiBBcnRpY2xlVXJsVHlwZUNvZGVzXTtcclxuIl19