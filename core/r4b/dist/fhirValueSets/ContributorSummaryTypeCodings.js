// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contributor-summary-type|4.3.0
/**
 * Used to code author list statement, contributorship statement, and such.
 */
export const ContributorSummaryTypeCodings = {
    /**
     * acknowledgement-list: Display of the list of acknowledged parties as a complete string.
     */
    AcknowledgmentList: {
        display: "Acknowledgment list",
        code: "acknowledgement-list",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
    /**
     * acknowledgment-statement: Statement of acknowledgment of contributions beyond those compiled for formal contributorship statements.
     */
    AcknowledgmentStatement: {
        display: "Acknowledgment statement",
        code: "acknowledgment-statement",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
    /**
     * author-string: Display of the author list as a complete string.
     */
    AuthorString: {
        display: "Author string",
        code: "author-string",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
    /**
     * competing-interests-statement: Statement of completing interests related to the creation of the cited artifact. Also called conflicts of interest or declaration of interests.
     */
    CompetingInterestsStatement: {
        display: "Competing interests statement",
        code: "competing-interests-statement",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
    /**
     * contributorship-list: Display of the list of contributors as a complete string.
     */
    ContributorshipList: {
        display: "Contributorship list",
        code: "contributorship-list",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
    /**
     * contributorship-statement: Compiled summary of contributions.
     */
    ContributorshipStatement: {
        display: "Contributorship statement",
        code: "contributorship-statement",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
    /**
     * funding-statement: Statement of financial support for the creation of the cited artifact.
     */
    FundingStatement: {
        display: "Funding statement",
        code: "funding-statement",
        system: "http://terminology.hl7.org/CodeSystem/contributor-summary-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJpYnV0b3JTdW1tYXJ5VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvbnRyaWJ1dG9yU3VtbWFyeVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQXNDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUU7UUFDdkIsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsMEJBQTBCO1FBQ2hDLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSwrQkFBK0I7UUFDeEMsSUFBSSxFQUFFLCtCQUErQjtRQUNyQyxNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RTtJQUNEOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUU7UUFDeEIsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsMkJBQTJCO1FBQ2pDLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekU7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29udHJpYnV0b3Itc3VtbWFyeS10eXBlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVXNlZCB0byBjb2RlIGF1dGhvciBsaXN0IHN0YXRlbWVudCwgY29udHJpYnV0b3JzaGlwIHN0YXRlbWVudCwgYW5kIHN1Y2guXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250cmlidXRvclN1bW1hcnlUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY2tub3dsZWRnZW1lbnQtbGlzdDogRGlzcGxheSBvZiB0aGUgbGlzdCBvZiBhY2tub3dsZWRnZWQgcGFydGllcyBhcyBhIGNvbXBsZXRlIHN0cmluZy5cclxuICAgKi9cclxuICBBY2tub3dsZWRnbWVudExpc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYWNrbm93bGVkZ21lbnQtc3RhdGVtZW50OiBTdGF0ZW1lbnQgb2YgYWNrbm93bGVkZ21lbnQgb2YgY29udHJpYnV0aW9ucyBiZXlvbmQgdGhvc2UgY29tcGlsZWQgZm9yIGZvcm1hbCBjb250cmlidXRvcnNoaXAgc3RhdGVtZW50cy5cclxuICAgKi9cclxuICBBY2tub3dsZWRnbWVudFN0YXRlbWVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBhdXRob3Itc3RyaW5nOiBEaXNwbGF5IG9mIHRoZSBhdXRob3IgbGlzdCBhcyBhIGNvbXBsZXRlIHN0cmluZy5cclxuICAgKi9cclxuICBBdXRob3JTdHJpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tcGV0aW5nLWludGVyZXN0cy1zdGF0ZW1lbnQ6IFN0YXRlbWVudCBvZiBjb21wbGV0aW5nIGludGVyZXN0cyByZWxhdGVkIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGUgY2l0ZWQgYXJ0aWZhY3QuIEFsc28gY2FsbGVkIGNvbmZsaWN0cyBvZiBpbnRlcmVzdCBvciBkZWNsYXJhdGlvbiBvZiBpbnRlcmVzdHMuXHJcbiAgICovXHJcbiAgQ29tcGV0aW5nSW50ZXJlc3RzU3RhdGVtZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbnRyaWJ1dG9yc2hpcC1saXN0OiBEaXNwbGF5IG9mIHRoZSBsaXN0IG9mIGNvbnRyaWJ1dG9ycyBhcyBhIGNvbXBsZXRlIHN0cmluZy5cclxuICAgKi9cclxuICBDb250cmlidXRvcnNoaXBMaXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbnRyaWJ1dG9yc2hpcC1zdGF0ZW1lbnQ6IENvbXBpbGVkIHN1bW1hcnkgb2YgY29udHJpYnV0aW9ucy5cclxuICAgKi9cclxuICBDb250cmlidXRvcnNoaXBTdGF0ZW1lbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZnVuZGluZy1zdGF0ZW1lbnQ6IFN0YXRlbWVudCBvZiBmaW5hbmNpYWwgc3VwcG9ydCBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSBjaXRlZCBhcnRpZmFjdC5cclxuICAgKi9cclxuICBGdW5kaW5nU3RhdGVtZW50OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVXNlZCB0byBjb2RlIGF1dGhvciBsaXN0IHN0YXRlbWVudCwgY29udHJpYnV0b3JzaGlwIHN0YXRlbWVudCwgYW5kIHN1Y2guXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29udHJpYnV0b3JTdW1tYXJ5VHlwZUNvZGluZ3M6Q29udHJpYnV0b3JTdW1tYXJ5VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNrbm93bGVkZ2VtZW50LWxpc3Q6IERpc3BsYXkgb2YgdGhlIGxpc3Qgb2YgYWNrbm93bGVkZ2VkIHBhcnRpZXMgYXMgYSBjb21wbGV0ZSBzdHJpbmcuXHJcbiAgICovXHJcbiAgQWNrbm93bGVkZ21lbnRMaXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkFja25vd2xlZGdtZW50IGxpc3RcIixcclxuICAgIGNvZGU6IFwiYWNrbm93bGVkZ2VtZW50LWxpc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyaWJ1dG9yLXN1bW1hcnktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYWNrbm93bGVkZ21lbnQtc3RhdGVtZW50OiBTdGF0ZW1lbnQgb2YgYWNrbm93bGVkZ21lbnQgb2YgY29udHJpYnV0aW9ucyBiZXlvbmQgdGhvc2UgY29tcGlsZWQgZm9yIGZvcm1hbCBjb250cmlidXRvcnNoaXAgc3RhdGVtZW50cy5cclxuICAgKi9cclxuICBBY2tub3dsZWRnbWVudFN0YXRlbWVudDoge1xyXG4gICAgZGlzcGxheTogXCJBY2tub3dsZWRnbWVudCBzdGF0ZW1lbnRcIixcclxuICAgIGNvZGU6IFwiYWNrbm93bGVkZ21lbnQtc3RhdGVtZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1zdW1tYXJ5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGF1dGhvci1zdHJpbmc6IERpc3BsYXkgb2YgdGhlIGF1dGhvciBsaXN0IGFzIGEgY29tcGxldGUgc3RyaW5nLlxyXG4gICAqL1xyXG4gIEF1dGhvclN0cmluZzoge1xyXG4gICAgZGlzcGxheTogXCJBdXRob3Igc3RyaW5nXCIsXHJcbiAgICBjb2RlOiBcImF1dGhvci1zdHJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyaWJ1dG9yLXN1bW1hcnktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29tcGV0aW5nLWludGVyZXN0cy1zdGF0ZW1lbnQ6IFN0YXRlbWVudCBvZiBjb21wbGV0aW5nIGludGVyZXN0cyByZWxhdGVkIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGUgY2l0ZWQgYXJ0aWZhY3QuIEFsc28gY2FsbGVkIGNvbmZsaWN0cyBvZiBpbnRlcmVzdCBvciBkZWNsYXJhdGlvbiBvZiBpbnRlcmVzdHMuXHJcbiAgICovXHJcbiAgQ29tcGV0aW5nSW50ZXJlc3RzU3RhdGVtZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBldGluZyBpbnRlcmVzdHMgc3RhdGVtZW50XCIsXHJcbiAgICBjb2RlOiBcImNvbXBldGluZy1pbnRlcmVzdHMtc3RhdGVtZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1zdW1tYXJ5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbnRyaWJ1dG9yc2hpcC1saXN0OiBEaXNwbGF5IG9mIHRoZSBsaXN0IG9mIGNvbnRyaWJ1dG9ycyBhcyBhIGNvbXBsZXRlIHN0cmluZy5cclxuICAgKi9cclxuICBDb250cmlidXRvcnNoaXBMaXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbnRyaWJ1dG9yc2hpcCBsaXN0XCIsXHJcbiAgICBjb2RlOiBcImNvbnRyaWJ1dG9yc2hpcC1saXN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1zdW1tYXJ5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbnRyaWJ1dG9yc2hpcC1zdGF0ZW1lbnQ6IENvbXBpbGVkIHN1bW1hcnkgb2YgY29udHJpYnV0aW9ucy5cclxuICAgKi9cclxuICBDb250cmlidXRvcnNoaXBTdGF0ZW1lbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29udHJpYnV0b3JzaGlwIHN0YXRlbWVudFwiLFxyXG4gICAgY29kZTogXCJjb250cmlidXRvcnNoaXAtc3RhdGVtZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmlidXRvci1zdW1tYXJ5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZ1bmRpbmctc3RhdGVtZW50OiBTdGF0ZW1lbnQgb2YgZmluYW5jaWFsIHN1cHBvcnQgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgY2l0ZWQgYXJ0aWZhY3QuXHJcbiAgICovXHJcbiAgRnVuZGluZ1N0YXRlbWVudDoge1xyXG4gICAgZGlzcGxheTogXCJGdW5kaW5nIHN0YXRlbWVudFwiLFxyXG4gICAgY29kZTogXCJmdW5kaW5nLXN0YXRlbWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJpYnV0b3Itc3VtbWFyeS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19