// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-selection-behavior|4.3.0
/**
 * Defines selection behavior of a group.
 */
export const ActionSelectionBehaviorCodings = {
    /**
     * all: All the actions in the group must be selected as a single unit.
     */
    All: {
        display: "All",
        code: "all",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * all-or-none: All the actions in the group are meant to be chosen as a single unit: either all must be selected by the end user, or none may be selected.
     */
    AllOrNone: {
        display: "All Or None",
        code: "all-or-none",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * any: Any number of the actions in the group may be chosen, from zero to all.
     */
    Any: {
        display: "Any",
        code: "any",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * at-most-one: The end user may choose zero or at most one of the actions in the group.
     */
    AtMostOne: {
        display: "At Most One",
        code: "at-most-one",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * exactly-one: The end user must choose one and only one of the selectable actions in the group. The user SHALL NOT choose none of the actions in the group.
     */
    ExactlyOne: {
        display: "Exactly One",
        code: "exactly-one",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * one-or-more: The end user must choose a minimum of one, and as many additional as desired.
     */
    OneOrMore: {
        display: "One Or More",
        code: "one-or-more",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uU2VsZWN0aW9uQmVoYXZpb3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BY3Rpb25TZWxlY3Rpb25CZWhhdmlvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBa0M5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FjdGlvbi1zZWxlY3Rpb24tYmVoYXZpb3J8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHNlbGVjdGlvbiBiZWhhdmlvciBvZiBhIGdyb3VwLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQWN0aW9uU2VsZWN0aW9uQmVoYXZpb3JDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFsbDogQWxsIHRoZSBhY3Rpb25zIGluIHRoZSBncm91cCBtdXN0IGJlIHNlbGVjdGVkIGFzIGEgc2luZ2xlIHVuaXQuXHJcbiAgICovXHJcbiAgQWxsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGFsbC1vci1ub25lOiBBbGwgdGhlIGFjdGlvbnMgaW4gdGhlIGdyb3VwIGFyZSBtZWFudCB0byBiZSBjaG9zZW4gYXMgYSBzaW5nbGUgdW5pdDogZWl0aGVyIGFsbCBtdXN0IGJlIHNlbGVjdGVkIGJ5IHRoZSBlbmQgdXNlciwgb3Igbm9uZSBtYXkgYmUgc2VsZWN0ZWQuXHJcbiAgICovXHJcbiAgQWxsT3JOb25lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGFueTogQW55IG51bWJlciBvZiB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAgbWF5IGJlIGNob3NlbiwgZnJvbSB6ZXJvIHRvIGFsbC5cclxuICAgKi9cclxuICBBbnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYXQtbW9zdC1vbmU6IFRoZSBlbmQgdXNlciBtYXkgY2hvb3NlIHplcm8gb3IgYXQgbW9zdCBvbmUgb2YgdGhlIGFjdGlvbnMgaW4gdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIEF0TW9zdE9uZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBleGFjdGx5LW9uZTogVGhlIGVuZCB1c2VyIG11c3QgY2hvb3NlIG9uZSBhbmQgb25seSBvbmUgb2YgdGhlIHNlbGVjdGFibGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAuIFRoZSB1c2VyIFNIQUxMIE5PVCBjaG9vc2Ugbm9uZSBvZiB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgRXhhY3RseU9uZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbmUtb3ItbW9yZTogVGhlIGVuZCB1c2VyIG11c3QgY2hvb3NlIGEgbWluaW11bSBvZiBvbmUsIGFuZCBhcyBtYW55IGFkZGl0aW9uYWwgYXMgZGVzaXJlZC5cclxuICAgKi9cclxuICBPbmVPck1vcmU6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHNlbGVjdGlvbiBiZWhhdmlvciBvZiBhIGdyb3VwLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFjdGlvblNlbGVjdGlvbkJlaGF2aW9yQ29kaW5nczpBY3Rpb25TZWxlY3Rpb25CZWhhdmlvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWxsOiBBbGwgdGhlIGFjdGlvbnMgaW4gdGhlIGdyb3VwIG11c3QgYmUgc2VsZWN0ZWQgYXMgYSBzaW5nbGUgdW5pdC5cclxuICAgKi9cclxuICBBbGw6IHtcclxuICAgIGRpc3BsYXk6IFwiQWxsXCIsXHJcbiAgICBjb2RlOiBcImFsbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYWxsLW9yLW5vbmU6IEFsbCB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAgYXJlIG1lYW50IHRvIGJlIGNob3NlbiBhcyBhIHNpbmdsZSB1bml0OiBlaXRoZXIgYWxsIG11c3QgYmUgc2VsZWN0ZWQgYnkgdGhlIGVuZCB1c2VyLCBvciBub25lIG1heSBiZSBzZWxlY3RlZC5cclxuICAgKi9cclxuICBBbGxPck5vbmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQWxsIE9yIE5vbmVcIixcclxuICAgIGNvZGU6IFwiYWxsLW9yLW5vbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1zZWxlY3Rpb24tYmVoYXZpb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGFueTogQW55IG51bWJlciBvZiB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAgbWF5IGJlIGNob3NlbiwgZnJvbSB6ZXJvIHRvIGFsbC5cclxuICAgKi9cclxuICBBbnk6IHtcclxuICAgIGRpc3BsYXk6IFwiQW55XCIsXHJcbiAgICBjb2RlOiBcImFueVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYXQtbW9zdC1vbmU6IFRoZSBlbmQgdXNlciBtYXkgY2hvb3NlIHplcm8gb3IgYXQgbW9zdCBvbmUgb2YgdGhlIGFjdGlvbnMgaW4gdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIEF0TW9zdE9uZToge1xyXG4gICAgZGlzcGxheTogXCJBdCBNb3N0IE9uZVwiLFxyXG4gICAgY29kZTogXCJhdC1tb3N0LW9uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXhhY3RseS1vbmU6IFRoZSBlbmQgdXNlciBtdXN0IGNob29zZSBvbmUgYW5kIG9ubHkgb25lIG9mIHRoZSBzZWxlY3RhYmxlIGFjdGlvbnMgaW4gdGhlIGdyb3VwLiBUaGUgdXNlciBTSEFMTCBOT1QgY2hvb3NlIG5vbmUgb2YgdGhlIGFjdGlvbnMgaW4gdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIEV4YWN0bHlPbmU6IHtcclxuICAgIGRpc3BsYXk6IFwiRXhhY3RseSBPbmVcIixcclxuICAgIGNvZGU6IFwiZXhhY3RseS1vbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1zZWxlY3Rpb24tYmVoYXZpb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9uZS1vci1tb3JlOiBUaGUgZW5kIHVzZXIgbXVzdCBjaG9vc2UgYSBtaW5pbXVtIG9mIG9uZSwgYW5kIGFzIG1hbnkgYWRkaXRpb25hbCBhcyBkZXNpcmVkLlxyXG4gICAqL1xyXG4gIE9uZU9yTW9yZToge1xyXG4gICAgZGlzcGxheTogXCJPbmUgT3IgTW9yZVwiLFxyXG4gICAgY29kZTogXCJvbmUtb3ItbW9yZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvclwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==