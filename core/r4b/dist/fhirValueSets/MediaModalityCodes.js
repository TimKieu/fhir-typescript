// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/media-modality|4.3.0
/**
 * Detailed information about the type of the image - its kind, purpose, or the kind of equipment used to generate it.
 */
export const MediaModalityCodes = {
    /**
     * AR: Autorefraction device
     */
    Autorefraction: "AR",
    /**
     * BDUS: Ultrasound Bone Densitometry (modality)
     */
    UltrasoundBoneDensitometry: "BDUS",
    /**
     * BI: Biomagnetic imaging device
     */
    BiomagneticImaging: "BI",
    /**
     * BMD: Bone Mineral Densitometry by X-Ray (modality), including dual-energy X-Ray absorptiometry (DXA) and morphometric X-Ray absorptiometry (MXA)
     */
    BoneMineralDensitometry: "BMD",
    /**
     * CR: Computed Radiography device
     */
    ComputedRadiography: "CR",
    /**
     * CT: Computed Tomography device
     */
    ComputedTomography: "CT",
    /**
     * DG: Diaphanography device
     */
    Diaphanography: "DG",
    /**
     * diagram: A diagram. Often used in diagnostic reports
     */
    Diagram: "diagram",
    /**
     * Code: DMS
     */
    Dermoscopy: "DMS",
    /**
     * DX: Digital Radiography device
     */
    DigitalRadiography: "DX",
    /**
     * ECG: Electrocardiography device
     */
    Electrocardiography: "ECG",
    /**
     * Code: EEG
     */
    Electroencephalography: "EEG",
    /**
     * Code: EMG
     */
    Electromyography: "EMG",
    /**
     * Code: EOG
     */
    Electrooculography: "EOG",
    /**
     * EPS: Cardiac Electrophysiology device
     */
    CardiacElectrophysiology: "EPS",
    /**
     * ES: Endoscopy device
     */
    Endoscopy: "ES",
    /**
     * face: A face scan used for identification purposes
     */
    FaceScan: "face",
    /**
     * fax: A digital record of a fax document
     */
    Fax: "fax",
    /**
     * fingerprint: A finger print scan used for identification purposes
     */
    Fingerprint: "fingerprint",
    /**
     * GM: General Microscopy device
     */
    GeneralMicroscopy: "GM",
    /**
     * HD: Hemodynamic Waveform acquisition device
     */
    HemodynamicWaveform: "HD",
    /**
     * IO: Intra-oral Radiography device
     */
    IntraOralRadiography: "IO",
    /**
     * iris: An iris scan used for identification purposes
     */
    IrisScan: "iris",
    /**
     * IVOCT: An acquisition device, process or method that performs intravascular optical coherence tomography
     */
    IntravascularOpticalCoherenceTomography: "IVOCT",
    /**
     * IVUS: Intravascular Ultrasound device
     */
    IntravascularUltrasound: "IVUS",
    /**
     * KER: Keratometry device
     */
    Keratometry: "KER",
    /**
     * LEN: Lensometry device
     */
    Lensometry: "LEN",
    /**
     * LS: Laser surface scan device
     */
    LaserSurfaceScan: "LS",
    /**
     * MG: Mammography device
     */
    Mammography: "MG",
    /**
     * MR: Magnetic Resonance device
     */
    MagneticResonance: "MR",
    /**
     * NM: Nuclear Medicine device
     */
    NuclearMedicine: "NM",
    /**
     * OAM: Measurements of the axial length of the eye, which are done by various devices
     */
    OphthalmicAxialMeasurements: "OAM",
    /**
     * OCT: Modality device that uses an interferometric, non-invasive optical tomographic technique to image 2D slices and 3D volumes of tissue using visible and near visible frequencies
     */
    OpticalCoherenceTomography: "OCT",
    /**
     * OP: Ophthalmic photography modality
     */
    OphthalmicPhotography: "OP",
    /**
     * OPM: Modality device that measures corneal topography, corneal or retinal thickness, and other similar parameters that are typically displayed as maps
     */
    OphthalmicMapping: "OPM",
    /**
     * OPT: Tomography of the eye acquired by a modality that is based on light and optical principles. Tomography based on other principles, such as ultrasound, is excluded
     */
    OphthalmicTomography: "OPT",
    /**
     * Code: OPTBSV
     */
    OphthalmicTomographyBScanVolumeAnalysis: "OPTBSV",
    /**
     * Code: OPTENF
     */
    OphthalmicTomographyEnFace: "OPTENF",
    /**
     * OPV: Modality device that measures visual fields and perform visual perimetry
     */
    OphthalmicVisualField: "OPV",
    /**
     * OSS: An acquisition device, process or method that performs optical surface scanning
     */
    OpticalSurvaceScanner: "OSS",
    /**
     * palm: A palm scan used for identification purposes
     */
    PalmScan: "palm",
    /**
     * Code: POS
     */
    PositionSensor: "POS",
    /**
     * PT: Positron emission tomography (PET) device
     */
    PositronEmissionTomography: "PT",
    /**
     * PX: Panoramic X-Ray device
     */
    PanoramicXRay: "PX",
    /**
     * Code: RESP
     */
    RespiratoryWaveform: "RESP",
    /**
     * retina: A retinal image used for identification purposes
     */
    RetinaScan: "retina",
    /**
     * RF: Radiofluoroscopy device
     */
    Radiofluoroscopy: "RF",
    /**
     * RG: Radiographic imaging (conventional film/screen)
     */
    RadiographicImaging: "RG",
    /**
     * RTIMAGE: Radiotherapy Imaging device; includes portal imaging
     */
    RadiotherapyImage: "RTIMAGE",
    /**
     * scan: A digital scan of a document. This is reserved for when there is not enough metadata to create a document reference
     */
    ScannedDocument: "scan",
    /**
     * SM: Slide Microscopy
     */
    SlideMicroscopy: "SM",
    /**
     * SRF: Subjective Refraction device
     */
    SubjectiveRefraction: "SRF",
    /**
     * TG: Thermography device
     */
    Thermography: "TG",
    /**
     * US: Ultrasound device
     */
    Ultrasound: "US",
    /**
     * VA: Visual Acuity device
     */
    VisualAcuity: "VA",
    /**
     * XA: X-Ray Angiography device
     */
    XRayAngiography: "XA",
    /**
     * XC: External-camera Photography device
     */
    ExternalCameraPhotography: "XC",
};
//# sourceMappingURL=data:application/json;base64,