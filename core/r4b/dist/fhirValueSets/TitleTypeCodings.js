// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/title-type|4.3.0
/**
 * Used to express the reason and specific aspect for the variant title, such as language and specific language.
 */
export const TitleTypeCodings = {
    /**
     * acronym: Abbreviation used as title
     */
    Acronym: {
        display: "Acronym",
        code: "acronym",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * autotranslated: Machine translated form of title in a different language, language element codes the language into which it was translated by machine.
     */
    DifferentLanguageDerivedFromAutotranslation: {
        display: "Different language derived from autotranslation",
        code: "autotranslated",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * duplicate-uid: An alternative form of the title in two or more entries, e.g. in multiple medline entries
     */
    DifferentTextForTheSameObjectWithADifferentIdentifier: {
        display: "Different text for the same object with a different identifier",
        code: "duplicate-uid",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * earlier-title: Alternative form of title in an earlier version such as epub ahead of print.
     */
    DifferentTextInAnEarlierVersion: {
        display: "Different text in an earlier version",
        code: "earlier-title",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * human-use: Human-friendly title
     */
    HumanUse: {
        display: "Human use",
        code: "human-use",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * language: Additional form of title in a different language.
     */
    DifferentLanguage: {
        display: "Different language",
        code: "language",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * machine-use: Machine-friendly title
     */
    MachineUse: {
        display: "Machine use",
        code: "machine-use",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * official: The official or authoritative title.
     */
    OfficialTitle: {
        display: "Official title",
        code: "official",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * plain-language: Title using language common to lay public discourse.
     */
    PlainLanguageTitle: {
        display: "Plain language title",
        code: "plain-language",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * primary: Main title for common use. The primary title used for representation if multiple titles exist.
     */
    PrimaryTitle: {
        display: "Primary title",
        code: "primary",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * scientific: Title using scientific terminology.
     */
    ScientificTitle: {
        display: "Scientific title",
        code: "scientific",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * short-title: Brief title (e.g. 'running title' or title used in page headers)
     */
    ShortTitle: {
        display: "Short title",
        code: "short-title",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
    /**
     * subtitle: Subtitle or secondary title.
     */
    Subtitle: {
        display: "Subtitle",
        code: "subtitle",
        system: "http://terminology.hl7.org/CodeSystem/title-type",
    },
};
//# sourceMappingURL=data:application/json;base64,