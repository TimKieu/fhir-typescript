// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/subscription-search-modifier|4.3.0
/**
 * FHIR search modifiers allowed for use in Subscriptions and SubscriptionTopics.
 */
export const SubscriptionSearchModifierCodings = {
    /**
     * =: Used to match a value according to FHIR Search rules (e.g., Patient/123, Encounter/2002).
     */
    Equals: {
        display: "=",
        code: "=",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * above: The search parameter is a concept with the form [system]|[code], and the search parameter tests whether the coding in a resource subsumes the specified search code.
     */
    Above: {
        display: "Above",
        code: "above",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * ap: The value for the parameter in the resource is approximately the same to the provided value. Note that the recommended value for the approximation is 10% of the stated value (or for a date, 10% of the gap between now and the date), but systems may choose other values where appropriate.
     */
    Approximately: {
        display: "Approximately",
        code: "ap",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * below: The search parameter is a concept with the form [system]|[code], and the search parameter tests whether the coding in a resource is subsumed by the specified search code.
     */
    Below: {
        display: "Below",
        code: "below",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * eb: The value for the parameter in the resource ends before the provided value.
     */
    EndsBefore: {
        display: "Ends Before",
        code: "eb",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * eq: The value for the parameter in the resource is equal to the provided value.
     */
    Equal: {
        display: "Equal",
        code: "eq",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * ge: The value for the parameter in the resource is greater or equal to the provided value.
     */
    GreaterThanOrEqual: {
        display: "Greater Than or Equal",
        code: "ge",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * gt: The value for the parameter in the resource is greater than the provided value.
     */
    GreaterThan: {
        display: "Greater Than",
        code: "gt",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * in: The search parameter is a member of a Group or List, or the search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the value is present in the specified Group, List, or Value Set.
     */
    In: {
        display: "In",
        code: "in",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * le: The value for the parameter in the resource is less or equal to the provided value.
     */
    LessThanOrEqual: {
        display: "Less Than or Equal",
        code: "le",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * lt: The value for the parameter in the resource is less than the provided value.
     */
    LessThan: {
        display: "Less Than",
        code: "lt",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * ne: The value for the parameter in the resource is not equal to the provided value.
     */
    NotEqual: {
        display: "Not Equal",
        code: "ne",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * not-in: The search parameter is a member of a Group or List, or the search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the value is NOT present in the specified Group, List, or Value Set.
     */
    NotIn: {
        display: "Not In",
        code: "not-in",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * of-type: The search parameter has the format system|code|value, where the system and code refer to a Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
     */
    OfType: {
        display: "Of Type",
        code: "of-type",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
    /**
     * sa: The value for the parameter in the resource starts after the provided value.
     */
    StartsAfter: {
        display: "Starts After",
        code: "sa",
        system: "http://terminology.hl7.org/CodeSystem/subscription-search-modifier",
    },
};
//# sourceMappingURL=data:application/json;base64,