// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/directness|4.3.0
/**
 * The quality of how direct the match is.
 */
export const DirectnessCodings = {
    /**
     * exact: Exact matching quality between observed and intended variable, so no concern for indirectness in evidence interpretation.
     */
    ExactMatchBetweenObservedAndIntendedVariable: {
        display: "Exact match between observed and intended variable",
        code: "exact",
        system: "http://terminology.hl7.org/CodeSystem/directness",
    },
    /**
     * high: High matching quality between observed and intended variable, so little concern for indirectness in evidence interpretation.
     */
    HighQualityMatchBetweenObservedAndIntendedVariable: {
        display: "High quality match between observed and intended variable",
        code: "high",
        system: "http://terminology.hl7.org/CodeSystem/directness",
    },
    /**
     * low: Low matching quality between observed and intended variable, so very serious concern for indirectness in evidence interpretation.
     */
    LowQualityMatchBetweenObservedAndIntendedVariable: {
        display: "Low quality match between observed and intended variable",
        code: "low",
        system: "http://terminology.hl7.org/CodeSystem/directness",
    },
    /**
     * moderate: Moderate matching quality between observed and intended variable, so serious concern for indirectness in evidence interpretation.
     */
    ModerateQualityMatchBetweenObservedAndIntendedVariable: {
        display: "Moderate quality match between observed and intended variable",
        code: "moderate",
        system: "http://terminology.hl7.org/CodeSystem/directness",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlyZWN0bmVzc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RpcmVjdG5lc3NDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLCtEQUErRDtBQTBCL0Q7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBd0I7SUFDcEQ7O09BRUc7SUFDSCw0Q0FBNEMsRUFBRTtRQUM1QyxPQUFPLEVBQUUsb0RBQW9EO1FBQzdELElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsa0RBQWtELEVBQUU7UUFDbEQsT0FBTyxFQUFFLDJEQUEyRDtRQUNwRSxJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILGlEQUFpRCxFQUFFO1FBQ2pELE9BQU8sRUFBRSwwREFBMEQ7UUFDbkUsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxzREFBc0QsRUFBRTtRQUN0RCxPQUFPLEVBQUUsK0RBQStEO1FBQ3hFLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9kaXJlY3RuZXNzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHF1YWxpdHkgb2YgaG93IGRpcmVjdCB0aGUgbWF0Y2ggaXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEaXJlY3RuZXNzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBleGFjdDogRXhhY3QgbWF0Y2hpbmcgcXVhbGl0eSBiZXR3ZWVuIG9ic2VydmVkIGFuZCBpbnRlbmRlZCB2YXJpYWJsZSwgc28gbm8gY29uY2VybiBmb3IgaW5kaXJlY3RuZXNzIGluIGV2aWRlbmNlIGludGVycHJldGF0aW9uLlxyXG4gICAqL1xyXG4gIEV4YWN0TWF0Y2hCZXR3ZWVuT2JzZXJ2ZWRBbmRJbnRlbmRlZFZhcmlhYmxlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGhpZ2g6IEhpZ2ggbWF0Y2hpbmcgcXVhbGl0eSBiZXR3ZWVuIG9ic2VydmVkIGFuZCBpbnRlbmRlZCB2YXJpYWJsZSwgc28gbGl0dGxlIGNvbmNlcm4gZm9yIGluZGlyZWN0bmVzcyBpbiBldmlkZW5jZSBpbnRlcnByZXRhdGlvbi5cclxuICAgKi9cclxuICBIaWdoUXVhbGl0eU1hdGNoQmV0d2Vlbk9ic2VydmVkQW5kSW50ZW5kZWRWYXJpYWJsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsb3c6IExvdyBtYXRjaGluZyBxdWFsaXR5IGJldHdlZW4gb2JzZXJ2ZWQgYW5kIGludGVuZGVkIHZhcmlhYmxlLCBzbyB2ZXJ5IHNlcmlvdXMgY29uY2VybiBmb3IgaW5kaXJlY3RuZXNzIGluIGV2aWRlbmNlIGludGVycHJldGF0aW9uLlxyXG4gICAqL1xyXG4gIExvd1F1YWxpdHlNYXRjaEJldHdlZW5PYnNlcnZlZEFuZEludGVuZGVkVmFyaWFibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbW9kZXJhdGU6IE1vZGVyYXRlIG1hdGNoaW5nIHF1YWxpdHkgYmV0d2VlbiBvYnNlcnZlZCBhbmQgaW50ZW5kZWQgdmFyaWFibGUsIHNvIHNlcmlvdXMgY29uY2VybiBmb3IgaW5kaXJlY3RuZXNzIGluIGV2aWRlbmNlIGludGVycHJldGF0aW9uLlxyXG4gICAqL1xyXG4gIE1vZGVyYXRlUXVhbGl0eU1hdGNoQmV0d2Vlbk9ic2VydmVkQW5kSW50ZW5kZWRWYXJpYWJsZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBxdWFsaXR5IG9mIGhvdyBkaXJlY3QgdGhlIG1hdGNoIGlzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERpcmVjdG5lc3NDb2RpbmdzOkRpcmVjdG5lc3NDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGV4YWN0OiBFeGFjdCBtYXRjaGluZyBxdWFsaXR5IGJldHdlZW4gb2JzZXJ2ZWQgYW5kIGludGVuZGVkIHZhcmlhYmxlLCBzbyBubyBjb25jZXJuIGZvciBpbmRpcmVjdG5lc3MgaW4gZXZpZGVuY2UgaW50ZXJwcmV0YXRpb24uXHJcbiAgICovXHJcbiAgRXhhY3RNYXRjaEJldHdlZW5PYnNlcnZlZEFuZEludGVuZGVkVmFyaWFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiRXhhY3QgbWF0Y2ggYmV0d2VlbiBvYnNlcnZlZCBhbmQgaW50ZW5kZWQgdmFyaWFibGVcIixcclxuICAgIGNvZGU6IFwiZXhhY3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RpcmVjdG5lc3NcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGhpZ2g6IEhpZ2ggbWF0Y2hpbmcgcXVhbGl0eSBiZXR3ZWVuIG9ic2VydmVkIGFuZCBpbnRlbmRlZCB2YXJpYWJsZSwgc28gbGl0dGxlIGNvbmNlcm4gZm9yIGluZGlyZWN0bmVzcyBpbiBldmlkZW5jZSBpbnRlcnByZXRhdGlvbi5cclxuICAgKi9cclxuICBIaWdoUXVhbGl0eU1hdGNoQmV0d2Vlbk9ic2VydmVkQW5kSW50ZW5kZWRWYXJpYWJsZToge1xyXG4gICAgZGlzcGxheTogXCJIaWdoIHF1YWxpdHkgbWF0Y2ggYmV0d2VlbiBvYnNlcnZlZCBhbmQgaW50ZW5kZWQgdmFyaWFibGVcIixcclxuICAgIGNvZGU6IFwiaGlnaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGlyZWN0bmVzc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbG93OiBMb3cgbWF0Y2hpbmcgcXVhbGl0eSBiZXR3ZWVuIG9ic2VydmVkIGFuZCBpbnRlbmRlZCB2YXJpYWJsZSwgc28gdmVyeSBzZXJpb3VzIGNvbmNlcm4gZm9yIGluZGlyZWN0bmVzcyBpbiBldmlkZW5jZSBpbnRlcnByZXRhdGlvbi5cclxuICAgKi9cclxuICBMb3dRdWFsaXR5TWF0Y2hCZXR3ZWVuT2JzZXJ2ZWRBbmRJbnRlbmRlZFZhcmlhYmxlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxvdyBxdWFsaXR5IG1hdGNoIGJldHdlZW4gb2JzZXJ2ZWQgYW5kIGludGVuZGVkIHZhcmlhYmxlXCIsXHJcbiAgICBjb2RlOiBcImxvd1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGlyZWN0bmVzc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbW9kZXJhdGU6IE1vZGVyYXRlIG1hdGNoaW5nIHF1YWxpdHkgYmV0d2VlbiBvYnNlcnZlZCBhbmQgaW50ZW5kZWQgdmFyaWFibGUsIHNvIHNlcmlvdXMgY29uY2VybiBmb3IgaW5kaXJlY3RuZXNzIGluIGV2aWRlbmNlIGludGVycHJldGF0aW9uLlxyXG4gICAqL1xyXG4gIE1vZGVyYXRlUXVhbGl0eU1hdGNoQmV0d2Vlbk9ic2VydmVkQW5kSW50ZW5kZWRWYXJpYWJsZToge1xyXG4gICAgZGlzcGxheTogXCJNb2RlcmF0ZSBxdWFsaXR5IG1hdGNoIGJldHdlZW4gb2JzZXJ2ZWQgYW5kIGludGVuZGVkIHZhcmlhYmxlXCIsXHJcbiAgICBjb2RlOiBcIm1vZGVyYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXJlY3RuZXNzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19