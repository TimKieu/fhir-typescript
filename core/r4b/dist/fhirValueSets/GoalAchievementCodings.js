// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/goal-achievement|4.3.0
/**
 * Describes the progression, or lack thereof, towards the goal against the target.
 */
export const GoalAchievementCodings = {
    /**
     * achieved: The goal has been met.
     */
    Achieved: {
        display: "Achieved",
        code: "achieved",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * improving: The goal is being sought, and is progressing.
     */
    Improving: {
        display: "Improving",
        code: "improving",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * in-progress: The goal is being sought but has not yet been reached. (Also applies if the goal was reached in the past but there has been regression and the goal is again being sought).
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * no-change: The goal is being sought, but the trend is flat.
     */
    NoChange: {
        display: "No Change",
        code: "no-change",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * no-progress: The goal has not been met and little to no progress towards target.
     */
    NoProgress: {
        display: "No Progress",
        code: "no-progress",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * not-achieved: The goal has not been met and there might or might not have been progress towards target.
     */
    NotAchieved: {
        display: "Not Achieved",
        code: "not-achieved",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * not-attainable: The goal is not possible to be met.
     */
    NotAttainable: {
        display: "Not Attainable",
        code: "not-attainable",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * sustaining: The goal has been met, but ongoing activity is needed to sustain the goal objective.
     */
    Sustaining: {
        display: "Sustaining",
        code: "sustaining",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * worsening: The goal is being sought, but is regressing.
     */
    Worsening: {
        display: "Worsening",
        code: "worsening",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR29hbEFjaGlldmVtZW50Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvR29hbEFjaGlldmVtZW50Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxxRUFBcUU7QUE4Q3JFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9nb2FsLWFjaGlldmVtZW50fDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSBwcm9ncmVzc2lvbiwgb3IgbGFjayB0aGVyZW9mLCB0b3dhcmRzIHRoZSBnb2FsIGFnYWluc3QgdGhlIHRhcmdldC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEdvYWxBY2hpZXZlbWVudENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNoaWV2ZWQ6IFRoZSBnb2FsIGhhcyBiZWVuIG1ldC5cclxuICAgKi9cclxuICBBY2hpZXZlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbXByb3Zpbmc6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYW5kIGlzIHByb2dyZXNzaW5nLlxyXG4gICAqL1xyXG4gIEltcHJvdmluZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0IGJ1dCBoYXMgbm90IHlldCBiZWVuIHJlYWNoZWQuIChBbHNvIGFwcGxpZXMgaWYgdGhlIGdvYWwgd2FzIHJlYWNoZWQgaW4gdGhlIHBhc3QgYnV0IHRoZXJlIGhhcyBiZWVuIHJlZ3Jlc3Npb24gYW5kIHRoZSBnb2FsIGlzIGFnYWluIGJlaW5nIHNvdWdodCkuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuby1jaGFuZ2U6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYnV0IHRoZSB0cmVuZCBpcyBmbGF0LlxyXG4gICAqL1xyXG4gIE5vQ2hhbmdlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vLXByb2dyZXNzOiBUaGUgZ29hbCBoYXMgbm90IGJlZW4gbWV0IGFuZCBsaXR0bGUgdG8gbm8gcHJvZ3Jlc3MgdG93YXJkcyB0YXJnZXQuXHJcbiAgICovXHJcbiAgTm9Qcm9ncmVzczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3QtYWNoaWV2ZWQ6IFRoZSBnb2FsIGhhcyBub3QgYmVlbiBtZXQgYW5kIHRoZXJlIG1pZ2h0IG9yIG1pZ2h0IG5vdCBoYXZlIGJlZW4gcHJvZ3Jlc3MgdG93YXJkcyB0YXJnZXQuXHJcbiAgICovXHJcbiAgTm90QWNoaWV2ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90LWF0dGFpbmFibGU6IFRoZSBnb2FsIGlzIG5vdCBwb3NzaWJsZSB0byBiZSBtZXQuXHJcbiAgICovXHJcbiAgTm90QXR0YWluYWJsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzdXN0YWluaW5nOiBUaGUgZ29hbCBoYXMgYmVlbiBtZXQsIGJ1dCBvbmdvaW5nIGFjdGl2aXR5IGlzIG5lZWRlZCB0byBzdXN0YWluIHRoZSBnb2FsIG9iamVjdGl2ZS5cclxuICAgKi9cclxuICBTdXN0YWluaW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHdvcnNlbmluZzogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0LCBidXQgaXMgcmVncmVzc2luZy5cclxuICAgKi9cclxuICBXb3JzZW5pbmc6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgdGhlIHByb2dyZXNzaW9uLCBvciBsYWNrIHRoZXJlb2YsIHRvd2FyZHMgdGhlIGdvYWwgYWdhaW5zdCB0aGUgdGFyZ2V0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEdvYWxBY2hpZXZlbWVudENvZGluZ3M6R29hbEFjaGlldmVtZW50Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY2hpZXZlZDogVGhlIGdvYWwgaGFzIGJlZW4gbWV0LlxyXG4gICAqL1xyXG4gIEFjaGlldmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjaGlldmVkXCIsXHJcbiAgICBjb2RlOiBcImFjaGlldmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbXByb3Zpbmc6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYW5kIGlzIHByb2dyZXNzaW5nLlxyXG4gICAqL1xyXG4gIEltcHJvdmluZzoge1xyXG4gICAgZGlzcGxheTogXCJJbXByb3ZpbmdcIixcclxuICAgIGNvZGU6IFwiaW1wcm92aW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0IGJ1dCBoYXMgbm90IHlldCBiZWVuIHJlYWNoZWQuIChBbHNvIGFwcGxpZXMgaWYgdGhlIGdvYWwgd2FzIHJlYWNoZWQgaW4gdGhlIHBhc3QgYnV0IHRoZXJlIGhhcyBiZWVuIHJlZ3Jlc3Npb24gYW5kIHRoZSBnb2FsIGlzIGFnYWluIGJlaW5nIHNvdWdodCkuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm8tY2hhbmdlOiBUaGUgZ29hbCBpcyBiZWluZyBzb3VnaHQsIGJ1dCB0aGUgdHJlbmQgaXMgZmxhdC5cclxuICAgKi9cclxuICBOb0NoYW5nZToge1xyXG4gICAgZGlzcGxheTogXCJObyBDaGFuZ2VcIixcclxuICAgIGNvZGU6IFwibm8tY2hhbmdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuby1wcm9ncmVzczogVGhlIGdvYWwgaGFzIG5vdCBiZWVuIG1ldCBhbmQgbGl0dGxlIHRvIG5vIHByb2dyZXNzIHRvd2FyZHMgdGFyZ2V0LlxyXG4gICAqL1xyXG4gIE5vUHJvZ3Jlc3M6IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gUHJvZ3Jlc3NcIixcclxuICAgIGNvZGU6IFwibm8tcHJvZ3Jlc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdC1hY2hpZXZlZDogVGhlIGdvYWwgaGFzIG5vdCBiZWVuIG1ldCBhbmQgdGhlcmUgbWlnaHQgb3IgbWlnaHQgbm90IGhhdmUgYmVlbiBwcm9ncmVzcyB0b3dhcmRzIHRhcmdldC5cclxuICAgKi9cclxuICBOb3RBY2hpZXZlZDoge1xyXG4gICAgZGlzcGxheTogXCJOb3QgQWNoaWV2ZWRcIixcclxuICAgIGNvZGU6IFwibm90LWFjaGlldmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3QtYXR0YWluYWJsZTogVGhlIGdvYWwgaXMgbm90IHBvc3NpYmxlIHRvIGJlIG1ldC5cclxuICAgKi9cclxuICBOb3RBdHRhaW5hYmxlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBBdHRhaW5hYmxlXCIsXHJcbiAgICBjb2RlOiBcIm5vdC1hdHRhaW5hYmxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdXN0YWluaW5nOiBUaGUgZ29hbCBoYXMgYmVlbiBtZXQsIGJ1dCBvbmdvaW5nIGFjdGl2aXR5IGlzIG5lZWRlZCB0byBzdXN0YWluIHRoZSBnb2FsIG9iamVjdGl2ZS5cclxuICAgKi9cclxuICBTdXN0YWluaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN1c3RhaW5pbmdcIixcclxuICAgIGNvZGU6IFwic3VzdGFpbmluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd29yc2VuaW5nOiBUaGUgZ29hbCBpcyBiZWluZyBzb3VnaHQsIGJ1dCBpcyByZWdyZXNzaW5nLlxyXG4gICAqL1xyXG4gIFdvcnNlbmluZzoge1xyXG4gICAgZGlzcGxheTogXCJXb3JzZW5pbmdcIixcclxuICAgIGNvZGU6IFwid29yc2VuaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19