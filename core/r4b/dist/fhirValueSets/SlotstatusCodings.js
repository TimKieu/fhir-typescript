// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/slotstatus|4.3.0
/**
 * The free/busy status of the slot.
 */
export const SlotstatusCodings = {
    /**
     * busy: Indicates that the time interval is busy because one  or more events have been scheduled for that interval.
     */
    Busy: {
        display: "Busy",
        code: "busy",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * busy-tentative: Indicates that the time interval is busy because one or more events have been tentatively scheduled for that interval.
     */
    BusyTentative: {
        display: "Busy (Tentative)",
        code: "busy-tentative",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * busy-unavailable: Indicates that the time interval is busy and that the interval cannot be scheduled.
     */
    BusyUnavailable: {
        display: "Busy (Unavailable)",
        code: "busy-unavailable",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * entered-in-error: This instance should not have been part of this patient's medical record.
     */
    EnteredInError: {
        display: "Entered in error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * free: Indicates that the time interval is free for scheduling.
     */
    Free: {
        display: "Free",
        code: "free",
        system: "http://hl7.org/fhir/slotstatus",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xvdHN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Nsb3RzdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLCtEQUErRDtBQThCL0Q7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBd0I7SUFDcEQ7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zbG90c3RhdHVzfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIGZyZWUvYnVzeSBzdGF0dXMgb2YgdGhlIHNsb3QuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTbG90c3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBidXN5OiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBidXN5IGJlY2F1c2Ugb25lICBvciBtb3JlIGV2ZW50cyBoYXZlIGJlZW4gc2NoZWR1bGVkIGZvciB0aGF0IGludGVydmFsLlxyXG4gICAqL1xyXG4gIEJ1c3k6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYnVzeS10ZW50YXRpdmU6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGJ1c3kgYmVjYXVzZSBvbmUgb3IgbW9yZSBldmVudHMgaGF2ZSBiZWVuIHRlbnRhdGl2ZWx5IHNjaGVkdWxlZCBmb3IgdGhhdCBpbnRlcnZhbC5cclxuICAgKi9cclxuICBCdXN5VGVudGF0aXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGJ1c3ktdW5hdmFpbGFibGU6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGJ1c3kgYW5kIHRoYXQgdGhlIGludGVydmFsIGNhbm5vdCBiZSBzY2hlZHVsZWQuXHJcbiAgICovXHJcbiAgQnVzeVVuYXZhaWxhYmxlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgaW5zdGFuY2Ugc2hvdWxkIG5vdCBoYXZlIGJlZW4gcGFydCBvZiB0aGlzIHBhdGllbnQncyBtZWRpY2FsIHJlY29yZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBmcmVlOiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBmcmVlIGZvciBzY2hlZHVsaW5nLlxyXG4gICAqL1xyXG4gIEZyZWU6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZnJlZS9idXN5IHN0YXR1cyBvZiB0aGUgc2xvdC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTbG90c3RhdHVzQ29kaW5nczpTbG90c3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBidXN5OiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBidXN5IGJlY2F1c2Ugb25lICBvciBtb3JlIGV2ZW50cyBoYXZlIGJlZW4gc2NoZWR1bGVkIGZvciB0aGF0IGludGVydmFsLlxyXG4gICAqL1xyXG4gIEJ1c3k6IHtcclxuICAgIGRpc3BsYXk6IFwiQnVzeVwiLFxyXG4gICAgY29kZTogXCJidXN5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zbG90c3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBidXN5LXRlbnRhdGl2ZTogSW5kaWNhdGVzIHRoYXQgdGhlIHRpbWUgaW50ZXJ2YWwgaXMgYnVzeSBiZWNhdXNlIG9uZSBvciBtb3JlIGV2ZW50cyBoYXZlIGJlZW4gdGVudGF0aXZlbHkgc2NoZWR1bGVkIGZvciB0aGF0IGludGVydmFsLlxyXG4gICAqL1xyXG4gIEJ1c3lUZW50YXRpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQnVzeSAoVGVudGF0aXZlKVwiLFxyXG4gICAgY29kZTogXCJidXN5LXRlbnRhdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2xvdHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYnVzeS11bmF2YWlsYWJsZTogSW5kaWNhdGVzIHRoYXQgdGhlIHRpbWUgaW50ZXJ2YWwgaXMgYnVzeSBhbmQgdGhhdCB0aGUgaW50ZXJ2YWwgY2Fubm90IGJlIHNjaGVkdWxlZC5cclxuICAgKi9cclxuICBCdXN5VW5hdmFpbGFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiQnVzeSAoVW5hdmFpbGFibGUpXCIsXHJcbiAgICBjb2RlOiBcImJ1c3ktdW5hdmFpbGFibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Nsb3RzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgaW5zdGFuY2Ugc2hvdWxkIG5vdCBoYXZlIGJlZW4gcGFydCBvZiB0aGlzIHBhdGllbnQncyBtZWRpY2FsIHJlY29yZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIGVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Nsb3RzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZyZWU6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGZyZWUgZm9yIHNjaGVkdWxpbmcuXHJcbiAgICovXHJcbiAgRnJlZToge1xyXG4gICAgZGlzcGxheTogXCJGcmVlXCIsXHJcbiAgICBjb2RlOiBcImZyZWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Nsb3RzdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=