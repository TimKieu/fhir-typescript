// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-admit-source|4.3.0
/**
 * This value set defines a set of codes that can be used to indicate from where the patient came in.
 */
export const EncounterAdmitSourceCodes = {
    /**
     * born: The patient is a newborn and the encounter will track the baby related activities (as opposed to the Mothers encounter - that may be associated using the newborn encounters partof property)
     */
    BornInHospital: "born",
    /**
     * emd: The patient has been transferred from the emergency department within the hospital. This is typically used in the transition to an inpatient encounter
     */
    FromAccidentEmergencyDepartment: "emd",
    /**
     * gp: The patient has been admitted due to a referred from a General Practitioner.
     */
    GeneralPractitionerReferral: "gp",
    /**
     * hosp-trans: The Patient has been transferred from another hospital for this encounter.
     */
    TransferredFromOtherHospital: "hosp-trans",
    /**
     * mp: The patient has been admitted due to a referred from a Specialist (as opposed to a General Practitioner).
     */
    MedicalPractitionerPhysicianReferral: "mp",
    /**
     * nursing: The patient has been transferred from a nursing home.
     */
    FromNursingHome: "nursing",
    /**
     * other: The patient has been admitted from a source otherwise not specified here.
     */
    Other: "other",
    /**
     * outp: The patient has been transferred from an outpatient department within the hospital.
     */
    FromOutpatientDepartment: "outp",
    /**
     * psych: The patient has been transferred from a psychiatric facility.
     */
    FromPsychiatricHospital: "psych",
    /**
     * rehab: The patient has been transferred from a rehabilitation facility or clinic.
     */
    FromRehabilitationFacility: "rehab",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyQWRtaXRTb3VyY2VDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW5jb3VudGVyQWRtaXRTb3VyY2VDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQywyRUFBMkU7QUFFM0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRztJQUN2Qzs7T0FFRztJQUNILGNBQWMsRUFBRSxNQUFNO0lBQ3RCOztPQUVHO0lBQ0gsK0JBQStCLEVBQUUsS0FBSztJQUN0Qzs7T0FFRztJQUNILDJCQUEyQixFQUFFLElBQUk7SUFDakM7O09BRUc7SUFDSCw0QkFBNEIsRUFBRSxZQUFZO0lBQzFDOztPQUVHO0lBQ0gsb0NBQW9DLEVBQUUsSUFBSTtJQUMxQzs7T0FFRztJQUNILGVBQWUsRUFBRSxTQUFTO0lBQzFCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILHdCQUF3QixFQUFFLE1BQU07SUFDaEM7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxPQUFPO0lBQ2hDOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUUsT0FBTztDQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbmNvdW50ZXItYWRtaXQtc291cmNlfDQuMy4wXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGZyb20gd2hlcmUgdGhlIHBhdGllbnQgY2FtZSBpbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBFbmNvdW50ZXJBZG1pdFNvdXJjZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGJvcm46IFRoZSBwYXRpZW50IGlzIGEgbmV3Ym9ybiBhbmQgdGhlIGVuY291bnRlciB3aWxsIHRyYWNrIHRoZSBiYWJ5IHJlbGF0ZWQgYWN0aXZpdGllcyAoYXMgb3Bwb3NlZCB0byB0aGUgTW90aGVycyBlbmNvdW50ZXIgLSB0aGF0IG1heSBiZSBhc3NvY2lhdGVkIHVzaW5nIHRoZSBuZXdib3JuIGVuY291bnRlcnMgcGFydG9mIHByb3BlcnR5KVxyXG4gICAqL1xyXG4gIEJvcm5Jbkhvc3BpdGFsOiBcImJvcm5cIixcclxuICAvKipcclxuICAgKiBlbWQ6IFRoZSBwYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIGZyb20gdGhlIGVtZXJnZW5jeSBkZXBhcnRtZW50IHdpdGhpbiB0aGUgaG9zcGl0YWwuIFRoaXMgaXMgdHlwaWNhbGx5IHVzZWQgaW4gdGhlIHRyYW5zaXRpb24gdG8gYW4gaW5wYXRpZW50IGVuY291bnRlclxyXG4gICAqL1xyXG4gIEZyb21BY2NpZGVudEVtZXJnZW5jeURlcGFydG1lbnQ6IFwiZW1kXCIsXHJcbiAgLyoqXHJcbiAgICogZ3A6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGFkbWl0dGVkIGR1ZSB0byBhIHJlZmVycmVkIGZyb20gYSBHZW5lcmFsIFByYWN0aXRpb25lci5cclxuICAgKi9cclxuICBHZW5lcmFsUHJhY3RpdGlvbmVyUmVmZXJyYWw6IFwiZ3BcIixcclxuICAvKipcclxuICAgKiBob3NwLXRyYW5zOiBUaGUgUGF0aWVudCBoYXMgYmVlbiB0cmFuc2ZlcnJlZCBmcm9tIGFub3RoZXIgaG9zcGl0YWwgZm9yIHRoaXMgZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIFRyYW5zZmVycmVkRnJvbU90aGVySG9zcGl0YWw6IFwiaG9zcC10cmFuc1wiLFxyXG4gIC8qKlxyXG4gICAqIG1wOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBhZG1pdHRlZCBkdWUgdG8gYSByZWZlcnJlZCBmcm9tIGEgU3BlY2lhbGlzdCAoYXMgb3Bwb3NlZCB0byBhIEdlbmVyYWwgUHJhY3RpdGlvbmVyKS5cclxuICAgKi9cclxuICBNZWRpY2FsUHJhY3RpdGlvbmVyUGh5c2ljaWFuUmVmZXJyYWw6IFwibXBcIixcclxuICAvKipcclxuICAgKiBudXJzaW5nOiBUaGUgcGF0aWVudCBoYXMgYmVlbiB0cmFuc2ZlcnJlZCBmcm9tIGEgbnVyc2luZyBob21lLlxyXG4gICAqL1xyXG4gIEZyb21OdXJzaW5nSG9tZTogXCJudXJzaW5nXCIsXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGFkbWl0dGVkIGZyb20gYSBzb3VyY2Ugb3RoZXJ3aXNlIG5vdCBzcGVjaWZpZWQgaGVyZS5cclxuICAgKi9cclxuICBPdGhlcjogXCJvdGhlclwiLFxyXG4gIC8qKlxyXG4gICAqIG91dHA6IFRoZSBwYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIGZyb20gYW4gb3V0cGF0aWVudCBkZXBhcnRtZW50IHdpdGhpbiB0aGUgaG9zcGl0YWwuXHJcbiAgICovXHJcbiAgRnJvbU91dHBhdGllbnREZXBhcnRtZW50OiBcIm91dHBcIixcclxuICAvKipcclxuICAgKiBwc3ljaDogVGhlIHBhdGllbnQgaGFzIGJlZW4gdHJhbnNmZXJyZWQgZnJvbSBhIHBzeWNoaWF0cmljIGZhY2lsaXR5LlxyXG4gICAqL1xyXG4gIEZyb21Qc3ljaGlhdHJpY0hvc3BpdGFsOiBcInBzeWNoXCIsXHJcbiAgLyoqXHJcbiAgICogcmVoYWI6IFRoZSBwYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIGZyb20gYSByZWhhYmlsaXRhdGlvbiBmYWNpbGl0eSBvciBjbGluaWMuXHJcbiAgICovXHJcbiAgRnJvbVJlaGFiaWxpdGF0aW9uRmFjaWxpdHk6IFwicmVoYWJcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZnJvbSB3aGVyZSB0aGUgcGF0aWVudCBjYW1lIGluLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW5jb3VudGVyQWRtaXRTb3VyY2VDb2RlVHlwZSA9IHR5cGVvZiBFbmNvdW50ZXJBZG1pdFNvdXJjZUNvZGVzW2tleW9mIHR5cGVvZiBFbmNvdW50ZXJBZG1pdFNvdXJjZUNvZGVzXTtcclxuIl19