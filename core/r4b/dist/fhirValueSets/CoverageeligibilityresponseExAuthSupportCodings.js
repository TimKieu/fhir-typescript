// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/coverageeligibilityresponse-ex-auth-support|4.3.0
/**
 * This value set includes CoverageEligibilityResponse Auth Support codes.
 */
export const CoverageeligibilityresponseExAuthSupportCodings = {
    /**
     * accidentreport: A formal accident report as would be filed with police or a simlar official body.
     */
    AccidentReport: {
        display: "Accident Report",
        code: "accidentreport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * diagnosticimageorder: A request or authorization for diagnostic imaging.
     */
    DiagnosticImageOrder: {
        display: "Diagnostic Image Order",
        code: "diagnosticimageorder",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * diagnosticimagereport: A report on diagnostic image(s).
     */
    DiagnosticImageReport: {
        display: "Diagnostic Image Report",
        code: "diagnosticimagereport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * laborder: A request or authorization for laboratory diagnostic tests.
     */
    LabOrder: {
        display: "Lab Order",
        code: "laborder",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * labreport: A report on laboratory diagnostic test(s).
     */
    LabReport: {
        display: "Lab Report",
        code: "labreport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * model: A physical model of the affected area.
     */
    Model: {
        display: "Model",
        code: "model",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * picture: A photograph of the affected area.
     */
    Picture: {
        display: "Picture",
        code: "picture",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * professionalreport: A report from a licensed professional regarding the siutation, condition or proposed treatment.
     */
    ProfessionalReport: {
        display: "Professional Report",
        code: "professionalreport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlRXhBdXRoU3VwcG9ydENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZUV4QXV0aFN1cHBvcnRDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLGdHQUFnRztBQTBDaEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwrQ0FBK0MsR0FBc0Q7SUFDaEg7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLG1GQUFtRjtLQUM1RjtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLE1BQU0sRUFBRSxtRkFBbUY7S0FDNUY7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixNQUFNLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxtRkFBbUY7S0FDNUY7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG1GQUFtRjtLQUM1RjtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLE1BQU0sRUFBRSxtRkFBbUY7S0FDNUY7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb3ZlcmFnZWVsaWdpYmlsaXR5cmVzcG9uc2UtZXgtYXV0aC1zdXBwb3J0fDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgQ292ZXJhZ2VFbGlnaWJpbGl0eVJlc3BvbnNlIEF1dGggU3VwcG9ydCBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZUV4QXV0aFN1cHBvcnRDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjY2lkZW50cmVwb3J0OiBBIGZvcm1hbCBhY2NpZGVudCByZXBvcnQgYXMgd291bGQgYmUgZmlsZWQgd2l0aCBwb2xpY2Ugb3IgYSBzaW1sYXIgb2ZmaWNpYWwgYm9keS5cclxuICAgKi9cclxuICBBY2NpZGVudFJlcG9ydDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkaWFnbm9zdGljaW1hZ2VvcmRlcjogQSByZXF1ZXN0IG9yIGF1dGhvcml6YXRpb24gZm9yIGRpYWdub3N0aWMgaW1hZ2luZy5cclxuICAgKi9cclxuICBEaWFnbm9zdGljSW1hZ2VPcmRlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkaWFnbm9zdGljaW1hZ2VyZXBvcnQ6IEEgcmVwb3J0IG9uIGRpYWdub3N0aWMgaW1hZ2UocykuXHJcbiAgICovXHJcbiAgRGlhZ25vc3RpY0ltYWdlUmVwb3J0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxhYm9yZGVyOiBBIHJlcXVlc3Qgb3IgYXV0aG9yaXphdGlvbiBmb3IgbGFib3JhdG9yeSBkaWFnbm9zdGljIHRlc3RzLlxyXG4gICAqL1xyXG4gIExhYk9yZGVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxhYnJlcG9ydDogQSByZXBvcnQgb24gbGFib3JhdG9yeSBkaWFnbm9zdGljIHRlc3QocykuXHJcbiAgICovXHJcbiAgTGFiUmVwb3J0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG1vZGVsOiBBIHBoeXNpY2FsIG1vZGVsIG9mIHRoZSBhZmZlY3RlZCBhcmVhLlxyXG4gICAqL1xyXG4gIE1vZGVsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBpY3R1cmU6IEEgcGhvdG9ncmFwaCBvZiB0aGUgYWZmZWN0ZWQgYXJlYS5cclxuICAgKi9cclxuICBQaWN0dXJlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb2Zlc3Npb25hbHJlcG9ydDogQSByZXBvcnQgZnJvbSBhIGxpY2Vuc2VkIHByb2Zlc3Npb25hbCByZWdhcmRpbmcgdGhlIHNpdXRhdGlvbiwgY29uZGl0aW9uIG9yIHByb3Bvc2VkIHRyZWF0bWVudC5cclxuICAgKi9cclxuICBQcm9mZXNzaW9uYWxSZXBvcnQ6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBDb3ZlcmFnZUVsaWdpYmlsaXR5UmVzcG9uc2UgQXV0aCBTdXBwb3J0IGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZUV4QXV0aFN1cHBvcnRDb2RpbmdzOkNvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZUV4QXV0aFN1cHBvcnRDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjY2lkZW50cmVwb3J0OiBBIGZvcm1hbCBhY2NpZGVudCByZXBvcnQgYXMgd291bGQgYmUgZmlsZWQgd2l0aCBwb2xpY2Ugb3IgYSBzaW1sYXIgb2ZmaWNpYWwgYm9keS5cclxuICAgKi9cclxuICBBY2NpZGVudFJlcG9ydDoge1xyXG4gICAgZGlzcGxheTogXCJBY2NpZGVudCBSZXBvcnRcIixcclxuICAgIGNvZGU6IFwiYWNjaWRlbnRyZXBvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRpYWdub3N0aWNpbWFnZW9yZGVyOiBBIHJlcXVlc3Qgb3IgYXV0aG9yaXphdGlvbiBmb3IgZGlhZ25vc3RpYyBpbWFnaW5nLlxyXG4gICAqL1xyXG4gIERpYWdub3N0aWNJbWFnZU9yZGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpYWdub3N0aWMgSW1hZ2UgT3JkZXJcIixcclxuICAgIGNvZGU6IFwiZGlhZ25vc3RpY2ltYWdlb3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRpYWdub3N0aWNpbWFnZXJlcG9ydDogQSByZXBvcnQgb24gZGlhZ25vc3RpYyBpbWFnZShzKS5cclxuICAgKi9cclxuICBEaWFnbm9zdGljSW1hZ2VSZXBvcnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGlhZ25vc3RpYyBJbWFnZSBSZXBvcnRcIixcclxuICAgIGNvZGU6IFwiZGlhZ25vc3RpY2ltYWdlcmVwb3J0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZWVsaWdpYmlsaXR5cmVzcG9uc2UtZXgtYXV0aC1zdXBwb3J0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsYWJvcmRlcjogQSByZXF1ZXN0IG9yIGF1dGhvcml6YXRpb24gZm9yIGxhYm9yYXRvcnkgZGlhZ25vc3RpYyB0ZXN0cy5cclxuICAgKi9cclxuICBMYWJPcmRlcjoge1xyXG4gICAgZGlzcGxheTogXCJMYWIgT3JkZXJcIixcclxuICAgIGNvZGU6IFwibGFib3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxhYnJlcG9ydDogQSByZXBvcnQgb24gbGFib3JhdG9yeSBkaWFnbm9zdGljIHRlc3QocykuXHJcbiAgICovXHJcbiAgTGFiUmVwb3J0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkxhYiBSZXBvcnRcIixcclxuICAgIGNvZGU6IFwibGFicmVwb3J0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZWVsaWdpYmlsaXR5cmVzcG9uc2UtZXgtYXV0aC1zdXBwb3J0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtb2RlbDogQSBwaHlzaWNhbCBtb2RlbCBvZiB0aGUgYWZmZWN0ZWQgYXJlYS5cclxuICAgKi9cclxuICBNb2RlbDoge1xyXG4gICAgZGlzcGxheTogXCJNb2RlbFwiLFxyXG4gICAgY29kZTogXCJtb2RlbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlLWV4LWF1dGgtc3VwcG9ydFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGljdHVyZTogQSBwaG90b2dyYXBoIG9mIHRoZSBhZmZlY3RlZCBhcmVhLlxyXG4gICAqL1xyXG4gIFBpY3R1cmU6IHtcclxuICAgIGRpc3BsYXk6IFwiUGljdHVyZVwiLFxyXG4gICAgY29kZTogXCJwaWN0dXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZWVsaWdpYmlsaXR5cmVzcG9uc2UtZXgtYXV0aC1zdXBwb3J0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9mZXNzaW9uYWxyZXBvcnQ6IEEgcmVwb3J0IGZyb20gYSBsaWNlbnNlZCBwcm9mZXNzaW9uYWwgcmVnYXJkaW5nIHRoZSBzaXV0YXRpb24sIGNvbmRpdGlvbiBvciBwcm9wb3NlZCB0cmVhdG1lbnQuXHJcbiAgICovXHJcbiAgUHJvZmVzc2lvbmFsUmVwb3J0OiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb2Zlc3Npb25hbCBSZXBvcnRcIixcclxuICAgIGNvZGU6IFwicHJvZmVzc2lvbmFscmVwb3J0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZWVsaWdpYmlsaXR5cmVzcG9uc2UtZXgtYXV0aC1zdXBwb3J0XCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19