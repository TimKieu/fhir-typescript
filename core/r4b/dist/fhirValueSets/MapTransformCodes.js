// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-transform|4.3.0
/**
 * How data is copied/created.
 */
export const MapTransformCodes = {
    /**
     * append: append(source...) - source is element or string.
     */
    Append: "append",
    /**
     * c: Create a Coding. Parameters = (system. Code[, display]).
     */
    C: "c",
    /**
     * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.
     */
    Cast: "cast",
    /**
     * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).
     */
    Cc: "cc",
    /**
     * copy: copy(source).
     */
    Copy: "copy",
    /**
     * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.
     */
    Cp: "cp",
    /**
     * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.
     */
    Create: "create",
    /**
     * dateOp: Perform a date operation. *Parameters to be documented*.
     */
    DateOp: "dateOp",
    /**
     * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.
     */
    Escape: "escape",
    /**
     * evaluate: Execute the supplied FHIRPath expression and use the value returned by that.
     */
    Evaluate: "evaluate",
    /**
     * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.
     */
    Id: "id",
    /**
     * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.
     */
    Pointer: "pointer",
    /**
     * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.
     */
    Qty: "qty",
    /**
     * reference: reference(source : object) - return a string that references the provided tree properly.
     */
    Reference: "reference",
    /**
     * translate: translate(source, uri_of_map) - use the translate operation.
     */
    Translate: "translate",
    /**
     * truncate: truncate(source, length) - source must be stringy type.
     */
    Truncate: "truncate",
    /**
     * uuid: Generate a random UUID (in lowercase). No Parameters.
     */
    Uuid: "uuid",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVHJhbnNmb3JtQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01hcFRyYW5zZm9ybUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLGtFQUFrRTtBQUVsRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9COztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxDQUFDLEVBQUUsR0FBRztJQUNOOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILEVBQUUsRUFBRSxJQUFJO0lBQ1I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWFwLXRyYW5zZm9ybXw0LjMuMFxyXG5cclxuLyoqXHJcbiAqIEhvdyBkYXRhIGlzIGNvcGllZC9jcmVhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1hcFRyYW5zZm9ybUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFwcGVuZDogYXBwZW5kKHNvdXJjZS4uLikgLSBzb3VyY2UgaXMgZWxlbWVudCBvciBzdHJpbmcuXHJcbiAgICovXHJcbiAgQXBwZW5kOiBcImFwcGVuZFwiLFxyXG4gIC8qKlxyXG4gICAqIGM6IENyZWF0ZSBhIENvZGluZy4gUGFyYW1ldGVycyA9IChzeXN0ZW0uIENvZGVbLCBkaXNwbGF5XSkuXHJcbiAgICovXHJcbiAgQzogXCJjXCIsXHJcbiAgLyoqXHJcbiAgICogY2FzdDogY2FzdChzb3VyY2UsIHR5cGU/KSAtIGNhc2Ugc291cmNlIGZyb20gb25lIHR5cGUgdG8gYW5vdGhlci4gdGFyZ2V0IHR5cGUgY2FuIGJlIGxlZnQgYXMgaW1wbGljaXQgaWYgdGhlcmUgaXMgb25lIGFuZCBvbmx5IG9uZSB0YXJnZXQgdHlwZSBrbm93bi5cclxuICAgKi9cclxuICBDYXN0OiBcImNhc3RcIixcclxuICAvKipcclxuICAgKiBjYzogQ3JlYXRlIGEgQ29kZWFibGVDb25jZXB0LiBQYXJhbWV0ZXJzID0gKHRleHQpIG9yIChzeXN0ZW0uIENvZGVbLCBkaXNwbGF5XSkuXHJcbiAgICovXHJcbiAgQ2M6IFwiY2NcIixcclxuICAvKipcclxuICAgKiBjb3B5OiBjb3B5KHNvdXJjZSkuXHJcbiAgICovXHJcbiAgQ29weTogXCJjb3B5XCIsXHJcbiAgLyoqXHJcbiAgICogY3A6IENyZWF0ZSBhIGNvbnRhY3QgZGV0YWlscy4gUGFyYW1ldGVycyA9ICh2YWx1ZSkgb3IgKHN5c3RlbSwgdmFsdWUpLiBJZiBubyBzeXN0ZW0gaXMgcHJvdmlkZWQsIHRoZSBzeXN0ZW0gc2hvdWxkIGJlIGluZmVycmVkIGZyb20gdGhlIGNvbnRlbnQgb2YgdGhlIHZhbHVlLlxyXG4gICAqL1xyXG4gIENwOiBcImNwXCIsXHJcbiAgLyoqXHJcbiAgICogY3JlYXRlOiBjcmVhdGUodHlwZSA6IHN0cmluZykgLSB0eXBlIGlzIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBhcHBsaWNhdGlvbiBvbiB0aGUgc3RhbmRhcmQgQVBJLCBhbmQgbXVzdCBiZSBrbm93biBieSBpdC5cclxuICAgKi9cclxuICBDcmVhdGU6IFwiY3JlYXRlXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0ZU9wOiBQZXJmb3JtIGEgZGF0ZSBvcGVyYXRpb24uICpQYXJhbWV0ZXJzIHRvIGJlIGRvY3VtZW50ZWQqLlxyXG4gICAqL1xyXG4gIERhdGVPcDogXCJkYXRlT3BcIixcclxuICAvKipcclxuICAgKiBlc2NhcGU6IGVzY2FwZShzb3VyY2UsIGZtdDEsIGZtdDIpIC0gY2hhbmdlIHNvdXJjZSBmcm9tIG9uZSBraW5kIG9mIGVzY2FwaW5nIHRvIGFub3RoZXIgKHBsYWluLCBqYXZhLCB4bWwsIGpzb24pLiBub3RlIHRoYXQgdGhpcyBpcyBmb3Igd2hlbiB0aGUgc3RyaW5nIGl0c2VsZiBpcyBlc2NhcGVkLlxyXG4gICAqL1xyXG4gIEVzY2FwZTogXCJlc2NhcGVcIixcclxuICAvKipcclxuICAgKiBldmFsdWF0ZTogRXhlY3V0ZSB0aGUgc3VwcGxpZWQgRkhJUlBhdGggZXhwcmVzc2lvbiBhbmQgdXNlIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGF0LlxyXG4gICAqL1xyXG4gIEV2YWx1YXRlOiBcImV2YWx1YXRlXCIsXHJcbiAgLyoqXHJcbiAgICogaWQ6IENyZWF0ZSBhbiBpZGVudGlmaWVyLiBQYXJhbWV0ZXJzID0gKHN5c3RlbSwgdmFsdWVbLCB0eXBlXSkgd2hlcmUgdHlwZSBpcyBhIGNvZGUgZnJvbSB0aGUgaWRlbnRpZmllciB0eXBlIHZhbHVlIHNldC5cclxuICAgKi9cclxuICBJZDogXCJpZFwiLFxyXG4gIC8qKlxyXG4gICAqIHBvaW50ZXI6IFJldHVybiB0aGUgYXBwcm9wcmlhdGUgc3RyaW5nIHRvIHB1dCBpbiBhIHJlZmVyZW5jZSB0aGF0IHJlZmVycyB0byB0aGUgcmVzb3VyY2UgcHJvdmlkZWQgYXMgYSBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgUG9pbnRlcjogXCJwb2ludGVyXCIsXHJcbiAgLyoqXHJcbiAgICogcXR5OiBDcmVhdGUgYSBxdWFudGl0eS4gUGFyYW1ldGVycyA9ICh0ZXh0KSBvciAodmFsdWUsIHVuaXQsIFtzeXN0ZW0sIGNvZGVdKSB3aGVyZSB0ZXh0IGlzIHRoZSBuYXR1cmFsIHJlcHJlc2VudGF0aW9uIGUuZy4gW2NvbXBhcmF0b3JddmFsdWVbc3BhY2VddW5pdC5cclxuICAgKi9cclxuICBRdHk6IFwicXR5XCIsXHJcbiAgLyoqXHJcbiAgICogcmVmZXJlbmNlOiByZWZlcmVuY2Uoc291cmNlIDogb2JqZWN0KSAtIHJldHVybiBhIHN0cmluZyB0aGF0IHJlZmVyZW5jZXMgdGhlIHByb3ZpZGVkIHRyZWUgcHJvcGVybHkuXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlOiBcInJlZmVyZW5jZVwiLFxyXG4gIC8qKlxyXG4gICAqIHRyYW5zbGF0ZTogdHJhbnNsYXRlKHNvdXJjZSwgdXJpX29mX21hcCkgLSB1c2UgdGhlIHRyYW5zbGF0ZSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgVHJhbnNsYXRlOiBcInRyYW5zbGF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHRydW5jYXRlOiB0cnVuY2F0ZShzb3VyY2UsIGxlbmd0aCkgLSBzb3VyY2UgbXVzdCBiZSBzdHJpbmd5IHR5cGUuXHJcbiAgICovXHJcbiAgVHJ1bmNhdGU6IFwidHJ1bmNhdGVcIixcclxuICAvKipcclxuICAgKiB1dWlkOiBHZW5lcmF0ZSBhIHJhbmRvbSBVVUlEIChpbiBsb3dlcmNhc2UpLiBObyBQYXJhbWV0ZXJzLlxyXG4gICAqL1xyXG4gIFV1aWQ6IFwidXVpZFwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEhvdyBkYXRhIGlzIGNvcGllZC9jcmVhdGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFwVHJhbnNmb3JtQ29kZVR5cGUgPSB0eXBlb2YgTWFwVHJhbnNmb3JtQ29kZXNba2V5b2YgdHlwZW9mIE1hcFRyYW5zZm9ybUNvZGVzXTtcclxuIl19