// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://terminology.hl7.org/ValueSet/v3-ActConsentDirective|2.0.0
/**
 * ActConsentDirective codes are used to specify the type of Consent Directive to which a Consent Directive Act conforms.
 */
export const V3ActConsentDirectiveCodings = {
    /**
     * Code: _ActConsentDirective
     */
    ActConsentDirective: {
        display: "ActConsentDirective",
        code: "_ActConsentDirective",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: EMRGONLY
     */
    EmergencyOnly: {
        display: "emergency only",
        code: "EMRGONLY",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: GRANTORCHOICE
     */
    GrantorChoice: {
        display: "grantor choice",
        code: "GRANTORCHOICE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: IMPLIED
     */
    ImpliedConsent: {
        display: "implied consent",
        code: "IMPLIED",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: IMPLIEDD
     */
    ImpliedConsentWithOpportunityToDissent: {
        display: "implied consent with opportunity to dissent",
        code: "IMPLIEDD",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: NOCONSENT
     */
    NoConsent: {
        display: "no consent",
        code: "NOCONSENT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: NOPP
     */
    NoticeOfPrivacyPractices: {
        display: "notice of privacy practices",
        code: "NOPP",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: OPTIN
     */
    OptIn: {
        display: "opt-in",
        code: "OPTIN",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: OPTINR
     */
    OptInWithRestrictions: {
        display: "opt-in with restrictions",
        code: "OPTINR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: OPTOUT
     */
    OpOut: {
        display: "op-out",
        code: "OPTOUT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
    /**
     * Code: OPTOUTE
     */
    OptOutWithExceptions: {
        display: "opt-out with exceptions",
        code: "OPTOUTE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVjNBY3RDb25zZW50RGlyZWN0aXZlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVjNBY3RDb25zZW50RGlyZWN0aXZlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxrRkFBa0Y7QUFzRGxGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQW1DO0lBQzFFOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUU7UUFDbkIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsc0NBQXNDLEVBQUU7UUFDdEMsT0FBTyxFQUFFLDZDQUE2QztRQUN0RCxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCx3QkFBd0IsRUFBRTtRQUN4QixPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxvQkFBb0IsRUFBRTtRQUNwQixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My1BY3RDb25zZW50RGlyZWN0aXZlfDIuMC4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQWN0Q29uc2VudERpcmVjdGl2ZSBjb2RlcyBhcmUgdXNlZCB0byBzcGVjaWZ5IHRoZSB0eXBlIG9mIENvbnNlbnQgRGlyZWN0aXZlIHRvIHdoaWNoIGEgQ29uc2VudCBEaXJlY3RpdmUgQWN0IGNvbmZvcm1zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVjNBY3RDb25zZW50RGlyZWN0aXZlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiBfQWN0Q29uc2VudERpcmVjdGl2ZVxyXG4gICAqL1xyXG4gIEFjdENvbnNlbnREaXJlY3RpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRU1SR09OTFlcclxuICAgKi9cclxuICBFbWVyZ2VuY3lPbmx5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdSQU5UT1JDSE9JQ0VcclxuICAgKi9cclxuICBHcmFudG9yQ2hvaWNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IElNUExJRURcclxuICAgKi9cclxuICBJbXBsaWVkQ29uc2VudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBJTVBMSUVERFxyXG4gICAqL1xyXG4gIEltcGxpZWRDb25zZW50V2l0aE9wcG9ydHVuaXR5VG9EaXNzZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5PQ09OU0VOVFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBOT1BQXHJcbiAgICovXHJcbiAgTm90aWNlT2ZQcml2YWN5UHJhY3RpY2VzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9QVElOXHJcbiAgICovXHJcbiAgT3B0SW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogT1BUSU5SXHJcbiAgICovXHJcbiAgT3B0SW5XaXRoUmVzdHJpY3Rpb25zOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9QVE9VVFxyXG4gICAqL1xyXG4gIE9wT3V0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9QVE9VVEVcclxuICAgKi9cclxuICBPcHRPdXRXaXRoRXhjZXB0aW9uczogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdENvbnNlbnREaXJlY3RpdmUgY29kZXMgYXJlIHVzZWQgdG8gc3BlY2lmeSB0aGUgdHlwZSBvZiBDb25zZW50IERpcmVjdGl2ZSB0byB3aGljaCBhIENvbnNlbnQgRGlyZWN0aXZlIEFjdCBjb25mb3Jtcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBWM0FjdENvbnNlbnREaXJlY3RpdmVDb2RpbmdzOlYzQWN0Q29uc2VudERpcmVjdGl2ZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogX0FjdENvbnNlbnREaXJlY3RpdmVcclxuICAgKi9cclxuICBBY3RDb25zZW50RGlyZWN0aXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjdENvbnNlbnREaXJlY3RpdmVcIixcclxuICAgIGNvZGU6IFwiX0FjdENvbnNlbnREaXJlY3RpdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVNUkdPTkxZXHJcbiAgICovXHJcbiAgRW1lcmdlbmN5T25seToge1xyXG4gICAgZGlzcGxheTogXCJlbWVyZ2VuY3kgb25seVwiLFxyXG4gICAgY29kZTogXCJFTVJHT05MWVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogR1JBTlRPUkNIT0lDRVxyXG4gICAqL1xyXG4gIEdyYW50b3JDaG9pY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiZ3JhbnRvciBjaG9pY2VcIixcclxuICAgIGNvZGU6IFwiR1JBTlRPUkNIT0lDRVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSU1QTElFRFxyXG4gICAqL1xyXG4gIEltcGxpZWRDb25zZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcImltcGxpZWQgY29uc2VudFwiLFxyXG4gICAgY29kZTogXCJJTVBMSUVEXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RDb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBJTVBMSUVERFxyXG4gICAqL1xyXG4gIEltcGxpZWRDb25zZW50V2l0aE9wcG9ydHVuaXR5VG9EaXNzZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcImltcGxpZWQgY29uc2VudCB3aXRoIG9wcG9ydHVuaXR5IHRvIGRpc3NlbnRcIixcclxuICAgIGNvZGU6IFwiSU1QTElFRERcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5PQ09OU0VOVFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudDoge1xyXG4gICAgZGlzcGxheTogXCJubyBjb25zZW50XCIsXHJcbiAgICBjb2RlOiBcIk5PQ09OU0VOVFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTk9QUFxyXG4gICAqL1xyXG4gIE5vdGljZU9mUHJpdmFjeVByYWN0aWNlczoge1xyXG4gICAgZGlzcGxheTogXCJub3RpY2Ugb2YgcHJpdmFjeSBwcmFjdGljZXNcIixcclxuICAgIGNvZGU6IFwiTk9QUFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogT1BUSU5cclxuICAgKi9cclxuICBPcHRJbjoge1xyXG4gICAgZGlzcGxheTogXCJvcHQtaW5cIixcclxuICAgIGNvZGU6IFwiT1BUSU5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9QVElOUlxyXG4gICAqL1xyXG4gIE9wdEluV2l0aFJlc3RyaWN0aW9uczoge1xyXG4gICAgZGlzcGxheTogXCJvcHQtaW4gd2l0aCByZXN0cmljdGlvbnNcIixcclxuICAgIGNvZGU6IFwiT1BUSU5SXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RDb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBPUFRPVVRcclxuICAgKi9cclxuICBPcE91dDoge1xyXG4gICAgZGlzcGxheTogXCJvcC1vdXRcIixcclxuICAgIGNvZGU6IFwiT1BUT1VUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RDb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBPUFRPVVRFXHJcbiAgICovXHJcbiAgT3B0T3V0V2l0aEV4Y2VwdGlvbnM6IHtcclxuICAgIGRpc3BsYXk6IFwib3B0LW91dCB3aXRoIGV4Y2VwdGlvbnNcIixcclxuICAgIGNvZGU6IFwiT1BUT1VURVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==