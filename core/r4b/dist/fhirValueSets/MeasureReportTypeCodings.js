// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measure-report-type|4.3.0
/**
 * The type of the measure report.
 */
export const MeasureReportTypeCodings = {
    /**
     * data-collection: A data collection report that contains data-of-interest for the measure.
     */
    DataCollection: {
        display: "Data Collection",
        code: "data-collection",
        system: "http://hl7.org/fhir/measure-report-type",
    },
    /**
     * individual: An individual report that provides information on the performance for a given measure with respect to a single subject.
     */
    Individual: {
        display: "Individual",
        code: "individual",
        system: "http://hl7.org/fhir/measure-report-type",
    },
    /**
     * subject-list: A subject list report that includes a listing of subjects that satisfied each population criteria in the measure.
     */
    SubjectList: {
        display: "Subject List",
        code: "subject-list",
        system: "http://hl7.org/fhir/measure-report-type",
    },
    /**
     * summary: A summary report that returns the number of members in each population criteria for the measure.
     */
    Summary: {
        display: "Summary",
        code: "summary",
        system: "http://hl7.org/fhir/measure-report-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZVJlcG9ydFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlUmVwb3J0VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBMEJ4RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZWFzdXJlLXJlcG9ydC10eXBlfDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdGhlIG1lYXN1cmUgcmVwb3J0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVhc3VyZVJlcG9ydFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtY29sbGVjdGlvbjogQSBkYXRhIGNvbGxlY3Rpb24gcmVwb3J0IHRoYXQgY29udGFpbnMgZGF0YS1vZi1pbnRlcmVzdCBmb3IgdGhlIG1lYXN1cmUuXHJcbiAgICovXHJcbiAgRGF0YUNvbGxlY3Rpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW5kaXZpZHVhbDogQW4gaW5kaXZpZHVhbCByZXBvcnQgdGhhdCBwcm92aWRlcyBpbmZvcm1hdGlvbiBvbiB0aGUgcGVyZm9ybWFuY2UgZm9yIGEgZ2l2ZW4gbWVhc3VyZSB3aXRoIHJlc3BlY3QgdG8gYSBzaW5nbGUgc3ViamVjdC5cclxuICAgKi9cclxuICBJbmRpdmlkdWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1YmplY3QtbGlzdDogQSBzdWJqZWN0IGxpc3QgcmVwb3J0IHRoYXQgaW5jbHVkZXMgYSBsaXN0aW5nIG9mIHN1YmplY3RzIHRoYXQgc2F0aXNmaWVkIGVhY2ggcG9wdWxhdGlvbiBjcml0ZXJpYSBpbiB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBTdWJqZWN0TGlzdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzdW1tYXJ5OiBBIHN1bW1hcnkgcmVwb3J0IHRoYXQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIG1lbWJlcnMgaW4gZWFjaCBwb3B1bGF0aW9uIGNyaXRlcmlhIGZvciB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBTdW1tYXJ5OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdGhlIG1lYXN1cmUgcmVwb3J0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lYXN1cmVSZXBvcnRUeXBlQ29kaW5nczpNZWFzdXJlUmVwb3J0VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1jb2xsZWN0aW9uOiBBIGRhdGEgY29sbGVjdGlvbiByZXBvcnQgdGhhdCBjb250YWlucyBkYXRhLW9mLWludGVyZXN0IGZvciB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBEYXRhQ29sbGVjdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIENvbGxlY3Rpb25cIixcclxuICAgIGNvZGU6IFwiZGF0YS1jb2xsZWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlLXJlcG9ydC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbmRpdmlkdWFsOiBBbiBpbmRpdmlkdWFsIHJlcG9ydCB0aGF0IHByb3ZpZGVzIGluZm9ybWF0aW9uIG9uIHRoZSBwZXJmb3JtYW5jZSBmb3IgYSBnaXZlbiBtZWFzdXJlIHdpdGggcmVzcGVjdCB0byBhIHNpbmdsZSBzdWJqZWN0LlxyXG4gICAqL1xyXG4gIEluZGl2aWR1YWw6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5kaXZpZHVhbFwiLFxyXG4gICAgY29kZTogXCJpbmRpdmlkdWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlLXJlcG9ydC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdWJqZWN0LWxpc3Q6IEEgc3ViamVjdCBsaXN0IHJlcG9ydCB0aGF0IGluY2x1ZGVzIGEgbGlzdGluZyBvZiBzdWJqZWN0cyB0aGF0IHNhdGlzZmllZCBlYWNoIHBvcHVsYXRpb24gY3JpdGVyaWEgaW4gdGhlIG1lYXN1cmUuXHJcbiAgICovXHJcbiAgU3ViamVjdExpc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiU3ViamVjdCBMaXN0XCIsXHJcbiAgICBjb2RlOiBcInN1YmplY3QtbGlzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS1yZXBvcnQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3VtbWFyeTogQSBzdW1tYXJ5IHJlcG9ydCB0aGF0IHJldHVybnMgdGhlIG51bWJlciBvZiBtZW1iZXJzIGluIGVhY2ggcG9wdWxhdGlvbiBjcml0ZXJpYSBmb3IgdGhlIG1lYXN1cmUuXHJcbiAgICovXHJcbiAgU3VtbWFyeToge1xyXG4gICAgZGlzcGxheTogXCJTdW1tYXJ5XCIsXHJcbiAgICBjb2RlOiBcInN1bW1hcnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmUtcmVwb3J0LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=