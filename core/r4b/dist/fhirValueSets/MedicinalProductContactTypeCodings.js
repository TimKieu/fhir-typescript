// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicinal-product-contact-type|4.3.0
/**
 * Contact type for a Medicinal Product.
 */
export const MedicinalProductContactTypeCodings = {
    /**
     * ProcedureContactAfter: Person/Company authorised for Communication between MAH and Authorities after Authorisation
     */
    PersonCompanyAuthorisedForCommunicationAfterProcedure: {
        display: "Person/Company authorised for Communication after procedure",
        code: "ProcedureContactAfter",
        system: "http://hl7.org/fhir/medicinal-product-contact-type",
    },
    /**
     * ProcedureContactDuring: Person/Company authorised for Communication on behalf of the Applicant during the Procedure
     */
    PersonCompanyAuthorisedForCommunicationDuringProcedure: {
        display: "Person/Company authorised for Communication during procedure",
        code: "ProcedureContactDuring",
        system: "http://hl7.org/fhir/medicinal-product-contact-type",
    },
    /**
     * ProposedMAH: Proposed Marketing Authorisation Holder/Person
     */
    ProposedMarketingAuthorisationHolderPerson: {
        display: "Proposed Marketing Authorisation Holder/Person",
        code: "ProposedMAH",
        system: "http://hl7.org/fhir/medicinal-product-contact-type",
    },
    /**
     * PVEnquiries: Pharmacovigilance Enquiry Information
     */
    PharmacovigilanceEnquiryInformation: {
        display: "Pharmacovigilance Enquiry Information",
        code: "PVEnquiries",
        system: "http://hl7.org/fhir/medicinal-product-contact-type",
    },
    /**
     * QPPV: Qualified Person Responsible for Pharmacovigilance
     */
    QualifiedPersonResponsibleForPharmacovigilance: {
        display: "Qualified Person Responsible for Pharmacovigilance",
        code: "QPPV",
        system: "http://hl7.org/fhir/medicinal-product-contact-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNpbmFsUHJvZHVjdENvbnRhY3RUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVkaWNpbmFsUHJvZHVjdENvbnRhY3RUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyxtRkFBbUY7QUE4Qm5GOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQXlDO0lBQ3RGOztPQUVHO0lBQ0gscURBQXFELEVBQUU7UUFDckQsT0FBTyxFQUFFLDZEQUE2RDtRQUN0RSxJQUFJLEVBQUUsdUJBQXVCO1FBQzdCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILHNEQUFzRCxFQUFFO1FBQ3RELE9BQU8sRUFBRSw4REFBOEQ7UUFDdkUsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixNQUFNLEVBQUUsb0RBQW9EO0tBQzdEO0lBQ0Q7O09BRUc7SUFDSCwwQ0FBMEMsRUFBRTtRQUMxQyxPQUFPLEVBQUUsZ0RBQWdEO1FBQ3pELElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILG1DQUFtQyxFQUFFO1FBQ25DLE9BQU8sRUFBRSx1Q0FBdUM7UUFDaEQsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsOENBQThDLEVBQUU7UUFDOUMsT0FBTyxFQUFFLG9EQUFvRDtRQUM3RCxJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZWRpY2luYWwtcHJvZHVjdC1jb250YWN0LXR5cGV8NC4zLjBcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb250YWN0IHR5cGUgZm9yIGEgTWVkaWNpbmFsIFByb2R1Y3QuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRpY2luYWxQcm9kdWN0Q29udGFjdFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIFByb2NlZHVyZUNvbnRhY3RBZnRlcjogUGVyc29uL0NvbXBhbnkgYXV0aG9yaXNlZCBmb3IgQ29tbXVuaWNhdGlvbiBiZXR3ZWVuIE1BSCBhbmQgQXV0aG9yaXRpZXMgYWZ0ZXIgQXV0aG9yaXNhdGlvblxyXG4gICAqL1xyXG4gIFBlcnNvbkNvbXBhbnlBdXRob3Jpc2VkRm9yQ29tbXVuaWNhdGlvbkFmdGVyUHJvY2VkdXJlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFByb2NlZHVyZUNvbnRhY3REdXJpbmc6IFBlcnNvbi9Db21wYW55IGF1dGhvcmlzZWQgZm9yIENvbW11bmljYXRpb24gb24gYmVoYWxmIG9mIHRoZSBBcHBsaWNhbnQgZHVyaW5nIHRoZSBQcm9jZWR1cmVcclxuICAgKi9cclxuICBQZXJzb25Db21wYW55QXV0aG9yaXNlZEZvckNvbW11bmljYXRpb25EdXJpbmdQcm9jZWR1cmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUHJvcG9zZWRNQUg6IFByb3Bvc2VkIE1hcmtldGluZyBBdXRob3Jpc2F0aW9uIEhvbGRlci9QZXJzb25cclxuICAgKi9cclxuICBQcm9wb3NlZE1hcmtldGluZ0F1dGhvcmlzYXRpb25Ib2xkZXJQZXJzb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUFZFbnF1aXJpZXM6IFBoYXJtYWNvdmlnaWxhbmNlIEVucXVpcnkgSW5mb3JtYXRpb25cclxuICAgKi9cclxuICBQaGFybWFjb3ZpZ2lsYW5jZUVucXVpcnlJbmZvcm1hdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBRUFBWOiBRdWFsaWZpZWQgUGVyc29uIFJlc3BvbnNpYmxlIGZvciBQaGFybWFjb3ZpZ2lsYW5jZVxyXG4gICAqL1xyXG4gIFF1YWxpZmllZFBlcnNvblJlc3BvbnNpYmxlRm9yUGhhcm1hY292aWdpbGFuY2U6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250YWN0IHR5cGUgZm9yIGEgTWVkaWNpbmFsIFByb2R1Y3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVkaWNpbmFsUHJvZHVjdENvbnRhY3RUeXBlQ29kaW5nczpNZWRpY2luYWxQcm9kdWN0Q29udGFjdFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIFByb2NlZHVyZUNvbnRhY3RBZnRlcjogUGVyc29uL0NvbXBhbnkgYXV0aG9yaXNlZCBmb3IgQ29tbXVuaWNhdGlvbiBiZXR3ZWVuIE1BSCBhbmQgQXV0aG9yaXRpZXMgYWZ0ZXIgQXV0aG9yaXNhdGlvblxyXG4gICAqL1xyXG4gIFBlcnNvbkNvbXBhbnlBdXRob3Jpc2VkRm9yQ29tbXVuaWNhdGlvbkFmdGVyUHJvY2VkdXJlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlcnNvbi9Db21wYW55IGF1dGhvcmlzZWQgZm9yIENvbW11bmljYXRpb24gYWZ0ZXIgcHJvY2VkdXJlXCIsXHJcbiAgICBjb2RlOiBcIlByb2NlZHVyZUNvbnRhY3RBZnRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVkaWNpbmFsLXByb2R1Y3QtY29udGFjdC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQcm9jZWR1cmVDb250YWN0RHVyaW5nOiBQZXJzb24vQ29tcGFueSBhdXRob3Jpc2VkIGZvciBDb21tdW5pY2F0aW9uIG9uIGJlaGFsZiBvZiB0aGUgQXBwbGljYW50IGR1cmluZyB0aGUgUHJvY2VkdXJlXHJcbiAgICovXHJcbiAgUGVyc29uQ29tcGFueUF1dGhvcmlzZWRGb3JDb21tdW5pY2F0aW9uRHVyaW5nUHJvY2VkdXJlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlcnNvbi9Db21wYW55IGF1dGhvcmlzZWQgZm9yIENvbW11bmljYXRpb24gZHVyaW5nIHByb2NlZHVyZVwiLFxyXG4gICAgY29kZTogXCJQcm9jZWR1cmVDb250YWN0RHVyaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWRpY2luYWwtcHJvZHVjdC1jb250YWN0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFByb3Bvc2VkTUFIOiBQcm9wb3NlZCBNYXJrZXRpbmcgQXV0aG9yaXNhdGlvbiBIb2xkZXIvUGVyc29uXHJcbiAgICovXHJcbiAgUHJvcG9zZWRNYXJrZXRpbmdBdXRob3Jpc2F0aW9uSG9sZGVyUGVyc29uOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3Bvc2VkIE1hcmtldGluZyBBdXRob3Jpc2F0aW9uIEhvbGRlci9QZXJzb25cIixcclxuICAgIGNvZGU6IFwiUHJvcG9zZWRNQUhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lZGljaW5hbC1wcm9kdWN0LWNvbnRhY3QtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUFZFbnF1aXJpZXM6IFBoYXJtYWNvdmlnaWxhbmNlIEVucXVpcnkgSW5mb3JtYXRpb25cclxuICAgKi9cclxuICBQaGFybWFjb3ZpZ2lsYW5jZUVucXVpcnlJbmZvcm1hdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJQaGFybWFjb3ZpZ2lsYW5jZSBFbnF1aXJ5IEluZm9ybWF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIlBWRW5xdWlyaWVzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWRpY2luYWwtcHJvZHVjdC1jb250YWN0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFFQUFY6IFF1YWxpZmllZCBQZXJzb24gUmVzcG9uc2libGUgZm9yIFBoYXJtYWNvdmlnaWxhbmNlXHJcbiAgICovXHJcbiAgUXVhbGlmaWVkUGVyc29uUmVzcG9uc2libGVGb3JQaGFybWFjb3ZpZ2lsYW5jZToge1xyXG4gICAgZGlzcGxheTogXCJRdWFsaWZpZWQgUGVyc29uIFJlc3BvbnNpYmxlIGZvciBQaGFybWFjb3ZpZ2lsYW5jZVwiLFxyXG4gICAgY29kZTogXCJRUFBWXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWRpY2luYWwtcHJvZHVjdC1jb250YWN0LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=