// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationrequest-intent|4.3.0
/**
 * MedicationRequest Intent Codes
 */
export const MedicationrequestIntentCodings = {
    /**
     * filler-order: The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
     */
    FillerOrder: {
        display: "Filler Order",
        code: "filler-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * instance-order: The request represents an instance for the particular order, for example a medication administration record.
     */
    InstanceOrder: {
        display: "Instance Order",
        code: "instance-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or  other constraints among a set of requests.
     */
    Option: {
        display: "Option",
        code: "option",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * order: The request represents a request/demand and authorization for action
     */
    Order: {
        display: "Order",
        code: "order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * original-order: The request represents the original authorization for the medication request.
     */
    OriginalOrder: {
        display: "Original Order",
        code: "original-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * plan: The request represents an intention to ensure something occurs without providing an authorization for others to act.
     */
    Plan: {
        display: "Plan",
        code: "plan",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * proposal: The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
     */
    Proposal: {
        display: "Proposal",
        code: "proposal",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
    /**
     * reflex-order: The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization..
     */
    ReflexOrder: {
        display: "Reflex Order",
        code: "reflex-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsNkVBQTZFO0FBMEM3RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlEQUF5RDtLQUNsRTtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEU7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUseURBQXlEO0tBQ2xFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50fDQuMy4wXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvblJlcXVlc3QgSW50ZW50IENvZGVzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlsbGVyLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSB2aWV3IG9mIGFuIGF1dGhvcml6YXRpb24gaW5zdGFudGlhdGVkIGJ5IGEgZnVsZmlsbGluZyBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBmdWxmaWxsZXIncyBpbnRlbnRpb24gdG8gYWN0IHVwb24gYSBzdWJtaXR0ZWQgb3JkZXIuXHJcbiAgICovXHJcbiAgRmlsbGVyT3JkZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW5zdGFuY2Utb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gaW5zdGFuY2UgZm9yIHRoZSBwYXJ0aWN1bGFyIG9yZGVyLCBmb3IgZXhhbXBsZSBhIG1lZGljYXRpb24gYWRtaW5pc3RyYXRpb24gcmVjb3JkLlxyXG4gICAqL1xyXG4gIEluc3RhbmNlT3JkZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3B0aW9uOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgY29tcG9uZW50IG9yIG9wdGlvbiBmb3IgYSBSZXF1ZXN0R3JvdXAgdGhhdCBlc3RhYmxpc2hlcyB0aW1pbmcsIGNvbmRpdGlvbmFsaXR5IGFuZC9vciAgb3RoZXIgY29uc3RyYWludHMgYW1vbmcgYSBzZXQgb2YgcmVxdWVzdHMuXHJcbiAgICovXHJcbiAgT3B0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgcmVxdWVzdC9kZW1hbmQgYW5kIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvblxyXG4gICAqL1xyXG4gIE9yZGVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9yaWdpbmFsLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSBvcmlnaW5hbCBhdXRob3JpemF0aW9uIGZvciB0aGUgbWVkaWNhdGlvbiByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIE9yaWdpbmFsT3JkZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGxhbjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhbiBpbnRlbnRpb24gdG8gZW5zdXJlIHNvbWV0aGluZyBvY2N1cnMgd2l0aG91dCBwcm92aWRpbmcgYW4gYXV0aG9yaXphdGlvbiBmb3Igb3RoZXJzIHRvIGFjdC5cclxuICAgKi9cclxuICBQbGFuOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2FsOiBUaGUgcmVxdWVzdCBpcyBhIHN1Z2dlc3Rpb24gbWFkZSBieSBzb21lb25lL3NvbWV0aGluZyB0aGF0IGRvZXNuJ3QgaGF2ZSBhbiBpbnRlbnRpb24gdG8gZW5zdXJlIGl0IG9jY3VycyBhbmQgd2l0aG91dCBwcm92aWRpbmcgYW4gYXV0aG9yaXphdGlvbiB0byBhY3RcclxuICAgKi9cclxuICBQcm9wb3NhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWZsZXgtb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgc3VwcGxlbWVudGFsIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvbiBiYXNlZCBvbiBhIHBhcmVudCBhdXRob3JpemF0aW9uIHRvZ2V0aGVyIHdpdGggaW5pdGlhbCByZXN1bHRzIG9mIHRoZSBhY3Rpb24gdGFrZW4gYWdhaW5zdCB0aGF0IHBhcmVudCBhdXRob3JpemF0aW9uLi5cclxuICAgKi9cclxuICBSZWZsZXhPcmRlcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25SZXF1ZXN0IEludGVudCBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lZGljYXRpb25yZXF1ZXN0SW50ZW50Q29kaW5nczpNZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlsbGVyLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSB2aWV3IG9mIGFuIGF1dGhvcml6YXRpb24gaW5zdGFudGlhdGVkIGJ5IGEgZnVsZmlsbGluZyBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBmdWxmaWxsZXIncyBpbnRlbnRpb24gdG8gYWN0IHVwb24gYSBzdWJtaXR0ZWQgb3JkZXIuXHJcbiAgICovXHJcbiAgRmlsbGVyT3JkZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRmlsbGVyIE9yZGVyXCIsXHJcbiAgICBjb2RlOiBcImZpbGxlci1vcmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS9tZWRpY2F0aW9ucmVxdWVzdC1pbnRlbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGluc3RhbmNlIGZvciB0aGUgcGFydGljdWxhciBvcmRlciwgZm9yIGV4YW1wbGUgYSBtZWRpY2F0aW9uIGFkbWluaXN0cmF0aW9uIHJlY29yZC5cclxuICAgKi9cclxuICBJbnN0YW5jZU9yZGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkluc3RhbmNlIE9yZGVyXCIsXHJcbiAgICBjb2RlOiBcImluc3RhbmNlLW9yZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb25yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3B0aW9uOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgY29tcG9uZW50IG9yIG9wdGlvbiBmb3IgYSBSZXF1ZXN0R3JvdXAgdGhhdCBlc3RhYmxpc2hlcyB0aW1pbmcsIGNvbmRpdGlvbmFsaXR5IGFuZC9vciAgb3RoZXIgY29uc3RyYWludHMgYW1vbmcgYSBzZXQgb2YgcmVxdWVzdHMuXHJcbiAgICovXHJcbiAgT3B0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9wdGlvblwiLFxyXG4gICAgY29kZTogXCJvcHRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvcmRlcjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhIHJlcXVlc3QvZGVtYW5kIGFuZCBhdXRob3JpemF0aW9uIGZvciBhY3Rpb25cclxuICAgKi9cclxuICBPcmRlcjoge1xyXG4gICAgZGlzcGxheTogXCJPcmRlclwiLFxyXG4gICAgY29kZTogXCJvcmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS9tZWRpY2F0aW9ucmVxdWVzdC1pbnRlbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9yaWdpbmFsLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSBvcmlnaW5hbCBhdXRob3JpemF0aW9uIGZvciB0aGUgbWVkaWNhdGlvbiByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIE9yaWdpbmFsT3JkZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiT3JpZ2luYWwgT3JkZXJcIixcclxuICAgIGNvZGU6IFwib3JpZ2luYWwtb3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwbGFuOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGludGVudGlvbiB0byBlbnN1cmUgc29tZXRoaW5nIG9jY3VycyB3aXRob3V0IHByb3ZpZGluZyBhbiBhdXRob3JpemF0aW9uIGZvciBvdGhlcnMgdG8gYWN0LlxyXG4gICAqL1xyXG4gIFBsYW46IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhblwiLFxyXG4gICAgY29kZTogXCJwbGFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb25yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zYWw6IFRoZSByZXF1ZXN0IGlzIGEgc3VnZ2VzdGlvbiBtYWRlIGJ5IHNvbWVvbmUvc29tZXRoaW5nIHRoYXQgZG9lc24ndCBoYXZlIGFuIGludGVudGlvbiB0byBlbnN1cmUgaXQgb2NjdXJzIGFuZCB3aXRob3V0IHByb3ZpZGluZyBhbiBhdXRob3JpemF0aW9uIHRvIGFjdFxyXG4gICAqL1xyXG4gIFByb3Bvc2FsOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3Bvc2FsXCIsXHJcbiAgICBjb2RlOiBcInByb3Bvc2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb25yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVmbGV4LW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHN1cHBsZW1lbnRhbCBhdXRob3JpemF0aW9uIGZvciBhY3Rpb24gYmFzZWQgb24gYSBwYXJlbnQgYXV0aG9yaXphdGlvbiB0b2dldGhlciB3aXRoIGluaXRpYWwgcmVzdWx0cyBvZiB0aGUgYWN0aW9uIHRha2VuIGFnYWluc3QgdGhhdCBwYXJlbnQgYXV0aG9yaXphdGlvbi4uXHJcbiAgICovXHJcbiAgUmVmbGV4T3JkZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVmbGV4IE9yZGVyXCIsXHJcbiAgICBjb2RlOiBcInJlZmxleC1vcmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS9tZWRpY2F0aW9ucmVxdWVzdC1pbnRlbnRcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=