// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Money
import * as fhir from '../fhir.js';
// @ts-ignore
import { CurrenciesVsValidation } from '../fhirValueSets/CurrenciesVsValidation.js';
/**
 * An amount of economic utility in some recognized currency.
 */
export class Money extends fhir.FhirElement {
    /**
     * Default constructor for Money - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value);
            }
        }
        if (source['currency']) {
            this.currency = new fhir.FhirCode({ value: source.currency });
        }
        if (source['_currency']) {
            if (this.currency) {
                this.currency.addExtendedProperties(source._currency);
            }
            else {
                this.currency = new fhir.FhirCode(source._currency);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Money';
        }
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOSV('currency', exp, 'Currencies', CurrenciesVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Money._fts_dataType = 'Money';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9uZXkuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL01vbmV5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDBCQUEwQjtBQUUxQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQUluQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUF1QnBGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLEtBQU0sU0FBUSxJQUFJLENBQUMsV0FBVztJQWF6Qzs7T0FFRztJQUNILFlBQVksU0FBNEIsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDbEYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDbEYsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUFFLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLE1BQU8sQ0FBQyxDQUFDO2FBQUU7aUJBQ2hFO2dCQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUF1QyxDQUFDLENBQUM7YUFBRTtTQUM1RjtRQUNELElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUN4RixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsU0FBVSxDQUFDLENBQUM7YUFBRTtpQkFDekU7Z0JBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQXVDLENBQUMsQ0FBQzthQUFFO1NBQzVGO0lBQ0gsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsTUFBYSxFQUFFO1FBQy9DLElBQUksR0FBRyxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQUUsR0FBRyxHQUFHLE9BQU8sQ0FBQTtTQUFFO1FBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBQyxHQUFHLEVBQUMsWUFBWSxFQUFDLHNCQUFzQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0UsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQXJDRDs7R0FFRztBQUM2QixtQkFBYSxHQUFVLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgQ29tcGxleFR5cGU6IE1vbmV5XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDdXJyZW5jaWVzQ29kZXMsICBDdXJyZW5jaWVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0N1cnJlbmNpZXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ3VycmVuY2llc1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ3VycmVuY2llc1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNb25leSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNb25leUFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogTW9uZXRhcnkgdmFsdWVzIGhhdmUgdGhlaXIgb3duIHJ1bGVzIGZvciBoYW5kbGluZyBwcmVjaXNpb24gKHJlZmVyIHRvIHN0YW5kYXJkIGFjY291bnRpbmcgdGV4dCBib29rcykuXHJcbiAgICovXHJcbiAgdmFsdWU/OiBmaGlyLkZoaXJEZWNpbWFsfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1vbmV5LnZhbHVlXHJcbiAgICovXHJcbiAgX3ZhbHVlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBJU08gNDIxNyBDdXJyZW5jeSBDb2RlLlxyXG4gICAqL1xyXG4gIGN1cnJlbmN5PzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNb25leS5jdXJyZW5jeVxyXG4gICAqL1xyXG4gIF9jdXJyZW5jeT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhbW91bnQgb2YgZWNvbm9taWMgdXRpbGl0eSBpbiBzb21lIHJlY29nbml6ZWQgY3VycmVuY3kuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW9uZXkgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01vbmV5JztcclxuICAvKipcclxuICAgKiBNb25ldGFyeSB2YWx1ZXMgaGF2ZSB0aGVpciBvd24gcnVsZXMgZm9yIGhhbmRsaW5nIHByZWNpc2lvbiAocmVmZXIgdG8gc3RhbmRhcmQgYWNjb3VudGluZyB0ZXh0IGJvb2tzKS5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU/OiBmaGlyLkZoaXJEZWNpbWFsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJU08gNDIxNyBDdXJyZW5jeSBDb2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjdXJyZW5jeT86IGZoaXIuRmhpckNvZGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1vbmV5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TW9uZXlBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndmFsdWUnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UudmFsdWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ZhbHVlJ10pIHtcclxuICAgICAgaWYgKHRoaXMudmFsdWUpIHsgdGhpcy52YWx1ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl92YWx1ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoc291cmNlLl92YWx1ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRlY2ltYWxBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2N1cnJlbmN5J10pIHsgdGhpcy5jdXJyZW5jeSA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLmN1cnJlbmN5fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jdXJyZW5jeSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmN1cnJlbmN5KSB7IHRoaXMuY3VycmVuY3kuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY3VycmVuY3khKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jdXJyZW5jeSA9IG5ldyBmaGlyLkZoaXJDb2RlKHNvdXJjZS5fY3VycmVuY3kgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTW9uZXknIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd2YWx1ZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ2N1cnJlbmN5JyxleHAsJ0N1cnJlbmNpZXMnLEN1cnJlbmNpZXNWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=