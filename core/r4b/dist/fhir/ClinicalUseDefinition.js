// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClinicalUseDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ClinicalUseDefinitionTypeVsValidation } from '../fhirValueSets/ClinicalUseDefinitionTypeVsValidation.js';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
 */
export class ClinicalUseDefinitionContraindicationOtherTherapy extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationshipType']) {
            this.relationshipType = new fhir.CodeableConcept(source.relationshipType);
        }
        else {
            this.relationshipType = null;
        }
        if (source['therapy']) {
            this.therapy = new fhir.CodeableReference(source.therapy);
        }
        else {
            this.therapy = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.contraindication.otherTherapy';
        }
        this.vRS('relationshipType', exp);
        this.vRS('therapy', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionContraindicationOtherTherapy._fts_dataType = 'ClinicalUseDefinitionContraindicationOtherTherapy';
/**
 * Specifics for when this is a contraindication.
 */
export class ClinicalUseDefinitionContraindication extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionContraindication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['diseaseSymptomProcedure']) {
            this.diseaseSymptomProcedure = new fhir.CodeableReference(source.diseaseSymptomProcedure);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableReference(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableReference(x));
        }
        else {
            this.comorbidity = [];
        }
        if (source['indication']) {
            this.indication = source.indication.map((x) => new fhir.Reference(x));
        }
        else {
            this.indication = [];
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.ClinicalUseDefinitionContraindicationOtherTherapy(x));
        }
        else {
            this.otherTherapy = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.contraindication';
        }
        this.vOS('diseaseSymptomProcedure', exp);
        this.vOS('diseaseStatus', exp);
        this.vOA('comorbidity', exp);
        this.vOA('indication', exp);
        this.vOA('otherTherapy', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionContraindication._fts_dataType = 'ClinicalUseDefinitionContraindication';
/**
 * Specifics for when this is an indication.
 */
export class ClinicalUseDefinitionIndication extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionIndication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['diseaseSymptomProcedure']) {
            this.diseaseSymptomProcedure = new fhir.CodeableReference(source.diseaseSymptomProcedure);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableReference(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableReference(x));
        }
        else {
            this.comorbidity = [];
        }
        if (source['intendedEffect']) {
            this.intendedEffect = new fhir.CodeableReference(source.intendedEffect);
        }
        if (source['duration']) {
            this.duration = source.duration;
        }
        else if (source['durationRange']) {
            this.duration = new fhir.Range(source.durationRange);
        }
        else if (source['durationString']) {
            this.duration = new fhir.FhirString({ value: source.durationString });
        }
        if (source['undesirableEffect']) {
            this.undesirableEffect = source.undesirableEffect.map((x) => new fhir.Reference(x));
        }
        else {
            this.undesirableEffect = [];
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.ClinicalUseDefinitionContraindicationOtherTherapy(x));
        }
        else {
            this.otherTherapy = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.indication';
        }
        this.vOS('diseaseSymptomProcedure', exp);
        this.vOS('diseaseStatus', exp);
        this.vOA('comorbidity', exp);
        this.vOS('intendedEffect', exp);
        this.vOS('duration', exp);
        this.vOA('undesirableEffect', exp);
        this.vOA('otherTherapy', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionIndication._fts_dataType = 'ClinicalUseDefinitionIndication';
/**
 * Internal flag to properly serialize choice-type element ClinicalUseDefinition.indication.duration[x]
 */
ClinicalUseDefinitionIndication._fts_durationIsChoice = true;
/**
 * The specific medication, food, substance or laboratory test that interacts.
 */
export class ClinicalUseDefinitionInteractionInteractant extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionInteractionInteractant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.interaction.interactant';
        }
        this.vRS('item', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionInteractionInteractant._fts_dataType = 'ClinicalUseDefinitionInteractionInteractant';
/**
 * Internal flag to properly serialize choice-type element ClinicalUseDefinition.interaction.interactant.item[x]
 */
ClinicalUseDefinitionInteractionInteractant._fts_itemIsChoice = true;
/**
 * Specifics for when this is an interaction.
 */
export class ClinicalUseDefinitionInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['interactant']) {
            this.interactant = source.interactant.map((x) => new fhir.ClinicalUseDefinitionInteractionInteractant(x));
        }
        else {
            this.interactant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['effect']) {
            this.effect = new fhir.CodeableReference(source.effect);
        }
        if (source['incidence']) {
            this.incidence = new fhir.CodeableConcept(source.incidence);
        }
        if (source['management']) {
            this.management = source.management.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.management = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.interaction';
        }
        this.vOA('interactant', exp);
        this.vOS('type', exp);
        this.vOS('effect', exp);
        this.vOS('incidence', exp);
        this.vOA('management', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionInteraction._fts_dataType = 'ClinicalUseDefinitionInteraction';
/**
 * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
 */
export class ClinicalUseDefinitionUndesirableEffect extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionUndesirableEffect - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['symptomConditionEffect']) {
            this.symptomConditionEffect = new fhir.CodeableReference(source.symptomConditionEffect);
        }
        if (source['classification']) {
            this.classification = new fhir.CodeableConcept(source.classification);
        }
        if (source['frequencyOfOccurrence']) {
            this.frequencyOfOccurrence = new fhir.CodeableConcept(source.frequencyOfOccurrence);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.undesirableEffect';
        }
        this.vOS('symptomConditionEffect', exp);
        this.vOS('classification', exp);
        this.vOS('frequencyOfOccurrence', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionUndesirableEffect._fts_dataType = 'ClinicalUseDefinitionUndesirableEffect';
/**
 * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
 */
export class ClinicalUseDefinitionWarning extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionWarning - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.warning';
        }
        this.vOS('description', exp);
        this.vOS('code', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionWarning._fts_dataType = 'ClinicalUseDefinitionWarning';
/**
 * A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.
 */
export class ClinicalUseDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ClinicalUseDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ClinicalUseDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['contraindication']) {
            this.contraindication = new fhir.ClinicalUseDefinitionContraindication(source.contraindication);
        }
        if (source['indication']) {
            this.indication = new fhir.ClinicalUseDefinitionIndication(source.indication);
        }
        if (source['interaction']) {
            this.interaction = new fhir.ClinicalUseDefinitionInteraction(source.interaction);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.Reference(x));
        }
        else {
            this.population = [];
        }
        if (source['undesirableEffect']) {
            this.undesirableEffect = new fhir.ClinicalUseDefinitionUndesirableEffect(source.undesirableEffect);
        }
        if (source['warning']) {
            this.warning = new fhir.ClinicalUseDefinitionWarning(source.warning);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('type', exp, 'ClinicalUseDefinitionType', ClinicalUseDefinitionTypeVsValidation, 'r');
        this.vOA('category', exp);
        this.vOA('subject', exp);
        this.vOS('status', exp);
        this.vOS('contraindication', exp);
        this.vOS('indication', exp);
        this.vOS('interaction', exp);
        this.vOA('population', exp);
        this.vOS('undesirableEffect', exp);
        this.vOS('warning', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinition._fts_dataType = 'ClinicalUseDefinition';
//# sourceMappingURL=data:application/json;base64,