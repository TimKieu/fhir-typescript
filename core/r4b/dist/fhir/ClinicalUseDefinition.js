// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClinicalUseDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ClinicalUseDefinitionTypeVsValidation } from '../fhirValueSets/ClinicalUseDefinitionTypeVsValidation.js';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
 */
export class ClinicalUseDefinitionContraindicationOtherTherapy extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationshipType']) {
            this.relationshipType = new fhir.CodeableConcept(source.relationshipType, options);
        }
        else {
            this.relationshipType = null;
        }
        if (source['therapy']) {
            this.therapy = new fhir.CodeableReference(source.therapy, options);
        }
        else {
            this.therapy = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.contraindication.otherTherapy';
        }
        iss.push(...this.vRS('relationshipType', exp));
        iss.push(...this.vRS('therapy', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionContraindicationOtherTherapy._fts_dataType = 'ClinicalUseDefinitionContraindicationOtherTherapy';
/**
 * Specifics for when this is a contraindication.
 */
export class ClinicalUseDefinitionContraindication extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionContraindication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['diseaseSymptomProcedure']) {
            this.diseaseSymptomProcedure = new fhir.CodeableReference(source.diseaseSymptomProcedure, options);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableReference(source.diseaseStatus, options);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableReference(x, options));
        }
        else {
            this.comorbidity = [];
        }
        if (source['indication']) {
            this.indication = source.indication.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.indication = [];
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.ClinicalUseDefinitionContraindicationOtherTherapy(x, options));
        }
        else {
            this.otherTherapy = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.contraindication';
        }
        iss.push(...this.vOS('diseaseSymptomProcedure', exp));
        iss.push(...this.vOS('diseaseStatus', exp));
        iss.push(...this.vOA('comorbidity', exp));
        iss.push(...this.vOA('indication', exp));
        iss.push(...this.vOA('otherTherapy', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionContraindication._fts_dataType = 'ClinicalUseDefinitionContraindication';
/**
 * Specifics for when this is an indication.
 */
export class ClinicalUseDefinitionIndication extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionIndication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['diseaseSymptomProcedure']) {
            this.diseaseSymptomProcedure = new fhir.CodeableReference(source.diseaseSymptomProcedure, options);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableReference(source.diseaseStatus, options);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableReference(x, options));
        }
        else {
            this.comorbidity = [];
        }
        if (source['intendedEffect']) {
            this.intendedEffect = new fhir.CodeableReference(source.intendedEffect, options);
        }
        if (source['duration']) {
            this.duration = source.duration;
        }
        else if (source['durationRange']) {
            this.duration = new fhir.Range(source.durationRange, options);
        }
        else if (source['durationString'] !== undefined) {
            this.duration = new fhir.FhirString({ value: source.durationString }, options);
        }
        if (source['undesirableEffect']) {
            this.undesirableEffect = source.undesirableEffect.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.undesirableEffect = [];
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.ClinicalUseDefinitionContraindicationOtherTherapy(x, options));
        }
        else {
            this.otherTherapy = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.indication';
        }
        iss.push(...this.vOS('diseaseSymptomProcedure', exp));
        iss.push(...this.vOS('diseaseStatus', exp));
        iss.push(...this.vOA('comorbidity', exp));
        iss.push(...this.vOS('intendedEffect', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOA('undesirableEffect', exp));
        iss.push(...this.vOA('otherTherapy', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionIndication._fts_dataType = 'ClinicalUseDefinitionIndication';
/**
 * Internal flag to properly serialize choice-type element ClinicalUseDefinition.indication.duration[x]
 */
ClinicalUseDefinitionIndication._fts_durationIsChoice = true;
/**
 * The specific medication, food, substance or laboratory test that interacts.
 */
export class ClinicalUseDefinitionInteractionInteractant extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionInteractionInteractant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference, options);
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept, options);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.interaction.interactant';
        }
        iss.push(...this.vRS('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionInteractionInteractant._fts_dataType = 'ClinicalUseDefinitionInteractionInteractant';
/**
 * Internal flag to properly serialize choice-type element ClinicalUseDefinition.interaction.interactant.item[x]
 */
ClinicalUseDefinitionInteractionInteractant._fts_itemIsChoice = true;
/**
 * Specifics for when this is an interaction.
 */
export class ClinicalUseDefinitionInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['interactant']) {
            this.interactant = source.interactant.map((x) => new fhir.ClinicalUseDefinitionInteractionInteractant(x, options));
        }
        else {
            this.interactant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['effect']) {
            this.effect = new fhir.CodeableReference(source.effect, options);
        }
        if (source['incidence']) {
            this.incidence = new fhir.CodeableConcept(source.incidence, options);
        }
        if (source['management']) {
            this.management = source.management.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.management = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.interaction';
        }
        iss.push(...this.vOA('interactant', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('effect', exp));
        iss.push(...this.vOS('incidence', exp));
        iss.push(...this.vOA('management', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionInteraction._fts_dataType = 'ClinicalUseDefinitionInteraction';
/**
 * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
 */
export class ClinicalUseDefinitionUndesirableEffect extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionUndesirableEffect - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['symptomConditionEffect']) {
            this.symptomConditionEffect = new fhir.CodeableReference(source.symptomConditionEffect, options);
        }
        if (source['classification']) {
            this.classification = new fhir.CodeableConcept(source.classification, options);
        }
        if (source['frequencyOfOccurrence']) {
            this.frequencyOfOccurrence = new fhir.CodeableConcept(source.frequencyOfOccurrence, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.undesirableEffect';
        }
        iss.push(...this.vOS('symptomConditionEffect', exp));
        iss.push(...this.vOS('classification', exp));
        iss.push(...this.vOS('frequencyOfOccurrence', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionUndesirableEffect._fts_dataType = 'ClinicalUseDefinitionUndesirableEffect';
/**
 * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
 */
export class ClinicalUseDefinitionWarning extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalUseDefinitionWarning - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition.warning';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinitionWarning._fts_dataType = 'ClinicalUseDefinitionWarning';
/**
 * A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.
 */
export class ClinicalUseDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ClinicalUseDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ClinicalUseDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.category = [];
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.subject = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        if (source['contraindication']) {
            this.contraindication = new fhir.ClinicalUseDefinitionContraindication(source.contraindication, options);
        }
        if (source['indication']) {
            this.indication = new fhir.ClinicalUseDefinitionIndication(source.indication, options);
        }
        if (source['interaction']) {
            this.interaction = new fhir.ClinicalUseDefinitionInteraction(source.interaction, options);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.population = [];
        }
        if (source['undesirableEffect']) {
            this.undesirableEffect = new fhir.ClinicalUseDefinitionUndesirableEffect(source.undesirableEffect, options);
        }
        if (source['warning']) {
            this.warning = new fhir.ClinicalUseDefinitionWarning(source.warning, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalUseDefinition';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('type', exp, 'ClinicalUseDefinitionType', ClinicalUseDefinitionTypeVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vOA('subject', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('contraindication', exp));
        iss.push(...this.vOS('indication', exp));
        iss.push(...this.vOS('interaction', exp));
        iss.push(...this.vOA('population', exp));
        iss.push(...this.vOS('undesirableEffect', exp));
        iss.push(...this.vOS('warning', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalUseDefinition._fts_dataType = 'ClinicalUseDefinition';
//# sourceMappingURL=data:application/json;base64,