// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Citation
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * A human-readable display of the citation.
 */
export class CitationSummary extends fhir.BackboneElement {
    /**
     * Default constructor for CitationSummary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['style']) {
            this.style = new fhir.CodeableConcept(source.style);
        }
        if (source['text']) {
            this.text = new fhir.FhirMarkdown({ value: source.text });
        }
        else {
            this.text = null;
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirMarkdown(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.summary';
        }
        this.vOS('style', exp);
        this.vRS('text', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationSummary._fts_dataType = 'CitationSummary';
/**
 * The assignment to an organizing scheme.
 */
export class CitationClassification extends fhir.BackboneElement {
    /**
     * Default constructor for CitationClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['classifier']) {
            this.classifier = source.classifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.classification';
        }
        this.vOS('type', exp);
        this.vOA('classifier', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationClassification._fts_dataType = 'CitationClassification';
/**
 * An effective date or period for a status of the citation.
 */
export class CitationStatusDate extends fhir.BackboneElement {
    /**
     * Default constructor for CitationStatusDate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        else {
            this.activity = null;
        }
        if (source['actual']) {
            this.actual = new fhir.FhirBoolean({ value: source.actual });
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.statusDate';
        }
        this.vRS('activity', exp);
        this.vOS('actual', exp);
        this.vRS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationStatusDate._fts_dataType = 'CitationStatusDate';
/**
 * Artifact related to the Citation Resource.
 */
export class CitationRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for CitationRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationshipType']) {
            this.relationshipType = new fhir.CodeableConcept(source.relationshipType);
        }
        else {
            this.relationshipType = null;
        }
        if (source['targetClassifier']) {
            this.targetClassifier = source.targetClassifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.targetClassifier = [];
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetUri']) {
            this.target = new fhir.FhirUri({ value: source.targetUri });
        }
        else if (source['targetIdentifier']) {
            this.target = new fhir.Identifier(source.targetIdentifier);
        }
        else if (source['targetReference']) {
            this.target = new fhir.Reference(source.targetReference);
        }
        else if (source['targetAttachment']) {
            this.target = new fhir.Attachment(source.targetAttachment);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.relatesTo';
        }
        this.vRS('relationshipType', exp);
        this.vOA('targetClassifier', exp);
        this.vRS('target', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationRelatesTo._fts_dataType = 'CitationRelatesTo';
/**
 * Internal flag to properly serialize choice-type element Citation.relatesTo.target[x]
 */
CitationRelatesTo._fts_targetIsChoice = true;
/**
 * The defined version of the cited artifact.
 */
export class CitationCitedArtifactVersion extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['baseCitation']) {
            this.baseCitation = new fhir.Reference(source.baseCitation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.version';
        }
        this.vRS('value', exp);
        this.vOS('baseCitation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactVersion._fts_dataType = 'CitationCitedArtifactVersion';
/**
 * An effective date or period for a status of the cited artifact.
 */
export class CitationCitedArtifactStatusDate extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactStatusDate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        else {
            this.activity = null;
        }
        if (source['actual']) {
            this.actual = new fhir.FhirBoolean({ value: source.actual });
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.statusDate';
        }
        this.vRS('activity', exp);
        this.vOS('actual', exp);
        this.vRS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactStatusDate._fts_dataType = 'CitationCitedArtifactStatusDate';
/**
 * The title details of the article or artifact.
 */
export class CitationCitedArtifactTitle extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactTitle - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        if (source['text']) {
            this.text = new fhir.FhirMarkdown({ value: source.text });
        }
        else {
            this.text = null;
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirMarkdown(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.title';
        }
        this.vOA('type', exp);
        this.vOS('language', exp);
        this.vRS('text', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactTitle._fts_dataType = 'CitationCitedArtifactTitle';
/**
 * Summary of the article or artifact.
 */
export class CitationCitedArtifactAbstract extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactAbstract - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        if (source['text']) {
            this.text = new fhir.FhirMarkdown({ value: source.text });
        }
        else {
            this.text = null;
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirMarkdown(source._text);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.abstract';
        }
        this.vOS('type', exp);
        this.vOS('language', exp);
        this.vRS('text', exp);
        this.vOS('copyright', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactAbstract._fts_dataType = 'CitationCitedArtifactAbstract';
/**
 * The component of the article or artifact.
 */
export class CitationCitedArtifactPart extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['baseCitation']) {
            this.baseCitation = new fhir.Reference(source.baseCitation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.part';
        }
        this.vOS('type', exp);
        this.vOS('value', exp);
        this.vOS('baseCitation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPart._fts_dataType = 'CitationCitedArtifactPart';
/**
 * The artifact related to the cited artifact.
 */
export class CitationCitedArtifactRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationshipType']) {
            this.relationshipType = new fhir.CodeableConcept(source.relationshipType);
        }
        else {
            this.relationshipType = null;
        }
        if (source['targetClassifier']) {
            this.targetClassifier = source.targetClassifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.targetClassifier = [];
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetUri']) {
            this.target = new fhir.FhirUri({ value: source.targetUri });
        }
        else if (source['targetIdentifier']) {
            this.target = new fhir.Identifier(source.targetIdentifier);
        }
        else if (source['targetReference']) {
            this.target = new fhir.Reference(source.targetReference);
        }
        else if (source['targetAttachment']) {
            this.target = new fhir.Attachment(source.targetAttachment);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.relatesTo';
        }
        this.vRS('relationshipType', exp);
        this.vOA('targetClassifier', exp);
        this.vRS('target', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactRelatesTo._fts_dataType = 'CitationCitedArtifactRelatesTo';
/**
 * Internal flag to properly serialize choice-type element Citation.citedArtifact.relatesTo.target[x]
 */
CitationCitedArtifactRelatesTo._fts_targetIsChoice = true;
/**
 * The collection the cited article or artifact is published in.
 */
export class CitationCitedArtifactPublicationFormPublishedIn extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationFormPublishedIn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher);
        }
        if (source['publisherLocation']) {
            this.publisherLocation = new fhir.FhirString({ value: source.publisherLocation });
        }
        if (source['_publisherLocation']) {
            if (this.publisherLocation) {
                this.publisherLocation.addExtendedProperties(source._publisherLocation);
            }
            else {
                this.publisherLocation = new fhir.FhirString(source._publisherLocation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm.publishedIn';
        }
        this.vOS('type', exp);
        this.vOA('identifier', exp);
        this.vOS('title', exp);
        this.vOS('publisher', exp);
        this.vOS('publisherLocation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationFormPublishedIn._fts_dataType = 'CitationCitedArtifactPublicationFormPublishedIn';
/**
 * Defining the date on which the issue of the journal was published.
 */
export class CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['year']) {
            this.year = new fhir.FhirString({ value: source.year });
        }
        if (source['_year']) {
            if (this.year) {
                this.year.addExtendedProperties(source._year);
            }
            else {
                this.year = new fhir.FhirString(source._year);
            }
        }
        if (source['month']) {
            this.month = new fhir.FhirString({ value: source.month });
        }
        if (source['_month']) {
            if (this.month) {
                this.month.addExtendedProperties(source._month);
            }
            else {
                this.month = new fhir.FhirString(source._month);
            }
        }
        if (source['day']) {
            this.day = new fhir.FhirString({ value: source.day });
        }
        if (source['_day']) {
            if (this.day) {
                this.day.addExtendedProperties(source._day);
            }
            else {
                this.day = new fhir.FhirString(source._day);
            }
        }
        if (source['season']) {
            this.season = new fhir.FhirString({ value: source.season });
        }
        if (source['_season']) {
            if (this.season) {
                this.season.addExtendedProperties(source._season);
            }
            else {
                this.season = new fhir.FhirString(source._season);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication';
        }
        this.vOS('date', exp);
        this.vOS('year', exp);
        this.vOS('month', exp);
        this.vOS('day', exp);
        this.vOS('season', exp);
        this.vOS('text', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication._fts_dataType = 'CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication';
/**
 * The specific issue in which the cited article resides.
 */
export class CitationCitedArtifactPublicationFormPeriodicRelease extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationFormPeriodicRelease - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['citedMedium']) {
            this.citedMedium = new fhir.CodeableConcept(source.citedMedium);
        }
        if (source['volume']) {
            this.volume = new fhir.FhirString({ value: source.volume });
        }
        if (source['_volume']) {
            if (this.volume) {
                this.volume.addExtendedProperties(source._volume);
            }
            else {
                this.volume = new fhir.FhirString(source._volume);
            }
        }
        if (source['issue']) {
            this.issue = new fhir.FhirString({ value: source.issue });
        }
        if (source['_issue']) {
            if (this.issue) {
                this.issue.addExtendedProperties(source._issue);
            }
            else {
                this.issue = new fhir.FhirString(source._issue);
            }
        }
        if (source['dateOfPublication']) {
            this.dateOfPublication = new fhir.CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(source.dateOfPublication);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm.periodicRelease';
        }
        this.vOS('citedMedium', exp);
        this.vOS('volume', exp);
        this.vOS('issue', exp);
        this.vOS('dateOfPublication', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationFormPeriodicRelease._fts_dataType = 'CitationCitedArtifactPublicationFormPeriodicRelease';
/**
 * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
 */
export class CitationCitedArtifactPublicationForm extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationForm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['publishedIn']) {
            this.publishedIn = new fhir.CitationCitedArtifactPublicationFormPublishedIn(source.publishedIn);
        }
        if (source['periodicRelease']) {
            this.periodicRelease = new fhir.CitationCitedArtifactPublicationFormPeriodicRelease(source.periodicRelease);
        }
        if (source['articleDate']) {
            this.articleDate = new fhir.FhirDateTime({ value: source.articleDate });
        }
        if (source['_articleDate']) {
            if (this.articleDate) {
                this.articleDate.addExtendedProperties(source._articleDate);
            }
            else {
                this.articleDate = new fhir.FhirDateTime(source._articleDate);
            }
        }
        if (source['lastRevisionDate']) {
            this.lastRevisionDate = new fhir.FhirDateTime({ value: source.lastRevisionDate });
        }
        if (source['_lastRevisionDate']) {
            if (this.lastRevisionDate) {
                this.lastRevisionDate.addExtendedProperties(source._lastRevisionDate);
            }
            else {
                this.lastRevisionDate = new fhir.FhirDateTime(source._lastRevisionDate);
            }
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.language = [];
        }
        if (source['accessionNumber']) {
            this.accessionNumber = new fhir.FhirString({ value: source.accessionNumber });
        }
        if (source['_accessionNumber']) {
            if (this.accessionNumber) {
                this.accessionNumber.addExtendedProperties(source._accessionNumber);
            }
            else {
                this.accessionNumber = new fhir.FhirString(source._accessionNumber);
            }
        }
        if (source['pageString']) {
            this.pageString = new fhir.FhirString({ value: source.pageString });
        }
        if (source['_pageString']) {
            if (this.pageString) {
                this.pageString.addExtendedProperties(source._pageString);
            }
            else {
                this.pageString = new fhir.FhirString(source._pageString);
            }
        }
        if (source['firstPage']) {
            this.firstPage = new fhir.FhirString({ value: source.firstPage });
        }
        if (source['_firstPage']) {
            if (this.firstPage) {
                this.firstPage.addExtendedProperties(source._firstPage);
            }
            else {
                this.firstPage = new fhir.FhirString(source._firstPage);
            }
        }
        if (source['lastPage']) {
            this.lastPage = new fhir.FhirString({ value: source.lastPage });
        }
        if (source['_lastPage']) {
            if (this.lastPage) {
                this.lastPage.addExtendedProperties(source._lastPage);
            }
            else {
                this.lastPage = new fhir.FhirString(source._lastPage);
            }
        }
        if (source['pageCount']) {
            this.pageCount = new fhir.FhirString({ value: source.pageCount });
        }
        if (source['_pageCount']) {
            if (this.pageCount) {
                this.pageCount.addExtendedProperties(source._pageCount);
            }
            else {
                this.pageCount = new fhir.FhirString(source._pageCount);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm';
        }
        this.vOS('publishedIn', exp);
        this.vOS('periodicRelease', exp);
        this.vOS('articleDate', exp);
        this.vOS('lastRevisionDate', exp);
        this.vOA('language', exp);
        this.vOS('accessionNumber', exp);
        this.vOS('pageString', exp);
        this.vOS('firstPage', exp);
        this.vOS('lastPage', exp);
        this.vOS('pageCount', exp);
        this.vOS('copyright', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationForm._fts_dataType = 'CitationCitedArtifactPublicationForm';
/**
 * Used for any URL for the article or artifact cited.
 */
export class CitationCitedArtifactWebLocation extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactWebLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.webLocation';
        }
        this.vOS('type', exp);
        this.vOS('url', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactWebLocation._fts_dataType = 'CitationCitedArtifactWebLocation';
/**
 * Provenance and copyright of classification.
 */
export class CitationCitedArtifactClassificationWhoClassified extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactClassificationWhoClassified - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['person']) {
            this.person = new fhir.Reference(source.person);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher);
        }
        if (source['classifierCopyright']) {
            this.classifierCopyright = new fhir.FhirString({ value: source.classifierCopyright });
        }
        if (source['_classifierCopyright']) {
            if (this.classifierCopyright) {
                this.classifierCopyright.addExtendedProperties(source._classifierCopyright);
            }
            else {
                this.classifierCopyright = new fhir.FhirString(source._classifierCopyright);
            }
        }
        if (source['freeToShare']) {
            this.freeToShare = new fhir.FhirBoolean({ value: source.freeToShare });
        }
        if (source['_freeToShare']) {
            if (this.freeToShare) {
                this.freeToShare.addExtendedProperties(source._freeToShare);
            }
            else {
                this.freeToShare = new fhir.FhirBoolean(source._freeToShare);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.classification.whoClassified';
        }
        this.vOS('person', exp);
        this.vOS('organization', exp);
        this.vOS('publisher', exp);
        this.vOS('classifierCopyright', exp);
        this.vOS('freeToShare', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactClassificationWhoClassified._fts_dataType = 'CitationCitedArtifactClassificationWhoClassified';
/**
 * The assignment to an organizing scheme.
 */
export class CitationCitedArtifactClassification extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['classifier']) {
            this.classifier = source.classifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classifier = [];
        }
        if (source['whoClassified']) {
            this.whoClassified = new fhir.CitationCitedArtifactClassificationWhoClassified(source.whoClassified);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.classification';
        }
        this.vOS('type', exp);
        this.vOA('classifier', exp);
        this.vOS('whoClassified', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactClassification._fts_dataType = 'CitationCitedArtifactClassification';
/**
 * Organization affiliated with the entity.
 */
export class CitationCitedArtifactContributorshipEntryAffiliationInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipEntryAffiliationInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['affiliation']) {
            this.affiliation = new fhir.FhirString({ value: source.affiliation });
        }
        if (source['_affiliation']) {
            if (this.affiliation) {
                this.affiliation.addExtendedProperties(source._affiliation);
            }
            else {
                this.affiliation = new fhir.FhirString(source._affiliation);
            }
        }
        if (source['role']) {
            this.role = new fhir.FhirString({ value: source.role });
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirString(source._role);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.entry.affiliationInfo';
        }
        this.vOS('affiliation', exp);
        this.vOS('role', exp);
        this.vOA('identifier', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipEntryAffiliationInfo._fts_dataType = 'CitationCitedArtifactContributorshipEntryAffiliationInfo';
/**
 * Contributions with accounting for time or number.
 */
export class CitationCitedArtifactContributorshipEntryContributionInstance extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipEntryContributionInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['time']) {
            this.time = new fhir.FhirDateTime({ value: source.time });
        }
        if (source['_time']) {
            if (this.time) {
                this.time.addExtendedProperties(source._time);
            }
            else {
                this.time = new fhir.FhirDateTime(source._time);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.entry.contributionInstance';
        }
        this.vRS('type', exp);
        this.vOS('time', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipEntryContributionInstance._fts_dataType = 'CitationCitedArtifactContributorshipEntryContributionInstance';
/**
 * Used to report contributorship in individualized ways.
 */
export class CitationCitedArtifactContributorshipEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['initials']) {
            this.initials = new fhir.FhirString({ value: source.initials });
        }
        if (source['_initials']) {
            if (this.initials) {
                this.initials.addExtendedProperties(source._initials);
            }
            else {
                this.initials = new fhir.FhirString(source._initials);
            }
        }
        if (source['collectiveName']) {
            this.collectiveName = new fhir.FhirString({ value: source.collectiveName });
        }
        if (source['_collectiveName']) {
            if (this.collectiveName) {
                this.collectiveName.addExtendedProperties(source._collectiveName);
            }
            else {
                this.collectiveName = new fhir.FhirString(source._collectiveName);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['affiliationInfo']) {
            this.affiliationInfo = source.affiliationInfo.map((x) => new fhir.CitationCitedArtifactContributorshipEntryAffiliationInfo(x));
        }
        else {
            this.affiliationInfo = [];
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['contributionType']) {
            this.contributionType = source.contributionType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.contributionType = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['contributionInstance']) {
            this.contributionInstance = source.contributionInstance.map((x) => new fhir.CitationCitedArtifactContributorshipEntryContributionInstance(x));
        }
        else {
            this.contributionInstance = [];
        }
        if (source['correspondingContact']) {
            this.correspondingContact = new fhir.FhirBoolean({ value: source.correspondingContact });
        }
        if (source['_correspondingContact']) {
            if (this.correspondingContact) {
                this.correspondingContact.addExtendedProperties(source._correspondingContact);
            }
            else {
                this.correspondingContact = new fhir.FhirBoolean(source._correspondingContact);
            }
        }
        if (source['listOrder']) {
            this.listOrder = new fhir.FhirPositiveInt({ value: source.listOrder });
        }
        if (source['_listOrder']) {
            if (this.listOrder) {
                this.listOrder.addExtendedProperties(source._listOrder);
            }
            else {
                this.listOrder = new fhir.FhirPositiveInt(source._listOrder);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.entry';
        }
        this.vOS('name', exp);
        this.vOS('initials', exp);
        this.vOS('collectiveName', exp);
        this.vOA('identifier', exp);
        this.vOA('affiliationInfo', exp);
        this.vOA('address', exp);
        this.vOA('telecom', exp);
        this.vOA('contributionType', exp);
        this.vOS('role', exp);
        this.vOA('contributionInstance', exp);
        this.vOS('correspondingContact', exp);
        this.vOS('listOrder', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipEntry._fts_dataType = 'CitationCitedArtifactContributorshipEntry';
/**
 * Used to record a display of the author/contributor list without separate coding for each list member.
 */
export class CitationCitedArtifactContributorshipSummary extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipSummary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['style']) {
            this.style = new fhir.CodeableConcept(source.style);
        }
        if (source['source']) {
            this.source = new fhir.CodeableConcept(source.source);
        }
        if (source['value']) {
            this.value = new fhir.FhirMarkdown({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirMarkdown(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.summary';
        }
        this.vOS('type', exp);
        this.vOS('style', exp);
        this.vOS('source', exp);
        this.vRS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipSummary._fts_dataType = 'CitationCitedArtifactContributorshipSummary';
/**
 * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
 */
export class CitationCitedArtifactContributorship extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['complete']) {
            this.complete = new fhir.FhirBoolean({ value: source.complete });
        }
        if (source['_complete']) {
            if (this.complete) {
                this.complete.addExtendedProperties(source._complete);
            }
            else {
                this.complete = new fhir.FhirBoolean(source._complete);
            }
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.CitationCitedArtifactContributorshipEntry(x));
        }
        else {
            this.entry = [];
        }
        if (source['summary']) {
            this.summary = source.summary.map((x) => new fhir.CitationCitedArtifactContributorshipSummary(x));
        }
        else {
            this.summary = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship';
        }
        this.vOS('complete', exp);
        this.vOA('entry', exp);
        this.vOA('summary', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorship._fts_dataType = 'CitationCitedArtifactContributorship';
/**
 * The article or artifact being described.
 */
export class CitationCitedArtifact extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['relatedIdentifier']) {
            this.relatedIdentifier = source.relatedIdentifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.relatedIdentifier = [];
        }
        if (source['dateAccessed']) {
            this.dateAccessed = new fhir.FhirDateTime({ value: source.dateAccessed });
        }
        if (source['_dateAccessed']) {
            if (this.dateAccessed) {
                this.dateAccessed.addExtendedProperties(source._dateAccessed);
            }
            else {
                this.dateAccessed = new fhir.FhirDateTime(source._dateAccessed);
            }
        }
        if (source['version']) {
            this.version = new fhir.CitationCitedArtifactVersion(source.version);
        }
        if (source['currentState']) {
            this.currentState = source.currentState.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.currentState = [];
        }
        if (source['statusDate']) {
            this.statusDate = source.statusDate.map((x) => new fhir.CitationCitedArtifactStatusDate(x));
        }
        else {
            this.statusDate = [];
        }
        if (source['title']) {
            this.title = source.title.map((x) => new fhir.CitationCitedArtifactTitle(x));
        }
        else {
            this.title = [];
        }
        if (source['abstract']) {
            this.abstract = source.abstract.map((x) => new fhir.CitationCitedArtifactAbstract(x));
        }
        else {
            this.abstract = [];
        }
        if (source['part']) {
            this.part = new fhir.CitationCitedArtifactPart(source.part);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.CitationCitedArtifactRelatesTo(x));
        }
        else {
            this.relatesTo = [];
        }
        if (source['publicationForm']) {
            this.publicationForm = source.publicationForm.map((x) => new fhir.CitationCitedArtifactPublicationForm(x));
        }
        else {
            this.publicationForm = [];
        }
        if (source['webLocation']) {
            this.webLocation = source.webLocation.map((x) => new fhir.CitationCitedArtifactWebLocation(x));
        }
        else {
            this.webLocation = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CitationCitedArtifactClassification(x));
        }
        else {
            this.classification = [];
        }
        if (source['contributorship']) {
            this.contributorship = new fhir.CitationCitedArtifactContributorship(source.contributorship);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact';
        }
        this.vOA('identifier', exp);
        this.vOA('relatedIdentifier', exp);
        this.vOS('dateAccessed', exp);
        this.vOS('version', exp);
        this.vOA('currentState', exp);
        this.vOA('statusDate', exp);
        this.vOA('title', exp);
        this.vOA('abstract', exp);
        this.vOS('part', exp);
        this.vOA('relatesTo', exp);
        this.vOA('publicationForm', exp);
        this.vOA('webLocation', exp);
        this.vOA('classification', exp);
        this.vOS('contributorship', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifact._fts_dataType = 'CitationCitedArtifact';
/**
 * The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
 */
export class Citation extends fhir.DomainResource {
    /**
     * Default constructor for Citation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Citation';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['summary']) {
            this.summary = source.summary.map((x) => new fhir.CitationSummary(x));
        }
        else {
            this.summary = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CitationClassification(x));
        }
        else {
            this.classification = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['currentState']) {
            this.currentState = source.currentState.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.currentState = [];
        }
        if (source['statusDate']) {
            this.statusDate = source.statusDate.map((x) => new fhir.CitationStatusDate(x));
        }
        else {
            this.statusDate = [];
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.CitationRelatesTo(x));
        }
        else {
            this.relatesTo = [];
        }
        if (source['citedArtifact']) {
            this.citedArtifact = new fhir.CitationCitedArtifact(source.citedArtifact);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation';
        }
        this.vRS('resourceType', exp);
        this.vOS('url', exp);
        this.vOA('identifier', exp);
        this.vOS('version', exp);
        this.vOS('name', exp);
        this.vOS('title', exp);
        this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('date', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('description', exp);
        this.vOA('useContext', exp);
        this.vOA('jurisdiction', exp);
        this.vOS('purpose', exp);
        this.vOS('copyright', exp);
        this.vOS('approvalDate', exp);
        this.vOS('lastReviewDate', exp);
        this.vOS('effectivePeriod', exp);
        this.vOA('author', exp);
        this.vOA('editor', exp);
        this.vOA('reviewer', exp);
        this.vOA('endorser', exp);
        this.vOA('summary', exp);
        this.vOA('classification', exp);
        this.vOA('note', exp);
        this.vOA('currentState', exp);
        this.vOA('statusDate', exp);
        this.vOA('relatesTo', exp);
        this.vOS('citedArtifact', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Citation._fts_dataType = 'Citation';
//# sourceMappingURL=data:application/json;base64,