// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Citation
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * A human-readable display of the citation.
 */
export class CitationSummary extends fhir.BackboneElement {
    /**
     * Default constructor for CitationSummary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['style']) {
            this.style = new fhir.CodeableConcept(source.style, options);
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirMarkdown({ value: source.text }, options);
        }
        else {
            this.text = null;
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirMarkdown(source._text, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.summary';
        }
        iss.push(...this.vOS('style', exp));
        iss.push(...this.vRS('text', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationSummary._fts_dataType = 'CitationSummary';
/**
 * The assignment to an organizing scheme.
 */
export class CitationClassification extends fhir.BackboneElement {
    /**
     * Default constructor for CitationClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['classifier']) {
            this.classifier = source.classifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.classifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.classification';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('classifier', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationClassification._fts_dataType = 'CitationClassification';
/**
 * An effective date or period for a status of the citation.
 */
export class CitationStatusDate extends fhir.BackboneElement {
    /**
     * Default constructor for CitationStatusDate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity, options);
        }
        else {
            this.activity = null;
        }
        if (source['actual'] !== undefined) {
            this.actual = new fhir.FhirBoolean({ value: source.actual }, options);
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.statusDate';
        }
        iss.push(...this.vRS('activity', exp));
        iss.push(...this.vOS('actual', exp));
        iss.push(...this.vRS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationStatusDate._fts_dataType = 'CitationStatusDate';
/**
 * Artifact related to the Citation Resource.
 */
export class CitationRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for CitationRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationshipType']) {
            this.relationshipType = new fhir.CodeableConcept(source.relationshipType, options);
        }
        else {
            this.relationshipType = null;
        }
        if (source['targetClassifier']) {
            this.targetClassifier = source.targetClassifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.targetClassifier = [];
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetUri'] !== undefined) {
            this.target = new fhir.FhirUri({ value: source.targetUri }, options);
        }
        else if (source['targetIdentifier']) {
            this.target = new fhir.Identifier(source.targetIdentifier, options);
        }
        else if (source['targetReference']) {
            this.target = new fhir.Reference(source.targetReference, options);
        }
        else if (source['targetAttachment']) {
            this.target = new fhir.Attachment(source.targetAttachment, options);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.relatesTo';
        }
        iss.push(...this.vRS('relationshipType', exp));
        iss.push(...this.vOA('targetClassifier', exp));
        iss.push(...this.vRS('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationRelatesTo._fts_dataType = 'CitationRelatesTo';
/**
 * Internal flag to properly serialize choice-type element Citation.relatesTo.target[x]
 */
CitationRelatesTo._fts_targetIsChoice = true;
/**
 * The defined version of the cited artifact.
 */
export class CitationCitedArtifactVersion extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.value }, options);
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value, options);
            }
        }
        if (source['baseCitation']) {
            this.baseCitation = new fhir.Reference(source.baseCitation, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.version';
        }
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOS('baseCitation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactVersion._fts_dataType = 'CitationCitedArtifactVersion';
/**
 * An effective date or period for a status of the cited artifact.
 */
export class CitationCitedArtifactStatusDate extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactStatusDate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity, options);
        }
        else {
            this.activity = null;
        }
        if (source['actual'] !== undefined) {
            this.actual = new fhir.FhirBoolean({ value: source.actual }, options);
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.statusDate';
        }
        iss.push(...this.vRS('activity', exp));
        iss.push(...this.vOS('actual', exp));
        iss.push(...this.vRS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactStatusDate._fts_dataType = 'CitationCitedArtifactStatusDate';
/**
 * The title details of the article or artifact.
 */
export class CitationCitedArtifactTitle extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactTitle - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language, options);
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirMarkdown({ value: source.text }, options);
        }
        else {
            this.text = null;
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirMarkdown(source._text, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.title';
        }
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vRS('text', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactTitle._fts_dataType = 'CitationCitedArtifactTitle';
/**
 * Summary of the article or artifact.
 */
export class CitationCitedArtifactAbstract extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactAbstract - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language, options);
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirMarkdown({ value: source.text }, options);
        }
        else {
            this.text = null;
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirMarkdown(source._text, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.abstract';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vRS('text', exp));
        iss.push(...this.vOS('copyright', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactAbstract._fts_dataType = 'CitationCitedArtifactAbstract';
/**
 * The component of the article or artifact.
 */
export class CitationCitedArtifactPart extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.value }, options);
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value, options);
            }
        }
        if (source['baseCitation']) {
            this.baseCitation = new fhir.Reference(source.baseCitation, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.part';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('baseCitation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPart._fts_dataType = 'CitationCitedArtifactPart';
/**
 * The artifact related to the cited artifact.
 */
export class CitationCitedArtifactRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationshipType']) {
            this.relationshipType = new fhir.CodeableConcept(source.relationshipType, options);
        }
        else {
            this.relationshipType = null;
        }
        if (source['targetClassifier']) {
            this.targetClassifier = source.targetClassifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.targetClassifier = [];
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetUri'] !== undefined) {
            this.target = new fhir.FhirUri({ value: source.targetUri }, options);
        }
        else if (source['targetIdentifier']) {
            this.target = new fhir.Identifier(source.targetIdentifier, options);
        }
        else if (source['targetReference']) {
            this.target = new fhir.Reference(source.targetReference, options);
        }
        else if (source['targetAttachment']) {
            this.target = new fhir.Attachment(source.targetAttachment, options);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.relatesTo';
        }
        iss.push(...this.vRS('relationshipType', exp));
        iss.push(...this.vOA('targetClassifier', exp));
        iss.push(...this.vRS('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactRelatesTo._fts_dataType = 'CitationCitedArtifactRelatesTo';
/**
 * Internal flag to properly serialize choice-type element Citation.citedArtifact.relatesTo.target[x]
 */
CitationCitedArtifactRelatesTo._fts_targetIsChoice = true;
/**
 * The collection the cited article or artifact is published in.
 */
export class CitationCitedArtifactPublicationFormPublishedIn extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationFormPublishedIn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher, options);
        }
        if (source['publisherLocation'] !== undefined) {
            this.publisherLocation = new fhir.FhirString({ value: source.publisherLocation }, options);
        }
        if (source['_publisherLocation']) {
            if (this.publisherLocation) {
                this.publisherLocation.addExtendedProperties(source._publisherLocation);
            }
            else {
                this.publisherLocation = new fhir.FhirString(source._publisherLocation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm.publishedIn';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOS('publisherLocation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationFormPublishedIn._fts_dataType = 'CitationCitedArtifactPublicationFormPublishedIn';
/**
 * Defining the date on which the issue of the journal was published.
 */
export class CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDate({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date, options);
            }
        }
        if (source['year'] !== undefined) {
            this.year = new fhir.FhirString({ value: source.year }, options);
        }
        if (source['_year']) {
            if (this.year) {
                this.year.addExtendedProperties(source._year);
            }
            else {
                this.year = new fhir.FhirString(source._year, options);
            }
        }
        if (source['month'] !== undefined) {
            this.month = new fhir.FhirString({ value: source.month }, options);
        }
        if (source['_month']) {
            if (this.month) {
                this.month.addExtendedProperties(source._month);
            }
            else {
                this.month = new fhir.FhirString(source._month, options);
            }
        }
        if (source['day'] !== undefined) {
            this.day = new fhir.FhirString({ value: source.day }, options);
        }
        if (source['_day']) {
            if (this.day) {
                this.day.addExtendedProperties(source._day);
            }
            else {
                this.day = new fhir.FhirString(source._day, options);
            }
        }
        if (source['season'] !== undefined) {
            this.season = new fhir.FhirString({ value: source.season }, options);
        }
        if (source['_season']) {
            if (this.season) {
                this.season.addExtendedProperties(source._season);
            }
            else {
                this.season = new fhir.FhirString(source._season, options);
            }
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm.periodicRelease.dateOfPublication';
        }
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('year', exp));
        iss.push(...this.vOS('month', exp));
        iss.push(...this.vOS('day', exp));
        iss.push(...this.vOS('season', exp));
        iss.push(...this.vOS('text', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication._fts_dataType = 'CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication';
/**
 * The specific issue in which the cited article resides.
 */
export class CitationCitedArtifactPublicationFormPeriodicRelease extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationFormPeriodicRelease - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['citedMedium']) {
            this.citedMedium = new fhir.CodeableConcept(source.citedMedium, options);
        }
        if (source['volume'] !== undefined) {
            this.volume = new fhir.FhirString({ value: source.volume }, options);
        }
        if (source['_volume']) {
            if (this.volume) {
                this.volume.addExtendedProperties(source._volume);
            }
            else {
                this.volume = new fhir.FhirString(source._volume, options);
            }
        }
        if (source['issue'] !== undefined) {
            this.issue = new fhir.FhirString({ value: source.issue }, options);
        }
        if (source['_issue']) {
            if (this.issue) {
                this.issue.addExtendedProperties(source._issue);
            }
            else {
                this.issue = new fhir.FhirString(source._issue, options);
            }
        }
        if (source['dateOfPublication']) {
            this.dateOfPublication = new fhir.CitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(source.dateOfPublication, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm.periodicRelease';
        }
        iss.push(...this.vOS('citedMedium', exp));
        iss.push(...this.vOS('volume', exp));
        iss.push(...this.vOS('issue', exp));
        iss.push(...this.vOS('dateOfPublication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationFormPeriodicRelease._fts_dataType = 'CitationCitedArtifactPublicationFormPeriodicRelease';
/**
 * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
 */
export class CitationCitedArtifactPublicationForm extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactPublicationForm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['publishedIn']) {
            this.publishedIn = new fhir.CitationCitedArtifactPublicationFormPublishedIn(source.publishedIn, options);
        }
        if (source['periodicRelease']) {
            this.periodicRelease = new fhir.CitationCitedArtifactPublicationFormPeriodicRelease(source.periodicRelease, options);
        }
        if (source['articleDate'] !== undefined) {
            this.articleDate = new fhir.FhirDateTime({ value: source.articleDate }, options);
        }
        if (source['_articleDate']) {
            if (this.articleDate) {
                this.articleDate.addExtendedProperties(source._articleDate);
            }
            else {
                this.articleDate = new fhir.FhirDateTime(source._articleDate, options);
            }
        }
        if (source['lastRevisionDate'] !== undefined) {
            this.lastRevisionDate = new fhir.FhirDateTime({ value: source.lastRevisionDate }, options);
        }
        if (source['_lastRevisionDate']) {
            if (this.lastRevisionDate) {
                this.lastRevisionDate.addExtendedProperties(source._lastRevisionDate);
            }
            else {
                this.lastRevisionDate = new fhir.FhirDateTime(source._lastRevisionDate, options);
            }
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.language = [];
        }
        if (source['accessionNumber'] !== undefined) {
            this.accessionNumber = new fhir.FhirString({ value: source.accessionNumber }, options);
        }
        if (source['_accessionNumber']) {
            if (this.accessionNumber) {
                this.accessionNumber.addExtendedProperties(source._accessionNumber);
            }
            else {
                this.accessionNumber = new fhir.FhirString(source._accessionNumber, options);
            }
        }
        if (source['pageString'] !== undefined) {
            this.pageString = new fhir.FhirString({ value: source.pageString }, options);
        }
        if (source['_pageString']) {
            if (this.pageString) {
                this.pageString.addExtendedProperties(source._pageString);
            }
            else {
                this.pageString = new fhir.FhirString(source._pageString, options);
            }
        }
        if (source['firstPage'] !== undefined) {
            this.firstPage = new fhir.FhirString({ value: source.firstPage }, options);
        }
        if (source['_firstPage']) {
            if (this.firstPage) {
                this.firstPage.addExtendedProperties(source._firstPage);
            }
            else {
                this.firstPage = new fhir.FhirString(source._firstPage, options);
            }
        }
        if (source['lastPage'] !== undefined) {
            this.lastPage = new fhir.FhirString({ value: source.lastPage }, options);
        }
        if (source['_lastPage']) {
            if (this.lastPage) {
                this.lastPage.addExtendedProperties(source._lastPage);
            }
            else {
                this.lastPage = new fhir.FhirString(source._lastPage, options);
            }
        }
        if (source['pageCount'] !== undefined) {
            this.pageCount = new fhir.FhirString({ value: source.pageCount }, options);
        }
        if (source['_pageCount']) {
            if (this.pageCount) {
                this.pageCount.addExtendedProperties(source._pageCount);
            }
            else {
                this.pageCount = new fhir.FhirString(source._pageCount, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.publicationForm';
        }
        iss.push(...this.vOS('publishedIn', exp));
        iss.push(...this.vOS('periodicRelease', exp));
        iss.push(...this.vOS('articleDate', exp));
        iss.push(...this.vOS('lastRevisionDate', exp));
        iss.push(...this.vOA('language', exp));
        iss.push(...this.vOS('accessionNumber', exp));
        iss.push(...this.vOS('pageString', exp));
        iss.push(...this.vOS('firstPage', exp));
        iss.push(...this.vOS('lastPage', exp));
        iss.push(...this.vOS('pageCount', exp));
        iss.push(...this.vOS('copyright', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactPublicationForm._fts_dataType = 'CitationCitedArtifactPublicationForm';
/**
 * Used for any URL for the article or artifact cited.
 */
export class CitationCitedArtifactWebLocation extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactWebLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.webLocation';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactWebLocation._fts_dataType = 'CitationCitedArtifactWebLocation';
/**
 * Provenance and copyright of classification.
 */
export class CitationCitedArtifactClassificationWhoClassified extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactClassificationWhoClassified - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['person']) {
            this.person = new fhir.Reference(source.person, options);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization, options);
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher, options);
        }
        if (source['classifierCopyright'] !== undefined) {
            this.classifierCopyright = new fhir.FhirString({ value: source.classifierCopyright }, options);
        }
        if (source['_classifierCopyright']) {
            if (this.classifierCopyright) {
                this.classifierCopyright.addExtendedProperties(source._classifierCopyright);
            }
            else {
                this.classifierCopyright = new fhir.FhirString(source._classifierCopyright, options);
            }
        }
        if (source['freeToShare'] !== undefined) {
            this.freeToShare = new fhir.FhirBoolean({ value: source.freeToShare }, options);
        }
        if (source['_freeToShare']) {
            if (this.freeToShare) {
                this.freeToShare.addExtendedProperties(source._freeToShare);
            }
            else {
                this.freeToShare = new fhir.FhirBoolean(source._freeToShare, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.classification.whoClassified';
        }
        iss.push(...this.vOS('person', exp));
        iss.push(...this.vOS('organization', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOS('classifierCopyright', exp));
        iss.push(...this.vOS('freeToShare', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactClassificationWhoClassified._fts_dataType = 'CitationCitedArtifactClassificationWhoClassified';
/**
 * The assignment to an organizing scheme.
 */
export class CitationCitedArtifactClassification extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['classifier']) {
            this.classifier = source.classifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.classifier = [];
        }
        if (source['whoClassified']) {
            this.whoClassified = new fhir.CitationCitedArtifactClassificationWhoClassified(source.whoClassified, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.classification';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('classifier', exp));
        iss.push(...this.vOS('whoClassified', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactClassification._fts_dataType = 'CitationCitedArtifactClassification';
/**
 * Organization affiliated with the entity.
 */
export class CitationCitedArtifactContributorshipEntryAffiliationInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipEntryAffiliationInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['affiliation'] !== undefined) {
            this.affiliation = new fhir.FhirString({ value: source.affiliation }, options);
        }
        if (source['_affiliation']) {
            if (this.affiliation) {
                this.affiliation.addExtendedProperties(source._affiliation);
            }
            else {
                this.affiliation = new fhir.FhirString(source._affiliation, options);
            }
        }
        if (source['role'] !== undefined) {
            this.role = new fhir.FhirString({ value: source.role }, options);
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirString(source._role, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.entry.affiliationInfo';
        }
        iss.push(...this.vOS('affiliation', exp));
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOA('identifier', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipEntryAffiliationInfo._fts_dataType = 'CitationCitedArtifactContributorshipEntryAffiliationInfo';
/**
 * Contributions with accounting for time or number.
 */
export class CitationCitedArtifactContributorshipEntryContributionInstance extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipEntryContributionInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['time'] !== undefined) {
            this.time = new fhir.FhirDateTime({ value: source.time }, options);
        }
        if (source['_time']) {
            if (this.time) {
                this.time.addExtendedProperties(source._time);
            }
            else {
                this.time = new fhir.FhirDateTime(source._time, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.entry.contributionInstance';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('time', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipEntryContributionInstance._fts_dataType = 'CitationCitedArtifactContributorshipEntryContributionInstance';
/**
 * Used to report contributorship in individualized ways.
 */
export class CitationCitedArtifactContributorshipEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.HumanName(source.name, options);
        }
        if (source['initials'] !== undefined) {
            this.initials = new fhir.FhirString({ value: source.initials }, options);
        }
        if (source['_initials']) {
            if (this.initials) {
                this.initials.addExtendedProperties(source._initials);
            }
            else {
                this.initials = new fhir.FhirString(source._initials, options);
            }
        }
        if (source['collectiveName'] !== undefined) {
            this.collectiveName = new fhir.FhirString({ value: source.collectiveName }, options);
        }
        if (source['_collectiveName']) {
            if (this.collectiveName) {
                this.collectiveName.addExtendedProperties(source._collectiveName);
            }
            else {
                this.collectiveName = new fhir.FhirString(source._collectiveName, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['affiliationInfo']) {
            this.affiliationInfo = source.affiliationInfo.map((x) => new fhir.CitationCitedArtifactContributorshipEntryAffiliationInfo(x, options));
        }
        else {
            this.affiliationInfo = [];
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x, options));
        }
        else {
            this.address = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
        if (source['contributionType']) {
            this.contributionType = source.contributionType.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.contributionType = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        if (source['contributionInstance']) {
            this.contributionInstance = source.contributionInstance.map((x) => new fhir.CitationCitedArtifactContributorshipEntryContributionInstance(x, options));
        }
        else {
            this.contributionInstance = [];
        }
        if (source['correspondingContact'] !== undefined) {
            this.correspondingContact = new fhir.FhirBoolean({ value: source.correspondingContact }, options);
        }
        if (source['_correspondingContact']) {
            if (this.correspondingContact) {
                this.correspondingContact.addExtendedProperties(source._correspondingContact);
            }
            else {
                this.correspondingContact = new fhir.FhirBoolean(source._correspondingContact, options);
            }
        }
        if (source['listOrder'] !== undefined) {
            this.listOrder = new fhir.FhirPositiveInt({ value: source.listOrder }, options);
        }
        if (source['_listOrder']) {
            if (this.listOrder) {
                this.listOrder.addExtendedProperties(source._listOrder);
            }
            else {
                this.listOrder = new fhir.FhirPositiveInt(source._listOrder, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.entry';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('initials', exp));
        iss.push(...this.vOS('collectiveName', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('affiliationInfo', exp));
        iss.push(...this.vOA('address', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOA('contributionType', exp));
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOA('contributionInstance', exp));
        iss.push(...this.vOS('correspondingContact', exp));
        iss.push(...this.vOS('listOrder', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipEntry._fts_dataType = 'CitationCitedArtifactContributorshipEntry';
/**
 * Used to record a display of the author/contributor list without separate coding for each list member.
 */
export class CitationCitedArtifactContributorshipSummary extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorshipSummary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['style']) {
            this.style = new fhir.CodeableConcept(source.style, options);
        }
        if (source['source']) {
            this.source = new fhir.CodeableConcept(source.source, options);
        }
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirMarkdown({ value: source.value }, options);
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirMarkdown(source._value, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship.summary';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('style', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorshipSummary._fts_dataType = 'CitationCitedArtifactContributorshipSummary';
/**
 * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
 */
export class CitationCitedArtifactContributorship extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifactContributorship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['complete'] !== undefined) {
            this.complete = new fhir.FhirBoolean({ value: source.complete }, options);
        }
        if (source['_complete']) {
            if (this.complete) {
                this.complete.addExtendedProperties(source._complete);
            }
            else {
                this.complete = new fhir.FhirBoolean(source._complete, options);
            }
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.CitationCitedArtifactContributorshipEntry(x, options));
        }
        else {
            this.entry = [];
        }
        if (source['summary']) {
            this.summary = source.summary.map((x) => new fhir.CitationCitedArtifactContributorshipSummary(x, options));
        }
        else {
            this.summary = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact.contributorship';
        }
        iss.push(...this.vOS('complete', exp));
        iss.push(...this.vOA('entry', exp));
        iss.push(...this.vOA('summary', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifactContributorship._fts_dataType = 'CitationCitedArtifactContributorship';
/**
 * The article or artifact being described.
 */
export class CitationCitedArtifact extends fhir.BackboneElement {
    /**
     * Default constructor for CitationCitedArtifact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['relatedIdentifier']) {
            this.relatedIdentifier = source.relatedIdentifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.relatedIdentifier = [];
        }
        if (source['dateAccessed'] !== undefined) {
            this.dateAccessed = new fhir.FhirDateTime({ value: source.dateAccessed }, options);
        }
        if (source['_dateAccessed']) {
            if (this.dateAccessed) {
                this.dateAccessed.addExtendedProperties(source._dateAccessed);
            }
            else {
                this.dateAccessed = new fhir.FhirDateTime(source._dateAccessed, options);
            }
        }
        if (source['version']) {
            this.version = new fhir.CitationCitedArtifactVersion(source.version, options);
        }
        if (source['currentState']) {
            this.currentState = source.currentState.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.currentState = [];
        }
        if (source['statusDate']) {
            this.statusDate = source.statusDate.map((x) => new fhir.CitationCitedArtifactStatusDate(x, options));
        }
        else {
            this.statusDate = [];
        }
        if (source['title']) {
            this.title = source.title.map((x) => new fhir.CitationCitedArtifactTitle(x, options));
        }
        else {
            this.title = [];
        }
        if (source['abstract']) {
            this.abstract = source.abstract.map((x) => new fhir.CitationCitedArtifactAbstract(x, options));
        }
        else {
            this.abstract = [];
        }
        if (source['part']) {
            this.part = new fhir.CitationCitedArtifactPart(source.part, options);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.CitationCitedArtifactRelatesTo(x, options));
        }
        else {
            this.relatesTo = [];
        }
        if (source['publicationForm']) {
            this.publicationForm = source.publicationForm.map((x) => new fhir.CitationCitedArtifactPublicationForm(x, options));
        }
        else {
            this.publicationForm = [];
        }
        if (source['webLocation']) {
            this.webLocation = source.webLocation.map((x) => new fhir.CitationCitedArtifactWebLocation(x, options));
        }
        else {
            this.webLocation = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CitationCitedArtifactClassification(x, options));
        }
        else {
            this.classification = [];
        }
        if (source['contributorship']) {
            this.contributorship = new fhir.CitationCitedArtifactContributorship(source.contributorship, options);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation.citedArtifact';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('relatedIdentifier', exp));
        iss.push(...this.vOS('dateAccessed', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOA('currentState', exp));
        iss.push(...this.vOA('statusDate', exp));
        iss.push(...this.vOA('title', exp));
        iss.push(...this.vOA('abstract', exp));
        iss.push(...this.vOS('part', exp));
        iss.push(...this.vOA('relatesTo', exp));
        iss.push(...this.vOA('publicationForm', exp));
        iss.push(...this.vOA('webLocation', exp));
        iss.push(...this.vOA('classification', exp));
        iss.push(...this.vOS('contributorship', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CitationCitedArtifact._fts_dataType = 'CitationCitedArtifact';
/**
 * The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
 */
export class Citation extends fhir.DomainResource {
    /**
     * Default constructor for Citation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Citation';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['approvalDate'] !== undefined) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate }, options);
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate, options);
            }
        }
        if (source['lastReviewDate'] !== undefined) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate }, options);
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate, options);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod, options);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.endorser = [];
        }
        if (source['summary']) {
            this.summary = source.summary.map((x) => new fhir.CitationSummary(x, options));
        }
        else {
            this.summary = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CitationClassification(x, options));
        }
        else {
            this.classification = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['currentState']) {
            this.currentState = source.currentState.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.currentState = [];
        }
        if (source['statusDate']) {
            this.statusDate = source.statusDate.map((x) => new fhir.CitationStatusDate(x, options));
        }
        else {
            this.statusDate = [];
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.CitationRelatesTo(x, options));
        }
        else {
            this.relatesTo = [];
        }
        if (source['citedArtifact']) {
            this.citedArtifact = new fhir.CitationCitedArtifact(source.citedArtifact, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Citation';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('approvalDate', exp));
        iss.push(...this.vOS('lastReviewDate', exp));
        iss.push(...this.vOS('effectivePeriod', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOA('editor', exp));
        iss.push(...this.vOA('reviewer', exp));
        iss.push(...this.vOA('endorser', exp));
        iss.push(...this.vOA('summary', exp));
        iss.push(...this.vOA('classification', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('currentState', exp));
        iss.push(...this.vOA('statusDate', exp));
        iss.push(...this.vOA('relatesTo', exp));
        iss.push(...this.vOS('citedArtifact', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Citation._fts_dataType = 'Citation';
//# sourceMappingURL=data:application/json;base64,