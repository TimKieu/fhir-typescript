// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingStudy
import * as fhir from '../fhir.js';
// @ts-ignore
import { ImagingstudyStatusVsValidation } from '../fhirValueSets/ImagingstudyStatusVsValidation.js';
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
export class ImagingStudySeriesPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy.series.performer';
        }
        this.vOS('function', exp);
        this.vRS('actor', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeriesPerformer._fts_dataType = 'ImagingStudySeriesPerformer';
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export class ImagingStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirId({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirId(source._uid);
            }
        }
        if (source['sopClass']) {
            this.sopClass = new fhir.Coding(source.sopClass);
        }
        else {
            this.sopClass = null;
        }
        if (source['number']) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number });
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirUnsignedInt(source._number);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy.series.instance';
        }
        this.vRS('uid', exp);
        this.vRS('sopClass', exp);
        this.vOS('number', exp);
        this.vOS('title', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeriesInstance._fts_dataType = 'ImagingStudySeriesInstance';
/**
 * Each study has one or more series of images or other content.
 */
export class ImagingStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirId({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirId(source._uid);
            }
        }
        if (source['number']) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number });
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirUnsignedInt(source._number);
            }
        }
        if (source['modality']) {
            this.modality = new fhir.Coding(source.modality);
        }
        else {
            this.modality = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['_numberOfInstances']) {
            if (this.numberOfInstances) {
                this.numberOfInstances.addExtendedProperties(source._numberOfInstances);
            }
            else {
                this.numberOfInstances = new fhir.FhirUnsignedInt(source._numberOfInstances);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.Coding(source.bodySite);
        }
        if (source['laterality']) {
            this.laterality = new fhir.Coding(source.laterality);
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['started']) {
            this.started = new fhir.FhirDateTime({ value: source.started });
        }
        if (source['_started']) {
            if (this.started) {
                this.started.addExtendedProperties(source._started);
            }
            else {
                this.started = new fhir.FhirDateTime(source._started);
            }
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImagingStudySeriesPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingStudySeriesInstance(x));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy.series';
        }
        this.vRS('uid', exp);
        this.vOS('number', exp);
        this.vRS('modality', exp);
        this.vOS('description', exp);
        this.vOS('numberOfInstances', exp);
        this.vOA('endpoint', exp);
        this.vOS('bodySite', exp);
        this.vOS('laterality', exp);
        this.vOA('specimen', exp);
        this.vOS('started', exp);
        this.vOA('performer', exp);
        this.vOA('instance', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeries._fts_dataType = 'ImagingStudySeries';
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export class ImagingStudy extends fhir.DomainResource {
    /**
     * Default constructor for ImagingStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['modality']) {
            this.modality = source.modality.map((x) => new fhir.Coding(x));
        }
        else {
            this.modality = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['started']) {
            this.started = new fhir.FhirDateTime({ value: source.started });
        }
        if (source['_started']) {
            if (this.started) {
                this.started.addExtendedProperties(source._started);
            }
            else {
                this.started = new fhir.FhirDateTime(source._started);
            }
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['referrer']) {
            this.referrer = new fhir.Reference(source.referrer);
        }
        if (source['interpreter']) {
            this.interpreter = source.interpreter.map((x) => new fhir.Reference(x));
        }
        else {
            this.interpreter = [];
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['numberOfSeries']) {
            this.numberOfSeries = new fhir.FhirUnsignedInt({ value: source.numberOfSeries });
        }
        if (source['_numberOfSeries']) {
            if (this.numberOfSeries) {
                this.numberOfSeries.addExtendedProperties(source._numberOfSeries);
            }
            else {
                this.numberOfSeries = new fhir.FhirUnsignedInt(source._numberOfSeries);
            }
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['_numberOfInstances']) {
            if (this.numberOfInstances) {
                this.numberOfInstances.addExtendedProperties(source._numberOfInstances);
            }
            else {
                this.numberOfInstances = new fhir.FhirUnsignedInt(source._numberOfInstances);
            }
        }
        if (source['procedureReference']) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        if (source['procedureCode']) {
            this.procedureCode = source.procedureCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.procedureCode = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingStudySeries(x));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'ImagingstudyStatus', ImagingstudyStatusVsValidation, 'r');
        this.vOA('modality', exp);
        this.vRS('subject', exp);
        this.vOS('encounter', exp);
        this.vOS('started', exp);
        this.vOA('basedOn', exp);
        this.vOS('referrer', exp);
        this.vOA('interpreter', exp);
        this.vOA('endpoint', exp);
        this.vOS('numberOfSeries', exp);
        this.vOS('numberOfInstances', exp);
        this.vOS('procedureReference', exp);
        this.vOA('procedureCode', exp);
        this.vOS('location', exp);
        this.vOA('reasonCode', exp);
        this.vOA('reasonReference', exp);
        this.vOA('note', exp);
        this.vOS('description', exp);
        this.vOA('series', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudy._fts_dataType = 'ImagingStudy';
//# sourceMappingURL=data:application/json;base64,