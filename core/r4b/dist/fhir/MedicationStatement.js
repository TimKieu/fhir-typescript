// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationStatementStatusVsValidation } from '../fhirValueSets/MedicationStatementStatusVsValidation.js';
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
export class MedicationStatement extends fhir.DomainResource {
    /**
     * Default constructor for MedicationStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationStatement';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.statusReason = [];
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['dateAsserted']) {
            this.dateAsserted = new fhir.FhirDateTime({ value: source.dateAsserted });
        }
        if (source['_dateAsserted']) {
            if (this.dateAsserted) {
                this.dateAsserted.addExtendedProperties(source._dateAsserted);
            }
            else {
                this.dateAsserted = new fhir.FhirDateTime(source._dateAsserted);
            }
        }
        if (source['informationSource']) {
            this.informationSource = new fhir.Reference(source.informationSource);
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.Reference(x));
        }
        else {
            this.derivedFrom = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationStatement';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'MedicationStatementStatus', MedicationStatementStatusVsValidation, 'r'));
        iss.push(...this.vOA('statusReason', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('medication', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('effective', exp));
        iss.push(...this.vOS('dateAsserted', exp));
        iss.push(...this.vOS('informationSource', exp));
        iss.push(...this.vOA('derivedFrom', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('dosage', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationStatement._fts_dataType = 'MedicationStatement';
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.medication[x]
 */
MedicationStatement._fts_medicationIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.effective[x]
 */
MedicationStatement._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,