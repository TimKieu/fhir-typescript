// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Questionnaire
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuestionnaireEnableOperatorVsValidation } from '../fhirValueSets/QuestionnaireEnableOperatorVsValidation.js';
// @ts-ignore
import { ItemTypeVsValidation } from '../fhirValueSets/ItemTypeVsValidation.js';
// @ts-ignore
import { QuestionnaireEnableBehaviorVsValidation } from '../fhirValueSets/QuestionnaireEnableBehaviorVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
/**
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
 */
export class QuestionnaireItemEnableWhen extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemEnableWhen - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['question'] !== undefined) {
            this.question = new fhir.FhirString({ value: source.question }, options);
        }
        else {
            this.question = null;
        }
        if (source['_question']) {
            if (this.question) {
                this.question.addExtendedProperties(source._question);
            }
            else {
                this.question = new fhir.FhirString(source._question, options);
            }
        }
        if (source['operator'] !== undefined) {
            this.operator = new fhir.FhirCode({ value: source.operator }, options);
        }
        else {
            this.operator = null;
        }
        if (source['_operator']) {
            if (this.operator) {
                this.operator.addExtendedProperties(source._operator);
            }
            else {
                this.operator = new fhir.FhirCode(source._operator, options);
            }
        }
        if (source['answer']) {
            this.answer = source.answer;
        }
        else if (source['answerBoolean'] !== undefined) {
            this.answer = new fhir.FhirBoolean({ value: source.answerBoolean }, options);
        }
        else if (source['answerDecimal'] !== undefined) {
            this.answer = new fhir.FhirDecimal({ value: source.answerDecimal }, options);
        }
        else if (source['answerInteger'] !== undefined) {
            this.answer = new fhir.FhirInteger({ value: source.answerInteger }, options);
        }
        else if (source['answerDate'] !== undefined) {
            this.answer = new fhir.FhirDate({ value: source.answerDate }, options);
        }
        else if (source['answerDateTime'] !== undefined) {
            this.answer = new fhir.FhirDateTime({ value: source.answerDateTime }, options);
        }
        else if (source['answerTime'] !== undefined) {
            this.answer = new fhir.FhirTime({ value: source.answerTime }, options);
        }
        else if (source['answerString'] !== undefined) {
            this.answer = new fhir.FhirString({ value: source.answerString }, options);
        }
        else if (source['answerCoding']) {
            this.answer = new fhir.Coding(source.answerCoding, options);
        }
        else if (source['answerQuantity']) {
            this.answer = new fhir.Quantity(source.answerQuantity, options);
        }
        else if (source['answerReference']) {
            this.answer = new fhir.Reference(source.answerReference, options);
        }
        else {
            this.answer = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item.enableWhen';
        }
        iss.push(...this.vRS('question', exp));
        iss.push(...this.vRSV('operator', exp, 'QuestionnaireEnableOperator', QuestionnaireEnableOperatorVsValidation, 'r'));
        iss.push(...this.vRS('answer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemEnableWhen._fts_dataType = 'QuestionnaireItemEnableWhen';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.enableWhen.answer[x]
 */
QuestionnaireItemEnableWhen._fts_answerIsChoice = true;
/**
 * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
 */
export class QuestionnaireItemAnswerOption extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemAnswerOption - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueInteger'] !== undefined) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger }, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueTime'] !== undefined) {
            this.value = new fhir.FhirTime({ value: source.valueTime }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        else {
            this.value = null;
        }
        if (source['initialSelected'] !== undefined) {
            this.initialSelected = new fhir.FhirBoolean({ value: source.initialSelected }, options);
        }
        if (source['_initialSelected']) {
            if (this.initialSelected) {
                this.initialSelected.addExtendedProperties(source._initialSelected);
            }
            else {
                this.initialSelected = new fhir.FhirBoolean(source._initialSelected, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item.answerOption';
        }
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOS('initialSelected', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemAnswerOption._fts_dataType = 'QuestionnaireItemAnswerOption';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.answerOption.value[x]
 */
QuestionnaireItemAnswerOption._fts_valueIsChoice = true;
/**
 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
 */
export class QuestionnaireItemInitial extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemInitial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueDecimal'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal }, options);
        }
        else if (source['valueInteger'] !== undefined) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger }, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueDateTime'] !== undefined) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime }, options);
        }
        else if (source['valueTime'] !== undefined) {
            this.value = new fhir.FhirTime({ value: source.valueTime }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueUri'] !== undefined) {
            this.value = new fhir.FhirUri({ value: source.valueUri }, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item.initial';
        }
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemInitial._fts_dataType = 'QuestionnaireItemInitial';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.initial.value[x]
 */
QuestionnaireItemInitial._fts_valueIsChoice = true;
/**
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export class QuestionnaireItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId'] !== undefined) {
            this.linkId = new fhir.FhirString({ value: source.linkId }, options);
        }
        else {
            this.linkId = null;
        }
        if (source['_linkId']) {
            if (this.linkId) {
                this.linkId.addExtendedProperties(source._linkId);
            }
            else {
                this.linkId = new fhir.FhirString(source._linkId, options);
            }
        }
        if (source['definition'] !== undefined) {
            this.definition = new fhir.FhirUri({ value: source.definition }, options);
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition, options);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.code = [];
        }
        if (source['prefix'] !== undefined) {
            this.prefix = new fhir.FhirString({ value: source.prefix }, options);
        }
        if (source['_prefix']) {
            if (this.prefix) {
                this.prefix.addExtendedProperties(source._prefix);
            }
            else {
                this.prefix = new fhir.FhirString(source._prefix, options);
            }
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['enableWhen']) {
            this.enableWhen = source.enableWhen.map((x) => new fhir.QuestionnaireItemEnableWhen(x, options));
        }
        else {
            this.enableWhen = [];
        }
        if (source['enableBehavior'] !== undefined) {
            this.enableBehavior = new fhir.FhirCode({ value: source.enableBehavior }, options);
        }
        if (source['_enableBehavior']) {
            if (this.enableBehavior) {
                this.enableBehavior.addExtendedProperties(source._enableBehavior);
            }
            else {
                this.enableBehavior = new fhir.FhirCode(source._enableBehavior, options);
            }
        }
        if (source['required'] !== undefined) {
            this.required = new fhir.FhirBoolean({ value: source.required }, options);
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required, options);
            }
        }
        if (source['repeats'] !== undefined) {
            this.repeats = new fhir.FhirBoolean({ value: source.repeats }, options);
        }
        if (source['_repeats']) {
            if (this.repeats) {
                this.repeats.addExtendedProperties(source._repeats);
            }
            else {
                this.repeats = new fhir.FhirBoolean(source._repeats, options);
            }
        }
        if (source['readOnly'] !== undefined) {
            this.readOnly = new fhir.FhirBoolean({ value: source.readOnly }, options);
        }
        if (source['_readOnly']) {
            if (this.readOnly) {
                this.readOnly.addExtendedProperties(source._readOnly);
            }
            else {
                this.readOnly = new fhir.FhirBoolean(source._readOnly, options);
            }
        }
        if (source['maxLength'] !== undefined) {
            this.maxLength = new fhir.FhirInteger({ value: source.maxLength }, options);
        }
        if (source['_maxLength']) {
            if (this.maxLength) {
                this.maxLength.addExtendedProperties(source._maxLength);
            }
            else {
                this.maxLength = new fhir.FhirInteger(source._maxLength, options);
            }
        }
        if (source['answerValueSet'] !== undefined) {
            this.answerValueSet = new fhir.FhirCanonical({ value: source.answerValueSet }, options);
        }
        if (source['_answerValueSet']) {
            if (this.answerValueSet) {
                this.answerValueSet.addExtendedProperties(source._answerValueSet);
            }
            else {
                this.answerValueSet = new fhir.FhirCanonical(source._answerValueSet, options);
            }
        }
        if (source['answerOption']) {
            this.answerOption = source.answerOption.map((x) => new fhir.QuestionnaireItemAnswerOption(x, options));
        }
        else {
            this.answerOption = [];
        }
        if (source['initial']) {
            this.initial = source.initial.map((x) => new fhir.QuestionnaireItemInitial(x, options));
        }
        else {
            this.initial = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item';
        }
        iss.push(...this.vRS('linkId', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOS('prefix', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vRSV('type', exp, 'ItemType', ItemTypeVsValidation, 'r'));
        iss.push(...this.vOA('enableWhen', exp));
        iss.push(...this.vOSV('enableBehavior', exp, 'QuestionnaireEnableBehavior', QuestionnaireEnableBehaviorVsValidation, 'r'));
        iss.push(...this.vOS('required', exp));
        iss.push(...this.vOS('repeats', exp));
        iss.push(...this.vOS('readOnly', exp));
        iss.push(...this.vOS('maxLength', exp));
        iss.push(...this.vOS('answerValueSet', exp));
        iss.push(...this.vOA('answerOption', exp));
        iss.push(...this.vOA('initial', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItem._fts_dataType = 'QuestionnaireItem';
/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
export class Questionnaire extends fhir.DomainResource {
    /**
     * Default constructor for Questionnaire - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Questionnaire';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['derivedFrom'] !== undefined) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.derivedFrom = [];
        }
        if (source['_derivedFrom']) {
            source._derivedFrom.forEach((x, i) => {
                if (this.derivedFrom.length >= i) {
                    if (x) {
                        this.derivedFrom[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.derivedFrom.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['subjectType'] !== undefined) {
            this.subjectType = source.subjectType.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.subjectType = [];
        }
        if (source['_subjectType']) {
            source._subjectType.forEach((x, i) => {
                if (this.subjectType.length >= i) {
                    if (x) {
                        this.subjectType[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.subjectType.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['approvalDate'] !== undefined) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate }, options);
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate, options);
            }
        }
        if (source['lastReviewDate'] !== undefined) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate }, options);
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate, options);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod, options);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.code = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOA('derivedFrom', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOAV('subjectType', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('approvalDate', exp));
        iss.push(...this.vOS('lastReviewDate', exp));
        iss.push(...this.vOS('effectivePeriod', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Questionnaire._fts_dataType = 'Questionnaire';
//# sourceMappingURL=data:application/json;base64,