// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubscriptionStatus
import * as fhir from '../fhir.js';
// @ts-ignore
import { SubscriptionStatusVsValidation } from '../fhirValueSets/SubscriptionStatusVsValidation.js';
// @ts-ignore
import { SubscriptionNotificationTypeVsValidation } from '../fhirValueSets/SubscriptionNotificationTypeVsValidation.js';
/**
 * Detailed information about events relevant to this subscription notification.
 */
export class SubscriptionStatusNotificationEvent extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionStatusNotificationEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['eventNumber']) {
            this.eventNumber = new fhir.FhirString({ value: source.eventNumber });
        }
        else {
            this.eventNumber = null;
        }
        if (source['_eventNumber']) {
            if (this.eventNumber) {
                this.eventNumber.addExtendedProperties(source._eventNumber);
            }
            else {
                this.eventNumber = new fhir.FhirString(source._eventNumber);
            }
        }
        if (source['timestamp']) {
            this.timestamp = new fhir.FhirInstant({ value: source.timestamp });
        }
        if (source['_timestamp']) {
            if (this.timestamp) {
                this.timestamp.addExtendedProperties(source._timestamp);
            }
            else {
                this.timestamp = new fhir.FhirInstant(source._timestamp);
            }
        }
        if (source['focus']) {
            this.focus = new fhir.Reference(source.focus);
        }
        if (source['additionalContext']) {
            this.additionalContext = source.additionalContext.map((x) => new fhir.Reference(x));
        }
        else {
            this.additionalContext = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionStatus.notificationEvent';
        }
        this.vRS('eventNumber', exp);
        this.vOS('timestamp', exp);
        this.vOS('focus', exp);
        this.vOA('additionalContext', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionStatusNotificationEvent._fts_dataType = 'SubscriptionStatusNotificationEvent';
/**
 * The SubscriptionStatus resource describes the state of a Subscription during notifications.
 */
export class SubscriptionStatus extends fhir.DomainResource {
    /**
     * Default constructor for SubscriptionStatus - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubscriptionStatus';
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['eventsSinceSubscriptionStart']) {
            this.eventsSinceSubscriptionStart = new fhir.FhirString({ value: source.eventsSinceSubscriptionStart });
        }
        if (source['_eventsSinceSubscriptionStart']) {
            if (this.eventsSinceSubscriptionStart) {
                this.eventsSinceSubscriptionStart.addExtendedProperties(source._eventsSinceSubscriptionStart);
            }
            else {
                this.eventsSinceSubscriptionStart = new fhir.FhirString(source._eventsSinceSubscriptionStart);
            }
        }
        if (source['notificationEvent']) {
            this.notificationEvent = source.notificationEvent.map((x) => new fhir.SubscriptionStatusNotificationEvent(x));
        }
        else {
            this.notificationEvent = [];
        }
        if (source['subscription']) {
            this.subscription = new fhir.Reference(source.subscription);
        }
        else {
            this.subscription = null;
        }
        if (source['topic']) {
            this.topic = new fhir.FhirCanonical({ value: source.topic });
        }
        if (source['_topic']) {
            if (this.topic) {
                this.topic.addExtendedProperties(source._topic);
            }
            else {
                this.topic = new fhir.FhirCanonical(source._topic);
            }
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.error = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionStatus';
        }
        this.vRS('resourceType', exp);
        this.vOSV('status', exp, 'SubscriptionStatus', SubscriptionStatusVsValidation, 'r');
        this.vRSV('type', exp, 'SubscriptionNotificationType', SubscriptionNotificationTypeVsValidation, 'r');
        this.vOS('eventsSinceSubscriptionStart', exp);
        this.vOA('notificationEvent', exp);
        this.vRS('subscription', exp);
        this.vOS('topic', exp);
        this.vOA('error', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionStatus._fts_dataType = 'SubscriptionStatus';
//# sourceMappingURL=data:application/json;base64,