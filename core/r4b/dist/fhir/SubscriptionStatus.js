// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubscriptionStatus
import * as fhir from '../fhir.js';
// @ts-ignore
import { SubscriptionStatusVsValidation } from '../fhirValueSets/SubscriptionStatusVsValidation.js';
// @ts-ignore
import { SubscriptionNotificationTypeVsValidation } from '../fhirValueSets/SubscriptionNotificationTypeVsValidation.js';
/**
 * Detailed information about events relevant to this subscription notification.
 */
export class SubscriptionStatusNotificationEvent extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionStatusNotificationEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['eventNumber'] !== undefined) {
            this.eventNumber = new fhir.FhirString({ value: source.eventNumber }, options);
        }
        else {
            this.eventNumber = null;
        }
        if (source['_eventNumber']) {
            if (this.eventNumber) {
                this.eventNumber.addExtendedProperties(source._eventNumber);
            }
            else {
                this.eventNumber = new fhir.FhirString(source._eventNumber, options);
            }
        }
        if (source['timestamp'] !== undefined) {
            this.timestamp = new fhir.FhirInstant({ value: source.timestamp }, options);
        }
        if (source['_timestamp']) {
            if (this.timestamp) {
                this.timestamp.addExtendedProperties(source._timestamp);
            }
            else {
                this.timestamp = new fhir.FhirInstant(source._timestamp, options);
            }
        }
        if (source['focus']) {
            this.focus = new fhir.Reference(source.focus, options);
        }
        if (source['additionalContext']) {
            this.additionalContext = source.additionalContext.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.additionalContext = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionStatus.notificationEvent';
        }
        iss.push(...this.vRS('eventNumber', exp));
        iss.push(...this.vOS('timestamp', exp));
        iss.push(...this.vOS('focus', exp));
        iss.push(...this.vOA('additionalContext', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionStatusNotificationEvent._fts_dataType = 'SubscriptionStatusNotificationEvent';
/**
 * The SubscriptionStatus resource describes the state of a Subscription during notifications.
 */
export class SubscriptionStatus extends fhir.DomainResource {
    /**
     * Default constructor for SubscriptionStatus - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubscriptionStatus';
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['eventsSinceSubscriptionStart'] !== undefined) {
            this.eventsSinceSubscriptionStart = new fhir.FhirString({ value: source.eventsSinceSubscriptionStart }, options);
        }
        if (source['_eventsSinceSubscriptionStart']) {
            if (this.eventsSinceSubscriptionStart) {
                this.eventsSinceSubscriptionStart.addExtendedProperties(source._eventsSinceSubscriptionStart);
            }
            else {
                this.eventsSinceSubscriptionStart = new fhir.FhirString(source._eventsSinceSubscriptionStart, options);
            }
        }
        if (source['notificationEvent']) {
            this.notificationEvent = source.notificationEvent.map((x) => new fhir.SubscriptionStatusNotificationEvent(x, options));
        }
        else {
            this.notificationEvent = [];
        }
        if (source['subscription']) {
            this.subscription = new fhir.Reference(source.subscription, options);
        }
        else {
            this.subscription = null;
        }
        if (source['topic'] !== undefined) {
            this.topic = new fhir.FhirCanonical({ value: source.topic }, options);
        }
        if (source['_topic']) {
            if (this.topic) {
                this.topic.addExtendedProperties(source._topic);
            }
            else {
                this.topic = new fhir.FhirCanonical(source._topic, options);
            }
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.error = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionStatus';
        }
        iss.push(...this.vOSV('status', exp, 'SubscriptionStatus', SubscriptionStatusVsValidation, 'r'));
        iss.push(...this.vRSV('type', exp, 'SubscriptionNotificationType', SubscriptionNotificationTypeVsValidation, 'r'));
        iss.push(...this.vOS('eventsSinceSubscriptionStart', exp));
        iss.push(...this.vOA('notificationEvent', exp));
        iss.push(...this.vRS('subscription', exp));
        iss.push(...this.vOS('topic', exp));
        iss.push(...this.vOA('error', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionStatus._fts_dataType = 'SubscriptionStatus';
//# sourceMappingURL=data:application/json;base64,