// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReportParticipantTypeVsValidation } from '../fhirValueSets/ReportParticipantTypeVsValidation.js';
// @ts-ignore
import { ReportActionResultVsValidation } from '../fhirValueSets/ReportActionResultVsValidation.js';
// @ts-ignore
import { ReportStatusVsValidation } from '../fhirValueSets/ReportStatusVsValidation.js';
// @ts-ignore
import { ReportResultVsValidation } from '../fhirValueSets/ReportResultVsValidation.js';
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export class TestReportParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        else {
            this.uri = null;
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.participant';
        }
        this.vRSV('type', exp, 'ReportParticipantType', ReportParticipantTypeVsValidation, 'r');
        this.vRS('uri', exp);
        this.vOS('display', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportParticipant._fts_dataType = 'TestReportParticipant';
/**
 * The operation performed.
 */
export class TestReportSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['result']) {
            this.result = new fhir.FhirCode({ value: source.result });
        }
        else {
            this.result = null;
        }
        if (source['_result']) {
            if (this.result) {
                this.result.addExtendedProperties(source._result);
            }
            else {
                this.result = new fhir.FhirCode(source._result);
            }
        }
        if (source['message']) {
            this.message = new fhir.FhirMarkdown({ value: source.message });
        }
        if (source['_message']) {
            if (this.message) {
                this.message.addExtendedProperties(source._message);
            }
            else {
                this.message = new fhir.FhirMarkdown(source._message);
            }
        }
        if (source['detail']) {
            this.detail = new fhir.FhirUri({ value: source.detail });
        }
        if (source['_detail']) {
            if (this.detail) {
                this.detail.addExtendedProperties(source._detail);
            }
            else {
                this.detail = new fhir.FhirUri(source._detail);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.setup.action.operation';
        }
        this.vRSV('result', exp, 'ReportActionResult', ReportActionResultVsValidation, 'r');
        this.vOS('message', exp);
        this.vOS('detail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetupActionOperation._fts_dataType = 'TestReportSetupActionOperation';
/**
 * The results of the assertion performed on the previous operations.
 */
export class TestReportSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['result']) {
            this.result = new fhir.FhirCode({ value: source.result });
        }
        else {
            this.result = null;
        }
        if (source['_result']) {
            if (this.result) {
                this.result.addExtendedProperties(source._result);
            }
            else {
                this.result = new fhir.FhirCode(source._result);
            }
        }
        if (source['message']) {
            this.message = new fhir.FhirMarkdown({ value: source.message });
        }
        if (source['_message']) {
            if (this.message) {
                this.message.addExtendedProperties(source._message);
            }
            else {
                this.message = new fhir.FhirMarkdown(source._message);
            }
        }
        if (source['detail']) {
            this.detail = new fhir.FhirString({ value: source.detail });
        }
        if (source['_detail']) {
            if (this.detail) {
                this.detail.addExtendedProperties(source._detail);
            }
            else {
                this.detail = new fhir.FhirString(source._detail);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.setup.action.assert';
        }
        this.vRSV('result', exp, 'ReportActionResult', ReportActionResultVsValidation, 'r');
        this.vOS('message', exp);
        this.vOS('detail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetupActionAssert._fts_dataType = 'TestReportSetupActionAssert';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.setup.action';
        }
        this.vOS('operation', exp);
        this.vOS('assert', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetupAction._fts_dataType = 'TestReportSetupAction';
/**
 * The results of the series of required setup operations before the tests were executed.
 */
export class TestReportSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportSetupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.setup';
        }
        this.vRA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetup._fts_dataType = 'TestReportSetup';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.test.action';
        }
        this.vOS('operation', exp);
        this.vOS('assert', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTestAction._fts_dataType = 'TestReportTestAction';
/**
 * A test executed from the test script.
 */
export class TestReportTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportTestAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.test';
        }
        this.vOS('name', exp);
        this.vOS('description', exp);
        this.vRA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTest._fts_dataType = 'TestReportTest';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        else {
            this.operation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.teardown.action';
        }
        this.vRS('operation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTeardownAction._fts_dataType = 'TestReportTeardownAction';
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export class TestReportTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportTeardownAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport.teardown';
        }
        this.vRA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTeardown._fts_dataType = 'TestReportTeardown';
/**
 * A summary of information based on the results of executing a TestScript.
 */
export class TestReport extends fhir.DomainResource {
    /**
     * Default constructor for TestReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TestReport';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['testScript']) {
            this.testScript = new fhir.Reference(source.testScript);
        }
        else {
            this.testScript = null;
        }
        if (source['result']) {
            this.result = new fhir.FhirCode({ value: source.result });
        }
        else {
            this.result = null;
        }
        if (source['_result']) {
            if (this.result) {
                this.result.addExtendedProperties(source._result);
            }
            else {
                this.result = new fhir.FhirCode(source._result);
            }
        }
        if (source['score']) {
            this.score = new fhir.FhirDecimal({ value: source.score });
        }
        if (source['_score']) {
            if (this.score) {
                this.score.addExtendedProperties(source._score);
            }
            else {
                this.score = new fhir.FhirDecimal(source._score);
            }
        }
        if (source['tester']) {
            this.tester = new fhir.FhirString({ value: source.tester });
        }
        if (source['_tester']) {
            if (this.tester) {
                this.tester.addExtendedProperties(source._tester);
            }
            else {
                this.tester = new fhir.FhirString(source._tester);
            }
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirDateTime(source._issued);
            }
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.TestReportParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['setup']) {
            this.setup = new fhir.TestReportSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestReportTest(x));
        }
        else {
            this.test = [];
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestReportTeardown(source.teardown);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestReport';
        }
        this.vRS('resourceType', exp);
        this.vOS('identifier', exp);
        this.vOS('name', exp);
        this.vRSV('status', exp, 'ReportStatus', ReportStatusVsValidation, 'r');
        this.vRS('testScript', exp);
        this.vRSV('result', exp, 'ReportResult', ReportResultVsValidation, 'r');
        this.vOS('score', exp);
        this.vOS('tester', exp);
        this.vOS('issued', exp);
        this.vOA('participant', exp);
        this.vOS('setup', exp);
        this.vOA('test', exp);
        this.vOS('teardown', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReport._fts_dataType = 'TestReport';
//# sourceMappingURL=data:application/json;base64,