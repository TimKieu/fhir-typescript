// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Address
import * as fhir from '../fhir.js';
// @ts-ignore
import { AddressUseVsValidation } from '../fhirValueSets/AddressUseVsValidation.js';
// @ts-ignore
import { AddressTypeVsValidation } from '../fhirValueSets/AddressTypeVsValidation.js';
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
export class Address extends fhir.FhirElement {
    /**
     * Default constructor for Address - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['line']) {
            this.line = source.line.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.line = [];
        }
        if (source['_line']) {
            source._line.forEach((x, i) => {
                if (this.line.length >= i) {
                    if (x) {
                        this.line[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.line.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['city']) {
            this.city = new fhir.FhirString({ value: source.city });
        }
        if (source['_city']) {
            if (this.city) {
                this.city.addExtendedProperties(source._city);
            }
            else {
                this.city = new fhir.FhirString(source._city);
            }
        }
        if (source['district']) {
            this.district = new fhir.FhirString({ value: source.district });
        }
        if (source['_district']) {
            if (this.district) {
                this.district.addExtendedProperties(source._district);
            }
            else {
                this.district = new fhir.FhirString(source._district);
            }
        }
        if (source['state']) {
            this.state = new fhir.FhirString({ value: source.state });
        }
        if (source['_state']) {
            if (this.state) {
                this.state.addExtendedProperties(source._state);
            }
            else {
                this.state = new fhir.FhirString(source._state);
            }
        }
        if (source['postalCode']) {
            this.postalCode = new fhir.FhirString({ value: source.postalCode });
        }
        if (source['_postalCode']) {
            if (this.postalCode) {
                this.postalCode.addExtendedProperties(source._postalCode);
            }
            else {
                this.postalCode = new fhir.FhirString(source._postalCode);
            }
        }
        if (source['country']) {
            this.country = new fhir.FhirString({ value: source.country });
        }
        if (source['_country']) {
            if (this.country) {
                this.country.addExtendedProperties(source._country);
            }
            else {
                this.country = new fhir.FhirString(source._country);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Address';
        }
        this.vOSV('use', exp, 'AddressUse', AddressUseVsValidation, 'r');
        this.vOSV('type', exp, 'AddressType', AddressTypeVsValidation, 'r');
        this.vOS('text', exp);
        this.vOA('line', exp);
        this.vOS('city', exp);
        this.vOS('district', exp);
        this.vOS('state', exp);
        this.vOS('postalCode', exp);
        this.vOS('country', exp);
        this.vOS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Address._fts_dataType = 'Address';
//# sourceMappingURL=data:application/json;base64,