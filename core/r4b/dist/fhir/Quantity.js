// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuantityComparatorVsValidation } from '../fhirValueSets/QuantityComparatorVsValidation.js';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.value }, options);
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value, options);
            }
        }
        if (source['comparator'] !== undefined) {
            this.comparator = new fhir.FhirCode({ value: source.comparator }, options);
        }
        if (source['_comparator']) {
            if (this.comparator) {
                this.comparator.addExtendedProperties(source._comparator);
            }
            else {
                this.comparator = new fhir.FhirCode(source._comparator, options);
            }
        }
        if (source['unit'] !== undefined) {
            this.unit = new fhir.FhirString({ value: source.unit }, options);
        }
        if (source['_unit']) {
            if (this.unit) {
                this.unit.addExtendedProperties(source._unit);
            }
            else {
                this.unit = new fhir.FhirString(source._unit, options);
            }
        }
        if (source['system'] !== undefined) {
            this.system = new fhir.FhirUri({ value: source.system }, options);
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system, options);
            }
        }
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Quantity';
        }
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOSV('comparator', exp, 'QuantityComparator', QuantityComparatorVsValidation, 'r'));
        iss.push(...this.vOS('unit', exp));
        iss.push(...this.vOS('system', exp));
        iss.push(...this.vOS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Quantity._fts_dataType = 'Quantity';
//# sourceMappingURL=data:application/json;base64,