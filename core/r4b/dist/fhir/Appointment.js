// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Appointment
import * as fhir from '../fhir.js';
// @ts-ignore
import { ParticipantrequiredVsValidation } from '../fhirValueSets/ParticipantrequiredVsValidation.js';
// @ts-ignore
import { ParticipationstatusVsValidation } from '../fhirValueSets/ParticipationstatusVsValidation.js';
// @ts-ignore
import { AppointmentstatusVsValidation } from '../fhirValueSets/AppointmentstatusVsValidation.js';
/**
 * List of participants involved in the appointment.
 */
export class AppointmentParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for AppointmentParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        if (source['required'] !== undefined) {
            this.required = new fhir.FhirCode({ value: source.required }, options);
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirCode(source._required, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Appointment.participant';
        }
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('actor', exp));
        iss.push(...this.vOSV('required', exp, 'Participantrequired', ParticipantrequiredVsValidation, 'r'));
        iss.push(...this.vRSV('status', exp, 'Participationstatus', ParticipationstatusVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AppointmentParticipant._fts_dataType = 'AppointmentParticipant';
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export class Appointment extends fhir.DomainResource {
    /**
     * Default constructor for Appointment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Appointment';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['cancelationReason']) {
            this.cancelationReason = new fhir.CodeableConcept(source.cancelationReason, options);
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.serviceCategory = [];
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.serviceType = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.specialty = [];
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirUnsignedInt({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirUnsignedInt(source._priority, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['start'] !== undefined) {
            this.start = new fhir.FhirInstant({ value: source.start }, options);
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInstant(source._start, options);
            }
        }
        if (source['end'] !== undefined) {
            this.end = new fhir.FhirInstant({ value: source.end }, options);
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end, options);
            }
        }
        if (source['minutesDuration'] !== undefined) {
            this.minutesDuration = new fhir.FhirPositiveInt({ value: source.minutesDuration }, options);
        }
        if (source['_minutesDuration']) {
            if (this.minutesDuration) {
                this.minutesDuration.addExtendedProperties(source._minutesDuration);
            }
            else {
                this.minutesDuration = new fhir.FhirPositiveInt(source._minutesDuration, options);
            }
        }
        if (source['slot']) {
            this.slot = source.slot.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.slot = [];
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
        if (source['patientInstruction'] !== undefined) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction }, options);
        }
        if (source['_patientInstruction']) {
            if (this.patientInstruction) {
                this.patientInstruction.addExtendedProperties(source._patientInstruction);
            }
            else {
                this.patientInstruction = new fhir.FhirString(source._patientInstruction, options);
            }
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.AppointmentParticipant(x, options));
        }
        else {
            this.participant = [];
        }
        if (source['requestedPeriod']) {
            this.requestedPeriod = source.requestedPeriod.map((x) => new fhir.Period(x, options));
        }
        else {
            this.requestedPeriod = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Appointment';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'Appointmentstatus', AppointmentstatusVsValidation, 'r'));
        iss.push(...this.vOS('cancelationReason', exp));
        iss.push(...this.vOA('serviceCategory', exp));
        iss.push(...this.vOA('serviceType', exp));
        iss.push(...this.vOA('specialty', exp));
        iss.push(...this.vOS('appointmentType', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('minutesDuration', exp));
        iss.push(...this.vOA('slot', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOS('patientInstruction', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vRA('participant', exp));
        iss.push(...this.vOA('requestedPeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Appointment._fts_dataType = 'Appointment';
//# sourceMappingURL=data:application/json;base64,