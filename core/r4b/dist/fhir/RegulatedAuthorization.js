// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: RegulatedAuthorization
import * as fhir from '../fhir.js';
/**
 * The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).
 */
export class RegulatedAuthorizationCase extends fhir.BackboneElement {
    /**
     * Default constructor for RegulatedAuthorizationCase - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = source.date;
        }
        else if (source['datePeriod']) {
            this.date = new fhir.Period(source.datePeriod);
        }
        else if (source['dateDateTime']) {
            this.date = new fhir.FhirDateTime({ value: source.dateDateTime });
        }
        if (source['application']) {
            this.application = source.application.map((x) => new fhir.RegulatedAuthorizationCase(x));
        }
        else {
            this.application = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RegulatedAuthorization.case';
        }
        this.vOS('identifier', exp);
        this.vOS('type', exp);
        this.vOS('status', exp);
        this.vOS('date', exp);
        this.vOA('application', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RegulatedAuthorizationCase._fts_dataType = 'RegulatedAuthorizationCase';
/**
 * Internal flag to properly serialize choice-type element RegulatedAuthorization.case.date[x]
 */
RegulatedAuthorizationCase._fts_dateIsChoice = true;
/**
 * Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.
 */
export class RegulatedAuthorization extends fhir.DomainResource {
    /**
     * Default constructor for RegulatedAuthorization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RegulatedAuthorization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['region']) {
            this.region = source.region.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.region = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate);
            }
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['indication']) {
            this.indication = new fhir.CodeableReference(source.indication);
        }
        if (source['intendedUse']) {
            this.intendedUse = new fhir.CodeableConcept(source.intendedUse);
        }
        if (source['basis']) {
            this.basis = source.basis.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.basis = [];
        }
        if (source['holder']) {
            this.holder = new fhir.Reference(source.holder);
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator);
        }
        if (source['case']) {
            this.case = new fhir.RegulatedAuthorizationCase(source.case);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RegulatedAuthorization';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('subject', exp);
        this.vOS('type', exp);
        this.vOS('description', exp);
        this.vOA('region', exp);
        this.vOS('status', exp);
        this.vOS('statusDate', exp);
        this.vOS('validityPeriod', exp);
        this.vOS('indication', exp);
        this.vOS('intendedUse', exp);
        this.vOA('basis', exp);
        this.vOS('holder', exp);
        this.vOS('regulator', exp);
        this.vOS('case', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RegulatedAuthorization._fts_dataType = 'RegulatedAuthorization';
//# sourceMappingURL=data:application/json;base64,