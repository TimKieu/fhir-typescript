// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { CapabilityStatementKindVsValidation } from '../fhirValueSets/CapabilityStatementKindVsValidation.js';
// @ts-ignore
import { CodeSearchSupportVsValidation } from '../fhirValueSets/CodeSearchSupportVsValidation.js';
/**
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export class TerminologyCapabilitiesSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.software';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('version', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesSoftware._fts_dataType = 'TerminologyCapabilitiesSoftware';
/**
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class TerminologyCapabilitiesImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUrl({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUrl(source._url, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.implementation';
        }
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesImplementation._fts_dataType = 'TerminologyCapabilitiesImplementation';
/**
 * Filter Properties supported.
 */
export class TerminologyCapabilitiesCodeSystemVersionFilter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersionFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['op'] !== undefined) {
            this.op = source.op.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.op = [];
        }
        if (source['_op']) {
            source._op.forEach((x, i) => {
                if (this.op.length >= i) {
                    if (x) {
                        this.op[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.op.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.codeSystem.version.filter';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRA('op', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystemVersionFilter._fts_dataType = 'TerminologyCapabilitiesCodeSystemVersionFilter';
/**
 * Language translations might not be available for all codes.
 */
export class TerminologyCapabilitiesCodeSystemVersion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirString({ value: source.code }, options);
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirString(source._code, options);
            }
        }
        if (source['isDefault'] !== undefined) {
            this.isDefault = new fhir.FhirBoolean({ value: source.isDefault }, options);
        }
        if (source['_isDefault']) {
            if (this.isDefault) {
                this.isDefault.addExtendedProperties(source._isDefault);
            }
            else {
                this.isDefault = new fhir.FhirBoolean(source._isDefault, options);
            }
        }
        if (source['compositional'] !== undefined) {
            this.compositional = new fhir.FhirBoolean({ value: source.compositional }, options);
        }
        if (source['_compositional']) {
            if (this.compositional) {
                this.compositional.addExtendedProperties(source._compositional);
            }
            else {
                this.compositional = new fhir.FhirBoolean(source._compositional, options);
            }
        }
        if (source['language'] !== undefined) {
            this.language = source.language.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.language = [];
        }
        if (source['_language']) {
            source._language.forEach((x, i) => {
                if (this.language.length >= i) {
                    if (x) {
                        this.language[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.language.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersionFilter(x, options));
        }
        else {
            this.filter = [];
        }
        if (source['property'] !== undefined) {
            this.property = source.property.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.property = [];
        }
        if (source['_property']) {
            source._property.forEach((x, i) => {
                if (this.property.length >= i) {
                    if (x) {
                        this.property[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.property.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.codeSystem.version';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('isDefault', exp));
        iss.push(...this.vOS('compositional', exp));
        iss.push(...this.vOA('language', exp));
        iss.push(...this.vOA('filter', exp));
        iss.push(...this.vOA('property', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystemVersion._fts_dataType = 'TerminologyCapabilitiesCodeSystemVersion';
/**
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export class TerminologyCapabilitiesCodeSystem extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uri'] !== undefined) {
            this.uri = new fhir.FhirCanonical({ value: source.uri }, options);
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirCanonical(source._uri, options);
            }
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersion(x, options));
        }
        else {
            this.version = [];
        }
        if (source['subsumption'] !== undefined) {
            this.subsumption = new fhir.FhirBoolean({ value: source.subsumption }, options);
        }
        if (source['_subsumption']) {
            if (this.subsumption) {
                this.subsumption.addExtendedProperties(source._subsumption);
            }
            else {
                this.subsumption = new fhir.FhirBoolean(source._subsumption, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.codeSystem';
        }
        iss.push(...this.vOS('uri', exp));
        iss.push(...this.vOA('version', exp));
        iss.push(...this.vOS('subsumption', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystem._fts_dataType = 'TerminologyCapabilitiesCodeSystem';
/**
 * Supported expansion parameter.
 */
export class TerminologyCapabilitiesExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirCode({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirCode(source._name, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.expansion.parameter';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesExpansionParameter._fts_dataType = 'TerminologyCapabilitiesExpansionParameter';
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export class TerminologyCapabilitiesExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['hierarchical'] !== undefined) {
            this.hierarchical = new fhir.FhirBoolean({ value: source.hierarchical }, options);
        }
        if (source['_hierarchical']) {
            if (this.hierarchical) {
                this.hierarchical.addExtendedProperties(source._hierarchical);
            }
            else {
                this.hierarchical = new fhir.FhirBoolean(source._hierarchical, options);
            }
        }
        if (source['paging'] !== undefined) {
            this.paging = new fhir.FhirBoolean({ value: source.paging }, options);
        }
        if (source['_paging']) {
            if (this.paging) {
                this.paging.addExtendedProperties(source._paging);
            }
            else {
                this.paging = new fhir.FhirBoolean(source._paging, options);
            }
        }
        if (source['incomplete'] !== undefined) {
            this.incomplete = new fhir.FhirBoolean({ value: source.incomplete }, options);
        }
        if (source['_incomplete']) {
            if (this.incomplete) {
                this.incomplete.addExtendedProperties(source._incomplete);
            }
            else {
                this.incomplete = new fhir.FhirBoolean(source._incomplete, options);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.TerminologyCapabilitiesExpansionParameter(x, options));
        }
        else {
            this.parameter = [];
        }
        if (source['textFilter'] !== undefined) {
            this.textFilter = new fhir.FhirMarkdown({ value: source.textFilter }, options);
        }
        if (source['_textFilter']) {
            if (this.textFilter) {
                this.textFilter.addExtendedProperties(source._textFilter);
            }
            else {
                this.textFilter = new fhir.FhirMarkdown(source._textFilter, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.expansion';
        }
        iss.push(...this.vOS('hierarchical', exp));
        iss.push(...this.vOS('paging', exp));
        iss.push(...this.vOS('incomplete', exp));
        iss.push(...this.vOA('parameter', exp));
        iss.push(...this.vOS('textFilter', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesExpansion._fts_dataType = 'TerminologyCapabilitiesExpansion';
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export class TerminologyCapabilitiesValidateCode extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesValidateCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['translations'] !== undefined) {
            this.translations = new fhir.FhirBoolean({ value: source.translations }, options);
        }
        else {
            this.translations = null;
        }
        if (source['_translations']) {
            if (this.translations) {
                this.translations.addExtendedProperties(source._translations);
            }
            else {
                this.translations = new fhir.FhirBoolean(source._translations, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.validateCode';
        }
        iss.push(...this.vRS('translations', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesValidateCode._fts_dataType = 'TerminologyCapabilitiesValidateCode';
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export class TerminologyCapabilitiesTranslation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesTranslation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['needsMap'] !== undefined) {
            this.needsMap = new fhir.FhirBoolean({ value: source.needsMap }, options);
        }
        else {
            this.needsMap = null;
        }
        if (source['_needsMap']) {
            if (this.needsMap) {
                this.needsMap.addExtendedProperties(source._needsMap);
            }
            else {
                this.needsMap = new fhir.FhirBoolean(source._needsMap, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.translation';
        }
        iss.push(...this.vRS('needsMap', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesTranslation._fts_dataType = 'TerminologyCapabilitiesTranslation';
/**
 * Whether the $closure operation is supported.
 */
export class TerminologyCapabilitiesClosure extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesClosure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['translation'] !== undefined) {
            this.translation = new fhir.FhirBoolean({ value: source.translation }, options);
        }
        if (source['_translation']) {
            if (this.translation) {
                this.translation.addExtendedProperties(source._translation);
            }
            else {
                this.translation = new fhir.FhirBoolean(source._translation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.closure';
        }
        iss.push(...this.vOS('translation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesClosure._fts_dataType = 'TerminologyCapabilitiesClosure';
/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class TerminologyCapabilities extends fhir.DomainResource {
    /**
     * Default constructor for TerminologyCapabilities - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TerminologyCapabilities';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['kind'] !== undefined) {
            this.kind = new fhir.FhirCode({ value: source.kind }, options);
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind, options);
            }
        }
        if (source['software']) {
            this.software = new fhir.TerminologyCapabilitiesSoftware(source.software, options);
        }
        if (source['implementation']) {
            this.implementation = new fhir.TerminologyCapabilitiesImplementation(source.implementation, options);
        }
        if (source['lockedDate'] !== undefined) {
            this.lockedDate = new fhir.FhirBoolean({ value: source.lockedDate }, options);
        }
        if (source['_lockedDate']) {
            if (this.lockedDate) {
                this.lockedDate.addExtendedProperties(source._lockedDate);
            }
            else {
                this.lockedDate = new fhir.FhirBoolean(source._lockedDate, options);
            }
        }
        if (source['codeSystem']) {
            this.codeSystem = source.codeSystem.map((x) => new fhir.TerminologyCapabilitiesCodeSystem(x, options));
        }
        else {
            this.codeSystem = [];
        }
        if (source['expansion']) {
            this.expansion = new fhir.TerminologyCapabilitiesExpansion(source.expansion, options);
        }
        if (source['codeSearch'] !== undefined) {
            this.codeSearch = new fhir.FhirCode({ value: source.codeSearch }, options);
        }
        if (source['_codeSearch']) {
            if (this.codeSearch) {
                this.codeSearch.addExtendedProperties(source._codeSearch);
            }
            else {
                this.codeSearch = new fhir.FhirCode(source._codeSearch, options);
            }
        }
        if (source['validateCode']) {
            this.validateCode = new fhir.TerminologyCapabilitiesValidateCode(source.validateCode, options);
        }
        if (source['translation']) {
            this.translation = new fhir.TerminologyCapabilitiesTranslation(source.translation, options);
        }
        if (source['closure']) {
            this.closure = new fhir.TerminologyCapabilitiesClosure(source.closure, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vRSV('kind', exp, 'CapabilityStatementKind', CapabilityStatementKindVsValidation, 'r'));
        iss.push(...this.vOS('software', exp));
        iss.push(...this.vOS('implementation', exp));
        iss.push(...this.vOS('lockedDate', exp));
        iss.push(...this.vOA('codeSystem', exp));
        iss.push(...this.vOS('expansion', exp));
        iss.push(...this.vOSV('codeSearch', exp, 'CodeSearchSupport', CodeSearchSupportVsValidation, 'r'));
        iss.push(...this.vOS('validateCode', exp));
        iss.push(...this.vOS('translation', exp));
        iss.push(...this.vOS('closure', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilities._fts_dataType = 'TerminologyCapabilities';
//# sourceMappingURL=data:application/json;base64,