// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: PlanDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ActionConditionKindVsValidation } from '../fhirValueSets/ActionConditionKindVsValidation.js';
// @ts-ignore
import { ActionRelationshipTypeVsValidation } from '../fhirValueSets/ActionRelationshipTypeVsValidation.js';
// @ts-ignore
import { ActionParticipantTypeVsValidation } from '../fhirValueSets/ActionParticipantTypeVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
// @ts-ignore
import { ActionGroupingBehaviorVsValidation } from '../fhirValueSets/ActionGroupingBehaviorVsValidation.js';
// @ts-ignore
import { ActionSelectionBehaviorVsValidation } from '../fhirValueSets/ActionSelectionBehaviorVsValidation.js';
// @ts-ignore
import { ActionRequiredBehaviorVsValidation } from '../fhirValueSets/ActionRequiredBehaviorVsValidation.js';
// @ts-ignore
import { ActionPrecheckBehaviorVsValidation } from '../fhirValueSets/ActionPrecheckBehaviorVsValidation.js';
// @ts-ignore
import { ActionCardinalityBehaviorVsValidation } from '../fhirValueSets/ActionCardinalityBehaviorVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Indicates what should be done and within what timeframe.
 */
export class PlanDefinitionGoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['measure']) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            this.detail = new fhir.Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            this.detail = new fhir.Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            this.detail = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        if (source['due']) {
            this.due = new fhir.Duration(source.due);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.goal.target';
        }
        this.vOS('measure', exp);
        this.vOS('detail', exp);
        this.vOS('due', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionGoalTarget._fts_dataType = 'PlanDefinitionGoalTarget';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.goal.target.detail[x]
 */
PlanDefinitionGoalTarget._fts_detailIsChoice = true;
/**
 * A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
 */
export class PlanDefinitionGoal extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        else {
            this.description = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['start']) {
            this.start = new fhir.CodeableConcept(source.start);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.addresses = [];
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.documentation = [];
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.PlanDefinitionGoalTarget(x));
        }
        else {
            this.target = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.goal';
        }
        this.vOS('category', exp);
        this.vRS('description', exp);
        this.vOS('priority', exp);
        this.vOS('start', exp);
        this.vOA('addresses', exp);
        this.vOA('documentation', exp);
        this.vOA('target', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionGoal._fts_dataType = 'PlanDefinitionGoal';
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
export class PlanDefinitionActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.action.condition';
        }
        this.vRSV('kind', exp, 'ActionConditionKind', ActionConditionKindVsValidation, 'r');
        this.vOS('expression', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionCondition._fts_dataType = 'PlanDefinitionActionCondition';
/**
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export class PlanDefinitionActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actionId']) {
            this.actionId = new fhir.FhirId({ value: source.actionId });
        }
        else {
            this.actionId = null;
        }
        if (source['_actionId']) {
            if (this.actionId) {
                this.actionId.addExtendedProperties(source._actionId);
            }
            else {
                this.actionId = new fhir.FhirId(source._actionId);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.FhirCode({ value: source.relationship });
        }
        else {
            this.relationship = null;
        }
        if (source['_relationship']) {
            if (this.relationship) {
                this.relationship.addExtendedProperties(source._relationship);
            }
            else {
                this.relationship = new fhir.FhirCode(source._relationship);
            }
        }
        if (source['offset']) {
            this.offset = source.offset;
        }
        else if (source['offsetDuration']) {
            this.offset = new fhir.Duration(source.offsetDuration);
        }
        else if (source['offsetRange']) {
            this.offset = new fhir.Range(source.offsetRange);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.action.relatedAction';
        }
        this.vRS('actionId', exp);
        this.vRSV('relationship', exp, 'ActionRelationshipType', ActionRelationshipTypeVsValidation, 'r');
        this.vOS('offset', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionRelatedAction._fts_dataType = 'PlanDefinitionActionRelatedAction';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.relatedAction.offset[x]
 */
PlanDefinitionActionRelatedAction._fts_offsetIsChoice = true;
/**
 * Indicates who should participate in performing the action described.
 */
export class PlanDefinitionActionParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.action.participant';
        }
        this.vRSV('type', exp, 'ActionParticipantType', ActionParticipantTypeVsValidation, 'r');
        this.vOS('role', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionParticipant._fts_dataType = 'PlanDefinitionActionParticipant';
/**
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export class PlanDefinitionActionDynamicValue extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.action.dynamicValue';
        }
        this.vOS('path', exp);
        this.vOS('expression', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionDynamicValue._fts_dataType = 'PlanDefinitionActionDynamicValue';
/**
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
export class PlanDefinitionAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['prefix']) {
            this.prefix = new fhir.FhirString({ value: source.prefix });
        }
        if (source['_prefix']) {
            if (this.prefix) {
                this.prefix.addExtendedProperties(source._prefix);
            }
            else {
                this.prefix = new fhir.FhirString(source._prefix);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['textEquivalent']) {
            this.textEquivalent = new fhir.FhirString({ value: source.textEquivalent });
        }
        if (source['_textEquivalent']) {
            if (this.textEquivalent) {
                this.textEquivalent.addExtendedProperties(source._textEquivalent);
            }
            else {
                this.textEquivalent = new fhir.FhirString(source._textEquivalent);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.documentation = [];
        }
        if (source['goalId']) {
            this.goalId = source.goalId.map((x) => new fhir.FhirId({ value: x }));
        }
        else {
            this.goalId = [];
        }
        if (source['_goalId']) {
            source._goalId.forEach((x, i) => {
                if (this.goalId.length >= i) {
                    if (x) {
                        this.goalId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.goalId.push(new fhir.FhirId(x));
                    }
                }
            });
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        else if (source['subjectCanonical']) {
            this.subject = new fhir.FhirCanonical({ value: source.subjectCanonical });
        }
        if (source['trigger']) {
            this.trigger = source.trigger.map((x) => new fhir.TriggerDefinition(x));
        }
        else {
            this.trigger = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.PlanDefinitionActionCondition(x));
        }
        else {
            this.condition = [];
        }
        if (source['input']) {
            this.input = source.input.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.input = [];
        }
        if (source['output']) {
            this.output = source.output.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.output = [];
        }
        if (source['relatedAction']) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.PlanDefinitionActionRelatedAction(x));
        }
        else {
            this.relatedAction = [];
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
        else if (source['timingAge']) {
            this.timing = new fhir.Age(source.timingAge);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        else if (source['timingDuration']) {
            this.timing = new fhir.Duration(source.timingDuration);
        }
        else if (source['timingRange']) {
            this.timing = new fhir.Range(source.timingRange);
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.PlanDefinitionActionParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            this.groupingBehavior = new fhir.FhirCode({ value: source.groupingBehavior });
        }
        if (source['_groupingBehavior']) {
            if (this.groupingBehavior) {
                this.groupingBehavior.addExtendedProperties(source._groupingBehavior);
            }
            else {
                this.groupingBehavior = new fhir.FhirCode(source._groupingBehavior);
            }
        }
        if (source['selectionBehavior']) {
            this.selectionBehavior = new fhir.FhirCode({ value: source.selectionBehavior });
        }
        if (source['_selectionBehavior']) {
            if (this.selectionBehavior) {
                this.selectionBehavior.addExtendedProperties(source._selectionBehavior);
            }
            else {
                this.selectionBehavior = new fhir.FhirCode(source._selectionBehavior);
            }
        }
        if (source['requiredBehavior']) {
            this.requiredBehavior = new fhir.FhirCode({ value: source.requiredBehavior });
        }
        if (source['_requiredBehavior']) {
            if (this.requiredBehavior) {
                this.requiredBehavior.addExtendedProperties(source._requiredBehavior);
            }
            else {
                this.requiredBehavior = new fhir.FhirCode(source._requiredBehavior);
            }
        }
        if (source['precheckBehavior']) {
            this.precheckBehavior = new fhir.FhirCode({ value: source.precheckBehavior });
        }
        if (source['_precheckBehavior']) {
            if (this.precheckBehavior) {
                this.precheckBehavior.addExtendedProperties(source._precheckBehavior);
            }
            else {
                this.precheckBehavior = new fhir.FhirCode(source._precheckBehavior);
            }
        }
        if (source['cardinalityBehavior']) {
            this.cardinalityBehavior = new fhir.FhirCode({ value: source.cardinalityBehavior });
        }
        if (source['_cardinalityBehavior']) {
            if (this.cardinalityBehavior) {
                this.cardinalityBehavior.addExtendedProperties(source._cardinalityBehavior);
            }
            else {
                this.cardinalityBehavior = new fhir.FhirCode(source._cardinalityBehavior);
            }
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        else if (source['definitionCanonical']) {
            this.definition = new fhir.FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionUri']) {
            this.definition = new fhir.FhirUri({ value: source.definitionUri });
        }
        if (source['transform']) {
            this.transform = new fhir.FhirCanonical({ value: source.transform });
        }
        if (source['_transform']) {
            if (this.transform) {
                this.transform.addExtendedProperties(source._transform);
            }
            else {
                this.transform = new fhir.FhirCanonical(source._transform);
            }
        }
        if (source['dynamicValue']) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhir.PlanDefinitionActionDynamicValue(x));
        }
        else {
            this.dynamicValue = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition.action';
        }
        this.vOS('prefix', exp);
        this.vOS('title', exp);
        this.vOS('description', exp);
        this.vOS('textEquivalent', exp);
        this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r');
        this.vOA('code', exp);
        this.vOA('reason', exp);
        this.vOA('documentation', exp);
        this.vOA('goalId', exp);
        this.vOS('subject', exp);
        this.vOA('trigger', exp);
        this.vOA('condition', exp);
        this.vOA('input', exp);
        this.vOA('output', exp);
        this.vOA('relatedAction', exp);
        this.vOS('timing', exp);
        this.vOA('participant', exp);
        this.vOS('type', exp);
        this.vOSV('groupingBehavior', exp, 'ActionGroupingBehavior', ActionGroupingBehaviorVsValidation, 'r');
        this.vOSV('selectionBehavior', exp, 'ActionSelectionBehavior', ActionSelectionBehaviorVsValidation, 'r');
        this.vOSV('requiredBehavior', exp, 'ActionRequiredBehavior', ActionRequiredBehaviorVsValidation, 'r');
        this.vOSV('precheckBehavior', exp, 'ActionPrecheckBehavior', ActionPrecheckBehaviorVsValidation, 'r');
        this.vOSV('cardinalityBehavior', exp, 'ActionCardinalityBehavior', ActionCardinalityBehaviorVsValidation, 'r');
        this.vOS('definition', exp);
        this.vOS('transform', exp);
        this.vOA('dynamicValue', exp);
        this.vOA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionAction._fts_dataType = 'PlanDefinitionAction';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.subject[x]
 */
PlanDefinitionAction._fts_subjectIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.timing[x]
 */
PlanDefinitionAction._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.definition[x]
 */
PlanDefinitionAction._fts_definitionIsChoice = true;
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.
 */
export class PlanDefinition extends fhir.DomainResource {
    /**
     * Default constructor for PlanDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PlanDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['_subtitle']) {
            if (this.subtitle) {
                this.subtitle.addExtendedProperties(source._subtitle);
            }
            else {
                this.subtitle = new fhir.FhirString(source._subtitle);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        else if (source['subjectCanonical']) {
            this.subject = new fhir.FhirCanonical({ value: source.subjectCanonical });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['_usage']) {
            if (this.usage) {
                this.usage.addExtendedProperties(source._usage);
            }
            else {
                this.usage = new fhir.FhirString(source._usage);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['library']) {
            this.library = source.library.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.library = [];
        }
        if (source['_library']) {
            source._library.forEach((x, i) => {
                if (this.library.length >= i) {
                    if (x) {
                        this.library[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.library.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.PlanDefinitionGoal(x));
        }
        else {
            this.goal = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PlanDefinition';
        }
        this.vRS('resourceType', exp);
        this.vOS('url', exp);
        this.vOA('identifier', exp);
        this.vOS('version', exp);
        this.vOS('name', exp);
        this.vOS('title', exp);
        this.vOS('subtitle', exp);
        this.vOS('type', exp);
        this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('subject', exp);
        this.vOS('date', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('description', exp);
        this.vOA('useContext', exp);
        this.vOA('jurisdiction', exp);
        this.vOS('purpose', exp);
        this.vOS('usage', exp);
        this.vOS('copyright', exp);
        this.vOS('approvalDate', exp);
        this.vOS('lastReviewDate', exp);
        this.vOS('effectivePeriod', exp);
        this.vOA('topic', exp);
        this.vOA('author', exp);
        this.vOA('editor', exp);
        this.vOA('reviewer', exp);
        this.vOA('endorser', exp);
        this.vOA('relatedArtifact', exp);
        this.vOA('library', exp);
        this.vOA('goal', exp);
        this.vOA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinition._fts_dataType = 'PlanDefinition';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.subject[x]
 */
PlanDefinition._fts_subjectIsChoice = true;
//# sourceMappingURL=data:application/json;base64,