// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationAdministration
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationAdminStatusVsValidation } from '../fhirValueSets/MedicationAdminStatusVsValidation.js';
/**
 * Indicates who or what performed the medication administration and how they were involved.
 */
export class MedicationAdministrationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationAdministration.performer';
        }
        this.vOS('function', exp);
        this.vRS('actor', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationAdministrationPerformer._fts_dataType = 'MedicationAdministrationPerformer';
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
export class MedicationAdministrationDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationAdministrationDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['dose']) {
            this.dose = new fhir.Quantity(source.dose);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationAdministration.dosage';
        }
        this.vOS('text', exp);
        this.vOS('site', exp);
        this.vOS('route', exp);
        this.vOS('method', exp);
        this.vOS('dose', exp);
        this.vOS('rate', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationAdministrationDosage._fts_dataType = 'MedicationAdministrationDosage';
/**
 * Internal flag to properly serialize choice-type element MedicationAdministration.dosage.rate[x]
 */
MedicationAdministrationDosage._fts_rateIsChoice = true;
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
export class MedicationAdministration extends fhir.DomainResource {
    /**
     * Default constructor for MedicationAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationAdministration';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['_instantiates']) {
            source._instantiates.forEach((x, i) => {
                if (this.instantiates.length >= i) {
                    if (x) {
                        this.instantiates[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiates.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.statusReason = [];
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        else {
            this.effective = null;
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationAdministrationPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['device']) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        else {
            this.device = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['dosage']) {
            this.dosage = new fhir.MedicationAdministrationDosage(source.dosage);
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationAdministration';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('instantiates', exp);
        this.vOA('partOf', exp);
        this.vRSV('status', exp, 'MedicationAdminStatus', MedicationAdminStatusVsValidation, 'r');
        this.vOA('statusReason', exp);
        this.vOS('category', exp);
        this.vRS('medication', exp);
        this.vRS('subject', exp);
        this.vOS('context', exp);
        this.vOA('supportingInformation', exp);
        this.vRS('effective', exp);
        this.vOA('performer', exp);
        this.vOA('reasonCode', exp);
        this.vOA('reasonReference', exp);
        this.vOS('request', exp);
        this.vOA('device', exp);
        this.vOA('note', exp);
        this.vOS('dosage', exp);
        this.vOA('eventHistory', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationAdministration._fts_dataType = 'MedicationAdministration';
/**
 * Internal flag to properly serialize choice-type element MedicationAdministration.medication[x]
 */
MedicationAdministration._fts_medicationIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationAdministration.effective[x]
 */
MedicationAdministration._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,