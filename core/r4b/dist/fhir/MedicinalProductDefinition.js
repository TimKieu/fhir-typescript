// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductDefinition
import * as fhir from '../fhir.js';
/**
 * A product specific contact, person (in a role), or an organization.
 */
export class MedicinalProductDefinitionContact extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['contact']) {
            this.contact = new fhir.Reference(source.contact);
        }
        else {
            this.contact = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.contact';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vRS('contact', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionContact._fts_dataType = 'MedicinalProductDefinitionContact';
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductDefinitionNameNamePart extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionNameNamePart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['part']) {
            this.part = new fhir.FhirString({ value: source.part });
        }
        else {
            this.part = null;
        }
        if (source['_part']) {
            if (this.part) {
                this.part.addExtendedProperties(source._part);
            }
            else {
                this.part = new fhir.FhirString(source._part);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.name.namePart';
        }
        iss.push(...this.vRS('part', exp));
        iss.push(...this.vRS('type', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionNameNamePart._fts_dataType = 'MedicinalProductDefinitionNameNamePart';
/**
 * Country and jurisdiction where the name applies, and associated language.
 */
export class MedicinalProductDefinitionNameCountryLanguage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionNameCountryLanguage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        else {
            this.country = null;
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.name.countryLanguage';
        }
        iss.push(...this.vRS('country', exp));
        iss.push(...this.vOS('jurisdiction', exp));
        iss.push(...this.vRS('language', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionNameCountryLanguage._fts_dataType = 'MedicinalProductDefinitionNameCountryLanguage';
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductDefinitionName extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        else {
            this.productName = null;
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['namePart']) {
            this.namePart = source.namePart.map((x) => new fhir.MedicinalProductDefinitionNameNamePart(x));
        }
        else {
            this.namePart = [];
        }
        if (source['countryLanguage']) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductDefinitionNameCountryLanguage(x));
        }
        else {
            this.countryLanguage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.name';
        }
        iss.push(...this.vRS('productName', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('namePart', exp));
        iss.push(...this.vOA('countryLanguage', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionName._fts_dataType = 'MedicinalProductDefinitionName';
/**
 * Reference to another product, e.g. for linking authorised to investigational product, or a virtual product.
 */
export class MedicinalProductDefinitionCrossReference extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionCrossReference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['product']) {
            this.product = new fhir.CodeableReference(source.product);
        }
        else {
            this.product = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.crossReference';
        }
        iss.push(...this.vRS('product', exp));
        iss.push(...this.vOS('type', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionCrossReference._fts_dataType = 'MedicinalProductDefinitionCrossReference';
/**
 * A manufacturing or administrative process or step associated with (or performed on) the medicinal product.
 */
export class MedicinalProductDefinitionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableReference(source.type);
        }
        if (source['effectiveDate']) {
            this.effectiveDate = new fhir.Period(source.effectiveDate);
        }
        if (source['organization']) {
            this.organization = source.organization.map((x) => new fhir.Reference(x));
        }
        else {
            this.organization = [];
        }
        if (source['confidentialityIndicator']) {
            this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.operation';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('effectiveDate', exp));
        iss.push(...this.vOA('organization', exp));
        iss.push(...this.vOS('confidentialityIndicator', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionOperation._fts_dataType = 'MedicinalProductDefinitionOperation';
/**
 * Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import".
 */
export class MedicinalProductDefinitionCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductDefinitionCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition.characteristic';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinitionCharacteristic._fts_dataType = 'MedicinalProductDefinitionCharacteristic';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductDefinition.characteristic.value[x]
 */
MedicinalProductDefinitionCharacteristic._fts_valueIsChoice = true;
/**
 * A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).
 */
export class MedicinalProductDefinition extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['combinedPharmaceuticalDoseForm']) {
            this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source['route']) {
            this.route = source.route.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.route = [];
        }
        if (source['indication']) {
            this.indication = new fhir.FhirMarkdown({ value: source.indication });
        }
        if (source['_indication']) {
            if (this.indication) {
                this.indication.addExtendedProperties(source._indication);
            }
            else {
                this.indication = new fhir.FhirMarkdown(source._indication);
            }
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['additionalMonitoringIndicator']) {
            this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source['specialMeasures']) {
            this.specialMeasures = source.specialMeasures.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialMeasures = [];
        }
        if (source['pediatricUseIndicator']) {
            this.pediatricUseIndicator = new fhir.CodeableConcept(source.pediatricUseIndicator);
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classification = [];
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        else {
            this.marketingStatus = [];
        }
        if (source['packagedMedicinalProduct']) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.packagedMedicinalProduct = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['impurity']) {
            this.impurity = source.impurity.map((x) => new fhir.CodeableReference(x));
        }
        else {
            this.impurity = [];
        }
        if (source['attachedDocument']) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x));
        }
        else {
            this.attachedDocument = [];
        }
        if (source['masterFile']) {
            this.masterFile = source.masterFile.map((x) => new fhir.Reference(x));
        }
        else {
            this.masterFile = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.MedicinalProductDefinitionContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['clinicalTrial']) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x));
        }
        else {
            this.clinicalTrial = [];
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.MedicinalProductDefinitionName(x));
        }
        else {
            this.name = [];
        }
        if (source['crossReference']) {
            this.crossReference = source.crossReference.map((x) => new fhir.MedicinalProductDefinitionCrossReference(x));
        }
        else {
            this.crossReference = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.MedicinalProductDefinitionOperation(x));
        }
        else {
            this.operation = [];
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.MedicinalProductDefinitionCharacteristic(x));
        }
        else {
            this.characteristic = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductDefinition';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('domain', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('statusDate', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('combinedPharmaceuticalDoseForm', exp));
        iss.push(...this.vOA('route', exp));
        iss.push(...this.vOS('indication', exp));
        iss.push(...this.vOS('legalStatusOfSupply', exp));
        iss.push(...this.vOS('additionalMonitoringIndicator', exp));
        iss.push(...this.vOA('specialMeasures', exp));
        iss.push(...this.vOS('pediatricUseIndicator', exp));
        iss.push(...this.vOA('classification', exp));
        iss.push(...this.vOA('marketingStatus', exp));
        iss.push(...this.vOA('packagedMedicinalProduct', exp));
        iss.push(...this.vOA('ingredient', exp));
        iss.push(...this.vOA('impurity', exp));
        iss.push(...this.vOA('attachedDocument', exp));
        iss.push(...this.vOA('masterFile', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOA('clinicalTrial', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vRA('name', exp));
        iss.push(...this.vOA('crossReference', exp));
        iss.push(...this.vOA('operation', exp));
        iss.push(...this.vOA('characteristic', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductDefinition._fts_dataType = 'MedicinalProductDefinition';
//# sourceMappingURL=data:application/json;base64,