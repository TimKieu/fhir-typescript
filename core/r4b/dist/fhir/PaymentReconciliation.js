// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentReconciliation
import * as fhir from '../fhir.js';
// @ts-ignore
import { NoteTypeVsValidation } from '../fhirValueSets/NoteTypeVsValidation.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export class PaymentReconciliationDetail extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['predecessor']) {
            this.predecessor = new fhir.Identifier(source.predecessor, options);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request, options);
        }
        if (source['submitter']) {
            this.submitter = new fhir.Reference(source.submitter, options);
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDate({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date, options);
            }
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible, options);
        }
        if (source['payee']) {
            this.payee = new fhir.Reference(source.payee, options);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PaymentReconciliation.detail';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('predecessor', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOS('submitter', exp));
        iss.push(...this.vOS('response', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('responsible', exp));
        iss.push(...this.vOS('payee', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliationDetail._fts_dataType = 'PaymentReconciliationDetail';
/**
 * A note that describes or explains the processing in a human readable form.
 */
export class PaymentReconciliationProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PaymentReconciliation.processNote';
        }
        iss.push(...this.vOSV('type', exp, 'NoteType', NoteTypeVsValidation, 'r'));
        iss.push(...this.vOS('text', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliationProcessNote._fts_dataType = 'PaymentReconciliationProcessNote';
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export class PaymentReconciliation extends fhir.DomainResource {
    /**
     * Default constructor for PaymentReconciliation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PaymentReconciliation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['paymentIssuer']) {
            this.paymentIssuer = new fhir.Reference(source.paymentIssuer, options);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request, options);
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor, options);
        }
        if (source['outcome'] !== undefined) {
            this.outcome = new fhir.FhirCode({ value: source.outcome }, options);
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome, options);
            }
        }
        if (source['disposition'] !== undefined) {
            this.disposition = new fhir.FhirString({ value: source.disposition }, options);
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition, options);
            }
        }
        if (source['paymentDate'] !== undefined) {
            this.paymentDate = new fhir.FhirDate({ value: source.paymentDate }, options);
        }
        else {
            this.paymentDate = null;
        }
        if (source['_paymentDate']) {
            if (this.paymentDate) {
                this.paymentDate.addExtendedProperties(source._paymentDate);
            }
            else {
                this.paymentDate = new fhir.FhirDate(source._paymentDate, options);
            }
        }
        if (source['paymentAmount']) {
            this.paymentAmount = new fhir.Money(source.paymentAmount, options);
        }
        else {
            this.paymentAmount = null;
        }
        if (source['paymentIdentifier']) {
            this.paymentIdentifier = new fhir.Identifier(source.paymentIdentifier, options);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.PaymentReconciliationDetail(x, options));
        }
        else {
            this.detail = [];
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode, options);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.PaymentReconciliationProcessNote(x, options));
        }
        else {
            this.processNote = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PaymentReconciliation';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRS('created', exp));
        iss.push(...this.vOS('paymentIssuer', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOS('requestor', exp));
        iss.push(...this.vOSV('outcome', exp, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r'));
        iss.push(...this.vOS('disposition', exp));
        iss.push(...this.vRS('paymentDate', exp));
        iss.push(...this.vRS('paymentAmount', exp));
        iss.push(...this.vOS('paymentIdentifier', exp));
        iss.push(...this.vOA('detail', exp));
        iss.push(...this.vOS('formCode', exp));
        iss.push(...this.vOA('processNote', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliation._fts_dataType = 'PaymentReconciliation';
//# sourceMappingURL=data:application/json;base64,