// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: PackagedProductDefinition
import * as fhir from '../fhir.js';
/**
 * The legal status of supply of the packaged item as classified by the regulator.
 */
export class PackagedProductDefinitionLegalStatusOfSupply extends fhir.BackboneElement {
    /**
     * Default constructor for PackagedProductDefinitionLegalStatusOfSupply - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PackagedProductDefinition.legalStatusOfSupply';
        }
        this.vOS('code', exp);
        this.vOS('jurisdiction', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PackagedProductDefinitionLegalStatusOfSupply._fts_dataType = 'PackagedProductDefinitionLegalStatusOfSupply';
/**
 * Shelf Life and storage information.
 */
export class PackagedProductDefinitionPackageShelfLifeStorage extends fhir.BackboneElement {
    /**
     * Default constructor for PackagedProductDefinitionPackageShelfLifeStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['period']) {
            this.period = source.period;
        }
        else if (source['periodDuration']) {
            this.period = new fhir.Duration(source.periodDuration);
        }
        else if (source['periodString']) {
            this.period = new fhir.FhirString({ value: source.periodString });
        }
        if (source['specialPrecautionsForStorage']) {
            this.specialPrecautionsForStorage = source.specialPrecautionsForStorage.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialPrecautionsForStorage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PackagedProductDefinition.package.shelfLifeStorage';
        }
        this.vOS('type', exp);
        this.vOS('period', exp);
        this.vOA('specialPrecautionsForStorage', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PackagedProductDefinitionPackageShelfLifeStorage._fts_dataType = 'PackagedProductDefinitionPackageShelfLifeStorage';
/**
 * Internal flag to properly serialize choice-type element PackagedProductDefinition.package.shelfLifeStorage.period[x]
 */
PackagedProductDefinitionPackageShelfLifeStorage._fts_periodIsChoice = true;
/**
 * General characteristics of this item.
 */
export class PackagedProductDefinitionPackageProperty extends fhir.BackboneElement {
    /**
     * Default constructor for PackagedProductDefinitionPackageProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PackagedProductDefinition.package.property';
        }
        this.vRS('type', exp);
        this.vOS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PackagedProductDefinitionPackageProperty._fts_dataType = 'PackagedProductDefinitionPackageProperty';
/**
 * Internal flag to properly serialize choice-type element PackagedProductDefinition.package.property.value[x]
 */
PackagedProductDefinitionPackageProperty._fts_valueIsChoice = true;
/**
 * The item(s) within the packaging.
 */
export class PackagedProductDefinitionPackageContainedItem extends fhir.BackboneElement {
    /**
     * Default constructor for PackagedProductDefinitionPackageContainedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.CodeableReference(source.item);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PackagedProductDefinition.package.containedItem';
        }
        this.vRS('item', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PackagedProductDefinitionPackageContainedItem._fts_dataType = 'PackagedProductDefinitionPackageContainedItem';
/**
 * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
 */
export class PackagedProductDefinitionPackage extends fhir.BackboneElement {
    /**
     * Default constructor for PackagedProductDefinitionPackage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.FhirInteger({ value: source.quantity });
        }
        if (source['_quantity']) {
            if (this.quantity) {
                this.quantity.addExtendedProperties(source._quantity);
            }
            else {
                this.quantity = new fhir.FhirInteger(source._quantity);
            }
        }
        if (source['material']) {
            this.material = source.material.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.material = [];
        }
        if (source['alternateMaterial']) {
            this.alternateMaterial = source.alternateMaterial.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.alternateMaterial = [];
        }
        if (source['shelfLifeStorage']) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.PackagedProductDefinitionPackageShelfLifeStorage(x));
        }
        else {
            this.shelfLifeStorage = [];
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.PackagedProductDefinitionPackageProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['containedItem']) {
            this.containedItem = source.containedItem.map((x) => new fhir.PackagedProductDefinitionPackageContainedItem(x));
        }
        else {
            this.containedItem = [];
        }
        if (source['package']) {
            this.package = source.package.map((x) => new fhir.PackagedProductDefinitionPackage(x));
        }
        else {
            this.package = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PackagedProductDefinition.package';
        }
        this.vOA('identifier', exp);
        this.vOS('type', exp);
        this.vOS('quantity', exp);
        this.vOA('material', exp);
        this.vOA('alternateMaterial', exp);
        this.vOA('shelfLifeStorage', exp);
        this.vOA('manufacturer', exp);
        this.vOA('property', exp);
        this.vOA('containedItem', exp);
        this.vOA('package', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PackagedProductDefinitionPackage._fts_dataType = 'PackagedProductDefinitionPackage';
/**
 * A medically related item or items, in a container or package.
 */
export class PackagedProductDefinition extends fhir.DomainResource {
    /**
     * Default constructor for PackagedProductDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PackagedProductDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['packageFor']) {
            this.packageFor = source.packageFor.map((x) => new fhir.Reference(x));
        }
        else {
            this.packageFor = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate);
            }
        }
        if (source['containedItemQuantity']) {
            this.containedItemQuantity = source.containedItemQuantity.map((x) => new fhir.Quantity(x));
        }
        else {
            this.containedItemQuantity = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = source.legalStatusOfSupply.map((x) => new fhir.PackagedProductDefinitionLegalStatusOfSupply(x));
        }
        else {
            this.legalStatusOfSupply = [];
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        else {
            this.marketingStatus = [];
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.characteristic = [];
        }
        if (source['copackagedIndicator']) {
            this.copackagedIndicator = new fhir.FhirBoolean({ value: source.copackagedIndicator });
        }
        if (source['_copackagedIndicator']) {
            if (this.copackagedIndicator) {
                this.copackagedIndicator.addExtendedProperties(source._copackagedIndicator);
            }
            else {
                this.copackagedIndicator = new fhir.FhirBoolean(source._copackagedIndicator);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['package']) {
            this.package = new fhir.PackagedProductDefinitionPackage(source.package);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PackagedProductDefinition';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('name', exp);
        this.vOS('type', exp);
        this.vOA('packageFor', exp);
        this.vOS('status', exp);
        this.vOS('statusDate', exp);
        this.vOA('containedItemQuantity', exp);
        this.vOS('description', exp);
        this.vOA('legalStatusOfSupply', exp);
        this.vOA('marketingStatus', exp);
        this.vOA('characteristic', exp);
        this.vOS('copackagedIndicator', exp);
        this.vOA('manufacturer', exp);
        this.vOS('package', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PackagedProductDefinition._fts_dataType = 'PackagedProductDefinition';
//# sourceMappingURL=data:application/json;base64,