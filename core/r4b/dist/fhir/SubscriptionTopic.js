// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubscriptionTopic
import * as fhir from '../fhir.js';
// @ts-ignore
import { SubscriptiontopicCrBehaviorVsValidation } from '../fhirValueSets/SubscriptiontopicCrBehaviorVsValidation.js';
// @ts-ignore
import { InteractionTriggerVsValidation } from '../fhirValueSets/InteractionTriggerVsValidation.js';
// @ts-ignore
import { SubscriptionSearchModifierVsValidation } from '../fhirValueSets/SubscriptionSearchModifierVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
 */
export class SubscriptionTopicResourceTriggerQueryCriteria extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionTopicResourceTriggerQueryCriteria - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['previous']) {
            this.previous = new fhir.FhirString({ value: source.previous });
        }
        if (source['_previous']) {
            if (this.previous) {
                this.previous.addExtendedProperties(source._previous);
            }
            else {
                this.previous = new fhir.FhirString(source._previous);
            }
        }
        if (source['resultForCreate']) {
            this.resultForCreate = new fhir.FhirCode({ value: source.resultForCreate });
        }
        if (source['_resultForCreate']) {
            if (this.resultForCreate) {
                this.resultForCreate.addExtendedProperties(source._resultForCreate);
            }
            else {
                this.resultForCreate = new fhir.FhirCode(source._resultForCreate);
            }
        }
        if (source['current']) {
            this.current = new fhir.FhirString({ value: source.current });
        }
        if (source['_current']) {
            if (this.current) {
                this.current.addExtendedProperties(source._current);
            }
            else {
                this.current = new fhir.FhirString(source._current);
            }
        }
        if (source['resultForDelete']) {
            this.resultForDelete = new fhir.FhirCode({ value: source.resultForDelete });
        }
        if (source['_resultForDelete']) {
            if (this.resultForDelete) {
                this.resultForDelete.addExtendedProperties(source._resultForDelete);
            }
            else {
                this.resultForDelete = new fhir.FhirCode(source._resultForDelete);
            }
        }
        if (source['requireBoth']) {
            this.requireBoth = new fhir.FhirBoolean({ value: source.requireBoth });
        }
        if (source['_requireBoth']) {
            if (this.requireBoth) {
                this.requireBoth.addExtendedProperties(source._requireBoth);
            }
            else {
                this.requireBoth = new fhir.FhirBoolean(source._requireBoth);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionTopic.resourceTrigger.queryCriteria';
        }
        this.vOS('previous', exp);
        this.vOSV('resultForCreate', exp, 'SubscriptiontopicCrBehavior', SubscriptiontopicCrBehaviorVsValidation, 'r');
        this.vOS('current', exp);
        this.vOSV('resultForDelete', exp, 'SubscriptiontopicCrBehavior', SubscriptiontopicCrBehaviorVsValidation, 'r');
        this.vOS('requireBoth', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionTopicResourceTriggerQueryCriteria._fts_dataType = 'SubscriptionTopicResourceTriggerQueryCriteria';
/**
 * A definition of a resource-based event that triggers a notification based on the SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a resource update matching ANY of the definitions will trigger a notification).
 */
export class SubscriptionTopicResourceTrigger extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionTopicResourceTrigger - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.FhirUri({ value: source.resource });
        }
        else {
            this.resource = null;
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirUri(source._resource);
            }
        }
        if (source['supportedInteraction']) {
            this.supportedInteraction = source.supportedInteraction.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.supportedInteraction = [];
        }
        if (source['_supportedInteraction']) {
            source._supportedInteraction.forEach((x, i) => {
                if (this.supportedInteraction.length >= i) {
                    if (x) {
                        this.supportedInteraction[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.supportedInteraction.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['queryCriteria']) {
            this.queryCriteria = new fhir.SubscriptionTopicResourceTriggerQueryCriteria(source.queryCriteria);
        }
        if (source['fhirPathCriteria']) {
            this.fhirPathCriteria = new fhir.FhirString({ value: source.fhirPathCriteria });
        }
        if (source['_fhirPathCriteria']) {
            if (this.fhirPathCriteria) {
                this.fhirPathCriteria.addExtendedProperties(source._fhirPathCriteria);
            }
            else {
                this.fhirPathCriteria = new fhir.FhirString(source._fhirPathCriteria);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionTopic.resourceTrigger';
        }
        this.vOS('description', exp);
        this.vRS('resource', exp);
        this.vOAV('supportedInteraction', exp, 'InteractionTrigger', InteractionTriggerVsValidation, 'r');
        this.vOS('queryCriteria', exp);
        this.vOS('fhirPathCriteria', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionTopicResourceTrigger._fts_dataType = 'SubscriptionTopicResourceTrigger';
/**
 * Event definition which can be used to trigger the SubscriptionTopic.
 */
export class SubscriptionTopicEventTrigger extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionTopicEventTrigger - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['event']) {
            this.event = new fhir.CodeableConcept(source.event);
        }
        else {
            this.event = null;
        }
        if (source['resource']) {
            this.resource = new fhir.FhirUri({ value: source.resource });
        }
        else {
            this.resource = null;
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirUri(source._resource);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionTopic.eventTrigger';
        }
        this.vOS('description', exp);
        this.vRS('event', exp);
        this.vRS('resource', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionTopicEventTrigger._fts_dataType = 'SubscriptionTopicEventTrigger';
/**
 * List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be defined Search Parameters (e.g., Encounter.patient) or parameters defined within this SubscriptionTopic context (e.g., hub.event).
 */
export class SubscriptionTopicCanFilterBy extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionTopicCanFilterBy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.FhirUri({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirUri(source._resource);
            }
        }
        if (source['filterParameter']) {
            this.filterParameter = new fhir.FhirString({ value: source.filterParameter });
        }
        else {
            this.filterParameter = null;
        }
        if (source['_filterParameter']) {
            if (this.filterParameter) {
                this.filterParameter.addExtendedProperties(source._filterParameter);
            }
            else {
                this.filterParameter = new fhir.FhirString(source._filterParameter);
            }
        }
        if (source['filterDefinition']) {
            this.filterDefinition = new fhir.FhirUri({ value: source.filterDefinition });
        }
        if (source['_filterDefinition']) {
            if (this.filterDefinition) {
                this.filterDefinition.addExtendedProperties(source._filterDefinition);
            }
            else {
                this.filterDefinition = new fhir.FhirUri(source._filterDefinition);
            }
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.modifier = [];
        }
        if (source['_modifier']) {
            source._modifier.forEach((x, i) => {
                if (this.modifier.length >= i) {
                    if (x) {
                        this.modifier[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.modifier.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionTopic.canFilterBy';
        }
        this.vOS('description', exp);
        this.vOS('resource', exp);
        this.vRS('filterParameter', exp);
        this.vOS('filterDefinition', exp);
        this.vOAV('modifier', exp, 'SubscriptionSearchModifier', SubscriptionSearchModifierVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionTopicCanFilterBy._fts_dataType = 'SubscriptionTopicCanFilterBy';
/**
 * List of properties to describe the shape (e.g., resources) included in notifications from this Subscription Topic.
 */
export class SubscriptionTopicNotificationShape extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionTopicNotificationShape - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resource']) {
            this.resource = new fhir.FhirUri({ value: source.resource });
        }
        else {
            this.resource = null;
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirUri(source._resource);
            }
        }
        if (source['include']) {
            this.include = source.include.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.include = [];
        }
        if (source['_include']) {
            source._include.forEach((x, i) => {
                if (this.include.length >= i) {
                    if (x) {
                        this.include[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.include.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['revInclude']) {
            this.revInclude = source.revInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.revInclude = [];
        }
        if (source['_revInclude']) {
            source._revInclude.forEach((x, i) => {
                if (this.revInclude.length >= i) {
                    if (x) {
                        this.revInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.revInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionTopic.notificationShape';
        }
        this.vRS('resource', exp);
        this.vOA('include', exp);
        this.vOA('revInclude', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionTopicNotificationShape._fts_dataType = 'SubscriptionTopicNotificationShape';
/**
 * Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.
 */
export class SubscriptionTopic extends fhir.DomainResource {
    /**
     * Default constructor for SubscriptionTopic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubscriptionTopic';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.derivedFrom = [];
        }
        if (source['_derivedFrom']) {
            source._derivedFrom.forEach((x, i) => {
                if (this.derivedFrom.length >= i) {
                    if (x) {
                        this.derivedFrom[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.derivedFrom.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['resourceTrigger']) {
            this.resourceTrigger = source.resourceTrigger.map((x) => new fhir.SubscriptionTopicResourceTrigger(x));
        }
        else {
            this.resourceTrigger = [];
        }
        if (source['eventTrigger']) {
            this.eventTrigger = source.eventTrigger.map((x) => new fhir.SubscriptionTopicEventTrigger(x));
        }
        else {
            this.eventTrigger = [];
        }
        if (source['canFilterBy']) {
            this.canFilterBy = source.canFilterBy.map((x) => new fhir.SubscriptionTopicCanFilterBy(x));
        }
        else {
            this.canFilterBy = [];
        }
        if (source['notificationShape']) {
            this.notificationShape = source.notificationShape.map((x) => new fhir.SubscriptionTopicNotificationShape(x));
        }
        else {
            this.notificationShape = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubscriptionTopic';
        }
        this.vRS('resourceType', exp);
        this.vRS('url', exp);
        this.vOA('identifier', exp);
        this.vOS('version', exp);
        this.vOS('title', exp);
        this.vOA('derivedFrom', exp);
        this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('date', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('description', exp);
        this.vOA('useContext', exp);
        this.vOA('jurisdiction', exp);
        this.vOS('purpose', exp);
        this.vOS('copyright', exp);
        this.vOS('approvalDate', exp);
        this.vOS('lastReviewDate', exp);
        this.vOS('effectivePeriod', exp);
        this.vOA('resourceTrigger', exp);
        this.vOA('eventTrigger', exp);
        this.vOA('canFilterBy', exp);
        this.vOA('notificationShape', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionTopic._fts_dataType = 'SubscriptionTopic';
//# sourceMappingURL=data:application/json;base64,