// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: InsurancePlan
import * as fhir from '../fhir.js';
// @ts-ignore
import { InsuranceplanApplicabilityVsValidation } from '../fhirValueSets/InsuranceplanApplicabilityVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['purpose']) {
            this.purpose = new fhir.CodeableConcept(source.purpose);
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.contact';
        }
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOS('address', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanContact._fts_dataType = 'InsurancePlanContact';
/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.coverage.benefit.limit';
        }
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanCoverageBenefitLimit._fts_dataType = 'InsurancePlanCoverageBenefitLimit';
/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['requirement']) {
            this.requirement = new fhir.FhirString({ value: source.requirement });
        }
        if (source['_requirement']) {
            if (this.requirement) {
                this.requirement.addExtendedProperties(source._requirement);
            }
            else {
                this.requirement = new fhir.FhirString(source._requirement);
            }
        }
        if (source['limit']) {
            this.limit = source.limit.map((x) => new fhir.InsurancePlanCoverageBenefitLimit(x));
        }
        else {
            this.limit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.coverage.benefit';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('requirement', exp));
        iss.push(...this.vOA('limit', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanCoverageBenefit._fts_dataType = 'InsurancePlanCoverageBenefit';
/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        else {
            this.network = [];
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanCoverageBenefit(x));
        }
        else {
            this.benefit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.coverage';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('network', exp));
        iss.push(...this.vRA('benefit', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanCoverage._fts_dataType = 'InsurancePlanCoverage';
/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupSize']) {
            this.groupSize = new fhir.FhirPositiveInt({ value: source.groupSize });
        }
        if (source['_groupSize']) {
            if (this.groupSize) {
                this.groupSize.addExtendedProperties(source._groupSize);
            }
            else {
                this.groupSize = new fhir.FhirPositiveInt(source._groupSize);
            }
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.plan.generalCost';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('groupSize', exp));
        iss.push(...this.vOS('cost', exp));
        iss.push(...this.vOS('comment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanGeneralCost._fts_dataType = 'InsurancePlanPlanGeneralCost';
/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['applicability']) {
            this.applicability = new fhir.CodeableConcept(source.applicability);
        }
        if (source['qualifiers']) {
            this.qualifiers = source.qualifiers.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.qualifiers = [];
        }
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.plan.specificCost.benefit.cost';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOSV('applicability', exp, 'InsuranceplanApplicability', InsuranceplanApplicabilityVsValidation, 'r'));
        iss.push(...this.vOA('qualifiers', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanSpecificCostBenefitCost._fts_dataType = 'InsurancePlanPlanSpecificCostBenefitCost';
/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefitCost(x));
        }
        else {
            this.cost = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.plan.specificCost.benefit';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('cost', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanSpecificCostBenefit._fts_dataType = 'InsurancePlanPlanSpecificCostBenefit';
/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefit(x));
        }
        else {
            this.benefit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.plan.specificCost';
        }
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOA('benefit', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanSpecificCost._fts_dataType = 'InsurancePlanPlanSpecificCost';
/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        else {
            this.coverageArea = [];
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        else {
            this.network = [];
        }
        if (source['generalCost']) {
            this.generalCost = source.generalCost.map((x) => new fhir.InsurancePlanPlanGeneralCost(x));
        }
        else {
            this.generalCost = [];
        }
        if (source['specificCost']) {
            this.specificCost = source.specificCost.map((x) => new fhir.InsurancePlanPlanSpecificCost(x));
        }
        else {
            this.specificCost = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan.plan';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('coverageArea', exp));
        iss.push(...this.vOA('network', exp));
        iss.push(...this.vOA('generalCost', exp));
        iss.push(...this.vOA('specificCost', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlan._fts_dataType = 'InsurancePlanPlan';
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhir.DomainResource {
    /**
     * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'InsurancePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['ownedBy']) {
            this.ownedBy = new fhir.Reference(source.ownedBy);
        }
        if (source['administeredBy']) {
            this.administeredBy = new fhir.Reference(source.administeredBy);
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        else {
            this.coverageArea = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.InsurancePlanContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        else {
            this.network = [];
        }
        if (source['coverage']) {
            this.coverage = source.coverage.map((x) => new fhir.InsurancePlanCoverage(x));
        }
        else {
            this.coverage = [];
        }
        if (source['plan']) {
            this.plan = source.plan.map((x) => new fhir.InsurancePlanPlan(x));
        }
        else {
            this.plan = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'InsurancePlan';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('alias', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('ownedBy', exp));
        iss.push(...this.vOS('administeredBy', exp));
        iss.push(...this.vOA('coverageArea', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vOA('network', exp));
        iss.push(...this.vOA('coverage', exp));
        iss.push(...this.vOA('plan', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlan._fts_dataType = 'InsurancePlan';
//# sourceMappingURL=data:application/json;base64,