// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchStudy
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResearchStudyStatusVsValidation } from '../fhirValueSets/ResearchStudyStatusVsValidation.js';
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
export class ResearchStudyArm extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyArm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchStudy.arm';
        }
        this.vRS('name', exp);
        this.vOS('type', exp);
        this.vOS('description', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudyArm._fts_dataType = 'ResearchStudyArm';
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
export class ResearchStudyObjective extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyObjective - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchStudy.objective';
        }
        this.vOS('name', exp);
        this.vOS('type', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudyObjective._fts_dataType = 'ResearchStudyObjective';
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export class ResearchStudy extends fhir.DomainResource {
    /**
     * Default constructor for ResearchStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['protocol']) {
            this.protocol = source.protocol.map((x) => new fhir.Reference(x));
        }
        else {
            this.protocol = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['primaryPurposeType']) {
            this.primaryPurposeType = new fhir.CodeableConcept(source.primaryPurposeType);
        }
        if (source['phase']) {
            this.phase = new fhir.CodeableConcept(source.phase);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.focus = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.condition = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.keyword = [];
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.location = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['enrollment']) {
            this.enrollment = source.enrollment.map((x) => new fhir.Reference(x));
        }
        else {
            this.enrollment = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['sponsor']) {
            this.sponsor = new fhir.Reference(source.sponsor);
        }
        if (source['principalInvestigator']) {
            this.principalInvestigator = new fhir.Reference(source.principalInvestigator);
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        else {
            this.site = [];
        }
        if (source['reasonStopped']) {
            this.reasonStopped = new fhir.CodeableConcept(source.reasonStopped);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['arm']) {
            this.arm = source.arm.map((x) => new fhir.ResearchStudyArm(x));
        }
        else {
            this.arm = [];
        }
        if (source['objective']) {
            this.objective = source.objective.map((x) => new fhir.ResearchStudyObjective(x));
        }
        else {
            this.objective = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchStudy';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('title', exp);
        this.vOA('protocol', exp);
        this.vOA('partOf', exp);
        this.vRSV('status', exp, 'ResearchStudyStatus', ResearchStudyStatusVsValidation, 'r');
        this.vOS('primaryPurposeType', exp);
        this.vOS('phase', exp);
        this.vOA('category', exp);
        this.vOA('focus', exp);
        this.vOA('condition', exp);
        this.vOA('contact', exp);
        this.vOA('relatedArtifact', exp);
        this.vOA('keyword', exp);
        this.vOA('location', exp);
        this.vOS('description', exp);
        this.vOA('enrollment', exp);
        this.vOS('period', exp);
        this.vOS('sponsor', exp);
        this.vOS('principalInvestigator', exp);
        this.vOA('site', exp);
        this.vOS('reasonStopped', exp);
        this.vOA('note', exp);
        this.vOA('arm', exp);
        this.vOA('objective', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudy._fts_dataType = 'ResearchStudy';
//# sourceMappingURL=data:application/json;base64,