// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: CatalogEntry
import * as fhir from '../fhir.js';
// @ts-ignore
import { RelationTypeVsValidation } from '../fhirValueSets/RelationTypeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationtype'] !== undefined) {
            this.relationtype = new fhir.FhirCode({ value: source.relationtype }, options);
        }
        else {
            this.relationtype = null;
        }
        if (source['_relationtype']) {
            if (this.relationtype) {
                this.relationtype.addExtendedProperties(source._relationtype);
            }
            else {
                this.relationtype = new fhir.FhirCode(source._relationtype, options);
            }
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item, options);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CatalogEntry.relatedEntry';
        }
        iss.push(...this.vRSV('relationtype', exp, 'RelationType', RelationTypeVsValidation, 'r'));
        iss.push(...this.vRS('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CatalogEntryRelatedEntry._fts_dataType = 'CatalogEntryRelatedEntry';
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource {
    /**
     * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CatalogEntry';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['orderable'] !== undefined) {
            this.orderable = new fhir.FhirBoolean({ value: source.orderable }, options);
        }
        else {
            this.orderable = null;
        }
        if (source['_orderable']) {
            if (this.orderable) {
                this.orderable.addExtendedProperties(source._orderable);
            }
            else {
                this.orderable = new fhir.FhirBoolean(source._orderable, options);
            }
        }
        if (source['referencedItem']) {
            this.referencedItem = new fhir.Reference(source.referencedItem, options);
        }
        else {
            this.referencedItem = null;
        }
        if (source['additionalIdentifier']) {
            this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.additionalIdentifier = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.classification = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod, options);
        }
        if (source['validTo'] !== undefined) {
            this.validTo = new fhir.FhirDateTime({ value: source.validTo }, options);
        }
        if (source['_validTo']) {
            if (this.validTo) {
                this.validTo.addExtendedProperties(source._validTo);
            }
            else {
                this.validTo = new fhir.FhirDateTime(source._validTo, options);
            }
        }
        if (source['lastUpdated'] !== undefined) {
            this.lastUpdated = new fhir.FhirDateTime({ value: source.lastUpdated }, options);
        }
        if (source['_lastUpdated']) {
            if (this.lastUpdated) {
                this.lastUpdated.addExtendedProperties(source._lastUpdated);
            }
            else {
                this.lastUpdated = new fhir.FhirDateTime(source._lastUpdated, options);
            }
        }
        if (source['additionalCharacteristic']) {
            this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.additionalCharacteristic = [];
        }
        if (source['additionalClassification']) {
            this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.additionalClassification = [];
        }
        if (source['relatedEntry']) {
            this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x, options));
        }
        else {
            this.relatedEntry = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CatalogEntry';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vRS('orderable', exp));
        iss.push(...this.vRS('referencedItem', exp));
        iss.push(...this.vOA('additionalIdentifier', exp));
        iss.push(...this.vOA('classification', exp));
        iss.push(...this.vOSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('validityPeriod', exp));
        iss.push(...this.vOS('validTo', exp));
        iss.push(...this.vOS('lastUpdated', exp));
        iss.push(...this.vOA('additionalCharacteristic', exp));
        iss.push(...this.vOA('additionalClassification', exp));
        iss.push(...this.vOA('relatedEntry', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CatalogEntry._fts_dataType = 'CatalogEntry';
//# sourceMappingURL=data:application/json;base64,