// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit
import * as fhir from '../fhir.js';
// @ts-ignore
import { NoteTypeVsValidation } from '../fhirValueSets/NoteTypeVsValidation.js';
// @ts-ignore
import { ExplanationofbenefitStatusVsValidation } from '../fhirValueSets/ExplanationofbenefitStatusVsValidation.js';
// @ts-ignore
import { ClaimUseVsValidation } from '../fhirValueSets/ClaimUseVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim, options);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship, options);
        }
        if (source['reference']) {
            this.reference = new fhir.Identifier(source.reference, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.related';
        }
        iss.push(...this.vOS('claim', exp));
        iss.push(...this.vOS('relationship', exp));
        iss.push(...this.vOS('reference', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitRelated._fts_dataType = 'ExplanationOfBenefitRelated';
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.payee';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('party', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitPayee._fts_dataType = 'ExplanationOfBenefitPayee';
/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider, options);
        }
        else {
            this.provider = null;
        }
        if (source['responsible'] !== undefined) {
            this.responsible = new fhir.FhirBoolean({ value: source.responsible }, options);
        }
        if (source['_responsible']) {
            if (this.responsible) {
                this.responsible.addExtendedProperties(source._responsible);
            }
            else {
                this.responsible = new fhir.FhirBoolean(source._responsible, options);
            }
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        if (source['qualification']) {
            this.qualification = new fhir.CodeableConcept(source.qualification, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.careTeam';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('provider', exp));
        iss.push(...this.vOS('responsible', exp));
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOS('qualification', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitCareTeam._fts_dataType = 'ExplanationOfBenefitCareTeam';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        else {
            this.category = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDate'] !== undefined) {
            this.timing = new fhir.FhirDate({ value: source.timingDate }, options);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod, options);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        if (source['reason']) {
            this.reason = new fhir.Coding(source.reason, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.supportingInfo';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('timing', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('reason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitSupportingInfo._fts_dataType = 'ExplanationOfBenefitSupportingInfo';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.timing[x]
 */
ExplanationOfBenefitSupportingInfo._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.value[x]
 */
ExplanationOfBenefitSupportingInfo._fts_valueIsChoice = true;
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept, options);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference, options);
        }
        else {
            this.diagnosis = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['onAdmission']) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission, options);
        }
        if (source['packageCode']) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.diagnosis';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('diagnosis', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('onAdmission', exp));
        iss.push(...this.vOS('packageCode', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitDiagnosis._fts_dataType = 'ExplanationOfBenefitDiagnosis';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.diagnosis.diagnosis[x]
 */
ExplanationOfBenefitDiagnosis._fts_diagnosisIsChoice = true;
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['procedure']) {
            this.procedure = source.procedure;
        }
        else if (source['procedureCodeableConcept']) {
            this.procedure = new fhir.CodeableConcept(source.procedureCodeableConcept, options);
        }
        else if (source['procedureReference']) {
            this.procedure = new fhir.Reference(source.procedureReference, options);
        }
        else {
            this.procedure = null;
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.udi = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.procedure';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vRS('procedure', exp));
        iss.push(...this.vOA('udi', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitProcedure._fts_dataType = 'ExplanationOfBenefitProcedure';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.procedure.procedure[x]
 */
ExplanationOfBenefitProcedure._fts_procedureIsChoice = true;
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['focal'] !== undefined) {
            this.focal = new fhir.FhirBoolean({ value: source.focal }, options);
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal, options);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage, options);
        }
        else {
            this.coverage = null;
        }
        if (source['preAuthRef'] !== undefined) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.insurance';
        }
        iss.push(...this.vRS('focal', exp));
        iss.push(...this.vRS('coverage', exp));
        iss.push(...this.vOA('preAuthRef', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitInsurance._fts_dataType = 'ExplanationOfBenefitInsurance';
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDate({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress, options);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.accident';
        }
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('location', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAccident._fts_dataType = 'ExplanationOfBenefitAccident';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.accident.location[x]
 */
ExplanationOfBenefitAccident._fts_locationIsChoice = true;
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        else {
            this.category = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason, options);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount, options);
        }
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.value }, options);
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item.adjudication';
        }
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemAdjudication._fts_dataType = 'ExplanationOfBenefitItemAdjudication';
/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue, options);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net, options);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.udi = [];
        }
        if (source['noteNumber'] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item.detail.subDetail';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('udi', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitItemDetailSubDetail';
/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue, options);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net, options);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.udi = [];
        }
        if (source['noteNumber'] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x, options));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item.detail';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('udi', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('subDetail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemDetail._fts_dataType = 'ExplanationOfBenefitItemDetail';
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['careTeamSequence'] !== undefined) {
            this.careTeamSequence = source.careTeamSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.careTeamSequence = [];
        }
        if (source['_careTeamSequence']) {
            source._careTeamSequence.forEach((x, i) => {
                if (this.careTeamSequence.length >= i) {
                    if (x) {
                        this.careTeamSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.careTeamSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['diagnosisSequence'] !== undefined) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.diagnosisSequence = [];
        }
        if (source['_diagnosisSequence']) {
            source._diagnosisSequence.forEach((x, i) => {
                if (this.diagnosisSequence.length >= i) {
                    if (x) {
                        this.diagnosisSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.diagnosisSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['procedureSequence'] !== undefined) {
            this.procedureSequence = source.procedureSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.procedureSequence = [];
        }
        if (source['_procedureSequence']) {
            source._procedureSequence.forEach((x, i) => {
                if (this.procedureSequence.length >= i) {
                    if (x) {
                        this.procedureSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.procedureSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['informationSequence'] !== undefined) {
            this.informationSequence = source.informationSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.informationSequence = [];
        }
        if (source['_informationSequence']) {
            source._informationSequence.forEach((x, i) => {
                if (this.informationSequence.length >= i) {
                    if (x) {
                        this.informationSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.informationSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue, options);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate'] !== undefined) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate }, options);
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod, options);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept, options);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress, options);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net, options);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.udi = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite, options);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.subSite = [];
        }
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.encounter = [];
        }
        if (source['noteNumber'] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x, options));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOA('careTeamSequence', exp));
        iss.push(...this.vOA('diagnosisSequence', exp));
        iss.push(...this.vOA('procedureSequence', exp));
        iss.push(...this.vOA('informationSequence', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('serviced', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('udi', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOA('subSite', exp));
        iss.push(...this.vOA('encounter', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItem._fts_dataType = 'ExplanationOfBenefitItem';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.serviced[x]
 */
ExplanationOfBenefitItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.location[x]
 */
ExplanationOfBenefitItem._fts_locationIsChoice = true;
/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net, options);
        }
        if (source['noteNumber'] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.addItem.detail.subDetail';
        }
        iss.push(...this.vRS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetailSubDetail';
/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net, options);
        }
        if (source['noteNumber'] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x, options));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.addItem.detail';
        }
        iss.push(...this.vRS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('subDetail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItemDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetail';
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['itemSequence'] !== undefined) {
            this.itemSequence = source.itemSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.itemSequence = [];
        }
        if (source['_itemSequence']) {
            source._itemSequence.forEach((x, i) => {
                if (this.itemSequence.length >= i) {
                    if (x) {
                        this.itemSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.itemSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['detailSequence'] !== undefined) {
            this.detailSequence = source.detailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.detailSequence = [];
        }
        if (source['_detailSequence']) {
            source._detailSequence.forEach((x, i) => {
                if (this.detailSequence.length >= i) {
                    if (x) {
                        this.detailSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.detailSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['subDetailSequence'] !== undefined) {
            this.subDetailSequence = source.subDetailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.subDetailSequence = [];
        }
        if (source['_subDetailSequence']) {
            source._subDetailSequence.forEach((x, i) => {
                if (this.subDetailSequence.length >= i) {
                    if (x) {
                        this.subDetailSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.subDetailSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['provider']) {
            this.provider = source.provider.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.provider = [];
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate'] !== undefined) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate }, options);
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod, options);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept, options);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress, options);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net, options);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite, options);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.subSite = [];
        }
        if (source['noteNumber'] !== undefined) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x, options));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.addItem';
        }
        iss.push(...this.vOA('itemSequence', exp));
        iss.push(...this.vOA('detailSequence', exp));
        iss.push(...this.vOA('subDetailSequence', exp));
        iss.push(...this.vOA('provider', exp));
        iss.push(...this.vRS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('serviced', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOA('subSite', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItem._fts_dataType = 'ExplanationOfBenefitAddItem';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.serviced[x]
 */
ExplanationOfBenefitAddItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.location[x]
 */
ExplanationOfBenefitAddItem._fts_locationIsChoice = true;
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        else {
            this.category = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount, options);
        }
        else {
            this.amount = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.total';
        }
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vRS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitTotal._fts_dataType = 'ExplanationOfBenefitTotal';
/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['adjustment']) {
            this.adjustment = new fhir.Money(source.adjustment, options);
        }
        if (source['adjustmentReason']) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDate({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date, options);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount, options);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.payment';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('adjustment', exp));
        iss.push(...this.vOS('adjustmentReason', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOS('identifier', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitPayment._fts_dataType = 'ExplanationOfBenefitPayment';
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number'] !== undefined) {
            this.number = new fhir.FhirPositiveInt({ value: source.number }, options);
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirPositiveInt(source._number, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.processNote';
        }
        iss.push(...this.vOS('number', exp));
        iss.push(...this.vOSV('type', exp, 'NoteType', NoteTypeVsValidation, 'r'));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOS('language', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitProcessNote._fts_dataType = 'ExplanationOfBenefitProcessNote';
/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt'] !== undefined) {
            this.allowed = new fhir.FhirUnsignedInt({ value: source.allowedUnsignedInt }, options);
        }
        else if (source['allowedString'] !== undefined) {
            this.allowed = new fhir.FhirString({ value: source.allowedString }, options);
        }
        else if (source['allowedMoney']) {
            this.allowed = new fhir.Money(source.allowedMoney, options);
        }
        if (source['used']) {
            this.used = source.used;
        }
        else if (source['usedUnsignedInt'] !== undefined) {
            this.used = new fhir.FhirUnsignedInt({ value: source.usedUnsignedInt }, options);
        }
        else if (source['usedMoney']) {
            this.used = new fhir.Money(source.usedMoney, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.benefitBalance.financial';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('allowed', exp));
        iss.push(...this.vOS('used', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_dataType = 'ExplanationOfBenefitBenefitBalanceFinancial';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.allowed[x]
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_allowedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.used[x]
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_usedIsChoice = true;
/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        else {
            this.category = null;
        }
        if (source['excluded'] !== undefined) {
            this.excluded = new fhir.FhirBoolean({ value: source.excluded }, options);
        }
        if (source['_excluded']) {
            if (this.excluded) {
                this.excluded.addExtendedProperties(source._excluded);
            }
            else {
                this.excluded = new fhir.FhirBoolean(source._excluded, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network, options);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit, options);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term, options);
        }
        if (source['financial']) {
            this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x, options));
        }
        else {
            this.financial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.benefitBalance';
        }
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOS('excluded', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOS('unit', exp));
        iss.push(...this.vOS('term', exp));
        iss.push(...this.vOA('financial', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitBenefitBalance._fts_dataType = 'ExplanationOfBenefitBenefitBalance';
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource {
    /**
     * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ExplanationOfBenefit';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType, options);
        }
        if (source['use'] !== undefined) {
            this.use = new fhir.FhirCode({ value: source.use }, options);
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use, options);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['billablePeriod']) {
            this.billablePeriod = new fhir.Period(source.billablePeriod, options);
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer, options);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer, options);
        }
        else {
            this.insurer = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider, options);
        }
        else {
            this.provider = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority, options);
        }
        if (source['fundsReserveRequested']) {
            this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested, options);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve, options);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x, options));
        }
        else {
            this.related = [];
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription, options);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription, options);
        }
        if (source['payee']) {
            this.payee = new fhir.ExplanationOfBenefitPayee(source.payee, options);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral, options);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility, options);
        }
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim, options);
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse, options);
        }
        if (source['outcome'] !== undefined) {
            this.outcome = new fhir.FhirCode({ value: source.outcome }, options);
        }
        else {
            this.outcome = null;
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome, options);
            }
        }
        if (source['disposition'] !== undefined) {
            this.disposition = new fhir.FhirString({ value: source.disposition }, options);
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition, options);
            }
        }
        if (source['preAuthRef'] !== undefined) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['preAuthRefPeriod']) {
            this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x, options));
        }
        else {
            this.preAuthRefPeriod = [];
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x, options));
        }
        else {
            this.careTeam = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x, options));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x, options));
        }
        else {
            this.diagnosis = [];
        }
        if (source['procedure']) {
            this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x, options));
        }
        else {
            this.procedure = [];
        }
        if (source['precedence'] !== undefined) {
            this.precedence = new fhir.FhirPositiveInt({ value: source.precedence }, options);
        }
        if (source['_precedence']) {
            if (this.precedence) {
                this.precedence.addExtendedProperties(source._precedence);
            }
            else {
                this.precedence = new fhir.FhirPositiveInt(source._precedence, options);
            }
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x, options));
        }
        else {
            this.insurance = [];
        }
        if (source['accident']) {
            this.accident = new fhir.ExplanationOfBenefitAccident(source.accident, options);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x, options));
        }
        else {
            this.item = [];
        }
        if (source['addItem']) {
            this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x, options));
        }
        else {
            this.addItem = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x, options));
        }
        else {
            this.adjudication = [];
        }
        if (source['total']) {
            this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x, options));
        }
        else {
            this.total = [];
        }
        if (source['payment']) {
            this.payment = new fhir.ExplanationOfBenefitPayment(source.payment, options);
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode, options);
        }
        if (source['form']) {
            this.form = new fhir.Attachment(source.form, options);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x, options));
        }
        else {
            this.processNote = [];
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod, options);
        }
        if (source['benefitBalance']) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x, options));
        }
        else {
            this.benefitBalance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ExplanationofbenefitStatus', ExplanationofbenefitStatusVsValidation, 'r'));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('subType', exp));
        iss.push(...this.vRSV('use', exp, 'ClaimUse', ClaimUseVsValidation, 'r'));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('billablePeriod', exp));
        iss.push(...this.vRS('created', exp));
        iss.push(...this.vOS('enterer', exp));
        iss.push(...this.vRS('insurer', exp));
        iss.push(...this.vRS('provider', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('fundsReserveRequested', exp));
        iss.push(...this.vOS('fundsReserve', exp));
        iss.push(...this.vOA('related', exp));
        iss.push(...this.vOS('prescription', exp));
        iss.push(...this.vOS('originalPrescription', exp));
        iss.push(...this.vOS('payee', exp));
        iss.push(...this.vOS('referral', exp));
        iss.push(...this.vOS('facility', exp));
        iss.push(...this.vOS('claim', exp));
        iss.push(...this.vOS('claimResponse', exp));
        iss.push(...this.vRSV('outcome', exp, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r'));
        iss.push(...this.vOS('disposition', exp));
        iss.push(...this.vOA('preAuthRef', exp));
        iss.push(...this.vOA('preAuthRefPeriod', exp));
        iss.push(...this.vOA('careTeam', exp));
        iss.push(...this.vOA('supportingInfo', exp));
        iss.push(...this.vOA('diagnosis', exp));
        iss.push(...this.vOA('procedure', exp));
        iss.push(...this.vOS('precedence', exp));
        iss.push(...this.vRA('insurance', exp));
        iss.push(...this.vOS('accident', exp));
        iss.push(...this.vOA('item', exp));
        iss.push(...this.vOA('addItem', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('total', exp));
        iss.push(...this.vOS('payment', exp));
        iss.push(...this.vOS('formCode', exp));
        iss.push(...this.vOS('form', exp));
        iss.push(...this.vOA('processNote', exp));
        iss.push(...this.vOS('benefitPeriod', exp));
        iss.push(...this.vOA('benefitBalance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefit._fts_dataType = 'ExplanationOfBenefit';
//# sourceMappingURL=data:application/json;base64,