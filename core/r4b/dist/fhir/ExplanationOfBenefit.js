// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit
import * as fhir from '../fhir.js';
// @ts-ignore
import { NoteTypeVsValidation } from '../fhirValueSets/NoteTypeVsValidation.js';
// @ts-ignore
import { ExplanationofbenefitStatusVsValidation } from '../fhirValueSets/ExplanationofbenefitStatusVsValidation.js';
// @ts-ignore
import { ClaimUseVsValidation } from '../fhirValueSets/ClaimUseVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            this.reference = new fhir.Identifier(source.reference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.related';
        }
        this.vOS('claim', exp);
        this.vOS('relationship', exp);
        this.vOS('reference', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitRelated._fts_dataType = 'ExplanationOfBenefitRelated';
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.payee';
        }
        this.vOS('type', exp);
        this.vOS('party', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitPayee._fts_dataType = 'ExplanationOfBenefitPayee';
/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.FhirBoolean({ value: source.responsible });
        }
        if (source['_responsible']) {
            if (this.responsible) {
                this.responsible.addExtendedProperties(source._responsible);
            }
            else {
                this.responsible = new fhir.FhirBoolean(source._responsible);
            }
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['qualification']) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.careTeam';
        }
        this.vRS('sequence', exp);
        this.vRS('provider', exp);
        this.vOS('responsible', exp);
        this.vOS('role', exp);
        this.vOS('qualification', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitCareTeam._fts_dataType = 'ExplanationOfBenefitCareTeam';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDate']) {
            this.timing = new fhir.FhirDate({ value: source.timingDate });
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        if (source['reason']) {
            this.reason = new fhir.Coding(source.reason);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.supportingInfo';
        }
        this.vRS('sequence', exp);
        this.vRS('category', exp);
        this.vOS('code', exp);
        this.vOS('timing', exp);
        this.vOS('value', exp);
        this.vOS('reason', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitSupportingInfo._fts_dataType = 'ExplanationOfBenefitSupportingInfo';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.timing[x]
 */
ExplanationOfBenefitSupportingInfo._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.value[x]
 */
ExplanationOfBenefitSupportingInfo._fts_valueIsChoice = true;
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference);
        }
        else {
            this.diagnosis = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['onAdmission']) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission);
        }
        if (source['packageCode']) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.diagnosis';
        }
        this.vRS('sequence', exp);
        this.vRS('diagnosis', exp);
        this.vOA('type', exp);
        this.vOS('onAdmission', exp);
        this.vOS('packageCode', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitDiagnosis._fts_dataType = 'ExplanationOfBenefitDiagnosis';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.diagnosis.diagnosis[x]
 */
ExplanationOfBenefitDiagnosis._fts_diagnosisIsChoice = true;
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['procedure']) {
            this.procedure = source.procedure;
        }
        else if (source['procedureCodeableConcept']) {
            this.procedure = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        else if (source['procedureReference']) {
            this.procedure = new fhir.Reference(source.procedureReference);
        }
        else {
            this.procedure = null;
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.procedure';
        }
        this.vRS('sequence', exp);
        this.vOA('type', exp);
        this.vOS('date', exp);
        this.vRS('procedure', exp);
        this.vOA('udi', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitProcedure._fts_dataType = 'ExplanationOfBenefitProcedure';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.procedure.procedure[x]
 */
ExplanationOfBenefitProcedure._fts_procedureIsChoice = true;
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.insurance';
        }
        this.vRS('focal', exp);
        this.vRS('coverage', exp);
        this.vOA('preAuthRef', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitInsurance._fts_dataType = 'ExplanationOfBenefitInsurance';
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.accident';
        }
        this.vOS('date', exp);
        this.vOS('type', exp);
        this.vOS('location', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAccident._fts_dataType = 'ExplanationOfBenefitAccident';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.accident.location[x]
 */
ExplanationOfBenefitAccident._fts_locationIsChoice = true;
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item.adjudication';
        }
        this.vRS('category', exp);
        this.vOS('reason', exp);
        this.vOS('amount', exp);
        this.vOS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemAdjudication._fts_dataType = 'ExplanationOfBenefitItemAdjudication';
/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item.detail.subDetail';
        }
        this.vRS('sequence', exp);
        this.vOS('revenue', exp);
        this.vOS('category', exp);
        this.vRS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOA('programCode', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('factor', exp);
        this.vOS('net', exp);
        this.vOA('udi', exp);
        this.vOA('noteNumber', exp);
        this.vOA('adjudication', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitItemDetailSubDetail';
/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item.detail';
        }
        this.vRS('sequence', exp);
        this.vOS('revenue', exp);
        this.vOS('category', exp);
        this.vRS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOA('programCode', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('factor', exp);
        this.vOS('net', exp);
        this.vOA('udi', exp);
        this.vOA('noteNumber', exp);
        this.vOA('adjudication', exp);
        this.vOA('subDetail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemDetail._fts_dataType = 'ExplanationOfBenefitItemDetail';
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['careTeamSequence']) {
            this.careTeamSequence = source.careTeamSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.careTeamSequence = [];
        }
        if (source['_careTeamSequence']) {
            source._careTeamSequence.forEach((x, i) => {
                if (this.careTeamSequence.length >= i) {
                    if (x) {
                        this.careTeamSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.careTeamSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['diagnosisSequence']) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.diagnosisSequence = [];
        }
        if (source['_diagnosisSequence']) {
            source._diagnosisSequence.forEach((x, i) => {
                if (this.diagnosisSequence.length >= i) {
                    if (x) {
                        this.diagnosisSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.diagnosisSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['procedureSequence']) {
            this.procedureSequence = source.procedureSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.procedureSequence = [];
        }
        if (source['_procedureSequence']) {
            source._procedureSequence.forEach((x, i) => {
                if (this.procedureSequence.length >= i) {
                    if (x) {
                        this.procedureSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.procedureSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['informationSequence']) {
            this.informationSequence = source.informationSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.informationSequence = [];
        }
        if (source['_informationSequence']) {
            source._informationSequence.forEach((x, i) => {
                if (this.informationSequence.length >= i) {
                    if (x) {
                        this.informationSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.informationSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subSite = [];
        }
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        else {
            this.encounter = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.item';
        }
        this.vRS('sequence', exp);
        this.vOA('careTeamSequence', exp);
        this.vOA('diagnosisSequence', exp);
        this.vOA('procedureSequence', exp);
        this.vOA('informationSequence', exp);
        this.vOS('revenue', exp);
        this.vOS('category', exp);
        this.vRS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOA('programCode', exp);
        this.vOS('serviced', exp);
        this.vOS('location', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('factor', exp);
        this.vOS('net', exp);
        this.vOA('udi', exp);
        this.vOS('bodySite', exp);
        this.vOA('subSite', exp);
        this.vOA('encounter', exp);
        this.vOA('noteNumber', exp);
        this.vOA('adjudication', exp);
        this.vOA('detail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItem._fts_dataType = 'ExplanationOfBenefitItem';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.serviced[x]
 */
ExplanationOfBenefitItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.location[x]
 */
ExplanationOfBenefitItem._fts_locationIsChoice = true;
/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.addItem.detail.subDetail';
        }
        this.vRS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('factor', exp);
        this.vOS('net', exp);
        this.vOA('noteNumber', exp);
        this.vOA('adjudication', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetailSubDetail';
/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.addItem.detail';
        }
        this.vRS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('factor', exp);
        this.vOS('net', exp);
        this.vOA('noteNumber', exp);
        this.vOA('adjudication', exp);
        this.vOA('subDetail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItemDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetail';
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['itemSequence']) {
            this.itemSequence = source.itemSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.itemSequence = [];
        }
        if (source['_itemSequence']) {
            source._itemSequence.forEach((x, i) => {
                if (this.itemSequence.length >= i) {
                    if (x) {
                        this.itemSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.itemSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['detailSequence']) {
            this.detailSequence = source.detailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.detailSequence = [];
        }
        if (source['_detailSequence']) {
            source._detailSequence.forEach((x, i) => {
                if (this.detailSequence.length >= i) {
                    if (x) {
                        this.detailSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.detailSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['subDetailSequence']) {
            this.subDetailSequence = source.subDetailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.subDetailSequence = [];
        }
        if (source['_subDetailSequence']) {
            source._subDetailSequence.forEach((x, i) => {
                if (this.subDetailSequence.length >= i) {
                    if (x) {
                        this.subDetailSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.subDetailSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['provider']) {
            this.provider = source.provider.map((x) => new fhir.Reference(x));
        }
        else {
            this.provider = [];
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subSite = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.addItem';
        }
        this.vOA('itemSequence', exp);
        this.vOA('detailSequence', exp);
        this.vOA('subDetailSequence', exp);
        this.vOA('provider', exp);
        this.vRS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOA('programCode', exp);
        this.vOS('serviced', exp);
        this.vOS('location', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('factor', exp);
        this.vOS('net', exp);
        this.vOS('bodySite', exp);
        this.vOA('subSite', exp);
        this.vOA('noteNumber', exp);
        this.vOA('adjudication', exp);
        this.vOA('detail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItem._fts_dataType = 'ExplanationOfBenefitAddItem';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.serviced[x]
 */
ExplanationOfBenefitAddItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.location[x]
 */
ExplanationOfBenefitAddItem._fts_locationIsChoice = true;
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        else {
            this.amount = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.total';
        }
        this.vRS('category', exp);
        this.vRS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitTotal._fts_dataType = 'ExplanationOfBenefitTotal';
/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['adjustment']) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.payment';
        }
        this.vOS('type', exp);
        this.vOS('adjustment', exp);
        this.vOS('adjustmentReason', exp);
        this.vOS('date', exp);
        this.vOS('amount', exp);
        this.vOS('identifier', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitPayment._fts_dataType = 'ExplanationOfBenefitPayment';
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number']) {
            this.number = new fhir.FhirPositiveInt({ value: source.number });
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirPositiveInt(source._number);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.processNote';
        }
        this.vOS('number', exp);
        this.vOSV('type', exp, 'NoteType', NoteTypeVsValidation, 'r');
        this.vOS('text', exp);
        this.vOS('language', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitProcessNote._fts_dataType = 'ExplanationOfBenefitProcessNote';
/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt']) {
            this.allowed = new fhir.FhirUnsignedInt({ value: source.allowedUnsignedInt });
        }
        else if (source['allowedString']) {
            this.allowed = new fhir.FhirString({ value: source.allowedString });
        }
        else if (source['allowedMoney']) {
            this.allowed = new fhir.Money(source.allowedMoney);
        }
        if (source['used']) {
            this.used = source.used;
        }
        else if (source['usedUnsignedInt']) {
            this.used = new fhir.FhirUnsignedInt({ value: source.usedUnsignedInt });
        }
        else if (source['usedMoney']) {
            this.used = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.benefitBalance.financial';
        }
        this.vRS('type', exp);
        this.vOS('allowed', exp);
        this.vOS('used', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_dataType = 'ExplanationOfBenefitBenefitBalanceFinancial';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.allowed[x]
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_allowedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.used[x]
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_usedIsChoice = true;
/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['excluded']) {
            this.excluded = new fhir.FhirBoolean({ value: source.excluded });
        }
        if (source['_excluded']) {
            if (this.excluded) {
                this.excluded.addExtendedProperties(source._excluded);
            }
            else {
                this.excluded = new fhir.FhirBoolean(source._excluded);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['financial']) {
            this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x));
        }
        else {
            this.financial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit.benefitBalance';
        }
        this.vRS('category', exp);
        this.vOS('excluded', exp);
        this.vOS('name', exp);
        this.vOS('description', exp);
        this.vOS('network', exp);
        this.vOS('unit', exp);
        this.vOS('term', exp);
        this.vOA('financial', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitBenefitBalance._fts_dataType = 'ExplanationOfBenefitBenefitBalance';
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource {
    /**
     * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ExplanationOfBenefit';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['billablePeriod']) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['fundsReserveRequested']) {
            this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x));
        }
        else {
            this.related = [];
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        if (source['payee']) {
            this.payee = new fhir.ExplanationOfBenefitPayee(source.payee);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        else {
            this.outcome = null;
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome);
            }
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition);
            }
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['preAuthRefPeriod']) {
            this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x));
        }
        else {
            this.preAuthRefPeriod = [];
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x));
        }
        else {
            this.careTeam = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['procedure']) {
            this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x));
        }
        else {
            this.procedure = [];
        }
        if (source['precedence']) {
            this.precedence = new fhir.FhirPositiveInt({ value: source.precedence });
        }
        if (source['_precedence']) {
            if (this.precedence) {
                this.precedence.addExtendedProperties(source._precedence);
            }
            else {
                this.precedence = new fhir.FhirPositiveInt(source._precedence);
            }
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x));
        }
        else {
            this.insurance = [];
        }
        if (source['accident']) {
            this.accident = new fhir.ExplanationOfBenefitAccident(source.accident);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x));
        }
        else {
            this.item = [];
        }
        if (source['addItem']) {
            this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x));
        }
        else {
            this.addItem = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['total']) {
            this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x));
        }
        else {
            this.total = [];
        }
        if (source['payment']) {
            this.payment = new fhir.ExplanationOfBenefitPayment(source.payment);
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source['form']) {
            this.form = new fhir.Attachment(source.form);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x));
        }
        else {
            this.processNote = [];
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source['benefitBalance']) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x));
        }
        else {
            this.benefitBalance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExplanationOfBenefit';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'ExplanationofbenefitStatus', ExplanationofbenefitStatusVsValidation, 'r');
        this.vRS('type', exp);
        this.vOS('subType', exp);
        this.vRSV('use', exp, 'ClaimUse', ClaimUseVsValidation, 'r');
        this.vRS('patient', exp);
        this.vOS('billablePeriod', exp);
        this.vRS('created', exp);
        this.vOS('enterer', exp);
        this.vRS('insurer', exp);
        this.vRS('provider', exp);
        this.vOS('priority', exp);
        this.vOS('fundsReserveRequested', exp);
        this.vOS('fundsReserve', exp);
        this.vOA('related', exp);
        this.vOS('prescription', exp);
        this.vOS('originalPrescription', exp);
        this.vOS('payee', exp);
        this.vOS('referral', exp);
        this.vOS('facility', exp);
        this.vOS('claim', exp);
        this.vOS('claimResponse', exp);
        this.vRSV('outcome', exp, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r');
        this.vOS('disposition', exp);
        this.vOA('preAuthRef', exp);
        this.vOA('preAuthRefPeriod', exp);
        this.vOA('careTeam', exp);
        this.vOA('supportingInfo', exp);
        this.vOA('diagnosis', exp);
        this.vOA('procedure', exp);
        this.vOS('precedence', exp);
        this.vRA('insurance', exp);
        this.vOS('accident', exp);
        this.vOA('item', exp);
        this.vOA('addItem', exp);
        this.vOA('adjudication', exp);
        this.vOA('total', exp);
        this.vOS('payment', exp);
        this.vOS('formCode', exp);
        this.vOS('form', exp);
        this.vOA('processNote', exp);
        this.vOS('benefitPeriod', exp);
        this.vOA('benefitBalance', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefit._fts_dataType = 'ExplanationOfBenefit';
//# sourceMappingURL=data:application/json;base64,