// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: VerificationResult
import * as fhir from '../fhir.js';
// @ts-ignore
import { VerificationresultStatusVsValidation } from '../fhirValueSets/VerificationresultStatusVsValidation.js';
/**
 * Information about the primary source(s) involved in validation.
 */
export class VerificationResultPrimarySource extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultPrimarySource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['communicationMethod']) {
            this.communicationMethod = source.communicationMethod.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.communicationMethod = [];
        }
        if (source['validationStatus']) {
            this.validationStatus = new fhir.CodeableConcept(source.validationStatus);
        }
        if (source['validationDate']) {
            this.validationDate = new fhir.FhirDateTime({ value: source.validationDate });
        }
        if (source['_validationDate']) {
            if (this.validationDate) {
                this.validationDate.addExtendedProperties(source._validationDate);
            }
            else {
                this.validationDate = new fhir.FhirDateTime(source._validationDate);
            }
        }
        if (source['canPushUpdates']) {
            this.canPushUpdates = new fhir.CodeableConcept(source.canPushUpdates);
        }
        if (source['pushTypeAvailable']) {
            this.pushTypeAvailable = source.pushTypeAvailable.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.pushTypeAvailable = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VerificationResult.primarySource';
        }
        iss.push(...this.vOS('who', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOA('communicationMethod', exp));
        iss.push(...this.vOS('validationStatus', exp));
        iss.push(...this.vOS('validationDate', exp));
        iss.push(...this.vOS('canPushUpdates', exp));
        iss.push(...this.vOA('pushTypeAvailable', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResultPrimarySource._fts_dataType = 'VerificationResultPrimarySource';
/**
 * Information about the entity attesting to information.
 */
export class VerificationResultAttestation extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultAttestation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source['communicationMethod']) {
            this.communicationMethod = new fhir.CodeableConcept(source.communicationMethod);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['sourceIdentityCertificate']) {
            this.sourceIdentityCertificate = new fhir.FhirString({ value: source.sourceIdentityCertificate });
        }
        if (source['_sourceIdentityCertificate']) {
            if (this.sourceIdentityCertificate) {
                this.sourceIdentityCertificate.addExtendedProperties(source._sourceIdentityCertificate);
            }
            else {
                this.sourceIdentityCertificate = new fhir.FhirString(source._sourceIdentityCertificate);
            }
        }
        if (source['proxyIdentityCertificate']) {
            this.proxyIdentityCertificate = new fhir.FhirString({ value: source.proxyIdentityCertificate });
        }
        if (source['_proxyIdentityCertificate']) {
            if (this.proxyIdentityCertificate) {
                this.proxyIdentityCertificate.addExtendedProperties(source._proxyIdentityCertificate);
            }
            else {
                this.proxyIdentityCertificate = new fhir.FhirString(source._proxyIdentityCertificate);
            }
        }
        if (source['proxySignature']) {
            this.proxySignature = new fhir.Signature(source.proxySignature);
        }
        if (source['sourceSignature']) {
            this.sourceSignature = new fhir.Signature(source.sourceSignature);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VerificationResult.attestation';
        }
        iss.push(...this.vOS('who', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        iss.push(...this.vOS('communicationMethod', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('sourceIdentityCertificate', exp));
        iss.push(...this.vOS('proxyIdentityCertificate', exp));
        iss.push(...this.vOS('proxySignature', exp));
        iss.push(...this.vOS('sourceSignature', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResultAttestation._fts_dataType = 'VerificationResultAttestation';
/**
 * Information about the entity validating information.
 */
export class VerificationResultValidator extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultValidator - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        else {
            this.organization = null;
        }
        if (source['identityCertificate']) {
            this.identityCertificate = new fhir.FhirString({ value: source.identityCertificate });
        }
        if (source['_identityCertificate']) {
            if (this.identityCertificate) {
                this.identityCertificate.addExtendedProperties(source._identityCertificate);
            }
            else {
                this.identityCertificate = new fhir.FhirString(source._identityCertificate);
            }
        }
        if (source['attestationSignature']) {
            this.attestationSignature = new fhir.Signature(source.attestationSignature);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VerificationResult.validator';
        }
        iss.push(...this.vRS('organization', exp));
        iss.push(...this.vOS('identityCertificate', exp));
        iss.push(...this.vOS('attestationSignature', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResultValidator._fts_dataType = 'VerificationResultValidator';
/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export class VerificationResult extends fhir.DomainResource {
    /**
     * Default constructor for VerificationResult - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VerificationResult';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = [];
        }
        if (source['targetLocation']) {
            this.targetLocation = source.targetLocation.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.targetLocation = [];
        }
        if (source['_targetLocation']) {
            source._targetLocation.forEach((x, i) => {
                if (this.targetLocation.length >= i) {
                    if (x) {
                        this.targetLocation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.targetLocation.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['need']) {
            this.need = new fhir.CodeableConcept(source.need);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate);
            }
        }
        if (source['validationType']) {
            this.validationType = new fhir.CodeableConcept(source.validationType);
        }
        if (source['validationProcess']) {
            this.validationProcess = source.validationProcess.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.validationProcess = [];
        }
        if (source['frequency']) {
            this.frequency = new fhir.Timing(source.frequency);
        }
        if (source['lastPerformed']) {
            this.lastPerformed = new fhir.FhirDateTime({ value: source.lastPerformed });
        }
        if (source['_lastPerformed']) {
            if (this.lastPerformed) {
                this.lastPerformed.addExtendedProperties(source._lastPerformed);
            }
            else {
                this.lastPerformed = new fhir.FhirDateTime(source._lastPerformed);
            }
        }
        if (source['nextScheduled']) {
            this.nextScheduled = new fhir.FhirDate({ value: source.nextScheduled });
        }
        if (source['_nextScheduled']) {
            if (this.nextScheduled) {
                this.nextScheduled.addExtendedProperties(source._nextScheduled);
            }
            else {
                this.nextScheduled = new fhir.FhirDate(source._nextScheduled);
            }
        }
        if (source['failureAction']) {
            this.failureAction = new fhir.CodeableConcept(source.failureAction);
        }
        if (source['primarySource']) {
            this.primarySource = source.primarySource.map((x) => new fhir.VerificationResultPrimarySource(x));
        }
        else {
            this.primarySource = [];
        }
        if (source['attestation']) {
            this.attestation = new fhir.VerificationResultAttestation(source.attestation);
        }
        if (source['validator']) {
            this.validator = source.validator.map((x) => new fhir.VerificationResultValidator(x));
        }
        else {
            this.validator = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VerificationResult';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('target', exp));
        iss.push(...this.vOA('targetLocation', exp));
        iss.push(...this.vOS('need', exp));
        iss.push(...this.vRSV('status', exp, 'VerificationresultStatus', VerificationresultStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusDate', exp));
        iss.push(...this.vOS('validationType', exp));
        iss.push(...this.vOA('validationProcess', exp));
        iss.push(...this.vOS('frequency', exp));
        iss.push(...this.vOS('lastPerformed', exp));
        iss.push(...this.vOS('nextScheduled', exp));
        iss.push(...this.vOS('failureAction', exp));
        iss.push(...this.vOA('primarySource', exp));
        iss.push(...this.vOS('attestation', exp));
        iss.push(...this.vOA('validator', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResult._fts_dataType = 'VerificationResult';
//# sourceMappingURL=data:application/json;base64,