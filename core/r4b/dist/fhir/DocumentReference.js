// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentReference
import * as fhir from '../fhir.js';
// @ts-ignore
import { DocumentRelationshipTypeVsValidation } from '../fhirValueSets/DocumentRelationshipTypeVsValidation.js';
// @ts-ignore
import { DocumentReferenceStatusVsValidation } from '../fhirValueSets/DocumentReferenceStatusVsValidation.js';
// @ts-ignore
import { CompositionStatusVsValidation } from '../fhirValueSets/CompositionStatusVsValidation.js';
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export class DocumentReferenceRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.relatesTo';
        }
        this.vRSV('code', exp, 'DocumentRelationshipType', DocumentRelationshipTypeVsValidation, 'r');
        this.vRS('target', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceRelatesTo._fts_dataType = 'DocumentReferenceRelatesTo';
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
export class DocumentReferenceContent extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
        else {
            this.attachment = null;
        }
        if (source['format']) {
            this.format = new fhir.Coding(source.format);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.content';
        }
        this.vRS('attachment', exp);
        this.vOS('format', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContent._fts_dataType = 'DocumentReferenceContent';
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
export class DocumentReferenceContext extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        else {
            this.encounter = [];
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.event = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['facilityType']) {
            this.facilityType = new fhir.CodeableConcept(source.facilityType);
        }
        if (source['practiceSetting']) {
            this.practiceSetting = new fhir.CodeableConcept(source.practiceSetting);
        }
        if (source['sourcePatientInfo']) {
            this.sourcePatientInfo = new fhir.Reference(source.sourcePatientInfo);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.Reference(x));
        }
        else {
            this.related = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.context';
        }
        this.vOA('encounter', exp);
        this.vOA('event', exp);
        this.vOS('period', exp);
        this.vOS('facilityType', exp);
        this.vOS('practiceSetting', exp);
        this.vOS('sourcePatientInfo', exp);
        this.vOA('related', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContext._fts_dataType = 'DocumentReferenceContext';
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
export class DocumentReference extends fhir.DomainResource {
    /**
     * Default constructor for DocumentReference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DocumentReference';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['docStatus']) {
            this.docStatus = new fhir.FhirCode({ value: source.docStatus });
        }
        if (source['_docStatus']) {
            if (this.docStatus) {
                this.docStatus.addExtendedProperties(source._docStatus);
            }
            else {
                this.docStatus = new fhir.FhirCode(source._docStatus);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['date']) {
            this.date = new fhir.FhirInstant({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirInstant(source._date);
            }
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['authenticator']) {
            this.authenticator = new fhir.Reference(source.authenticator);
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.DocumentReferenceRelatesTo(x));
        }
        else {
            this.relatesTo = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.DocumentReferenceContent(x));
        }
        else {
            this.content = [];
        }
        if (source['context']) {
            this.context = new fhir.DocumentReferenceContext(source.context);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference';
        }
        this.vRS('resourceType', exp);
        this.vOS('masterIdentifier', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'DocumentReferenceStatus', DocumentReferenceStatusVsValidation, 'r');
        this.vOSV('docStatus', exp, 'CompositionStatus', CompositionStatusVsValidation, 'r');
        this.vOS('type', exp);
        this.vOA('category', exp);
        this.vOS('subject', exp);
        this.vOS('date', exp);
        this.vOA('author', exp);
        this.vOS('authenticator', exp);
        this.vOS('custodian', exp);
        this.vOA('relatesTo', exp);
        this.vOS('description', exp);
        this.vOA('securityLabel', exp);
        this.vRA('content', exp);
        this.vOS('context', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReference._fts_dataType = 'DocumentReference';
//# sourceMappingURL=data:application/json;base64,