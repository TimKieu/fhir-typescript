// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: MolecularSequence
import * as fhir from '../fhir.js';
// @ts-ignore
import { OrientationTypeVsValidation } from '../fhirValueSets/OrientationTypeVsValidation.js';
// @ts-ignore
import { StrandTypeVsValidation } from '../fhirValueSets/StrandTypeVsValidation.js';
// @ts-ignore
import { QualityTypeVsValidation } from '../fhirValueSets/QualityTypeVsValidation.js';
// @ts-ignore
import { RepositoryTypeVsValidation } from '../fhirValueSets/RepositoryTypeVsValidation.js';
// @ts-ignore
import { SequenceTypeVsValidation } from '../fhirValueSets/SequenceTypeVsValidation.js';
/**
 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
 */
export class MolecularSequenceReferenceSeq extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceReferenceSeq - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['chromosome']) {
            this.chromosome = new fhir.CodeableConcept(source.chromosome);
        }
        if (source['genomeBuild']) {
            this.genomeBuild = new fhir.FhirString({ value: source.genomeBuild });
        }
        if (source['_genomeBuild']) {
            if (this.genomeBuild) {
                this.genomeBuild.addExtendedProperties(source._genomeBuild);
            }
            else {
                this.genomeBuild = new fhir.FhirString(source._genomeBuild);
            }
        }
        if (source['orientation']) {
            this.orientation = new fhir.FhirCode({ value: source.orientation });
        }
        if (source['_orientation']) {
            if (this.orientation) {
                this.orientation.addExtendedProperties(source._orientation);
            }
            else {
                this.orientation = new fhir.FhirCode(source._orientation);
            }
        }
        if (source['referenceSeqId']) {
            this.referenceSeqId = new fhir.CodeableConcept(source.referenceSeqId);
        }
        if (source['referenceSeqPointer']) {
            this.referenceSeqPointer = new fhir.Reference(source.referenceSeqPointer);
        }
        if (source['referenceSeqString']) {
            this.referenceSeqString = new fhir.FhirString({ value: source.referenceSeqString });
        }
        if (source['_referenceSeqString']) {
            if (this.referenceSeqString) {
                this.referenceSeqString.addExtendedProperties(source._referenceSeqString);
            }
            else {
                this.referenceSeqString = new fhir.FhirString(source._referenceSeqString);
            }
        }
        if (source['strand']) {
            this.strand = new fhir.FhirCode({ value: source.strand });
        }
        if (source['_strand']) {
            if (this.strand) {
                this.strand.addExtendedProperties(source._strand);
            }
            else {
                this.strand = new fhir.FhirCode(source._strand);
            }
        }
        if (source['windowStart']) {
            this.windowStart = new fhir.FhirInteger({ value: source.windowStart });
        }
        if (source['_windowStart']) {
            if (this.windowStart) {
                this.windowStart.addExtendedProperties(source._windowStart);
            }
            else {
                this.windowStart = new fhir.FhirInteger(source._windowStart);
            }
        }
        if (source['windowEnd']) {
            this.windowEnd = new fhir.FhirInteger({ value: source.windowEnd });
        }
        if (source['_windowEnd']) {
            if (this.windowEnd) {
                this.windowEnd.addExtendedProperties(source._windowEnd);
            }
            else {
                this.windowEnd = new fhir.FhirInteger(source._windowEnd);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.referenceSeq';
        }
        iss.push(...this.vOS('chromosome', exp));
        iss.push(...this.vOS('genomeBuild', exp));
        iss.push(...this.vOSV('orientation', exp, 'OrientationType', OrientationTypeVsValidation, 'r'));
        iss.push(...this.vOS('referenceSeqId', exp));
        iss.push(...this.vOS('referenceSeqPointer', exp));
        iss.push(...this.vOS('referenceSeqString', exp));
        iss.push(...this.vOSV('strand', exp, 'StrandType', StrandTypeVsValidation, 'r'));
        iss.push(...this.vOS('windowStart', exp));
        iss.push(...this.vOS('windowEnd', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceReferenceSeq._fts_dataType = 'MolecularSequenceReferenceSeq';
/**
 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
 */
export class MolecularSequenceVariant extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceVariant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInteger(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInteger(source._end);
            }
        }
        if (source['observedAllele']) {
            this.observedAllele = new fhir.FhirString({ value: source.observedAllele });
        }
        if (source['_observedAllele']) {
            if (this.observedAllele) {
                this.observedAllele.addExtendedProperties(source._observedAllele);
            }
            else {
                this.observedAllele = new fhir.FhirString(source._observedAllele);
            }
        }
        if (source['referenceAllele']) {
            this.referenceAllele = new fhir.FhirString({ value: source.referenceAllele });
        }
        if (source['_referenceAllele']) {
            if (this.referenceAllele) {
                this.referenceAllele.addExtendedProperties(source._referenceAllele);
            }
            else {
                this.referenceAllele = new fhir.FhirString(source._referenceAllele);
            }
        }
        if (source['cigar']) {
            this.cigar = new fhir.FhirString({ value: source.cigar });
        }
        if (source['_cigar']) {
            if (this.cigar) {
                this.cigar.addExtendedProperties(source._cigar);
            }
            else {
                this.cigar = new fhir.FhirString(source._cigar);
            }
        }
        if (source['variantPointer']) {
            this.variantPointer = new fhir.Reference(source.variantPointer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.variant';
        }
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('observedAllele', exp));
        iss.push(...this.vOS('referenceAllele', exp));
        iss.push(...this.vOS('cigar', exp));
        iss.push(...this.vOS('variantPointer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceVariant._fts_dataType = 'MolecularSequenceVariant';
/**
 * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
 */
export class MolecularSequenceQualityRoc extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceQualityRoc - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['score']) {
            this.score = source.score.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.score = [];
        }
        if (source['_score']) {
            source._score.forEach((x, i) => {
                if (this.score.length >= i) {
                    if (x) {
                        this.score[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.score.push(new fhir.FhirInteger(x));
                    }
                }
            });
        }
        if (source['numTP']) {
            this.numTP = source.numTP.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.numTP = [];
        }
        if (source['_numTP']) {
            source._numTP.forEach((x, i) => {
                if (this.numTP.length >= i) {
                    if (x) {
                        this.numTP[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.numTP.push(new fhir.FhirInteger(x));
                    }
                }
            });
        }
        if (source['numFP']) {
            this.numFP = source.numFP.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.numFP = [];
        }
        if (source['_numFP']) {
            source._numFP.forEach((x, i) => {
                if (this.numFP.length >= i) {
                    if (x) {
                        this.numFP[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.numFP.push(new fhir.FhirInteger(x));
                    }
                }
            });
        }
        if (source['numFN']) {
            this.numFN = source.numFN.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.numFN = [];
        }
        if (source['_numFN']) {
            source._numFN.forEach((x, i) => {
                if (this.numFN.length >= i) {
                    if (x) {
                        this.numFN[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.numFN.push(new fhir.FhirInteger(x));
                    }
                }
            });
        }
        if (source['precision']) {
            this.precision = source.precision.map((x) => new fhir.FhirDecimal({ value: x }));
        }
        else {
            this.precision = [];
        }
        if (source['_precision']) {
            source._precision.forEach((x, i) => {
                if (this.precision.length >= i) {
                    if (x) {
                        this.precision[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.precision.push(new fhir.FhirDecimal(x));
                    }
                }
            });
        }
        if (source['sensitivity']) {
            this.sensitivity = source.sensitivity.map((x) => new fhir.FhirDecimal({ value: x }));
        }
        else {
            this.sensitivity = [];
        }
        if (source['_sensitivity']) {
            source._sensitivity.forEach((x, i) => {
                if (this.sensitivity.length >= i) {
                    if (x) {
                        this.sensitivity[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.sensitivity.push(new fhir.FhirDecimal(x));
                    }
                }
            });
        }
        if (source['fMeasure']) {
            this.fMeasure = source.fMeasure.map((x) => new fhir.FhirDecimal({ value: x }));
        }
        else {
            this.fMeasure = [];
        }
        if (source['_fMeasure']) {
            source._fMeasure.forEach((x, i) => {
                if (this.fMeasure.length >= i) {
                    if (x) {
                        this.fMeasure[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.fMeasure.push(new fhir.FhirDecimal(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.quality.roc';
        }
        iss.push(...this.vOA('score', exp));
        iss.push(...this.vOA('numTP', exp));
        iss.push(...this.vOA('numFP', exp));
        iss.push(...this.vOA('numFN', exp));
        iss.push(...this.vOA('precision', exp));
        iss.push(...this.vOA('sensitivity', exp));
        iss.push(...this.vOA('fMeasure', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceQualityRoc._fts_dataType = 'MolecularSequenceQualityRoc';
/**
 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
 */
export class MolecularSequenceQuality extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceQuality - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['standardSequence']) {
            this.standardSequence = new fhir.CodeableConcept(source.standardSequence);
        }
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInteger(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInteger(source._end);
            }
        }
        if (source['score']) {
            this.score = new fhir.Quantity(source.score);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['truthTP']) {
            this.truthTP = new fhir.FhirDecimal({ value: source.truthTP });
        }
        if (source['_truthTP']) {
            if (this.truthTP) {
                this.truthTP.addExtendedProperties(source._truthTP);
            }
            else {
                this.truthTP = new fhir.FhirDecimal(source._truthTP);
            }
        }
        if (source['queryTP']) {
            this.queryTP = new fhir.FhirDecimal({ value: source.queryTP });
        }
        if (source['_queryTP']) {
            if (this.queryTP) {
                this.queryTP.addExtendedProperties(source._queryTP);
            }
            else {
                this.queryTP = new fhir.FhirDecimal(source._queryTP);
            }
        }
        if (source['truthFN']) {
            this.truthFN = new fhir.FhirDecimal({ value: source.truthFN });
        }
        if (source['_truthFN']) {
            if (this.truthFN) {
                this.truthFN.addExtendedProperties(source._truthFN);
            }
            else {
                this.truthFN = new fhir.FhirDecimal(source._truthFN);
            }
        }
        if (source['queryFP']) {
            this.queryFP = new fhir.FhirDecimal({ value: source.queryFP });
        }
        if (source['_queryFP']) {
            if (this.queryFP) {
                this.queryFP.addExtendedProperties(source._queryFP);
            }
            else {
                this.queryFP = new fhir.FhirDecimal(source._queryFP);
            }
        }
        if (source['gtFP']) {
            this.gtFP = new fhir.FhirDecimal({ value: source.gtFP });
        }
        if (source['_gtFP']) {
            if (this.gtFP) {
                this.gtFP.addExtendedProperties(source._gtFP);
            }
            else {
                this.gtFP = new fhir.FhirDecimal(source._gtFP);
            }
        }
        if (source['precision']) {
            this.precision = new fhir.FhirDecimal({ value: source.precision });
        }
        if (source['_precision']) {
            if (this.precision) {
                this.precision.addExtendedProperties(source._precision);
            }
            else {
                this.precision = new fhir.FhirDecimal(source._precision);
            }
        }
        if (source['recall']) {
            this.recall = new fhir.FhirDecimal({ value: source.recall });
        }
        if (source['_recall']) {
            if (this.recall) {
                this.recall.addExtendedProperties(source._recall);
            }
            else {
                this.recall = new fhir.FhirDecimal(source._recall);
            }
        }
        if (source['fScore']) {
            this.fScore = new fhir.FhirDecimal({ value: source.fScore });
        }
        if (source['_fScore']) {
            if (this.fScore) {
                this.fScore.addExtendedProperties(source._fScore);
            }
            else {
                this.fScore = new fhir.FhirDecimal(source._fScore);
            }
        }
        if (source['roc']) {
            this.roc = new fhir.MolecularSequenceQualityRoc(source.roc);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.quality';
        }
        iss.push(...this.vRSV('type', exp, 'QualityType', QualityTypeVsValidation, 'r'));
        iss.push(...this.vOS('standardSequence', exp));
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('score', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('truthTP', exp));
        iss.push(...this.vOS('queryTP', exp));
        iss.push(...this.vOS('truthFN', exp));
        iss.push(...this.vOS('queryFP', exp));
        iss.push(...this.vOS('gtFP', exp));
        iss.push(...this.vOS('precision', exp));
        iss.push(...this.vOS('recall', exp));
        iss.push(...this.vOS('fScore', exp));
        iss.push(...this.vOS('roc', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceQuality._fts_dataType = 'MolecularSequenceQuality';
/**
 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
 */
export class MolecularSequenceRepository extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceRepository - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['datasetId']) {
            this.datasetId = new fhir.FhirString({ value: source.datasetId });
        }
        if (source['_datasetId']) {
            if (this.datasetId) {
                this.datasetId.addExtendedProperties(source._datasetId);
            }
            else {
                this.datasetId = new fhir.FhirString(source._datasetId);
            }
        }
        if (source['variantsetId']) {
            this.variantsetId = new fhir.FhirString({ value: source.variantsetId });
        }
        if (source['_variantsetId']) {
            if (this.variantsetId) {
                this.variantsetId.addExtendedProperties(source._variantsetId);
            }
            else {
                this.variantsetId = new fhir.FhirString(source._variantsetId);
            }
        }
        if (source['readsetId']) {
            this.readsetId = new fhir.FhirString({ value: source.readsetId });
        }
        if (source['_readsetId']) {
            if (this.readsetId) {
                this.readsetId.addExtendedProperties(source._readsetId);
            }
            else {
                this.readsetId = new fhir.FhirString(source._readsetId);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.repository';
        }
        iss.push(...this.vRSV('type', exp, 'RepositoryType', RepositoryTypeVsValidation, 'r'));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('datasetId', exp));
        iss.push(...this.vOS('variantsetId', exp));
        iss.push(...this.vOS('readsetId', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceRepository._fts_dataType = 'MolecularSequenceRepository';
/**
 * Structural variant outer.
 */
export class MolecularSequenceStructureVariantOuter extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariantOuter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInteger(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInteger(source._end);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.structureVariant.outer';
        }
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceStructureVariantOuter._fts_dataType = 'MolecularSequenceStructureVariantOuter';
/**
 * Structural variant inner.
 */
export class MolecularSequenceStructureVariantInner extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariantInner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInteger(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInteger(source._end);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.structureVariant.inner';
        }
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceStructureVariantInner._fts_dataType = 'MolecularSequenceStructureVariantInner';
/**
 * Information about chromosome structure variation.
 */
export class MolecularSequenceStructureVariant extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['variantType']) {
            this.variantType = new fhir.CodeableConcept(source.variantType);
        }
        if (source['exact']) {
            this.exact = new fhir.FhirBoolean({ value: source.exact });
        }
        if (source['_exact']) {
            if (this.exact) {
                this.exact.addExtendedProperties(source._exact);
            }
            else {
                this.exact = new fhir.FhirBoolean(source._exact);
            }
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['_length']) {
            if (this.length) {
                this.length.addExtendedProperties(source._length);
            }
            else {
                this.length = new fhir.FhirInteger(source._length);
            }
        }
        if (source['outer']) {
            this.outer = new fhir.MolecularSequenceStructureVariantOuter(source.outer);
        }
        if (source['inner']) {
            this.inner = new fhir.MolecularSequenceStructureVariantInner(source.inner);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence.structureVariant';
        }
        iss.push(...this.vOS('variantType', exp));
        iss.push(...this.vOS('exact', exp));
        iss.push(...this.vOS('length', exp));
        iss.push(...this.vOS('outer', exp));
        iss.push(...this.vOS('inner', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceStructureVariant._fts_dataType = 'MolecularSequenceStructureVariant';
/**
 * Raw data describing a biological sequence.
 */
export class MolecularSequence extends fhir.DomainResource {
    /**
     * Default constructor for MolecularSequence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MolecularSequence';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['coordinateSystem']) {
            this.coordinateSystem = new fhir.FhirInteger({ value: source.coordinateSystem });
        }
        else {
            this.coordinateSystem = null;
        }
        if (source['_coordinateSystem']) {
            if (this.coordinateSystem) {
                this.coordinateSystem.addExtendedProperties(source._coordinateSystem);
            }
            else {
                this.coordinateSystem = new fhir.FhirInteger(source._coordinateSystem);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['specimen']) {
            this.specimen = new fhir.Reference(source.specimen);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['referenceSeq']) {
            this.referenceSeq = new fhir.MolecularSequenceReferenceSeq(source.referenceSeq);
        }
        if (source['variant']) {
            this.variant = source.variant.map((x) => new fhir.MolecularSequenceVariant(x));
        }
        else {
            this.variant = [];
        }
        if (source['observedSeq']) {
            this.observedSeq = new fhir.FhirString({ value: source.observedSeq });
        }
        if (source['_observedSeq']) {
            if (this.observedSeq) {
                this.observedSeq.addExtendedProperties(source._observedSeq);
            }
            else {
                this.observedSeq = new fhir.FhirString(source._observedSeq);
            }
        }
        if (source['quality']) {
            this.quality = source.quality.map((x) => new fhir.MolecularSequenceQuality(x));
        }
        else {
            this.quality = [];
        }
        if (source['readCoverage']) {
            this.readCoverage = new fhir.FhirInteger({ value: source.readCoverage });
        }
        if (source['_readCoverage']) {
            if (this.readCoverage) {
                this.readCoverage.addExtendedProperties(source._readCoverage);
            }
            else {
                this.readCoverage = new fhir.FhirInteger(source._readCoverage);
            }
        }
        if (source['repository']) {
            this.repository = source.repository.map((x) => new fhir.MolecularSequenceRepository(x));
        }
        else {
            this.repository = [];
        }
        if (source['pointer']) {
            this.pointer = source.pointer.map((x) => new fhir.Reference(x));
        }
        else {
            this.pointer = [];
        }
        if (source['structureVariant']) {
            this.structureVariant = source.structureVariant.map((x) => new fhir.MolecularSequenceStructureVariant(x));
        }
        else {
            this.structureVariant = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MolecularSequence';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('type', exp, 'SequenceType', SequenceTypeVsValidation, 'r'));
        iss.push(...this.vRS('coordinateSystem', exp));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('specimen', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('referenceSeq', exp));
        iss.push(...this.vOA('variant', exp));
        iss.push(...this.vOS('observedSeq', exp));
        iss.push(...this.vOA('quality', exp));
        iss.push(...this.vOS('readCoverage', exp));
        iss.push(...this.vOA('repository', exp));
        iss.push(...this.vOA('pointer', exp));
        iss.push(...this.vOA('structureVariant', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequence._fts_dataType = 'MolecularSequence';
//# sourceMappingURL=data:application/json;base64,