// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchSubject
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResearchSubjectStatusVsValidation } from '../fhirValueSets/ResearchSubjectStatusVsValidation.js';
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource {
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchSubject';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['study']) {
            this.study = new fhir.Reference(source.study);
        }
        else {
            this.study = null;
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
        else {
            this.individual = null;
        }
        if (source['assignedArm']) {
            this.assignedArm = new fhir.FhirString({ value: source.assignedArm });
        }
        if (source['_assignedArm']) {
            if (this.assignedArm) {
                this.assignedArm.addExtendedProperties(source._assignedArm);
            }
            else {
                this.assignedArm = new fhir.FhirString(source._assignedArm);
            }
        }
        if (source['actualArm']) {
            this.actualArm = new fhir.FhirString({ value: source.actualArm });
        }
        if (source['_actualArm']) {
            if (this.actualArm) {
                this.actualArm.addExtendedProperties(source._actualArm);
            }
            else {
                this.actualArm = new fhir.FhirString(source._actualArm);
            }
        }
        if (source['consent']) {
            this.consent = new fhir.Reference(source.consent);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchSubject';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ResearchSubjectStatus', ResearchSubjectStatusVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRS('study', exp));
        iss.push(...this.vRS('individual', exp));
        iss.push(...this.vOS('assignedArm', exp));
        iss.push(...this.vOS('actualArm', exp));
        iss.push(...this.vOS('consent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchSubject._fts_dataType = 'ResearchSubject';
//# sourceMappingURL=data:application/json;base64,