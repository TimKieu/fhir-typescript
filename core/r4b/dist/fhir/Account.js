// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Account
import * as fhir from '../fhir.js';
// @ts-ignore
import { AccountStatusVsValidation } from '../fhirValueSets/AccountStatusVsValidation.js';
/**
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
export class AccountCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for AccountCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage, options);
        }
        else {
            this.coverage = null;
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirPositiveInt({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirPositiveInt(source._priority, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Account.coverage';
        }
        iss.push(...this.vRS('coverage', exp));
        iss.push(...this.vOS('priority', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AccountCoverage._fts_dataType = 'AccountCoverage';
/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
export class AccountGuarantor extends fhir.BackboneElement {
    /**
     * Default constructor for AccountGuarantor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['party']) {
            this.party = new fhir.Reference(source.party, options);
        }
        else {
            this.party = null;
        }
        if (source['onHold'] !== undefined) {
            this.onHold = new fhir.FhirBoolean({ value: source.onHold }, options);
        }
        if (source['_onHold']) {
            if (this.onHold) {
                this.onHold.addExtendedProperties(source._onHold);
            }
            else {
                this.onHold = new fhir.FhirBoolean(source._onHold, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Account.guarantor';
        }
        iss.push(...this.vRS('party', exp));
        iss.push(...this.vOS('onHold', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AccountGuarantor._fts_dataType = 'AccountGuarantor';
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export class Account extends fhir.DomainResource {
    /**
     * Default constructor for Account - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Account';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.subject = [];
        }
        if (source['servicePeriod']) {
            this.servicePeriod = new fhir.Period(source.servicePeriod, options);
        }
        if (source['coverage']) {
            this.coverage = source.coverage.map((x) => new fhir.AccountCoverage(x, options));
        }
        else {
            this.coverage = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['guarantor']) {
            this.guarantor = source.guarantor.map((x) => new fhir.AccountGuarantor(x, options));
        }
        else {
            this.guarantor = [];
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Account';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'AccountStatus', AccountStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('subject', exp));
        iss.push(...this.vOS('servicePeriod', exp));
        iss.push(...this.vOA('coverage', exp));
        iss.push(...this.vOS('owner', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('guarantor', exp));
        iss.push(...this.vOS('partOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Account._fts_dataType = 'Account';
//# sourceMappingURL=data:application/json;base64,