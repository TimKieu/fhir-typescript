// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { EligibilityrequestPurposeVsValidation } from '../fhirValueSets/EligibilityrequestPurposeVsValidation.js';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class CoverageEligibilityRequestSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['information']) {
            this.information = new fhir.Reference(source.information);
        }
        else {
            this.information = null;
        }
        if (source['appliesToAll']) {
            this.appliesToAll = new fhir.FhirBoolean({ value: source.appliesToAll });
        }
        if (source['_appliesToAll']) {
            if (this.appliesToAll) {
                this.appliesToAll.addExtendedProperties(source._appliesToAll);
            }
            else {
                this.appliesToAll = new fhir.FhirBoolean(source._appliesToAll);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.supportingInfo';
        }
        this.vRS('sequence', exp);
        this.vRS('information', exp);
        this.vOS('appliesToAll', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestSupportingInfo._fts_dataType = 'CoverageEligibilityRequestSupportingInfo';
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityRequestInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement });
        }
        if (source['_businessArrangement']) {
            if (this.businessArrangement) {
                this.businessArrangement.addExtendedProperties(source._businessArrangement);
            }
            else {
                this.businessArrangement = new fhir.FhirString(source._businessArrangement);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.insurance';
        }
        this.vOS('focal', exp);
        this.vRS('coverage', exp);
        this.vOS('businessArrangement', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestInsurance._fts_dataType = 'CoverageEligibilityRequestInsurance';
/**
 * Patient diagnosis for which care is sought.
 */
export class CoverageEligibilityRequestItemDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItemDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.item.diagnosis';
        }
        this.vOS('diagnosis', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestItemDiagnosis._fts_dataType = 'CoverageEligibilityRequestItemDiagnosis';
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityRequest.item.diagnosis.diagnosis[x]
 */
CoverageEligibilityRequestItemDiagnosis._fts_diagnosisIsChoice = true;
/**
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export class CoverageEligibilityRequestItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['supportingInfoSequence']) {
            this.supportingInfoSequence = source.supportingInfoSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.supportingInfoSequence = [];
        }
        if (source['_supportingInfoSequence']) {
            source._supportingInfoSequence.forEach((x, i) => {
                if (this.supportingInfoSequence.length >= i) {
                    if (x) {
                        this.supportingInfoSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.supportingInfoSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.CoverageEligibilityRequestItemDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.item';
        }
        this.vOA('supportingInfoSequence', exp);
        this.vOS('category', exp);
        this.vOS('productOrService', exp);
        this.vOA('modifier', exp);
        this.vOS('provider', exp);
        this.vOS('quantity', exp);
        this.vOS('unitPrice', exp);
        this.vOS('facility', exp);
        this.vOA('diagnosis', exp);
        this.vOA('detail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestItem._fts_dataType = 'CoverageEligibilityRequestItem';
/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export class CoverageEligibilityRequest extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CoverageEligibilityRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.purpose = [];
        }
        if (source['_purpose']) {
            source._purpose.forEach((x, i) => {
                if (this.purpose.length >= i) {
                    if (x) {
                        this.purpose[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.purpose.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.CoverageEligibilityRequestSupportingInfo(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityRequestInsurance(x));
        }
        else {
            this.insurance = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityRequestItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r');
        this.vOS('priority', exp);
        this.vRAV('purpose', exp, 'EligibilityrequestPurpose', EligibilityrequestPurposeVsValidation, 'r');
        this.vRS('patient', exp);
        this.vOS('serviced', exp);
        this.vRS('created', exp);
        this.vOS('enterer', exp);
        this.vOS('provider', exp);
        this.vRS('insurer', exp);
        this.vOS('facility', exp);
        this.vOA('supportingInfo', exp);
        this.vOA('insurance', exp);
        this.vOA('item', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequest._fts_dataType = 'CoverageEligibilityRequest';
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityRequest.serviced[x]
 */
CoverageEligibilityRequest._fts_servicedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,