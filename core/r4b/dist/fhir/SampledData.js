// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SampledData
import * as fhir from '../fhir.js';
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export class SampledData extends fhir.FhirElement {
    /**
     * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['origin']) {
            this.origin = new fhir.Quantity(source.origin);
        }
        else {
            this.origin = null;
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        else {
            this.period = null;
        }
        if (source['_period']) {
            if (this.period) {
                this.period.addExtendedProperties(source._period);
            }
            else {
                this.period = new fhir.FhirDecimal(source._period);
            }
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['lowerLimit']) {
            this.lowerLimit = new fhir.FhirDecimal({ value: source.lowerLimit });
        }
        if (source['_lowerLimit']) {
            if (this.lowerLimit) {
                this.lowerLimit.addExtendedProperties(source._lowerLimit);
            }
            else {
                this.lowerLimit = new fhir.FhirDecimal(source._lowerLimit);
            }
        }
        if (source['upperLimit']) {
            this.upperLimit = new fhir.FhirDecimal({ value: source.upperLimit });
        }
        if (source['_upperLimit']) {
            if (this.upperLimit) {
                this.upperLimit.addExtendedProperties(source._upperLimit);
            }
            else {
                this.upperLimit = new fhir.FhirDecimal(source._upperLimit);
            }
        }
        if (source['dimensions']) {
            this.dimensions = new fhir.FhirPositiveInt({ value: source.dimensions });
        }
        else {
            this.dimensions = null;
        }
        if (source['_dimensions']) {
            if (this.dimensions) {
                this.dimensions.addExtendedProperties(source._dimensions);
            }
            else {
                this.dimensions = new fhir.FhirPositiveInt(source._dimensions);
            }
        }
        if (source['data']) {
            this.data = new fhir.FhirString({ value: source.data });
        }
        if (source['_data']) {
            if (this.data) {
                this.data.addExtendedProperties(source._data);
            }
            else {
                this.data = new fhir.FhirString(source._data);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SampledData';
        }
        this.vRS('origin', exp);
        this.vRS('period', exp);
        this.vOS('factor', exp);
        this.vOS('lowerLimit', exp);
        this.vOS('upperLimit', exp);
        this.vRS('dimensions', exp);
        this.vOS('data', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SampledData._fts_dataType = 'SampledData';
//# sourceMappingURL=data:application/json;base64,