// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionProduct
import * as fhir from '../fhir.js';
// @ts-ignore
import { NutritionproductStatusVsValidation } from '../fhirValueSets/NutritionproductStatusVsValidation.js';
/**
 * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
 */
export class NutritionProductNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionProductNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.CodeableReference(source.item);
        }
        if (source['amount']) {
            this.amount = source.amount.map((x) => new fhir.Ratio(x));
        }
        else {
            this.amount = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionProduct.nutrient';
        }
        this.vOS('item', exp);
        this.vOA('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionProductNutrient._fts_dataType = 'NutritionProductNutrient';
/**
 * Ingredients contained in this product.
 */
export class NutritionProductIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.CodeableReference(source.item);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = source.amount.map((x) => new fhir.Ratio(x));
        }
        else {
            this.amount = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionProduct.ingredient';
        }
        this.vRS('item', exp);
        this.vOA('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionProductIngredient._fts_dataType = 'NutritionProductIngredient';
/**
 * Specifies descriptive properties of the nutrition product.
 */
export class NutritionProductProductCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionProductProductCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionProduct.productCharacteristic';
        }
        this.vRS('type', exp);
        this.vRS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionProductProductCharacteristic._fts_dataType = 'NutritionProductProductCharacteristic';
/**
 * Internal flag to properly serialize choice-type element NutritionProduct.productCharacteristic.value[x]
 */
NutritionProductProductCharacteristic._fts_valueIsChoice = true;
/**
 * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
 */
export class NutritionProductInstance extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionProductInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['expiry']) {
            this.expiry = new fhir.FhirDateTime({ value: source.expiry });
        }
        if (source['_expiry']) {
            if (this.expiry) {
                this.expiry.addExtendedProperties(source._expiry);
            }
            else {
                this.expiry = new fhir.FhirDateTime(source._expiry);
            }
        }
        if (source['useBy']) {
            this.useBy = new fhir.FhirDateTime({ value: source.useBy });
        }
        if (source['_useBy']) {
            if (this.useBy) {
                this.useBy.addExtendedProperties(source._useBy);
            }
            else {
                this.useBy = new fhir.FhirDateTime(source._useBy);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionProduct.instance';
        }
        this.vOS('quantity', exp);
        this.vOA('identifier', exp);
        this.vOS('lotNumber', exp);
        this.vOS('expiry', exp);
        this.vOS('useBy', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionProductInstance._fts_dataType = 'NutritionProductInstance';
/**
 * A food or fluid product that is consumed by patients.
 */
export class NutritionProduct extends fhir.DomainResource {
    /**
     * Default constructor for NutritionProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'NutritionProduct';
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['nutrient']) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionProductNutrient(x));
        }
        else {
            this.nutrient = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.NutritionProductIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['knownAllergen']) {
            this.knownAllergen = source.knownAllergen.map((x) => new fhir.CodeableReference(x));
        }
        else {
            this.knownAllergen = [];
        }
        if (source['productCharacteristic']) {
            this.productCharacteristic = source.productCharacteristic.map((x) => new fhir.NutritionProductProductCharacteristic(x));
        }
        else {
            this.productCharacteristic = [];
        }
        if (source['instance']) {
            this.instance = new fhir.NutritionProductInstance(source.instance);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionProduct';
        }
        this.vRS('resourceType', exp);
        this.vRSV('status', exp, 'NutritionproductStatus', NutritionproductStatusVsValidation, 'r');
        this.vOA('category', exp);
        this.vOS('code', exp);
        this.vOA('manufacturer', exp);
        this.vOA('nutrient', exp);
        this.vOA('ingredient', exp);
        this.vOA('knownAllergen', exp);
        this.vOA('productCharacteristic', exp);
        this.vOS('instance', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionProduct._fts_dataType = 'NutritionProduct';
//# sourceMappingURL=data:application/json;base64,