// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Person
import * as fhir from '../fhir.js';
// @ts-ignore
import { IdentityAssuranceLevelVsValidation } from '../fhirValueSets/IdentityAssuranceLevelVsValidation.js';
// @ts-ignore
import { AdministrativeGenderVsValidation } from '../fhirValueSets/AdministrativeGenderVsValidation.js';
/**
 * Link to a resource that concerns the same actual person.
 */
export class PersonLink extends fhir.BackboneElement {
    /**
     * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
        if (source['assurance']) {
            this.assurance = new fhir.FhirCode({ value: source.assurance });
        }
        if (source['_assurance']) {
            if (this.assurance) {
                this.assurance.addExtendedProperties(source._assurance);
            }
            else {
                this.assurance = new fhir.FhirCode(source._assurance);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Person.link';
        }
        iss.push(...this.vRS('target', exp));
        iss.push(...this.vOSV('assurance', exp, 'IdentityAssuranceLevel', IdentityAssuranceLevelVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PersonLink._fts_dataType = 'PersonLink';
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export class Person extends fhir.DomainResource {
    /**
     * Default constructor for Person - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Person';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        else {
            this.name = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['_birthDate']) {
            if (this.birthDate) {
                this.birthDate.addExtendedProperties(source._birthDate);
            }
            else {
                this.birthDate = new fhir.FhirDate(source._birthDate);
            }
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PersonLink(x));
        }
        else {
            this.link = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Person';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('name', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOSV('gender', exp, 'AdministrativeGender', AdministrativeGenderVsValidation, 'r'));
        iss.push(...this.vOS('birthDate', exp));
        iss.push(...this.vOA('address', exp));
        iss.push(...this.vOS('photo', exp));
        iss.push(...this.vOS('managingOrganization', exp));
        iss.push(...this.vOS('active', exp));
        iss.push(...this.vOA('link', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Person._fts_dataType = 'Person';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVyc29uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9QZXJzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsd0JBQXdCO0FBRXhCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUc1RyxhQUFhO0FBQ2IsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFtQnhHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVcsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWFsRDs7T0FFRztJQUNILFlBQVksU0FBaUMsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDdkYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUFFO2FBQ3JFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FBRTtRQUM1QixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFpQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzNILElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxVQUFXLENBQUMsQ0FBQzthQUFFO2lCQUM1RTtnQkFBRSxJQUFJLENB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QUMsQ0FBQyxDQUFDO1FBQ2pHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQW5HRDs7R0FFRztBQUM2QixvQkFBYSxHQUFVLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IFBlcnNvblxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgSWRlbnRpdHlBc3N1cmFuY2VMZXZlbENvZGVzLCAgSWRlbnRpdHlBc3N1cmFuY2VMZXZlbENvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9JZGVudGl0eUFzc3VyYW5jZUxldmVsQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IElkZW50aXR5QXNzdXJhbmNlTGV2ZWxWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0lkZW50aXR5QXNzdXJhbmNlTGV2ZWxWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZXMsICBBZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9BZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBZG1pbmlzdHJhdGl2ZUdlbmRlclZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQWRtaW5pc3RyYXRpdmVHZW5kZXJWc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgUGVyc29uTGluayB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQZXJzb25MaW5rQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlc291cmNlIHRvIHdoaWNoIHRoaXMgYWN0dWFsIHBlcnNvbiBpcyBhc3NvY2lhdGVkLlxyXG4gICAqL1xyXG4gIHRhcmdldDogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogTGV2ZWwgb2YgYXNzdXJhbmNlIHRoYXQgdGhpcyBsaW5rIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdGFyZ2V0IHJlc291cmNlLlxyXG4gICAqL1xyXG4gIGFzc3VyYW5jZT86IGZoaXIuRmhpckNvZGU8SWRlbnRpdHlBc3N1cmFuY2VMZXZlbENvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQZXJzb24ubGluay5hc3N1cmFuY2VcclxuICAgKi9cclxuICBfYXNzdXJhbmNlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIExpbmsgdG8gYSByZXNvdXJjZSB0aGF0IGNvbmNlcm5zIHRoZSBzYW1lIGFjdHVhbCBwZXJzb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGVyc29uTGluayBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1BlcnNvbkxpbmsnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZXNvdXJjZSB0byB3aGljaCB0aGlzIGFjdHVhbCBwZXJzb24gaXMgYXNzb2NpYXRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdGFyZ2V0OiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIExldmVsIG9mIGFzc3VyYW5jZSB0aGF0IHRoaXMgbGluayBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHRhcmdldCByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgYXNzdXJhbmNlPzogZmhpci5GaGlyQ29kZTxJZGVudGl0eUFzc3VyYW5jZUxldmVsQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBQZXJzb25MaW5rIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UGVyc29uTGlua0FyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0YXJnZXQnXSkgeyB0aGlzLnRhcmdldCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UudGFyZ2V0KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudGFyZ2V0ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYXNzdXJhbmNlJ10pIHsgdGhpcy5hc3N1cmFuY2UgPSBuZXcgZmhpci5GaGlyQ29kZTxJZGVudGl0eUFzc3VyYW5jZUxldmVsQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLmFzc3VyYW5jZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfYXNzdXJhbmNlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuYXNzdXJhbmNlKSB7IHRoaXMuYXNzdXJhbmNlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Fzc3VyYW5jZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmFzc3VyYW5jZSA9IG5ldyBmaGlyLkZoaXJDb2RlPElkZW50aXR5QXNzdXJhbmNlTGV2ZWxDb2RlVHlwZT4oc291cmNlLl9hc3N1cmFuY2UgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdQZXJzb24ubGluaycgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3RhcmdldCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ2Fzc3VyYW5jZScsZXhwLCdJZGVudGl0eUFzc3VyYW5jZUxldmVsJyxJZGVudGl0eUFzc3VyYW5jZUxldmVsVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFBlcnNvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQZXJzb25BcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJQZXJzb25cInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllciBmb3IgYSBwZXJzb24gd2l0aGluIGEgcGFydGljdWxhciBzY29wZS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQZXJzb24gbWF5IGhhdmUgbXVsdGlwbGUgbmFtZXMgd2l0aCBkaWZmZXJlbnQgdXNlcyBvciBhcHBsaWNhYmxlIHBlcmlvZHMuXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuSHVtYW5OYW1lQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQZXJzb24gbWF5IGhhdmUgbXVsdGlwbGUgd2F5cyB0byBiZSBjb250YWN0ZWQgd2l0aCBkaWZmZXJlbnQgdXNlcyBvciBhcHBsaWNhYmxlIHBlcmlvZHMuICBNYXkgbmVlZCB0byBoYXZlIG9wdGlvbnMgZm9yIGNvbnRhY3RpbmcgdGhlIHBlcnNvbiB1cmdlbnRseSBhbmQgYWxzbyB0byBoZWxwIHdpdGggaWRlbnRpZmljYXRpb24uXHJcbiAgICovXHJcbiAgdGVsZWNvbT86IGZoaXIuQ29udGFjdFBvaW50QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZ2VuZGVyIG1pZ2h0IG5vdCBtYXRjaCB0aGUgYmlvbG9naWNhbCBzZXggYXMgZGV0ZXJtaW5lZCBieSBnZW5ldGljcywgb3IgdGhlIGluZGl2aWR1YWwncyBwcmVmZXJyZWQgaWRlbnRpZmljYXRpb24uIE5vdGUgdGhhdCBmb3IgYm90aCBodW1hbnMgYW5kIHBhcnRpY3VsYXJseSBhbmltYWxzLCB0aGVyZSBhcmUgb3RoZXIgbGVnaXRpbWF0ZSBwb3NzaWJpbGl0aWVzIHRoYW4gTSBhbmQgRiwgdGhvdWdoIGEgY2xlYXIgbWFqb3JpdHkgb2Ygc3lzdGVtcyBhbmQgY29udGV4dHMgb25seSBzdXBwb3J0IE0gYW5kIEYuXHJcbiAgICovXHJcbiAgZ2VuZGVyPzogZmhpci5GaGlyQ29kZTxBZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQZXJzb24uZ2VuZGVyXHJcbiAgICovXHJcbiAgX2dlbmRlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQXQgbGVhc3QgYW4gZXN0aW1hdGVkIHllYXIgc2hvdWxkIGJlIHByb3ZpZGVkIGFzIGEgZ3Vlc3MgaWYgdGhlIHJlYWwgRE9CIGlzIHVua25vd24uXHJcbiAgICovXHJcbiAgYmlydGhEYXRlPzogZmhpci5GaGlyRGF0ZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQZXJzb24uYmlydGhEYXRlXHJcbiAgICovXHJcbiAgX2JpcnRoRGF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGVyc29uIG1heSBoYXZlIG11bHRpcGxlIGFkZHJlc3NlcyB3aXRoIGRpZmZlcmVudCB1c2VzIG9yIGFwcGxpY2FibGUgcGVyaW9kcy5cclxuICAgKi9cclxuICBhZGRyZXNzPzogZmhpci5BZGRyZXNzQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBpbWFnZSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgYXMgYSB0aHVtYm5haWwgb2YgdGhlIHBlcnNvbiB0byBlbmhhbmNlIHRoZSBpZGVudGlmaWNhdGlvbiBvZiB0aGUgaW5kaXZpZHVhbC5cclxuICAgKi9cclxuICBwaG90bz86IGZoaXIuQXR0YWNobWVudEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmdhbml6YXRpb24gdGhhdCBpcyB0aGUgY3VzdG9kaWFuIG9mIHRoZSBwZXJzb24gcmVjb3JkLlxyXG4gICAqL1xyXG4gIG1hbmFnaW5nT3JnYW5pemF0aW9uPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoaXMgcGVyc29uJ3MgcmVjb3JkIGlzIGluIGFjdGl2ZSB1c2UuXHJcbiAgICovXHJcbiAgYWN0aXZlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUGVyc29uLmFjdGl2ZVxyXG4gICAqL1xyXG4gIF9hY3RpdmU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIExpbmsgdG8gYSByZXNvdXJjZSB0aGF0IGNvbmNlcm5zIHRoZSBzYW1lIGFjdHVhbCBwZXJzb24uXHJcbiAgICovXHJcbiAgbGluaz86IGZoaXIuUGVyc29uTGlua0FyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZW1vZ3JhcGhpY3MgYW5kIGFkbWluaXN0cmF0aXZlIGluZm9ybWF0aW9uIGFib3V0IGEgcGVyc29uIGluZGVwZW5kZW50IG9mIGEgc3BlY2lmaWMgaGVhbHRoLXJlbGF0ZWQgY29udGV4dC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQZXJzb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1BlcnNvbic7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJQZXJzb25cIjtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciBhIHBlcnNvbiB3aXRoaW4gYSBwYXJ0aWN1bGFyIHNjb3BlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyOiBmaGlyLklkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBQZXJzb24gbWF5IGhhdmUgbXVsdGlwbGUgbmFtZXMgd2l0aCBkaWZmZXJlbnQgdXNlcyBvciBhcHBsaWNhYmxlIHBlcmlvZHMuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU6IGZoaXIuSHVtYW5OYW1lW107XHJcbiAgLyoqXHJcbiAgICogUGVyc29uIG1heSBoYXZlIG11bHRpcGxlIHdheXMgdG8gYmUgY29udGFjdGVkIHdpdGggZGlmZmVyZW50IHVzZXMgb3IgYXBwbGljYWJsZSBwZXJpb2RzLiAgTWF5IG5lZWQgdG8gaGF2ZSBvcHRpb25zIGZvciBjb250YWN0aW5nIHRoZSBwZXJzb24gdXJnZW50bHkgYW5kIGFsc28gdG8gaGVscCB3aXRoIGlkZW50aWZpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZWxlY29tOiBmaGlyLkNvbnRhY3RQb2ludFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBnZW5kZXIgbWlnaHQgbm90IG1hdGNoIHRoZSBiaW9sb2dpY2FsIHNleCBhcyBkZXRlcm1pbmVkIGJ5IGdlbmV0aWNzLCBvciB0aGUgaW5kaXZpZHVhbCdzIHByZWZlcnJlZCBpZGVudGlmaWNhdGlvbi4gTm90ZSB0aGF0IGZvciBib3RoIGh1bWFucyBhbmQgcGFydGljdWxhcmx5IGFuaW1hbHMsIHRoZXJlIGFyZSBvdGhlciBsZWdpdGltYXRlIHBvc3NpYmlsaXRpZXMgdGhhbiBNIGFuZCBGLCB0aG91Z2ggYSBjbGVhciBtYWpvcml0eSBvZiBzeXN0ZW1zIGFuZCBjb250ZXh0cyBvbmx5IHN1cHBvcnQgTSBhbmQgRi5cclxuICAgKi9cclxuICBwdWJsaWMgZ2VuZGVyPzogZmhpci5GaGlyQ29kZTxBZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQXQgbGVhc3QgYW4gZXN0aW1hdGVkIHllYXIgc2hvdWxkIGJlIHByb3ZpZGVkIGFzIGEgZ3Vlc3MgaWYgdGhlIHJlYWwgRE9CIGlzIHVua25vd24uXHJcbiAgICovXHJcbiAgcHVibGljIGJpcnRoRGF0ZT86IGZoaXIuRmhpckRhdGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBlcnNvbiBtYXkgaGF2ZSBtdWx0aXBsZSBhZGRyZXNzZXMgd2l0aCBkaWZmZXJlbnQgdXNlcyBvciBhcHBsaWNhYmxlIHBlcmlvZHMuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZHJlc3M6IGZoaXIuQWRkcmVzc1tdO1xyXG4gIC8qKlxyXG4gICAqIEFuIGltYWdlIHRoYXQgY2FuIGJlIGRpc3BsYXllZCBhcyBhIHRodW1ibmFpbCBvZiB0aGUgcGVyc29uIHRvIGVuaGFuY2UgdGhlIGlkZW50aWZpY2F0aW9uIG9mIHRoZSBpbmRpdmlkdWFsLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwaG90bz86IGZoaXIuQXR0YWNobWVudHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG9yZ2FuaXphdGlvbiB0aGF0IGlzIHRoZSBjdXN0b2RpYW4gb2YgdGhlIHBlcnNvbiByZWNvcmQuXHJcbiAgICovXHJcbiAgcHVibGljIG1hbmFnaW5nT3JnYW5pemF0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhpcyBwZXJzb24ncyByZWNvcmQgaXMgaW4gYWN0aXZlIHVzZS5cclxuICAgKi9cclxuICBwdWJsaWMgYWN0aXZlPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGluayB0byBhIHJlc291cmNlIHRoYXQgY29uY2VybnMgdGhlIHNhbWUgYWN0dWFsIHBlcnNvbi5cclxuICAgKi9cclxuICBwdWJsaWMgbGluazogZmhpci5QZXJzb25MaW5rW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgUGVyc29uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UGVyc29uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ1BlcnNvbic7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gc291cmNlLmlkZW50aWZpZXIubWFwKCh4KSA9PiBuZXcgZmhpci5JZGVudGlmaWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaWRlbnRpZmllciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gc291cmNlLm5hbWUubWFwKCh4KSA9PiBuZXcgZmhpci5IdW1hbk5hbWUoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3RlbGVjb20nXSkgeyB0aGlzLnRlbGVjb20gPSBzb3VyY2UudGVsZWNvbS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3RQb2ludCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRlbGVjb20gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZ2VuZGVyJ10pIHsgdGhpcy5nZW5kZXIgPSBuZXcgZmhpci5GaGlyQ29kZTxBZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5nZW5kZXJ9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2dlbmRlciddKSB7XHJcbiAgICAgIGlmICh0aGlzLmdlbmRlcikgeyB0aGlzLmdlbmRlci5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9nZW5kZXIhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5nZW5kZXIgPSBuZXcgZmhpci5GaGlyQ29kZTxBZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGVUeXBlPihzb3VyY2UuX2dlbmRlciBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYmlydGhEYXRlJ10pIHsgdGhpcy5iaXJ0aERhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZSh7dmFsdWU6IHNvdXJjZS5iaXJ0aERhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2JpcnRoRGF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmJpcnRoRGF0ZSkgeyB0aGlzLmJpcnRoRGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9iaXJ0aERhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5iaXJ0aERhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZShzb3VyY2UuX2JpcnRoRGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2FkZHJlc3MnXSkgeyB0aGlzLmFkZHJlc3MgPSBzb3VyY2UuYWRkcmVzcy5tYXAoKHgpID0+IG5ldyBmaGlyLkFkZHJlc3MoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hZGRyZXNzID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3Bob3RvJ10pIHsgdGhpcy5waG90byA9IG5ldyBmaGlyLkF0dGFjaG1lbnQoc291cmNlLnBob3RvKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFuYWdpbmdPcmdhbml6YXRpb24nXSkgeyB0aGlzLm1hbmFnaW5nT3JnYW5pemF0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5tYW5hZ2luZ09yZ2FuaXphdGlvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2FjdGl2ZSddKSB7IHRoaXMuYWN0aXZlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuYWN0aXZlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19hY3RpdmUnXSkge1xyXG4gICAgICBpZiAodGhpcy5hY3RpdmUpIHsgdGhpcy5hY3RpdmUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fYWN0aXZlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuYWN0aXZlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9hY3RpdmUgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydsaW5rJ10pIHsgdGhpcy5saW5rID0gc291cmNlLmxpbmsubWFwKCh4KSA9PiBuZXcgZmhpci5QZXJzb25MaW5rKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubGluayA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnUGVyc29uJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnaWRlbnRpZmllcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbmFtZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgndGVsZWNvbScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ2dlbmRlcicsZXhwLCdBZG1pbmlzdHJhdGl2ZUdlbmRlcicsQWRtaW5pc3RyYXRpdmVHZW5kZXJWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnYmlydGhEYXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdhZGRyZXNzJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwaG90bycsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbWFuYWdpbmdPcmdhbml6YXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2FjdGl2ZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbGluaycsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=