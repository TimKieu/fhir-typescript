// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Goal
import * as fhir from '../fhir.js';
// @ts-ignore
import { GoalStatusVsValidation } from '../fhirValueSets/GoalStatusVsValidation.js';
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export class GoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['measure']) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            this.detail = new fhir.Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            this.detail = new fhir.Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            this.detail = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        else if (source['detailString']) {
            this.detail = new fhir.FhirString({ value: source.detailString });
        }
        else if (source['detailBoolean']) {
            this.detail = new fhir.FhirBoolean({ value: source.detailBoolean });
        }
        else if (source['detailInteger']) {
            this.detail = new fhir.FhirInteger({ value: source.detailInteger });
        }
        else if (source['detailRatio']) {
            this.detail = new fhir.Ratio(source.detailRatio);
        }
        if (source['due']) {
            this.due = source.due;
        }
        else if (source['dueDate']) {
            this.due = new fhir.FhirDate({ value: source.dueDate });
        }
        else if (source['dueDuration']) {
            this.due = new fhir.Duration(source.dueDuration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Goal.target';
        }
        this.vOS('measure', exp);
        this.vOS('detail', exp);
        this.vOS('due', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GoalTarget._fts_dataType = 'GoalTarget';
/**
 * Internal flag to properly serialize choice-type element Goal.target.detail[x]
 */
GoalTarget._fts_detailIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Goal.target.due[x]
 */
GoalTarget._fts_dueIsChoice = true;
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
    /**
     * Default constructor for Goal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Goal';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['lifecycleStatus']) {
            this.lifecycleStatus = new fhir.FhirCode({ value: source.lifecycleStatus });
        }
        else {
            this.lifecycleStatus = null;
        }
        if (source['_lifecycleStatus']) {
            if (this.lifecycleStatus) {
                this.lifecycleStatus.addExtendedProperties(source._lifecycleStatus);
            }
            else {
                this.lifecycleStatus = new fhir.FhirCode(source._lifecycleStatus);
            }
        }
        if (source['achievementStatus']) {
            this.achievementStatus = new fhir.CodeableConcept(source.achievementStatus);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        else {
            this.description = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['start']) {
            this.start = source.start;
        }
        else if (source['startDate']) {
            this.start = new fhir.FhirDate({ value: source.startDate });
        }
        else if (source['startCodeableConcept']) {
            this.start = new fhir.CodeableConcept(source.startCodeableConcept);
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.GoalTarget(x));
        }
        else {
            this.target = [];
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDate({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDate(source._statusDate);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.FhirString({ value: source.statusReason });
        }
        if (source['_statusReason']) {
            if (this.statusReason) {
                this.statusReason.addExtendedProperties(source._statusReason);
            }
            else {
                this.statusReason = new fhir.FhirString(source._statusReason);
            }
        }
        if (source['expressedBy']) {
            this.expressedBy = new fhir.Reference(source.expressedBy);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        else {
            this.addresses = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['outcomeCode']) {
            this.outcomeCode = source.outcomeCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.outcomeCode = [];
        }
        if (source['outcomeReference']) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.outcomeReference = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Goal';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('lifecycleStatus', exp, 'GoalStatus', GoalStatusVsValidation, 'r');
        this.vOS('achievementStatus', exp);
        this.vOA('category', exp);
        this.vOS('priority', exp);
        this.vRS('description', exp);
        this.vRS('subject', exp);
        this.vOS('start', exp);
        this.vOA('target', exp);
        this.vOS('statusDate', exp);
        this.vOS('statusReason', exp);
        this.vOS('expressedBy', exp);
        this.vOA('addresses', exp);
        this.vOA('note', exp);
        this.vOA('outcomeCode', exp);
        this.vOA('outcomeReference', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Goal._fts_dataType = 'Goal';
/**
 * Internal flag to properly serialize choice-type element Goal.start[x]
 */
Goal._fts_startIsChoice = true;
//# sourceMappingURL=data:application/json;base64,