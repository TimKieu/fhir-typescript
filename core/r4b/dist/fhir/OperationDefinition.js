// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { BindingStrengthVsValidation } from '../fhirValueSets/BindingStrengthVsValidation.js';
// @ts-ignore
import { OperationParameterUseVsValidation } from '../fhirValueSets/OperationParameterUseVsValidation.js';
// @ts-ignore
import { AllTypesVsValidation } from '../fhirValueSets/AllTypesVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { OperationKindVsValidation } from '../fhirValueSets/OperationKindVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export class OperationDefinitionParameterBinding extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['strength'] !== undefined) {
            this.strength = new fhir.FhirCode({ value: source.strength }, options);
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            if (this.strength) {
                this.strength.addExtendedProperties(source._strength);
            }
            else {
                this.strength = new fhir.FhirCode(source._strength, options);
            }
        }
        if (source['valueSet'] !== undefined) {
            this.valueSet = new fhir.FhirCanonical({ value: source.valueSet }, options);
        }
        else {
            this.valueSet = null;
        }
        if (source['_valueSet']) {
            if (this.valueSet) {
                this.valueSet.addExtendedProperties(source._valueSet);
            }
            else {
                this.valueSet = new fhir.FhirCanonical(source._valueSet, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.parameter.binding';
        }
        iss.push(...this.vRSV('strength', exp, 'BindingStrength', BindingStrengthVsValidation, 'r'));
        iss.push(...this.vRS('valueSet', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameterBinding._fts_dataType = 'OperationDefinitionParameterBinding';
/**
 * Resolution applies if the referenced parameter exists.
 */
export class OperationDefinitionParameterReferencedFrom extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterReferencedFrom - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['source'] !== undefined) {
            this.source = new fhir.FhirString({ value: source.source }, options);
        }
        else {
            this.source = null;
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirString(source._source, options);
            }
        }
        if (source['sourceId'] !== undefined) {
            this.sourceId = new fhir.FhirString({ value: source.sourceId }, options);
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirString(source._sourceId, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.parameter.referencedFrom';
        }
        iss.push(...this.vRS('source', exp));
        iss.push(...this.vOS('sourceId', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameterReferencedFrom._fts_dataType = 'OperationDefinitionParameterReferencedFrom';
/**
 * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
 */
export class OperationDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirCode({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirCode(source._name, options);
            }
        }
        if (source['use'] !== undefined) {
            this.use = new fhir.FhirCode({ value: source.use }, options);
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use, options);
            }
        }
        if (source['min'] !== undefined) {
            this.min = new fhir.FhirInteger({ value: source.min }, options);
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirInteger(source._min, options);
            }
        }
        if (source['max'] !== undefined) {
            this.max = new fhir.FhirString({ value: source.max }, options);
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['targetProfile'] !== undefined) {
            this.targetProfile = source.targetProfile.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.targetProfile = [];
        }
        if (source['_targetProfile']) {
            source._targetProfile.forEach((x, i) => {
                if (this.targetProfile.length >= i) {
                    if (x) {
                        this.targetProfile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.targetProfile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['searchType'] !== undefined) {
            this.searchType = new fhir.FhirCode({ value: source.searchType }, options);
        }
        if (source['_searchType']) {
            if (this.searchType) {
                this.searchType.addExtendedProperties(source._searchType);
            }
            else {
                this.searchType = new fhir.FhirCode(source._searchType, options);
            }
        }
        if (source['binding']) {
            this.binding = new fhir.OperationDefinitionParameterBinding(source.binding, options);
        }
        if (source['referencedFrom']) {
            this.referencedFrom = source.referencedFrom.map((x) => new fhir.OperationDefinitionParameterReferencedFrom(x, options));
        }
        else {
            this.referencedFrom = [];
        }
        if (source['part']) {
            this.part = source.part.map((x) => new fhir.OperationDefinitionParameter(x, options));
        }
        else {
            this.part = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.parameter';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRSV('use', exp, 'OperationParameterUse', OperationParameterUseVsValidation, 'r'));
        iss.push(...this.vRS('min', exp));
        iss.push(...this.vRS('max', exp));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vOSV('type', exp, 'AllTypes', AllTypesVsValidation, 'r'));
        iss.push(...this.vOA('targetProfile', exp));
        iss.push(...this.vOSV('searchType', exp, 'SearchParamType', SearchParamTypeVsValidation, 'r'));
        iss.push(...this.vOS('binding', exp));
        iss.push(...this.vOA('referencedFrom', exp));
        iss.push(...this.vOA('part', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameter._fts_dataType = 'OperationDefinitionParameter';
/**
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export class OperationDefinitionOverload extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionOverload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['parameterName'] !== undefined) {
            this.parameterName = source.parameterName.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.parameterName = [];
        }
        if (source['_parameterName']) {
            source._parameterName.forEach((x, i) => {
                if (this.parameterName.length >= i) {
                    if (x) {
                        this.parameterName[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.parameterName.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.overload';
        }
        iss.push(...this.vOA('parameterName', exp));
        iss.push(...this.vOS('comment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionOverload._fts_dataType = 'OperationDefinitionOverload';
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export class OperationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for OperationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationDefinition';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['kind'] !== undefined) {
            this.kind = new fhir.FhirCode({ value: source.kind }, options);
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['affectsState'] !== undefined) {
            this.affectsState = new fhir.FhirBoolean({ value: source.affectsState }, options);
        }
        if (source['_affectsState']) {
            if (this.affectsState) {
                this.affectsState.addExtendedProperties(source._affectsState);
            }
            else {
                this.affectsState = new fhir.FhirBoolean(source._affectsState, options);
            }
        }
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirMarkdown({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirMarkdown(source._comment, options);
            }
        }
        if (source['base'] !== undefined) {
            this.base = new fhir.FhirCanonical({ value: source.base }, options);
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCanonical(source._base, options);
            }
        }
        if (source['resource'] !== undefined) {
            this.resource = source.resource.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.resource = [];
        }
        if (source['_resource']) {
            source._resource.forEach((x, i) => {
                if (this.resource.length >= i) {
                    if (x) {
                        this.resource[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.resource.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['system'] !== undefined) {
            this.system = new fhir.FhirBoolean({ value: source.system }, options);
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirBoolean(source._system, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirBoolean({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirBoolean(source._type, options);
            }
        }
        if (source['instance'] !== undefined) {
            this.instance = new fhir.FhirBoolean({ value: source.instance }, options);
        }
        else {
            this.instance = null;
        }
        if (source['_instance']) {
            if (this.instance) {
                this.instance.addExtendedProperties(source._instance);
            }
            else {
                this.instance = new fhir.FhirBoolean(source._instance, options);
            }
        }
        if (source['inputProfile'] !== undefined) {
            this.inputProfile = new fhir.FhirCanonical({ value: source.inputProfile }, options);
        }
        if (source['_inputProfile']) {
            if (this.inputProfile) {
                this.inputProfile.addExtendedProperties(source._inputProfile);
            }
            else {
                this.inputProfile = new fhir.FhirCanonical(source._inputProfile, options);
            }
        }
        if (source['outputProfile'] !== undefined) {
            this.outputProfile = new fhir.FhirCanonical({ value: source.outputProfile }, options);
        }
        if (source['_outputProfile']) {
            if (this.outputProfile) {
                this.outputProfile.addExtendedProperties(source._outputProfile);
            }
            else {
                this.outputProfile = new fhir.FhirCanonical(source._outputProfile, options);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.OperationDefinitionParameter(x, options));
        }
        else {
            this.parameter = [];
        }
        if (source['overload']) {
            this.overload = source.overload.map((x) => new fhir.OperationDefinitionOverload(x, options));
        }
        else {
            this.overload = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vRSV('kind', exp, 'OperationKind', OperationKindVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('affectsState', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOS('base', exp));
        iss.push(...this.vOAV('resource', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vRS('system', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('instance', exp));
        iss.push(...this.vOS('inputProfile', exp));
        iss.push(...this.vOS('outputProfile', exp));
        iss.push(...this.vOA('parameter', exp));
        iss.push(...this.vOA('overload', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinition._fts_dataType = 'OperationDefinition';
//# sourceMappingURL=data:application/json;base64,