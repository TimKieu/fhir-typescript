// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: MarketingStatus
import * as fhir from '../fhir.js';
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export class MarketingStatus extends fhir.BackboneElement {
    /**
     * Default constructor for MarketingStatus - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country, options);
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        else {
            this.status = null;
        }
        if (source['dateRange']) {
            this.dateRange = new fhir.Period(source.dateRange, options);
        }
        if (source['restoreDate'] !== undefined) {
            this.restoreDate = new fhir.FhirDateTime({ value: source.restoreDate }, options);
        }
        if (source['_restoreDate']) {
            if (this.restoreDate) {
                this.restoreDate.addExtendedProperties(source._restoreDate);
            }
            else {
                this.restoreDate = new fhir.FhirDateTime(source._restoreDate, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MarketingStatus';
        }
        iss.push(...this.vOS('country', exp));
        iss.push(...this.vOS('jurisdiction', exp));
        iss.push(...this.vRS('status', exp));
        iss.push(...this.vOS('dateRange', exp));
        iss.push(...this.vOS('restoreDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MarketingStatus._fts_dataType = 'MarketingStatus';
//# sourceMappingURL=data:application/json;base64,