// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceMetric
import * as fhir from '../fhir.js';
// @ts-ignore
import { MetricCalibrationTypeVsValidation } from '../fhirValueSets/MetricCalibrationTypeVsValidation.js';
// @ts-ignore
import { MetricCalibrationStateVsValidation } from '../fhirValueSets/MetricCalibrationStateVsValidation.js';
// @ts-ignore
import { MetricOperationalStatusVsValidation } from '../fhirValueSets/MetricOperationalStatusVsValidation.js';
// @ts-ignore
import { MetricColorVsValidation } from '../fhirValueSets/MetricColorVsValidation.js';
// @ts-ignore
import { MetricCategoryVsValidation } from '../fhirValueSets/MetricCategoryVsValidation.js';
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export class DeviceMetricCalibration extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceMetricCalibration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['state']) {
            this.state = new fhir.FhirCode({ value: source.state });
        }
        if (source['_state']) {
            if (this.state) {
                this.state.addExtendedProperties(source._state);
            }
            else {
                this.state = new fhir.FhirCode(source._state);
            }
        }
        if (source['time']) {
            this.time = new fhir.FhirInstant({ value: source.time });
        }
        if (source['_time']) {
            if (this.time) {
                this.time.addExtendedProperties(source._time);
            }
            else {
                this.time = new fhir.FhirInstant(source._time);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceMetric.calibration';
        }
        iss.push(...this.vOSV('type', exp, 'MetricCalibrationType', MetricCalibrationTypeVsValidation, 'r'));
        iss.push(...this.vOSV('state', exp, 'MetricCalibrationState', MetricCalibrationStateVsValidation, 'r'));
        iss.push(...this.vOS('time', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetricCalibration._fts_dataType = 'DeviceMetricCalibration';
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export class DeviceMetric extends fhir.DomainResource {
    /**
     * Default constructor for DeviceMetric - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceMetric';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.FhirCode({ value: source.operationalStatus });
        }
        if (source['_operationalStatus']) {
            if (this.operationalStatus) {
                this.operationalStatus.addExtendedProperties(source._operationalStatus);
            }
            else {
                this.operationalStatus = new fhir.FhirCode(source._operationalStatus);
            }
        }
        if (source['color']) {
            this.color = new fhir.FhirCode({ value: source.color });
        }
        if (source['_color']) {
            if (this.color) {
                this.color.addExtendedProperties(source._color);
            }
            else {
                this.color = new fhir.FhirCode(source._color);
            }
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        else {
            this.category = null;
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['measurementPeriod']) {
            this.measurementPeriod = new fhir.Timing(source.measurementPeriod);
        }
        if (source['calibration']) {
            this.calibration = source.calibration.map((x) => new fhir.DeviceMetricCalibration(x));
        }
        else {
            this.calibration = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceMetric';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('unit', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('parent', exp));
        iss.push(...this.vOSV('operationalStatus', exp, 'MetricOperationalStatus', MetricOperationalStatusVsValidation, 'r'));
        iss.push(...this.vOSV('color', exp, 'MetricColor', MetricColorVsValidation, 'r'));
        iss.push(...this.vRSV('category', exp, 'MetricCategory', MetricCategoryVsValidation, 'r'));
        iss.push(...this.vOS('measurementPeriod', exp));
        iss.push(...this.vOA('calibration', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetric._fts_dataType = 'DeviceMetric';
//# sourceMappingURL=data:application/json;base64,