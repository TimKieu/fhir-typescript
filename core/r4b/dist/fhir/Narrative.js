// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Narrative
import * as fhir from '../fhir.js';
// @ts-ignore
import { NarrativeStatusVsValidation } from '../fhirValueSets/NarrativeStatusVsValidation.js';
/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export class Narrative extends fhir.FhirElement {
    /**
     * Default constructor for Narrative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['div']) {
            this.div = new fhir.FhirXhtml({ value: source.div });
        }
        else {
            this.div = null;
        }
        if (source['_div']) {
            if (this.div) {
                this.div.addExtendedProperties(source._div);
            }
            else {
                this.div = new fhir.FhirXhtml(source._div);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Narrative';
        }
        iss.push(...this.vRSV('status', exp, 'NarrativeStatus', NarrativeStatusVsValidation, 'r'));
        iss.push(...this.vRS('div', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Narrative._fts_dataType = 'Narrative';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmFycmF0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9OYXJyYXRpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGdEQUFnRDtBQUNoRCxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQXVCOUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sU0FBVSxTQUFRLElBQUksQ0FBQyxXQUFXO0lBYTdDOztPQUVHO0lBQ0gsWUFBWSxTQUFnQyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN0RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQTBCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDdEc7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFRLENBQUMsQ0FBQzthQUFFO2lCQUNuRTtnQkFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBMEIsTUFBTSxDQUFDLE9BQWlDLENBQUMsQ0FBQzthQUFFO1NBQzdHO1FBQ0QsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3JFO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FBRTtRQUN6QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsSUFBSyxDQUFDLENBQUM7YUFBRTtpQkFDMUQ7Z0JBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQW1DLENBQUMsQ0FBQzthQUFFO1NBQ3BGO0lBQ0gsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsTUFBYSxFQUFFO1FBQy9DLElBQUksR0FBRyxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQUUsR0FBRyxHQUFHLFdBQVcsQ0FBQTtTQUFFO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBQyxHQUFHLEVBQUMsaUJBQWlCLEVBQUMsMkJBQTJCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0FBdkNEOztHQUVHO0FBQzZCLHVCQUFhLEdBQVUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0Yi5jb3JlIHZlcnNpb246IDQuMy4wXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBDb21wbGV4VHlwZTogTmFycmF0aXZlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBOYXJyYXRpdmVTdGF0dXNDb2RlcywgIE5hcnJhdGl2ZVN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9OYXJyYXRpdmVTdGF0dXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTmFycmF0aXZlU3RhdHVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9OYXJyYXRpdmVTdGF0dXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTmFycmF0aXZlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5hcnJhdGl2ZUFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgbmFycmF0aXZlIC0gd2hldGhlciBpdCdzIGVudGlyZWx5IGdlbmVyYXRlZCAoZnJvbSBqdXN0IHRoZSBkZWZpbmVkIGRhdGEgb3IgdGhlIGV4dGVuc2lvbnMgdG9vKSwgb3Igd2hldGhlciBhIGh1bWFuIGF1dGhvcmVkIGl0IGFuZCBpdCBtYXkgY29udGFpbiBhZGRpdGlvbmFsIGRhdGEuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPE5hcnJhdGl2ZVN0YXR1c0NvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBOYXJyYXRpdmUuc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBodG1sIGVsZW1lbnQgYXJlIGFuIFhIVE1MIGZyYWdtZW50IGNvbnRhaW5pbmcgb25seSB0aGUgYmFzaWMgaHRtbCBmb3JtYXR0aW5nIGVsZW1lbnRzIGRlc2NyaWJlZCBpbiBjaGFwdGVycyA3LTExIGFuZCAxNSBvZiB0aGUgSFRNTCA0LjAgc3RhbmRhcmQsICZsdDthJmd0OyBlbGVtZW50cyAoZWl0aGVyIG5hbWUgb3IgaHJlZiksIGltYWdlcyBhbmQgaW50ZXJuYWxseSBjb250YWluZWQgc3R5bGVzaGVldHMuIFRoZSBYSFRNTCBjb250ZW50IFNIQUxMIE5PVCBjb250YWluIGEgaGVhZCwgYSBib2R5LCBleHRlcm5hbCBzdHlsZXNoZWV0IHJlZmVyZW5jZXMsIHNjcmlwdHMsIGZvcm1zLCBiYXNlL2xpbmsveGxpbmssIGZyYW1lcywgaWZyYW1lcyBhbmQgb2JqZWN0cy5cclxuICAgKi9cclxuICBkaXY6IGZoaXIuRmhpclhodG1sfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE5hcnJhdGl2ZS5kaXZcclxuICAgKi9cclxuICBfZGl2PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgaHVtYW4tcmVhZGFibGUgc3VtbWFyeSBvZiB0aGUgcmVzb3VyY2UgY29udmV5aW5nIHRoZSBlc3NlbnRpYWwgY2xpbmljYWwgYW5kIGJ1c2luZXNzIGluZm9ybWF0aW9uIGZvciB0aGUgcmVzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmFycmF0aXZlIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdOYXJyYXRpdmUnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIG5hcnJhdGl2ZSAtIHdoZXRoZXIgaXQncyBlbnRpcmVseSBnZW5lcmF0ZWQgKGZyb20ganVzdCB0aGUgZGVmaW5lZCBkYXRhIG9yIHRoZSBleHRlbnNpb25zIHRvbyksIG9yIHdoZXRoZXIgYSBodW1hbiBhdXRob3JlZCBpdCBhbmQgaXQgbWF5IGNvbnRhaW4gYWRkaXRpb25hbCBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8TmFycmF0aXZlU3RhdHVzQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBodG1sIGVsZW1lbnQgYXJlIGFuIFhIVE1MIGZyYWdtZW50IGNvbnRhaW5pbmcgb25seSB0aGUgYmFzaWMgaHRtbCBmb3JtYXR0aW5nIGVsZW1lbnRzIGRlc2NyaWJlZCBpbiBjaGFwdGVycyA3LTExIGFuZCAxNSBvZiB0aGUgSFRNTCA0LjAgc3RhbmRhcmQsICZsdDthJmd0OyBlbGVtZW50cyAoZWl0aGVyIG5hbWUgb3IgaHJlZiksIGltYWdlcyBhbmQgaW50ZXJuYWxseSBjb250YWluZWQgc3R5bGVzaGVldHMuIFRoZSBYSFRNTCBjb250ZW50IFNIQUxMIE5PVCBjb250YWluIGEgaGVhZCwgYSBib2R5LCBleHRlcm5hbCBzdHlsZXNoZWV0IHJlZmVyZW5jZXMsIHNjcmlwdHMsIGZvcm1zLCBiYXNlL2xpbmsveGxpbmssIGZyYW1lcywgaWZyYW1lcyBhbmQgb2JqZWN0cy5cclxuICAgKi9cclxuICBwdWJsaWMgZGl2OiBmaGlyLkZoaXJYaHRtbHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE5hcnJhdGl2ZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE5hcnJhdGl2ZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPE5hcnJhdGl2ZVN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxOYXJyYXRpdmVTdGF0dXNDb2RlVHlwZT4oc291cmNlLl9zdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RpdiddKSB7IHRoaXMuZGl2ID0gbmV3IGZoaXIuRmhpclhodG1sKHt2YWx1ZTogc291cmNlLmRpdn0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kaXYgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGl2J10pIHtcclxuICAgICAgaWYgKHRoaXMuZGl2KSB7IHRoaXMuZGl2LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RpdiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRpdiA9IG5ldyBmaGlyLkZoaXJYaHRtbChzb3VyY2UuX2RpdiBhcyBQYXJ0aWFsPGZoaXIuRmhpclhodG1sQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTmFycmF0aXZlJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSU1YoJ3N0YXR1cycsZXhwLCdOYXJyYXRpdmVTdGF0dXMnLE5hcnJhdGl2ZVN0YXR1c1ZzVmFsaWRhdGlvbiwncicpKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdkaXYnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuIl19