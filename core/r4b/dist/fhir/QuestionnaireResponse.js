// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: QuestionnaireResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuestionnaireAnswersStatusVsValidation } from '../fhirValueSets/QuestionnaireAnswersStatusVsValidation.js';
/**
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export class QuestionnaireResponseItemAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItemAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueDecimal'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal }, options);
        }
        else if (source['valueInteger'] !== undefined) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger }, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueDateTime'] !== undefined) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime }, options);
        }
        else if (source['valueTime'] !== undefined) {
            this.value = new fhir.FhirTime({ value: source.valueTime }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueUri'] !== undefined) {
            this.value = new fhir.FhirUri({ value: source.valueUri }, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'QuestionnaireResponse.item.answer';
        }
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponseItemAnswer._fts_dataType = 'QuestionnaireResponseItemAnswer';
/**
 * Internal flag to properly serialize choice-type element QuestionnaireResponse.item.answer.value[x]
 */
QuestionnaireResponseItemAnswer._fts_valueIsChoice = true;
/**
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
export class QuestionnaireResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId'] !== undefined) {
            this.linkId = new fhir.FhirString({ value: source.linkId }, options);
        }
        else {
            this.linkId = null;
        }
        if (source['_linkId']) {
            if (this.linkId) {
                this.linkId.addExtendedProperties(source._linkId);
            }
            else {
                this.linkId = new fhir.FhirString(source._linkId, options);
            }
        }
        if (source['definition'] !== undefined) {
            this.definition = new fhir.FhirUri({ value: source.definition }, options);
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition, options);
            }
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.QuestionnaireResponseItemAnswer(x, options));
        }
        else {
            this.answer = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'QuestionnaireResponse.item';
        }
        iss.push(...this.vRS('linkId', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOA('answer', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponseItem._fts_dataType = 'QuestionnaireResponseItem';
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
export class QuestionnaireResponse extends fhir.DomainResource {
    /**
     * Default constructor for QuestionnaireResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'QuestionnaireResponse';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['questionnaire'] !== undefined) {
            this.questionnaire = new fhir.FhirCanonical({ value: source.questionnaire }, options);
        }
        if (source['_questionnaire']) {
            if (this.questionnaire) {
                this.questionnaire.addExtendedProperties(source._questionnaire);
            }
            else {
                this.questionnaire = new fhir.FhirCanonical(source._questionnaire, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['authored'] !== undefined) {
            this.authored = new fhir.FhirDateTime({ value: source.authored }, options);
        }
        if (source['_authored']) {
            if (this.authored) {
                this.authored.addExtendedProperties(source._authored);
            }
            else {
                this.authored = new fhir.FhirDateTime(source._authored, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source, options);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'QuestionnaireResponse';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vOS('questionnaire', exp));
        iss.push(...this.vRSV('status', exp, 'QuestionnaireAnswersStatus', QuestionnaireAnswersStatusVsValidation, 'r'));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('authored', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponse._fts_dataType = 'QuestionnaireResponse';
//# sourceMappingURL=data:application/json;base64,