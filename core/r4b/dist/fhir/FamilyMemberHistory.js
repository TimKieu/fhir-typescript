// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: FamilyMemberHistory
import * as fhir from '../fhir.js';
// @ts-ignore
import { HistoryStatusVsValidation } from '../fhirValueSets/HistoryStatusVsValidation.js';
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export class FamilyMemberHistoryCondition extends fhir.BackboneElement {
    /**
     * Default constructor for FamilyMemberHistoryCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['contributedToDeath']) {
            this.contributedToDeath = new fhir.FhirBoolean({ value: source.contributedToDeath });
        }
        if (source['_contributedToDeath']) {
            if (this.contributedToDeath) {
                this.contributedToDeath.addExtendedProperties(source._contributedToDeath);
            }
            else {
                this.contributedToDeath = new fhir.FhirBoolean(source._contributedToDeath);
            }
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod);
        }
        else if (source['onsetString']) {
            this.onset = new fhir.FhirString({ value: source.onsetString });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'FamilyMemberHistory.condition';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('outcome', exp));
        iss.push(...this.vOS('contributedToDeath', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FamilyMemberHistoryCondition._fts_dataType = 'FamilyMemberHistoryCondition';
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.condition.onset[x]
 */
FamilyMemberHistoryCondition._fts_onsetIsChoice = true;
/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export class FamilyMemberHistory extends fhir.DomainResource {
    /**
     * Default constructor for FamilyMemberHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'FamilyMemberHistory';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        else {
            this.relationship = null;
        }
        if (source['sex']) {
            this.sex = new fhir.CodeableConcept(source.sex);
        }
        if (source['born']) {
            this.born = source.born;
        }
        else if (source['bornPeriod']) {
            this.born = new fhir.Period(source.bornPeriod);
        }
        else if (source['bornDate']) {
            this.born = new fhir.FhirDate({ value: source.bornDate });
        }
        else if (source['bornString']) {
            this.born = new fhir.FhirString({ value: source.bornString });
        }
        if (source['age']) {
            this.age = source.age;
        }
        else if (source['ageAge']) {
            this.age = new fhir.Age(source.ageAge);
        }
        else if (source['ageRange']) {
            this.age = new fhir.Range(source.ageRange);
        }
        else if (source['ageString']) {
            this.age = new fhir.FhirString({ value: source.ageString });
        }
        if (source['estimatedAge']) {
            this.estimatedAge = new fhir.FhirBoolean({ value: source.estimatedAge });
        }
        if (source['_estimatedAge']) {
            if (this.estimatedAge) {
                this.estimatedAge.addExtendedProperties(source._estimatedAge);
            }
            else {
                this.estimatedAge = new fhir.FhirBoolean(source._estimatedAge);
            }
        }
        if (source['deceased']) {
            this.deceased = source.deceased;
        }
        else if (source['deceasedBoolean']) {
            this.deceased = new fhir.FhirBoolean({ value: source.deceasedBoolean });
        }
        else if (source['deceasedAge']) {
            this.deceased = new fhir.Age(source.deceasedAge);
        }
        else if (source['deceasedRange']) {
            this.deceased = new fhir.Range(source.deceasedRange);
        }
        else if (source['deceasedDate']) {
            this.deceased = new fhir.FhirDate({ value: source.deceasedDate });
        }
        else if (source['deceasedString']) {
            this.deceased = new fhir.FhirString({ value: source.deceasedString });
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.FamilyMemberHistoryCondition(x));
        }
        else {
            this.condition = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'FamilyMemberHistory';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('instantiatesCanonical', exp));
        iss.push(...this.vOA('instantiatesUri', exp));
        iss.push(...this.vRSV('status', exp, 'HistoryStatus', HistoryStatusVsValidation, 'r'));
        iss.push(...this.vOS('dataAbsentReason', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRS('relationship', exp));
        iss.push(...this.vOS('sex', exp));
        iss.push(...this.vOS('born', exp));
        iss.push(...this.vOS('age', exp));
        iss.push(...this.vOS('estimatedAge', exp));
        iss.push(...this.vOS('deceased', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('condition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FamilyMemberHistory._fts_dataType = 'FamilyMemberHistory';
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.born[x]
 */
FamilyMemberHistory._fts_bornIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.age[x]
 */
FamilyMemberHistory._fts_ageIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.deceased[x]
 */
FamilyMemberHistory._fts_deceasedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,