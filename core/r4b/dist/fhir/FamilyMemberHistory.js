// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: FamilyMemberHistory
import * as fhir from '../fhir.js';
// @ts-ignore
import { HistoryStatusVsValidation } from '../fhirValueSets/HistoryStatusVsValidation.js';
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export class FamilyMemberHistoryCondition extends fhir.BackboneElement {
    /**
     * Default constructor for FamilyMemberHistoryCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome, options);
        }
        if (source['contributedToDeath'] !== undefined) {
            this.contributedToDeath = new fhir.FhirBoolean({ value: source.contributedToDeath }, options);
        }
        if (source['_contributedToDeath']) {
            if (this.contributedToDeath) {
                this.contributedToDeath.addExtendedProperties(source._contributedToDeath);
            }
            else {
                this.contributedToDeath = new fhir.FhirBoolean(source._contributedToDeath, options);
            }
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge, options);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange, options);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod, options);
        }
        else if (source['onsetString'] !== undefined) {
            this.onset = new fhir.FhirString({ value: source.onsetString }, options);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'FamilyMemberHistory.condition';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('outcome', exp));
        iss.push(...this.vOS('contributedToDeath', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FamilyMemberHistoryCondition._fts_dataType = 'FamilyMemberHistoryCondition';
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.condition.onset[x]
 */
FamilyMemberHistoryCondition._fts_onsetIsChoice = true;
/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export class FamilyMemberHistory extends fhir.DomainResource {
    /**
     * Default constructor for FamilyMemberHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'FamilyMemberHistory';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical'] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri'] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason, options);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship, options);
        }
        else {
            this.relationship = null;
        }
        if (source['sex']) {
            this.sex = new fhir.CodeableConcept(source.sex, options);
        }
        if (source['born']) {
            this.born = source.born;
        }
        else if (source['bornPeriod']) {
            this.born = new fhir.Period(source.bornPeriod, options);
        }
        else if (source['bornDate'] !== undefined) {
            this.born = new fhir.FhirDate({ value: source.bornDate }, options);
        }
        else if (source['bornString'] !== undefined) {
            this.born = new fhir.FhirString({ value: source.bornString }, options);
        }
        if (source['age']) {
            this.age = source.age;
        }
        else if (source['ageAge']) {
            this.age = new fhir.Age(source.ageAge, options);
        }
        else if (source['ageRange']) {
            this.age = new fhir.Range(source.ageRange, options);
        }
        else if (source['ageString'] !== undefined) {
            this.age = new fhir.FhirString({ value: source.ageString }, options);
        }
        if (source['estimatedAge'] !== undefined) {
            this.estimatedAge = new fhir.FhirBoolean({ value: source.estimatedAge }, options);
        }
        if (source['_estimatedAge']) {
            if (this.estimatedAge) {
                this.estimatedAge.addExtendedProperties(source._estimatedAge);
            }
            else {
                this.estimatedAge = new fhir.FhirBoolean(source._estimatedAge, options);
            }
        }
        if (source['deceased']) {
            this.deceased = source.deceased;
        }
        else if (source['deceasedBoolean'] !== undefined) {
            this.deceased = new fhir.FhirBoolean({ value: source.deceasedBoolean }, options);
        }
        else if (source['deceasedAge']) {
            this.deceased = new fhir.Age(source.deceasedAge, options);
        }
        else if (source['deceasedRange']) {
            this.deceased = new fhir.Range(source.deceasedRange, options);
        }
        else if (source['deceasedDate'] !== undefined) {
            this.deceased = new fhir.FhirDate({ value: source.deceasedDate }, options);
        }
        else if (source['deceasedString'] !== undefined) {
            this.deceased = new fhir.FhirString({ value: source.deceasedString }, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.FamilyMemberHistoryCondition(x, options));
        }
        else {
            this.condition = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'FamilyMemberHistory';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('instantiatesCanonical', exp));
        iss.push(...this.vOA('instantiatesUri', exp));
        iss.push(...this.vRSV('status', exp, 'HistoryStatus', HistoryStatusVsValidation, 'r'));
        iss.push(...this.vOS('dataAbsentReason', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRS('relationship', exp));
        iss.push(...this.vOS('sex', exp));
        iss.push(...this.vOS('born', exp));
        iss.push(...this.vOS('age', exp));
        iss.push(...this.vOS('estimatedAge', exp));
        iss.push(...this.vOS('deceased', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('condition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FamilyMemberHistory._fts_dataType = 'FamilyMemberHistory';
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.born[x]
 */
FamilyMemberHistory._fts_bornIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.age[x]
 */
FamilyMemberHistory._fts_ageIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.deceased[x]
 */
FamilyMemberHistory._fts_deceasedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,