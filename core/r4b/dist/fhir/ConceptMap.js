// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ConceptMap
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConceptMapEquivalenceVsValidation } from '../fhirValueSets/ConceptMapEquivalenceVsValidation.js';
// @ts-ignore
import { ConceptmapUnmappedModeVsValidation } from '../fhirValueSets/ConceptmapUnmappedModeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
export class ConceptMapGroupElementTargetDependsOn extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTargetDependsOn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['property'] !== undefined) {
            this.property = new fhir.FhirUri({ value: source.property }, options);
        }
        else {
            this.property = null;
        }
        if (source['_property']) {
            if (this.property) {
                this.property.addExtendedProperties(source._property);
            }
            else {
                this.property = new fhir.FhirUri(source._property, options);
            }
        }
        if (source['system'] !== undefined) {
            this.system = new fhir.FhirCanonical({ value: source.system }, options);
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirCanonical(source._system, options);
            }
        }
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.value }, options);
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value, options);
            }
        }
        if (source['display'] !== undefined) {
            this.display = new fhir.FhirString({ value: source.display }, options);
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ConceptMap.group.element.target.dependsOn';
        }
        iss.push(...this.vRS('property', exp));
        iss.push(...this.vOS('system', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOS('display', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupElementTargetDependsOn._fts_dataType = 'ConceptMapGroupElementTargetDependsOn';
/**
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
export class ConceptMapGroupElementTarget extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['display'] !== undefined) {
            this.display = new fhir.FhirString({ value: source.display }, options);
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display, options);
            }
        }
        if (source['equivalence'] !== undefined) {
            this.equivalence = new fhir.FhirCode({ value: source.equivalence }, options);
        }
        else {
            this.equivalence = null;
        }
        if (source['_equivalence']) {
            if (this.equivalence) {
                this.equivalence.addExtendedProperties(source._equivalence);
            }
            else {
                this.equivalence = new fhir.FhirCode(source._equivalence, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
        if (source['dependsOn']) {
            this.dependsOn = source.dependsOn.map((x) => new fhir.ConceptMapGroupElementTargetDependsOn(x, options));
        }
        else {
            this.dependsOn = [];
        }
        if (source['product']) {
            this.product = source.product.map((x) => new fhir.ConceptMapGroupElementTargetDependsOn(x, options));
        }
        else {
            this.product = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ConceptMap.group.element.target';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vRSV('equivalence', exp, 'ConceptMapEquivalence', ConceptMapEquivalenceVsValidation, 'r'));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOA('dependsOn', exp));
        iss.push(...this.vOA('product', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupElementTarget._fts_dataType = 'ConceptMapGroupElementTarget';
/**
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export class ConceptMapGroupElement extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['display'] !== undefined) {
            this.display = new fhir.FhirString({ value: source.display }, options);
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display, options);
            }
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.ConceptMapGroupElementTarget(x, options));
        }
        else {
            this.target = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ConceptMap.group.element';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOA('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupElement._fts_dataType = 'ConceptMapGroupElement';
/**
 * This only applies if the source code has a system value that matches the system defined for the group.
 */
export class ConceptMapGroupUnmapped extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupUnmapped - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode'] !== undefined) {
            this.mode = new fhir.FhirCode({ value: source.mode }, options);
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode, options);
            }
        }
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['display'] !== undefined) {
            this.display = new fhir.FhirString({ value: source.display }, options);
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirCanonical({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirCanonical(source._url, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ConceptMap.group.unmapped';
        }
        iss.push(...this.vRSV('mode', exp, 'ConceptmapUnmappedMode', ConceptmapUnmappedModeVsValidation, 'r'));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupUnmapped._fts_dataType = 'ConceptMapGroupUnmapped';
/**
 * A group of mappings that all have the same source and target system.
 */
export class ConceptMapGroup extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['source'] !== undefined) {
            this.source = new fhir.FhirUri({ value: source.source }, options);
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirUri(source._source, options);
            }
        }
        if (source['sourceVersion'] !== undefined) {
            this.sourceVersion = new fhir.FhirString({ value: source.sourceVersion }, options);
        }
        if (source['_sourceVersion']) {
            if (this.sourceVersion) {
                this.sourceVersion.addExtendedProperties(source._sourceVersion);
            }
            else {
                this.sourceVersion = new fhir.FhirString(source._sourceVersion, options);
            }
        }
        if (source['target'] !== undefined) {
            this.target = new fhir.FhirUri({ value: source.target }, options);
        }
        if (source['_target']) {
            if (this.target) {
                this.target.addExtendedProperties(source._target);
            }
            else {
                this.target = new fhir.FhirUri(source._target, options);
            }
        }
        if (source['targetVersion'] !== undefined) {
            this.targetVersion = new fhir.FhirString({ value: source.targetVersion }, options);
        }
        if (source['_targetVersion']) {
            if (this.targetVersion) {
                this.targetVersion.addExtendedProperties(source._targetVersion);
            }
            else {
                this.targetVersion = new fhir.FhirString(source._targetVersion, options);
            }
        }
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ConceptMapGroupElement(x, options));
        }
        else {
            this.element = [];
        }
        if (source['unmapped']) {
            this.unmapped = new fhir.ConceptMapGroupUnmapped(source.unmapped, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ConceptMap.group';
        }
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('sourceVersion', exp));
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vOS('targetVersion', exp));
        iss.push(...this.vRA('element', exp));
        iss.push(...this.vOS('unmapped', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroup._fts_dataType = 'ConceptMapGroup';
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
export class ConceptMap extends fhir.DomainResource {
    /**
     * Default constructor for ConceptMap - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ConceptMap';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['source']) {
            this.source = source.source;
        }
        else if (source['sourceUri'] !== undefined) {
            this.source = new fhir.FhirUri({ value: source.sourceUri }, options);
        }
        else if (source['sourceCanonical'] !== undefined) {
            this.source = new fhir.FhirCanonical({ value: source.sourceCanonical }, options);
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetUri'] !== undefined) {
            this.target = new fhir.FhirUri({ value: source.targetUri }, options);
        }
        else if (source['targetCanonical'] !== undefined) {
            this.target = new fhir.FhirCanonical({ value: source.targetCanonical }, options);
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.ConceptMapGroup(x, options));
        }
        else {
            this.group = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ConceptMap';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vOA('group', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMap._fts_dataType = 'ConceptMap';
/**
 * Internal flag to properly serialize choice-type element ConceptMap.source[x]
 */
ConceptMap._fts_sourceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ConceptMap.target[x]
 */
ConceptMap._fts_targetIsChoice = true;
//# sourceMappingURL=data:application/json;base64,