// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Patient
import * as fhir from '../fhir.js';
// @ts-ignore
import { AdministrativeGenderVsValidation } from '../fhirValueSets/AdministrativeGenderVsValidation.js';
// @ts-ignore
import { LinkTypeVsValidation } from '../fhirValueSets/LinkTypeVsValidation.js';
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export class PatientContact extends fhir.BackboneElement {
    /**
     * Default constructor for PatientContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.relationship = [];
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Patient.contact';
        }
        this.vOA('relationship', exp);
        this.vOS('name', exp);
        this.vOA('telecom', exp);
        this.vOS('address', exp);
        this.vOSV('gender', exp, 'AdministrativeGender', AdministrativeGenderVsValidation, 'r');
        this.vOS('organization', exp);
        this.vOS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PatientContact._fts_dataType = 'PatientContact';
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export class PatientCommunication extends fhir.BackboneElement {
    /**
     * Default constructor for PatientCommunication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
        if (source['preferred']) {
            this.preferred = new fhir.FhirBoolean({ value: source.preferred });
        }
        if (source['_preferred']) {
            if (this.preferred) {
                this.preferred.addExtendedProperties(source._preferred);
            }
            else {
                this.preferred = new fhir.FhirBoolean(source._preferred);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Patient.communication';
        }
        this.vRS('language', exp);
        this.vOS('preferred', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PatientCommunication._fts_dataType = 'PatientCommunication';
/**
 * There is no assumption that linked patient records have mutual links.
 */
export class PatientLink extends fhir.BackboneElement {
    /**
     * Default constructor for PatientLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['other']) {
            this.other = new fhir.Reference(source.other);
        }
        else {
            this.other = null;
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Patient.link';
        }
        this.vRS('other', exp);
        this.vRSV('type', exp, 'LinkType', LinkTypeVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PatientLink._fts_dataType = 'PatientLink';
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export class Patient extends fhir.DomainResource {
    /**
     * Default constructor for Patient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Patient';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        else {
            this.name = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['_birthDate']) {
            if (this.birthDate) {
                this.birthDate.addExtendedProperties(source._birthDate);
            }
            else {
                this.birthDate = new fhir.FhirDate(source._birthDate);
            }
        }
        if (source['deceased']) {
            this.deceased = source.deceased;
        }
        else if (source['deceasedBoolean']) {
            this.deceased = new fhir.FhirBoolean({ value: source.deceasedBoolean });
        }
        else if (source['deceasedDateTime']) {
            this.deceased = new fhir.FhirDateTime({ value: source.deceasedDateTime });
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['maritalStatus']) {
            this.maritalStatus = new fhir.CodeableConcept(source.maritalStatus);
        }
        if (source['multipleBirth']) {
            this.multipleBirth = source.multipleBirth;
        }
        else if (source['multipleBirthBoolean']) {
            this.multipleBirth = new fhir.FhirBoolean({ value: source.multipleBirthBoolean });
        }
        else if (source['multipleBirthInteger']) {
            this.multipleBirth = new fhir.FhirInteger({ value: source.multipleBirthInteger });
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        else {
            this.photo = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.PatientContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.PatientCommunication(x));
        }
        else {
            this.communication = [];
        }
        if (source['generalPractitioner']) {
            this.generalPractitioner = source.generalPractitioner.map((x) => new fhir.Reference(x));
        }
        else {
            this.generalPractitioner = [];
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PatientLink(x));
        }
        else {
            this.link = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Patient';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('active', exp);
        this.vOA('name', exp);
        this.vOA('telecom', exp);
        this.vOSV('gender', exp, 'AdministrativeGender', AdministrativeGenderVsValidation, 'r');
        this.vOS('birthDate', exp);
        this.vOS('deceased', exp);
        this.vOA('address', exp);
        this.vOS('maritalStatus', exp);
        this.vOS('multipleBirth', exp);
        this.vOA('photo', exp);
        this.vOA('contact', exp);
        this.vOA('communication', exp);
        this.vOA('generalPractitioner', exp);
        this.vOS('managingOrganization', exp);
        this.vOA('link', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Patient._fts_dataType = 'Patient';
/**
 * Internal flag to properly serialize choice-type element Patient.deceased[x]
 */
Patient._fts_deceasedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Patient.multipleBirth[x]
 */
Patient._fts_multipleBirthIsChoice = true;
//# sourceMappingURL=data:application/json;base64,