// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: AdministrableProductDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Characteristics e.g. a product's onset of action.
 */
export class AdministrableProductDefinitionProperty extends fhir.BackboneElement {
    /**
     * Default constructor for AdministrableProductDefinitionProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdministrableProductDefinition.property';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdministrableProductDefinitionProperty._fts_dataType = 'AdministrableProductDefinitionProperty';
/**
 * Internal flag to properly serialize choice-type element AdministrableProductDefinition.property.value[x]
 */
AdministrableProductDefinitionProperty._fts_valueIsChoice = true;
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export class AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends fhir.BackboneElement {
    /**
     * Default constructor for AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['tissue']) {
            this.tissue = new fhir.CodeableConcept(source.tissue, options);
        }
        else {
            this.tissue = null;
        }
        if (source['value']) {
            this.value = new fhir.Quantity(source.value, options);
        }
        else {
            this.value = null;
        }
        if (source['supportingInformation'] !== undefined) {
            this.supportingInformation = new fhir.FhirString({ value: source.supportingInformation }, options);
        }
        if (source['_supportingInformation']) {
            if (this.supportingInformation) {
                this.supportingInformation.addExtendedProperties(source._supportingInformation);
            }
            else {
                this.supportingInformation = new fhir.FhirString(source._supportingInformation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdministrableProductDefinition.routeOfAdministration.targetSpecies.withdrawalPeriod';
        }
        iss.push(...this.vRS('tissue', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOS('supportingInformation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod._fts_dataType = 'AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod';
/**
 * A species for which this route applies.
 */
export class AdministrableProductDefinitionRouteOfAdministrationTargetSpecies extends fhir.BackboneElement {
    /**
     * Default constructor for AdministrableProductDefinitionRouteOfAdministrationTargetSpecies - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['withdrawalPeriod']) {
            this.withdrawalPeriod = source.withdrawalPeriod.map((x) => new fhir.AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(x, options));
        }
        else {
            this.withdrawalPeriod = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdministrableProductDefinition.routeOfAdministration.targetSpecies';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOA('withdrawalPeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdministrableProductDefinitionRouteOfAdministrationTargetSpecies._fts_dataType = 'AdministrableProductDefinitionRouteOfAdministrationTargetSpecies';
/**
 * The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. RouteOfAdministration cannot be used when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa).
 */
export class AdministrableProductDefinitionRouteOfAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for AdministrableProductDefinitionRouteOfAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['firstDose']) {
            this.firstDose = new fhir.Quantity(source.firstDose, options);
        }
        if (source['maxSingleDose']) {
            this.maxSingleDose = new fhir.Quantity(source.maxSingleDose, options);
        }
        if (source['maxDosePerDay']) {
            this.maxDosePerDay = new fhir.Quantity(source.maxDosePerDay, options);
        }
        if (source['maxDosePerTreatmentPeriod']) {
            this.maxDosePerTreatmentPeriod = new fhir.Ratio(source.maxDosePerTreatmentPeriod, options);
        }
        if (source['maxTreatmentPeriod']) {
            this.maxTreatmentPeriod = new fhir.Duration(source.maxTreatmentPeriod, options);
        }
        if (source['targetSpecies']) {
            this.targetSpecies = source.targetSpecies.map((x) => new fhir.AdministrableProductDefinitionRouteOfAdministrationTargetSpecies(x, options));
        }
        else {
            this.targetSpecies = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdministrableProductDefinition.routeOfAdministration';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('firstDose', exp));
        iss.push(...this.vOS('maxSingleDose', exp));
        iss.push(...this.vOS('maxDosePerDay', exp));
        iss.push(...this.vOS('maxDosePerTreatmentPeriod', exp));
        iss.push(...this.vOS('maxTreatmentPeriod', exp));
        iss.push(...this.vOA('targetSpecies', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdministrableProductDefinitionRouteOfAdministration._fts_dataType = 'AdministrableProductDefinitionRouteOfAdministration';
/**
 * A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).
 */
export class AdministrableProductDefinition extends fhir.DomainResource {
    /**
     * Default constructor for AdministrableProductDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AdministrableProductDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['formOf']) {
            this.formOf = source.formOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.formOf = [];
        }
        if (source['administrableDoseForm']) {
            this.administrableDoseForm = new fhir.CodeableConcept(source.administrableDoseForm, options);
        }
        if (source['unitOfPresentation']) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation, options);
        }
        if (source['producedFrom']) {
            this.producedFrom = source.producedFrom.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.producedFrom = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.ingredient = [];
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device, options);
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.AdministrableProductDefinitionProperty(x, options));
        }
        else {
            this.property = [];
        }
        if (source['routeOfAdministration']) {
            this.routeOfAdministration = source.routeOfAdministration.map((x) => new fhir.AdministrableProductDefinitionRouteOfAdministration(x, options));
        }
        else {
            this.routeOfAdministration = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdministrableProductDefinition';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOA('formOf', exp));
        iss.push(...this.vOS('administrableDoseForm', exp));
        iss.push(...this.vOS('unitOfPresentation', exp));
        iss.push(...this.vOA('producedFrom', exp));
        iss.push(...this.vOA('ingredient', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOA('property', exp));
        iss.push(...this.vRA('routeOfAdministration', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdministrableProductDefinition._fts_dataType = 'AdministrableProductDefinition';
//# sourceMappingURL=data:application/json;base64,