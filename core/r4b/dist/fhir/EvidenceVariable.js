// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: EvidenceVariable
import * as fhir from '../fhir.js';
// @ts-ignore
import { GroupMeasureVsValidation } from '../fhirValueSets/GroupMeasureVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { CharacteristicCombinationVsValidation } from '../fhirValueSets/CharacteristicCombinationVsValidation.js';
// @ts-ignore
import { VariableHandlingVsValidation } from '../fhirValueSets/VariableHandlingVsValidation.js';
/**
 * Indicates duration, period, or point of observation from the participant's study entry.
 */
export class EvidenceVariableCharacteristicTimeFromStart extends fhir.BackboneElement {
    /**
     * Default constructor for EvidenceVariableCharacteristicTimeFromStart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['range']) {
            this.range = new fhir.Range(source.range);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EvidenceVariable.characteristic.timeFromStart';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('range', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EvidenceVariableCharacteristicTimeFromStart._fts_dataType = 'EvidenceVariableCharacteristicTimeFromStart';
/**
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
export class EvidenceVariableCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for EvidenceVariableCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        else if (source['definitionReference']) {
            this.definition = new fhir.Reference(source.definitionReference);
        }
        else if (source['definitionCanonical']) {
            this.definition = new fhir.FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionCodeableConcept']) {
            this.definition = new fhir.CodeableConcept(source.definitionCodeableConcept);
        }
        else if (source['definitionExpression']) {
            this.definition = new fhir.Expression(source.definitionExpression);
        }
        else {
            this.definition = null;
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['exclude']) {
            this.exclude = new fhir.FhirBoolean({ value: source.exclude });
        }
        if (source['_exclude']) {
            if (this.exclude) {
                this.exclude.addExtendedProperties(source._exclude);
            }
            else {
                this.exclude = new fhir.FhirBoolean(source._exclude);
            }
        }
        if (source['timeFromStart']) {
            this.timeFromStart = new fhir.EvidenceVariableCharacteristicTimeFromStart(source.timeFromStart);
        }
        if (source['groupMeasure']) {
            this.groupMeasure = new fhir.FhirCode({ value: source.groupMeasure });
        }
        if (source['_groupMeasure']) {
            if (this.groupMeasure) {
                this.groupMeasure.addExtendedProperties(source._groupMeasure);
            }
            else {
                this.groupMeasure = new fhir.FhirCode(source._groupMeasure);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EvidenceVariable.characteristic';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vRS('definition', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOS('exclude', exp));
        iss.push(...this.vOS('timeFromStart', exp));
        iss.push(...this.vOSV('groupMeasure', exp, 'GroupMeasure', GroupMeasureVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EvidenceVariableCharacteristic._fts_dataType = 'EvidenceVariableCharacteristic';
/**
 * Internal flag to properly serialize choice-type element EvidenceVariable.characteristic.definition[x]
 */
EvidenceVariableCharacteristic._fts_definitionIsChoice = true;
/**
 * A grouping (or set of values) described along with other groupings to specify the set of groupings allowed for the variable.
 */
export class EvidenceVariableCategory extends fhir.BackboneElement {
    /**
     * Default constructor for EvidenceVariableCategory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EvidenceVariable.category';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EvidenceVariableCategory._fts_dataType = 'EvidenceVariableCategory';
/**
 * Internal flag to properly serialize choice-type element EvidenceVariable.category.value[x]
 */
EvidenceVariableCategory._fts_valueIsChoice = true;
/**
 * The EvidenceVariable resource describes an element that knowledge (Evidence) is about.
 */
export class EvidenceVariable extends fhir.DomainResource {
    /**
     * Default constructor for EvidenceVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EvidenceVariable';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['shortTitle']) {
            this.shortTitle = new fhir.FhirString({ value: source.shortTitle });
        }
        if (source['_shortTitle']) {
            if (this.shortTitle) {
                this.shortTitle.addExtendedProperties(source._shortTitle);
            }
            else {
                this.shortTitle = new fhir.FhirString(source._shortTitle);
            }
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['_subtitle']) {
            if (this.subtitle) {
                this.subtitle.addExtendedProperties(source._subtitle);
            }
            else {
                this.subtitle = new fhir.FhirString(source._subtitle);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['actual']) {
            this.actual = new fhir.FhirBoolean({ value: source.actual });
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual);
            }
        }
        if (source['characteristicCombination']) {
            this.characteristicCombination = new fhir.FhirCode({ value: source.characteristicCombination });
        }
        if (source['_characteristicCombination']) {
            if (this.characteristicCombination) {
                this.characteristicCombination.addExtendedProperties(source._characteristicCombination);
            }
            else {
                this.characteristicCombination = new fhir.FhirCode(source._characteristicCombination);
            }
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.EvidenceVariableCharacteristic(x));
        }
        else {
            this.characteristic = [];
        }
        if (source['handling']) {
            this.handling = new fhir.FhirCode({ value: source.handling });
        }
        if (source['_handling']) {
            if (this.handling) {
                this.handling.addExtendedProperties(source._handling);
            }
            else {
                this.handling = new fhir.FhirCode(source._handling);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.EvidenceVariableCategory(x));
        }
        else {
            this.category = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EvidenceVariable';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('shortTitle', exp));
        iss.push(...this.vOS('subtitle', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOA('editor', exp));
        iss.push(...this.vOA('reviewer', exp));
        iss.push(...this.vOA('endorser', exp));
        iss.push(...this.vOA('relatedArtifact', exp));
        iss.push(...this.vOS('actual', exp));
        iss.push(...this.vOSV('characteristicCombination', exp, 'CharacteristicCombination', CharacteristicCombinationVsValidation, 'r'));
        iss.push(...this.vOA('characteristic', exp));
        iss.push(...this.vOSV('handling', exp, 'VariableHandling', VariableHandlingVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EvidenceVariable._fts_dataType = 'EvidenceVariable';
//# sourceMappingURL=data:application/json;base64,