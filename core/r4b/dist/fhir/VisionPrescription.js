// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription
import * as fhir from '../fhir.js';
// @ts-ignore
import { VisionBaseVsValidation } from '../fhirValueSets/VisionBaseVsValidation.js';
// @ts-ignore
import { VisionEyeVsValidation } from '../fhirValueSets/VisionEyeVsValidation.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['amount']) {
            this.amount = new fhir.FhirDecimal({ value: source.amount });
        }
        else {
            this.amount = null;
        }
        if (source['_amount']) {
            if (this.amount) {
                this.amount.addExtendedProperties(source._amount);
            }
            else {
                this.amount = new fhir.FhirDecimal(source._amount);
            }
        }
        if (source['base']) {
            this.base = new fhir.FhirCode({ value: source.base });
        }
        else {
            this.base = null;
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCode(source._base);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription.lensSpecification.prism';
        }
        this.vRS('amount', exp);
        this.vRSV('base', exp, 'VisionBase', VisionBaseVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecificationPrism._fts_dataType = 'VisionPrescriptionLensSpecificationPrism';
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['product']) {
            this.product = new fhir.CodeableConcept(source.product);
        }
        else {
            this.product = null;
        }
        if (source['eye']) {
            this.eye = new fhir.FhirCode({ value: source.eye });
        }
        else {
            this.eye = null;
        }
        if (source['_eye']) {
            if (this.eye) {
                this.eye.addExtendedProperties(source._eye);
            }
            else {
                this.eye = new fhir.FhirCode(source._eye);
            }
        }
        if (source['sphere']) {
            this.sphere = new fhir.FhirDecimal({ value: source.sphere });
        }
        if (source['_sphere']) {
            if (this.sphere) {
                this.sphere.addExtendedProperties(source._sphere);
            }
            else {
                this.sphere = new fhir.FhirDecimal(source._sphere);
            }
        }
        if (source['cylinder']) {
            this.cylinder = new fhir.FhirDecimal({ value: source.cylinder });
        }
        if (source['_cylinder']) {
            if (this.cylinder) {
                this.cylinder.addExtendedProperties(source._cylinder);
            }
            else {
                this.cylinder = new fhir.FhirDecimal(source._cylinder);
            }
        }
        if (source['axis']) {
            this.axis = new fhir.FhirInteger({ value: source.axis });
        }
        if (source['_axis']) {
            if (this.axis) {
                this.axis.addExtendedProperties(source._axis);
            }
            else {
                this.axis = new fhir.FhirInteger(source._axis);
            }
        }
        if (source['prism']) {
            this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x));
        }
        else {
            this.prism = [];
        }
        if (source['add']) {
            this.add = new fhir.FhirDecimal({ value: source.add });
        }
        if (source['_add']) {
            if (this.add) {
                this.add.addExtendedProperties(source._add);
            }
            else {
                this.add = new fhir.FhirDecimal(source._add);
            }
        }
        if (source['power']) {
            this.power = new fhir.FhirDecimal({ value: source.power });
        }
        if (source['_power']) {
            if (this.power) {
                this.power.addExtendedProperties(source._power);
            }
            else {
                this.power = new fhir.FhirDecimal(source._power);
            }
        }
        if (source['backCurve']) {
            this.backCurve = new fhir.FhirDecimal({ value: source.backCurve });
        }
        if (source['_backCurve']) {
            if (this.backCurve) {
                this.backCurve.addExtendedProperties(source._backCurve);
            }
            else {
                this.backCurve = new fhir.FhirDecimal(source._backCurve);
            }
        }
        if (source['diameter']) {
            this.diameter = new fhir.FhirDecimal({ value: source.diameter });
        }
        if (source['_diameter']) {
            if (this.diameter) {
                this.diameter.addExtendedProperties(source._diameter);
            }
            else {
                this.diameter = new fhir.FhirDecimal(source._diameter);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source['color']) {
            this.color = new fhir.FhirString({ value: source.color });
        }
        if (source['_color']) {
            if (this.color) {
                this.color.addExtendedProperties(source._color);
            }
            else {
                this.color = new fhir.FhirString(source._color);
            }
        }
        if (source['brand']) {
            this.brand = new fhir.FhirString({ value: source.brand });
        }
        if (source['_brand']) {
            if (this.brand) {
                this.brand.addExtendedProperties(source._brand);
            }
            else {
                this.brand = new fhir.FhirString(source._brand);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription.lensSpecification';
        }
        this.vRS('product', exp);
        this.vRSV('eye', exp, 'VisionEye', VisionEyeVsValidation, 'r');
        this.vOS('sphere', exp);
        this.vOS('cylinder', exp);
        this.vOS('axis', exp);
        this.vOA('prism', exp);
        this.vOS('add', exp);
        this.vOS('power', exp);
        this.vOS('backCurve', exp);
        this.vOS('diameter', exp);
        this.vOS('duration', exp);
        this.vOS('color', exp);
        this.vOS('brand', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecification._fts_dataType = 'VisionPrescriptionLensSpecification';
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VisionPrescription';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateWritten']) {
            this.dateWritten = new fhir.FhirDateTime({ value: source.dateWritten });
        }
        else {
            this.dateWritten = null;
        }
        if (source['_dateWritten']) {
            if (this.dateWritten) {
                this.dateWritten.addExtendedProperties(source._dateWritten);
            }
            else {
                this.dateWritten = new fhir.FhirDateTime(source._dateWritten);
            }
        }
        if (source['prescriber']) {
            this.prescriber = new fhir.Reference(source.prescriber);
        }
        else {
            this.prescriber = null;
        }
        if (source['lensSpecification']) {
            this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x));
        }
        else {
            this.lensSpecification = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r');
        this.vRS('created', exp);
        this.vRS('patient', exp);
        this.vOS('encounter', exp);
        this.vRS('dateWritten', exp);
        this.vRS('prescriber', exp);
        this.vRA('lensSpecification', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescription._fts_dataType = 'VisionPrescription';
//# sourceMappingURL=data:application/json;base64,