// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Ingredient
import * as fhir from '../fhir.js';
// @ts-ignore
import { IngredientManufacturerRoleVsValidation } from '../fhirValueSets/IngredientManufacturerRoleVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
 */
export class IngredientManufacturer extends fhir.BackboneElement {
    /**
     * Default constructor for IngredientManufacturer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role'] !== undefined) {
            this.role = new fhir.FhirCode({ value: source.role }, options);
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirCode(source._role, options);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer, options);
        }
        else {
            this.manufacturer = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Ingredient.manufacturer';
        }
        iss.push(...this.vOSV('role', exp, 'IngredientManufacturerRole', IngredientManufacturerRoleVsValidation, 'r'));
        iss.push(...this.vRS('manufacturer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
IngredientManufacturer._fts_dataType = 'IngredientManufacturer';
/**
 * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
 */
export class IngredientSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for IngredientSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableReference(source.substance, options);
        }
        if (source['strength']) {
            this.strength = source.strength;
        }
        else if (source['strengthRatio']) {
            this.strength = new fhir.Ratio(source.strengthRatio, options);
        }
        else if (source['strengthRatioRange']) {
            this.strength = new fhir.RatioRange(source.strengthRatioRange, options);
        }
        else {
            this.strength = null;
        }
        if (source['measurementPoint'] !== undefined) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint }, options);
        }
        if (source['_measurementPoint']) {
            if (this.measurementPoint) {
                this.measurementPoint.addExtendedProperties(source._measurementPoint);
            }
            else {
                this.measurementPoint = new fhir.FhirString(source._measurementPoint, options);
            }
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.country = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Ingredient.substance.strength.referenceStrength';
        }
        iss.push(...this.vOS('substance', exp));
        iss.push(...this.vRS('strength', exp));
        iss.push(...this.vOS('measurementPoint', exp));
        iss.push(...this.vOA('country', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
IngredientSubstanceStrengthReferenceStrength._fts_dataType = 'IngredientSubstanceStrengthReferenceStrength';
/**
 * Internal flag to properly serialize choice-type element Ingredient.substance.strength.referenceStrength.strength[x]
 */
IngredientSubstanceStrengthReferenceStrength._fts_strengthIsChoice = true;
/**
 * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
 */
export class IngredientSubstanceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for IngredientSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['presentation']) {
            this.presentation = source.presentation;
        }
        else if (source['presentationRatio']) {
            this.presentation = new fhir.Ratio(source.presentationRatio, options);
        }
        else if (source['presentationRatioRange']) {
            this.presentation = new fhir.RatioRange(source.presentationRatioRange, options);
        }
        if (source['textPresentation'] !== undefined) {
            this.textPresentation = new fhir.FhirString({ value: source.textPresentation }, options);
        }
        if (source['_textPresentation']) {
            if (this.textPresentation) {
                this.textPresentation.addExtendedProperties(source._textPresentation);
            }
            else {
                this.textPresentation = new fhir.FhirString(source._textPresentation, options);
            }
        }
        if (source['concentration']) {
            this.concentration = source.concentration;
        }
        else if (source['concentrationRatio']) {
            this.concentration = new fhir.Ratio(source.concentrationRatio, options);
        }
        else if (source['concentrationRatioRange']) {
            this.concentration = new fhir.RatioRange(source.concentrationRatioRange, options);
        }
        if (source['textConcentration'] !== undefined) {
            this.textConcentration = new fhir.FhirString({ value: source.textConcentration }, options);
        }
        if (source['_textConcentration']) {
            if (this.textConcentration) {
                this.textConcentration.addExtendedProperties(source._textConcentration);
            }
            else {
                this.textConcentration = new fhir.FhirString(source._textConcentration, options);
            }
        }
        if (source['measurementPoint'] !== undefined) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint }, options);
        }
        if (source['_measurementPoint']) {
            if (this.measurementPoint) {
                this.measurementPoint.addExtendedProperties(source._measurementPoint);
            }
            else {
                this.measurementPoint = new fhir.FhirString(source._measurementPoint, options);
            }
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.country = [];
        }
        if (source['referenceStrength']) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhir.IngredientSubstanceStrengthReferenceStrength(x, options));
        }
        else {
            this.referenceStrength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Ingredient.substance.strength';
        }
        iss.push(...this.vOS('presentation', exp));
        iss.push(...this.vOS('textPresentation', exp));
        iss.push(...this.vOS('concentration', exp));
        iss.push(...this.vOS('textConcentration', exp));
        iss.push(...this.vOS('measurementPoint', exp));
        iss.push(...this.vOA('country', exp));
        iss.push(...this.vOA('referenceStrength', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
IngredientSubstanceStrength._fts_dataType = 'IngredientSubstanceStrength';
/**
 * Internal flag to properly serialize choice-type element Ingredient.substance.strength.presentation[x]
 */
IngredientSubstanceStrength._fts_presentationIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Ingredient.substance.strength.concentration[x]
 */
IngredientSubstanceStrength._fts_concentrationIsChoice = true;
/**
 * The substance that comprises this ingredient.
 */
export class IngredientSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for IngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableReference(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.IngredientSubstanceStrength(x, options));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Ingredient.substance';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOA('strength', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
IngredientSubstance._fts_dataType = 'IngredientSubstance';
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class Ingredient extends fhir.DomainResource {
    /**
     * Default constructor for Ingredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Ingredient';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['for']) {
            this.for = source.for.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.for = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        else {
            this.role = null;
        }
        if (source['function']) {
            this.function = source.function.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.function = [];
        }
        if (source['allergenicIndicator'] !== undefined) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator }, options);
        }
        if (source['_allergenicIndicator']) {
            if (this.allergenicIndicator) {
                this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator);
            }
            else {
                this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator, options);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.IngredientManufacturer(x, options));
        }
        else {
            this.manufacturer = [];
        }
        if (source['substance']) {
            this.substance = new fhir.IngredientSubstance(source.substance, options);
        }
        else {
            this.substance = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Ingredient';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOA('for', exp));
        iss.push(...this.vRS('role', exp));
        iss.push(...this.vOA('function', exp));
        iss.push(...this.vOS('allergenicIndicator', exp));
        iss.push(...this.vOA('manufacturer', exp));
        iss.push(...this.vRS('substance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Ingredient._fts_dataType = 'Ingredient';
//# sourceMappingURL=data:application/json;base64,