// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: SearchParameter
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { SearchXpathUsageVsValidation } from '../fhirValueSets/SearchXpathUsageVsValidation.js';
// @ts-ignore
import { SearchComparatorVsValidation } from '../fhirValueSets/SearchComparatorVsValidation.js';
// @ts-ignore
import { SearchModifierVsValidation } from '../fhirValueSets/SearchModifierVsValidation.js';
/**
 * Used to define the parts of a composite search parameter.
 */
export class SearchParameterComponent extends fhir.BackboneElement {
    /**
     * Default constructor for SearchParameterComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['definition'] !== undefined) {
            this.definition = new fhir.FhirCanonical({ value: source.definition }, options);
        }
        else {
            this.definition = null;
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition, options);
            }
        }
        if (source['expression'] !== undefined) {
            this.expression = new fhir.FhirString({ value: source.expression }, options);
        }
        else {
            this.expression = null;
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SearchParameter.component';
        }
        iss.push(...this.vRS('definition', exp));
        iss.push(...this.vRS('expression', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SearchParameterComponent._fts_dataType = 'SearchParameterComponent';
/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
export class SearchParameter extends fhir.DomainResource {
    /**
     * Default constructor for SearchParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SearchParameter';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['derivedFrom'] !== undefined) {
            this.derivedFrom = new fhir.FhirCanonical({ value: source.derivedFrom }, options);
        }
        if (source['_derivedFrom']) {
            if (this.derivedFrom) {
                this.derivedFrom.addExtendedProperties(source._derivedFrom);
            }
            else {
                this.derivedFrom = new fhir.FhirCanonical(source._derivedFrom, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['base'] !== undefined) {
            this.base = source.base.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.base = [];
        }
        if (source['_base']) {
            source._base.forEach((x, i) => {
                if (this.base.length >= i) {
                    if (x) {
                        this.base[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.base.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['expression'] !== undefined) {
            this.expression = new fhir.FhirString({ value: source.expression }, options);
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression, options);
            }
        }
        if (source['xpath'] !== undefined) {
            this.xpath = new fhir.FhirString({ value: source.xpath }, options);
        }
        if (source['_xpath']) {
            if (this.xpath) {
                this.xpath.addExtendedProperties(source._xpath);
            }
            else {
                this.xpath = new fhir.FhirString(source._xpath, options);
            }
        }
        if (source['xpathUsage'] !== undefined) {
            this.xpathUsage = new fhir.FhirCode({ value: source.xpathUsage }, options);
        }
        if (source['_xpathUsage']) {
            if (this.xpathUsage) {
                this.xpathUsage.addExtendedProperties(source._xpathUsage);
            }
            else {
                this.xpathUsage = new fhir.FhirCode(source._xpathUsage, options);
            }
        }
        if (source['target'] !== undefined) {
            this.target = source.target.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.target = [];
        }
        if (source['_target']) {
            source._target.forEach((x, i) => {
                if (this.target.length >= i) {
                    if (x) {
                        this.target[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.target.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['multipleOr'] !== undefined) {
            this.multipleOr = new fhir.FhirBoolean({ value: source.multipleOr }, options);
        }
        if (source['_multipleOr']) {
            if (this.multipleOr) {
                this.multipleOr.addExtendedProperties(source._multipleOr);
            }
            else {
                this.multipleOr = new fhir.FhirBoolean(source._multipleOr, options);
            }
        }
        if (source['multipleAnd'] !== undefined) {
            this.multipleAnd = new fhir.FhirBoolean({ value: source.multipleAnd }, options);
        }
        if (source['_multipleAnd']) {
            if (this.multipleAnd) {
                this.multipleAnd.addExtendedProperties(source._multipleAnd);
            }
            else {
                this.multipleAnd = new fhir.FhirBoolean(source._multipleAnd, options);
            }
        }
        if (source['comparator'] !== undefined) {
            this.comparator = source.comparator.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.comparator = [];
        }
        if (source['_comparator']) {
            source._comparator.forEach((x, i) => {
                if (this.comparator.length >= i) {
                    if (x) {
                        this.comparator[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.comparator.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['modifier'] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.modifier = [];
        }
        if (source['_modifier']) {
            source._modifier.forEach((x, i) => {
                if (this.modifier.length >= i) {
                    if (x) {
                        this.modifier[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.modifier.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['chain'] !== undefined) {
            this.chain = source.chain.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.chain = [];
        }
        if (source['_chain']) {
            source._chain.forEach((x, i) => {
                if (this.chain.length >= i) {
                    if (x) {
                        this.chain[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.chain.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.SearchParameterComponent(x, options));
        }
        else {
            this.component = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SearchParameter';
        }
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('derivedFrom', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRAV('base', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vRSV('type', exp, 'SearchParamType', SearchParamTypeVsValidation, 'r'));
        iss.push(...this.vOS('expression', exp));
        iss.push(...this.vOS('xpath', exp));
        iss.push(...this.vOSV('xpathUsage', exp, 'SearchXpathUsage', SearchXpathUsageVsValidation, 'r'));
        iss.push(...this.vOAV('target', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOS('multipleOr', exp));
        iss.push(...this.vOS('multipleAnd', exp));
        iss.push(...this.vOAV('comparator', exp, 'SearchComparator', SearchComparatorVsValidation, 'r'));
        iss.push(...this.vOAV('modifier', exp, 'SearchModifier', SearchModifierVsValidation, 'r'));
        iss.push(...this.vOA('chain', exp));
        iss.push(...this.vOA('component', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SearchParameter._fts_dataType = 'SearchParameter';
//# sourceMappingURL=data:application/json;base64,