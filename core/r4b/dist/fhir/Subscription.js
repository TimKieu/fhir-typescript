// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Subscription
import * as fhir from '../fhir.js';
// @ts-ignore
import { SubscriptionChannelTypeVsValidation } from '../fhirValueSets/SubscriptionChannelTypeVsValidation.js';
// @ts-ignore
import { SubscriptionStatusVsValidation } from '../fhirValueSets/SubscriptionStatusVsValidation.js';
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
export class SubscriptionChannel extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionChannel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUrl({ value: source.endpoint });
        }
        if (source['_endpoint']) {
            if (this.endpoint) {
                this.endpoint.addExtendedProperties(source._endpoint);
            }
            else {
                this.endpoint = new fhir.FhirUrl(source._endpoint);
            }
        }
        if (source['payload']) {
            this.payload = new fhir.FhirCode({ value: source.payload });
        }
        if (source['_payload']) {
            if (this.payload) {
                this.payload.addExtendedProperties(source._payload);
            }
            else {
                this.payload = new fhir.FhirCode(source._payload);
            }
        }
        if (source['header']) {
            this.header = source.header.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.header = [];
        }
        if (source['_header']) {
            source._header.forEach((x, i) => {
                if (this.header.length >= i) {
                    if (x) {
                        this.header[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.header.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Subscription.channel';
        }
        this.vRSV('type', exp, 'SubscriptionChannelType', SubscriptionChannelTypeVsValidation, 'r');
        this.vOS('endpoint', exp);
        this.vOS('payload', exp);
        this.vOA('header', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionChannel._fts_dataType = 'SubscriptionChannel';
/**
 * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
 */
export class Subscription extends fhir.DomainResource {
    /**
     * Default constructor for Subscription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Subscription';
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['end']) {
            this.end = new fhir.FhirInstant({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end);
            }
        }
        if (source['reason']) {
            this.reason = new fhir.FhirString({ value: source.reason });
        }
        else {
            this.reason = null;
        }
        if (source['_reason']) {
            if (this.reason) {
                this.reason.addExtendedProperties(source._reason);
            }
            else {
                this.reason = new fhir.FhirString(source._reason);
            }
        }
        if (source['criteria']) {
            this.criteria = new fhir.FhirString({ value: source.criteria });
        }
        else {
            this.criteria = null;
        }
        if (source['_criteria']) {
            if (this.criteria) {
                this.criteria.addExtendedProperties(source._criteria);
            }
            else {
                this.criteria = new fhir.FhirString(source._criteria);
            }
        }
        if (source['error']) {
            this.error = new fhir.FhirString({ value: source.error });
        }
        if (source['_error']) {
            if (this.error) {
                this.error.addExtendedProperties(source._error);
            }
            else {
                this.error = new fhir.FhirString(source._error);
            }
        }
        if (source['channel']) {
            this.channel = new fhir.SubscriptionChannel(source.channel);
        }
        else {
            this.channel = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Subscription';
        }
        this.vRS('resourceType', exp);
        this.vRSV('status', exp, 'SubscriptionStatus', SubscriptionStatusVsValidation, 'r');
        this.vOA('contact', exp);
        this.vOS('end', exp);
        this.vRS('reason', exp);
        this.vRS('criteria', exp);
        this.vOS('error', exp);
        this.vRS('channel', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Subscription._fts_dataType = 'Subscription';
//# sourceMappingURL=data:application/json;base64,