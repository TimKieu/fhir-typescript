// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Reference
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpckpzb24vUmVmZXJlbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixnREFBZ0Q7QUFDaEQsa0NBQWtDO0FBQ2xDLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNGIuY29yZSB2ZXJzaW9uOiA0LjMuMFxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgQ29tcGxleFR5cGU6IFJlZmVyZW5jZVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlySnNvbi5qcyc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEEgcmVmZXJlbmNlIGZyb20gb25lIHJlc291cmNlIHRvIGFub3RoZXIuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlZmVyZW5jZSBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBVc2luZyBhYnNvbHV0ZSBVUkxzIHByb3ZpZGVzIGEgc3RhYmxlIHNjYWxhYmxlIGFwcHJvYWNoIHN1aXRhYmxlIGZvciBhIGNsb3VkL3dlYiBjb250ZXh0LCB3aGlsZSB1c2luZyByZWxhdGl2ZS9sb2dpY2FsIHJlZmVyZW5jZXMgcHJvdmlkZXMgYSBmbGV4aWJsZSBhcHByb2FjaCBzdWl0YWJsZSBmb3IgdXNlIHdoZW4gdHJhZGluZyBhY3Jvc3MgY2xvc2VkIGVjby1zeXN0ZW0gYm91bmRhcmllcy4gICBBYnNvbHV0ZSBVUkxzIGRvIG5vdCBuZWVkIHRvIHBvaW50IHRvIGEgRkhJUiBSRVNUZnVsIHNlcnZlciwgdGhvdWdoIHRoaXMgaXMgdGhlIHByZWZlcnJlZCBhcHByb2FjaC4gSWYgdGhlIFVSTCBjb25mb3JtcyB0byB0aGUgc3RydWN0dXJlIFwiL1t0eXBlXS9baWRdXCIgdGhlbiBpdCBzaG91bGQgYmUgYXNzdW1lZCB0aGF0IHRoZSByZWZlcmVuY2UgaXMgdG8gYSBGSElSIFJFU1RmdWwgc2VydmVyLlxyXG4gICAqL1xyXG4gIHJlZmVyZW5jZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlZmVyZW5jZS5yZWZlcmVuY2VcclxuICAgKi9cclxuICBfcmVmZXJlbmNlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyB1c2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mICB0aGUgdGFyZ2V0IG9mIHRoZSByZWZlcmVuY2UuIFRoaXMgbWF5IGJlIHVzZWQgd2hpY2ggZXZlciBvZiB0aGUgb3RoZXIgZWxlbWVudHMgYXJlIHBvcHVsYXRlZCAob3Igbm90KS4gSW4gc29tZSBjYXNlcywgdGhlIHR5cGUgb2YgdGhlIHRhcmdldCBtYXkgYmUgZGV0ZXJtaW5lZCBieSBpbnNwZWN0aW9uIG9mIHRoZSByZWZlcmVuY2UgKGUuZy4gYSBSRVNUZnVsIFVSTCkgb3IgYnkgcmVzb2x2aW5nIHRoZSB0YXJnZXQgb2YgdGhlIHJlZmVyZW5jZTsgaWYgYm90aCB0aGUgdHlwZSBhbmQgYSByZWZlcmVuY2UgaXMgcHJvdmlkZWQsIHRoZSByZWZlcmVuY2UgU0hBTEwgcmVzb2x2ZSB0byBhIHJlc291cmNlIG9mIHRoZSBzYW1lIHR5cGUgYXMgdGhhdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgdHlwZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlZmVyZW5jZS50eXBlXHJcbiAgICovXHJcbiAgX3R5cGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBhbiBpZGVudGlmaWVyIGlzIHByb3ZpZGVkIGluIHBsYWNlIG9mIGEgcmVmZXJlbmNlLCBhbnkgc3lzdGVtIHByb2Nlc3NpbmcgdGhlIHJlZmVyZW5jZSB3aWxsIG9ubHkgYmUgYWJsZSB0byByZXNvbHZlIHRoZSBpZGVudGlmaWVyIHRvIGEgcmVmZXJlbmNlIGlmIGl0IHVuZGVyc3RhbmRzIHRoZSBidXNpbmVzcyBjb250ZXh0IGluIHdoaWNoIHRoZSBpZGVudGlmaWVyIGlzIHVzZWQuIFNvbWV0aW1lcyB0aGlzIGlzIGdsb2JhbCAoZS5nLiBhIG5hdGlvbmFsIGlkZW50aWZpZXIpIGJ1dCBvZnRlbiBpdCBpcyBub3QuIEZvciB0aGlzIHJlYXNvbiwgbm9uZSBvZiB0aGUgdXNlZnVsIG1lY2hhbmlzbXMgZGVzY3JpYmVkIGZvciB3b3JraW5nIHdpdGggcmVmZXJlbmNlcyAoZS5nLiBjaGFpbmluZywgaW5jbHVkZXMpIGFyZSBwb3NzaWJsZSwgbm9yIHNob3VsZCBzZXJ2ZXJzIGJlIGV4cGVjdGVkIHRvIGJlIGFibGUgcmVzb2x2ZSB0aGUgcmVmZXJlbmNlLiBTZXJ2ZXJzIG1heSBhY2NlcHQgYW4gaWRlbnRpZmllciBiYXNlZCByZWZlcmVuY2UgdW50b3VjaGVkLCByZXNvbHZlIGl0LCBhbmQvb3IgcmVqZWN0IGl0IC0gc2VlIENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5yZWZlcmVuY2VQb2xpY3kuIFxyXG4gICAqIFdoZW4gYm90aCBhbiBpZGVudGlmaWVyIGFuZCBhIGxpdGVyYWwgcmVmZXJlbmNlIGFyZSBwcm92aWRlZCwgdGhlIGxpdGVyYWwgcmVmZXJlbmNlIGlzIHByZWZlcnJlZC4gQXBwbGljYXRpb25zIHByb2Nlc3NpbmcgdGhlIHJlc291cmNlIGFyZSBhbGxvd2VkIC0gYnV0IG5vdCByZXF1aXJlZCAtIHRvIGNoZWNrIHRoYXQgdGhlIGlkZW50aWZpZXIgbWF0Y2hlcyB0aGUgbGl0ZXJhbCByZWZlcmVuY2VcclxuICAgKiBBcHBsaWNhdGlvbnMgY29udmVydGluZyBhIGxvZ2ljYWwgcmVmZXJlbmNlIHRvIGEgbGl0ZXJhbCByZWZlcmVuY2UgbWF5IGNob29zZSB0byBsZWF2ZSB0aGUgbG9naWNhbCByZWZlcmVuY2UgcHJlc2VudCwgb3IgcmVtb3ZlIGl0LlxyXG4gICAqIFJlZmVyZW5jZSBpcyBpbnRlbmRlZCB0byBwb2ludCB0byBhIHN0cnVjdHVyZSB0aGF0IGNhbiBwb3RlbnRpYWxseSBiZSBleHByZXNzZWQgYXMgYSBGSElSIHJlc291cmNlLCB0aG91Z2ggdGhlcmUgaXMgbm8gbmVlZCBmb3IgaXQgdG8gZXhpc3QgYXMgYW4gYWN0dWFsIEZISVIgcmVzb3VyY2UgaW5zdGFuY2UgLSBleGNlcHQgaW4gYXMgbXVjaCBhcyBhbiBhcHBsaWNhdGlvbiB3aXNoZXMgdG8gYWN0dWFsIGZpbmQgdGhlIHRhcmdldCBvZiB0aGUgcmVmZXJlbmNlLiBUaGUgY29udGVudCByZWZlcnJlZCB0byBiZSB0aGUgaWRlbnRpZmllciBtdXN0IG1lZXQgdGhlIGxvZ2ljYWwgY29uc3RyYWludHMgaW1wbGllZCBieSBhbnkgbGltaXRhdGlvbnMgb24gd2hhdCByZXNvdXJjZSB0eXBlcyBhcmUgcGVybWl0dGVkIGZvciB0aGUgcmVmZXJlbmNlLiAgRm9yIGV4YW1wbGUsIGl0IHdvdWxkIG5vdCBiZSBsZWdpdGltYXRlIHRvIHNlbmQgdGhlIGlkZW50aWZpZXIgZm9yIGEgZHJ1ZyBwcmVzY3JpcHRpb24gaWYgdGhlIHR5cGUgd2VyZSBSZWZlcmVuY2UoT2JzZXJ2YXRpb258RGlhZ25vc3RpY1JlcG9ydCkuICBPbmUgb2YgdGhlIHVzZS1jYXNlcyBmb3IgUmVmZXJlbmNlLmlkZW50aWZpZXIgaXMgdGhlIHNpdHVhdGlvbiB3aGVyZSBubyBGSElSIHJlcHJlc2VudGF0aW9uIGV4aXN0cyAod2hlcmUgdGhlIHR5cGUgaXMgUmVmZXJlbmNlIChBbnkpLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IG5vdCB0aGUgc2FtZSBhcyB0aGUgUmVzb3VyY2UudGV4dCBvZiB0aGUgcmVmZXJlbmNlZCByZXNvdXJjZS4gIFRoZSBwdXJwb3NlIGlzIHRvIGlkZW50aWZ5IHdoYXQncyBiZWluZyByZWZlcmVuY2VkLCBub3QgdG8gZnVsbHkgZGVzY3JpYmUgaXQuXHJcbiAgICovXHJcbiAgZGlzcGxheT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlZmVyZW5jZS5kaXNwbGF5XHJcbiAgICovXHJcbiAgX2Rpc3BsYXk/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuIl19