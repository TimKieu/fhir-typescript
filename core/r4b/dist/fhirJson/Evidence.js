// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Evidence
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Evidence.js","sourceRoot":"./src/","sources":["fhirJson/Evidence.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,gDAAgD;AAChD,kCAAkC;AAClC,0BAA0B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4b.core version: 4.3.0\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Evidence\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Evidence variable such as population, exposure, or outcome.\r\n */\r\nexport interface EvidenceVariableDefinition extends fhir.BackboneElement { \r\n  /**\r\n   * A text description or summary of the variable.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.variableDefinition.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Footnotes and/or explanatory notes.\r\n   */\r\n  note?: (fhir.Annotation|null)[]|undefined;\r\n  /**\r\n   * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.\r\n   */\r\n  variableRole: fhir.CodeableConcept|null;\r\n  /**\r\n   * Definition of the actual variable related to the statistic(s).\r\n   */\r\n  observed?: fhir.Reference|undefined;\r\n  /**\r\n   * Definition of the intended variable related to the Evidence.\r\n   */\r\n  intended?: fhir.Reference|undefined;\r\n  /**\r\n   * Indication of quality of match between intended variable to actual variable.\r\n   */\r\n  directnessMatch?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Number of samples in the statistic.\r\n */\r\nexport interface EvidenceStatisticSampleSize extends fhir.BackboneElement { \r\n  /**\r\n   * Human-readable summary of population sample size.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.sampleSize.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Footnote or explanatory note about the sample size.\r\n   */\r\n  note?: (fhir.Annotation|null)[]|undefined;\r\n  /**\r\n   * Number of participants in the population.\r\n   */\r\n  numberOfStudies?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.sampleSize.numberOfStudies\r\n   */\r\n  _numberOfStudies?:fhir.FhirElement;\r\n  /**\r\n   * A human-readable string to clarify or explain concepts about the sample size.\r\n   */\r\n  numberOfParticipants?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.sampleSize.numberOfParticipants\r\n   */\r\n  _numberOfParticipants?:fhir.FhirElement;\r\n  /**\r\n   * Number of participants with known results for measured variables.\r\n   */\r\n  knownDataCount?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.sampleSize.knownDataCount\r\n   */\r\n  _knownDataCount?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A statistical attribute of the statistic such as a measure of heterogeneity.\r\n */\r\nexport interface EvidenceStatisticAttributeEstimate extends fhir.BackboneElement { \r\n  /**\r\n   * Human-readable summary of the estimate.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.attributeEstimate.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Footnote or explanatory note about the estimate.\r\n   */\r\n  note?: (fhir.Annotation|null)[]|undefined;\r\n  /**\r\n   * The type of attribute estimate, eg confidence interval or p value.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Often the p value\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Use 95 for a 95% confidence interval.\r\n   */\r\n  level?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.attributeEstimate.level\r\n   */\r\n  _level?:fhir.FhirElement;\r\n  /**\r\n   * Lower bound of confidence interval.\r\n   */\r\n  range?: fhir.Range|undefined;\r\n  /**\r\n   * A nested attribute estimate; which is the attribute estimate of an attribute estimate\r\n   */\r\n  attributeEstimate?: (fhir.EvidenceStatisticAttributeEstimate|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A variable adjusted for in the adjusted analysis.\r\n */\r\nexport interface EvidenceStatisticModelCharacteristicVariable extends fhir.BackboneElement { \r\n  /**\r\n   * Description of the variable.\r\n   */\r\n  variableDefinition: fhir.Reference|null;\r\n  /**\r\n   * How the variable is classified for use in adjusted analysis.\r\n   */\r\n  handling?: 'continuous'|'dichotomous'|'ordinal'|'polychotomous'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.modelCharacteristic.variable.handling\r\n   */\r\n  _handling?:fhir.FhirElement;\r\n  /**\r\n   * Description for grouping of ordinal or polychotomous variables.\r\n   */\r\n  valueCategory?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * Discrete value for grouping of ordinal or polychotomous variables.\r\n   */\r\n  valueQuantity?: (fhir.Quantity|null)[]|undefined;\r\n  /**\r\n   * Range of values for grouping of ordinal or polychotomous variables.\r\n   */\r\n  valueRange?: (fhir.Range|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A component of the method to generate the statistic.\r\n */\r\nexport interface EvidenceStatisticModelCharacteristic extends fhir.BackboneElement { \r\n  /**\r\n   * Description of a component of the method to generate the statistic.\r\n   */\r\n  code: fhir.CodeableConcept|null;\r\n  /**\r\n   * Further specification of the quantified value of the component of the method to generate the statistic.\r\n   */\r\n  value?: fhir.Quantity|undefined;\r\n  /**\r\n   * A variable adjusted for in the adjusted analysis.\r\n   */\r\n  variable?: (fhir.EvidenceStatisticModelCharacteristicVariable|null)[]|undefined;\r\n  /**\r\n   * An attribute of the statistic used as a model characteristic.\r\n   */\r\n  attributeEstimate?: (fhir.EvidenceStatisticAttributeEstimate|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Values and parameters for a single statistic.\r\n */\r\nexport interface EvidenceStatistic extends fhir.BackboneElement { \r\n  /**\r\n   * A description of the content value of the statistic.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Footnotes and/or explanatory notes.\r\n   */\r\n  note?: (fhir.Annotation|null)[]|undefined;\r\n  /**\r\n   * Type of statistic, eg relative risk.\r\n   */\r\n  statisticType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Simple strings can be used for descriptive purposes. Exact matching to EvidenceVariable.category.name for the Evidence.variableDefinition[variableRole=measuredVariable].observed=Reference(EvidenceVariable) could facilitate validation within datasets.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Statistic value.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * When the number of events is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberOfEvents to record the total number of events rather than the number of participants with events.\r\n   */\r\n  numberOfEvents?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.numberOfEvents\r\n   */\r\n  _numberOfEvents?:fhir.FhirElement;\r\n  /**\r\n   * When the number affected is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is a Proportion, use Evidence.statistic.numberAffected and enter an integer as the value. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberAffected to record the number of participants with events rather than the total number of events.\r\n   */\r\n  numberAffected?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.statistic.numberAffected\r\n   */\r\n  _numberAffected?:fhir.FhirElement;\r\n  /**\r\n   * Number of samples in the statistic.\r\n   */\r\n  sampleSize?: fhir.EvidenceStatisticSampleSize|undefined;\r\n  /**\r\n   * A statistical attribute of the statistic such as a measure of heterogeneity.\r\n   */\r\n  attributeEstimate?: (fhir.EvidenceStatisticAttributeEstimate|null)[]|undefined;\r\n  /**\r\n   * A component of the method to generate the statistic.\r\n   */\r\n  modelCharacteristic?: (fhir.EvidenceStatisticModelCharacteristic|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Assessment of certainty, confidence in the estimates, or quality of the evidence.\r\n */\r\nexport interface EvidenceCertainty extends fhir.BackboneElement { \r\n  /**\r\n   * Textual description of certainty.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.certainty.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Footnotes and/or explanatory notes.\r\n   */\r\n  note?: (fhir.Annotation|null)[]|undefined;\r\n  /**\r\n   * Aspect of certainty being rated.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Assessment or judgement of the aspect.\r\n   */\r\n  rating?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Individual or group who did the rating.\r\n   */\r\n  rater?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.certainty.rater\r\n   */\r\n  _rater?:fhir.FhirElement;\r\n  /**\r\n   * A domain or subdomain of certainty.\r\n   */\r\n  subcomponent?: (fhir.EvidenceCertainty|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (eg population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.\r\n */\r\nexport interface Evidence extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Evidence\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Citation Resource or display of suggested citation for this evidence.\r\n   */\r\n  citeAsReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Citation Resource or display of suggested citation for this evidence.\r\n   */\r\n  citeAsMarkdown?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.citeAs[x]\r\n   */\r\n  _citeAsMarkdown?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of summarys s that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the summary. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.\r\n   */\r\n  approvalDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.approvalDate\r\n   */\r\n  _approvalDate?:fhir.FhirElement;\r\n  /**\r\n   * If specified, this date follows the original approval date.\r\n   */\r\n  lastReviewDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.lastReviewDate\r\n   */\r\n  _lastReviewDate?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the evidence is the organization or individual primarily responsible for the maintenance and upkeep of the evidence. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).\r\n   */\r\n  author?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).\r\n   */\r\n  editor?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).\r\n   */\r\n  reviewer?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (Details at: http://build.fhir.org/clinicalreasoning-module.html).\r\n   */\r\n  endorser?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * Link or citation to artifact associated with the summary.\r\n   */\r\n  relatedArtifact?: (fhir.RelatedArtifact|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the evidence was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence is presumed to be the predominant language in the place the evidence was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Declarative description of the Evidence.\r\n   */\r\n  assertion?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Evidence.assertion\r\n   */\r\n  _assertion?:fhir.FhirElement;\r\n  /**\r\n   * Footnotes and/or explanatory notes.\r\n   */\r\n  note?: (fhir.Annotation|null)[]|undefined;\r\n  /**\r\n   * Evidence variable such as population, exposure, or outcome.\r\n   */\r\n  variableDefinition: (fhir.EvidenceVariableDefinition|null)[]|null;\r\n  /**\r\n   * The method to combine studies.\r\n   */\r\n  synthesisType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The type of study that produced this evidence.\r\n   */\r\n  studyType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Values and parameters for a single statistic.\r\n   */\r\n  statistic?: (fhir.EvidenceStatistic|null)[]|undefined;\r\n  /**\r\n   * Assessment of certainty, confidence in the estimates, or quality of the evidence.\r\n   */\r\n  certainty?: (fhir.EvidenceCertainty|null)[]|undefined;\r\n}\r\n"]}