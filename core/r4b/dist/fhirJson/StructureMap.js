// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureMap
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"StructureMap.js","sourceRoot":"./src/","sources":["fhirJson/StructureMap.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,gDAAgD;AAChD,kCAAkC;AAClC,8BAA8B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4b.core version: 4.3.0\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: StructureMap\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.\r\n */\r\nexport interface StructureMapStructure extends fhir.BackboneElement { \r\n  /**\r\n   * The canonical reference to the structure.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.structure.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * How the referenced structure is used in this mapping.\r\n   */\r\n  mode: 'produced'|'queried'|'source'|'target'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.structure.mode\r\n   */\r\n  _mode?:fhir.FhirElement;\r\n  /**\r\n   * This is needed if both types have the same name (e.g. version conversion).\r\n   */\r\n  alias?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.structure.alias\r\n   */\r\n  _alias?:fhir.FhirElement;\r\n  /**\r\n   * Documentation that describes how the structure is used in the mapping.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.structure.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * If no inputs are named, then the entry mappings are type based.\r\n */\r\nexport interface StructureMapGroupInput extends fhir.BackboneElement { \r\n  /**\r\n   * Name for this instance of data.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.input.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Type for this instance of data.\r\n   */\r\n  type?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.input.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Mode for this instance of data.\r\n   */\r\n  mode: 'source'|'target'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.input.mode\r\n   */\r\n  _mode?:fhir.FhirElement;\r\n  /**\r\n   * Documentation for this instance of data.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.input.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Source inputs to the mapping.\r\n */\r\nexport interface StructureMapGroupRuleSource extends fhir.BackboneElement { \r\n  /**\r\n   * Type or variable this rule applies to.\r\n   */\r\n  context: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.context\r\n   */\r\n  _context?:fhir.FhirElement;\r\n  /**\r\n   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.\r\n   */\r\n  min?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.min\r\n   */\r\n  _min?:fhir.FhirElement;\r\n  /**\r\n   * Specified maximum cardinality for the element - a number or a \"*\". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).\r\n   */\r\n  max?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.max\r\n   */\r\n  _max?:fhir.FhirElement;\r\n  /**\r\n   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.\r\n   */\r\n  type?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueBase64Binary?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueBase64Binary?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueCanonical?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueCode?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueDate?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueDateTime?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueId?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueInstant?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueInteger?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueMarkdown?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueMarkdown?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueOid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueOid?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValuePositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValuePositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueString?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueTime?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueUri?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueUrl?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueUrl?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueUuid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.defaultValue[x]\r\n   */\r\n  _defaultValueUuid?:fhir.FhirElement;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueAddress?: fhir.Address|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueAge?: fhir.Age|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueAnnotation?: fhir.Annotation|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueContactPoint?: fhir.ContactPoint|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueCount?: fhir.Count|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDistance?: fhir.Distance|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueHumanName?: fhir.HumanName|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueIdentifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueMoney?: fhir.Money|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValuePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueRange?: fhir.Range|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueRatio?: fhir.Ratio|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueSampledData?: fhir.SampledData|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueTiming?: fhir.Timing|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueContactDetail?: fhir.ContactDetail|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueContributor?: fhir.Contributor|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDataRequirement?: fhir.DataRequirement|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueExpression?: fhir.Expression|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueParameterDefinition?: fhir.ParameterDefinition|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueRelatedArtifact?: fhir.RelatedArtifact|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueTriggerDefinition?: fhir.TriggerDefinition|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueUsageContext?: fhir.UsageContext|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueDosage?: fhir.Dosage|undefined;\r\n  /**\r\n   * If there's a default value on an item that can repeat, it will only be used once.\r\n   */\r\n  defaultValueMeta?: fhir.Meta|undefined;\r\n  /**\r\n   * Optional field for this source.\r\n   */\r\n  element?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.element\r\n   */\r\n  _element?:fhir.FhirElement;\r\n  /**\r\n   * How to handle the list mode for this element.\r\n   */\r\n  listMode?: 'first'|'last'|'not_first'|'not_last'|'only_one'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.listMode\r\n   */\r\n  _listMode?:fhir.FhirElement;\r\n  /**\r\n   * Named context for field, if a field is specified.\r\n   */\r\n  variable?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.variable\r\n   */\r\n  _variable?:fhir.FhirElement;\r\n  /**\r\n   * FHIRPath expression  - must be true or the rule does not apply.\r\n   */\r\n  condition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.condition\r\n   */\r\n  _condition?:fhir.FhirElement;\r\n  /**\r\n   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.\r\n   */\r\n  check?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.check\r\n   */\r\n  _check?:fhir.FhirElement;\r\n  /**\r\n   * This is typically used for recording that something Is not transformed to the target for some reason.\r\n   */\r\n  logMessage?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.source.logMessage\r\n   */\r\n  _logMessage?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Parameters to the transform.\r\n */\r\nexport interface StructureMapGroupRuleTargetParameter extends fhir.BackboneElement { \r\n  /**\r\n   * Parameter value - variable or literal.\r\n   */\r\n  valueId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.parameter.value[x]\r\n   */\r\n  _valueId?:fhir.FhirElement;\r\n  /**\r\n   * Parameter value - variable or literal.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.parameter.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * Parameter value - variable or literal.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.parameter.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Parameter value - variable or literal.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.parameter.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * Parameter value - variable or literal.\r\n   */\r\n  valueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.parameter.value[x]\r\n   */\r\n  _valueDecimal?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Content to create because of this mapping rule.\r\n */\r\nexport interface StructureMapGroupRuleTarget extends fhir.BackboneElement { \r\n  /**\r\n   * Type or variable this rule applies to.\r\n   */\r\n  context?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.context\r\n   */\r\n  _context?:fhir.FhirElement;\r\n  /**\r\n   * How to interpret the context.\r\n   */\r\n  contextType?: 'type'|'variable'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.contextType\r\n   */\r\n  _contextType?:fhir.FhirElement;\r\n  /**\r\n   * Field to create in the context.\r\n   */\r\n  element?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.element\r\n   */\r\n  _element?:fhir.FhirElement;\r\n  /**\r\n   * Named context for field, if desired, and a field is specified.\r\n   */\r\n  variable?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.variable\r\n   */\r\n  _variable?:fhir.FhirElement;\r\n  /**\r\n   * If field is a list, how to manage the list.\r\n   */\r\n  listMode?: (('collate'|'first'|'last'|'share')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.listMode\r\n   */\r\n  _listMode?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Internal rule reference for shared list items.\r\n   */\r\n  listRuleId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.listRuleId\r\n   */\r\n  _listRuleId?:fhir.FhirElement;\r\n  /**\r\n   * How the data is copied / created.\r\n   */\r\n  transform?: 'append'|'c'|'cast'|'cc'|'copy'|'cp'|'create'|'dateOp'|'escape'|'evaluate'|'id'|'pointer'|'qty'|'reference'|'translate'|'truncate'|'uuid'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.target.transform\r\n   */\r\n  _transform?:fhir.FhirElement;\r\n  /**\r\n   * Parameters to the transform.\r\n   */\r\n  parameter?: (fhir.StructureMapGroupRuleTargetParameter|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Which other rules to apply in the context of this rule.\r\n */\r\nexport interface StructureMapGroupRuleDependent extends fhir.BackboneElement { \r\n  /**\r\n   * Name of a rule or group to apply.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.dependent.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Variable to pass to the rule or group.\r\n   */\r\n  variable: (string|null)[]|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.dependent.variable\r\n   */\r\n  _variable?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * Transform Rule from source to target.\r\n */\r\nexport interface StructureMapGroupRule extends fhir.BackboneElement { \r\n  /**\r\n   * Name of the rule for internal references.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Source inputs to the mapping.\r\n   */\r\n  source: (fhir.StructureMapGroupRuleSource|null)[]|null;\r\n  /**\r\n   * Content to create because of this mapping rule.\r\n   */\r\n  target?: (fhir.StructureMapGroupRuleTarget|null)[]|undefined;\r\n  /**\r\n   * Rules contained in this rule.\r\n   */\r\n  rule?: (fhir.StructureMapGroupRule|null)[]|undefined;\r\n  /**\r\n   * Which other rules to apply in the context of this rule.\r\n   */\r\n  dependent?: (fhir.StructureMapGroupRuleDependent|null)[]|undefined;\r\n  /**\r\n   * Documentation for this instance of data.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.rule.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Organizes the mapping into manageable chunks for human review/ease of maintenance.\r\n */\r\nexport interface StructureMapGroup extends fhir.BackboneElement { \r\n  /**\r\n   * A unique name for the group for the convenience of human readers.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Another group that this group adds rules to.\r\n   */\r\n  extends?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.extends\r\n   */\r\n  _extends?:fhir.FhirElement;\r\n  /**\r\n   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.\r\n   */\r\n  typeMode: 'none'|'type-and-types'|'types'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.typeMode\r\n   */\r\n  _typeMode?:fhir.FhirElement;\r\n  /**\r\n   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.group.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * If no inputs are named, then the entry mappings are type based.\r\n   */\r\n  input: (fhir.StructureMapGroupInput|null)[]|null;\r\n  /**\r\n   * Transform Rule from source to target.\r\n   */\r\n  rule: (fhir.StructureMapGroupRule|null)[]|null;\r\n}\r\n\r\n/**\r\n * A Map of relationships between 2 structures that can be used to transform data.\r\n */\r\nexport interface StructureMap extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"StructureMap\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of structure maps that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of structure maps that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.\r\n   */\r\n  structure?: (fhir.StructureMapStructure|null)[]|undefined;\r\n  /**\r\n   * Other maps used by this map (canonical URLs).\r\n   */\r\n  import?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureMap.import\r\n   */\r\n  _import?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Organizes the mapping into manageable chunks for human review/ease of maintenance.\r\n   */\r\n  group: (fhir.StructureMapGroup|null)[]|null;\r\n}\r\n"]}