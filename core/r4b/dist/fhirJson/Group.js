// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: Group
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JvdXAuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9Hcm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsZ0RBQWdEO0FBQ2hELGtDQUFrQztBQUNsQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjRiLmNvcmUgdmVyc2lvbjogNC4zLjBcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBHcm91cFxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlySnNvbi5qcyc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEFsbCB0aGUgaWRlbnRpZmllZCBjaGFyYWN0ZXJpc3RpY3MgbXVzdCBiZSB0cnVlIGZvciBhbiBlbnRpdHkgdG8gYSBtZW1iZXIgb2YgdGhlIGdyb3VwLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBHcm91cENoYXJhY3RlcmlzdGljIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBBIGNvZGUgdGhhdCBpZGVudGlmaWVzIHRoZSBraW5kIG9mIHRyYWl0IGJlaW5nIGFzc2VydGVkLlxyXG4gICAqL1xyXG4gIGNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogRm9yIFJhbmdlLCBpdCBtZWFucyBtZW1iZXJzIG9mIHRoZSBncm91cCBoYXZlIGEgdmFsdWUgdGhhdCBmYWxscyBzb21ld2hlcmUgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UuXHJcbiAgICovXHJcbiAgdmFsdWVDb2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIFJhbmdlLCBpdCBtZWFucyBtZW1iZXJzIG9mIHRoZSBncm91cCBoYXZlIGEgdmFsdWUgdGhhdCBmYWxscyBzb21ld2hlcmUgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UuXHJcbiAgICovXHJcbiAgdmFsdWVCb29sZWFuPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEdyb3VwLmNoYXJhY3RlcmlzdGljLnZhbHVlW3hdXHJcbiAgICovXHJcbiAgX3ZhbHVlQm9vbGVhbj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBGb3IgUmFuZ2UsIGl0IG1lYW5zIG1lbWJlcnMgb2YgdGhlIGdyb3VwIGhhdmUgYSB2YWx1ZSB0aGF0IGZhbGxzIHNvbWV3aGVyZSB3aXRoaW4gdGhlIHNwZWNpZmllZCByYW5nZS5cclxuICAgKi9cclxuICB2YWx1ZVF1YW50aXR5PzogZmhpci5RdWFudGl0eXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIFJhbmdlLCBpdCBtZWFucyBtZW1iZXJzIG9mIHRoZSBncm91cCBoYXZlIGEgdmFsdWUgdGhhdCBmYWxscyBzb21ld2hlcmUgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UuXHJcbiAgICovXHJcbiAgdmFsdWVSYW5nZT86IGZoaXIuUmFuZ2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBSYW5nZSwgaXQgbWVhbnMgbWVtYmVycyBvZiB0aGUgZ3JvdXAgaGF2ZSBhIHZhbHVlIHRoYXQgZmFsbHMgc29tZXdoZXJlIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHJhbmdlLlxyXG4gICAqL1xyXG4gIHZhbHVlUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgbGFiZWxlZCBhcyBcIklzIE1vZGlmaWVyXCIgYmVjYXVzZSBhcHBsaWNhdGlvbnMgY2Fubm90IHdyb25nbHkgaW5jbHVkZSBleGNsdWRlZCBtZW1iZXJzIGFzIGluY2x1ZGVkIG9yIHZpY2UgdmVyc2EuXHJcbiAgICovXHJcbiAgZXhjbHVkZTogYm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBHcm91cC5jaGFyYWN0ZXJpc3RpYy5leGNsdWRlXHJcbiAgICovXHJcbiAgX2V4Y2x1ZGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBvdmVyIHdoaWNoIHRoZSBjaGFyYWN0ZXJpc3RpYyBpcyB0ZXN0ZWQ7IGUuZy4gdGhlIHBhdGllbnQgaGFkIGFuIG9wZXJhdGlvbiBkdXJpbmcgdGhlIG1vbnRoIG9mIEp1bmUuXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSWRlbnRpZmllcyB0aGUgcmVzb3VyY2UgaW5zdGFuY2VzIHRoYXQgYXJlIG1lbWJlcnMgb2YgdGhlIGdyb3VwLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBHcm91cE1lbWJlciBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIGVudGl0eSB0aGF0IGlzIGEgbWVtYmVyIG9mIHRoZSBncm91cC4gTXVzdCBiZSBjb25zaXN0ZW50IHdpdGggR3JvdXAudHlwZS4gSWYgdGhlIGVudGl0eSBpcyBhbm90aGVyIGdyb3VwLCB0aGVuIHRoZSB0eXBlIG11c3QgYmUgdGhlIHNhbWUuXHJcbiAgICovXHJcbiAgZW50aXR5OiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJpb2QgdGhhdCB0aGUgbWVtYmVyIHdhcyBpbiB0aGUgZ3JvdXAsIGlmIGtub3duLlxyXG4gICAqL1xyXG4gIHBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgbWVtYmVyIGlzIG5vIGxvbmdlciBpbiB0aGUgZ3JvdXAsIGJ1dCBwcmV2aW91c2x5IG1heSBoYXZlIGJlZW4gYSBtZW1iZXIuXHJcbiAgICovXHJcbiAgaW5hY3RpdmU/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogR3JvdXAubWVtYmVyLmluYWN0aXZlXHJcbiAgICovXHJcbiAgX2luYWN0aXZlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGRlZmluZWQgY29sbGVjdGlvbiBvZiBlbnRpdGllcyB0aGF0IG1heSBiZSBkaXNjdXNzZWQgb3IgYWN0ZWQgdXBvbiBjb2xsZWN0aXZlbHkgYnV0IHdoaWNoIGFyZSBub3QgZXhwZWN0ZWQgdG8gYWN0IGNvbGxlY3RpdmVseSwgYW5kIGFyZSBub3QgZm9ybWFsbHkgb3IgbGVnYWxseSByZWNvZ25pemVkOyBpLmUuIGEgY29sbGVjdGlvbiBvZiBlbnRpdGllcyB0aGF0IGlzbid0IGFuIE9yZ2FuaXphdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgR3JvdXAgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIkdyb3VwXCJ8bnVsbDtcclxuICAvKipcclxuICAgKiBBIHVuaXF1ZSBidXNpbmVzcyBpZGVudGlmaWVyIGZvciB0aGlzIGdyb3VwLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiAoZmhpci5JZGVudGlmaWVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSByZWNvcmQgZm9yIHRoZSBncm91cCBpcyBhdmFpbGFibGUgZm9yIHVzZSBvciBpcyBtZXJlbHkgYmVpbmcgcmV0YWluZWQgZm9yIGhpc3RvcmljYWwgcHVycG9zZXMuXHJcbiAgICovXHJcbiAgYWN0aXZlPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEdyb3VwLmFjdGl2ZVxyXG4gICAqL1xyXG4gIF9hY3RpdmU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogR3JvdXAgbWVtYmVycyBTSEFMTCBiZSBvZiB0aGUgYXBwcm9wcmlhdGUgcmVzb3VyY2UgdHlwZSAoUGF0aWVudCBmb3IgcGVyc29uIG9yIGFuaW1hbDsgb3IgUHJhY3RpdGlvbmVyLCBEZXZpY2UsIE1lZGljYXRpb24gb3IgU3Vic3RhbmNlIGZvciB0aGUgb3RoZXIgdHlwZXMuKS5cclxuICAgKi9cclxuICB0eXBlOiAnYW5pbWFsJ3wnZGV2aWNlJ3wnbWVkaWNhdGlvbid8J3BlcnNvbid8J3ByYWN0aXRpb25lcid8J3N1YnN0YW5jZSd8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogR3JvdXAudHlwZVxyXG4gICAqL1xyXG4gIF90eXBlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElmIHRydWUsIGluZGljYXRlcyB0aGF0IHRoZSByZXNvdXJjZSByZWZlcnMgdG8gYSBzcGVjaWZpYyBncm91cCBvZiByZWFsIGluZGl2aWR1YWxzLiAgSWYgZmFsc2UsIHRoZSBncm91cCBkZWZpbmVzIGEgc2V0IG9mIGludGVuZGVkIGluZGl2aWR1YWxzLlxyXG4gICAqL1xyXG4gIGFjdHVhbDogYm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBHcm91cC5hY3R1YWxcclxuICAgKi9cclxuICBfYWN0dWFsPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgd291bGQgZ2VuZXJhbGx5IGJlIG9taXR0ZWQgZm9yIFBlcnNvbiByZXNvdXJjZXMuXHJcbiAgICovXHJcbiAgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGxhYmVsIGFzc2lnbmVkIHRvIHRoZSBncm91cCBmb3IgaHVtYW4gaWRlbnRpZmljYXRpb24gYW5kIGNvbW11bmljYXRpb24uXHJcbiAgICovXHJcbiAgbmFtZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEdyb3VwLm5hbWVcclxuICAgKi9cclxuICBfbmFtZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBOb3RlIHRoYXQgdGhlIHF1YW50aXR5IG1heSBiZSBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBtZW1iZXJzIGlmIHNvbWUgb2YgdGhlIG1lbWJlcnMgYXJlIG5vdCBhY3RpdmUuXHJcbiAgICovXHJcbiAgcXVhbnRpdHk/OiBudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBHcm91cC5xdWFudGl0eVxyXG4gICAqL1xyXG4gIF9xdWFudGl0eT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGlzIGRvZXMgbm90IHN0cmljdGx5IGFsaWduIHdpdGggb3duZXJzaGlwIG9mIGEgaGVyZCBvciBmbG9jaywgYnV0IG1heSBzdWZmaWNlIHRvIHJlcHJlc2VudCB0aGF0IHJlbGF0aW9uc2hpcCBpbiBzaW1wbGUgY2FzZXMuIE1vcmUgY29tcGxleCBjYXNlcyB3aWxsIHJlcXVpcmUgYW4gZXh0ZW5zaW9uLlxyXG4gICAqL1xyXG4gIG1hbmFnaW5nRW50aXR5PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbCB0aGUgaWRlbnRpZmllZCBjaGFyYWN0ZXJpc3RpY3MgbXVzdCBiZSB0cnVlIGZvciBhbiBlbnRpdHkgdG8gYSBtZW1iZXIgb2YgdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIGNoYXJhY3RlcmlzdGljPzogKGZoaXIuR3JvdXBDaGFyYWN0ZXJpc3RpY3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHRoZSByZXNvdXJjZSBpbnN0YW5jZXMgdGhhdCBhcmUgbWVtYmVycyBvZiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgbWVtYmVyPzogKGZoaXIuR3JvdXBNZW1iZXJ8bnVsbClbXXx1bmRlZmluZWQ7XHJcbn1cclxuIl19