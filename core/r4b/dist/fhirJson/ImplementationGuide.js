// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ImplementationGuide.js","sourceRoot":"./src/","sources":["fhirJson/ImplementationGuide.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,gDAAgD;AAChD,kCAAkC;AAClC,qCAAqC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4b.core version: 4.3.0\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ImplementationGuide\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.\r\n */\r\nexport interface ImplementationGuideDependsOn extends fhir.BackboneElement { \r\n  /**\r\n   * Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.\r\n   */\r\n  uri: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.dependsOn.uri\r\n   */\r\n  _uri?:fhir.FhirElement;\r\n  /**\r\n   * The NPM package name for the Implementation Guide that this IG depends on.\r\n   */\r\n  packageId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.dependsOn.packageId\r\n   */\r\n  _packageId?:fhir.FhirElement;\r\n  /**\r\n   * This follows the syntax of the NPM packaging version field - see [[reference]].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.dependsOn.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.\r\n */\r\nexport interface ImplementationGuideGlobal extends fhir.BackboneElement { \r\n  /**\r\n   * The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.\r\n   */\r\n  type: 'Account'|'ActivityDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.global.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * A reference to the profile that all instances must conform to.\r\n   */\r\n  profile: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.global.profile\r\n   */\r\n  _profile?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.\r\n */\r\nexport interface ImplementationGuideDefinitionGrouping extends fhir.BackboneElement { \r\n  /**\r\n   * The human-readable title to display for the package of resources when rendering the implementation guide.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.grouping.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Human readable text describing the package.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.grouping.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.\r\n */\r\nexport interface ImplementationGuideDefinitionResource extends fhir.BackboneElement { \r\n  /**\r\n   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.\r\n   */\r\n  reference: fhir.Reference|null;\r\n  /**\r\n   * The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [applicable-version](extension-structuredefinition-applicable-version.html) extension.\r\n   */\r\n  fhirVersion?: (('0.0.80'|'0.0.81'|'0.0.82'|'0.01'|'0.05'|'0.06'|'0.11'|'0.4.0'|'0.5.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1.0'|'1.4.0'|'1.6.0'|'1.8.0'|'3.0.0'|'3.0.1'|'3.0.2'|'3.3.0'|'3.5.0'|'4.0.0'|'4.0.1'|'4.1.0'|'4.3.0'|'4.3.0-cibuild'|'4.3.0-snapshot1')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.resource.fhirVersion\r\n   */\r\n  _fhirVersion?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.resource.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.resource.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Examples: \r\n   * * StructureDefinition -&gt; Any \r\n   * * ValueSet -&gt; expansion \r\n   * * OperationDefinition -&gt; Parameters \r\n   * * Questionnaire -&gt; QuestionnaireResponse.\r\n   */\r\n  exampleBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.resource.example[x]\r\n   */\r\n  _exampleBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Examples: \r\n   * * StructureDefinition -&gt; Any \r\n   * * ValueSet -&gt; expansion \r\n   * * OperationDefinition -&gt; Parameters \r\n   * * Questionnaire -&gt; QuestionnaireResponse.\r\n   */\r\n  exampleCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.resource.example[x]\r\n   */\r\n  _exampleCanonical?:fhir.FhirElement;\r\n  /**\r\n   * This must correspond to a package.id element within this implementation guide.\r\n   */\r\n  groupingId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.resource.groupingId\r\n   */\r\n  _groupingId?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.\r\n */\r\nexport interface ImplementationGuideDefinitionPage extends fhir.BackboneElement { \r\n  /**\r\n   * The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).\r\n   */\r\n  nameUrl?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.page.name[x]\r\n   */\r\n  _nameUrl?:fhir.FhirElement;\r\n  /**\r\n   * The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).\r\n   */\r\n  nameReference?: fhir.Reference|undefined;\r\n  /**\r\n   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.\r\n   */\r\n  title: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.page.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * A code that indicates how the page is generated.\r\n   */\r\n  generation: 'generated'|'html'|'markdown'|'xml'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.page.generation\r\n   */\r\n  _generation?:fhir.FhirElement;\r\n  /**\r\n   * The implementation guide breadcrumbs are generated from this structure.\r\n   */\r\n  page?: (fhir.ImplementationGuideDefinitionPage|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Defines how IG is built by tools.\r\n */\r\nexport interface ImplementationGuideDefinitionParameter extends fhir.BackboneElement { \r\n  /**\r\n   * apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.\r\n   */\r\n  code: 'apply'|'expansion-parameter'|'generate-json'|'generate-turtle'|'generate-xml'|'html-template'|'path-pages'|'path-resource'|'path-tx-cache'|'rule-broken-links'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.parameter.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * Value for named type.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.parameter.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A template for building resources.\r\n */\r\nexport interface ImplementationGuideDefinitionTemplate extends fhir.BackboneElement { \r\n  /**\r\n   * Type of template specified.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.template.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The source location for the template.\r\n   */\r\n  source: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.template.source\r\n   */\r\n  _source?:fhir.FhirElement;\r\n  /**\r\n   * The scope in which the template applies.\r\n   */\r\n  scope?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.definition.template.scope\r\n   */\r\n  _scope?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.\r\n */\r\nexport interface ImplementationGuideDefinition extends fhir.BackboneElement { \r\n  /**\r\n   * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.\r\n   */\r\n  grouping?: (fhir.ImplementationGuideDefinitionGrouping|null)[]|undefined;\r\n  /**\r\n   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.\r\n   */\r\n  resource: (fhir.ImplementationGuideDefinitionResource|null)[]|null;\r\n  /**\r\n   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.\r\n   */\r\n  page?: fhir.ImplementationGuideDefinitionPage|undefined;\r\n  /**\r\n   * Defines how IG is built by tools.\r\n   */\r\n  parameter?: (fhir.ImplementationGuideDefinitionParameter|null)[]|undefined;\r\n  /**\r\n   * A template for building resources.\r\n   */\r\n  template?: (fhir.ImplementationGuideDefinitionTemplate|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.\r\n */\r\nexport interface ImplementationGuideManifestResource extends fhir.BackboneElement { \r\n  /**\r\n   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.\r\n   */\r\n  reference: fhir.Reference|null;\r\n  /**\r\n   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.\r\n   */\r\n  exampleBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.resource.example[x]\r\n   */\r\n  _exampleBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.\r\n   */\r\n  exampleCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.resource.example[x]\r\n   */\r\n  _exampleCanonical?:fhir.FhirElement;\r\n  /**\r\n   * Appending 'rendering' + \"/\" + this should resolve to the resource page.\r\n   */\r\n  relativePath?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.resource.relativePath\r\n   */\r\n  _relativePath?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Information about a page within the IG.\r\n */\r\nexport interface ImplementationGuideManifestPage extends fhir.BackboneElement { \r\n  /**\r\n   * Appending 'rendering' + \"/\" + this should resolve to the page.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.page.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Label for the page intended for human display.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.page.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Appending 'rendering' + \"/\" + page.name + \"#\" + page.anchor should resolve to the anchor.\r\n   */\r\n  anchor?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.page.anchor\r\n   */\r\n  _anchor?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * Information about an assembled implementation guide, created by the publication tooling.\r\n */\r\nexport interface ImplementationGuideManifest extends fhir.BackboneElement { \r\n  /**\r\n   * A pointer to official web page, PDF or other rendering of the implementation guide.\r\n   */\r\n  rendering?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.rendering\r\n   */\r\n  _rendering?:fhir.FhirElement;\r\n  /**\r\n   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.\r\n   */\r\n  resource: (fhir.ImplementationGuideManifestResource|null)[]|null;\r\n  /**\r\n   * Information about a page within the IG.\r\n   */\r\n  page?: (fhir.ImplementationGuideManifestPage|null)[]|undefined;\r\n  /**\r\n   * Indicates a relative path to an image that exists within the IG.\r\n   */\r\n  image?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.image\r\n   */\r\n  _image?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.\r\n   */\r\n  other?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.manifest.other\r\n   */\r\n  _other?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.\r\n */\r\nexport interface ImplementationGuide extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ImplementationGuide\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of implementation guides that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of implementation guides that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.\r\n   */\r\n  packageId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.packageId\r\n   */\r\n  _packageId?:fhir.FhirElement;\r\n  /**\r\n   * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.\r\n   */\r\n  license?: '0BSD'|'AAL'|'Abstyles'|'Adobe-2006'|'Adobe-Glyph'|'ADSL'|'AFL-1.1'|'AFL-1.2'|'AFL-2.0'|'AFL-2.1'|'AFL-3.0'|'Afmparse'|'AGPL-1.0-only'|'AGPL-1.0-or-later'|'AGPL-3.0-only'|'AGPL-3.0-or-later'|'Aladdin'|'AMDPLPA'|'AML'|'AMPAS'|'ANTLR-PD'|'Apache-1.0'|'Apache-1.1'|'Apache-2.0'|'APAFML'|'APL-1.0'|'APSL-1.0'|'APSL-1.1'|'APSL-1.2'|'APSL-2.0'|'Artistic-1.0'|'Artistic-1.0-cl8'|'Artistic-1.0-Perl'|'Artistic-2.0'|'Bahyph'|'Barr'|'Beerware'|'BitTorrent-1.0'|'BitTorrent-1.1'|'Borceux'|'BSD-1-Clause'|'BSD-2-Clause'|'BSD-2-Clause-FreeBSD'|'BSD-2-Clause-NetBSD'|'BSD-2-Clause-Patent'|'BSD-3-Clause'|'BSD-3-Clause-Attribution'|'BSD-3-Clause-Clear'|'BSD-3-Clause-LBNL'|'BSD-3-Clause-No-Nuclear-License'|'BSD-3-Clause-No-Nuclear-License-2014'|'BSD-3-Clause-No-Nuclear-Warranty'|'BSD-4-Clause'|'BSD-4-Clause-UC'|'BSD-Protection'|'BSD-Source-Code'|'BSL-1.0'|'bzip2-1.0.5'|'bzip2-1.0.6'|'Caldera'|'CATOSL-1.1'|'CC-BY-1.0'|'CC-BY-2.0'|'CC-BY-2.5'|'CC-BY-3.0'|'CC-BY-4.0'|'CC-BY-NC-1.0'|'CC-BY-NC-2.0'|'CC-BY-NC-2.5'|'CC-BY-NC-3.0'|'CC-BY-NC-4.0'|'CC-BY-NC-ND-1.0'|'CC-BY-NC-ND-2.0'|'CC-BY-NC-ND-2.5'|'CC-BY-NC-ND-3.0'|'CC-BY-NC-ND-4.0'|'CC-BY-NC-SA-1.0'|'CC-BY-NC-SA-2.0'|'CC-BY-NC-SA-2.5'|'CC-BY-NC-SA-3.0'|'CC-BY-NC-SA-4.0'|'CC-BY-ND-1.0'|'CC-BY-ND-2.0'|'CC-BY-ND-2.5'|'CC-BY-ND-3.0'|'CC-BY-ND-4.0'|'CC-BY-SA-1.0'|'CC-BY-SA-2.0'|'CC-BY-SA-2.5'|'CC-BY-SA-3.0'|'CC-BY-SA-4.0'|'CC0-1.0'|'CDDL-1.0'|'CDDL-1.1'|'CDLA-Permissive-1.0'|'CDLA-Sharing-1.0'|'CECILL-1.0'|'CECILL-1.1'|'CECILL-2.0'|'CECILL-2.1'|'CECILL-B'|'CECILL-C'|'ClArtistic'|'CNRI-Jython'|'CNRI-Python'|'CNRI-Python-GPL-Compatible'|'Condor-1.1'|'CPAL-1.0'|'CPL-1.0'|'CPOL-1.02'|'Crossword'|'CrystalStacker'|'CUA-OPL-1.0'|'Cube'|'curl'|'D-FSL-1.0'|'diffmark'|'DOC'|'Dotseqn'|'DSDP'|'dvipdfm'|'ECL-1.0'|'ECL-2.0'|'EFL-1.0'|'EFL-2.0'|'eGenix'|'Entessa'|'EPL-1.0'|'EPL-2.0'|'ErlPL-1.1'|'EUDatagrid'|'EUPL-1.0'|'EUPL-1.1'|'EUPL-1.2'|'Eurosym'|'Fair'|'Frameworx-1.0'|'FreeImage'|'FSFAP'|'FSFUL'|'FSFULLR'|'FTL'|'GFDL-1.1-only'|'GFDL-1.1-or-later'|'GFDL-1.2-only'|'GFDL-1.2-or-later'|'GFDL-1.3-only'|'GFDL-1.3-or-later'|'Giftware'|'GL2PS'|'Glide'|'Glulxe'|'gnuplot'|'GPL-1.0-only'|'GPL-1.0-or-later'|'GPL-2.0-only'|'GPL-2.0-or-later'|'GPL-3.0-only'|'GPL-3.0-or-later'|'gSOAP-1.3b'|'HaskellReport'|'HPND'|'IBM-pibs'|'ICU'|'IJG'|'ImageMagick'|'iMatix'|'Imlib2'|'Info-ZIP'|'Intel'|'Intel-ACPI'|'Interbase-1.0'|'IPA'|'IPL-1.0'|'ISC'|'JasPer-2.0'|'JSON'|'LAL-1.2'|'LAL-1.3'|'Latex2e'|'Leptonica'|'LGPL-2.0-only'|'LGPL-2.0-or-later'|'LGPL-2.1-only'|'LGPL-2.1-or-later'|'LGPL-3.0-only'|'LGPL-3.0-or-later'|'LGPLLR'|'Libpng'|'libtiff'|'LiLiQ-P-1.1'|'LiLiQ-R-1.1'|'LiLiQ-Rplus-1.1'|'Linux-OpenIB'|'LPL-1.0'|'LPL-1.02'|'LPPL-1.0'|'LPPL-1.1'|'LPPL-1.2'|'LPPL-1.3a'|'LPPL-1.3c'|'MakeIndex'|'MirOS'|'MIT'|'MIT-0'|'MIT-advertising'|'MIT-CMU'|'MIT-enna'|'MIT-feh'|'MITNFA'|'Motosoto'|'mpich2'|'MPL-1.0'|'MPL-1.1'|'MPL-2.0'|'MPL-2.0-no-copyleft-exception'|'MS-PL'|'MS-RL'|'MTLL'|'Multics'|'Mup'|'NASA-1.3'|'Naumen'|'NBPL-1.0'|'NCSA'|'Net-SNMP'|'NetCDF'|'Newsletr'|'NGPL'|'NLOD-1.0'|'NLPL'|'Nokia'|'NOSL'|'not-open-source'|'Noweb'|'NPL-1.0'|'NPL-1.1'|'NPOSL-3.0'|'NRL'|'NTP'|'OCCT-PL'|'OCLC-2.0'|'ODbL-1.0'|'OFL-1.0'|'OFL-1.1'|'OGTSL'|'OLDAP-1.1'|'OLDAP-1.2'|'OLDAP-1.3'|'OLDAP-1.4'|'OLDAP-2.0'|'OLDAP-2.0.1'|'OLDAP-2.1'|'OLDAP-2.2'|'OLDAP-2.2.1'|'OLDAP-2.2.2'|'OLDAP-2.3'|'OLDAP-2.4'|'OLDAP-2.5'|'OLDAP-2.6'|'OLDAP-2.7'|'OLDAP-2.8'|'OML'|'OpenSSL'|'OPL-1.0'|'OSET-PL-2.1'|'OSL-1.0'|'OSL-1.1'|'OSL-2.0'|'OSL-2.1'|'OSL-3.0'|'PDDL-1.0'|'PHP-3.0'|'PHP-3.01'|'Plexus'|'PostgreSQL'|'psfrag'|'psutils'|'Python-2.0'|'Qhull'|'QPL-1.0'|'Rdisc'|'RHeCos-1.1'|'RPL-1.1'|'RPL-1.5'|'RPSL-1.0'|'RSA-MD'|'RSCPL'|'Ruby'|'SAX-PD'|'Saxpath'|'SCEA'|'Sendmail'|'SGI-B-1.0'|'SGI-B-1.1'|'SGI-B-2.0'|'SimPL-2.0'|'SISSL'|'SISSL-1.2'|'Sleepycat'|'SMLNJ'|'SMPPL'|'SNIA'|'Spencer-86'|'Spencer-94'|'Spencer-99'|'SPL-1.0'|'SugarCRM-1.1.3'|'SWL'|'TCL'|'TCP-wrappers'|'TMate'|'TORQUE-1.1'|'TOSL'|'Unicode-DFS-2015'|'Unicode-DFS-2016'|'Unicode-TOU'|'Unlicense'|'UPL-1.0'|'Vim'|'VOSTROM'|'VSL-1.0'|'W3C'|'W3C-19980720'|'W3C-20150513'|'Watcom-1.0'|'Wsuipa'|'WTFPL'|'X11'|'Xerox'|'XFree86-1.1'|'xinetd'|'Xnet'|'xpp'|'XSkat'|'YPL-1.0'|'YPL-1.1'|'Zed'|'Zend-2.0'|'Zimbra-1.3'|'Zimbra-1.4'|'Zlib'|'zlib-acknowledgement'|'ZPL-1.1'|'ZPL-2.0'|'ZPL-2.1'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.license\r\n   */\r\n  _license?:fhir.FhirElement;\r\n  /**\r\n   * Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.\r\n   */\r\n  fhirVersion: (('0.0.80'|'0.0.81'|'0.0.82'|'0.01'|'0.05'|'0.06'|'0.11'|'0.4.0'|'0.5.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1.0'|'1.4.0'|'1.6.0'|'1.8.0'|'3.0.0'|'3.0.1'|'3.0.2'|'3.3.0'|'3.5.0'|'4.0.0'|'4.0.1'|'4.1.0'|'4.3.0'|'4.3.0-cibuild'|'4.3.0-snapshot1')|null)[]|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.fhirVersion\r\n   */\r\n  _fhirVersion?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.\r\n   */\r\n  dependsOn?: (fhir.ImplementationGuideDependsOn|null)[]|undefined;\r\n  /**\r\n   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.\r\n   */\r\n  global?: (fhir.ImplementationGuideGlobal|null)[]|undefined;\r\n  /**\r\n   * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.\r\n   */\r\n  definition?: fhir.ImplementationGuideDefinition|undefined;\r\n  /**\r\n   * Information about an assembled implementation guide, created by the publication tooling.\r\n   */\r\n  manifest?: fhir.ImplementationGuideManifest|undefined;\r\n}\r\n"]}