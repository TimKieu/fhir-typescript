// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ElementDefinition
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ElementDefinition.js","sourceRoot":"./src/","sources":["fhirJson/ElementDefinition.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,gDAAgD;AAChD,kCAAkC;AAClC,sCAAsC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4b.core version: 4.3.0\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: ElementDefinition\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * If there is no discriminator, the content is hard to process, so this should be avoided.\r\n */\r\nexport interface ElementDefinitionSlicingDiscriminator extends fhir.FhirElement { \r\n  /**\r\n   * How the element value is interpreted when discrimination is evaluated.\r\n   */\r\n  type: 'exists'|'pattern'|'profile'|'type'|'value'|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.slicing.discriminator.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * The only FHIRPath functions that are allowed are as(type), resolve(), and extension(url).\r\n   */\r\n  path: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.slicing.discriminator.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.\r\n */\r\nexport interface ElementDefinitionSlicing extends fhir.FhirElement { \r\n  /**\r\n   * If there is no discriminator, the content is hard to process, so this should be avoided.\r\n   */\r\n  discriminator?: (fhir.ElementDefinitionSlicingDiscriminator|null)[]|undefined;\r\n  /**\r\n   * If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.slicing.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.\r\n   */\r\n  ordered?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.slicing.ordered\r\n   */\r\n  _ordered?:fhir.FhirElement;\r\n  /**\r\n   * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.\r\n   */\r\n  rules: 'closed'|'open'|'openAtEnd'|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.slicing.rules\r\n   */\r\n  _rules?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.\r\n */\r\nexport interface ElementDefinitionBase extends fhir.FhirElement { \r\n  /**\r\n   * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.\r\n   */\r\n  path: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.base.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).\r\n   */\r\n  min: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.base.min\r\n   */\r\n  _min?:fhir.FhirElement;\r\n  /**\r\n   * This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max &gt; 1. Also, some forms of code generation may differ.\r\n   */\r\n  max: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.base.max\r\n   */\r\n  _max?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).\r\n */\r\nexport interface ElementDefinitionType extends fhir.FhirElement { \r\n  /**\r\n   * If the element is a reference to another resource, this element contains \"Reference\", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient).\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.type.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * It is possible to profile  backbone element (e.g. part of a resource), using the [profile-element](extension-elementdefinition-profile-element.html) extension.\r\n   */\r\n  profile?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.type.profile\r\n   */\r\n  _profile?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.\r\n   */\r\n  targetProfile?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.type.targetProfile\r\n   */\r\n  _targetProfile?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.\r\n   */\r\n  aggregation?: (('bundled'|'contained'|'referenced')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.type.aggregation\r\n   */\r\n  _aggregation?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.\r\n   */\r\n  versioning?: 'either'|'independent'|'specific'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.type.versioning\r\n   */\r\n  _versioning?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.\r\n */\r\nexport interface ElementDefinitionExample extends fhir.FhirElement { \r\n  /**\r\n   * Describes the purpose of this example amoung the set of examples.\r\n   */\r\n  label: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.label\r\n   */\r\n  _label?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueBase64Binary?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueBase64Binary?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueCanonical?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueCode?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueDate?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueDateTime?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueId?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueInstant?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueMarkdown?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueMarkdown?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueOid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueOid?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valuePositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valuePositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueTime?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueUri?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueUrl?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueUrl?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueUuid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.example.value[x]\r\n   */\r\n  _valueUuid?:fhir.FhirElement;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueAddress?: fhir.Address|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueAge?: fhir.Age|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueAnnotation?: fhir.Annotation|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueCodeableReference?: fhir.CodeableReference|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueContactPoint?: fhir.ContactPoint|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueCount?: fhir.Count|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDistance?: fhir.Distance|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueHumanName?: fhir.HumanName|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueIdentifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueMoney?: fhir.Money|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valuePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueRange?: fhir.Range|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueRatio?: fhir.Ratio|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueRatioRange?: fhir.RatioRange|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueSampledData?: fhir.SampledData|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueTiming?: fhir.Timing|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueContactDetail?: fhir.ContactDetail|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueContributor?: fhir.Contributor|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDataRequirement?: fhir.DataRequirement|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueExpression?: fhir.Expression|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueParameterDefinition?: fhir.ParameterDefinition|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueRelatedArtifact?: fhir.RelatedArtifact|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueTriggerDefinition?: fhir.TriggerDefinition|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueUsageContext?: fhir.UsageContext|undefined;\r\n  /**\r\n   * The actual value for the element, which must be one of the types allowed for this element.\r\n   */\r\n  valueDosage?: fhir.Dosage|undefined;\r\n}\r\n\r\n/**\r\n * Constraints should be declared on the \"context\" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.\r\n */\r\nexport interface ElementDefinitionConstraint extends fhir.FhirElement { \r\n  /**\r\n   * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.\r\n   */\r\n  key: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.key\r\n   */\r\n  _key?:fhir.FhirElement;\r\n  /**\r\n   * To be used if the reason for the constraint might not be intuitive to all implementers.\r\n   */\r\n  requirements?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.requirements\r\n   */\r\n  _requirements?:fhir.FhirElement;\r\n  /**\r\n   * This allows constraints to be asserted as \"shall\" (error) and \"should\" (warning).\r\n   */\r\n  severity: 'error'|'warning'|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.severity\r\n   */\r\n  _severity?:fhir.FhirElement;\r\n  /**\r\n   * Should be expressed in business terms as much as possible.\r\n   */\r\n  human: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.human\r\n   */\r\n  _human?:fhir.FhirElement;\r\n  /**\r\n   * In the absense of an expression, the expression is likely not enforceable by validators, and might be missed by many systems.\r\n   */\r\n  expression?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n  /**\r\n   * Elements SHALL use \"f\" as the namespace prefix for the FHIR namespace, and \"x\" for the xhtml namespace, and SHALL NOT use any other prefixes.     Note: XPath is generally considered not useful because it does not apply to JSON and other formats and because of XSLT implementation issues, and may be removed in the future.\r\n   */\r\n  xpath?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.xpath\r\n   */\r\n  _xpath?:fhir.FhirElement;\r\n  /**\r\n   * This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.\r\n   */\r\n  source?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.constraint.source\r\n   */\r\n  _source?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength \"required\" with a description explaining that no coded values are allowed and what sort of information to put in the \"text\" element.\r\n */\r\nexport interface ElementDefinitionBinding extends fhir.FhirElement { \r\n  /**\r\n   * For further discussion, see [Using Terminologies](terminologies.html).\r\n   */\r\n  strength: 'example'|'extensible'|'preferred'|'required'|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.binding.strength\r\n   */\r\n  _strength?:fhir.FhirElement;\r\n  /**\r\n   * Describes the intended use of this particular set of codes.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.binding.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * The reference may be version-specific or not (e.g. have a |[version] at the end of the canonical URL).\r\n   */\r\n  valueSet?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.binding.valueSet\r\n   */\r\n  _valueSet?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Mappings are not necessarily specific enough for safe translation.\r\n */\r\nexport interface ElementDefinitionMapping extends fhir.FhirElement { \r\n  /**\r\n   * An internal reference to the definition of a mapping.\r\n   */\r\n  identity: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.mapping.identity\r\n   */\r\n  _identity?:fhir.FhirElement;\r\n  /**\r\n   * If omitted, then there can be no expectation of computational interpretation of the mapping.\r\n   */\r\n  language?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.mapping.language\r\n   */\r\n  _language?:fhir.FhirElement;\r\n  /**\r\n   * For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.\r\n   */\r\n  map: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.mapping.map\r\n   */\r\n  _map?:fhir.FhirElement;\r\n  /**\r\n   * Comments that provide information about the mapping or its use.\r\n   */\r\n  comment?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.mapping.comment\r\n   */\r\n  _comment?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Captures constraints on each element within the resource, profile, or extension.\r\n */\r\nexport interface ElementDefinition extends fhir.BackboneElement { \r\n  /**\r\n   * The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.\r\n   */\r\n  path: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).\r\n   */\r\n  representation?: (('cdaText'|'typeAttr'|'xhtml'|'xmlAttr'|'xmlText')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.representation\r\n   */\r\n  _representation?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).\r\n   */\r\n  sliceName?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.sliceName\r\n   */\r\n  _sliceName?:fhir.FhirElement;\r\n  /**\r\n   * If set to true, an ancestor profile SHALL have a slicing definition with this name.  If set to false, no ancestor profile is permitted to have a slicing definition with this name.\r\n   */\r\n  sliceIsConstraining?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.sliceIsConstraining\r\n   */\r\n  _sliceIsConstraining?:fhir.FhirElement;\r\n  /**\r\n   * See also the extension (http://hl7.org/fhir/StructureDefinition/elementdefinition-question)[extension-elementdefinition-question.html].\r\n   */\r\n  label?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.label\r\n   */\r\n  _label?:fhir.FhirElement;\r\n  /**\r\n   * The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.\r\n   */\r\n  code?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.\r\n   */\r\n  slicing?: fhir.ElementDefinitionSlicing|undefined;\r\n  /**\r\n   * It is easy for a different short definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing short definitions in a profile.\r\n   */\r\n  short?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.short\r\n   */\r\n  _short?:fhir.FhirElement;\r\n  /**\r\n   * It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions in a profile.\r\n   */\r\n  definition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.\r\n   */\r\n  comment?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.comment\r\n   */\r\n  _comment?:fhir.FhirElement;\r\n  /**\r\n   * This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.\r\n   */\r\n  requirements?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.requirements\r\n   */\r\n  _requirements?:fhir.FhirElement;\r\n  /**\r\n   * Identifies additional names by which this element might also be known.\r\n   */\r\n  alias?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.alias\r\n   */\r\n  _alias?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The minimum number of times this element SHALL appear in the instance.\r\n   */\r\n  min?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.min\r\n   */\r\n  _min?:fhir.FhirElement;\r\n  /**\r\n   * The maximum number of times this element is permitted to appear in the instance.\r\n   */\r\n  max?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.max\r\n   */\r\n  _max?:fhir.FhirElement;\r\n  /**\r\n   * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.\r\n   */\r\n  base?: fhir.ElementDefinitionBase|undefined;\r\n  /**\r\n   * ContentReferences can only be defined in specializations, not constrained types, and they cannot be changed and always reference the non-constrained definition.\r\n   */\r\n  contentReference?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.contentReference\r\n   */\r\n  _contentReference?:fhir.FhirElement;\r\n  /**\r\n   * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).\r\n   */\r\n  type?: (fhir.ElementDefinitionType|null)[]|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueBase64Binary?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueBase64Binary?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueCanonical?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueCode?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueDate?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueDateTime?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueId?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueInstant?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueInteger?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueMarkdown?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueMarkdown?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueOid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueOid?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValuePositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValuePositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueString?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueTime?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueUri?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueUrl?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueUrl?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueUuid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.defaultValue[x]\r\n   */\r\n  _defaultValueUuid?:fhir.FhirElement;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueAge?: fhir.Age|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueAnnotation?: fhir.Annotation|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueCodeableReference?: fhir.CodeableReference|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueContactPoint?: fhir.ContactPoint|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueCount?: fhir.Count|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDistance?: fhir.Distance|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueHumanName?: fhir.HumanName|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueIdentifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueMoney?: fhir.Money|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValuePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueRange?: fhir.Range|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueRatio?: fhir.Ratio|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueRatioRange?: fhir.RatioRange|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueSampledData?: fhir.SampledData|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueTiming?: fhir.Timing|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueContactDetail?: fhir.ContactDetail|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueContributor?: fhir.Contributor|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDataRequirement?: fhir.DataRequirement|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueExpression?: fhir.Expression|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueParameterDefinition?: fhir.ParameterDefinition|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueRelatedArtifact?: fhir.RelatedArtifact|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueTriggerDefinition?: fhir.TriggerDefinition|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueUsageContext?: fhir.UsageContext|undefined;\r\n  /**\r\n   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. \r\n   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints (\"profiles\") on data types or resources. This element only exists so that default values may be defined in logical models.\r\n   */\r\n  defaultValueDosage?: fhir.Dosage|undefined;\r\n  /**\r\n   * Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.\r\n   */\r\n  meaningWhenMissing?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.meaningWhenMissing\r\n   */\r\n  _meaningWhenMissing?:fhir.FhirElement;\r\n  /**\r\n   * This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.\r\n   */\r\n  orderMeaning?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.orderMeaning\r\n   */\r\n  _orderMeaning?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedBase64Binary?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedBase64Binary?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedBoolean?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedCanonical?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedCode?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedDate?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedDateTime?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedDecimal?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedId?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedInstant?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedInteger?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedMarkdown?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedMarkdown?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedOid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedOid?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedPositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedPositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedString?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedTime?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedUri?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedUrl?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedUrl?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedUuid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.fixed[x]\r\n   */\r\n  _fixedUuid?:fhir.FhirElement;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedAddress?: fhir.Address|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedAge?: fhir.Age|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedAnnotation?: fhir.Annotation|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedCodeableReference?: fhir.CodeableReference|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedContactPoint?: fhir.ContactPoint|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedCount?: fhir.Count|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDistance?: fhir.Distance|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedHumanName?: fhir.HumanName|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedIdentifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedMoney?: fhir.Money|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedRange?: fhir.Range|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedRatio?: fhir.Ratio|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedRatioRange?: fhir.RatioRange|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedReference?: fhir.Reference|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedSampledData?: fhir.SampledData|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedTiming?: fhir.Timing|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedContactDetail?: fhir.ContactDetail|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedContributor?: fhir.Contributor|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDataRequirement?: fhir.DataRequirement|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedExpression?: fhir.Expression|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedParameterDefinition?: fhir.ParameterDefinition|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedRelatedArtifact?: fhir.RelatedArtifact|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedTriggerDefinition?: fhir.TriggerDefinition|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedUsageContext?: fhir.UsageContext|undefined;\r\n  /**\r\n   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.\r\n   */\r\n  fixedDosage?: fhir.Dosage|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternBase64Binary?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternBase64Binary?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternCanonical?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternCode?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternDate?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternDateTime?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternDecimal?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternId?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternInstant?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternInteger?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternMarkdown?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternMarkdown?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternOid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternOid?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternPositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternPositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternString?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternTime?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternUri?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternUrl?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternUrl?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternUuid?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.pattern[x]\r\n   */\r\n  _patternUuid?:fhir.FhirElement;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternAge?: fhir.Age|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternAnnotation?: fhir.Annotation|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternCodeableReference?: fhir.CodeableReference|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternContactPoint?: fhir.ContactPoint|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternCount?: fhir.Count|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDistance?: fhir.Distance|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternHumanName?: fhir.HumanName|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternIdentifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternMoney?: fhir.Money|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternRange?: fhir.Range|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternRatio?: fhir.Ratio|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternRatioRange?: fhir.RatioRange|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternSampledData?: fhir.SampledData|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternTiming?: fhir.Timing|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternContactDetail?: fhir.ContactDetail|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternContributor?: fhir.Contributor|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDataRequirement?: fhir.DataRequirement|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternExpression?: fhir.Expression|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternParameterDefinition?: fhir.ParameterDefinition|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternRelatedArtifact?: fhir.RelatedArtifact|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternTriggerDefinition?: fhir.TriggerDefinition|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternUsageContext?: fhir.UsageContext|undefined;\r\n  /**\r\n   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].\r\n   */\r\n  patternDosage?: fhir.Dosage|undefined;\r\n  /**\r\n   * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.\r\n   */\r\n  example?: (fhir.ElementDefinitionExample|null)[]|undefined;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueDate?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueDateTime?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueInstant?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueTime?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueInteger?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValuePositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValuePositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.minValue[x]\r\n   */\r\n  _minValueUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.\r\n   */\r\n  minValueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueDate?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueDateTime?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueInstant?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueInstant?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueTime?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueInteger?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValuePositiveInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValuePositiveInt?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxValue[x]\r\n   */\r\n  _maxValueUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.\r\n   */\r\n  maxValueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.\r\n   */\r\n  maxLength?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.maxLength\r\n   */\r\n  _maxLength?:fhir.FhirElement;\r\n  /**\r\n   * A reference to an invariant that may make additional statements about the cardinality or value in the instance.\r\n   */\r\n  condition?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.condition\r\n   */\r\n  _condition?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Constraints should be declared on the \"context\" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.\r\n   */\r\n  constraint?: (fhir.ElementDefinitionConstraint|null)[]|undefined;\r\n  /**\r\n   * \"Something useful\" is context dependent and impossible to describe in the base FHIR specification. For this reason, tue mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles.  A profile on a type can always make musSupport = true if it is false in the base type but cannot make mustSupport = false if it is true in the base type.   This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of \"support\" is required, as this can mean many things.    Note that an element that has the property IsModifier is not necessarily a \"key\" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.\r\n   */\r\n  mustSupport?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.mustSupport\r\n   */\r\n  _mustSupport?:fhir.FhirElement;\r\n  /**\r\n   * Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles. An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.\r\n   */\r\n  isModifier?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.isModifier\r\n   */\r\n  _isModifier?:fhir.FhirElement;\r\n  /**\r\n   * Explains how that element affects the interpretation of the resource or element that contains it.\r\n   */\r\n  isModifierReason?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.isModifierReason\r\n   */\r\n  _isModifierReason?:fhir.FhirElement;\r\n  /**\r\n   * Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance, so servers might not support per-profile use of the isSummary flag. When a request is made with _summary=true, serailisers only include elements marked as 'isSummary = true'. Other than Attachment.data, all data type properties are included in the summary form. In resource and data type definitions, if an element is at the root or has a parent that is 'mustSupport' and the minimum cardinality is 1 or the element is a modifier, it must be marked as isSummary=true.\r\n   */\r\n  isSummary?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ElementDefinition.isSummary\r\n   */\r\n  _isSummary?:fhir.FhirElement;\r\n  /**\r\n   * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength \"required\" with a description explaining that no coded values are allowed and what sort of information to put in the \"text\" element.\r\n   */\r\n  binding?: fhir.ElementDefinitionBinding|undefined;\r\n  /**\r\n   * Mappings are not necessarily specific enough for safe translation.\r\n   */\r\n  mapping?: (fhir.ElementDefinitionMapping|null)[]|undefined;\r\n}\r\n"]}