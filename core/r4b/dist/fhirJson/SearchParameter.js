// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: SearchParameter
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"SearchParameter.js","sourceRoot":"./src/","sources":["fhirJson/SearchParameter.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,gDAAgD;AAChD,kCAAkC;AAClC,iCAAiC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4b.core version: 4.3.0\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SearchParameter\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Used to define the parts of a composite search parameter.\r\n */\r\nexport interface SearchParameterComponent extends fhir.BackboneElement { \r\n  /**\r\n   * The definition of the search parameter that describes this part.\r\n   */\r\n  definition: string|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.component.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * This expression overrides the expression in the definition and extracts the index values from the outcome of the composite expression.\r\n   */\r\n  expression: string|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.component.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A search parameter that defines a named search item that can be used to search/filter on a resource.\r\n */\r\nexport interface SearchParameter extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SearchParameter\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * There may be different search parameter instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the search parameter with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The intent of this is that a server can designate that it provides support for a search parameter defined in the specification itself (e.g.  [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantity), but detail how it is supported by the server.\r\n   */\r\n  derivedFrom?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.derivedFrom\r\n   */\r\n  _derivedFrom?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of search parameters that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of search parameters that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the search parameter. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the search parameter is the organization or individual primarily responsible for the maintenance and upkeep of the search parameter. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the search parameter. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the search parameter was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the search parameter as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the search parameter is presumed to be the predominant language in the place the search parameter was created).\r\n   */\r\n  description: string|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the search parameter to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the search parameter. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this search parameter.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * For maximum compatibility, use only lowercase ASCII characters.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * A search parameter must always apply to at least one resource type. When search parameters apply to more than one resource type, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).\r\n   */\r\n  base: (('Account'|'ActivityDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription')|null)[]|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.base\r\n   */\r\n  _base?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The type of value that a search parameter may contain, and how the content is interpreted.\r\n   */\r\n  type: 'composite'|'date'|'number'|'quantity'|'reference'|'special'|'string'|'token'|'uri'|null;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Note that the elements returned by the expression are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system. For composite search parameters, the outcome of the expression must a collection of base elements from which the composites are derived.\r\n   */\r\n  expression?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n  /**\r\n   * Note that the elements returned by the XPath are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system.\r\n   */\r\n  xpath?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.xpath\r\n   */\r\n  _xpath?:fhir.FhirElement;\r\n  /**\r\n   * How the search parameter relates to the set of elements returned by evaluating the xpath query.\r\n   */\r\n  xpathUsage?: 'distance'|'nearby'|'normal'|'other'|'phonetic'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.xpathUsage\r\n   */\r\n  _xpathUsage?:fhir.FhirElement;\r\n  /**\r\n   * Types of resource (if a resource is referenced).\r\n   */\r\n  target?: (('Account'|'ActivityDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.target\r\n   */\r\n  _target?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.\r\n   */\r\n  multipleOr?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.multipleOr\r\n   */\r\n  _multipleOr?:fhir.FhirElement;\r\n  /**\r\n   * Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.\r\n   */\r\n  multipleAnd?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.multipleAnd\r\n   */\r\n  _multipleAnd?:fhir.FhirElement;\r\n  /**\r\n   * If no comparators are listed, clients should not expect servers to support any comparators.\r\n   */\r\n  comparator?: (('ap'|'eb'|'eq'|'ge'|'gt'|'le'|'lt'|'ne'|'sa')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.comparator\r\n   */\r\n  _comparator?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A modifier supported for the search parameter.\r\n   */\r\n  modifier?: (('above'|'below'|'contains'|'exact'|'identifier'|'in'|'missing'|'not'|'not-in'|'ofType'|'text'|'type')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.modifier\r\n   */\r\n  _modifier?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Systems are not required to list all the chain names they support, but if they don't list them, clients might not know to use them.\r\n   */\r\n  chain?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: SearchParameter.chain\r\n   */\r\n  _chain?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Used to define the parts of a composite search parameter.\r\n   */\r\n  component?: (fhir.SearchParameterComponent|null)[]|undefined;\r\n}\r\n"]}