// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
export {};
//# sourceMappingURL=data:application/json;base64,