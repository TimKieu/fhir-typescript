// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Encounter
import * as fhir from '../fhir.js';
// @ts-ignore
import { EncounterStatusVsValidation } from '../fhirValueSets/EncounterStatusVsValidation.js';
// @ts-ignore
import { EncounterLocationStatusVsValidation } from '../fhirValueSets/EncounterLocationStatusVsValidation.js';
/**
 * The current status is always found in the current version of the resource, not the status history.
 */
export class EncounterStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.statusHistory';
        }
        this.vRSV('status', exp, 'EncounterStatus', EncounterStatusVsValidation, 'r');
        this.vRS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterStatusHistory._fts_dataType = 'EncounterStatusHistory';
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.
 * This would be used for a case where an admission starts of as an emergency encounter, then transisions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kindof discharge from emergency to inpatient.
 */
export class EncounterClassHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterClassHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.classHistory';
        }
        this.vRS('class', exp);
        this.vRS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterClassHistory._fts_dataType = 'EncounterClassHistory';
/**
 * The list of people responsible for providing the service.
 */
export class EncounterParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.participant';
        }
        this.vOA('type', exp);
        this.vOS('period', exp);
        this.vOS('individual', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterParticipant._fts_dataType = 'EncounterParticipant';
/**
 * The list of diagnosis relevant to this encounter.
 */
export class EncounterDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        else {
            this.condition = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
        if (source['_rank']) {
            if (this.rank) {
                this.rank.addExtendedProperties(source._rank);
            }
            else {
                this.rank = new fhir.FhirPositiveInt(source._rank);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.diagnosis';
        }
        this.vRS('condition', exp);
        this.vOS('role', exp);
        this.vOS('rank', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterDiagnosis._fts_dataType = 'EncounterDiagnosis';
/**
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export class EncounterHospitalization extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterHospitalization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['preAdmissionIdentifier']) {
            this.preAdmissionIdentifier = new fhir.Identifier(source.preAdmissionIdentifier);
        }
        if (source['origin']) {
            this.origin = new fhir.Reference(source.origin);
        }
        if (source['admitSource']) {
            this.admitSource = new fhir.CodeableConcept(source.admitSource);
        }
        if (source['reAdmission']) {
            this.reAdmission = new fhir.CodeableConcept(source.reAdmission);
        }
        if (source['dietPreference']) {
            this.dietPreference = source.dietPreference.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.dietPreference = [];
        }
        if (source['specialCourtesy']) {
            this.specialCourtesy = source.specialCourtesy.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialCourtesy = [];
        }
        if (source['specialArrangement']) {
            this.specialArrangement = source.specialArrangement.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialArrangement = [];
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['dischargeDisposition']) {
            this.dischargeDisposition = new fhir.CodeableConcept(source.dischargeDisposition);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.hospitalization';
        }
        this.vOS('preAdmissionIdentifier', exp);
        this.vOS('origin', exp);
        this.vOS('admitSource', exp);
        this.vOS('reAdmission', exp);
        this.vOA('dietPreference', exp);
        this.vOA('specialCourtesy', exp);
        this.vOA('specialArrangement', exp);
        this.vOS('destination', exp);
        this.vOS('dischargeDisposition', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterHospitalization._fts_dataType = 'EncounterHospitalization';
/**
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export class EncounterLocation extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        else {
            this.location = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.location';
        }
        this.vRS('location', exp);
        this.vOSV('status', exp, 'EncounterLocationStatus', EncounterLocationStatusVsValidation, 'r');
        this.vOS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterLocation._fts_dataType = 'EncounterLocation';
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export class Encounter extends fhir.DomainResource {
    /**
     * Default constructor for Encounter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Encounter';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EncounterStatusHistory(x));
        }
        else {
            this.statusHistory = [];
        }
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        if (source['classHistory']) {
            this.classHistory = source.classHistory.map((x) => new fhir.EncounterClassHistory(x));
        }
        else {
            this.classHistory = [];
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['episodeOfCare']) {
            this.episodeOfCare = source.episodeOfCare.map((x) => new fhir.Reference(x));
        }
        else {
            this.episodeOfCare = [];
        }
        if (source['incomingReferral']) {
            this.incomingReferral = source.incomingReferral.map((x) => new fhir.Reference(x));
        }
        else {
            this.incomingReferral = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.EncounterParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['appointment']) {
            this.appointment = new fhir.Reference(source.appointment);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['length']) {
            this.length = new fhir.Duration(source.length);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EncounterDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.EncounterHospitalization(source.hospitalization);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.EncounterLocation(x));
        }
        else {
            this.location = [];
        }
        if (source['serviceProvider']) {
            this.serviceProvider = new fhir.Reference(source.serviceProvider);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'EncounterStatus', EncounterStatusVsValidation, 'r');
        this.vOA('statusHistory', exp);
        this.vOS('class', exp);
        this.vOA('classHistory', exp);
        this.vOA('type', exp);
        this.vOS('priority', exp);
        this.vOS('subject', exp);
        this.vOA('episodeOfCare', exp);
        this.vOA('incomingReferral', exp);
        this.vOA('participant', exp);
        this.vOS('appointment', exp);
        this.vOS('period', exp);
        this.vOS('length', exp);
        this.vOA('reason', exp);
        this.vOA('diagnosis', exp);
        this.vOA('account', exp);
        this.vOS('hospitalization', exp);
        this.vOA('location', exp);
        this.vOS('serviceProvider', exp);
        this.vOS('partOf', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Encounter._fts_dataType = 'Encounter';
//# sourceMappingURL=data:application/json;base64,