// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: PractitionerRole
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekVsValidation } from '../fhirValueSets/DaysOfWeekVsValidation.js';
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export class PractitionerRoleAvailableTime extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerRoleAvailableTime - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['_daysOfWeek']) {
            source._daysOfWeek.forEach((x, i) => {
                if (this.daysOfWeek.length >= i) {
                    if (x) {
                        this.daysOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.daysOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['allDay']) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay });
        }
        if (source['_allDay']) {
            if (this.allDay) {
                this.allDay.addExtendedProperties(source._allDay);
            }
            else {
                this.allDay = new fhir.FhirBoolean(source._allDay);
            }
        }
        if (source['availableStartTime']) {
            this.availableStartTime = new fhir.FhirTime({ value: source.availableStartTime });
        }
        if (source['_availableStartTime']) {
            if (this.availableStartTime) {
                this.availableStartTime.addExtendedProperties(source._availableStartTime);
            }
            else {
                this.availableStartTime = new fhir.FhirTime(source._availableStartTime);
            }
        }
        if (source['availableEndTime']) {
            this.availableEndTime = new fhir.FhirTime({ value: source.availableEndTime });
        }
        if (source['_availableEndTime']) {
            if (this.availableEndTime) {
                this.availableEndTime.addExtendedProperties(source._availableEndTime);
            }
            else {
                this.availableEndTime = new fhir.FhirTime(source._availableEndTime);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PractitionerRole.availableTime';
        }
        this.vOAV('daysOfWeek', exp, 'DaysOfWeek', DaysOfWeekVsValidation, 'r');
        this.vOS('allDay', exp);
        this.vOS('availableStartTime', exp);
        this.vOS('availableEndTime', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PractitionerRoleAvailableTime._fts_dataType = 'PractitionerRoleAvailableTime';
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export class PractitionerRoleNotAvailable extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerRoleNotAvailable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['during']) {
            this.during = new fhir.Period(source.during);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PractitionerRole.notAvailable';
        }
        this.vRS('description', exp);
        this.vOS('during', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PractitionerRoleNotAvailable._fts_dataType = 'PractitionerRoleNotAvailable';
/**
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
export class PractitionerRole extends fhir.DomainResource {
    /**
     * Default constructor for PractitionerRole - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PractitionerRole';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['practitioner']) {
            this.practitioner = new fhir.Reference(source.practitioner);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x));
        }
        else {
            this.location = [];
        }
        if (source['healthcareService']) {
            this.healthcareService = source.healthcareService.map((x) => new fhir.Reference(x));
        }
        else {
            this.healthcareService = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['availableTime']) {
            this.availableTime = source.availableTime.map((x) => new fhir.PractitionerRoleAvailableTime(x));
        }
        else {
            this.availableTime = [];
        }
        if (source['notAvailable']) {
            this.notAvailable = source.notAvailable.map((x) => new fhir.PractitionerRoleNotAvailable(x));
        }
        else {
            this.notAvailable = [];
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions });
        }
        if (source['_availabilityExceptions']) {
            if (this.availabilityExceptions) {
                this.availabilityExceptions.addExtendedProperties(source._availabilityExceptions);
            }
            else {
                this.availabilityExceptions = new fhir.FhirString(source._availabilityExceptions);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'PractitionerRole';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('active', exp);
        this.vOS('period', exp);
        this.vOS('practitioner', exp);
        this.vOS('organization', exp);
        this.vOA('code', exp);
        this.vOA('specialty', exp);
        this.vOA('location', exp);
        this.vOA('healthcareService', exp);
        this.vOA('telecom', exp);
        this.vOA('availableTime', exp);
        this.vOA('notAvailable', exp);
        this.vOS('availabilityExceptions', exp);
        this.vOA('endpoint', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PractitionerRole._fts_dataType = 'PractitionerRole';
//# sourceMappingURL=data:application/json;base64,