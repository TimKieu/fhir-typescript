// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location
import * as fhir from '../fhir.js';
// @ts-ignore
import { LocationStatusVsValidation } from '../fhirValueSets/LocationStatusVsValidation.js';
// @ts-ignore
import { LocationModeVsValidation } from '../fhirValueSets/LocationModeVsValidation.js';
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement {
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['longitude']) {
            this.longitude = new fhir.FhirDecimal({ value: source.longitude });
        }
        else {
            this.longitude = null;
        }
        if (source['_longitude']) {
            if (this.longitude) {
                this.longitude.addExtendedProperties(source._longitude);
            }
            else {
                this.longitude = new fhir.FhirDecimal(source._longitude);
            }
        }
        if (source['latitude']) {
            this.latitude = new fhir.FhirDecimal({ value: source.latitude });
        }
        else {
            this.latitude = null;
        }
        if (source['_latitude']) {
            if (this.latitude) {
                this.latitude.addExtendedProperties(source._latitude);
            }
            else {
                this.latitude = new fhir.FhirDecimal(source._latitude);
            }
        }
        if (source['altitude']) {
            this.altitude = new fhir.FhirDecimal({ value: source.altitude });
        }
        if (source['_altitude']) {
            if (this.altitude) {
                this.altitude.addExtendedProperties(source._altitude);
            }
            else {
                this.altitude = new fhir.FhirDecimal(source._altitude);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Location.position';
        }
        iss.push(...this.vRS('longitude', exp));
        iss.push(...this.vRS('latitude', exp));
        iss.push(...this.vOS('altitude', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationPosition._fts_dataType = 'LocationPosition';
/**
 * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
 */
export class Location extends fhir.DomainResource {
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Location';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.Coding(source.operationalStatus);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['position']) {
            this.position = new fhir.LocationPosition(source.position);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Location';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'LocationStatus', LocationStatusVsValidation, 'r'));
        iss.push(...this.vOS('operationalStatus', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('alias', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOSV('mode', exp, 'LocationMode', LocationModeVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOS('address', exp));
        iss.push(...this.vOS('physicalType', exp));
        iss.push(...this.vOS('position', exp));
        iss.push(...this.vOS('managingOrganization', exp));
        iss.push(...this.vOS('partOf', exp));
        iss.push(...this.vOA('endpoint', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Location._fts_dataType = 'Location';
//# sourceMappingURL=data:application/json;base64,