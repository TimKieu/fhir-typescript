// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ProcedureRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestIntentVsValidation } from '../fhirValueSets/RequestIntentVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
/**
 * This not the dispatcher, but rather who is the authorizer.
 */
export class ProcedureRequestRequester extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureRequestRequester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['agent']) {
            this.agent = new fhir.Reference(source.agent, options);
        }
        else {
            this.agent = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ProcedureRequest.requester';
        }
        iss.push(...this.vRS('agent', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedureRequestRequester._fts_dataType = 'ProcedureRequestRequester';
/**
 * A record of a request for diagnostic investigations, treatments, or operations to be performed.
 */
export class ProcedureRequest extends fhir.DomainResource {
    /**
     * Default constructor for ProcedureRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ProcedureRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.definition = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.replaces = [];
        }
        if (source['requisition']) {
            this.requisition = new fhir.Identifier(source.requisition, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['intent'] !== undefined) {
            this.intent = new fhir.FhirCode({ value: source.intent }, options);
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent, options);
            }
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirCode({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority, options);
            }
        }
        if (source['doNotPerform'] !== undefined) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform }, options);
        }
        if (source['_doNotPerform']) {
            if (this.doNotPerform) {
                this.doNotPerform.addExtendedProperties(source._doNotPerform);
            }
            else {
                this.doNotPerform = new fhir.FhirBoolean(source._doNotPerform, options);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime'] !== undefined) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime }, options);
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod, options);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming, options);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean'] !== undefined) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean }, options);
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept, options);
        }
        if (source['authoredOn'] !== undefined) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn }, options);
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn, options);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.ProcedureRequestRequester(source.requester, options);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType, options);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.specimen = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.bodySite = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.relevantHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ProcedureRequest';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('definition', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('replaces', exp));
        iss.push(...this.vOS('requisition', exp));
        iss.push(...this.vRSV('status', exp, 'RequestStatus', RequestStatusVsValidation, 'r'));
        iss.push(...this.vRSV('intent', exp, 'RequestIntent', RequestIntentVsValidation, 'r'));
        iss.push(...this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r'));
        iss.push(...this.vOS('doNotPerform', exp));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('occurrence', exp));
        iss.push(...this.vOS('asNeeded', exp));
        iss.push(...this.vOS('authoredOn', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOS('performerType', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('supportingInfo', exp));
        iss.push(...this.vOA('specimen', exp));
        iss.push(...this.vOA('bodySite', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('relevantHistory', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedureRequest._fts_dataType = 'ProcedureRequest';
/**
 * Internal flag to properly serialize choice-type element ProcedureRequest.occurrence[x]
 */
ProcedureRequest._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ProcedureRequest.asNeeded[x]
 */
ProcedureRequest._fts_asNeededIsChoice = true;
//# sourceMappingURL=data:application/json;base64,