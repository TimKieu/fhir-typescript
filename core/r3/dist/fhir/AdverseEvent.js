// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: AdverseEvent
import * as fhir from '../fhir.js';
// @ts-ignore
import { AdverseEventCausalityVsValidation } from '../fhirValueSets/AdverseEventCausalityVsValidation.js';
// @ts-ignore
import { AdverseEventCategoryVsValidation } from '../fhirValueSets/AdverseEventCategoryVsValidation.js';
// @ts-ignore
import { AdverseEventOutcomeVsValidation } from '../fhirValueSets/AdverseEventOutcomeVsValidation.js';
/**
 * Describes the entity that is suspected to have caused the adverse event.
 */
export class AdverseEventSuspectEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['instance']) {
            this.instance = new fhir.Reference(source.instance);
        }
        else {
            this.instance = null;
        }
        if (source['causality']) {
            this.causality = new fhir.FhirCode({ value: source.causality });
        }
        if (source['_causality']) {
            if (this.causality) {
                this.causality.addExtendedProperties(source._causality);
            }
            else {
                this.causality = new fhir.FhirCode(source._causality);
            }
        }
        if (source['causalityAssessment']) {
            this.causalityAssessment = new fhir.CodeableConcept(source.causalityAssessment);
        }
        if (source['causalityProductRelatedness']) {
            this.causalityProductRelatedness = new fhir.FhirString({ value: source.causalityProductRelatedness });
        }
        if (source['_causalityProductRelatedness']) {
            if (this.causalityProductRelatedness) {
                this.causalityProductRelatedness.addExtendedProperties(source._causalityProductRelatedness);
            }
            else {
                this.causalityProductRelatedness = new fhir.FhirString(source._causalityProductRelatedness);
            }
        }
        if (source['causalityMethod']) {
            this.causalityMethod = new fhir.CodeableConcept(source.causalityMethod);
        }
        if (source['causalityAuthor']) {
            this.causalityAuthor = new fhir.Reference(source.causalityAuthor);
        }
        if (source['causalityResult']) {
            this.causalityResult = new fhir.CodeableConcept(source.causalityResult);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdverseEvent.suspectEntity';
        }
        iss.push(...this.vRS('instance', exp));
        iss.push(...this.vOSV('causality', exp, 'AdverseEventCausality', AdverseEventCausalityVsValidation, 'r'));
        iss.push(...this.vOS('causalityAssessment', exp));
        iss.push(...this.vOS('causalityProductRelatedness', exp));
        iss.push(...this.vOS('causalityMethod', exp));
        iss.push(...this.vOS('causalityAuthor', exp));
        iss.push(...this.vOS('causalityResult', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdverseEventSuspectEntity._fts_dataType = 'AdverseEventSuspectEntity';
/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
export class AdverseEvent extends fhir.DomainResource {
    /**
     * Default constructor for AdverseEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AdverseEvent';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.Reference(x));
        }
        else {
            this.reaction = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['seriousness']) {
            this.seriousness = new fhir.CodeableConcept(source.seriousness);
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['eventParticipant']) {
            this.eventParticipant = new fhir.Reference(source.eventParticipant);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['suspectEntity']) {
            this.suspectEntity = source.suspectEntity.map((x) => new fhir.AdverseEventSuspectEntity(x));
        }
        else {
            this.suspectEntity = [];
        }
        if (source['subjectMedicalHistory']) {
            this.subjectMedicalHistory = source.subjectMedicalHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.subjectMedicalHistory = [];
        }
        if (source['referenceDocument']) {
            this.referenceDocument = source.referenceDocument.map((x) => new fhir.Reference(x));
        }
        else {
            this.referenceDocument = [];
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.Reference(x));
        }
        else {
            this.study = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AdverseEvent';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOSV('category', exp, 'AdverseEventCategory', AdverseEventCategoryVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOA('reaction', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('seriousness', exp));
        iss.push(...this.vOSV('outcome', exp, 'AdverseEventOutcome', AdverseEventOutcomeVsValidation, 'r'));
        iss.push(...this.vOS('recorder', exp));
        iss.push(...this.vOS('eventParticipant', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('suspectEntity', exp));
        iss.push(...this.vOA('subjectMedicalHistory', exp));
        iss.push(...this.vOA('referenceDocument', exp));
        iss.push(...this.vOA('study', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdverseEvent._fts_dataType = 'AdverseEvent';
//# sourceMappingURL=data:application/json;base64,