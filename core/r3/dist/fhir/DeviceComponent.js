// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceComponent
import * as fhir from '../fhir.js';
// @ts-ignore
import { MeasurementPrincipleVsValidation } from '../fhirValueSets/MeasurementPrincipleVsValidation.js';
/**
 * The production specification such as component revision, serial number, etc.
 */
export class DeviceComponentProductionSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceComponentProductionSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['specType']) {
            this.specType = new fhir.CodeableConcept(source.specType);
        }
        if (source['componentId']) {
            this.componentId = new fhir.Identifier(source.componentId);
        }
        if (source['productionSpec']) {
            this.productionSpec = new fhir.FhirString({ value: source.productionSpec });
        }
        if (source['_productionSpec']) {
            if (this.productionSpec) {
                this.productionSpec.addExtendedProperties(source._productionSpec);
            }
            else {
                this.productionSpec = new fhir.FhirString(source._productionSpec);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceComponent.productionSpecification';
        }
        this.vOS('specType', exp);
        this.vOS('componentId', exp);
        this.vOS('productionSpec', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceComponentProductionSpecification._fts_dataType = 'DeviceComponentProductionSpecification';
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceComponent extends fhir.DomainResource {
    /**
     * Default constructor for DeviceComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceComponent';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        else {
            this.identifier = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['lastSystemChange']) {
            this.lastSystemChange = new fhir.FhirInstant({ value: source.lastSystemChange });
        }
        if (source['_lastSystemChange']) {
            if (this.lastSystemChange) {
                this.lastSystemChange.addExtendedProperties(source._lastSystemChange);
            }
            else {
                this.lastSystemChange = new fhir.FhirInstant(source._lastSystemChange);
            }
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = source.operationalStatus.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.operationalStatus = [];
        }
        if (source['parameterGroup']) {
            this.parameterGroup = new fhir.CodeableConcept(source.parameterGroup);
        }
        if (source['measurementPrinciple']) {
            this.measurementPrinciple = new fhir.FhirCode({ value: source.measurementPrinciple });
        }
        if (source['_measurementPrinciple']) {
            if (this.measurementPrinciple) {
                this.measurementPrinciple.addExtendedProperties(source._measurementPrinciple);
            }
            else {
                this.measurementPrinciple = new fhir.FhirCode(source._measurementPrinciple);
            }
        }
        if (source['productionSpecification']) {
            this.productionSpecification = source.productionSpecification.map((x) => new fhir.DeviceComponentProductionSpecification(x));
        }
        else {
            this.productionSpecification = [];
        }
        if (source['languageCode']) {
            this.languageCode = new fhir.CodeableConcept(source.languageCode);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceComponent';
        }
        this.vRS('resourceType', exp);
        this.vRS('identifier', exp);
        this.vRS('type', exp);
        this.vOS('lastSystemChange', exp);
        this.vOS('source', exp);
        this.vOS('parent', exp);
        this.vOA('operationalStatus', exp);
        this.vOS('parameterGroup', exp);
        this.vOSV('measurementPrinciple', exp, 'MeasurementPrinciple', MeasurementPrincipleVsValidation, 'r');
        this.vOA('productionSpecification', exp);
        this.vOS('languageCode', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceComponent._fts_dataType = 'DeviceComponent';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9EZXZpY2VDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBRWpDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBb0JuQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sc0RBQXNELENBQUM7QUEyQnhHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHNDQUF1QyxTQUFRLElBQUksQ0FBQyxlQUFlO0lBaUI5RTs7T0FFRztJQUNILFlBQVksU0FBNkQsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDbkgsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUFFO1FBQ3RGLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQUU7UUFDMUYsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDNUcsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUM3QixJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsZUFBZ0IsQ0FBQyxDQUFDO2FBQUU7aUJBQzNGO2dCQUFFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUErQyxDQUFDLENBQUM7YUFBRTtTQUM1RztJQUNILENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQixDQUFDLE1BQWEsRUFBRTtRQUMvQyxJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFELElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtZQUFFLEdBQUcsR0FBRyx5Q0FBeUMsQ0FBQTtTQUFFO1FBQ25FLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUMsR0FBRyxDQUFDLENBQUE7UUFDOUIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUF2Q0Q7O0dBRUc7QUFDNkIsb0RBQWEsR0FBVSx3Q0FBd0MsQ0FBQztBQWdHbEc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxJQUFJLENBQUMsY0FBYztJQWlEdEQ7O09BRUc7SUFDSCxZQUFZLFNBQXNDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQzVGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxpQkFBaUIsQ0FBQztRQUN0QyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUFFO2FBQ2xGO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FBRTtRQUNoQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUFFO2FBQ3JFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDbkgsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUMvQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLGlCQUFrQixDQUFDLENBQUM7YUFBRTtpQkFDakc7Z0JBQUUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsaUJBQWtELENBQUMsQ0FBQzthQUFFO1NBQ2xIO1FBQ0QsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FBRTtRQUMxRSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUFFO1FBQzFFLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUMxSDtZQUFFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7U0FBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQUU7UUFDeEcsSUFBSSxNQUFNLENBQUMsc0JBQXNCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQStCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxvQkFBb0IsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUMxSixJQUFJLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMscUJBQXNCLENBQUMsQ0FBQzthQUFFO2lCQUM3RztnQkFBRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUErQixNQUFNLENBQUMscUJBQStDLENBQUMsQ0FBQzthQUFFO1NBQzlJO1FBQ0QsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDbks7WUFBRSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDM0MsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7U0FBRTtJQUNwRyxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxNQUFhLEVBQUU7UUFDL0MsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxRCxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQUU7WUFBRSxHQUFHLEdBQUcsaUJBQWlCLENBQUE7U0FBRTtRQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUMsR0FBRyxDQUFDLENBQUE7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFDLEdBQUcsRUFBQyxzQkFBc0IsRUFBQyxnQ0FBZ0MsRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzVCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBL0ZEOztHQUVHO0FBQzZCLDZCQUFhLEdBQVUsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IERldmljZUNvbXBvbmVudFxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU3BlY2lmaWNhdGlvblR5cGVDb2RlcywgIFNwZWNpZmljYXRpb25UeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NwZWNpZmljYXRpb25UeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNwZWNpZmljYXRpb25UeXBlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TcGVjaWZpY2F0aW9uVHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRGV2aWNlS2luZENvZGVzLCAgRGV2aWNlS2luZENvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZXZpY2VLaW5kQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERldmljZUtpbmRWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RldmljZUtpbmRWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE9wZXJhdGlvbmFsU3RhdHVzQ29kZXMsICBPcGVyYXRpb25hbFN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9PcGVyYXRpb25hbFN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBPcGVyYXRpb25hbFN0YXR1c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvT3BlcmF0aW9uYWxTdGF0dXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFBhcmFtZXRlckdyb3VwQ29kZXMsICBQYXJhbWV0ZXJHcm91cENvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QYXJhbWV0ZXJHcm91cENvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQYXJhbWV0ZXJHcm91cFZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUGFyYW1ldGVyR3JvdXBWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1lYXN1cmVtZW50UHJpbmNpcGxlQ29kZXMsICBNZWFzdXJlbWVudFByaW5jaXBsZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9NZWFzdXJlbWVudFByaW5jaXBsZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWFzdXJlbWVudFByaW5jaXBsZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVhc3VyZW1lbnRQcmluY2lwbGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IExhbmd1YWdlc0NvZGVzLCAgTGFuZ3VhZ2VzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0xhbmd1YWdlc0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBMYW5ndWFnZXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0xhbmd1YWdlc1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEZXZpY2VDb21wb25lbnRQcm9kdWN0aW9uU3BlY2lmaWNhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VDb21wb25lbnRQcm9kdWN0aW9uU3BlY2lmaWNhdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWZpY2F0aW9uIHR5cGUsIHN1Y2ggYXMsIHNlcmlhbCBudW1iZXIsIHBhcnQgbnVtYmVyLCBoYXJkd2FyZSByZXZpc2lvbiwgc29mdHdhcmUgcmV2aXNpb24sIGV0Yy5cclxuICAgKi9cclxuICBzcGVjVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGludGVybmFsIGNvbXBvbmVudCB1bmlxdWUgaWRlbnRpZmljYXRpb24uIFRoaXMgaXMgYSBwcm92aXNpb24gZm9yIG1hbnVmYWN0dXJlIHNwZWNpZmljIHN0YW5kYXJkIGNvbXBvbmVudHMgdXNpbmcgYSBwcml2YXRlIE9JRC4gMTEwNzMtMTAxMDEgaGFzIGEgcGFydGl0aW9uIGZvciBwcml2YXRlIE9JRCBzZW1hbnRpYyB0aGF0IHRoZSBtYW51ZmFjdHVyZXIgY2FuIG1ha2UgdXNlIG9mLlxyXG4gICAqL1xyXG4gIGNvbXBvbmVudElkPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByaW50YWJsZSBzdHJpbmcgZGVmaW5pbmcgdGhlIGNvbXBvbmVudC5cclxuICAgKi9cclxuICBwcm9kdWN0aW9uU3BlYz86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VDb21wb25lbnQucHJvZHVjdGlvblNwZWNpZmljYXRpb24ucHJvZHVjdGlvblNwZWNcclxuICAgKi9cclxuICBfcHJvZHVjdGlvblNwZWM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHByb2R1Y3Rpb24gc3BlY2lmaWNhdGlvbiBzdWNoIGFzIGNvbXBvbmVudCByZXZpc2lvbiwgc2VyaWFsIG51bWJlciwgZXRjLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERldmljZUNvbXBvbmVudFByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRGV2aWNlQ29tcG9uZW50UHJvZHVjdGlvblNwZWNpZmljYXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWZpY2F0aW9uIHR5cGUsIHN1Y2ggYXMsIHNlcmlhbCBudW1iZXIsIHBhcnQgbnVtYmVyLCBoYXJkd2FyZSByZXZpc2lvbiwgc29mdHdhcmUgcmV2aXNpb24sIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgc3BlY1R5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGludGVybmFsIGNvbXBvbmVudCB1bmlxdWUgaWRlbnRpZmljYXRpb24uIFRoaXMgaXMgYSBwcm92aXNpb24gZm9yIG1hbnVmYWN0dXJlIHNwZWNpZmljIHN0YW5kYXJkIGNvbXBvbmVudHMgdXNpbmcgYSBwcml2YXRlIE9JRC4gMTEwNzMtMTAxMDEgaGFzIGEgcGFydGl0aW9uIGZvciBwcml2YXRlIE9JRCBzZW1hbnRpYyB0aGF0IHRoZSBtYW51ZmFjdHVyZXIgY2FuIG1ha2UgdXNlIG9mLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wb25lbnRJZD86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByaW50YWJsZSBzdHJpbmcgZGVmaW5pbmcgdGhlIGNvbXBvbmVudC5cclxuICAgKi9cclxuICBwdWJsaWMgcHJvZHVjdGlvblNwZWM/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIERldmljZUNvbXBvbmVudFByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RGV2aWNlQ29tcG9uZW50UHJvZHVjdGlvblNwZWNpZmljYXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnc3BlY1R5cGUnXSkgeyB0aGlzLnNwZWNUeXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zcGVjVHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbXBvbmVudElkJ10pIHsgdGhpcy5jb21wb25lbnRJZCA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLmNvbXBvbmVudElkKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvZHVjdGlvblNwZWMnXSkgeyB0aGlzLnByb2R1Y3Rpb25TcGVjID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5wcm9kdWN0aW9uU3BlY30pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHJvZHVjdGlvblNwZWMnXSkge1xyXG4gICAgICBpZiAodGhpcy5wcm9kdWN0aW9uU3BlYykgeyB0aGlzLnByb2R1Y3Rpb25TcGVjLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3Byb2R1Y3Rpb25TcGVjISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucHJvZHVjdGlvblNwZWMgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fcHJvZHVjdGlvblNwZWMgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdEZXZpY2VDb21wb25lbnQucHJvZHVjdGlvblNwZWNpZmljYXRpb24nIH1cclxuICAgIHRoaXMudk9TKCdzcGVjVHlwZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2NvbXBvbmVudElkJyxleHApXHJcbiAgICB0aGlzLnZPUygncHJvZHVjdGlvblNwZWMnLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEZXZpY2VDb21wb25lbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlQ29tcG9uZW50QXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiRGV2aWNlQ29tcG9uZW50XCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsb2NhbGx5IGFzc2lnbmVkIHVuaXF1ZSBpZGVudGlmaWNhdGlvbiBieSB0aGUgc29mdHdhcmUuIEZvciBleGFtcGxlOiBoYW5kbGUgSUQuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyQXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIERldmljZUNvbXBvbmVudC50eXBlIGNhbiBiZSByZWZlcnJlZCB0byBlaXRoZXIgR0RNTiAobm9tZW5jbGF0dXJlIHN5c3RlbSBzdXBwb3J0ZWQgYnkgRkRBIEdsb2JhbCBVREkgRGF0YWJhc2UpIG9yIHByZWZlcmFibGUgUlRNTVMgY29kaW5nIHN5c3RlbS5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgdGltZXN0YW1wIGZvciB0aGUgbW9zdCByZWNlbnQgc3lzdGVtIGNoYW5nZSB3aGljaCBpbmNsdWRlcyBkZXZpY2UgY29uZmlndXJhdGlvbiBvciBzZXR0aW5nIGNoYW5nZS5cclxuICAgKi9cclxuICBsYXN0U3lzdGVtQ2hhbmdlPzogZmhpci5GaGlySW5zdGFudHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VDb21wb25lbnQubGFzdFN5c3RlbUNoYW5nZVxyXG4gICAqL1xyXG4gIF9sYXN0U3lzdGVtQ2hhbmdlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgbGluayB0byB0aGUgc291cmNlIERldmljZSB0aGF0IGNvbnRhaW5zIGFkbWluaXN0cmF0aXZlIGRldmljZSBpbmZvcm1hdGlvbiBzdWNoIGFzIG1hbnVmYWN0dXJlLCBzZXJpYWwgbnVtYmVyLCBldGMuXHJcbiAgICovXHJcbiAgc291cmNlPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGluayB0byB0aGUgcGFyZW50IHJlc291cmNlLiBGb3IgZXhhbXBsZTogQ2hhbm5lbCBpcyBsaW5rZWQgdG8gaXRzIFZNRCBwYXJlbnQuXHJcbiAgICovXHJcbiAgcGFyZW50PzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBPcGVyYXRpb25hbFN0YXR1cyBmb3IgdGhlIE1EUywgVk1ELCBvciBDaGFubmVsIHdpbGwgYmUgYm91bmQgdG8gYSBzcGVjaWZpYyBWYWx1ZVNldCB0aGF0IGlzIGRlZmluZWQgaW4gaXRzIHByb2ZpbGUuXHJcbiAgICovXHJcbiAgb3BlcmF0aW9uYWxTdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcmFtZXRlciBncm91cCBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgZGV2aWNlIGNvbXBvbmVudCB0aGF0IGlzIGJhc2VkIG9uIHNvbWUgbm9tZW5jbGF0dXJlLCBlLmcuIGNhcmRpb3Zhc2N1bGFyLlxyXG4gICAqL1xyXG4gIHBhcmFtZXRlckdyb3VwPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcGh5c2ljYWwgcHJpbmNpcGxlIG9mIHRoZSBtZWFzdXJlbWVudC4gRm9yIGV4YW1wbGU6IHRoZXJtYWwsIGNoZW1pY2FsLCBhY291c3RpY2FsLCBldGMuXHJcbiAgICovXHJcbiAgbWVhc3VyZW1lbnRQcmluY2lwbGU/OiBmaGlyLkZoaXJDb2RlPE1lYXN1cmVtZW50UHJpbmNpcGxlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZUNvbXBvbmVudC5tZWFzdXJlbWVudFByaW5jaXBsZVxyXG4gICAqL1xyXG4gIF9tZWFzdXJlbWVudFByaW5jaXBsZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2R1Y3Rpb24gc3BlY2lmaWNhdGlvbiBzdWNoIGFzIGNvbXBvbmVudCByZXZpc2lvbiwgc2VyaWFsIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIHByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uPzogZmhpci5EZXZpY2VDb21wb25lbnRQcm9kdWN0aW9uU3BlY2lmaWNhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxhbmd1YWdlIGNvZGUgZm9yIHRoZSBodW1hbi1yZWFkYWJsZSB0ZXh0IHN0cmluZyBwcm9kdWNlZCBieSB0aGUgZGV2aWNlLiBUaGlzIGxhbmd1YWdlIGNvZGUgd2lsbCBmb2xsb3cgdGhlIElFVEYgbGFuZ3VhZ2UgdGFnLiBFeGFtcGxlOiBlbi1VUy5cclxuICAgKi9cclxuICBsYW5ndWFnZUNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGNoYXJhY3RlcmlzdGljcywgb3BlcmF0aW9uYWwgc3RhdHVzIGFuZCBjYXBhYmlsaXRpZXMgb2YgYSBtZWRpY2FsLXJlbGF0ZWQgY29tcG9uZW50IG9mIGEgbWVkaWNhbCBkZXZpY2UuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGV2aWNlQ29tcG9uZW50IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdEZXZpY2VDb21wb25lbnQnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiRGV2aWNlQ29tcG9uZW50XCI7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxvY2FsbHkgYXNzaWduZWQgdW5pcXVlIGlkZW50aWZpY2F0aW9uIGJ5IHRoZSBzb2Z0d2FyZS4gRm9yIGV4YW1wbGU6IGhhbmRsZSBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGV2aWNlQ29tcG9uZW50LnR5cGUgY2FuIGJlIHJlZmVycmVkIHRvIGVpdGhlciBHRE1OIChub21lbmNsYXR1cmUgc3lzdGVtIHN1cHBvcnRlZCBieSBGREEgR2xvYmFsIFVESSBEYXRhYmFzZSkgb3IgcHJlZmVyYWJsZSBSVE1NUyBjb2Rpbmcgc3lzdGVtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lc3RhbXAgZm9yIHRoZSBtb3N0IHJlY2VudCBzeXN0ZW0gY2hhbmdlIHdoaWNoIGluY2x1ZGVzIGRldmljZSBjb25maWd1cmF0aW9uIG9yIHNldHRpbmcgY2hhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsYXN0U3lzdGVtQ2hhbmdlPzogZmhpci5GaGlySW5zdGFudHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpbmsgdG8gdGhlIHNvdXJjZSBEZXZpY2UgdGhhdCBjb250YWlucyBhZG1pbmlzdHJhdGl2ZSBkZXZpY2UgaW5mb3JtYXRpb24gc3VjaCBhcyBtYW51ZmFjdHVyZSwgc2VyaWFsIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpbmsgdG8gdGhlIHBhcmVudCByZXNvdXJjZS4gRm9yIGV4YW1wbGU6IENoYW5uZWwgaXMgbGlua2VkIHRvIGl0cyBWTUQgcGFyZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJlbnQ/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT3BlcmF0aW9uYWxTdGF0dXMgZm9yIHRoZSBNRFMsIFZNRCwgb3IgQ2hhbm5lbCB3aWxsIGJlIGJvdW5kIHRvIGEgc3BlY2lmaWMgVmFsdWVTZXQgdGhhdCBpcyBkZWZpbmVkIGluIGl0cyBwcm9maWxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcGVyYXRpb25hbFN0YXR1czogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBUaGUgcGFyYW1ldGVyIGdyb3VwIHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBkZXZpY2UgY29tcG9uZW50IHRoYXQgaXMgYmFzZWQgb24gc29tZSBub21lbmNsYXR1cmUsIGUuZy4gY2FyZGlvdmFzY3VsYXIuXHJcbiAgICovXHJcbiAgcHVibGljIHBhcmFtZXRlckdyb3VwPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwaHlzaWNhbCBwcmluY2lwbGUgb2YgdGhlIG1lYXN1cmVtZW50LiBGb3IgZXhhbXBsZTogdGhlcm1hbCwgY2hlbWljYWwsIGFjb3VzdGljYWwsIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgbWVhc3VyZW1lbnRQcmluY2lwbGU/OiBmaGlyLkZoaXJDb2RlPE1lYXN1cmVtZW50UHJpbmNpcGxlQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvZHVjdGlvbiBzcGVjaWZpY2F0aW9uIHN1Y2ggYXMgY29tcG9uZW50IHJldmlzaW9uLCBzZXJpYWwgbnVtYmVyLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIHByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uOiBmaGlyLkRldmljZUNvbXBvbmVudFByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uW107XHJcbiAgLyoqXHJcbiAgICogVGhlIGxhbmd1YWdlIGNvZGUgZm9yIHRoZSBodW1hbi1yZWFkYWJsZSB0ZXh0IHN0cmluZyBwcm9kdWNlZCBieSB0aGUgZGV2aWNlLiBUaGlzIGxhbmd1YWdlIGNvZGUgd2lsbCBmb2xsb3cgdGhlIElFVEYgbGFuZ3VhZ2UgdGFnLiBFeGFtcGxlOiBlbi1VUy5cclxuICAgKi9cclxuICBwdWJsaWMgbGFuZ3VhZ2VDb2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIERldmljZUNvbXBvbmVudCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPERldmljZUNvbXBvbmVudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdEZXZpY2VDb21wb25lbnQnO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLmlkZW50aWZpZXIpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydsYXN0U3lzdGVtQ2hhbmdlJ10pIHsgdGhpcy5sYXN0U3lzdGVtQ2hhbmdlID0gbmV3IGZoaXIuRmhpckluc3RhbnQoe3ZhbHVlOiBzb3VyY2UubGFzdFN5c3RlbUNoYW5nZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbGFzdFN5c3RlbUNoYW5nZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmxhc3RTeXN0ZW1DaGFuZ2UpIHsgdGhpcy5sYXN0U3lzdGVtQ2hhbmdlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2xhc3RTeXN0ZW1DaGFuZ2UhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5sYXN0U3lzdGVtQ2hhbmdlID0gbmV3IGZoaXIuRmhpckluc3RhbnQoc291cmNlLl9sYXN0U3lzdGVtQ2hhbmdlIGFzIFBhcnRpYWw8Zmhpci5GaGlySW5zdGFudEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc291cmNlJ10pIHsgdGhpcy5zb3VyY2UgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnNvdXJjZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhcmVudCddKSB7IHRoaXMucGFyZW50ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5wYXJlbnQpOyB9XHJcbiAgICBpZiAoc291cmNlWydvcGVyYXRpb25hbFN0YXR1cyddKSB7IHRoaXMub3BlcmF0aW9uYWxTdGF0dXMgPSBzb3VyY2Uub3BlcmF0aW9uYWxTdGF0dXMubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5vcGVyYXRpb25hbFN0YXR1cyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXJhbWV0ZXJHcm91cCddKSB7IHRoaXMucGFyYW1ldGVyR3JvdXAgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnBhcmFtZXRlckdyb3VwKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWVhc3VyZW1lbnRQcmluY2lwbGUnXSkgeyB0aGlzLm1lYXN1cmVtZW50UHJpbmNpcGxlID0gbmV3IGZoaXIuRmhpckNvZGU8TWVhc3VyZW1lbnRQcmluY2lwbGVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UubWVhc3VyZW1lbnRQcmluY2lwbGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX21lYXN1cmVtZW50UHJpbmNpcGxlJ10pIHtcclxuICAgICAgaWYgKHRoaXMubWVhc3VyZW1lbnRQcmluY2lwbGUpIHsgdGhpcy5tZWFzdXJlbWVudFByaW5jaXBsZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9tZWFzdXJlbWVudFByaW5jaXBsZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm1lYXN1cmVtZW50UHJpbmNpcGxlID0gbmV3IGZoaXIuRmhpckNvZGU8TWVhc3VyZW1lbnRQcmluY2lwbGVDb2RlVHlwZT4oc291cmNlLl9tZWFzdXJlbWVudFByaW5jaXBsZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvZHVjdGlvblNwZWNpZmljYXRpb24nXSkgeyB0aGlzLnByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uID0gc291cmNlLnByb2R1Y3Rpb25TcGVjaWZpY2F0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuRGV2aWNlQ29tcG9uZW50UHJvZHVjdGlvblNwZWNpZmljYXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9kdWN0aW9uU3BlY2lmaWNhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydsYW5ndWFnZUNvZGUnXSkgeyB0aGlzLmxhbmd1YWdlQ29kZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UubGFuZ3VhZ2VDb2RlKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0RldmljZUNvbXBvbmVudCcgfVxyXG4gICAgdGhpcy52UlMoJ3Jlc291cmNlVHlwZScsZXhwKVxyXG4gICAgdGhpcy52UlMoJ2lkZW50aWZpZXInLGV4cClcclxuICAgIHRoaXMudlJTKCd0eXBlJyxleHApXHJcbiAgICB0aGlzLnZPUygnbGFzdFN5c3RlbUNoYW5nZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3NvdXJjZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3BhcmVudCcsZXhwKVxyXG4gICAgdGhpcy52T0EoJ29wZXJhdGlvbmFsU3RhdHVzJyxleHApXHJcbiAgICB0aGlzLnZPUygncGFyYW1ldGVyR3JvdXAnLGV4cClcclxuICAgIHRoaXMudk9TVignbWVhc3VyZW1lbnRQcmluY2lwbGUnLGV4cCwnTWVhc3VyZW1lbnRQcmluY2lwbGUnLE1lYXN1cmVtZW50UHJpbmNpcGxlVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9BKCdwcm9kdWN0aW9uU3BlY2lmaWNhdGlvbicsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2xhbmd1YWdlQ29kZScsZXhwKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19