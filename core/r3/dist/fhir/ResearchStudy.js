// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchStudy
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResearchStudyStatusVsValidation } from '../fhirValueSets/ResearchStudyStatusVsValidation.js';
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
export class ResearchStudyArm extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyArm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchStudy.arm';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudyArm._fts_dataType = 'ResearchStudyArm';
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export class ResearchStudy extends fhir.DomainResource {
    /**
     * Default constructor for ResearchStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['protocol']) {
            this.protocol = source.protocol.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.protocol = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.category = [];
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.focus = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x, options));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.keyword = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['enrollment']) {
            this.enrollment = source.enrollment.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.enrollment = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['sponsor']) {
            this.sponsor = new fhir.Reference(source.sponsor, options);
        }
        if (source['principalInvestigator']) {
            this.principalInvestigator = new fhir.Reference(source.principalInvestigator, options);
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.site = [];
        }
        if (source['reasonStopped']) {
            this.reasonStopped = new fhir.CodeableConcept(source.reasonStopped, options);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['arm']) {
            this.arm = source.arm.map((x) => new fhir.ResearchStudyArm(x, options));
        }
        else {
            this.arm = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchStudy';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOA('protocol', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'ResearchStudyStatus', ResearchStudyStatusVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vOA('focus', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOA('relatedArtifact', exp));
        iss.push(...this.vOA('keyword', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('enrollment', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('sponsor', exp));
        iss.push(...this.vOS('principalInvestigator', exp));
        iss.push(...this.vOA('site', exp));
        iss.push(...this.vOS('reasonStopped', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('arm', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudy._fts_dataType = 'ResearchStudy';
//# sourceMappingURL=data:application/json;base64,