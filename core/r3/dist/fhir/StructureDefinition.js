// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { StructureDefinitionKindVsValidation } from '../fhirValueSets/StructureDefinitionKindVsValidation.js';
// @ts-ignore
import { ExtensionContextVsValidation } from '../fhirValueSets/ExtensionContextVsValidation.js';
// @ts-ignore
import { TypeDerivationRuleVsValidation } from '../fhirValueSets/TypeDerivationRuleVsValidation.js';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.mapping';
        }
        iss.push(...this.vRS('identity', exp));
        iss.push(...this.vOS('uri', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('comment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionMapping._fts_dataType = 'StructureDefinitionMapping';
/**
 * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.snapshot';
        }
        iss.push(...this.vRA('element', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionSnapshot._fts_dataType = 'StructureDefinitionSnapshot';
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.differential';
        }
        iss.push(...this.vRA('element', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionDifferential._fts_dataType = 'StructureDefinitionDifferential';
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'StructureDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.Coding(x));
        }
        else {
            this.keyword = [];
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirId({ value: source.fhirVersion });
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirId(source._fhirVersion);
            }
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        else {
            this.abstract = null;
        }
        if (source['_abstract']) {
            if (this.abstract) {
                this.abstract.addExtendedProperties(source._abstract);
            }
            else {
                this.abstract = new fhir.FhirBoolean(source._abstract);
            }
        }
        if (source['contextType']) {
            this.contextType = new fhir.FhirCode({ value: source.contextType });
        }
        if (source['_contextType']) {
            if (this.contextType) {
                this.contextType.addExtendedProperties(source._contextType);
            }
            else {
                this.contextType = new fhir.FhirCode(source._contextType);
            }
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.context = [];
        }
        if (source['_context']) {
            source._context.forEach((x, i) => {
                if (this.context.length >= i) {
                    if (x) {
                        this.context[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.context.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['contextInvariant']) {
            this.contextInvariant = source.contextInvariant.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.contextInvariant = [];
        }
        if (source['_contextInvariant']) {
            source._contextInvariant.forEach((x, i) => {
                if (this.contextInvariant.length >= i) {
                    if (x) {
                        this.contextInvariant[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.contextInvariant.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['baseDefinition']) {
            this.baseDefinition = new fhir.FhirUri({ value: source.baseDefinition });
        }
        if (source['_baseDefinition']) {
            if (this.baseDefinition) {
                this.baseDefinition.addExtendedProperties(source._baseDefinition);
            }
            else {
                this.baseDefinition = new fhir.FhirUri(source._baseDefinition);
            }
        }
        if (source['derivation']) {
            this.derivation = new fhir.FhirCode({ value: source.derivation });
        }
        if (source['_derivation']) {
            if (this.derivation) {
                this.derivation.addExtendedProperties(source._derivation);
            }
            else {
                this.derivation = new fhir.FhirCode(source._derivation);
            }
        }
        if (source['snapshot']) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition';
        }
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOA('keyword', exp));
        iss.push(...this.vOS('fhirVersion', exp));
        iss.push(...this.vOA('mapping', exp));
        iss.push(...this.vRSV('kind', exp, 'StructureDefinitionKind', StructureDefinitionKindVsValidation, 'r'));
        iss.push(...this.vRS('abstract', exp));
        iss.push(...this.vOSV('contextType', exp, 'ExtensionContext', ExtensionContextVsValidation, 'r'));
        iss.push(...this.vOA('context', exp));
        iss.push(...this.vOA('contextInvariant', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('baseDefinition', exp));
        iss.push(...this.vOSV('derivation', exp, 'TypeDerivationRule', TypeDerivationRuleVsValidation, 'r'));
        iss.push(...this.vOS('snapshot', exp));
        iss.push(...this.vOS('differential', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinition._fts_dataType = 'StructureDefinition';
//# sourceMappingURL=data:application/json;base64,