// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClaimResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { NoteTypeVsValidation } from '../fhirValueSets/NoteTypeVsValidation.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
/**
 * The adjudication results.
 */
export class ClaimResponseItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.item.adjudication';
        }
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseItemAdjudication._fts_dataType = 'ClaimResponseItemAdjudication';
/**
 * The third tier service adjudications for submitted services.
 */
export class ClaimResponseItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequenceLinkId']) {
            this.sequenceLinkId = new fhir.FhirPositiveInt({ value: source.sequenceLinkId });
        }
        else {
            this.sequenceLinkId = null;
        }
        if (source['_sequenceLinkId']) {
            if (this.sequenceLinkId) {
                this.sequenceLinkId.addExtendedProperties(source._sequenceLinkId);
            }
            else {
                this.sequenceLinkId = new fhir.FhirPositiveInt(source._sequenceLinkId);
            }
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.item.detail.subDetail';
        }
        iss.push(...this.vRS('sequenceLinkId', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseItemDetailSubDetail._fts_dataType = 'ClaimResponseItemDetailSubDetail';
/**
 * The second tier service adjudications for submitted services.
 */
export class ClaimResponseItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequenceLinkId']) {
            this.sequenceLinkId = new fhir.FhirPositiveInt({ value: source.sequenceLinkId });
        }
        else {
            this.sequenceLinkId = null;
        }
        if (source['_sequenceLinkId']) {
            if (this.sequenceLinkId) {
                this.sequenceLinkId.addExtendedProperties(source._sequenceLinkId);
            }
            else {
                this.sequenceLinkId = new fhir.FhirPositiveInt(source._sequenceLinkId);
            }
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimResponseItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.item.detail';
        }
        iss.push(...this.vRS('sequenceLinkId', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('subDetail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseItemDetail._fts_dataType = 'ClaimResponseItemDetail';
/**
 * The first tier service adjudications for submitted services.
 */
export class ClaimResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequenceLinkId']) {
            this.sequenceLinkId = new fhir.FhirPositiveInt({ value: source.sequenceLinkId });
        }
        else {
            this.sequenceLinkId = null;
        }
        if (source['_sequenceLinkId']) {
            if (this.sequenceLinkId) {
                this.sequenceLinkId.addExtendedProperties(source._sequenceLinkId);
            }
            else {
                this.sequenceLinkId = new fhir.FhirPositiveInt(source._sequenceLinkId);
            }
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimResponseItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.item';
        }
        iss.push(...this.vRS('sequenceLinkId', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseItem._fts_dataType = 'ClaimResponseItem';
/**
 * The second tier service adjudications for payor added services.
 */
export class ClaimResponseAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['service']) {
            this.service = new fhir.CodeableConcept(source.service);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['fee']) {
            this.fee = new fhir.Money(source.fee);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.addItem.detail';
        }
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('service', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOS('fee', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseAddItemDetail._fts_dataType = 'ClaimResponseAddItemDetail';
/**
 * The first tier service adjudications for payor added services.
 */
export class ClaimResponseAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequenceLinkId']) {
            this.sequenceLinkId = source.sequenceLinkId.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.sequenceLinkId = [];
        }
        if (source['_sequenceLinkId']) {
            source._sequenceLinkId.forEach((x, i) => {
                if (this.sequenceLinkId.length >= i) {
                    if (x) {
                        this.sequenceLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.sequenceLinkId.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['service']) {
            this.service = new fhir.CodeableConcept(source.service);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['fee']) {
            this.fee = new fhir.Money(source.fee);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['_noteNumber']) {
            source._noteNumber.forEach((x, i) => {
                if (this.noteNumber.length >= i) {
                    if (x) {
                        this.noteNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.noteNumber.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ClaimResponseItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimResponseAddItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.addItem';
        }
        iss.push(...this.vOA('sequenceLinkId', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('service', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOS('fee', exp));
        iss.push(...this.vOA('noteNumber', exp));
        iss.push(...this.vOA('adjudication', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseAddItem._fts_dataType = 'ClaimResponseAddItem';
/**
 * Mutually exclusive with Services Provided (Item).
 */
export class ClaimResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequenceLinkId']) {
            this.sequenceLinkId = new fhir.FhirPositiveInt({ value: source.sequenceLinkId });
        }
        if (source['_sequenceLinkId']) {
            if (this.sequenceLinkId) {
                this.sequenceLinkId.addExtendedProperties(source._sequenceLinkId);
            }
            else {
                this.sequenceLinkId = new fhir.FhirPositiveInt(source._sequenceLinkId);
            }
        }
        if (source['detailSequenceLinkId']) {
            this.detailSequenceLinkId = new fhir.FhirPositiveInt({ value: source.detailSequenceLinkId });
        }
        if (source['_detailSequenceLinkId']) {
            if (this.detailSequenceLinkId) {
                this.detailSequenceLinkId.addExtendedProperties(source._detailSequenceLinkId);
            }
            else {
                this.detailSequenceLinkId = new fhir.FhirPositiveInt(source._detailSequenceLinkId);
            }
        }
        if (source['subdetailSequenceLinkId']) {
            this.subdetailSequenceLinkId = new fhir.FhirPositiveInt({ value: source.subdetailSequenceLinkId });
        }
        if (source['_subdetailSequenceLinkId']) {
            if (this.subdetailSequenceLinkId) {
                this.subdetailSequenceLinkId.addExtendedProperties(source._subdetailSequenceLinkId);
            }
            else {
                this.subdetailSequenceLinkId = new fhir.FhirPositiveInt(source._subdetailSequenceLinkId);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.error';
        }
        iss.push(...this.vOS('sequenceLinkId', exp));
        iss.push(...this.vOS('detailSequenceLinkId', exp));
        iss.push(...this.vOS('subdetailSequenceLinkId', exp));
        iss.push(...this.vRS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseError._fts_dataType = 'ClaimResponseError';
/**
 * Payment details for the claim if the claim has been paid.
 */
export class ClaimResponsePayment extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponsePayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['adjustment']) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.payment';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('adjustment', exp));
        iss.push(...this.vOS('adjustmentReason', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOS('identifier', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponsePayment._fts_dataType = 'ClaimResponsePayment';
/**
 * Note text.
 */
export class ClaimResponseProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number']) {
            this.number = new fhir.FhirPositiveInt({ value: source.number });
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirPositiveInt(source._number);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.processNote';
        }
        iss.push(...this.vOS('number', exp));
        iss.push(...this.vOSV('type', exp, 'NoteType', NoteTypeVsValidation, 'r'));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOS('language', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseProcessNote._fts_dataType = 'ClaimResponseProcessNote';
/**
 * Financial instrument by which payment information for health care.
 */
export class ClaimResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement });
        }
        if (source['_businessArrangement']) {
            if (this.businessArrangement) {
                this.businessArrangement.addExtendedProperties(source._businessArrangement);
            }
            else {
                this.businessArrangement = new fhir.FhirString(source._businessArrangement);
            }
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse.insurance';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('focal', exp));
        iss.push(...this.vRS('coverage', exp));
        iss.push(...this.vOS('businessArrangement', exp));
        iss.push(...this.vOA('preAuthRef', exp));
        iss.push(...this.vOS('claimResponse', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponseInsurance._fts_dataType = 'ClaimResponseInsurance';
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export class ClaimResponse extends fhir.DomainResource {
    /**
     * Default constructor for ClaimResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ClaimResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (source['requestProvider']) {
            this.requestProvider = new fhir.Reference(source.requestProvider);
        }
        if (source['requestOrganization']) {
            this.requestOrganization = new fhir.Reference(source.requestOrganization);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition);
            }
        }
        if (source['payeeType']) {
            this.payeeType = new fhir.CodeableConcept(source.payeeType);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ClaimResponseItem(x));
        }
        else {
            this.item = [];
        }
        if (source['addItem']) {
            this.addItem = source.addItem.map((x) => new fhir.ClaimResponseAddItem(x));
        }
        else {
            this.addItem = [];
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.ClaimResponseError(x));
        }
        else {
            this.error = [];
        }
        if (source['totalCost']) {
            this.totalCost = new fhir.Money(source.totalCost);
        }
        if (source['unallocDeductable']) {
            this.unallocDeductable = new fhir.Money(source.unallocDeductable);
        }
        if (source['totalBenefit']) {
            this.totalBenefit = new fhir.Money(source.totalBenefit);
        }
        if (source['payment']) {
            this.payment = new fhir.ClaimResponsePayment(source.payment);
        }
        if (source['reserved']) {
            this.reserved = new fhir.Coding(source.reserved);
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.ClaimResponseProcessNote(x));
        }
        else {
            this.processNote = [];
        }
        if (source['communicationRequest']) {
            this.communicationRequest = source.communicationRequest.map((x) => new fhir.Reference(x));
        }
        else {
            this.communicationRequest = [];
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ClaimResponseInsurance(x));
        }
        else {
            this.insurance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClaimResponse';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('insurer', exp));
        iss.push(...this.vOS('requestProvider', exp));
        iss.push(...this.vOS('requestOrganization', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOS('outcome', exp));
        iss.push(...this.vOS('disposition', exp));
        iss.push(...this.vOS('payeeType', exp));
        iss.push(...this.vOA('item', exp));
        iss.push(...this.vOA('addItem', exp));
        iss.push(...this.vOA('error', exp));
        iss.push(...this.vOS('totalCost', exp));
        iss.push(...this.vOS('unallocDeductable', exp));
        iss.push(...this.vOS('totalBenefit', exp));
        iss.push(...this.vOS('payment', exp));
        iss.push(...this.vOS('reserved', exp));
        iss.push(...this.vOS('form', exp));
        iss.push(...this.vOA('processNote', exp));
        iss.push(...this.vOA('communicationRequest', exp));
        iss.push(...this.vOA('insurance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimResponse._fts_dataType = 'ClaimResponse';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhaW1SZXNwb25zZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvQ2xhaW1SZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrQkFBK0I7QUFFL0IsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUF3Q25DLGFBQWE7QUFDYixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQU9oRixhQUFhO0FBQ2IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUEyQ2hGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDZCQUE4QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBcUJyRTs7T0FFRztJQUNILFlBQVksU0FBb0QsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDMUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUFFO2FBQ2pGO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FBRTtRQUM5QixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUFFO1FBQ2hGLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQUU7UUFDdEUsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJ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LEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7QUFwTEQ7O0dBRUc7QUFDNkIsMkJBQWEsR0FBVSxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IENsYWltUmVzcG9uc2VcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEFkanVkaWNhdGlvbkNvZGVzLCAgQWRqdWRpY2F0aW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0FkanVkaWNhdGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBZGp1ZGljYXRpb25Wc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0FkanVkaWNhdGlvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQWRqdWRpY2F0aW9uUmVhc29uQ29kZXMsICBBZGp1ZGljYXRpb25SZWFzb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQWRqdWRpY2F0aW9uUmVhc29uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEFkanVkaWNhdGlvblJlYXNvblZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQWRqdWRpY2F0aW9uUmVhc29uVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFeFJldmVudWVDZW50ZXJDb2RlcywgIEV4UmV2ZW51ZUNlbnRlckNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FeFJldmVudWVDZW50ZXJDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXhSZXZlbnVlQ2VudGVyVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FeFJldmVudWVDZW50ZXJWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEJlbmVmaXRTdWJjYXRlZ29yeUNvZGVzLCAgQmVuZWZpdFN1YmNhdGVnb3J5Q29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0JlbmVmaXRTdWJjYXRlZ29yeUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBCZW5lZml0U3ViY2F0ZWdvcnlWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0JlbmVmaXRTdWJjYXRlZ29yeVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU2VydmljZVVzY2xzQ29kZXMsICBTZXJ2aWNlVXNjbHNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VydmljZVVzY2xzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNlcnZpY2VVc2Nsc1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VydmljZVVzY2xzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDbGFpbU1vZGlmaWVyc0NvZGVzLCAgQ2xhaW1Nb2RpZmllcnNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ2xhaW1Nb2RpZmllcnNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ2xhaW1Nb2RpZmllcnNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NsYWltTW9kaWZpZXJzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBZGp1ZGljYXRpb25FcnJvckNvZGVzLCAgQWRqdWRpY2F0aW9uRXJyb3JDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQWRqdWRpY2F0aW9uRXJyb3JDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQWRqdWRpY2F0aW9uRXJyb3JWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0FkanVkaWNhdGlvbkVycm9yVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFeFBheW1lbnR0eXBlQ29kZXMsICBFeFBheW1lbnR0eXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V4UGF5bWVudHR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXhQYXltZW50dHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRXhQYXltZW50dHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUGF5bWVudEFkanVzdG1lbnRSZWFzb25Db2RlcywgIFBheW1lbnRBZGp1c3RtZW50UmVhc29uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1BheW1lbnRBZGp1c3RtZW50UmVhc29uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFBheW1lbnRBZGp1c3RtZW50UmVhc29uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QYXltZW50QWRqdXN0bWVudFJlYXNvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTm90ZVR5cGVDb2RlcywgIE5vdGVUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL05vdGVUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE5vdGVUeXBlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Ob3RlVHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTGFuZ3VhZ2VzQ29kZXMsICBMYW5ndWFnZXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTGFuZ3VhZ2VzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IExhbmd1YWdlc1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTGFuZ3VhZ2VzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBGbVN0YXR1c0NvZGVzLCAgRm1TdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRm1TdGF0dXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRm1TdGF0dXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0ZtU3RhdHVzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZW1pdHRhbmNlT3V0Y29tZUNvZGVzLCAgUmVtaXR0YW5jZU91dGNvbWVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVtaXR0YW5jZU91dGNvbWVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVtaXR0YW5jZU91dGNvbWVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1JlbWl0dGFuY2VPdXRjb21lVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQYXllZXR5cGVDb2RlcywgIFBheWVldHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QYXllZXR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUGF5ZWV0eXBlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QYXllZXR5cGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEZ1bmRzcmVzZXJ2ZUNvZGVzLCAgRnVuZHNyZXNlcnZlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Z1bmRzcmVzZXJ2ZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBGdW5kc3Jlc2VydmVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Z1bmRzcmVzZXJ2ZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRm9ybXNDb2RlcywgIEZvcm1zQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Zvcm1zQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEZvcm1zVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Gb3Jtc1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIENvZGUgaW5kaWNhdGluZzogQ28tUGF5LCBkZWR1Y3RpYmxlLCBlbGlnaWJsZSwgYmVuZWZpdCwgdGF4LCBldGMuXHJcbiAgICovXHJcbiAgY2F0ZWdvcnk6IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFkanVkaWNhdGlvbiByZWFzb24gc3VjaCBhcyBsaW1pdCByZWFjaGVkLlxyXG4gICAqL1xyXG4gIHJlYXNvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9uZXRhcnkgYW1vdW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgY29kZS5cclxuICAgKi9cclxuICBhbW91bnQ/OiBmaGlyLk1vbmV5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBub24tbW9uZXRhcnkgdmFsdWUgZm9yIGV4YW1wbGUgYSBwZXJjZW50YWdlLiBNdXR1YWxseSBleGNsdXNpdmUgdG8gdGhlIGFtb3VudCBlbGVtZW50IGFib3ZlLlxyXG4gICAqL1xyXG4gIHZhbHVlPzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDbGFpbVJlc3BvbnNlLml0ZW0uYWRqdWRpY2F0aW9uLnZhbHVlXHJcbiAgICovXHJcbiAgX3ZhbHVlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBhZGp1ZGljYXRpb24gcmVzdWx0cy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NsYWltUmVzcG9uc2VJdGVtQWRqdWRpY2F0aW9uJztcclxuICAvKipcclxuICAgKiBDb2RlIGluZGljYXRpbmc6IENvLVBheSwgZGVkdWN0aWJsZSwgZWxpZ2libGUsIGJlbmVmaXQsIHRheCwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYXRlZ29yeTogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBBZGp1ZGljYXRpb24gcmVhc29uIHN1Y2ggYXMgbGltaXQgcmVhY2hlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vbmV0YXJ5IGFtb3VudCBhc3NvY2lhdGVkIHdpdGggdGhlIGNvZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGFtb3VudD86IGZoaXIuTW9uZXl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbm9uLW1vbmV0YXJ5IHZhbHVlIGZvciBleGFtcGxlIGEgcGVyY2VudGFnZS4gTXV0dWFsbHkgZXhjbHVzaXZlIHRvIHRoZSBhbW91bnQgZWxlbWVudCBhYm92ZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU/OiBmaGlyLkZoaXJEZWNpbWFsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENsYWltUmVzcG9uc2VJdGVtQWRqdWRpY2F0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NhdGVnb3J5J10pIHsgdGhpcy5jYXRlZ29yeSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY2F0ZWdvcnkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jYXRlZ29yeSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvbiddKSB7IHRoaXMucmVhc29uID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5yZWFzb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydhbW91bnQnXSkgeyB0aGlzLmFtb3VudCA9IG5ldyBmaGlyLk1vbmV5KHNvdXJjZS5hbW91bnQpOyB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyRGVjaW1hbCh7dmFsdWU6IHNvdXJjZS52YWx1ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmFsdWUnXSkge1xyXG4gICAgICBpZiAodGhpcy52YWx1ZSkgeyB0aGlzLnZhbHVlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ZhbHVlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyRGVjaW1hbChzb3VyY2UuX3ZhbHVlIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGVjaW1hbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UuaXRlbS5hZGp1ZGljYXRpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdjYXRlZ29yeScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygncmVhc29uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhbW91bnQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3ZhbHVlJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDbGFpbVJlc3BvbnNlSXRlbURldGFpbFN1YkRldGFpbCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlSXRlbURldGFpbFN1YkRldGFpbEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgc2VydmljZSBsaW5lIG51bWJlci5cclxuICAgKi9cclxuICBzZXF1ZW5jZUxpbmtJZDogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5pdGVtLmRldGFpbC5zdWJEZXRhaWwuc2VxdWVuY2VMaW5rSWRcclxuICAgKi9cclxuICBfc2VxdWVuY2VMaW5rSWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgbGlzdCBvZiBub3RlIHJlZmVyZW5jZXMgdG8gdGhlIG5vdGVzIHByb3ZpZGVkIGJlbG93LlxyXG4gICAqL1xyXG4gIG5vdGVOdW1iZXI/OiBmaGlyLkZoaXJQb3NpdGl2ZUludFtdfChudW1iZXJ8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENsYWltUmVzcG9uc2UuaXRlbS5kZXRhaWwuc3ViRGV0YWlsLm5vdGVOdW1iZXJcclxuICAgKi9cclxuICBfbm90ZU51bWJlcj86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkanVkaWNhdGlvbnMgcmVzdWx0cy5cclxuICAgKi9cclxuICBhZGp1ZGljYXRpb24/OiBmaGlyLkNsYWltUmVzcG9uc2VJdGVtQWRqdWRpY2F0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0aGlyZCB0aWVyIHNlcnZpY2UgYWRqdWRpY2F0aW9ucyBmb3Igc3VibWl0dGVkIHNlcnZpY2VzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsYWltUmVzcG9uc2VJdGVtRGV0YWlsU3ViRGV0YWlsIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2xhaW1SZXNwb25zZUl0ZW1EZXRhaWxTdWJEZXRhaWwnO1xyXG4gIC8qKlxyXG4gICAqIEEgc2VydmljZSBsaW5lIG51bWJlci5cclxuICAgKi9cclxuICBwdWJsaWMgc2VxdWVuY2VMaW5rSWQ6IGZoaXIuRmhpclBvc2l0aXZlSW50fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIG5vdGUgcmVmZXJlbmNlcyB0byB0aGUgbm90ZXMgcHJvdmlkZWQgYmVsb3cuXHJcbiAgICovXHJcbiAgcHVibGljIG5vdGVOdW1iZXI6IGZoaXIuRmhpclBvc2l0aXZlSW50W107XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkanVkaWNhdGlvbnMgcmVzdWx0cy5cclxuICAgKi9cclxuICBwdWJsaWMgYWRqdWRpY2F0aW9uOiBmaGlyLkNsYWltUmVzcG9uc2VJdGVtQWRqdWRpY2F0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2xhaW1SZXNwb25zZUl0ZW1EZXRhaWxTdWJEZXRhaWwgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDbGFpbVJlc3BvbnNlSXRlbURldGFpbFN1YkRldGFpbEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzZXF1ZW5jZUxpbmtJZCddKSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2Uuc2VxdWVuY2VMaW5rSWR9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfc2VxdWVuY2VMaW5rSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5zZXF1ZW5jZUxpbmtJZCkgeyB0aGlzLnNlcXVlbmNlTGlua0lkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NlcXVlbmNlTGlua0lkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoc291cmNlLl9zZXF1ZW5jZUxpbmtJZCBhcyBQYXJ0aWFsPGZoaXIuRmhpclBvc2l0aXZlSW50QXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydub3RlTnVtYmVyJ10pIHsgdGhpcy5ub3RlTnVtYmVyID0gc291cmNlLm5vdGVOdW1iZXIubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5ub3RlTnVtYmVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19ub3RlTnVtYmVyJ10pIHtcclxuICAgICAgc291cmNlLl9ub3RlTnVtYmVyLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm5vdGVOdW1iZXIubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5ub3RlTnVtYmVyW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMubm90ZU51bWJlci5wdXNoKG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhZGp1ZGljYXRpb24nXSkgeyB0aGlzLmFkanVkaWNhdGlvbiA9IHNvdXJjZS5hZGp1ZGljYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFkanVkaWNhdGlvbiA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnQ2xhaW1SZXNwb25zZS5pdGVtLmRldGFpbC5zdWJEZXRhaWwnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdzZXF1ZW5jZUxpbmtJZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbm90ZU51bWJlcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnYWRqdWRpY2F0aW9uJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDbGFpbVJlc3BvbnNlSXRlbURldGFpbCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlSXRlbURldGFpbEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgc2VydmljZSBsaW5lIG51bWJlci5cclxuICAgKi9cclxuICBzZXF1ZW5jZUxpbmtJZDogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5pdGVtLmRldGFpbC5zZXF1ZW5jZUxpbmtJZFxyXG4gICAqL1xyXG4gIF9zZXF1ZW5jZUxpbmtJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIG5vdGUgcmVmZXJlbmNlcyB0byB0aGUgbm90ZXMgcHJvdmlkZWQgYmVsb3cuXHJcbiAgICovXHJcbiAgbm90ZU51bWJlcj86IGZoaXIuRmhpclBvc2l0aXZlSW50W118KG51bWJlcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5pdGVtLmRldGFpbC5ub3RlTnVtYmVyXHJcbiAgICovXHJcbiAgX25vdGVOdW1iZXI/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZGp1ZGljYXRpb25zIHJlc3VsdHMuXHJcbiAgICovXHJcbiAgYWRqdWRpY2F0aW9uPzogZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRoaXJkIHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBzdWJtaXR0ZWQgc2VydmljZXMuXHJcbiAgICovXHJcbiAgc3ViRGV0YWlsPzogZmhpci5DbGFpbVJlc3BvbnNlSXRlbURldGFpbFN1YkRldGFpbEFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgc2Vjb25kIHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBzdWJtaXR0ZWQgc2VydmljZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2xhaW1SZXNwb25zZUl0ZW1EZXRhaWwgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDbGFpbVJlc3BvbnNlSXRlbURldGFpbCc7XHJcbiAgLyoqXHJcbiAgICogQSBzZXJ2aWNlIGxpbmUgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXF1ZW5jZUxpbmtJZDogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVsbDtcclxuICAvKipcclxuICAgKiBBIGxpc3Qgb2Ygbm90ZSByZWZlcmVuY2VzIHRvIHRoZSBub3RlcyBwcm92aWRlZCBiZWxvdy5cclxuICAgKi9cclxuICBwdWJsaWMgbm90ZU51bWJlcjogZmhpci5GaGlyUG9zaXRpdmVJbnRbXTtcclxuICAvKipcclxuICAgKiBUaGUgYWRqdWRpY2F0aW9ucyByZXN1bHRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGp1ZGljYXRpb246IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb25bXTtcclxuICAvKipcclxuICAgKiBUaGUgdGhpcmQgdGllciBzZXJ2aWNlIGFkanVkaWNhdGlvbnMgZm9yIHN1Ym1pdHRlZCBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgc3ViRGV0YWlsOiBmaGlyLkNsYWltUmVzcG9uc2VJdGVtRGV0YWlsU3ViRGV0YWlsW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2xhaW1SZXNwb25zZUl0ZW1EZXRhaWwgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDbGFpbVJlc3BvbnNlSXRlbURldGFpbEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzZXF1ZW5jZUxpbmtJZCddKSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2Uuc2VxdWVuY2VMaW5rSWR9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfc2VxdWVuY2VMaW5rSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5zZXF1ZW5jZUxpbmtJZCkgeyB0aGlzLnNlcXVlbmNlTGlua0lkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NlcXVlbmNlTGlua0lkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoc291cmNlLl9zZXF1ZW5jZUxpbmtJZCBhcyBQYXJ0aWFsPGZoaXIuRmhpclBvc2l0aXZlSW50QXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydub3RlTnVtYmVyJ10pIHsgdGhpcy5ub3RlTnVtYmVyID0gc291cmNlLm5vdGVOdW1iZXIubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5ub3RlTnVtYmVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19ub3RlTnVtYmVyJ10pIHtcclxuICAgICAgc291cmNlLl9ub3RlTnVtYmVyLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm5vdGVOdW1iZXIubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5ub3RlTnVtYmVyW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMubm90ZU51bWJlci5wdXNoKG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhZGp1ZGljYXRpb24nXSkgeyB0aGlzLmFkanVkaWNhdGlvbiA9IHNvdXJjZS5hZGp1ZGljYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFkanVkaWNhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzdWJEZXRhaWwnXSkgeyB0aGlzLnN1YkRldGFpbCA9IHNvdXJjZS5zdWJEZXRhaWwubWFwKCh4KSA9PiBuZXcgZmhpci5DbGFpbVJlc3BvbnNlSXRlbURldGFpbFN1YkRldGFpbCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN1YkRldGFpbCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnQ2xhaW1SZXNwb25zZS5pdGVtLmRldGFpbCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3NlcXVlbmNlTGlua0lkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdub3RlTnVtYmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdhZGp1ZGljYXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3N1YkRldGFpbCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2xhaW1SZXNwb25zZUl0ZW0gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2xhaW1SZXNwb25zZUl0ZW1BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBBIHNlcnZpY2UgbGluZSBudW1iZXIuXHJcbiAgICovXHJcbiAgc2VxdWVuY2VMaW5rSWQ6IGZoaXIuRmhpclBvc2l0aXZlSW50fG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENsYWltUmVzcG9uc2UuaXRlbS5zZXF1ZW5jZUxpbmtJZFxyXG4gICAqL1xyXG4gIF9zZXF1ZW5jZUxpbmtJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIG5vdGUgcmVmZXJlbmNlcyB0byB0aGUgbm90ZXMgcHJvdmlkZWQgYmVsb3cuXHJcbiAgICovXHJcbiAgbm90ZU51bWJlcj86IGZoaXIuRmhpclBvc2l0aXZlSW50W118KG51bWJlcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5pdGVtLm5vdGVOdW1iZXJcclxuICAgKi9cclxuICBfbm90ZU51bWJlcj86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkanVkaWNhdGlvbiByZXN1bHRzLlxyXG4gICAqL1xyXG4gIGFkanVkaWNhdGlvbj86IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb25BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZWNvbmQgdGllciBzZXJ2aWNlIGFkanVkaWNhdGlvbnMgZm9yIHN1Ym1pdHRlZCBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBkZXRhaWw/OiBmaGlyLkNsYWltUmVzcG9uc2VJdGVtRGV0YWlsQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBmaXJzdCB0aWVyIHNlcnZpY2UgYWRqdWRpY2F0aW9ucyBmb3Igc3VibWl0dGVkIHNlcnZpY2VzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsYWltUmVzcG9uc2VJdGVtIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2xhaW1SZXNwb25zZUl0ZW0nO1xyXG4gIC8qKlxyXG4gICAqIEEgc2VydmljZSBsaW5lIG51bWJlci5cclxuICAgKi9cclxuICBwdWJsaWMgc2VxdWVuY2VMaW5rSWQ6IGZoaXIuRmhpclBvc2l0aXZlSW50fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIG5vdGUgcmVmZXJlbmNlcyB0byB0aGUgbm90ZXMgcHJvdmlkZWQgYmVsb3cuXHJcbiAgICovXHJcbiAgcHVibGljIG5vdGVOdW1iZXI6IGZoaXIuRmhpclBvc2l0aXZlSW50W107XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkanVkaWNhdGlvbiByZXN1bHRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGp1ZGljYXRpb246IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb25bXTtcclxuICAvKipcclxuICAgKiBUaGUgc2Vjb25kIHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBzdWJtaXR0ZWQgc2VydmljZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRldGFpbDogZmhpci5DbGFpbVJlc3BvbnNlSXRlbURldGFpbFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENsYWltUmVzcG9uc2VJdGVtIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2xhaW1SZXNwb25zZUl0ZW1BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnc2VxdWVuY2VMaW5rSWQnXSkgeyB0aGlzLnNlcXVlbmNlTGlua0lkID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHt2YWx1ZTogc291cmNlLnNlcXVlbmNlTGlua0lkfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNlcXVlbmNlTGlua0lkID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3NlcXVlbmNlTGlua0lkJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc2VxdWVuY2VMaW5rSWQpIHsgdGhpcy5zZXF1ZW5jZUxpbmtJZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zZXF1ZW5jZUxpbmtJZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnNlcXVlbmNlTGlua0lkID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHNvdXJjZS5fc2VxdWVuY2VMaW5rSWQgYXMgUGFydGlhbDxmaGlyLkZoaXJQb3NpdGl2ZUludEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbm90ZU51bWJlciddKSB7IHRoaXMubm90ZU51bWJlciA9IHNvdXJjZS5ub3RlTnVtYmVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubm90ZU51bWJlciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfbm90ZU51bWJlciddKSB7XHJcbiAgICAgIHNvdXJjZS5fbm90ZU51bWJlci5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5ub3RlTnVtYmVyLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMubm90ZU51bWJlcltpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLm5vdGVOdW1iZXIucHVzaChuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclBvc2l0aXZlSW50QXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRqdWRpY2F0aW9uJ10pIHsgdGhpcy5hZGp1ZGljYXRpb24gPSBzb3VyY2UuYWRqdWRpY2F0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hZGp1ZGljYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGV0YWlsJ10pIHsgdGhpcy5kZXRhaWwgPSBzb3VyY2UuZGV0YWlsLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1EZXRhaWwoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kZXRhaWwgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UuaXRlbScgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3NlcXVlbmNlTGlua0lkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdub3RlTnVtYmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdhZGp1ZGljYXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2RldGFpbCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2xhaW1SZXNwb25zZUFkZEl0ZW1EZXRhaWwgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2xhaW1SZXNwb25zZUFkZEl0ZW1EZXRhaWxBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiByZXZlbmV1IG9yIGNvc3QgY2VudGVyIHByb3ZpZGluZyB0aGUgcHJvZHVjdCBhbmQvb3Igc2VydmljZS5cclxuICAgKi9cclxuICByZXZlbnVlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBIZWFsdGggQ2FyZSBTZXJ2aWNlIFR5cGUgQ29kZXMgIHRvIGlkZW50aWZ5IHRoZSBjbGFzc2lmaWNhdGlvbiBvZiBzZXJ2aWNlIG9yIGJlbmVmaXRzLlxyXG4gICAqL1xyXG4gIGNhdGVnb3J5PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGNvZGUgdG8gaW5kaWNhdGUgdGhlIFByb2Zlc3Npb25hbCBTZXJ2aWNlIG9yIFByb2R1Y3Qgc3VwcGxpZWQuXHJcbiAgICovXHJcbiAgc2VydmljZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSXRlbSB0eXBpZmljYXRpb24gb3IgbW9kaWZpZXJzIGNvZGVzLCBlZyBmb3IgT3JhbCB3aGV0aGVyIHRoZSB0cmVhdG1lbnQgaXMgY29zbWV0aWMgb3IgYXNzb2NpYXRlZCB3aXRoIFRNSiwgb3IgZm9yIG1lZGljYWwgd2hldGhlciB0aGUgdHJlYXRtZW50IHdhcyBvdXRzaWRlIHRoZSBjbGluaWMgb3Igb3V0IG9mIG9mZmljZSBob3Vycy5cclxuICAgKi9cclxuICBtb2RpZmllcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZmVlIGNoYXJnZWQgZm9yIHRoZSBwcm9mZXNzaW9uYWwgc2VydmljZSBvciBwcm9kdWN0Li5cclxuICAgKi9cclxuICBmZWU/OiBmaGlyLk1vbmV5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIG5vdGUgcmVmZXJlbmNlcyB0byB0aGUgbm90ZXMgcHJvdmlkZWQgYmVsb3cuXHJcbiAgICovXHJcbiAgbm90ZU51bWJlcj86IGZoaXIuRmhpclBvc2l0aXZlSW50W118KG51bWJlcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5hZGRJdGVtLmRldGFpbC5ub3RlTnVtYmVyXHJcbiAgICovXHJcbiAgX25vdGVOdW1iZXI/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZGp1ZGljYXRpb25zIHJlc3VsdHMuXHJcbiAgICovXHJcbiAgYWRqdWRpY2F0aW9uPzogZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgc2Vjb25kIHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBwYXlvciBhZGRlZCBzZXJ2aWNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFpbVJlc3BvbnNlQWRkSXRlbURldGFpbCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NsYWltUmVzcG9uc2VBZGRJdGVtRGV0YWlsJztcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiByZXZlbmV1IG9yIGNvc3QgY2VudGVyIHByb3ZpZGluZyB0aGUgcHJvZHVjdCBhbmQvb3Igc2VydmljZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmV2ZW51ZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBIZWFsdGggQ2FyZSBTZXJ2aWNlIFR5cGUgQ29kZXMgIHRvIGlkZW50aWZ5IHRoZSBjbGFzc2lmaWNhdGlvbiBvZiBzZXJ2aWNlIG9yIGJlbmVmaXRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYXRlZ29yeT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGNvZGUgdG8gaW5kaWNhdGUgdGhlIFByb2Zlc3Npb25hbCBTZXJ2aWNlIG9yIFByb2R1Y3Qgc3VwcGxpZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNlcnZpY2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSXRlbSB0eXBpZmljYXRpb24gb3IgbW9kaWZpZXJzIGNvZGVzLCBlZyBmb3IgT3JhbCB3aGV0aGVyIHRoZSB0cmVhdG1lbnQgaXMgY29zbWV0aWMgb3IgYXNzb2NpYXRlZCB3aXRoIFRNSiwgb3IgZm9yIG1lZGljYWwgd2hldGhlciB0aGUgdHJlYXRtZW50IHdhcyBvdXRzaWRlIHRoZSBjbGluaWMgb3Igb3V0IG9mIG9mZmljZSBob3Vycy5cclxuICAgKi9cclxuICBwdWJsaWMgbW9kaWZpZXI6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlIGZlZSBjaGFyZ2VkIGZvciB0aGUgcHJvZmVzc2lvbmFsIHNlcnZpY2Ugb3IgcHJvZHVjdC4uXHJcbiAgICovXHJcbiAgcHVibGljIGZlZT86IGZoaXIuTW9uZXl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbGlzdCBvZiBub3RlIHJlZmVyZW5jZXMgdG8gdGhlIG5vdGVzIHByb3ZpZGVkIGJlbG93LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBub3RlTnVtYmVyOiBmaGlyLkZoaXJQb3NpdGl2ZUludFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZGp1ZGljYXRpb25zIHJlc3VsdHMuXHJcbiAgICovXHJcbiAgcHVibGljIGFkanVkaWNhdGlvbjogZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENsYWltUmVzcG9uc2VBZGRJdGVtRGV0YWlsIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2xhaW1SZXNwb25zZUFkZEl0ZW1EZXRhaWxBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncmV2ZW51ZSddKSB7IHRoaXMucmV2ZW51ZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucmV2ZW51ZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NhdGVnb3J5J10pIHsgdGhpcy5jYXRlZ29yeSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY2F0ZWdvcnkpOyB9XHJcbiAgICBpZiAoc291cmNlWydzZXJ2aWNlJ10pIHsgdGhpcy5zZXJ2aWNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zZXJ2aWNlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbW9kaWZpZXInXSkgeyB0aGlzLm1vZGlmaWVyID0gc291cmNlLm1vZGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubW9kaWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZmVlJ10pIHsgdGhpcy5mZWUgPSBuZXcgZmhpci5Nb25leShzb3VyY2UuZmVlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbm90ZU51bWJlciddKSB7IHRoaXMubm90ZU51bWJlciA9IHNvdXJjZS5ub3RlTnVtYmVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubm90ZU51bWJlciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfbm90ZU51bWJlciddKSB7XHJcbiAgICAgIHNvdXJjZS5fbm90ZU51bWJlci5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5ub3RlTnVtYmVyLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMubm90ZU51bWJlcltpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLm5vdGVOdW1iZXIucHVzaChuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclBvc2l0aXZlSW50QXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRqdWRpY2F0aW9uJ10pIHsgdGhpcy5hZGp1ZGljYXRpb24gPSBzb3VyY2UuYWRqdWRpY2F0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hZGp1ZGljYXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UuYWRkSXRlbS5kZXRhaWwnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZXZlbnVlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdjYXRlZ29yeScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc2VydmljZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbW9kaWZpZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2ZlZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbm90ZU51bWJlcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnYWRqdWRpY2F0aW9uJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDbGFpbVJlc3BvbnNlQWRkSXRlbSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlQWRkSXRlbUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIExpc3Qgb2YgaW5wdXQgc2VydmljZSBpdGVtcyB3aGljaCB0aGlzIHNlcnZpY2UgbGluZSBpcyBpbnRlbmRlZCB0byByZXBsYWNlLlxyXG4gICAqL1xyXG4gIHNlcXVlbmNlTGlua0lkPzogZmhpci5GaGlyUG9zaXRpdmVJbnRbXXwobnVtYmVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDbGFpbVJlc3BvbnNlLmFkZEl0ZW0uc2VxdWVuY2VMaW5rSWRcclxuICAgKi9cclxuICBfc2VxdWVuY2VMaW5rSWQ/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHJldmVuZXUgb3IgY29zdCBjZW50ZXIgcHJvdmlkaW5nIHRoZSBwcm9kdWN0IGFuZC9vciBzZXJ2aWNlLlxyXG4gICAqL1xyXG4gIHJldmVudWU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEhlYWx0aCBDYXJlIFNlcnZpY2UgVHlwZSBDb2RlcyAgdG8gaWRlbnRpZnkgdGhlIGNsYXNzaWZpY2F0aW9uIG9mIHNlcnZpY2Ugb3IgYmVuZWZpdHMuXHJcbiAgICovXHJcbiAgY2F0ZWdvcnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZSB0byBpbmRpY2F0ZSB0aGUgUHJvZmVzc2lvbmFsIFNlcnZpY2Ugb3IgUHJvZHVjdCBzdXBwbGllZC5cclxuICAgKi9cclxuICBzZXJ2aWNlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJdGVtIHR5cGlmaWNhdGlvbiBvciBtb2RpZmllcnMgY29kZXMsIGVnIGZvciBPcmFsIHdoZXRoZXIgdGhlIHRyZWF0bWVudCBpcyBjb3NtZXRpYyBvciBhc3NvY2lhdGVkIHdpdGggVE1KLCBvciBmb3IgbWVkaWNhbCB3aGV0aGVyIHRoZSB0cmVhdG1lbnQgd2FzIG91dHNpZGUgdGhlIGNsaW5pYyBvciBvdXQgb2Ygb2ZmaWNlIGhvdXJzLlxyXG4gICAqL1xyXG4gIG1vZGlmaWVyPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmZWUgY2hhcmdlZCBmb3IgdGhlIHByb2Zlc3Npb25hbCBzZXJ2aWNlIG9yIHByb2R1Y3QuLlxyXG4gICAqL1xyXG4gIGZlZT86IGZoaXIuTW9uZXlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGxpc3Qgb2Ygbm90ZSByZWZlcmVuY2VzIHRvIHRoZSBub3RlcyBwcm92aWRlZCBiZWxvdy5cclxuICAgKi9cclxuICBub3RlTnVtYmVyPzogZmhpci5GaGlyUG9zaXRpdmVJbnRbXXwobnVtYmVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDbGFpbVJlc3BvbnNlLmFkZEl0ZW0ubm90ZU51bWJlclxyXG4gICAqL1xyXG4gIF9ub3RlTnVtYmVyPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBUaGUgYWRqdWRpY2F0aW9ucyByZXN1bHRzLlxyXG4gICAqL1xyXG4gIGFkanVkaWNhdGlvbj86IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb25BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZWNvbmQgdGllciBzZXJ2aWNlIGFkanVkaWNhdGlvbnMgZm9yIHBheW9yIGFkZGVkIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIGRldGFpbD86IGZoaXIuQ2xhaW1SZXNwb25zZUFkZEl0ZW1EZXRhaWxBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGZpcnN0IHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBwYXlvciBhZGRlZCBzZXJ2aWNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFpbVJlc3BvbnNlQWRkSXRlbSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NsYWltUmVzcG9uc2VBZGRJdGVtJztcclxuICAvKipcclxuICAgKiBMaXN0IG9mIGlucHV0IHNlcnZpY2UgaXRlbXMgd2hpY2ggdGhpcyBzZXJ2aWNlIGxpbmUgaXMgaW50ZW5kZWQgdG8gcmVwbGFjZS5cclxuICAgKi9cclxuICBwdWJsaWMgc2VxdWVuY2VMaW5rSWQ6IGZoaXIuRmhpclBvc2l0aXZlSW50W107XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgcmV2ZW5ldSBvciBjb3N0IGNlbnRlciBwcm92aWRpbmcgdGhlIHByb2R1Y3QgYW5kL29yIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHJldmVudWU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSGVhbHRoIENhcmUgU2VydmljZSBUeXBlIENvZGVzICB0byBpZGVudGlmeSB0aGUgY2xhc3NpZmljYXRpb24gb2Ygc2VydmljZSBvciBiZW5lZml0cy5cclxuICAgKi9cclxuICBwdWJsaWMgY2F0ZWdvcnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb2RlIHRvIGluZGljYXRlIHRoZSBQcm9mZXNzaW9uYWwgU2VydmljZSBvciBQcm9kdWN0IHN1cHBsaWVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXJ2aWNlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEl0ZW0gdHlwaWZpY2F0aW9uIG9yIG1vZGlmaWVycyBjb2RlcywgZWcgZm9yIE9yYWwgd2hldGhlciB0aGUgdHJlYXRtZW50IGlzIGNvc21ldGljIG9yIGFzc29jaWF0ZWQgd2l0aCBUTUosIG9yIGZvciBtZWRpY2FsIHdoZXRoZXIgdGhlIHRyZWF0bWVudCB3YXMgb3V0c2lkZSB0aGUgY2xpbmljIG9yIG91dCBvZiBvZmZpY2UgaG91cnMuXHJcbiAgICovXHJcbiAgcHVibGljIG1vZGlmaWVyOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmZWUgY2hhcmdlZCBmb3IgdGhlIHByb2Zlc3Npb25hbCBzZXJ2aWNlIG9yIHByb2R1Y3QuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmZWU/OiBmaGlyLk1vbmV5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGxpc3Qgb2Ygbm90ZSByZWZlcmVuY2VzIHRvIHRoZSBub3RlcyBwcm92aWRlZCBiZWxvdy5cclxuICAgKi9cclxuICBwdWJsaWMgbm90ZU51bWJlcjogZmhpci5GaGlyUG9zaXRpdmVJbnRbXTtcclxuICAvKipcclxuICAgKiBUaGUgYWRqdWRpY2F0aW9ucyByZXN1bHRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGp1ZGljYXRpb246IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW1BZGp1ZGljYXRpb25bXTtcclxuICAvKipcclxuICAgKiBUaGUgc2Vjb25kIHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBwYXlvciBhZGRlZCBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZGV0YWlsOiBmaGlyLkNsYWltUmVzcG9uc2VBZGRJdGVtRGV0YWlsW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2xhaW1SZXNwb25zZUFkZEl0ZW0gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDbGFpbVJlc3BvbnNlQWRkSXRlbUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzZXF1ZW5jZUxpbmtJZCddKSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBzb3VyY2Uuc2VxdWVuY2VMaW5rSWQubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZXF1ZW5jZUxpbmtJZCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfc2VxdWVuY2VMaW5rSWQnXSkge1xyXG4gICAgICBzb3VyY2UuX3NlcXVlbmNlTGlua0lkLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNlcXVlbmNlTGlua0lkLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMuc2VxdWVuY2VMaW5rSWRbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5zZXF1ZW5jZUxpbmtJZC5wdXNoKG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZXZlbnVlJ10pIHsgdGhpcy5yZXZlbnVlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5yZXZlbnVlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2F0ZWdvcnknXSkgeyB0aGlzLmNhdGVnb3J5ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5jYXRlZ29yeSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3NlcnZpY2UnXSkgeyB0aGlzLnNlcnZpY2UgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnNlcnZpY2UpOyB9XHJcbiAgICBpZiAoc291cmNlWydtb2RpZmllciddKSB7IHRoaXMubW9kaWZpZXIgPSBzb3VyY2UubW9kaWZpZXIubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5tb2RpZmllciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydmZWUnXSkgeyB0aGlzLmZlZSA9IG5ldyBmaGlyLk1vbmV5KHNvdXJjZS5mZWUpOyB9XHJcbiAgICBpZiAoc291cmNlWydub3RlTnVtYmVyJ10pIHsgdGhpcy5ub3RlTnVtYmVyID0gc291cmNlLm5vdGVOdW1iZXIubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5ub3RlTnVtYmVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19ub3RlTnVtYmVyJ10pIHtcclxuICAgICAgc291cmNlLl9ub3RlTnVtYmVyLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm5vdGVOdW1iZXIubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5ub3RlTnVtYmVyW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMubm90ZU51bWJlci5wdXNoKG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhZGp1ZGljYXRpb24nXSkgeyB0aGlzLmFkanVkaWNhdGlvbiA9IHNvdXJjZS5hZGp1ZGljYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFkanVkaWNhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFkanVkaWNhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXRhaWwnXSkgeyB0aGlzLmRldGFpbCA9IHNvdXJjZS5kZXRhaWwubWFwKCh4KSA9PiBuZXcgZmhpci5DbGFpbVJlc3BvbnNlQWRkSXRlbURldGFpbCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRldGFpbCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnQ2xhaW1SZXNwb25zZS5hZGRJdGVtJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnc2VxdWVuY2VMaW5rSWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JldmVudWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NhdGVnb3J5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzZXJ2aWNlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdtb2RpZmllcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZmVlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdub3RlTnVtYmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdhZGp1ZGljYXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2RldGFpbCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2xhaW1SZXNwb25zZUVycm9yIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENsYWltUmVzcG9uc2VFcnJvckFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGxpbmUgaXRlbSBzdWJtaXR0ZWQgd2hpY2ggY29udGFpbnMgdGhlIGVycm9yLiBUaGlzIHZhbHVlIGlzIG9taXR0ZWQgd2hlbiB0aGUgZXJyb3IgaXMgZWxzZXdoZXJlLlxyXG4gICAqL1xyXG4gIHNlcXVlbmNlTGlua0lkPzogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5lcnJvci5zZXF1ZW5jZUxpbmtJZFxyXG4gICAqL1xyXG4gIF9zZXF1ZW5jZUxpbmtJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgYWRkaXRpb24gd2l0aGluIHRoZSBsaW5lIGl0ZW0gc3VibWl0dGVkIHdoaWNoIGNvbnRhaW5zIHRoZSBlcnJvci4gVGhpcyB2YWx1ZSBpcyBvbWl0dGVkIHdoZW4gdGhlIGVycm9yIGlzIG5vdCByZWxhdGVkIHRvIGFuIEFkZGl0aW9uLlxyXG4gICAqL1xyXG4gIGRldGFpbFNlcXVlbmNlTGlua0lkPzogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5lcnJvci5kZXRhaWxTZXF1ZW5jZUxpbmtJZFxyXG4gICAqL1xyXG4gIF9kZXRhaWxTZXF1ZW5jZUxpbmtJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgYWRkaXRpb24gd2l0aGluIHRoZSBsaW5lIGl0ZW0gc3VibWl0dGVkIHdoaWNoIGNvbnRhaW5zIHRoZSBlcnJvci4gVGhpcyB2YWx1ZSBpcyBvbWl0dGVkIHdoZW4gdGhlIGVycm9yIGlzIG5vdCByZWxhdGVkIHRvIGFuIEFkZGl0aW9uLlxyXG4gICAqL1xyXG4gIHN1YmRldGFpbFNlcXVlbmNlTGlua0lkPzogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5lcnJvci5zdWJkZXRhaWxTZXF1ZW5jZUxpbmtJZFxyXG4gICAqL1xyXG4gIF9zdWJkZXRhaWxTZXF1ZW5jZUxpbmtJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQW4gZXJyb3IgY29kZSxmcm9tIGEgc3BlY2lmaWVkIGNvZGUgc3lzdGVtLCB3aGljaCBkZXRhaWxzIHdoeSB0aGUgY2xhaW0gY291bGQgbm90IGJlIGFkanVkaWNhdGVkLlxyXG4gICAqL1xyXG4gIGNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3xudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggU2VydmljZXMgUHJvdmlkZWQgKEl0ZW0pLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsYWltUmVzcG9uc2VFcnJvciBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NsYWltUmVzcG9uc2VFcnJvcic7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgbGluZSBpdGVtIHN1Ym1pdHRlZCB3aGljaCBjb250YWlucyB0aGUgZXJyb3IuIFRoaXMgdmFsdWUgaXMgb21pdHRlZCB3aGVuIHRoZSBlcnJvciBpcyBlbHNld2hlcmUuXHJcbiAgICovXHJcbiAgcHVibGljIHNlcXVlbmNlTGlua0lkPzogZmhpci5GaGlyUG9zaXRpdmVJbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGFkZGl0aW9uIHdpdGhpbiB0aGUgbGluZSBpdGVtIHN1Ym1pdHRlZCB3aGljaCBjb250YWlucyB0aGUgZXJyb3IuIFRoaXMgdmFsdWUgaXMgb21pdHRlZCB3aGVuIHRoZSBlcnJvciBpcyBub3QgcmVsYXRlZCB0byBhbiBBZGRpdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZGV0YWlsU2VxdWVuY2VMaW5rSWQ/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgYWRkaXRpb24gd2l0aGluIHRoZSBsaW5lIGl0ZW0gc3VibWl0dGVkIHdoaWNoIGNvbnRhaW5zIHRoZSBlcnJvci4gVGhpcyB2YWx1ZSBpcyBvbWl0dGVkIHdoZW4gdGhlIGVycm9yIGlzIG5vdCByZWxhdGVkIHRvIGFuIEFkZGl0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJkZXRhaWxTZXF1ZW5jZUxpbmtJZD86IGZoaXIuRmhpclBvc2l0aXZlSW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBlcnJvciBjb2RlLGZyb20gYSBzcGVjaWZpZWQgY29kZSBzeXN0ZW0sIHdoaWNoIGRldGFpbHMgd2h5IHRoZSBjbGFpbSBjb3VsZCBub3QgYmUgYWRqdWRpY2F0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2xhaW1SZXNwb25zZUVycm9yIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2xhaW1SZXNwb25zZUVycm9yQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3NlcXVlbmNlTGlua0lkJ10pIHsgdGhpcy5zZXF1ZW5jZUxpbmtJZCA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh7dmFsdWU6IHNvdXJjZS5zZXF1ZW5jZUxpbmtJZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfc2VxdWVuY2VMaW5rSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5zZXF1ZW5jZUxpbmtJZCkgeyB0aGlzLnNlcXVlbmNlTGlua0lkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NlcXVlbmNlTGlua0lkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc2VxdWVuY2VMaW5rSWQgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoc291cmNlLl9zZXF1ZW5jZUxpbmtJZCBhcyBQYXJ0aWFsPGZoaXIuRmhpclBvc2l0aXZlSW50QXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkZXRhaWxTZXF1ZW5jZUxpbmtJZCddKSB7IHRoaXMuZGV0YWlsU2VxdWVuY2VMaW5rSWQgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2UuZGV0YWlsU2VxdWVuY2VMaW5rSWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RldGFpbFNlcXVlbmNlTGlua0lkJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGV0YWlsU2VxdWVuY2VMaW5rSWQpIHsgdGhpcy5kZXRhaWxTZXF1ZW5jZUxpbmtJZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kZXRhaWxTZXF1ZW5jZUxpbmtJZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRldGFpbFNlcXVlbmNlTGlua0lkID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHNvdXJjZS5fZGV0YWlsU2VxdWVuY2VMaW5rSWQgYXMgUGFydGlhbDxmaGlyLkZoaXJQb3NpdGl2ZUludEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3ViZGV0YWlsU2VxdWVuY2VMaW5rSWQnXSkgeyB0aGlzLnN1YmRldGFpbFNlcXVlbmNlTGlua0lkID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHt2YWx1ZTogc291cmNlLnN1YmRldGFpbFNlcXVlbmNlTGlua0lkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zdWJkZXRhaWxTZXF1ZW5jZUxpbmtJZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN1YmRldGFpbFNlcXVlbmNlTGlua0lkKSB7IHRoaXMuc3ViZGV0YWlsU2VxdWVuY2VMaW5rSWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3ViZGV0YWlsU2VxdWVuY2VMaW5rSWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdWJkZXRhaWxTZXF1ZW5jZUxpbmtJZCA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludChzb3VyY2UuX3N1YmRldGFpbFNlcXVlbmNlTGlua0lkIGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvZGUnXSkgeyB0aGlzLmNvZGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmNvZGUpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb2RlID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UuZXJyb3InIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzZXF1ZW5jZUxpbmtJZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZGV0YWlsU2VxdWVuY2VMaW5rSWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3N1YmRldGFpbFNlcXVlbmNlTGlua0lkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdjb2RlJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDbGFpbVJlc3BvbnNlUGF5bWVudCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlUGF5bWVudEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhpcyByZXByZXNlbnRzIHBhcnRpYWwgb3IgY29tcGxldGUgcGF5bWVudCBvZiB0aGUgY2xhaW0uXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWRqdXN0bWVudCB0byB0aGUgcGF5bWVudCBvZiB0aGlzIHRyYW5zYWN0aW9uIHdoaWNoIGlzIG5vdCByZWxhdGVkIHRvIGFkanVkaWNhdGlvbiBvZiB0aGlzIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIGFkanVzdG1lbnQ/OiBmaGlyLk1vbmV5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVhc29uIGZvciB0aGUgcGF5bWVudCBhZGp1c3RtZW50LlxyXG4gICAqL1xyXG4gIGFkanVzdG1lbnRSZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEVzdGltYXRlZCBwYXltZW50IGRhdGEuXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5wYXltZW50LmRhdGVcclxuICAgKi9cclxuICBfZGF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGF5YWJsZSBsZXNzIGFueSBwYXltZW50IGFkanVzdG1lbnQuXHJcbiAgICovXHJcbiAgYW1vdW50PzogZmhpci5Nb25leUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBheW1lbnQgaWRlbnRpZmllci5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXltZW50IGRldGFpbHMgZm9yIHRoZSBjbGFpbSBpZiB0aGUgY2xhaW0gaGFzIGJlZW4gcGFpZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFpbVJlc3BvbnNlUGF5bWVudCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NsYWltUmVzcG9uc2VQYXltZW50JztcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoaXMgcmVwcmVzZW50cyBwYXJ0aWFsIG9yIGNvbXBsZXRlIHBheW1lbnQgb2YgdGhlIGNsYWltLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFkanVzdG1lbnQgdG8gdGhlIHBheW1lbnQgb2YgdGhpcyB0cmFuc2FjdGlvbiB3aGljaCBpcyBub3QgcmVsYXRlZCB0byBhZGp1ZGljYXRpb24gb2YgdGhpcyB0cmFuc2FjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYWRqdXN0bWVudD86IGZoaXIuTW9uZXl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlYXNvbiBmb3IgdGhlIHBheW1lbnQgYWRqdXN0bWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgYWRqdXN0bWVudFJlYXNvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFc3RpbWF0ZWQgcGF5bWVudCBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXRlPzogZmhpci5GaGlyRGF0ZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGF5YWJsZSBsZXNzIGFueSBwYXltZW50IGFkanVzdG1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGFtb3VudD86IGZoaXIuTW9uZXl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBheW1lbnQgaWRlbnRpZmllci5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2xhaW1SZXNwb25zZVBheW1lbnQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDbGFpbVJlc3BvbnNlUGF5bWVudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRqdXN0bWVudCddKSB7IHRoaXMuYWRqdXN0bWVudCA9IG5ldyBmaGlyLk1vbmV5KHNvdXJjZS5hZGp1c3RtZW50KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRqdXN0bWVudFJlYXNvbiddKSB7IHRoaXMuYWRqdXN0bWVudFJlYXNvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuYWRqdXN0bWVudFJlYXNvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSkgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZSh7dmFsdWU6IHNvdXJjZS5kYXRlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kYXRlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGF0ZSkgeyB0aGlzLmRhdGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGF0ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZShzb3VyY2UuX2RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhbW91bnQnXSkgeyB0aGlzLmFtb3VudCA9IG5ldyBmaGlyLk1vbmV5KHNvdXJjZS5hbW91bnQpOyB9XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuaWRlbnRpZmllcik7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdDbGFpbVJlc3BvbnNlLnBheW1lbnQnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0eXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhZGp1c3RtZW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhZGp1c3RtZW50UmVhc29uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkYXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhbW91bnQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2lkZW50aWZpZXInLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENsYWltUmVzcG9uc2VQcm9jZXNzTm90ZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlUHJvY2Vzc05vdGVBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBBbiBpbnRlZ2VyIGFzc29jaWF0ZWQgd2l0aCBlYWNoIG5vdGUgd2hpY2ggbWF5IGJlIHJlZmVycmVkIHRvIGZyb20gZWFjaCBzZXJ2aWNlIGxpbmUgaXRlbS5cclxuICAgKi9cclxuICBudW1iZXI/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDbGFpbVJlc3BvbnNlLnByb2Nlc3NOb3RlLm51bWJlclxyXG4gICAqL1xyXG4gIF9udW1iZXI/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBub3RlIHB1cnBvc2U6IFByaW50L0Rpc3BsYXkuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5vdGUgdGV4dC5cclxuICAgKi9cclxuICB0ZXh0PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENsYWltUmVzcG9uc2UucHJvY2Vzc05vdGUudGV4dFxyXG4gICAqL1xyXG4gIF90ZXh0PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgSVNPLTYzOS0xIGFscGhhIDIgY29kZSBpbiBsb3dlciBjYXNlIGZvciB0aGUgbGFuZ3VhZ2UsIG9wdGlvbmFsbHkgZm9sbG93ZWQgYnkgYSBoeXBoZW4gYW5kIHRoZSBJU08tMzE2Ni0xIGFscGhhIDIgY29kZSBmb3IgdGhlIHJlZ2lvbiBpbiB1cHBlciBjYXNlOyBlLmcuIFwiZW5cIiBmb3IgRW5nbGlzaCwgb3IgXCJlbi1VU1wiIGZvciBBbWVyaWNhbiBFbmdsaXNoIHZlcnN1cyBcImVuLUVOXCIgZm9yIEVuZ2xhbmQgRW5nbGlzaC5cclxuICAgKi9cclxuICBsYW5ndWFnZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBOb3RlIHRleHQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2xhaW1SZXNwb25zZVByb2Nlc3NOb3RlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2xhaW1SZXNwb25zZVByb2Nlc3NOb3RlJztcclxuICAvKipcclxuICAgKiBBbiBpbnRlZ2VyIGFzc29jaWF0ZWQgd2l0aCBlYWNoIG5vdGUgd2hpY2ggbWF5IGJlIHJlZmVycmVkIHRvIGZyb20gZWFjaCBzZXJ2aWNlIGxpbmUgaXRlbS5cclxuICAgKi9cclxuICBwdWJsaWMgbnVtYmVyPzogZmhpci5GaGlyUG9zaXRpdmVJbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBub3RlIHB1cnBvc2U6IFByaW50L0Rpc3BsYXkuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5vdGUgdGV4dC5cclxuICAgKi9cclxuICBwdWJsaWMgdGV4dD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIElTTy02MzktMSBhbHBoYSAyIGNvZGUgaW4gbG93ZXIgY2FzZSBmb3IgdGhlIGxhbmd1YWdlLCBvcHRpb25hbGx5IGZvbGxvd2VkIGJ5IGEgaHlwaGVuIGFuZCB0aGUgSVNPLTMxNjYtMSBhbHBoYSAyIGNvZGUgZm9yIHRoZSByZWdpb24gaW4gdXBwZXIgY2FzZTsgZS5nLiBcImVuXCIgZm9yIEVuZ2xpc2gsIG9yIFwiZW4tVVNcIiBmb3IgQW1lcmljYW4gRW5nbGlzaCB2ZXJzdXMgXCJlbi1FTlwiIGZvciBFbmdsYW5kIEVuZ2xpc2guXHJcbiAgICovXHJcbiAgcHVibGljIGxhbmd1YWdlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENsYWltUmVzcG9uc2VQcm9jZXNzTm90ZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENsYWltUmVzcG9uc2VQcm9jZXNzTm90ZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydudW1iZXInXSkgeyB0aGlzLm51bWJlciA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh7dmFsdWU6IHNvdXJjZS5udW1iZXJ9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX251bWJlciddKSB7XHJcbiAgICAgIGlmICh0aGlzLm51bWJlcikgeyB0aGlzLm51bWJlci5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9udW1iZXIhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5udW1iZXIgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoc291cmNlLl9udW1iZXIgYXMgUGFydGlhbDxmaGlyLkZoaXJQb3NpdGl2ZUludEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3RleHQnXSkgeyB0aGlzLnRleHQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnRleHR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3RleHQnXSkge1xyXG4gICAgICBpZiAodGhpcy50ZXh0KSB7IHRoaXMudGV4dC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl90ZXh0ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudGV4dCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl90ZXh0IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydsYW5ndWFnZSddKSB7IHRoaXMubGFuZ3VhZ2UgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmxhbmd1YWdlKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UucHJvY2Vzc05vdGUnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdudW1iZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1NWKCd0eXBlJyxleHAsJ05vdGVUeXBlJyxOb3RlVHlwZVZzVmFsaWRhdGlvbiwncicpKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0ZXh0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdsYW5ndWFnZScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2xhaW1SZXNwb25zZUluc3VyYW5jZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlSW5zdXJhbmNlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQSBzZXJ2aWNlIGxpbmUgaXRlbS5cclxuICAgKi9cclxuICBzZXF1ZW5jZTogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5pbnN1cmFuY2Uuc2VxdWVuY2VcclxuICAgKi9cclxuICBfc2VxdWVuY2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbnN0YW5jZSBudW1iZXIgb2YgdGhlIENvdmVyYWdlIHdoaWNoIGlzIHRoZSBmb2N1cyBmb3IgYWRqdWRpY2F0aW9uLiBUaGUgQ292ZXJhZ2UgYWdhaW5zdCB3aGljaCB0aGUgY2xhaW0gaXMgdG8gYmUgYWRqdWRpY2F0ZWQuXHJcbiAgICovXHJcbiAgZm9jYWw6IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENsYWltUmVzcG9uc2UuaW5zdXJhbmNlLmZvY2FsXHJcbiAgICovXHJcbiAgX2ZvY2FsPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIHByb2dyYW0gb3IgcGxhbiBpZGVudGlmaWNhdGlvbiwgdW5kZXJ3cml0ZXIgb3IgcGF5b3IuXHJcbiAgICovXHJcbiAgY292ZXJhZ2U6IGZoaXIuUmVmZXJlbmNlQXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb250cmFjdCBudW1iZXIgb2YgYSBidXNpbmVzcyBhZ3JlZW1lbnQgd2hpY2ggZGVzY3JpYmVzIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucy5cclxuICAgKi9cclxuICBidXNpbmVzc0FycmFuZ2VtZW50PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENsYWltUmVzcG9uc2UuaW5zdXJhbmNlLmJ1c2luZXNzQXJyYW5nZW1lbnRcclxuICAgKi9cclxuICBfYnVzaW5lc3NBcnJhbmdlbWVudD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIHJlZmVyZW5jZXMgZnJvbSB0aGUgSW5zdXJlciB0byB3aGljaCB0aGVzZSBzZXJ2aWNlcyBwZXJ0YWluLlxyXG4gICAqL1xyXG4gIHByZUF1dGhSZWY/OiBmaGlyLkZoaXJTdHJpbmdbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDbGFpbVJlc3BvbnNlLmluc3VyYW5jZS5wcmVBdXRoUmVmXHJcbiAgICovXHJcbiAgX3ByZUF1dGhSZWY/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBDb3ZlcmFnZXMgYWRqdWRpY2F0aW9uIGRldGFpbHMuXHJcbiAgICovXHJcbiAgY2xhaW1SZXNwb25zZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5hbmNpYWwgaW5zdHJ1bWVudCBieSB3aGljaCBwYXltZW50IGluZm9ybWF0aW9uIGZvciBoZWFsdGggY2FyZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFpbVJlc3BvbnNlSW5zdXJhbmNlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2xhaW1SZXNwb25zZUluc3VyYW5jZSc7XHJcbiAgLyoqXHJcbiAgICogQSBzZXJ2aWNlIGxpbmUgaXRlbS5cclxuICAgKi9cclxuICBwdWJsaWMgc2VxdWVuY2U6IGZoaXIuRmhpclBvc2l0aXZlSW50fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluc3RhbmNlIG51bWJlciBvZiB0aGUgQ292ZXJhZ2Ugd2hpY2ggaXMgdGhlIGZvY3VzIGZvciBhZGp1ZGljYXRpb24uIFRoZSBDb3ZlcmFnZSBhZ2FpbnN0IHdoaWNoIHRoZSBjbGFpbSBpcyB0byBiZSBhZGp1ZGljYXRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZm9jYWw6IGZoaXIuRmhpckJvb2xlYW58bnVsbDtcclxuICAvKipcclxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIHByb2dyYW0gb3IgcGxhbiBpZGVudGlmaWNhdGlvbiwgdW5kZXJ3cml0ZXIgb3IgcGF5b3IuXHJcbiAgICovXHJcbiAgcHVibGljIGNvdmVyYWdlOiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb250cmFjdCBudW1iZXIgb2YgYSBidXNpbmVzcyBhZ3JlZW1lbnQgd2hpY2ggZGVzY3JpYmVzIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgYnVzaW5lc3NBcnJhbmdlbWVudD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIHJlZmVyZW5jZXMgZnJvbSB0aGUgSW5zdXJlciB0byB3aGljaCB0aGVzZSBzZXJ2aWNlcyBwZXJ0YWluLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVBdXRoUmVmOiBmaGlyLkZoaXJTdHJpbmdbXTtcclxuICAvKipcclxuICAgKiBUaGUgQ292ZXJhZ2VzIGFkanVkaWNhdGlvbiBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGFpbVJlc3BvbnNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENsYWltUmVzcG9uc2VJbnN1cmFuY2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDbGFpbVJlc3BvbnNlSW5zdXJhbmNlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3NlcXVlbmNlJ10pIHsgdGhpcy5zZXF1ZW5jZSA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh7dmFsdWU6IHNvdXJjZS5zZXF1ZW5jZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZXF1ZW5jZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zZXF1ZW5jZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnNlcXVlbmNlKSB7IHRoaXMuc2VxdWVuY2UuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc2VxdWVuY2UhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zZXF1ZW5jZSA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludChzb3VyY2UuX3NlcXVlbmNlIGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2ZvY2FsJ10pIHsgdGhpcy5mb2NhbCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmZvY2FsfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmZvY2FsID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2ZvY2FsJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZm9jYWwpIHsgdGhpcy5mb2NhbC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9mb2NhbCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmZvY2FsID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9mb2NhbCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvdmVyYWdlJ10pIHsgdGhpcy5jb3ZlcmFnZSA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuY292ZXJhZ2UpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb3ZlcmFnZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2J1c2luZXNzQXJyYW5nZW1lbnQnXSkgeyB0aGlzLmJ1c2luZXNzQXJyYW5nZW1lbnQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmJ1c2luZXNzQXJyYW5nZW1lbnR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2J1c2luZXNzQXJyYW5nZW1lbnQnXSkge1xyXG4gICAgICBpZiAodGhpcy5idXNpbmVzc0FycmFuZ2VtZW50KSB7IHRoaXMuYnVzaW5lc3NBcnJhbmdlbWVudC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9idXNpbmVzc0FycmFuZ2VtZW50ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuYnVzaW5lc3NBcnJhbmdlbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9idXNpbmVzc0FycmFuZ2VtZW50IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwcmVBdXRoUmVmJ10pIHsgdGhpcy5wcmVBdXRoUmVmID0gc291cmNlLnByZUF1dGhSZWYubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucHJlQXV0aFJlZiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHJlQXV0aFJlZiddKSB7XHJcbiAgICAgIHNvdXJjZS5fcHJlQXV0aFJlZi5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wcmVBdXRoUmVmLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMucHJlQXV0aFJlZltpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLnByZUF1dGhSZWYucHVzaChuZXcgZmhpci5GaGlyU3RyaW5nKHggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjbGFpbVJlc3BvbnNlJ10pIHsgdGhpcy5jbGFpbVJlc3BvbnNlID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5jbGFpbVJlc3BvbnNlKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UuaW5zdXJhbmNlJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygnc2VxdWVuY2UnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ2ZvY2FsJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdjb3ZlcmFnZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnYnVzaW5lc3NBcnJhbmdlbWVudCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncHJlQXV0aFJlZicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnY2xhaW1SZXNwb25zZScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2xhaW1SZXNwb25zZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGFpbVJlc3BvbnNlQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiQ2xhaW1SZXNwb25zZVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgUmVzcG9uc2UgYnVzaW5lc3MgaWRlbnRpZmllci5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyB0aGUgY29kZSBjYW5jZWxsZWQgYW5kIGVudGVyZWQtaW4tZXJyb3IgdGhhdCBtYXJrIHRoZSByZXNwb25zZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHN0YXR1cz86IGZoaXIuRmhpckNvZGU8Rm1TdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBQYXRpZW50IFJlc291cmNlLlxyXG4gICAqL1xyXG4gIHBhdGllbnQ/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIHdoZW4gdGhlIGVuY2xvc2VkIHN1aXRlIG9mIHNlcnZpY2VzIHdlcmUgcGVyZm9ybWVkIG9yIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBjcmVhdGVkPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2xhaW1SZXNwb25zZS5jcmVhdGVkXHJcbiAgICovXHJcbiAgX2NyZWF0ZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJbnN1cmVyIHdobyBwcm9kdWNlZCB0aGlzIGFkanVkaWNhdGVkIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIGluc3VyZXI/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmFjdGl0aW9uZXIgd2hvIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2VydmljZXMgcmVuZGVyZWQgdG8gdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgcmVxdWVzdFByb3ZpZGVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgb3JnYW5pemF0aW9uIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2VydmljZXMgcmVuZGVyZWQgdG8gdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgcmVxdWVzdE9yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT3JpZ2luYWwgcmVxdWVzdCByZXNvdXJjZSByZWZlcnJlbmNlLlxyXG4gICAqL1xyXG4gIHJlcXVlc3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFByb2Nlc3Npbmcgb3V0Y29tZSBlcnJyb3IsIHBhcnRpYWwgb3IgY29tcGxldGUgcHJvY2Vzc2luZy5cclxuICAgKi9cclxuICBvdXRjb21lPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSBzdGF0dXMgb2YgdGhlIGFkanVkaWNhdGlvbi5cclxuICAgKi9cclxuICBkaXNwb3NpdGlvbj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDbGFpbVJlc3BvbnNlLmRpc3Bvc2l0aW9uXHJcbiAgICovXHJcbiAgX2Rpc3Bvc2l0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBQYXJ0eSB0byBiZSByZWltYnVyc2VkOiBTdWJzY3JpYmVyLCBwcm92aWRlciwgb3RoZXIuXHJcbiAgICovXHJcbiAgcGF5ZWVUeXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZmlyc3QgdGllciBzZXJ2aWNlIGFkanVkaWNhdGlvbnMgZm9yIHN1Ym1pdHRlZCBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBpdGVtPzogZmhpci5DbGFpbVJlc3BvbnNlSXRlbUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZpcnN0IHRpZXIgc2VydmljZSBhZGp1ZGljYXRpb25zIGZvciBwYXlvciBhZGRlZCBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBhZGRJdGVtPzogZmhpci5DbGFpbVJlc3BvbnNlQWRkSXRlbUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggU2VydmljZXMgUHJvdmlkZWQgKEl0ZW0pLlxyXG4gICAqL1xyXG4gIGVycm9yPzogZmhpci5DbGFpbVJlc3BvbnNlRXJyb3JBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0b3RhbCBjb3N0IG9mIHRoZSBzZXJ2aWNlcyByZXBvcnRlZC5cclxuICAgKi9cclxuICB0b3RhbENvc3Q/OiBmaGlyLk1vbmV5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFtb3VudCBvZiBkZWR1Y3RpYmxlIGFwcGxpZWQgd2hpY2ggd2FzIG5vdCBhbGxvY2F0ZWQgdG8gYW55IHBhcnRpY3VsYXIgc2VydmljZSBsaW5lLlxyXG4gICAqL1xyXG4gIHVuYWxsb2NEZWR1Y3RhYmxlPzogZmhpci5Nb25leUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRvdGFsIGFtb3VudCBvZiBiZW5lZml0IHBheWFibGUgKEVxdWFsIHRvIHN1bSBvZiB0aGUgQmVuZWZpdCBhbW91bnRzIGZyb20gYWxsIGRldGFpbCBsaW5lcyBhbmQgYWRkaXRpb25zIGxlc3MgdGhlIFVuYWxsb2NhdGVkIERlZHVjdGlibGUpLlxyXG4gICAqL1xyXG4gIHRvdGFsQmVuZWZpdD86IGZoaXIuTW9uZXlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYXltZW50IGRldGFpbHMgZm9yIHRoZSBjbGFpbSBpZiB0aGUgY2xhaW0gaGFzIGJlZW4gcGFpZC5cclxuICAgKi9cclxuICBwYXltZW50PzogZmhpci5DbGFpbVJlc3BvbnNlUGF5bWVudEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN0YXR1cyBvZiBmdW5kcyByZXNlcnZhdGlvbiAoRm9yIHByb3ZpZGVyLCBmb3IgUGF0aWVudCwgTm9uZSkuXHJcbiAgICovXHJcbiAgcmVzZXJ2ZWQ/OiBmaGlyLkNvZGluZ0FyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmb3JtIHRvIGJlIHVzZWQgZm9yIHByaW50aW5nIHRoZSBjb250ZW50LlxyXG4gICAqL1xyXG4gIGZvcm0/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGV4dC5cclxuICAgKi9cclxuICBwcm9jZXNzTm90ZT86IGZoaXIuQ2xhaW1SZXNwb25zZVByb2Nlc3NOb3RlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZXF1ZXN0IGZvciBhZGRpdGlvbmFsIHN1cHBvcnRpbmcgb3IgYXV0aG9yaXppbmcgaW5mb3JtYXRpb24sIHN1Y2ggYXM6IGRvY3VtZW50cywgaW1hZ2VzIG9yIHJlc291cmNlcy5cclxuICAgKi9cclxuICBjb21tdW5pY2F0aW9uUmVxdWVzdD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGaW5hbmNpYWwgaW5zdHJ1bWVudCBieSB3aGljaCBwYXltZW50IGluZm9ybWF0aW9uIGZvciBoZWFsdGggY2FyZS5cclxuICAgKi9cclxuICBpbnN1cmFuY2U/OiBmaGlyLkNsYWltUmVzcG9uc2VJbnN1cmFuY2VBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyByZXNvdXJjZSBwcm92aWRlcyB0aGUgYWRqdWRpY2F0aW9uIGRldGFpbHMgZnJvbSB0aGUgcHJvY2Vzc2luZyBvZiBhIENsYWltIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsYWltUmVzcG9uc2UgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NsYWltUmVzcG9uc2UnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiQ2xhaW1SZXNwb25zZVwiO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBSZXNwb25zZSBidXNpbmVzcyBpZGVudGlmaWVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyOiBmaGlyLklkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyB0aGUgY29kZSBjYW5jZWxsZWQgYW5kIGVudGVyZWQtaW4tZXJyb3IgdGhhdCBtYXJrIHRoZSByZXNwb25zZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM/OiBmaGlyLkZoaXJDb2RlPEZtU3RhdHVzQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYXRpZW50IFJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXRpZW50PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIHdoZW4gdGhlIGVuY2xvc2VkIHN1aXRlIG9mIHNlcnZpY2VzIHdlcmUgcGVyZm9ybWVkIG9yIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlZD86IGZoaXIuRmhpckRhdGVUaW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgSW5zdXJlciB3aG8gcHJvZHVjZWQgdGhpcyBhZGp1ZGljYXRlZCByZXNwb25zZS5cclxuICAgKi9cclxuICBwdWJsaWMgaW5zdXJlcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJhY3RpdGlvbmVyIHdobyBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHNlcnZpY2VzIHJlbmRlcmVkIHRvIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXF1ZXN0UHJvdmlkZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG9yZ2FuaXphdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHNlcnZpY2VzIHJlbmRlcmVkIHRvIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXF1ZXN0T3JnYW5pemF0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9yaWdpbmFsIHJlcXVlc3QgcmVzb3VyY2UgcmVmZXJyZW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdD86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQcm9jZXNzaW5nIG91dGNvbWUgZXJycm9yLCBwYXJ0aWFsIG9yIGNvbXBsZXRlIHByb2Nlc3NpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIG91dGNvbWU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB0aGUgc3RhdHVzIG9mIHRoZSBhZGp1ZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3Bvc2l0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYXJ0eSB0byBiZSByZWltYnVyc2VkOiBTdWJzY3JpYmVyLCBwcm92aWRlciwgb3RoZXIuXHJcbiAgICovXHJcbiAgcHVibGljIHBheWVlVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZmlyc3QgdGllciBzZXJ2aWNlIGFkanVkaWNhdGlvbnMgZm9yIHN1Ym1pdHRlZCBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgaXRlbTogZmhpci5DbGFpbVJlc3BvbnNlSXRlbVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmaXJzdCB0aWVyIHNlcnZpY2UgYWRqdWRpY2F0aW9ucyBmb3IgcGF5b3IgYWRkZWQgc2VydmljZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZEl0ZW06IGZoaXIuQ2xhaW1SZXNwb25zZUFkZEl0ZW1bXTtcclxuICAvKipcclxuICAgKiBNdXR1YWxseSBleGNsdXNpdmUgd2l0aCBTZXJ2aWNlcyBQcm92aWRlZCAoSXRlbSkuXHJcbiAgICovXHJcbiAgcHVibGljIGVycm9yOiBmaGlyLkNsYWltUmVzcG9uc2VFcnJvcltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0b3RhbCBjb3N0IG9mIHRoZSBzZXJ2aWNlcyByZXBvcnRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdG90YWxDb3N0PzogZmhpci5Nb25leXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFtb3VudCBvZiBkZWR1Y3RpYmxlIGFwcGxpZWQgd2hpY2ggd2FzIG5vdCBhbGxvY2F0ZWQgdG8gYW55IHBhcnRpY3VsYXIgc2VydmljZSBsaW5lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1bmFsbG9jRGVkdWN0YWJsZT86IGZoaXIuTW9uZXl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRvdGFsIGFtb3VudCBvZiBiZW5lZml0IHBheWFibGUgKEVxdWFsIHRvIHN1bSBvZiB0aGUgQmVuZWZpdCBhbW91bnRzIGZyb20gYWxsIGRldGFpbCBsaW5lcyBhbmQgYWRkaXRpb25zIGxlc3MgdGhlIFVuYWxsb2NhdGVkIERlZHVjdGlibGUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b3RhbEJlbmVmaXQ/OiBmaGlyLk1vbmV5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYXltZW50IGRldGFpbHMgZm9yIHRoZSBjbGFpbSBpZiB0aGUgY2xhaW0gaGFzIGJlZW4gcGFpZC5cclxuICAgKi9cclxuICBwdWJsaWMgcGF5bWVudD86IGZoaXIuQ2xhaW1SZXNwb25zZVBheW1lbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN0YXR1cyBvZiBmdW5kcyByZXNlcnZhdGlvbiAoRm9yIHByb3ZpZGVyLCBmb3IgUGF0aWVudCwgTm9uZSkuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2VydmVkPzogZmhpci5Db2Rpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmb3JtIHRvIGJlIHVzZWQgZm9yIHByaW50aW5nIHRoZSBjb250ZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmb3JtPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGV4dC5cclxuICAgKi9cclxuICBwdWJsaWMgcHJvY2Vzc05vdGU6IGZoaXIuQ2xhaW1SZXNwb25zZVByb2Nlc3NOb3RlW107XHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdCBmb3IgYWRkaXRpb25hbCBzdXBwb3J0aW5nIG9yIGF1dGhvcml6aW5nIGluZm9ybWF0aW9uLCBzdWNoIGFzOiBkb2N1bWVudHMsIGltYWdlcyBvciByZXNvdXJjZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbW11bmljYXRpb25SZXF1ZXN0OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIEZpbmFuY2lhbCBpbnN0cnVtZW50IGJ5IHdoaWNoIHBheW1lbnQgaW5mb3JtYXRpb24gZm9yIGhlYWx0aCBjYXJlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbnN1cmFuY2U6IGZoaXIuQ2xhaW1SZXNwb25zZUluc3VyYW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENsYWltUmVzcG9uc2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDbGFpbVJlc3BvbnNlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ0NsYWltUmVzcG9uc2UnO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxGbVN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxGbVN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncGF0aWVudCddKSB7IHRoaXMucGF0aWVudCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UucGF0aWVudCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NyZWF0ZWQnXSkgeyB0aGlzLmNyZWF0ZWQgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuY3JlYXRlZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfY3JlYXRlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNyZWF0ZWQpIHsgdGhpcy5jcmVhdGVkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NyZWF0ZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jcmVhdGVkID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fY3JlYXRlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydpbnN1cmVyJ10pIHsgdGhpcy5pbnN1cmVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5pbnN1cmVyKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVxdWVzdFByb3ZpZGVyJ10pIHsgdGhpcy5yZXF1ZXN0UHJvdmlkZXIgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnJlcXVlc3RQcm92aWRlcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcXVlc3RPcmdhbml6YXRpb24nXSkgeyB0aGlzLnJlcXVlc3RPcmdhbml6YXRpb24gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnJlcXVlc3RPcmdhbml6YXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXF1ZXN0J10pIHsgdGhpcy5yZXF1ZXN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZXF1ZXN0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb3V0Y29tZSddKSB7IHRoaXMub3V0Y29tZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uub3V0Y29tZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rpc3Bvc2l0aW9uJ10pIHsgdGhpcy5kaXNwb3NpdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGlzcG9zaXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2Rpc3Bvc2l0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGlzcG9zaXRpb24pIHsgdGhpcy5kaXNwb3NpdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kaXNwb3NpdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRpc3Bvc2l0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rpc3Bvc2l0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwYXllZVR5cGUnXSkgeyB0aGlzLnBheWVlVHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucGF5ZWVUeXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaXRlbSddKSB7IHRoaXMuaXRlbSA9IHNvdXJjZS5pdGVtLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ2xhaW1SZXNwb25zZUl0ZW0oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pdGVtID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2FkZEl0ZW0nXSkgeyB0aGlzLmFkZEl0ZW0gPSBzb3VyY2UuYWRkSXRlbS5tYXAoKHgpID0+IG5ldyBmaGlyLkNsYWltUmVzcG9uc2VBZGRJdGVtKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWRkSXRlbSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydlcnJvciddKSB7IHRoaXMuZXJyb3IgPSBzb3VyY2UuZXJyb3IubWFwKCh4KSA9PiBuZXcgZmhpci5DbGFpbVJlc3BvbnNlRXJyb3IoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5lcnJvciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd0b3RhbENvc3QnXSkgeyB0aGlzLnRvdGFsQ29zdCA9IG5ldyBmaGlyLk1vbmV5KHNvdXJjZS50b3RhbENvc3QpOyB9XHJcbiAgICBpZiAoc291cmNlWyd1bmFsbG9jRGVkdWN0YWJsZSddKSB7IHRoaXMudW5hbGxvY0RlZHVjdGFibGUgPSBuZXcgZmhpci5Nb25leShzb3VyY2UudW5hbGxvY0RlZHVjdGFibGUpOyB9XHJcbiAgICBpZiAoc291cmNlWyd0b3RhbEJlbmVmaXQnXSkgeyB0aGlzLnRvdGFsQmVuZWZpdCA9IG5ldyBmaGlyLk1vbmV5KHNvdXJjZS50b3RhbEJlbmVmaXQpOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXltZW50J10pIHsgdGhpcy5wYXltZW50ID0gbmV3IGZoaXIuQ2xhaW1SZXNwb25zZVBheW1lbnQoc291cmNlLnBheW1lbnQpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXNlcnZlZCddKSB7IHRoaXMucmVzZXJ2ZWQgPSBuZXcgZmhpci5Db2Rpbmcoc291cmNlLnJlc2VydmVkKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZm9ybSddKSB7IHRoaXMuZm9ybSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuZm9ybSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3Byb2Nlc3NOb3RlJ10pIHsgdGhpcy5wcm9jZXNzTm90ZSA9IHNvdXJjZS5wcm9jZXNzTm90ZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNsYWltUmVzcG9uc2VQcm9jZXNzTm90ZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnByb2Nlc3NOb3RlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbW11bmljYXRpb25SZXF1ZXN0J10pIHsgdGhpcy5jb21tdW5pY2F0aW9uUmVxdWVzdCA9IHNvdXJjZS5jb21tdW5pY2F0aW9uUmVxdWVzdC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbW11bmljYXRpb25SZXF1ZXN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2luc3VyYW5jZSddKSB7IHRoaXMuaW5zdXJhbmNlID0gc291cmNlLmluc3VyYW5jZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNsYWltUmVzcG9uc2VJbnN1cmFuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pbnN1cmFuY2UgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NsYWltUmVzcG9uc2UnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJQUygncmVzb3VyY2VUeXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdpZGVudGlmaWVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TVignc3RhdHVzJyxleHAsJ0ZtU3RhdHVzJyxGbVN0YXR1c1ZzVmFsaWRhdGlvbiwncicpKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwYXRpZW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdjcmVhdGVkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdpbnN1cmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZXF1ZXN0UHJvdmlkZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JlcXVlc3RPcmdhbml6YXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JlcXVlc3QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ291dGNvbWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rpc3Bvc2l0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwYXllZVR5cGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2l0ZW0nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2FkZEl0ZW0nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2Vycm9yJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0b3RhbENvc3QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3VuYWxsb2NEZWR1Y3RhYmxlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0b3RhbEJlbmVmaXQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3BheW1lbnQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3Jlc2VydmVkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdmb3JtJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdwcm9jZXNzTm90ZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnY29tbXVuaWNhdGlvblJlcXVlc3QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2luc3VyYW5jZScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=