// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Questionnaire
import * as fhir from '../fhir.js';
// @ts-ignore
import { ItemTypeVsValidation } from '../fhirValueSets/ItemTypeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
/**
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.
 * This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
 */
export class QuestionnaireItemEnableWhen extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemEnableWhen - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['question']) {
            this.question = new fhir.FhirString({ value: source.question });
        }
        else {
            this.question = null;
        }
        if (source['_question']) {
            if (this.question) {
                this.question.addExtendedProperties(source._question);
            }
            else {
                this.question = new fhir.FhirString(source._question);
            }
        }
        if (source['hasAnswer']) {
            this.hasAnswer = new fhir.FhirBoolean({ value: source.hasAnswer });
        }
        if (source['_hasAnswer']) {
            if (this.hasAnswer) {
                this.hasAnswer.addExtendedProperties(source._hasAnswer);
            }
            else {
                this.hasAnswer = new fhir.FhirBoolean(source._hasAnswer);
            }
        }
        if (source['answer']) {
            this.answer = source.answer;
        }
        else if (source['answerBoolean']) {
            this.answer = new fhir.FhirBoolean({ value: source.answerBoolean });
        }
        else if (source['answerDecimal']) {
            this.answer = new fhir.FhirDecimal({ value: source.answerDecimal });
        }
        else if (source['answerInteger']) {
            this.answer = new fhir.FhirInteger({ value: source.answerInteger });
        }
        else if (source['answerDate']) {
            this.answer = new fhir.FhirDate({ value: source.answerDate });
        }
        else if (source['answerDateTime']) {
            this.answer = new fhir.FhirDateTime({ value: source.answerDateTime });
        }
        else if (source['answerTime']) {
            this.answer = new fhir.FhirTime({ value: source.answerTime });
        }
        else if (source['answerString']) {
            this.answer = new fhir.FhirString({ value: source.answerString });
        }
        else if (source['answerUri']) {
            this.answer = new fhir.FhirUri({ value: source.answerUri });
        }
        else if (source['answerAttachment']) {
            this.answer = new fhir.Attachment(source.answerAttachment);
        }
        else if (source['answerCoding']) {
            this.answer = new fhir.Coding(source.answerCoding);
        }
        else if (source['answerQuantity']) {
            this.answer = new fhir.Quantity(source.answerQuantity);
        }
        else if (source['answerReference']) {
            this.answer = new fhir.Reference(source.answerReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item.enableWhen';
        }
        iss.push(...this.vRS('question', exp));
        iss.push(...this.vOS('hasAnswer', exp));
        iss.push(...this.vOS('answer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemEnableWhen._fts_dataType = 'QuestionnaireItemEnableWhen';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.enableWhen.answer[x]
 */
QuestionnaireItemEnableWhen._fts_answerIsChoice = true;
/**
 * This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
 */
export class QuestionnaireItemOption extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemOption - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item.option';
        }
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemOption._fts_dataType = 'QuestionnaireItemOption';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.option.value[x]
 */
QuestionnaireItemOption._fts_valueIsChoice = true;
/**
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export class QuestionnaireItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId']) {
            this.linkId = new fhir.FhirString({ value: source.linkId });
        }
        else {
            this.linkId = null;
        }
        if (source['_linkId']) {
            if (this.linkId) {
                this.linkId.addExtendedProperties(source._linkId);
            }
            else {
                this.linkId = new fhir.FhirString(source._linkId);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirUri({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['prefix']) {
            this.prefix = new fhir.FhirString({ value: source.prefix });
        }
        if (source['_prefix']) {
            if (this.prefix) {
                this.prefix.addExtendedProperties(source._prefix);
            }
            else {
                this.prefix = new fhir.FhirString(source._prefix);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['enableWhen']) {
            this.enableWhen = source.enableWhen.map((x) => new fhir.QuestionnaireItemEnableWhen(x));
        }
        else {
            this.enableWhen = [];
        }
        if (source['required']) {
            this.required = new fhir.FhirBoolean({ value: source.required });
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required);
            }
        }
        if (source['repeats']) {
            this.repeats = new fhir.FhirBoolean({ value: source.repeats });
        }
        if (source['_repeats']) {
            if (this.repeats) {
                this.repeats.addExtendedProperties(source._repeats);
            }
            else {
                this.repeats = new fhir.FhirBoolean(source._repeats);
            }
        }
        if (source['readOnly']) {
            this.readOnly = new fhir.FhirBoolean({ value: source.readOnly });
        }
        if (source['_readOnly']) {
            if (this.readOnly) {
                this.readOnly.addExtendedProperties(source._readOnly);
            }
            else {
                this.readOnly = new fhir.FhirBoolean(source._readOnly);
            }
        }
        if (source['maxLength']) {
            this.maxLength = new fhir.FhirInteger({ value: source.maxLength });
        }
        if (source['_maxLength']) {
            if (this.maxLength) {
                this.maxLength.addExtendedProperties(source._maxLength);
            }
            else {
                this.maxLength = new fhir.FhirInteger(source._maxLength);
            }
        }
        if (source['options']) {
            this.options = new fhir.Reference(source.options);
        }
        if (source['option']) {
            this.option = source.option.map((x) => new fhir.QuestionnaireItemOption(x));
        }
        else {
            this.option = [];
        }
        if (source['initial']) {
            this.initial = source.initial;
        }
        else if (source['initialBoolean']) {
            this.initial = new fhir.FhirBoolean({ value: source.initialBoolean });
        }
        else if (source['initialDecimal']) {
            this.initial = new fhir.FhirDecimal({ value: source.initialDecimal });
        }
        else if (source['initialInteger']) {
            this.initial = new fhir.FhirInteger({ value: source.initialInteger });
        }
        else if (source['initialDate']) {
            this.initial = new fhir.FhirDate({ value: source.initialDate });
        }
        else if (source['initialDateTime']) {
            this.initial = new fhir.FhirDateTime({ value: source.initialDateTime });
        }
        else if (source['initialTime']) {
            this.initial = new fhir.FhirTime({ value: source.initialTime });
        }
        else if (source['initialString']) {
            this.initial = new fhir.FhirString({ value: source.initialString });
        }
        else if (source['initialUri']) {
            this.initial = new fhir.FhirUri({ value: source.initialUri });
        }
        else if (source['initialAttachment']) {
            this.initial = new fhir.Attachment(source.initialAttachment);
        }
        else if (source['initialCoding']) {
            this.initial = new fhir.Coding(source.initialCoding);
        }
        else if (source['initialQuantity']) {
            this.initial = new fhir.Quantity(source.initialQuantity);
        }
        else if (source['initialReference']) {
            this.initial = new fhir.Reference(source.initialReference);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.item';
        }
        iss.push(...this.vRS('linkId', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOS('prefix', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vRSV('type', exp, 'ItemType', ItemTypeVsValidation, 'r'));
        iss.push(...this.vOA('enableWhen', exp));
        iss.push(...this.vOS('required', exp));
        iss.push(...this.vOS('repeats', exp));
        iss.push(...this.vOS('readOnly', exp));
        iss.push(...this.vOS('maxLength', exp));
        iss.push(...this.vOS('options', exp));
        iss.push(...this.vOA('option', exp));
        iss.push(...this.vOS('initial', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItem._fts_dataType = 'QuestionnaireItem';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.initial[x]
 */
QuestionnaireItem._fts_initialIsChoice = true;
/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
export class Questionnaire extends fhir.DomainResource {
    /**
     * Default constructor for Questionnaire - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Questionnaire';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['subjectType']) {
            this.subjectType = source.subjectType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.subjectType = [];
        }
        if (source['_subjectType']) {
            source._subjectType.forEach((x, i) => {
                if (this.subjectType.length >= i) {
                    if (x) {
                        this.subjectType[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.subjectType.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('approvalDate', exp));
        iss.push(...this.vOS('lastReviewDate', exp));
        iss.push(...this.vOS('effectivePeriod', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOAV('subjectType', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Questionnaire._fts_dataType = 'Questionnaire';
//# sourceMappingURL=data:application/json;base64,