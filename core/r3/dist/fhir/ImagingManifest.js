// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingManifest
import * as fhir from '../fhir.js';
/**
 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
 */
export class ImagingManifestStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingManifestStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sopClass'] !== undefined) {
            this.sopClass = new fhir.FhirOid({ value: source.sopClass }, options);
        }
        else {
            this.sopClass = null;
        }
        if (source['_sopClass']) {
            if (this.sopClass) {
                this.sopClass.addExtendedProperties(source._sopClass);
            }
            else {
                this.sopClass = new fhir.FhirOid(source._sopClass, options);
            }
        }
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest.study.series.instance';
        }
        iss.push(...this.vRS('sopClass', exp));
        iss.push(...this.vRS('uid', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifestStudySeriesInstance._fts_dataType = 'ImagingManifestStudySeriesInstance';
/**
 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
 */
export class ImagingManifestStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingManifestStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.endpoint = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingManifestStudySeriesInstance(x, options));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest.study.series';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vRA('instance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifestStudySeries._fts_dataType = 'ImagingManifestStudySeries';
/**
 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
 */
export class ImagingManifestStudy extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingManifestStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['imagingStudy']) {
            this.imagingStudy = new fhir.Reference(source.imagingStudy, options);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.endpoint = [];
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingManifestStudySeries(x, options));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest.study';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOS('imagingStudy', exp));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vRA('series', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifestStudy._fts_dataType = 'ImagingManifestStudy';
/**
 * A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection.
 */
export class ImagingManifest extends fhir.DomainResource {
    /**
     * Default constructor for ImagingManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingManifest';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['authoringTime'] !== undefined) {
            this.authoringTime = new fhir.FhirDateTime({ value: source.authoringTime }, options);
        }
        if (source['_authoringTime']) {
            if (this.authoringTime) {
                this.authoringTime.addExtendedProperties(source._authoringTime);
            }
            else {
                this.authoringTime = new fhir.FhirDateTime(source._authoringTime, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.ImagingManifestStudy(x, options));
        }
        else {
            this.study = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('authoringTime', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vRA('study', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifest._fts_dataType = 'ImagingManifest';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2luZ01hbmlmZXN0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9JbWFnaW5nTWFuaWZlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBRWpDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBd0JuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWExRTs7T0FFRztJQUNILFlBQVksU0FBeUQsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDL0csS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FBRTthQUN6RztZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDOUIsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUFFLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLFNBQVUsQ0FBQyxDQUFDO2FBQUU7aUJBQ3pFO2dCQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFzQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQUU7U0FDbkc7UUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtB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Qzs7QUFwRUQ7O0dBRUc7QUFDNkIsNkJBQWEsR0FBVSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogSW1hZ2luZ01hbmlmZXN0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEltYWdpbmdNYW5pZmVzdFN0dWR5U2VyaWVzSW5zdGFuY2UgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNJbnN0YW5jZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFNPUCBjbGFzcyBVSUQgaWRlbnRpZmllcyB0aGUgdHlwZSBvZiB0aGUgc2VsZWN0ZWQgaW5zdGFuY2VzLCBlLmcuIENUIGltYWdlLCBHcmF5IHNjYWxlIHNvZnRjb3B5IHByZXNlbnRhdGlvbiBzdGF0ZSwgRUNHIHdhdmVmb3JtLCBldGMuXHJcbiAgICovXHJcbiAgc29wQ2xhc3M6IGZoaXIuRmhpck9pZHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbWFnaW5nTWFuaWZlc3Quc3R1ZHkuc2VyaWVzLmluc3RhbmNlLnNvcENsYXNzXHJcbiAgICovXHJcbiAgX3NvcENsYXNzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBTT1AgaW5zdGFuY2UgVUlEIGlkZW50aWZpZXMgdGhlIGluc3RhbmNlLlxyXG4gICAqL1xyXG4gIHVpZDogZmhpci5GaGlyT2lkfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltYWdpbmdNYW5pZmVzdC5zdHVkeS5zZXJpZXMuaW5zdGFuY2UudWlkXHJcbiAgICovXHJcbiAgX3VpZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTT1AgSW5zdGFuY2UgY29tcG9uZW50IGlkZW50aWZ5IHRoZSBpbnN0YW5jZSBzZWxlY3RlZCwgYWxvbmcgd2l0aCB0aGUgc3R1ZHkgYW5kIHNlcmllcyBpZGVudGl0aWVzIHRvIGZvcm0gdGhlIERJQ09NIGlkZW50aXR5IGhpZXJhcmNoeS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnaW5nTWFuaWZlc3RTdHVkeVNlcmllc0luc3RhbmNlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNJbnN0YW5jZSc7XHJcbiAgLyoqXHJcbiAgICogU09QIGNsYXNzIFVJRCBpZGVudGlmaWVzIHRoZSB0eXBlIG9mIHRoZSBzZWxlY3RlZCBpbnN0YW5jZXMsIGUuZy4gQ1QgaW1hZ2UsIEdyYXkgc2NhbGUgc29mdGNvcHkgcHJlc2VudGF0aW9uIHN0YXRlLCBFQ0cgd2F2ZWZvcm0sIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgc29wQ2xhc3M6IGZoaXIuRmhpck9pZHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFNPUCBpbnN0YW5jZSBVSUQgaWRlbnRpZmllcyB0aGUgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHVpZDogZmhpci5GaGlyT2lkfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNJbnN0YW5jZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEltYWdpbmdNYW5pZmVzdFN0dWR5U2VyaWVzSW5zdGFuY2VBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnc29wQ2xhc3MnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc29wQ2xhc3MgPSBuZXcgZmhpci5GaGlyT2lkKHt2YWx1ZTogc291cmNlLnNvcENsYXNzfSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNvcENsYXNzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3NvcENsYXNzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc29wQ2xhc3MpIHsgdGhpcy5zb3BDbGFzcy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zb3BDbGFzcyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnNvcENsYXNzID0gbmV3IGZoaXIuRmhpck9pZChzb3VyY2UuX3NvcENsYXNzIGFzIFBhcnRpYWw8Zmhpci5GaGlyT2lkQXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd1aWQnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMudWlkID0gbmV3IGZoaXIuRmhpck9pZCh7dmFsdWU6IHNvdXJjZS51aWR9LCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudWlkID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3VpZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnVpZCkgeyB0aGlzLnVpZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl91aWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy51aWQgPSBuZXcgZmhpci5GaGlyT2lkKHNvdXJjZS5fdWlkIGFzIFBhcnRpYWw8Zmhpci5GaGlyT2lkQXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnSW1hZ2luZ01hbmlmZXN0LnN0dWR5LnNlcmllcy5pbnN0YW5jZScgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3NvcENsYXNzJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCd1aWQnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEltYWdpbmdNYW5pZmVzdFN0dWR5U2VyaWVzIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEltYWdpbmdNYW5pZmVzdFN0dWR5U2VyaWVzQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogU2VyaWVzIGluc3RhbmNlIFVJRCBvZiB0aGUgU09QIGluc3RhbmNlcyBpbiB0aGUgc2VsZWN0aW9uLlxyXG4gICAqL1xyXG4gIHVpZDogZmhpci5GaGlyT2lkfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltYWdpbmdNYW5pZmVzdC5zdHVkeS5zZXJpZXMudWlkXHJcbiAgICovXHJcbiAgX3VpZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5ldHdvcmsgc2VydmljZSBwcm92aWRpbmcgYWNjZXNzIChlLmcuLCBxdWVyeSwgdmlldywgb3IgcmV0cmlldmFsKSBmb3IgdGhpcyBzZXJpZXMuIFNlZSBpbXBsZW1lbnRhdGlvbiBub3RlcyBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdXNpbmcgRElDT00gZW5kcG9pbnRzLiBBIHNlcmllcy1sZXZlbCBlbmRwb2ludCwgaWYgcHJlc2VudCwgaGFzIHByZWNlZGVuY2Ugb3ZlciBhIHN0dWR5LWxldmVsIGVuZHBvaW50IHdpdGggdGhlIHNhbWUgRW5kcG9pbnQudHlwZS5cclxuICAgKi9cclxuICBlbmRwb2ludD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTT1AgSW5zdGFuY2UgY29tcG9uZW50IGlkZW50aWZ5IHRoZSBpbnN0YW5jZSBzZWxlY3RlZCwgYWxvbmcgd2l0aCB0aGUgc3R1ZHkgYW5kIHNlcmllcyBpZGVudGl0aWVzIHRvIGZvcm0gdGhlIERJQ09NIGlkZW50aXR5IGhpZXJhcmNoeS5cclxuICAgKi9cclxuICBpbnN0YW5jZTogZmhpci5JbWFnaW5nTWFuaWZlc3RTdHVkeVNlcmllc0luc3RhbmNlQXJnc1tdfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXJpZXMgY29tcG9uZW50IHJlcHJlc2VudHMgdGhlIHNlcmllcyBsZXZlbCBpZGVudGl0eSBhbmQgbG9jYXRvciBpbmZvcm1hdGlvbiBvZiB0aGUgRElDT00gU09QIGluc3RhbmNlcyBpbiB0aGUgc2VsZWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEltYWdpbmdNYW5pZmVzdFN0dWR5U2VyaWVzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXMnO1xyXG4gIC8qKlxyXG4gICAqIFNlcmllcyBpbnN0YW5jZSBVSUQgb2YgdGhlIFNPUCBpbnN0YW5jZXMgaW4gdGhlIHNlbGVjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgdWlkOiBmaGlyLkZoaXJPaWR8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgbmV0d29yayBzZXJ2aWNlIHByb3ZpZGluZyBhY2Nlc3MgKGUuZy4sIHF1ZXJ5LCB2aWV3LCBvciByZXRyaWV2YWwpIGZvciB0aGlzIHNlcmllcy4gU2VlIGltcGxlbWVudGF0aW9uIG5vdGVzIGZvciBpbmZvcm1hdGlvbiBhYm91dCB1c2luZyBESUNPTSBlbmRwb2ludHMuIEEgc2VyaWVzLWxldmVsIGVuZHBvaW50LCBpZiBwcmVzZW50LCBoYXMgcHJlY2VkZW5jZSBvdmVyIGEgc3R1ZHktbGV2ZWwgZW5kcG9pbnQgd2l0aCB0aGUgc2FtZSBFbmRwb2ludC50eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmRwb2ludDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBTT1AgSW5zdGFuY2UgY29tcG9uZW50IGlkZW50aWZ5IHRoZSBpbnN0YW5jZSBzZWxlY3RlZCwgYWxvbmcgd2l0aCB0aGUgc3R1ZHkgYW5kIHNlcmllcyBpZGVudGl0aWVzIHRvIGZvcm0gdGhlIERJQ09NIGlkZW50aXR5IGhpZXJhcmNoeS5cclxuICAgKi9cclxuICBwdWJsaWMgaW5zdGFuY2U6IGZoaXIuSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNJbnN0YW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEltYWdpbmdNYW5pZmVzdFN0dWR5U2VyaWVzIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8SW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndWlkJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnVpZCA9IG5ldyBmaGlyLkZoaXJPaWQoe3ZhbHVlOiBzb3VyY2UudWlkfSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVpZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ191aWQnXSkge1xyXG4gICAgICBpZiAodGhpcy51aWQpIHsgdGhpcy51aWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdWlkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudWlkID0gbmV3IGZoaXIuRmhpck9pZChzb3VyY2UuX3VpZCBhcyBQYXJ0aWFsPGZoaXIuRmhpck9pZEFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZW5kcG9pbnQnXSkgeyB0aGlzLmVuZHBvaW50ID0gc291cmNlLmVuZHBvaW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZW5kcG9pbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW5zdGFuY2UnXSkgeyB0aGlzLmluc3RhbmNlID0gc291cmNlLmluc3RhbmNlLm1hcCgoeCkgPT4gbmV3IGZoaXIuSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNJbnN0YW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmluc3RhbmNlID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdJbWFnaW5nTWFuaWZlc3Quc3R1ZHkuc2VyaWVzJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygndWlkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdlbmRwb2ludCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSQSgnaW5zdGFuY2UnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEltYWdpbmdNYW5pZmVzdFN0dWR5IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEltYWdpbmdNYW5pZmVzdFN0dWR5QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogU3R1ZHkgaW5zdGFuY2UgVUlEIG9mIHRoZSBTT1AgaW5zdGFuY2VzIGluIHRoZSBzZWxlY3Rpb24uXHJcbiAgICovXHJcbiAgdWlkOiBmaGlyLkZoaXJPaWR8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogSW1hZ2luZ01hbmlmZXN0LnN0dWR5LnVpZFxyXG4gICAqL1xyXG4gIF91aWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZSB0byB0aGUgSW1hZ2luZyBTdHVkeSBpbiBGSElSIGZvcm0uXHJcbiAgICovXHJcbiAgaW1hZ2luZ1N0dWR5PzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbmV0d29yayBzZXJ2aWNlIHByb3ZpZGluZyBhY2Nlc3MgKGUuZy4sIHF1ZXJ5LCB2aWV3LCBvciByZXRyaWV2YWwpIGZvciB0aGUgc3R1ZHkuIFNlZSBpbXBsZW1lbnRhdGlvbiBub3RlcyBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdXNpbmcgRElDT00gZW5kcG9pbnRzLiBBIHN0dWR5LWxldmVsIGVuZHBvaW50IGFwcGxpZXMgdG8gZWFjaCBzZXJpZXMgaW4gdGhlIHN0dWR5LCB1bmxlc3Mgb3ZlcnJpZGRlbiBieSBhIHNlcmllcy1sZXZlbCBlbmRwb2ludCB3aXRoIHRoZSBzYW1lIEVuZHBvaW50LnR5cGUuXHJcbiAgICovXHJcbiAgZW5kcG9pbnQ/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VyaWVzIGNvbXBvbmVudCByZXByZXNlbnRzIHRoZSBzZXJpZXMgbGV2ZWwgaWRlbnRpdHkgYW5kIGxvY2F0b3IgaW5mb3JtYXRpb24gb2YgdGhlIERJQ09NIFNPUCBpbnN0YW5jZXMgaW4gdGhlIHNlbGVjdGlvbi5cclxuICAgKi9cclxuICBzZXJpZXM6IGZoaXIuSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNBcmdzW118bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0dWR5IGNvbXBvbmVudCByZXByZXNlbnRzIHRoZSBzdHVkeSBsZXZlbCBpZGVudGl0eSBhbmQgbG9jYXRvciBpbmZvcm1hdGlvbiBvZiB0aGUgRElDT00gU09QIGluc3RhbmNlcyBpbiB0aGUgc2VsZWN0aW9uLiBJdCBpcyB0aGUgdG9wIGxldmVsIGlkZW50aXR5IG9mIHRoZSBoaWVyYXJjaGljYWwgaWRlbnRpZmljYXRpb24gb2YgdGhlIGluc3RhbmNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnaW5nTWFuaWZlc3RTdHVkeSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0ltYWdpbmdNYW5pZmVzdFN0dWR5JztcclxuICAvKipcclxuICAgKiBTdHVkeSBpbnN0YW5jZSBVSUQgb2YgdGhlIFNPUCBpbnN0YW5jZXMgaW4gdGhlIHNlbGVjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgdWlkOiBmaGlyLkZoaXJPaWR8bnVsbDtcclxuICAvKipcclxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIEltYWdpbmcgU3R1ZHkgaW4gRkhJUiBmb3JtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbWFnaW5nU3R1ZHk/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5ldHdvcmsgc2VydmljZSBwcm92aWRpbmcgYWNjZXNzIChlLmcuLCBxdWVyeSwgdmlldywgb3IgcmV0cmlldmFsKSBmb3IgdGhlIHN0dWR5LiBTZWUgaW1wbGVtZW50YXRpb24gbm90ZXMgZm9yIGluZm9ybWF0aW9uIGFib3V0IHVzaW5nIERJQ09NIGVuZHBvaW50cy4gQSBzdHVkeS1sZXZlbCBlbmRwb2ludCBhcHBsaWVzIHRvIGVhY2ggc2VyaWVzIGluIHRoZSBzdHVkeSwgdW5sZXNzIG92ZXJyaWRkZW4gYnkgYSBzZXJpZXMtbGV2ZWwgZW5kcG9pbnQgd2l0aCB0aGUgc2FtZSBFbmRwb2ludC50eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmRwb2ludDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBTZXJpZXMgY29tcG9uZW50IHJlcHJlc2VudHMgdGhlIHNlcmllcyBsZXZlbCBpZGVudGl0eSBhbmQgbG9jYXRvciBpbmZvcm1hdGlvbiBvZiB0aGUgRElDT00gU09QIGluc3RhbmNlcyBpbiB0aGUgc2VsZWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXJpZXM6IGZoaXIuSW1hZ2luZ01hbmlmZXN0U3R1ZHlTZXJpZXNbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBJbWFnaW5nTWFuaWZlc3RTdHVkeSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEltYWdpbmdNYW5pZmVzdFN0dWR5QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3VpZCddICE9PSB1bmRlZmluZWQpIHsgdGhpcy51aWQgPSBuZXcgZmhpci5GaGlyT2lkKHt2YWx1ZTogc291cmNlLnVpZH0sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy51aWQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfdWlkJ10pIHtcclxuICAgICAgaWYgKHRoaXMudWlkKSB7IHRoaXMudWlkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3VpZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnVpZCA9IG5ldyBmaGlyLkZoaXJPaWQoc291cmNlLl91aWQgYXMgUGFydGlhbDxmaGlyLkZoaXJPaWRBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2ltYWdpbmdTdHVkeSddKSB7IHRoaXMuaW1hZ2luZ1N0dWR5ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5pbWFnaW5nU3R1ZHksIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydlbmRwb2ludCddKSB7IHRoaXMuZW5kcG9pbnQgPSBzb3VyY2UuZW5kcG9pbnQubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5lbmRwb2ludCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzZXJpZXMnXSkgeyB0aGlzLnNlcmllcyA9IHNvdXJjZS5zZXJpZXMubWFwKCh4KSA9PiBuZXcgZmhpci5JbWFnaW5nTWFuaWZlc3RTdHVkeVNlcmllcyh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNlcmllcyA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnSW1hZ2luZ01hbmlmZXN0LnN0dWR5JyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygndWlkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdpbWFnaW5nU3R1ZHknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2VuZHBvaW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJBKCdzZXJpZXMnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEltYWdpbmdNYW5pZmVzdCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbWFnaW5nTWFuaWZlc3RBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJJbWFnaW5nTWFuaWZlc3RcInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIERJQ09NIEtleSBPYmplY3QgU2VsZWN0aW9uIChLT1MpIHRoYXQgdGhpcyByZXNvdXJjZSByZXByZXNlbnRzLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTT1AgaW5zdGFuY2VzIHNlbGVjdGVkIGluIHRoZSBJbWFnaW5nTWFuaWZlc3QgY2FuIGJlIGZyb20gZGlmZmVyZW50IHN0dWRpZXMsIGJ1dCBtdXN0IGJlIG9mIHRoZSBzYW1lIHBhdGllbnQuXHJcbiAgICovXHJcbiAgcGF0aWVudDogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBzZWxlY3Rpb24gb2YgdGhlIHJlZmVyZW5jZWQgaW5zdGFuY2VzIHdlcmUgbWFkZS4gSXQgaXMgKHR5cGljYWxseSkgZGlmZmVyZW50IGZyb20gdGhlIGNyZWF0aW9uIGRhdGUgb2YgdGhlIHNlbGVjdGlvbiByZXNvdXJjZSwgYW5kIGZyb20gZGF0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWZlcmVuY2VkIGluc3RhbmNlcyAoZS5nLiBjYXB0dXJlIHRpbWUgb2YgdGhlIHJlZmVyZW5jZWQgaW1hZ2UpLlxyXG4gICAqL1xyXG4gIGF1dGhvcmluZ1RpbWU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbWFnaW5nTWFuaWZlc3QuYXV0aG9yaW5nVGltZVxyXG4gICAqL1xyXG4gIF9hdXRob3JpbmdUaW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBdXRob3Igb2YgSW1hZ2luZ01hbmlmZXN0LiBJdCBjYW4gYmUgYSBodW1hbiBhdXRob3Igb3IgYSBkZXZpY2Ugd2hpY2ggbWFkZSB0aGUgZGVjaXNpb24gb2YgdGhlIFNPUCBpbnN0YW5jZXMgc2VsZWN0ZWQuIEZvciBleGFtcGxlLCBhIHJhZGlvbG9naXN0IHNlbGVjdGVkIGEgc2V0IG9mIGltYWdpbmcgU09QIGluc3RhbmNlcyB0byBhdHRhY2ggaW4gYSBkaWFnbm9zdGljIHJlcG9ydCwgYW5kIGEgQ0FEIGFwcGxpY2F0aW9uIG1heSBhdXRob3IgYSBzZWxlY3Rpb24gdG8gZGVzY3JpYmUgU09QIGluc3RhbmNlcyBpdCB1c2VkIHRvIGdlbmVyYXRlIGEgZGV0ZWN0aW9uIGNvbmNsdXNpb24uXHJcbiAgICovXHJcbiAgYXV0aG9yPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGcmVlIHRleHQgbmFycmF0aXZlIGRlc2NyaXB0aW9uIG9mIHRoZSBJbWFnaW5nTWFuaWZlc3QuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogSW1hZ2luZ01hbmlmZXN0LmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBTdHVkeSBjb21wb25lbnQgcmVwcmVzZW50cyB0aGUgc3R1ZHkgbGV2ZWwgaWRlbnRpdHkgYW5kIGxvY2F0b3IgaW5mb3JtYXRpb24gb2YgdGhlIERJQ09NIFNPUCBpbnN0YW5jZXMgaW4gdGhlIHNlbGVjdGlvbi4gSXQgaXMgdGhlIHRvcCBsZXZlbCBpZGVudGl0eSBvZiB0aGUgaGllcmFyY2hpY2FsIGlkZW50aWZpY2F0aW9uIG9mIHRoZSBpbnN0YW5jZXMuXHJcbiAgICovXHJcbiAgc3R1ZHk6IGZoaXIuSW1hZ2luZ01hbmlmZXN0U3R1ZHlBcmdzW118bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgRElDT00gU09QIGluc3RhbmNlcyBzZWxlY3RlZCBpbiB0aGUgSW1hZ2luZ01hbmlmZXN0OyBvciB0aGUgcmVhc29uIGZvciwgb3Igc2lnbmlmaWNhbmNlIG9mLCB0aGUgc2VsZWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEltYWdpbmdNYW5pZmVzdCBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnSW1hZ2luZ01hbmlmZXN0JztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIkltYWdpbmdNYW5pZmVzdFwiO1xyXG4gIC8qKlxyXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBESUNPTSBLZXkgT2JqZWN0IFNlbGVjdGlvbiAoS09TKSB0aGF0IHRoaXMgcmVzb3VyY2UgcmVwcmVzZW50cy5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU09QIGluc3RhbmNlcyBzZWxlY3RlZCBpbiB0aGUgSW1hZ2luZ01hbmlmZXN0IGNhbiBiZSBmcm9tIGRpZmZlcmVudCBzdHVkaWVzLCBidXQgbXVzdCBiZSBvZiB0aGUgc2FtZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXRpZW50OiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgYW5kIHRpbWUgd2hlbiB0aGUgc2VsZWN0aW9uIG9mIHRoZSByZWZlcmVuY2VkIGluc3RhbmNlcyB3ZXJlIG1hZGUuIEl0IGlzICh0eXBpY2FsbHkpIGRpZmZlcmVudCBmcm9tIHRoZSBjcmVhdGlvbiBkYXRlIG9mIHRoZSBzZWxlY3Rpb24gcmVzb3VyY2UsIGFuZCBmcm9tIGRhdGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVmZXJlbmNlZCBpbnN0YW5jZXMgKGUuZy4gY2FwdHVyZSB0aW1lIG9mIHRoZSByZWZlcmVuY2VkIGltYWdlKS5cclxuICAgKi9cclxuICBwdWJsaWMgYXV0aG9yaW5nVGltZT86IGZoaXIuRmhpckRhdGVUaW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBdXRob3Igb2YgSW1hZ2luZ01hbmlmZXN0LiBJdCBjYW4gYmUgYSBodW1hbiBhdXRob3Igb3IgYSBkZXZpY2Ugd2hpY2ggbWFkZSB0aGUgZGVjaXNpb24gb2YgdGhlIFNPUCBpbnN0YW5jZXMgc2VsZWN0ZWQuIEZvciBleGFtcGxlLCBhIHJhZGlvbG9naXN0IHNlbGVjdGVkIGEgc2V0IG9mIGltYWdpbmcgU09QIGluc3RhbmNlcyB0byBhdHRhY2ggaW4gYSBkaWFnbm9zdGljIHJlcG9ydCwgYW5kIGEgQ0FEIGFwcGxpY2F0aW9uIG1heSBhdXRob3IgYSBzZWxlY3Rpb24gdG8gZGVzY3JpYmUgU09QIGluc3RhbmNlcyBpdCB1c2VkIHRvIGdlbmVyYXRlIGEgZGV0ZWN0aW9uIGNvbmNsdXNpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGF1dGhvcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGcmVlIHRleHQgbmFycmF0aXZlIGRlc2NyaXB0aW9uIG9mIHRoZSBJbWFnaW5nTWFuaWZlc3QuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdHVkeSBjb21wb25lbnQgcmVwcmVzZW50cyB0aGUgc3R1ZHkgbGV2ZWwgaWRlbnRpdHkgYW5kIGxvY2F0b3IgaW5mb3JtYXRpb24gb2YgdGhlIERJQ09NIFNPUCBpbnN0YW5jZXMgaW4gdGhlIHNlbGVjdGlvbi4gSXQgaXMgdGhlIHRvcCBsZXZlbCBpZGVudGl0eSBvZiB0aGUgaGllcmFyY2hpY2FsIGlkZW50aWZpY2F0aW9uIG9mIHRoZSBpbnN0YW5jZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHN0dWR5OiBmaGlyLkltYWdpbmdNYW5pZmVzdFN0dWR5W107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgSW1hZ2luZ01hbmlmZXN0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8SW1hZ2luZ01hbmlmZXN0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ0ltYWdpbmdNYW5pZmVzdCc7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuaWRlbnRpZmllciwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhdGllbnQnXSkgeyB0aGlzLnBhdGllbnQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnBhdGllbnQsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXRpZW50ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYXV0aG9yaW5nVGltZSddICE9PSB1bmRlZmluZWQpIHsgdGhpcy5hdXRob3JpbmdUaW1lID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLmF1dGhvcmluZ1RpbWV9LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2F1dGhvcmluZ1RpbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5hdXRob3JpbmdUaW1lKSB7IHRoaXMuYXV0aG9yaW5nVGltZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9hdXRob3JpbmdUaW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuYXV0aG9yaW5nVGltZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX2F1dGhvcmluZ1RpbWUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYXV0aG9yJ10pIHsgdGhpcy5hdXRob3IgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmF1dGhvciwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fZGVzY3JpcHRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3N0dWR5J10pIHsgdGhpcy5zdHVkeSA9IHNvdXJjZS5zdHVkeS5tYXAoKHgpID0+IG5ldyBmaGlyLkltYWdpbmdNYW5pZmVzdFN0dWR5KHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3R1ZHkgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0ltYWdpbmdNYW5pZmVzdCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2lkZW50aWZpZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3BhdGllbnQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2F1dGhvcmluZ1RpbWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2F1dGhvcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZGVzY3JpcHRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UkEoJ3N0dWR5JyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbiJdfQ==