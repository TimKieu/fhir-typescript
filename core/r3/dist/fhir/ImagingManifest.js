// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingManifest
import * as fhir from '../fhir.js';
/**
 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
 */
export class ImagingManifestStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingManifestStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sopClass']) {
            this.sopClass = new fhir.FhirOid({ value: source.sopClass });
        }
        else {
            this.sopClass = null;
        }
        if (source['_sopClass']) {
            if (this.sopClass) {
                this.sopClass.addExtendedProperties(source._sopClass);
            }
            else {
                this.sopClass = new fhir.FhirOid(source._sopClass);
            }
        }
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest.study.series.instance';
        }
        iss.push(...this.vRS('sopClass', exp));
        iss.push(...this.vRS('uid', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifestStudySeriesInstance._fts_dataType = 'ImagingManifestStudySeriesInstance';
/**
 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
 */
export class ImagingManifestStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingManifestStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingManifestStudySeriesInstance(x));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest.study.series';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vRA('instance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifestStudySeries._fts_dataType = 'ImagingManifestStudySeries';
/**
 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
 */
export class ImagingManifestStudy extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingManifestStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
        if (source['imagingStudy']) {
            this.imagingStudy = new fhir.Reference(source.imagingStudy);
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingManifestStudySeries(x));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest.study';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOS('imagingStudy', exp));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vRA('series', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifestStudy._fts_dataType = 'ImagingManifestStudy';
/**
 * A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection.
 */
export class ImagingManifest extends fhir.DomainResource {
    /**
     * Default constructor for ImagingManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingManifest';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['authoringTime']) {
            this.authoringTime = new fhir.FhirDateTime({ value: source.authoringTime });
        }
        if (source['_authoringTime']) {
            if (this.authoringTime) {
                this.authoringTime.addExtendedProperties(source._authoringTime);
            }
            else {
                this.authoringTime = new fhir.FhirDateTime(source._authoringTime);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.ImagingManifestStudy(x));
        }
        else {
            this.study = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingManifest';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('authoringTime', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vRA('study', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingManifest._fts_dataType = 'ImagingManifest';
//# sourceMappingURL=data:application/json;base64,