// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageHeader
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResponseVsValidation } from '../fhirValueSets/ResponseVsValidation.js';
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export class MessageHeaderDestination extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target, options);
        }
        if (source['endpoint'] !== undefined) {
            this.endpoint = new fhir.FhirUri({ value: source.endpoint }, options);
        }
        else {
            this.endpoint = null;
        }
        if (source['_endpoint']) {
            if (this.endpoint) {
                this.endpoint.addExtendedProperties(source._endpoint);
            }
            else {
                this.endpoint = new fhir.FhirUri(source._endpoint, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader.destination';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vRS('endpoint', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderDestination._fts_dataType = 'MessageHeaderDestination';
/**
 * The source application from which this message originated.
 */
export class MessageHeaderSource extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['software'] !== undefined) {
            this.software = new fhir.FhirString({ value: source.software }, options);
        }
        if (source['_software']) {
            if (this.software) {
                this.software.addExtendedProperties(source._software);
            }
            else {
                this.software = new fhir.FhirString(source._software, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['contact']) {
            this.contact = new fhir.ContactPoint(source.contact, options);
        }
        if (source['endpoint'] !== undefined) {
            this.endpoint = new fhir.FhirUri({ value: source.endpoint }, options);
        }
        else {
            this.endpoint = null;
        }
        if (source['_endpoint']) {
            if (this.endpoint) {
                this.endpoint.addExtendedProperties(source._endpoint);
            }
            else {
                this.endpoint = new fhir.FhirUri(source._endpoint, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader.source';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('software', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('contact', exp));
        iss.push(...this.vRS('endpoint', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderSource._fts_dataType = 'MessageHeaderSource';
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export class MessageHeaderResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier'] !== undefined) {
            this.identifier = new fhir.FhirId({ value: source.identifier }, options);
        }
        else {
            this.identifier = null;
        }
        if (source['_identifier']) {
            if (this.identifier) {
                this.identifier.addExtendedProperties(source._identifier);
            }
            else {
                this.identifier = new fhir.FhirId(source._identifier, options);
            }
        }
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['details']) {
            this.details = new fhir.Reference(source.details, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader.response';
        }
        iss.push(...this.vRS('identifier', exp));
        iss.push(...this.vRSV('code', exp, 'Response', ResponseVsValidation, 'r'));
        iss.push(...this.vOS('details', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderResponse._fts_dataType = 'MessageHeaderResponse';
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export class MessageHeader extends fhir.DomainResource {
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MessageHeader';
        if (source['event']) {
            this.event = new fhir.Coding(source.event, options);
        }
        else {
            this.event = null;
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.MessageHeaderDestination(x, options));
        }
        else {
            this.destination = [];
        }
        if (source['receiver']) {
            this.receiver = new fhir.Reference(source.receiver, options);
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender, options);
        }
        if (source['timestamp'] !== undefined) {
            this.timestamp = new fhir.FhirInstant({ value: source.timestamp }, options);
        }
        else {
            this.timestamp = null;
        }
        if (source['_timestamp']) {
            if (this.timestamp) {
                this.timestamp.addExtendedProperties(source._timestamp);
            }
            else {
                this.timestamp = new fhir.FhirInstant(source._timestamp, options);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer, options);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['source']) {
            this.source = new fhir.MessageHeaderSource(source.source, options);
        }
        else {
            this.source = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible, options);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason, options);
        }
        if (source['response']) {
            this.response = new fhir.MessageHeaderResponse(source.response, options);
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.focus = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader';
        }
        iss.push(...this.vRS('event', exp));
        iss.push(...this.vOA('destination', exp));
        iss.push(...this.vOS('receiver', exp));
        iss.push(...this.vOS('sender', exp));
        iss.push(...this.vRS('timestamp', exp));
        iss.push(...this.vOS('enterer', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vRS('source', exp));
        iss.push(...this.vOS('responsible', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOS('response', exp));
        iss.push(...this.vOA('focus', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeader._fts_dataType = 'MessageHeader';
//# sourceMappingURL=data:application/json;base64,