// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationOutcome
import * as fhir from '../fhir.js';
// @ts-ignore
import { IssueSeverityVsValidation } from '../fhirValueSets/IssueSeverityVsValidation.js';
// @ts-ignore
import { IssueTypeVsValidation } from '../fhirValueSets/IssueTypeVsValidation.js';
/**
 * An error, warning or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['severity'] !== undefined) {
            this.severity = new fhir.FhirCode({ value: source.severity }, options);
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity, options);
            }
        }
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['details']) {
            this.details = new fhir.CodeableConcept(source.details, options);
        }
        if (source['diagnostics'] !== undefined) {
            this.diagnostics = new fhir.FhirString({ value: source.diagnostics }, options);
        }
        if (source['_diagnostics']) {
            if (this.diagnostics) {
                this.diagnostics.addExtendedProperties(source._diagnostics);
            }
            else {
                this.diagnostics = new fhir.FhirString(source._diagnostics, options);
            }
        }
        if (source['location'] !== undefined) {
            this.location = source.location.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.location = [];
        }
        if (source['_location']) {
            source._location.forEach((x, i) => {
                if (this.location.length >= i) {
                    if (x) {
                        this.location[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.location.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['expression'] !== undefined) {
            this.expression = source.expression.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.expression = [];
        }
        if (source['_expression']) {
            source._expression.forEach((x, i) => {
                if (this.expression.length >= i) {
                    if (x) {
                        this.expression[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.expression.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationOutcome.issue';
        }
        iss.push(...this.vRSV('severity', exp, 'IssueSeverity', IssueSeverityVsValidation, 'r'));
        iss.push(...this.vRSV('code', exp, 'IssueType', IssueTypeVsValidation, 'r'));
        iss.push(...this.vOS('details', exp));
        iss.push(...this.vOS('diagnostics', exp));
        iss.push(...this.vOA('location', exp));
        iss.push(...this.vOA('expression', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcomeIssue._fts_dataType = 'OperationOutcomeIssue';
/**
 * A collection of error, warning or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationOutcome';
        if (source['issue']) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x, options));
        }
        else {
            this.issue = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationOutcome';
        }
        iss.push(...this.vRA('issue', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcome._fts_dataType = 'OperationOutcome';
//# sourceMappingURL=data:application/json;base64,