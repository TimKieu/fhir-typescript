// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Sequence
import * as fhir from '../fhir.js';
// @ts-ignore
import { QualityTypeVsValidation } from '../fhirValueSets/QualityTypeVsValidation.js';
// @ts-ignore
import { RepositoryTypeVsValidation } from '../fhirValueSets/RepositoryTypeVsValidation.js';
/**
 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
 */
export class SequenceReferenceSeq extends fhir.BackboneElement {
    /**
     * Default constructor for SequenceReferenceSeq - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['chromosome']) {
            this.chromosome = new fhir.CodeableConcept(source.chromosome, options);
        }
        if (source['genomeBuild'] !== undefined) {
            this.genomeBuild = new fhir.FhirString({ value: source.genomeBuild }, options);
        }
        if (source['_genomeBuild']) {
            if (this.genomeBuild) {
                this.genomeBuild.addExtendedProperties(source._genomeBuild);
            }
            else {
                this.genomeBuild = new fhir.FhirString(source._genomeBuild, options);
            }
        }
        if (source['referenceSeqId']) {
            this.referenceSeqId = new fhir.CodeableConcept(source.referenceSeqId, options);
        }
        if (source['referenceSeqPointer']) {
            this.referenceSeqPointer = new fhir.Reference(source.referenceSeqPointer, options);
        }
        if (source['referenceSeqString'] !== undefined) {
            this.referenceSeqString = new fhir.FhirString({ value: source.referenceSeqString }, options);
        }
        if (source['_referenceSeqString']) {
            if (this.referenceSeqString) {
                this.referenceSeqString.addExtendedProperties(source._referenceSeqString);
            }
            else {
                this.referenceSeqString = new fhir.FhirString(source._referenceSeqString, options);
            }
        }
        if (source['strand'] !== undefined) {
            this.strand = new fhir.FhirInteger({ value: source.strand }, options);
        }
        if (source['_strand']) {
            if (this.strand) {
                this.strand.addExtendedProperties(source._strand);
            }
            else {
                this.strand = new fhir.FhirInteger(source._strand, options);
            }
        }
        if (source['windowStart'] !== undefined) {
            this.windowStart = new fhir.FhirInteger({ value: source.windowStart }, options);
        }
        else {
            this.windowStart = null;
        }
        if (source['_windowStart']) {
            if (this.windowStart) {
                this.windowStart.addExtendedProperties(source._windowStart);
            }
            else {
                this.windowStart = new fhir.FhirInteger(source._windowStart, options);
            }
        }
        if (source['windowEnd'] !== undefined) {
            this.windowEnd = new fhir.FhirInteger({ value: source.windowEnd }, options);
        }
        else {
            this.windowEnd = null;
        }
        if (source['_windowEnd']) {
            if (this.windowEnd) {
                this.windowEnd.addExtendedProperties(source._windowEnd);
            }
            else {
                this.windowEnd = new fhir.FhirInteger(source._windowEnd, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Sequence.referenceSeq';
        }
        iss.push(...this.vOS('chromosome', exp));
        iss.push(...this.vOS('genomeBuild', exp));
        iss.push(...this.vOS('referenceSeqId', exp));
        iss.push(...this.vOS('referenceSeqPointer', exp));
        iss.push(...this.vOS('referenceSeqString', exp));
        iss.push(...this.vOS('strand', exp));
        iss.push(...this.vRS('windowStart', exp));
        iss.push(...this.vRS('windowEnd', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SequenceReferenceSeq._fts_dataType = 'SequenceReferenceSeq';
/**
 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
 */
export class SequenceVariant extends fhir.BackboneElement {
    /**
     * Default constructor for SequenceVariant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start'] !== undefined) {
            this.start = new fhir.FhirInteger({ value: source.start }, options);
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInteger(source._start, options);
            }
        }
        if (source['end'] !== undefined) {
            this.end = new fhir.FhirInteger({ value: source.end }, options);
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInteger(source._end, options);
            }
        }
        if (source['observedAllele'] !== undefined) {
            this.observedAllele = new fhir.FhirString({ value: source.observedAllele }, options);
        }
        if (source['_observedAllele']) {
            if (this.observedAllele) {
                this.observedAllele.addExtendedProperties(source._observedAllele);
            }
            else {
                this.observedAllele = new fhir.FhirString(source._observedAllele, options);
            }
        }
        if (source['referenceAllele'] !== undefined) {
            this.referenceAllele = new fhir.FhirString({ value: source.referenceAllele }, options);
        }
        if (source['_referenceAllele']) {
            if (this.referenceAllele) {
                this.referenceAllele.addExtendedProperties(source._referenceAllele);
            }
            else {
                this.referenceAllele = new fhir.FhirString(source._referenceAllele, options);
            }
        }
        if (source['cigar'] !== undefined) {
            this.cigar = new fhir.FhirString({ value: source.cigar }, options);
        }
        if (source['_cigar']) {
            if (this.cigar) {
                this.cigar.addExtendedProperties(source._cigar);
            }
            else {
                this.cigar = new fhir.FhirString(source._cigar, options);
            }
        }
        if (source['variantPointer']) {
            this.variantPointer = new fhir.Reference(source.variantPointer, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Sequence.variant';
        }
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('observedAllele', exp));
        iss.push(...this.vOS('referenceAllele', exp));
        iss.push(...this.vOS('cigar', exp));
        iss.push(...this.vOS('variantPointer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SequenceVariant._fts_dataType = 'SequenceVariant';
/**
 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
 */
export class SequenceQuality extends fhir.BackboneElement {
    /**
     * Default constructor for SequenceQuality - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['standardSequence']) {
            this.standardSequence = new fhir.CodeableConcept(source.standardSequence, options);
        }
        if (source['start'] !== undefined) {
            this.start = new fhir.FhirInteger({ value: source.start }, options);
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInteger(source._start, options);
            }
        }
        if (source['end'] !== undefined) {
            this.end = new fhir.FhirInteger({ value: source.end }, options);
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInteger(source._end, options);
            }
        }
        if (source['score']) {
            this.score = new fhir.Quantity(source.score, options);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method, options);
        }
        if (source['truthTP'] !== undefined) {
            this.truthTP = new fhir.FhirDecimal({ value: source.truthTP }, options);
        }
        if (source['_truthTP']) {
            if (this.truthTP) {
                this.truthTP.addExtendedProperties(source._truthTP);
            }
            else {
                this.truthTP = new fhir.FhirDecimal(source._truthTP, options);
            }
        }
        if (source['queryTP'] !== undefined) {
            this.queryTP = new fhir.FhirDecimal({ value: source.queryTP }, options);
        }
        if (source['_queryTP']) {
            if (this.queryTP) {
                this.queryTP.addExtendedProperties(source._queryTP);
            }
            else {
                this.queryTP = new fhir.FhirDecimal(source._queryTP, options);
            }
        }
        if (source['truthFN'] !== undefined) {
            this.truthFN = new fhir.FhirDecimal({ value: source.truthFN }, options);
        }
        if (source['_truthFN']) {
            if (this.truthFN) {
                this.truthFN.addExtendedProperties(source._truthFN);
            }
            else {
                this.truthFN = new fhir.FhirDecimal(source._truthFN, options);
            }
        }
        if (source['queryFP'] !== undefined) {
            this.queryFP = new fhir.FhirDecimal({ value: source.queryFP }, options);
        }
        if (source['_queryFP']) {
            if (this.queryFP) {
                this.queryFP.addExtendedProperties(source._queryFP);
            }
            else {
                this.queryFP = new fhir.FhirDecimal(source._queryFP, options);
            }
        }
        if (source['gtFP'] !== undefined) {
            this.gtFP = new fhir.FhirDecimal({ value: source.gtFP }, options);
        }
        if (source['_gtFP']) {
            if (this.gtFP) {
                this.gtFP.addExtendedProperties(source._gtFP);
            }
            else {
                this.gtFP = new fhir.FhirDecimal(source._gtFP, options);
            }
        }
        if (source['precision'] !== undefined) {
            this.precision = new fhir.FhirDecimal({ value: source.precision }, options);
        }
        if (source['_precision']) {
            if (this.precision) {
                this.precision.addExtendedProperties(source._precision);
            }
            else {
                this.precision = new fhir.FhirDecimal(source._precision, options);
            }
        }
        if (source['recall'] !== undefined) {
            this.recall = new fhir.FhirDecimal({ value: source.recall }, options);
        }
        if (source['_recall']) {
            if (this.recall) {
                this.recall.addExtendedProperties(source._recall);
            }
            else {
                this.recall = new fhir.FhirDecimal(source._recall, options);
            }
        }
        if (source['fScore'] !== undefined) {
            this.fScore = new fhir.FhirDecimal({ value: source.fScore }, options);
        }
        if (source['_fScore']) {
            if (this.fScore) {
                this.fScore.addExtendedProperties(source._fScore);
            }
            else {
                this.fScore = new fhir.FhirDecimal(source._fScore, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Sequence.quality';
        }
        iss.push(...this.vRSV('type', exp, 'QualityType', QualityTypeVsValidation, 'r'));
        iss.push(...this.vOS('standardSequence', exp));
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('score', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('truthTP', exp));
        iss.push(...this.vOS('queryTP', exp));
        iss.push(...this.vOS('truthFN', exp));
        iss.push(...this.vOS('queryFP', exp));
        iss.push(...this.vOS('gtFP', exp));
        iss.push(...this.vOS('precision', exp));
        iss.push(...this.vOS('recall', exp));
        iss.push(...this.vOS('fScore', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SequenceQuality._fts_dataType = 'SequenceQuality';
/**
 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
 */
export class SequenceRepository extends fhir.BackboneElement {
    /**
     * Default constructor for SequenceRepository - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['datasetId'] !== undefined) {
            this.datasetId = new fhir.FhirString({ value: source.datasetId }, options);
        }
        if (source['_datasetId']) {
            if (this.datasetId) {
                this.datasetId.addExtendedProperties(source._datasetId);
            }
            else {
                this.datasetId = new fhir.FhirString(source._datasetId, options);
            }
        }
        if (source['variantsetId'] !== undefined) {
            this.variantsetId = new fhir.FhirString({ value: source.variantsetId }, options);
        }
        if (source['_variantsetId']) {
            if (this.variantsetId) {
                this.variantsetId.addExtendedProperties(source._variantsetId);
            }
            else {
                this.variantsetId = new fhir.FhirString(source._variantsetId, options);
            }
        }
        if (source['readsetId'] !== undefined) {
            this.readsetId = new fhir.FhirString({ value: source.readsetId }, options);
        }
        if (source['_readsetId']) {
            if (this.readsetId) {
                this.readsetId.addExtendedProperties(source._readsetId);
            }
            else {
                this.readsetId = new fhir.FhirString(source._readsetId, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Sequence.repository';
        }
        iss.push(...this.vRSV('type', exp, 'RepositoryType', RepositoryTypeVsValidation, 'r'));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('datasetId', exp));
        iss.push(...this.vOS('variantsetId', exp));
        iss.push(...this.vOS('readsetId', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SequenceRepository._fts_dataType = 'SequenceRepository';
/**
 * Raw data describing a biological sequence.
 */
export class Sequence extends fhir.DomainResource {
    /**
     * Default constructor for Sequence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Sequence';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['coordinateSystem'] !== undefined) {
            this.coordinateSystem = new fhir.FhirInteger({ value: source.coordinateSystem }, options);
        }
        else {
            this.coordinateSystem = null;
        }
        if (source['_coordinateSystem']) {
            if (this.coordinateSystem) {
                this.coordinateSystem.addExtendedProperties(source._coordinateSystem);
            }
            else {
                this.coordinateSystem = new fhir.FhirInteger(source._coordinateSystem, options);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        if (source['specimen']) {
            this.specimen = new fhir.Reference(source.specimen, options);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device, options);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['referenceSeq']) {
            this.referenceSeq = new fhir.SequenceReferenceSeq(source.referenceSeq, options);
        }
        if (source['variant']) {
            this.variant = source.variant.map((x) => new fhir.SequenceVariant(x, options));
        }
        else {
            this.variant = [];
        }
        if (source['observedSeq'] !== undefined) {
            this.observedSeq = new fhir.FhirString({ value: source.observedSeq }, options);
        }
        if (source['_observedSeq']) {
            if (this.observedSeq) {
                this.observedSeq.addExtendedProperties(source._observedSeq);
            }
            else {
                this.observedSeq = new fhir.FhirString(source._observedSeq, options);
            }
        }
        if (source['quality']) {
            this.quality = source.quality.map((x) => new fhir.SequenceQuality(x, options));
        }
        else {
            this.quality = [];
        }
        if (source['readCoverage'] !== undefined) {
            this.readCoverage = new fhir.FhirInteger({ value: source.readCoverage }, options);
        }
        if (source['_readCoverage']) {
            if (this.readCoverage) {
                this.readCoverage.addExtendedProperties(source._readCoverage);
            }
            else {
                this.readCoverage = new fhir.FhirInteger(source._readCoverage, options);
            }
        }
        if (source['repository']) {
            this.repository = source.repository.map((x) => new fhir.SequenceRepository(x, options));
        }
        else {
            this.repository = [];
        }
        if (source['pointer']) {
            this.pointer = source.pointer.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.pointer = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Sequence';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vRS('coordinateSystem', exp));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('specimen', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('referenceSeq', exp));
        iss.push(...this.vOA('variant', exp));
        iss.push(...this.vOS('observedSeq', exp));
        iss.push(...this.vOA('quality', exp));
        iss.push(...this.vOS('readCoverage', exp));
        iss.push(...this.vOA('repository', exp));
        iss.push(...this.vOA('pointer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Sequence._fts_dataType = 'Sequence';
//# sourceMappingURL=data:application/json;base64,