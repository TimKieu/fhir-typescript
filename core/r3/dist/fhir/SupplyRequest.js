// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { SupplyrequestStatusVsValidation } from '../fhirValueSets/SupplyrequestStatusVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
/**
 * The item being requested.
 */
export class SupplyRequestOrderedItem extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyRequestOrderedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SupplyRequest.orderedItem';
        }
        iss.push(...this.vRS('quantity', exp));
        iss.push(...this.vOS('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SupplyRequestOrderedItem._fts_dataType = 'SupplyRequestOrderedItem';
/**
 * Internal flag to properly serialize choice-type element SupplyRequest.orderedItem.item[x]
 */
SupplyRequestOrderedItem._fts_itemIsChoice = true;
/**
 * The individual who initiated the request and has responsibility for its activation.
 */
export class SupplyRequestRequester extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyRequestRequester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['agent']) {
            this.agent = new fhir.Reference(source.agent);
        }
        else {
            this.agent = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SupplyRequest.requester';
        }
        iss.push(...this.vRS('agent', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SupplyRequestRequester._fts_dataType = 'SupplyRequestRequester';
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhir.DomainResource {
    /**
     * Default constructor for SupplyRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SupplyRequest';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['orderedItem']) {
            this.orderedItem = new fhir.SupplyRequestOrderedItem(source.orderedItem);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.SupplyRequestRequester(source.requester);
        }
        if (source['supplier']) {
            this.supplier = source.supplier.map((x) => new fhir.Reference(x));
        }
        else {
            this.supplier = [];
        }
        if (source['reason']) {
            this.reason = source.reason;
        }
        else if (source['reasonCodeableConcept']) {
            this.reason = new fhir.CodeableConcept(source.reasonCodeableConcept);
        }
        else if (source['reasonReference']) {
            this.reason = new fhir.Reference(source.reasonReference);
        }
        if (source['deliverFrom']) {
            this.deliverFrom = new fhir.Reference(source.deliverFrom);
        }
        if (source['deliverTo']) {
            this.deliverTo = new fhir.Reference(source.deliverTo);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SupplyRequest';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'SupplyrequestStatus', SupplyrequestStatusVsValidation, 'r'));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r'));
        iss.push(...this.vOS('orderedItem', exp));
        iss.push(...this.vOS('occurrence', exp));
        iss.push(...this.vOS('authoredOn', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOA('supplier', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOS('deliverFrom', exp));
        iss.push(...this.vOS('deliverTo', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SupplyRequest._fts_dataType = 'SupplyRequest';
/**
 * Internal flag to properly serialize choice-type element SupplyRequest.occurrence[x]
 */
SupplyRequest._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SupplyRequest.reason[x]
 */
SupplyRequest._fts_reasonIsChoice = true;
//# sourceMappingURL=data:application/json;base64,