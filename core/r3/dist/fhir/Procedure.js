// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Procedure
import * as fhir from '../fhir.js';
// @ts-ignore
import { EventStatusVsValidation } from '../fhirValueSets/EventStatusVsValidation.js';
/**
 * Limited to 'real' people rather than equipment.
 */
export class ProcedurePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure.performer';
        }
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vRS('actor', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedurePerformer._fts_dataType = 'ProcedurePerformer';
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export class ProcedureFocalDevice extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        if (source['manipulated']) {
            this.manipulated = new fhir.Reference(source.manipulated);
        }
        else {
            this.manipulated = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure.focalDevice';
        }
        iss.push(...this.vOS('action', exp));
        iss.push(...this.vRS('manipulated', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedureFocalDevice._fts_dataType = 'ProcedureFocalDevice';
/**
 * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
 */
export class Procedure extends fhir.DomainResource {
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Procedure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.Reference(x));
        }
        else {
            this.definition = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['notDone']) {
            this.notDone = new fhir.FhirBoolean({ value: source.notDone });
        }
        if (source['_notDone']) {
            if (this.notDone) {
                this.notDone.addExtendedProperties(source._notDone);
            }
            else {
                this.notDone = new fhir.FhirBoolean(source._notDone);
            }
        }
        if (source['notDoneReason']) {
            this.notDoneReason = new fhir.CodeableConcept(source.notDoneReason);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['performed']) {
            this.performed = source.performed;
        }
        else if (source['performedDateTime']) {
            this.performed = new fhir.FhirDateTime({ value: source.performedDateTime });
        }
        else if (source['performedPeriod']) {
            this.performed = new fhir.Period(source.performedPeriod);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ProcedurePerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodySite = [];
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['report']) {
            this.report = source.report.map((x) => new fhir.Reference(x));
        }
        else {
            this.report = [];
        }
        if (source['complication']) {
            this.complication = source.complication.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.complication = [];
        }
        if (source['complicationDetail']) {
            this.complicationDetail = source.complicationDetail.map((x) => new fhir.Reference(x));
        }
        else {
            this.complicationDetail = [];
        }
        if (source['followUp']) {
            this.followUp = source.followUp.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.followUp = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['focalDevice']) {
            this.focalDevice = source.focalDevice.map((x) => new fhir.ProcedureFocalDevice(x));
        }
        else {
            this.focalDevice = [];
        }
        if (source['usedReference']) {
            this.usedReference = source.usedReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.usedReference = [];
        }
        if (source['usedCode']) {
            this.usedCode = source.usedCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.usedCode = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('definition', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'EventStatus', EventStatusVsValidation, 'r'));
        iss.push(...this.vOS('notDone', exp));
        iss.push(...this.vOS('notDoneReason', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('performed', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('bodySite', exp));
        iss.push(...this.vOS('outcome', exp));
        iss.push(...this.vOA('report', exp));
        iss.push(...this.vOA('complication', exp));
        iss.push(...this.vOA('complicationDetail', exp));
        iss.push(...this.vOA('followUp', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('focalDevice', exp));
        iss.push(...this.vOA('usedReference', exp));
        iss.push(...this.vOA('usedCode', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Procedure._fts_dataType = 'Procedure';
/**
 * Internal flag to properly serialize choice-type element Procedure.performed[x]
 */
Procedure._fts_performedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,