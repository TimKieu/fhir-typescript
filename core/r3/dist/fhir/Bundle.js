// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Bundle
import * as fhir from '../fhir.js';
// @ts-ignore
import { SearchEntryModeVsValidation } from '../fhirValueSets/SearchEntryModeVsValidation.js';
// @ts-ignore
import { HttpVerbVsValidation } from '../fhirValueSets/HttpVerbVsValidation.js';
// @ts-ignore
import { BundleTypeVsValidation } from '../fhirValueSets/BundleTypeVsValidation.js';
/**
 * A series of links that provide context to this bundle.
 */
export class BundleLink extends fhir.BackboneElement {
    /**
     * Default constructor for BundleLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relation']) {
            this.relation = new fhir.FhirString({ value: source.relation });
        }
        else {
            this.relation = null;
        }
        if (source['_relation']) {
            if (this.relation) {
                this.relation.addExtendedProperties(source._relation);
            }
            else {
                this.relation = new fhir.FhirString(source._relation);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Bundle.link';
        }
        iss.push(...this.vRS('relation', exp));
        iss.push(...this.vRS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleLink._fts_dataType = 'BundleLink';
/**
 * Information about the search process that lead to the creation of this entry.
 */
export class BundleEntrySearch extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntrySearch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['score']) {
            this.score = new fhir.FhirDecimal({ value: source.score });
        }
        if (source['_score']) {
            if (this.score) {
                this.score.addExtendedProperties(source._score);
            }
            else {
                this.score = new fhir.FhirDecimal(source._score);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Bundle.entry.search';
        }
        iss.push(...this.vOSV('mode', exp, 'SearchEntryMode', SearchEntryModeVsValidation, 'r'));
        iss.push(...this.vOS('score', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntrySearch._fts_dataType = 'BundleEntrySearch';
/**
 * Additional information about how this entry should be processed as part of a transaction.
 */
export class BundleEntryRequest extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['method']) {
            this.method = new fhir.FhirCode({ value: source.method });
        }
        else {
            this.method = null;
        }
        if (source['_method']) {
            if (this.method) {
                this.method.addExtendedProperties(source._method);
            }
            else {
                this.method = new fhir.FhirCode(source._method);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['ifNoneMatch']) {
            this.ifNoneMatch = new fhir.FhirString({ value: source.ifNoneMatch });
        }
        if (source['_ifNoneMatch']) {
            if (this.ifNoneMatch) {
                this.ifNoneMatch.addExtendedProperties(source._ifNoneMatch);
            }
            else {
                this.ifNoneMatch = new fhir.FhirString(source._ifNoneMatch);
            }
        }
        if (source['ifModifiedSince']) {
            this.ifModifiedSince = new fhir.FhirInstant({ value: source.ifModifiedSince });
        }
        if (source['_ifModifiedSince']) {
            if (this.ifModifiedSince) {
                this.ifModifiedSince.addExtendedProperties(source._ifModifiedSince);
            }
            else {
                this.ifModifiedSince = new fhir.FhirInstant(source._ifModifiedSince);
            }
        }
        if (source['ifMatch']) {
            this.ifMatch = new fhir.FhirString({ value: source.ifMatch });
        }
        if (source['_ifMatch']) {
            if (this.ifMatch) {
                this.ifMatch.addExtendedProperties(source._ifMatch);
            }
            else {
                this.ifMatch = new fhir.FhirString(source._ifMatch);
            }
        }
        if (source['ifNoneExist']) {
            this.ifNoneExist = new fhir.FhirString({ value: source.ifNoneExist });
        }
        if (source['_ifNoneExist']) {
            if (this.ifNoneExist) {
                this.ifNoneExist.addExtendedProperties(source._ifNoneExist);
            }
            else {
                this.ifNoneExist = new fhir.FhirString(source._ifNoneExist);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Bundle.entry.request';
        }
        iss.push(...this.vRSV('method', exp, 'HttpVerb', HttpVerbVsValidation, 'r'));
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOS('ifNoneMatch', exp));
        iss.push(...this.vOS('ifModifiedSince', exp));
        iss.push(...this.vOS('ifMatch', exp));
        iss.push(...this.vOS('ifNoneExist', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntryRequest._fts_dataType = 'BundleEntryRequest';
/**
 * Additional information about how this entry should be processed as part of a transaction.
 */
export class BundleEntryResponse extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirString({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirString(source._status);
            }
        }
        if (source['location']) {
            this.location = new fhir.FhirUri({ value: source.location });
        }
        if (source['_location']) {
            if (this.location) {
                this.location.addExtendedProperties(source._location);
            }
            else {
                this.location = new fhir.FhirUri(source._location);
            }
        }
        if (source['etag']) {
            this.etag = new fhir.FhirString({ value: source.etag });
        }
        if (source['_etag']) {
            if (this.etag) {
                this.etag.addExtendedProperties(source._etag);
            }
            else {
                this.etag = new fhir.FhirString(source._etag);
            }
        }
        if (source['lastModified']) {
            this.lastModified = new fhir.FhirInstant({ value: source.lastModified });
        }
        if (source['_lastModified']) {
            if (this.lastModified) {
                this.lastModified.addExtendedProperties(source._lastModified);
            }
            else {
                this.lastModified = new fhir.FhirInstant(source._lastModified);
            }
        }
        if (source['outcome']) {
            this.outcome = (fhir.resourceFactory(source.outcome) ?? undefined);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Bundle.entry.response';
        }
        iss.push(...this.vRS('status', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('etag', exp));
        iss.push(...this.vOS('lastModified', exp));
        iss.push(...this.vOS('outcome', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntryResponse._fts_dataType = 'BundleEntryResponse';
/**
 * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
 */
export class BundleEntry extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        else {
            this.link = [];
        }
        if (source['fullUrl']) {
            this.fullUrl = new fhir.FhirUri({ value: source.fullUrl });
        }
        if (source['_fullUrl']) {
            if (this.fullUrl) {
                this.fullUrl.addExtendedProperties(source._fullUrl);
            }
            else {
                this.fullUrl = new fhir.FhirUri(source._fullUrl);
            }
        }
        if (source['resource']) {
            this.resource = (fhir.resourceFactory(source.resource) ?? undefined);
        }
        if (source['search']) {
            this.search = new fhir.BundleEntrySearch(source.search);
        }
        if (source['request']) {
            this.request = new fhir.BundleEntryRequest(source.request);
        }
        if (source['response']) {
            this.response = new fhir.BundleEntryResponse(source.response);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Bundle.entry';
        }
        iss.push(...this.vOA('link', exp));
        iss.push(...this.vOS('fullUrl', exp));
        iss.push(...this.vOS('resource', exp));
        iss.push(...this.vOS('search', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOS('response', exp));
        return iss;
    }
    /**
     * Access a bundle.entry[].resource as a typed resource
     */
    resourceAs() {
        return this.resource;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntry._fts_dataType = 'BundleEntry';
/**
 * A container for a collection of resources.
 */
export class Bundle extends fhir.Resource {
    /**
     * Default constructor for Bundle - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Bundle';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['total']) {
            this.total = new fhir.FhirUnsignedInt({ value: source.total });
        }
        if (source['_total']) {
            if (this.total) {
                this.total.addExtendedProperties(source._total);
            }
            else {
                this.total = new fhir.FhirUnsignedInt(source._total);
            }
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        else {
            this.link = [];
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.BundleEntry(x));
        }
        else {
            this.entry = [];
        }
        if (source['signature']) {
            this.signature = new fhir.Signature(source.signature);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Bundle';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRSV('type', exp, 'BundleType', BundleTypeVsValidation, 'r'));
        iss.push(...this.vOS('total', exp));
        iss.push(...this.vOA('link', exp));
        iss.push(...this.vOA('entry', exp));
        iss.push(...this.vOS('signature', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Bundle._fts_dataType = 'Bundle';
//# sourceMappingURL=data:application/json;base64,