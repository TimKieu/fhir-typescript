// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationDispenseStatusVsValidation } from '../fhirValueSets/MedicationDispenseStatusVsValidation.js';
/**
 * The performer will be reviewed as part of STU4.
 */
export class MedicationDispensePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispensePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        else {
            this.actor = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense.performer';
        }
        iss.push(...this.vRS('actor', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispensePerformer._fts_dataType = 'MedicationDispensePerformer';
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['wasSubstituted'] !== undefined) {
            this.wasSubstituted = new fhir.FhirBoolean({ value: source.wasSubstituted }, options);
        }
        else {
            this.wasSubstituted = null;
        }
        if (source['_wasSubstituted']) {
            if (this.wasSubstituted) {
                this.wasSubstituted.addExtendedProperties(source._wasSubstituted);
            }
            else {
                this.wasSubstituted = new fhir.FhirBoolean(source._wasSubstituted, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['responsibleParty']) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.responsibleParty = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense.substitution';
        }
        iss.push(...this.vRS('wasSubstituted', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('responsibleParty', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispenseSubstitution._fts_dataType = 'MedicationDispenseSubstitution';
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
    /**
     * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationDispense';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept, options);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference, options);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationDispensePerformer(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['authorizingPrescription']) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.authorizingPrescription = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['daysSupply']) {
            this.daysSupply = new fhir.Quantity(source.daysSupply, options);
        }
        if (source['whenPrepared'] !== undefined) {
            this.whenPrepared = new fhir.FhirDateTime({ value: source.whenPrepared }, options);
        }
        if (source['_whenPrepared']) {
            if (this.whenPrepared) {
                this.whenPrepared.addExtendedProperties(source._whenPrepared);
            }
            else {
                this.whenPrepared = new fhir.FhirDateTime(source._whenPrepared, options);
            }
        }
        if (source['whenHandedOver'] !== undefined) {
            this.whenHandedOver = new fhir.FhirDateTime({ value: source.whenHandedOver }, options);
        }
        if (source['_whenHandedOver']) {
            if (this.whenHandedOver) {
                this.whenHandedOver.addExtendedProperties(source._whenHandedOver);
            }
            else {
                this.whenHandedOver = new fhir.FhirDateTime(source._whenHandedOver, options);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination, options);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.receiver = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x, options));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution, options);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.detectedIssue = [];
        }
        if (source['notDone'] !== undefined) {
            this.notDone = new fhir.FhirBoolean({ value: source.notDone }, options);
        }
        if (source['_notDone']) {
            if (this.notDone) {
                this.notDone.addExtendedProperties(source._notDone);
            }
            else {
                this.notDone = new fhir.FhirBoolean(source._notDone, options);
            }
        }
        if (source['notDoneReason']) {
            this.notDoneReason = source.notDoneReason;
        }
        else if (source['notDoneReasonCodeableConcept']) {
            this.notDoneReason = new fhir.CodeableConcept(source.notDoneReasonCodeableConcept, options);
        }
        else if (source['notDoneReasonReference']) {
            this.notDoneReason = new fhir.Reference(source.notDoneReasonReference, options);
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vOSV('status', exp, 'MedicationDispenseStatus', MedicationDispenseStatusVsValidation, 'r'));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('medication', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOA('authorizingPrescription', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('daysSupply', exp));
        iss.push(...this.vOS('whenPrepared', exp));
        iss.push(...this.vOS('whenHandedOver', exp));
        iss.push(...this.vOS('destination', exp));
        iss.push(...this.vOA('receiver', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('dosageInstruction', exp));
        iss.push(...this.vOS('substitution', exp));
        iss.push(...this.vOA('detectedIssue', exp));
        iss.push(...this.vOS('notDone', exp));
        iss.push(...this.vOS('notDoneReason', exp));
        iss.push(...this.vOA('eventHistory', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispense._fts_dataType = 'MedicationDispense';
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.medication[x]
 */
MedicationDispense._fts_medicationIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.notDoneReason[x]
 */
MedicationDispense._fts_notDoneReasonIsChoice = true;
//# sourceMappingURL=data:application/json;base64,