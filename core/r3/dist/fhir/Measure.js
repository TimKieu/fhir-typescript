// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Measure
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * A population criteria for the measure.
 */
export class MeasureGroupPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['criteria']) {
            this.criteria = new fhir.FhirString({ value: source.criteria });
        }
        else {
            this.criteria = null;
        }
        if (source['_criteria']) {
            if (this.criteria) {
                this.criteria.addExtendedProperties(source._criteria);
            }
            else {
                this.criteria = new fhir.FhirString(source._criteria);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Measure.group.population';
        }
        this.vOS('identifier', exp);
        this.vOS('code', exp);
        this.vOS('name', exp);
        this.vOS('description', exp);
        this.vRS('criteria', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroupPopulation._fts_dataType = 'MeasureGroupPopulation';
/**
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path.
 */
export class MeasureGroupStratifier extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['criteria']) {
            this.criteria = new fhir.FhirString({ value: source.criteria });
        }
        if (source['_criteria']) {
            if (this.criteria) {
                this.criteria.addExtendedProperties(source._criteria);
            }
            else {
                this.criteria = new fhir.FhirString(source._criteria);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Measure.group.stratifier';
        }
        this.vOS('identifier', exp);
        this.vOS('criteria', exp);
        this.vOS('path', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroupStratifier._fts_dataType = 'MeasureGroupStratifier';
/**
 * A group of population criteria for the measure.
 */
export class MeasureGroup extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        else {
            this.identifier = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureGroupPopulation(x));
        }
        else {
            this.population = [];
        }
        if (source['stratifier']) {
            this.stratifier = source.stratifier.map((x) => new fhir.MeasureGroupStratifier(x));
        }
        else {
            this.stratifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Measure.group';
        }
        this.vRS('identifier', exp);
        this.vOS('name', exp);
        this.vOS('description', exp);
        this.vOA('population', exp);
        this.vOA('stratifier', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroup._fts_dataType = 'MeasureGroup';
/**
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
export class MeasureSupplementalData extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureSupplementalData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['usage']) {
            this.usage = source.usage.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.usage = [];
        }
        if (source['criteria']) {
            this.criteria = new fhir.FhirString({ value: source.criteria });
        }
        if (source['_criteria']) {
            if (this.criteria) {
                this.criteria.addExtendedProperties(source._criteria);
            }
            else {
                this.criteria = new fhir.FhirString(source._criteria);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Measure.supplementalData';
        }
        this.vOS('identifier', exp);
        this.vOA('usage', exp);
        this.vOS('criteria', exp);
        this.vOS('path', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureSupplementalData._fts_dataType = 'MeasureSupplementalData';
/**
 * The Measure resource provides the definition of a quality measure.
 */
export class Measure extends fhir.DomainResource {
    /**
     * Default constructor for Measure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Measure';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['_usage']) {
            if (this.usage) {
                this.usage.addExtendedProperties(source._usage);
            }
            else {
                this.usage = new fhir.FhirString(source._usage);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['contributor']) {
            this.contributor = source.contributor.map((x) => new fhir.Contributor(x));
        }
        else {
            this.contributor = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['library']) {
            this.library = source.library.map((x) => new fhir.Reference(x));
        }
        else {
            this.library = [];
        }
        if (source['disclaimer']) {
            this.disclaimer = new fhir.FhirMarkdown({ value: source.disclaimer });
        }
        if (source['_disclaimer']) {
            if (this.disclaimer) {
                this.disclaimer.addExtendedProperties(source._disclaimer);
            }
            else {
                this.disclaimer = new fhir.FhirMarkdown(source._disclaimer);
            }
        }
        if (source['scoring']) {
            this.scoring = new fhir.CodeableConcept(source.scoring);
        }
        if (source['compositeScoring']) {
            this.compositeScoring = new fhir.CodeableConcept(source.compositeScoring);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['riskAdjustment']) {
            this.riskAdjustment = new fhir.FhirString({ value: source.riskAdjustment });
        }
        if (source['_riskAdjustment']) {
            if (this.riskAdjustment) {
                this.riskAdjustment.addExtendedProperties(source._riskAdjustment);
            }
            else {
                this.riskAdjustment = new fhir.FhirString(source._riskAdjustment);
            }
        }
        if (source['rateAggregation']) {
            this.rateAggregation = new fhir.FhirString({ value: source.rateAggregation });
        }
        if (source['_rateAggregation']) {
            if (this.rateAggregation) {
                this.rateAggregation.addExtendedProperties(source._rateAggregation);
            }
            else {
                this.rateAggregation = new fhir.FhirString(source._rateAggregation);
            }
        }
        if (source['rationale']) {
            this.rationale = new fhir.FhirMarkdown({ value: source.rationale });
        }
        if (source['_rationale']) {
            if (this.rationale) {
                this.rationale.addExtendedProperties(source._rationale);
            }
            else {
                this.rationale = new fhir.FhirMarkdown(source._rationale);
            }
        }
        if (source['clinicalRecommendationStatement']) {
            this.clinicalRecommendationStatement = new fhir.FhirMarkdown({ value: source.clinicalRecommendationStatement });
        }
        if (source['_clinicalRecommendationStatement']) {
            if (this.clinicalRecommendationStatement) {
                this.clinicalRecommendationStatement.addExtendedProperties(source._clinicalRecommendationStatement);
            }
            else {
                this.clinicalRecommendationStatement = new fhir.FhirMarkdown(source._clinicalRecommendationStatement);
            }
        }
        if (source['improvementNotation']) {
            this.improvementNotation = new fhir.FhirString({ value: source.improvementNotation });
        }
        if (source['_improvementNotation']) {
            if (this.improvementNotation) {
                this.improvementNotation.addExtendedProperties(source._improvementNotation);
            }
            else {
                this.improvementNotation = new fhir.FhirString(source._improvementNotation);
            }
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.FhirMarkdown({ value: x }));
        }
        else {
            this.definition = [];
        }
        if (source['_definition']) {
            source._definition.forEach((x, i) => {
                if (this.definition.length >= i) {
                    if (x) {
                        this.definition[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definition.push(new fhir.FhirMarkdown(x));
                    }
                }
            });
        }
        if (source['guidance']) {
            this.guidance = new fhir.FhirMarkdown({ value: source.guidance });
        }
        if (source['_guidance']) {
            if (this.guidance) {
                this.guidance.addExtendedProperties(source._guidance);
            }
            else {
                this.guidance = new fhir.FhirMarkdown(source._guidance);
            }
        }
        if (source['set']) {
            this.set = new fhir.FhirString({ value: source.set });
        }
        if (source['_set']) {
            if (this.set) {
                this.set.addExtendedProperties(source._set);
            }
            else {
                this.set = new fhir.FhirString(source._set);
            }
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.MeasureGroup(x));
        }
        else {
            this.group = [];
        }
        if (source['supplementalData']) {
            this.supplementalData = source.supplementalData.map((x) => new fhir.MeasureSupplementalData(x));
        }
        else {
            this.supplementalData = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Measure';
        }
        this.vRS('resourceType', exp);
        this.vOS('url', exp);
        this.vOA('identifier', exp);
        this.vOS('version', exp);
        this.vOS('name', exp);
        this.vOS('title', exp);
        this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('date', exp);
        this.vOS('publisher', exp);
        this.vOS('description', exp);
        this.vOS('purpose', exp);
        this.vOS('usage', exp);
        this.vOS('approvalDate', exp);
        this.vOS('lastReviewDate', exp);
        this.vOS('effectivePeriod', exp);
        this.vOA('useContext', exp);
        this.vOA('jurisdiction', exp);
        this.vOA('topic', exp);
        this.vOA('contributor', exp);
        this.vOA('contact', exp);
        this.vOS('copyright', exp);
        this.vOA('relatedArtifact', exp);
        this.vOA('library', exp);
        this.vOS('disclaimer', exp);
        this.vOS('scoring', exp);
        this.vOS('compositeScoring', exp);
        this.vOA('type', exp);
        this.vOS('riskAdjustment', exp);
        this.vOS('rateAggregation', exp);
        this.vOS('rationale', exp);
        this.vOS('clinicalRecommendationStatement', exp);
        this.vOS('improvementNotation', exp);
        this.vOA('definition', exp);
        this.vOS('guidance', exp);
        this.vOS('set', exp);
        this.vOA('group', exp);
        this.vOA('supplementalData', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Measure._fts_dataType = 'Measure';
//# sourceMappingURL=data:application/json;base64,