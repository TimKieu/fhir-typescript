// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReactionEventSeverityVsValidation } from '../fhirValueSets/ReactionEventSeverityVsValidation.js';
// @ts-ignore
import { AllergyClinicalStatusVsValidation } from '../fhirValueSets/AllergyClinicalStatusVsValidation.js';
// @ts-ignore
import { AllergyVerificationStatusVsValidation } from '../fhirValueSets/AllergyVerificationStatusVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceTypeVsValidation } from '../fhirValueSets/AllergyIntoleranceTypeVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCategoryVsValidation } from '../fhirValueSets/AllergyIntoleranceCategoryVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCriticalityVsValidation } from '../fhirValueSets/AllergyIntoleranceCriticalityVsValidation.js';
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance, options);
        }
        if (source['manifestation']) {
            this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.manifestation = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['onset'] !== undefined) {
            this.onset = new fhir.FhirDateTime({ value: source.onset }, options);
        }
        if (source['_onset']) {
            if (this.onset) {
                this.onset.addExtendedProperties(source._onset);
            }
            else {
                this.onset = new fhir.FhirDateTime(source._onset, options);
            }
        }
        if (source['severity'] !== undefined) {
            this.severity = new fhir.FhirCode({ value: source.severity }, options);
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity, options);
            }
        }
        if (source['exposureRoute']) {
            this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute, options);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AllergyIntolerance.reaction';
        }
        iss.push(...this.vOS('substance', exp));
        iss.push(...this.vRA('manifestation', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOSV('severity', exp, 'ReactionEventSeverity', ReactionEventSeverityVsValidation, 'r'));
        iss.push(...this.vOS('exposureRoute', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntoleranceReaction._fts_dataType = 'AllergyIntoleranceReaction';
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AllergyIntolerance';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['clinicalStatus'] !== undefined) {
            this.clinicalStatus = new fhir.FhirCode({ value: source.clinicalStatus }, options);
        }
        if (source['_clinicalStatus']) {
            if (this.clinicalStatus) {
                this.clinicalStatus.addExtendedProperties(source._clinicalStatus);
            }
            else {
                this.clinicalStatus = new fhir.FhirCode(source._clinicalStatus, options);
            }
        }
        if (source['verificationStatus'] !== undefined) {
            this.verificationStatus = new fhir.FhirCode({ value: source.verificationStatus }, options);
        }
        else {
            this.verificationStatus = null;
        }
        if (source['_verificationStatus']) {
            if (this.verificationStatus) {
                this.verificationStatus.addExtendedProperties(source._verificationStatus);
            }
            else {
                this.verificationStatus = new fhir.FhirCode(source._verificationStatus, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['category'] !== undefined) {
            this.category = source.category.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.category = [];
        }
        if (source['_category']) {
            source._category.forEach((x, i) => {
                if (this.category.length >= i) {
                    if (x) {
                        this.category[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.category.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['criticality'] !== undefined) {
            this.criticality = new fhir.FhirCode({ value: source.criticality }, options);
        }
        if (source['_criticality']) {
            if (this.criticality) {
                this.criticality.addExtendedProperties(source._criticality);
            }
            else {
                this.criticality = new fhir.FhirCode(source._criticality, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetDateTime'] !== undefined) {
            this.onset = new fhir.FhirDateTime({ value: source.onsetDateTime }, options);
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge, options);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod, options);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange, options);
        }
        else if (source['onsetString'] !== undefined) {
            this.onset = new fhir.FhirString({ value: source.onsetString }, options);
        }
        if (source['assertedDate'] !== undefined) {
            this.assertedDate = new fhir.FhirDateTime({ value: source.assertedDate }, options);
        }
        if (source['_assertedDate']) {
            if (this.assertedDate) {
                this.assertedDate.addExtendedProperties(source._assertedDate);
            }
            else {
                this.assertedDate = new fhir.FhirDateTime(source._assertedDate, options);
            }
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder, options);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter, options);
        }
        if (source['lastOccurrence'] !== undefined) {
            this.lastOccurrence = new fhir.FhirDateTime({ value: source.lastOccurrence }, options);
        }
        if (source['_lastOccurrence']) {
            if (this.lastOccurrence) {
                this.lastOccurrence.addExtendedProperties(source._lastOccurrence);
            }
            else {
                this.lastOccurrence = new fhir.FhirDateTime(source._lastOccurrence, options);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x, options));
        }
        else {
            this.reaction = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AllergyIntolerance';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('clinicalStatus', exp, 'AllergyClinicalStatus', AllergyClinicalStatusVsValidation, 'r'));
        iss.push(...this.vRSV('verificationStatus', exp, 'AllergyVerificationStatus', AllergyVerificationStatusVsValidation, 'r'));
        iss.push(...this.vOSV('type', exp, 'AllergyIntoleranceType', AllergyIntoleranceTypeVsValidation, 'r'));
        iss.push(...this.vOAV('category', exp, 'AllergyIntoleranceCategory', AllergyIntoleranceCategoryVsValidation, 'r'));
        iss.push(...this.vOSV('criticality', exp, 'AllergyIntoleranceCriticality', AllergyIntoleranceCriticalityVsValidation, 'r'));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOS('assertedDate', exp));
        iss.push(...this.vOS('recorder', exp));
        iss.push(...this.vOS('asserter', exp));
        iss.push(...this.vOS('lastOccurrence', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('reaction', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntolerance._fts_dataType = 'AllergyIntolerance';
/**
 * Internal flag to properly serialize choice-type element AllergyIntolerance.onset[x]
 */
AllergyIntolerance._fts_onsetIsChoice = true;
//# sourceMappingURL=data:application/json;base64,