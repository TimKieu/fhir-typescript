// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: HealthcareService
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekVsValidation } from '../fhirValueSets/DaysOfWeekVsValidation.js';
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export class HealthcareServiceAvailableTime extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceAvailableTime - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek'] !== undefined) {
            this.daysOfWeek = source.daysOfWeek.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['_daysOfWeek']) {
            source._daysOfWeek.forEach((x, i) => {
                if (this.daysOfWeek.length >= i) {
                    if (x) {
                        this.daysOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.daysOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['allDay'] !== undefined) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay }, options);
        }
        if (source['_allDay']) {
            if (this.allDay) {
                this.allDay.addExtendedProperties(source._allDay);
            }
            else {
                this.allDay = new fhir.FhirBoolean(source._allDay, options);
            }
        }
        if (source['availableStartTime'] !== undefined) {
            this.availableStartTime = new fhir.FhirTime({ value: source.availableStartTime }, options);
        }
        if (source['_availableStartTime']) {
            if (this.availableStartTime) {
                this.availableStartTime.addExtendedProperties(source._availableStartTime);
            }
            else {
                this.availableStartTime = new fhir.FhirTime(source._availableStartTime, options);
            }
        }
        if (source['availableEndTime'] !== undefined) {
            this.availableEndTime = new fhir.FhirTime({ value: source.availableEndTime }, options);
        }
        if (source['_availableEndTime']) {
            if (this.availableEndTime) {
                this.availableEndTime.addExtendedProperties(source._availableEndTime);
            }
            else {
                this.availableEndTime = new fhir.FhirTime(source._availableEndTime, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService.availableTime';
        }
        iss.push(...this.vOAV('daysOfWeek', exp, 'DaysOfWeek', DaysOfWeekVsValidation, 'r'));
        iss.push(...this.vOS('allDay', exp));
        iss.push(...this.vOS('availableStartTime', exp));
        iss.push(...this.vOS('availableEndTime', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceAvailableTime._fts_dataType = 'HealthcareServiceAvailableTime';
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export class HealthcareServiceNotAvailable extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceNotAvailable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['during']) {
            this.during = new fhir.Period(source.during, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService.notAvailable';
        }
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vOS('during', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceNotAvailable._fts_dataType = 'HealthcareServiceNotAvailable';
/**
 * The details of a healthcare service available at a location.
 */
export class HealthcareService extends fhir.DomainResource {
    /**
     * Default constructor for HealthcareService - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'HealthcareService';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['active'] !== undefined) {
            this.active = new fhir.FhirBoolean({ value: source.active }, options);
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active, options);
            }
        }
        if (source['providedBy']) {
            this.providedBy = new fhir.Reference(source.providedBy, options);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.specialty = [];
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.location = [];
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
        if (source['extraDetails'] !== undefined) {
            this.extraDetails = new fhir.FhirString({ value: source.extraDetails }, options);
        }
        if (source['_extraDetails']) {
            if (this.extraDetails) {
                this.extraDetails.addExtendedProperties(source._extraDetails);
            }
            else {
                this.extraDetails = new fhir.FhirString(source._extraDetails, options);
            }
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo, options);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.coverageArea = [];
        }
        if (source['serviceProvisionCode']) {
            this.serviceProvisionCode = source.serviceProvisionCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.serviceProvisionCode = [];
        }
        if (source['eligibility']) {
            this.eligibility = new fhir.CodeableConcept(source.eligibility, options);
        }
        if (source['eligibilityNote'] !== undefined) {
            this.eligibilityNote = new fhir.FhirString({ value: source.eligibilityNote }, options);
        }
        if (source['_eligibilityNote']) {
            if (this.eligibilityNote) {
                this.eligibilityNote.addExtendedProperties(source._eligibilityNote);
            }
            else {
                this.eligibilityNote = new fhir.FhirString(source._eligibilityNote, options);
            }
        }
        if (source['programName'] !== undefined) {
            this.programName = source.programName.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.programName = [];
        }
        if (source['_programName']) {
            source._programName.forEach((x, i) => {
                if (this.programName.length >= i) {
                    if (x) {
                        this.programName[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.programName.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.characteristic = [];
        }
        if (source['referralMethod']) {
            this.referralMethod = source.referralMethod.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.referralMethod = [];
        }
        if (source['appointmentRequired'] !== undefined) {
            this.appointmentRequired = new fhir.FhirBoolean({ value: source.appointmentRequired }, options);
        }
        if (source['_appointmentRequired']) {
            if (this.appointmentRequired) {
                this.appointmentRequired.addExtendedProperties(source._appointmentRequired);
            }
            else {
                this.appointmentRequired = new fhir.FhirBoolean(source._appointmentRequired, options);
            }
        }
        if (source['availableTime']) {
            this.availableTime = source.availableTime.map((x) => new fhir.HealthcareServiceAvailableTime(x, options));
        }
        else {
            this.availableTime = [];
        }
        if (source['notAvailable']) {
            this.notAvailable = source.notAvailable.map((x) => new fhir.HealthcareServiceNotAvailable(x, options));
        }
        else {
            this.notAvailable = [];
        }
        if (source['availabilityExceptions'] !== undefined) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions }, options);
        }
        if (source['_availabilityExceptions']) {
            if (this.availabilityExceptions) {
                this.availabilityExceptions.addExtendedProperties(source._availabilityExceptions);
            }
            else {
                this.availabilityExceptions = new fhir.FhirString(source._availabilityExceptions, options);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('active', exp));
        iss.push(...this.vOS('providedBy', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOA('specialty', exp));
        iss.push(...this.vOA('location', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOS('extraDetails', exp));
        iss.push(...this.vOS('photo', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOA('coverageArea', exp));
        iss.push(...this.vOA('serviceProvisionCode', exp));
        iss.push(...this.vOS('eligibility', exp));
        iss.push(...this.vOS('eligibilityNote', exp));
        iss.push(...this.vOA('programName', exp));
        iss.push(...this.vOA('characteristic', exp));
        iss.push(...this.vOA('referralMethod', exp));
        iss.push(...this.vOS('appointmentRequired', exp));
        iss.push(...this.vOA('availableTime', exp));
        iss.push(...this.vOA('notAvailable', exp));
        iss.push(...this.vOS('availabilityExceptions', exp));
        iss.push(...this.vOA('endpoint', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareService._fts_dataType = 'HealthcareService';
//# sourceMappingURL=data:application/json;base64,