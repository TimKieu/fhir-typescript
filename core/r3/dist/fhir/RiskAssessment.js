// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: RiskAssessment
import * as fhir from '../fhir.js';
// @ts-ignore
import { ObservationStatusVsValidation } from '../fhirValueSets/ObservationStatusVsValidation.js';
/**
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
export class RiskAssessmentPrediction extends fhir.BackboneElement {
    /**
     * Default constructor for RiskAssessmentPrediction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        else {
            this.outcome = null;
        }
        if (source['probability']) {
            this.probability = source.probability;
        }
        else if (source['probabilityDecimal']) {
            this.probability = new fhir.FhirDecimal({ value: source.probabilityDecimal });
        }
        else if (source['probabilityRange']) {
            this.probability = new fhir.Range(source.probabilityRange);
        }
        if (source['qualitativeRisk']) {
            this.qualitativeRisk = new fhir.CodeableConcept(source.qualitativeRisk);
        }
        if (source['relativeRisk']) {
            this.relativeRisk = new fhir.FhirDecimal({ value: source.relativeRisk });
        }
        if (source['_relativeRisk']) {
            if (this.relativeRisk) {
                this.relativeRisk.addExtendedProperties(source._relativeRisk);
            }
            else {
                this.relativeRisk = new fhir.FhirDecimal(source._relativeRisk);
            }
        }
        if (source['when']) {
            this.when = source.when;
        }
        else if (source['whenPeriod']) {
            this.when = new fhir.Period(source.whenPeriod);
        }
        else if (source['whenRange']) {
            this.when = new fhir.Range(source.whenRange);
        }
        if (source['rationale']) {
            this.rationale = new fhir.FhirString({ value: source.rationale });
        }
        if (source['_rationale']) {
            if (this.rationale) {
                this.rationale.addExtendedProperties(source._rationale);
            }
            else {
                this.rationale = new fhir.FhirString(source._rationale);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskAssessment.prediction';
        }
        iss.push(...this.vRS('outcome', exp));
        iss.push(...this.vOS('probability', exp));
        iss.push(...this.vOS('qualitativeRisk', exp));
        iss.push(...this.vOS('relativeRisk', exp));
        iss.push(...this.vOS('when', exp));
        iss.push(...this.vOS('rationale', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskAssessmentPrediction._fts_dataType = 'RiskAssessmentPrediction';
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.prediction.probability[x]
 */
RiskAssessmentPrediction._fts_probabilityIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.prediction.when[x]
 */
RiskAssessmentPrediction._fts_whenIsChoice = true;
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export class RiskAssessment extends fhir.DomainResource {
    /**
     * Default constructor for RiskAssessment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RiskAssessment';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['basedOn']) {
            this.basedOn = new fhir.Reference(source.basedOn);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reason']) {
            this.reason = source.reason;
        }
        else if (source['reasonCodeableConcept']) {
            this.reason = new fhir.CodeableConcept(source.reasonCodeableConcept);
        }
        else if (source['reasonReference']) {
            this.reason = new fhir.Reference(source.reasonReference);
        }
        if (source['basis']) {
            this.basis = source.basis.map((x) => new fhir.Reference(x));
        }
        else {
            this.basis = [];
        }
        if (source['prediction']) {
            this.prediction = source.prediction.map((x) => new fhir.RiskAssessmentPrediction(x));
        }
        else {
            this.prediction = [];
        }
        if (source['mitigation']) {
            this.mitigation = new fhir.FhirString({ value: source.mitigation });
        }
        if (source['_mitigation']) {
            if (this.mitigation) {
                this.mitigation.addExtendedProperties(source._mitigation);
            }
            else {
                this.mitigation = new fhir.FhirString(source._mitigation);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskAssessment';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('basedOn', exp));
        iss.push(...this.vOS('parent', exp));
        iss.push(...this.vRSV('status', exp, 'ObservationStatus', ObservationStatusVsValidation, 'r'));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('occurrence', exp));
        iss.push(...this.vOS('condition', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOA('basis', exp));
        iss.push(...this.vOA('prediction', exp));
        iss.push(...this.vOS('mitigation', exp));
        iss.push(...this.vOS('comment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskAssessment._fts_dataType = 'RiskAssessment';
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.occurrence[x]
 */
RiskAssessment._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.reason[x]
 */
RiskAssessment._fts_reasonIsChoice = true;
//# sourceMappingURL=data:application/json;base64,