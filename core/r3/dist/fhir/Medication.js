// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Medication
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationStatusVsValidation } from '../fhirValueSets/MedicationStatusVsValidation.js';
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export class MedicationIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['isActive']) {
            this.isActive = new fhir.FhirBoolean({ value: source.isActive });
        }
        if (source['_isActive']) {
            if (this.isActive) {
                this.isActive.addExtendedProperties(source._isActive);
            }
            else {
                this.isActive = new fhir.FhirBoolean(source._isActive);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.Ratio(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.ingredient';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('isActive', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationIngredient._fts_dataType = 'MedicationIngredient';
/**
 * Internal flag to properly serialize choice-type element Medication.ingredient.item[x]
 */
MedicationIngredient._fts_itemIsChoice = true;
/**
 * A set of components that go to make up the described item.
 */
export class MedicationPackageContent extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackageContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package.content';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackageContent._fts_dataType = 'MedicationPackageContent';
/**
 * Internal flag to properly serialize choice-type element Medication.package.content.item[x]
 */
MedicationPackageContent._fts_itemIsChoice = true;
/**
 * Information about a group of medication produced or packaged from one production run.
 */
export class MedicationPackageBatch extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackageBatch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate });
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDateTime(source._expirationDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package.batch';
        }
        iss.push(...this.vOS('lotNumber', exp));
        iss.push(...this.vOS('expirationDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackageBatch._fts_dataType = 'MedicationPackageBatch';
/**
 * Information that only applies to packages (not products).
 */
export class MedicationPackage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['container']) {
            this.container = new fhir.CodeableConcept(source.container);
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.MedicationPackageContent(x));
        }
        else {
            this.content = [];
        }
        if (source['batch']) {
            this.batch = source.batch.map((x) => new fhir.MedicationPackageBatch(x));
        }
        else {
            this.batch = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package';
        }
        iss.push(...this.vOS('container', exp));
        iss.push(...this.vOA('content', exp));
        iss.push(...this.vOA('batch', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackage._fts_dataType = 'MedicationPackage';
/**
 * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
 */
export class Medication extends fhir.DomainResource {
    /**
     * Default constructor for Medication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Medication';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['isBrand']) {
            this.isBrand = new fhir.FhirBoolean({ value: source.isBrand });
        }
        if (source['_isBrand']) {
            if (this.isBrand) {
                this.isBrand.addExtendedProperties(source._isBrand);
            }
            else {
                this.isBrand = new fhir.FhirBoolean(source._isBrand);
            }
        }
        if (source['isOverTheCounter']) {
            this.isOverTheCounter = new fhir.FhirBoolean({ value: source.isOverTheCounter });
        }
        if (source['_isOverTheCounter']) {
            if (this.isOverTheCounter) {
                this.isOverTheCounter.addExtendedProperties(source._isOverTheCounter);
            }
            else {
                this.isOverTheCounter = new fhir.FhirBoolean(source._isOverTheCounter);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['package']) {
            this.package = new fhir.MedicationPackage(source.package);
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.Attachment(x));
        }
        else {
            this.image = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOSV('status', exp, 'MedicationStatus', MedicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('isBrand', exp));
        iss.push(...this.vOS('isOverTheCounter', exp));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOS('form', exp));
        iss.push(...this.vOA('ingredient', exp));
        iss.push(...this.vOS('package', exp));
        iss.push(...this.vOA('image', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Medication._fts_dataType = 'Medication';
//# sourceMappingURL=data:application/json;base64,