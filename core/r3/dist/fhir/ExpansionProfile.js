// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExpansionProfile
import * as fhir from '../fhir.js';
// @ts-ignore
import { SystemVersionProcessingModeVsValidation } from '../fhirValueSets/SystemVersionProcessingModeVsValidation.js';
// @ts-ignore
import { DesignationUseVsValidation } from '../fhirValueSets/DesignationUseVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Fix use of a particular code system to a particular version.
 */
export class ExpansionProfileFixedVersion extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileFixedVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        else {
            this.version = null;
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.fixedVersion';
        }
        iss.push(...this.vRS('system', exp));
        iss.push(...this.vRS('version', exp));
        iss.push(...this.vRSV('mode', exp, 'SystemVersionProcessingMode', SystemVersionProcessingModeVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileFixedVersion._fts_dataType = 'ExpansionProfileFixedVersion';
/**
 * When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
 */
export class ExpansionProfileExcludedSystem extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileExcludedSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.excludedSystem';
        }
        iss.push(...this.vRS('system', exp));
        iss.push(...this.vOS('version', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileExcludedSystem._fts_dataType = 'ExpansionProfileExcludedSystem';
/**
 * At least one of designation.language or designation.use must be provided for each include.designation element.
 */
export class ExpansionProfileDesignationIncludeDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileDesignationIncludeDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.designation.include.designation';
        }
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vOSV('use', exp, 'DesignationUse', DesignationUseVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileDesignationIncludeDesignation._fts_dataType = 'ExpansionProfileDesignationIncludeDesignation';
/**
 * Designations to be included.
 */
export class ExpansionProfileDesignationInclude extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileDesignationInclude - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ExpansionProfileDesignationIncludeDesignation(x));
        }
        else {
            this.designation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.designation.include';
        }
        iss.push(...this.vOA('designation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileDesignationInclude._fts_dataType = 'ExpansionProfileDesignationInclude';
/**
 * At least one of designation.language or designation.use must be provided for each exclude.designation element.
 */
export class ExpansionProfileDesignationExcludeDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileDesignationExcludeDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.designation.exclude.designation';
        }
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vOSV('use', exp, 'DesignationUse', DesignationUseVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileDesignationExcludeDesignation._fts_dataType = 'ExpansionProfileDesignationExcludeDesignation';
/**
 * Designations to be excluded.
 */
export class ExpansionProfileDesignationExclude extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileDesignationExclude - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ExpansionProfileDesignationExcludeDesignation(x));
        }
        else {
            this.designation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.designation.exclude';
        }
        iss.push(...this.vOA('designation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileDesignationExclude._fts_dataType = 'ExpansionProfileDesignationExclude';
/**
 * A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
 */
export class ExpansionProfileDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for ExpansionProfileDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['include']) {
            this.include = new fhir.ExpansionProfileDesignationInclude(source.include);
        }
        if (source['exclude']) {
            this.exclude = new fhir.ExpansionProfileDesignationExclude(source.exclude);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile.designation';
        }
        iss.push(...this.vOS('include', exp));
        iss.push(...this.vOS('exclude', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfileDesignation._fts_dataType = 'ExpansionProfileDesignation';
/**
 * Resource to define constraints on the Expansion of a FHIR ValueSet.
 */
export class ExpansionProfile extends fhir.DomainResource {
    /**
     * Default constructor for ExpansionProfile - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ExpansionProfile';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['fixedVersion']) {
            this.fixedVersion = source.fixedVersion.map((x) => new fhir.ExpansionProfileFixedVersion(x));
        }
        else {
            this.fixedVersion = [];
        }
        if (source['excludedSystem']) {
            this.excludedSystem = new fhir.ExpansionProfileExcludedSystem(source.excludedSystem);
        }
        if (source['includeDesignations']) {
            this.includeDesignations = new fhir.FhirBoolean({ value: source.includeDesignations });
        }
        if (source['_includeDesignations']) {
            if (this.includeDesignations) {
                this.includeDesignations.addExtendedProperties(source._includeDesignations);
            }
            else {
                this.includeDesignations = new fhir.FhirBoolean(source._includeDesignations);
            }
        }
        if (source['designation']) {
            this.designation = new fhir.ExpansionProfileDesignation(source.designation);
        }
        if (source['includeDefinition']) {
            this.includeDefinition = new fhir.FhirBoolean({ value: source.includeDefinition });
        }
        if (source['_includeDefinition']) {
            if (this.includeDefinition) {
                this.includeDefinition.addExtendedProperties(source._includeDefinition);
            }
            else {
                this.includeDefinition = new fhir.FhirBoolean(source._includeDefinition);
            }
        }
        if (source['activeOnly']) {
            this.activeOnly = new fhir.FhirBoolean({ value: source.activeOnly });
        }
        if (source['_activeOnly']) {
            if (this.activeOnly) {
                this.activeOnly.addExtendedProperties(source._activeOnly);
            }
            else {
                this.activeOnly = new fhir.FhirBoolean(source._activeOnly);
            }
        }
        if (source['excludeNested']) {
            this.excludeNested = new fhir.FhirBoolean({ value: source.excludeNested });
        }
        if (source['_excludeNested']) {
            if (this.excludeNested) {
                this.excludeNested.addExtendedProperties(source._excludeNested);
            }
            else {
                this.excludeNested = new fhir.FhirBoolean(source._excludeNested);
            }
        }
        if (source['excludeNotForUI']) {
            this.excludeNotForUI = new fhir.FhirBoolean({ value: source.excludeNotForUI });
        }
        if (source['_excludeNotForUI']) {
            if (this.excludeNotForUI) {
                this.excludeNotForUI.addExtendedProperties(source._excludeNotForUI);
            }
            else {
                this.excludeNotForUI = new fhir.FhirBoolean(source._excludeNotForUI);
            }
        }
        if (source['excludePostCoordinated']) {
            this.excludePostCoordinated = new fhir.FhirBoolean({ value: source.excludePostCoordinated });
        }
        if (source['_excludePostCoordinated']) {
            if (this.excludePostCoordinated) {
                this.excludePostCoordinated.addExtendedProperties(source._excludePostCoordinated);
            }
            else {
                this.excludePostCoordinated = new fhir.FhirBoolean(source._excludePostCoordinated);
            }
        }
        if (source['displayLanguage']) {
            this.displayLanguage = new fhir.FhirCode({ value: source.displayLanguage });
        }
        if (source['_displayLanguage']) {
            if (this.displayLanguage) {
                this.displayLanguage.addExtendedProperties(source._displayLanguage);
            }
            else {
                this.displayLanguage = new fhir.FhirCode(source._displayLanguage);
            }
        }
        if (source['limitedExpansion']) {
            this.limitedExpansion = new fhir.FhirBoolean({ value: source.limitedExpansion });
        }
        if (source['_limitedExpansion']) {
            if (this.limitedExpansion) {
                this.limitedExpansion.addExtendedProperties(source._limitedExpansion);
            }
            else {
                this.limitedExpansion = new fhir.FhirBoolean(source._limitedExpansion);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExpansionProfile';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOA('fixedVersion', exp));
        iss.push(...this.vOS('excludedSystem', exp));
        iss.push(...this.vOS('includeDesignations', exp));
        iss.push(...this.vOS('designation', exp));
        iss.push(...this.vOS('includeDefinition', exp));
        iss.push(...this.vOS('activeOnly', exp));
        iss.push(...this.vOS('excludeNested', exp));
        iss.push(...this.vOS('excludeNotForUI', exp));
        iss.push(...this.vOS('excludePostCoordinated', exp));
        iss.push(...this.vOS('displayLanguage', exp));
        iss.push(...this.vOS('limitedExpansion', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExpansionProfile._fts_dataType = 'ExpansionProfile';
//# sourceMappingURL=data:application/json;base64,