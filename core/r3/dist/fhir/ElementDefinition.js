// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ElementDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiscriminatorTypeVsValidation } from '../fhirValueSets/DiscriminatorTypeVsValidation.js';
// @ts-ignore
import { ResourceSlicingRulesVsValidation } from '../fhirValueSets/ResourceSlicingRulesVsValidation.js';
// @ts-ignore
import { ResourceAggregationModeVsValidation } from '../fhirValueSets/ResourceAggregationModeVsValidation.js';
// @ts-ignore
import { ReferenceVersionRulesVsValidation } from '../fhirValueSets/ReferenceVersionRulesVsValidation.js';
// @ts-ignore
import { ConstraintSeverityVsValidation } from '../fhirValueSets/ConstraintSeverityVsValidation.js';
// @ts-ignore
import { BindingStrengthVsValidation } from '../fhirValueSets/BindingStrengthVsValidation.js';
// @ts-ignore
import { PropertyRepresentationVsValidation } from '../fhirValueSets/PropertyRepresentationVsValidation.js';
/**
 * If there is no discriminator, the content is hard to process, so this should be avoided. If the base element has a cardinality of ..1, and there is a choice of types, the discriminator must be "@type".
 */
export class ElementDefinitionSlicingDiscriminator extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicingDiscriminator - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['path'] !== undefined) {
            this.path = new fhir.FhirString({ value: source.path }, options);
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.slicing.discriminator';
        }
        iss.push(...this.vRSV('type', exp, 'DiscriminatorType', DiscriminatorTypeVsValidation, 'r'));
        iss.push(...this.vRS('path', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionSlicingDiscriminator._fts_dataType = 'ElementDefinitionSlicingDiscriminator';
/**
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export class ElementDefinitionSlicing extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['discriminator']) {
            this.discriminator = source.discriminator.map((x) => new fhir.ElementDefinitionSlicingDiscriminator(x, options));
        }
        else {
            this.discriminator = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['ordered'] !== undefined) {
            this.ordered = new fhir.FhirBoolean({ value: source.ordered }, options);
        }
        if (source['_ordered']) {
            if (this.ordered) {
                this.ordered.addExtendedProperties(source._ordered);
            }
            else {
                this.ordered = new fhir.FhirBoolean(source._ordered, options);
            }
        }
        if (source['rules'] !== undefined) {
            this.rules = new fhir.FhirCode({ value: source.rules }, options);
        }
        else {
            this.rules = null;
        }
        if (source['_rules']) {
            if (this.rules) {
                this.rules.addExtendedProperties(source._rules);
            }
            else {
                this.rules = new fhir.FhirCode(source._rules, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.slicing';
        }
        iss.push(...this.vOA('discriminator', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('ordered', exp));
        iss.push(...this.vRSV('rules', exp, 'ResourceSlicingRules', ResourceSlicingRulesVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionSlicing._fts_dataType = 'ElementDefinitionSlicing';
/**
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. So they are deformalised into this location for tooling convenience, and to ensure that the base information is available without dependencies.
 */
export class ElementDefinitionBase extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBase - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path'] !== undefined) {
            this.path = new fhir.FhirString({ value: source.path }, options);
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path, options);
            }
        }
        if (source['min'] !== undefined) {
            this.min = new fhir.FhirUnsignedInt({ value: source.min }, options);
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirUnsignedInt(source._min, options);
            }
        }
        if (source['max'] !== undefined) {
            this.max = new fhir.FhirString({ value: source.max }, options);
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.base';
        }
        iss.push(...this.vRS('path', exp));
        iss.push(...this.vRS('min', exp));
        iss.push(...this.vRS('max', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionBase._fts_dataType = 'ElementDefinitionBase';
/**
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export class ElementDefinitionType extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionType - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirUri({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirUri(source._code, options);
            }
        }
        if (source['profile'] !== undefined) {
            this.profile = new fhir.FhirUri({ value: source.profile }, options);
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirUri(source._profile, options);
            }
        }
        if (source['targetProfile'] !== undefined) {
            this.targetProfile = new fhir.FhirUri({ value: source.targetProfile }, options);
        }
        if (source['_targetProfile']) {
            if (this.targetProfile) {
                this.targetProfile.addExtendedProperties(source._targetProfile);
            }
            else {
                this.targetProfile = new fhir.FhirUri(source._targetProfile, options);
            }
        }
        if (source['aggregation'] !== undefined) {
            this.aggregation = source.aggregation.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.aggregation = [];
        }
        if (source['_aggregation']) {
            source._aggregation.forEach((x, i) => {
                if (this.aggregation.length >= i) {
                    if (x) {
                        this.aggregation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.aggregation.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['versioning'] !== undefined) {
            this.versioning = new fhir.FhirCode({ value: source.versioning }, options);
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.type';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('profile', exp));
        iss.push(...this.vOS('targetProfile', exp));
        iss.push(...this.vOAV('aggregation', exp, 'ResourceAggregationMode', ResourceAggregationModeVsValidation, 'r'));
        iss.push(...this.vOSV('versioning', exp, 'ReferenceVersionRules', ReferenceVersionRulesVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionType._fts_dataType = 'ElementDefinitionType';
/**
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export class ElementDefinitionExample extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionExample - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['label'] !== undefined) {
            this.label = new fhir.FhirString({ value: source.label }, options);
        }
        else {
            this.label = null;
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label, options);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBase64Binary'] !== undefined) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary }, options);
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueCode'] !== undefined) {
            this.value = new fhir.FhirCode({ value: source.valueCode }, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueDateTime'] !== undefined) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime }, options);
        }
        else if (source['valueDecimal'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal }, options);
        }
        else if (source['valueId'] !== undefined) {
            this.value = new fhir.FhirId({ value: source.valueId }, options);
        }
        else if (source['valueInstant'] !== undefined) {
            this.value = new fhir.FhirInstant({ value: source.valueInstant }, options);
        }
        else if (source['valueInteger'] !== undefined) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger }, options);
        }
        else if (source['valueMarkdown'] !== undefined) {
            this.value = new fhir.FhirMarkdown({ value: source.valueMarkdown }, options);
        }
        else if (source['valueOid'] !== undefined) {
            this.value = new fhir.FhirOid({ value: source.valueOid }, options);
        }
        else if (source['valuePositiveInt'] !== undefined) {
            this.value = new fhir.FhirPositiveInt({ value: source.valuePositiveInt }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueTime'] !== undefined) {
            this.value = new fhir.FhirTime({ value: source.valueTime }, options);
        }
        else if (source['valueUnsignedInt'] !== undefined) {
            this.value = new fhir.FhirUnsignedInt({ value: source.valueUnsignedInt }, options);
        }
        else if (source['valueUri'] !== undefined) {
            this.value = new fhir.FhirUri({ value: source.valueUri }, options);
        }
        else if (source['valueAddress']) {
            this.value = new fhir.Address(source.valueAddress, options);
        }
        else if (source['valueAge']) {
            this.value = new fhir.Age(source.valueAge, options);
        }
        else if (source['valueAnnotation']) {
            this.value = new fhir.Annotation(source.valueAnnotation, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept, options);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding, options);
        }
        else if (source['valueContactPoint']) {
            this.value = new fhir.ContactPoint(source.valueContactPoint, options);
        }
        else if (source['valueCount']) {
            this.value = new fhir.Count(source.valueCount, options);
        }
        else if (source['valueDistance']) {
            this.value = new fhir.Distance(source.valueDistance, options);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration, options);
        }
        else if (source['valueHumanName']) {
            this.value = new fhir.HumanName(source.valueHumanName, options);
        }
        else if (source['valueIdentifier']) {
            this.value = new fhir.Identifier(source.valueIdentifier, options);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney, options);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange, options);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData, options);
        }
        else if (source['valueSignature']) {
            this.value = new fhir.Signature(source.valueSignature, options);
        }
        else if (source['valueTiming']) {
            this.value = new fhir.Timing(source.valueTiming, options);
        }
        else if (source['valueMeta']) {
            this.value = new fhir.Meta(source.valueMeta, options);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.example';
        }
        iss.push(...this.vRS('label', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionExample._fts_dataType = 'ElementDefinitionExample';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.example.value[x]
 */
ElementDefinitionExample._fts_valueIsChoice = true;
/**
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export class ElementDefinitionConstraint extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionConstraint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['key'] !== undefined) {
            this.key = new fhir.FhirId({ value: source.key }, options);
        }
        else {
            this.key = null;
        }
        if (source['_key']) {
            if (this.key) {
                this.key.addExtendedProperties(source._key);
            }
            else {
                this.key = new fhir.FhirId(source._key, options);
            }
        }
        if (source['requirements'] !== undefined) {
            this.requirements = new fhir.FhirString({ value: source.requirements }, options);
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements, options);
            }
        }
        if (source['severity'] !== undefined) {
            this.severity = new fhir.FhirCode({ value: source.severity }, options);
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity, options);
            }
        }
        if (source['human'] !== undefined) {
            this.human = new fhir.FhirString({ value: source.human }, options);
        }
        else {
            this.human = null;
        }
        if (source['_human']) {
            if (this.human) {
                this.human.addExtendedProperties(source._human);
            }
            else {
                this.human = new fhir.FhirString(source._human, options);
            }
        }
        if (source['expression'] !== undefined) {
            this.expression = new fhir.FhirString({ value: source.expression }, options);
        }
        else {
            this.expression = null;
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression, options);
            }
        }
        if (source['xpath'] !== undefined) {
            this.xpath = new fhir.FhirString({ value: source.xpath }, options);
        }
        if (source['_xpath']) {
            if (this.xpath) {
                this.xpath.addExtendedProperties(source._xpath);
            }
            else {
                this.xpath = new fhir.FhirString(source._xpath, options);
            }
        }
        if (source['source'] !== undefined) {
            this.source = new fhir.FhirUri({ value: source.source }, options);
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirUri(source._source, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.constraint';
        }
        iss.push(...this.vRS('key', exp));
        iss.push(...this.vOS('requirements', exp));
        iss.push(...this.vRSV('severity', exp, 'ConstraintSeverity', ConstraintSeverityVsValidation, 'r'));
        iss.push(...this.vRS('human', exp));
        iss.push(...this.vRS('expression', exp));
        iss.push(...this.vOS('xpath', exp));
        iss.push(...this.vOS('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionConstraint._fts_dataType = 'ElementDefinitionConstraint';
/**
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export class ElementDefinitionBinding extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['strength'] !== undefined) {
            this.strength = new fhir.FhirCode({ value: source.strength }, options);
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            if (this.strength) {
                this.strength.addExtendedProperties(source._strength);
            }
            else {
                this.strength = new fhir.FhirCode(source._strength, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        else if (source['valueSetUri'] !== undefined) {
            this.valueSet = new fhir.FhirUri({ value: source.valueSetUri }, options);
        }
        else if (source['valueSetReference']) {
            this.valueSet = new fhir.Reference(source.valueSetReference, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.binding';
        }
        iss.push(...this.vRSV('strength', exp, 'BindingStrength', BindingStrengthVsValidation, 'r'));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('valueSet', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionBinding._fts_dataType = 'ElementDefinitionBinding';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.binding.valueSet[x]
 */
ElementDefinitionBinding._fts_valueSetIsChoice = true;
/**
 * Mappings are not necessarily specific enough for safe translation.
 */
export class ElementDefinitionMapping extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity'] !== undefined) {
            this.identity = new fhir.FhirId({ value: source.identity }, options);
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity, options);
            }
        }
        if (source['language'] !== undefined) {
            this.language = new fhir.FhirCode({ value: source.language }, options);
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language, options);
            }
        }
        if (source['map'] !== undefined) {
            this.map = new fhir.FhirString({ value: source.map }, options);
        }
        else {
            this.map = null;
        }
        if (source['_map']) {
            if (this.map) {
                this.map.addExtendedProperties(source._map);
            }
            else {
                this.map = new fhir.FhirString(source._map, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.mapping';
        }
        iss.push(...this.vRS('identity', exp));
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vRS('map', exp));
        iss.push(...this.vOS('comment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionMapping._fts_dataType = 'ElementDefinitionMapping';
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
export class ElementDefinition extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path'] !== undefined) {
            this.path = new fhir.FhirString({ value: source.path }, options);
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path, options);
            }
        }
        if (source['representation'] !== undefined) {
            this.representation = source.representation.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.representation = [];
        }
        if (source['_representation']) {
            source._representation.forEach((x, i) => {
                if (this.representation.length >= i) {
                    if (x) {
                        this.representation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.representation.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['sliceName'] !== undefined) {
            this.sliceName = new fhir.FhirString({ value: source.sliceName }, options);
        }
        if (source['_sliceName']) {
            if (this.sliceName) {
                this.sliceName.addExtendedProperties(source._sliceName);
            }
            else {
                this.sliceName = new fhir.FhirString(source._sliceName, options);
            }
        }
        if (source['label'] !== undefined) {
            this.label = new fhir.FhirString({ value: source.label }, options);
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label, options);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.code = [];
        }
        if (source['slicing']) {
            this.slicing = new fhir.ElementDefinitionSlicing(source.slicing, options);
        }
        if (source['short'] !== undefined) {
            this.short = new fhir.FhirString({ value: source.short }, options);
        }
        if (source['_short']) {
            if (this.short) {
                this.short.addExtendedProperties(source._short);
            }
            else {
                this.short = new fhir.FhirString(source._short, options);
            }
        }
        if (source['definition'] !== undefined) {
            this.definition = new fhir.FhirMarkdown({ value: source.definition }, options);
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirMarkdown(source._definition, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirMarkdown({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirMarkdown(source._comment, options);
            }
        }
        if (source['requirements'] !== undefined) {
            this.requirements = new fhir.FhirMarkdown({ value: source.requirements }, options);
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirMarkdown(source._requirements, options);
            }
        }
        if (source['alias'] !== undefined) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['min'] !== undefined) {
            this.min = new fhir.FhirUnsignedInt({ value: source.min }, options);
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirUnsignedInt(source._min, options);
            }
        }
        if (source['max'] !== undefined) {
            this.max = new fhir.FhirString({ value: source.max }, options);
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max, options);
            }
        }
        if (source['base']) {
            this.base = new fhir.ElementDefinitionBase(source.base, options);
        }
        if (source['contentReference'] !== undefined) {
            this.contentReference = new fhir.FhirUri({ value: source.contentReference }, options);
        }
        if (source['_contentReference']) {
            if (this.contentReference) {
                this.contentReference.addExtendedProperties(source._contentReference);
            }
            else {
                this.contentReference = new fhir.FhirUri(source._contentReference, options);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.ElementDefinitionType(x, options));
        }
        else {
            this.type = [];
        }
        if (source['defaultValue']) {
            this.defaultValue = source.defaultValue;
        }
        else if (source['defaultValueBase64Binary'] !== undefined) {
            this.defaultValue = new fhir.FhirBase64Binary({ value: source.defaultValueBase64Binary }, options);
        }
        else if (source['defaultValueBoolean'] !== undefined) {
            this.defaultValue = new fhir.FhirBoolean({ value: source.defaultValueBoolean }, options);
        }
        else if (source['defaultValueCode'] !== undefined) {
            this.defaultValue = new fhir.FhirCode({ value: source.defaultValueCode }, options);
        }
        else if (source['defaultValueDate'] !== undefined) {
            this.defaultValue = new fhir.FhirDate({ value: source.defaultValueDate }, options);
        }
        else if (source['defaultValueDateTime'] !== undefined) {
            this.defaultValue = new fhir.FhirDateTime({ value: source.defaultValueDateTime }, options);
        }
        else if (source['defaultValueDecimal'] !== undefined) {
            this.defaultValue = new fhir.FhirDecimal({ value: source.defaultValueDecimal }, options);
        }
        else if (source['defaultValueId'] !== undefined) {
            this.defaultValue = new fhir.FhirId({ value: source.defaultValueId }, options);
        }
        else if (source['defaultValueInstant'] !== undefined) {
            this.defaultValue = new fhir.FhirInstant({ value: source.defaultValueInstant }, options);
        }
        else if (source['defaultValueInteger'] !== undefined) {
            this.defaultValue = new fhir.FhirInteger({ value: source.defaultValueInteger }, options);
        }
        else if (source['defaultValueMarkdown'] !== undefined) {
            this.defaultValue = new fhir.FhirMarkdown({ value: source.defaultValueMarkdown }, options);
        }
        else if (source['defaultValueOid'] !== undefined) {
            this.defaultValue = new fhir.FhirOid({ value: source.defaultValueOid }, options);
        }
        else if (source['defaultValuePositiveInt'] !== undefined) {
            this.defaultValue = new fhir.FhirPositiveInt({ value: source.defaultValuePositiveInt }, options);
        }
        else if (source['defaultValueString'] !== undefined) {
            this.defaultValue = new fhir.FhirString({ value: source.defaultValueString }, options);
        }
        else if (source['defaultValueTime'] !== undefined) {
            this.defaultValue = new fhir.FhirTime({ value: source.defaultValueTime }, options);
        }
        else if (source['defaultValueUnsignedInt'] !== undefined) {
            this.defaultValue = new fhir.FhirUnsignedInt({ value: source.defaultValueUnsignedInt }, options);
        }
        else if (source['defaultValueUri'] !== undefined) {
            this.defaultValue = new fhir.FhirUri({ value: source.defaultValueUri }, options);
        }
        else if (source['defaultValueAddress']) {
            this.defaultValue = new fhir.Address(source.defaultValueAddress, options);
        }
        else if (source['defaultValueAge']) {
            this.defaultValue = new fhir.Age(source.defaultValueAge, options);
        }
        else if (source['defaultValueAnnotation']) {
            this.defaultValue = new fhir.Annotation(source.defaultValueAnnotation, options);
        }
        else if (source['defaultValueAttachment']) {
            this.defaultValue = new fhir.Attachment(source.defaultValueAttachment, options);
        }
        else if (source['defaultValueCodeableConcept']) {
            this.defaultValue = new fhir.CodeableConcept(source.defaultValueCodeableConcept, options);
        }
        else if (source['defaultValueCoding']) {
            this.defaultValue = new fhir.Coding(source.defaultValueCoding, options);
        }
        else if (source['defaultValueContactPoint']) {
            this.defaultValue = new fhir.ContactPoint(source.defaultValueContactPoint, options);
        }
        else if (source['defaultValueCount']) {
            this.defaultValue = new fhir.Count(source.defaultValueCount, options);
        }
        else if (source['defaultValueDistance']) {
            this.defaultValue = new fhir.Distance(source.defaultValueDistance, options);
        }
        else if (source['defaultValueDuration']) {
            this.defaultValue = new fhir.Duration(source.defaultValueDuration, options);
        }
        else if (source['defaultValueHumanName']) {
            this.defaultValue = new fhir.HumanName(source.defaultValueHumanName, options);
        }
        else if (source['defaultValueIdentifier']) {
            this.defaultValue = new fhir.Identifier(source.defaultValueIdentifier, options);
        }
        else if (source['defaultValueMoney']) {
            this.defaultValue = new fhir.Money(source.defaultValueMoney, options);
        }
        else if (source['defaultValuePeriod']) {
            this.defaultValue = new fhir.Period(source.defaultValuePeriod, options);
        }
        else if (source['defaultValueQuantity']) {
            this.defaultValue = new fhir.Quantity(source.defaultValueQuantity, options);
        }
        else if (source['defaultValueRange']) {
            this.defaultValue = new fhir.Range(source.defaultValueRange, options);
        }
        else if (source['defaultValueRatio']) {
            this.defaultValue = new fhir.Ratio(source.defaultValueRatio, options);
        }
        else if (source['defaultValueReference']) {
            this.defaultValue = new fhir.Reference(source.defaultValueReference, options);
        }
        else if (source['defaultValueSampledData']) {
            this.defaultValue = new fhir.SampledData(source.defaultValueSampledData, options);
        }
        else if (source['defaultValueSignature']) {
            this.defaultValue = new fhir.Signature(source.defaultValueSignature, options);
        }
        else if (source['defaultValueTiming']) {
            this.defaultValue = new fhir.Timing(source.defaultValueTiming, options);
        }
        else if (source['defaultValueMeta']) {
            this.defaultValue = new fhir.Meta(source.defaultValueMeta, options);
        }
        if (source['meaningWhenMissing'] !== undefined) {
            this.meaningWhenMissing = new fhir.FhirMarkdown({ value: source.meaningWhenMissing }, options);
        }
        if (source['_meaningWhenMissing']) {
            if (this.meaningWhenMissing) {
                this.meaningWhenMissing.addExtendedProperties(source._meaningWhenMissing);
            }
            else {
                this.meaningWhenMissing = new fhir.FhirMarkdown(source._meaningWhenMissing, options);
            }
        }
        if (source['orderMeaning'] !== undefined) {
            this.orderMeaning = new fhir.FhirString({ value: source.orderMeaning }, options);
        }
        if (source['_orderMeaning']) {
            if (this.orderMeaning) {
                this.orderMeaning.addExtendedProperties(source._orderMeaning);
            }
            else {
                this.orderMeaning = new fhir.FhirString(source._orderMeaning, options);
            }
        }
        if (source['fixed']) {
            this.fixed = source.fixed;
        }
        else if (source['fixedBase64Binary'] !== undefined) {
            this.fixed = new fhir.FhirBase64Binary({ value: source.fixedBase64Binary }, options);
        }
        else if (source['fixedBoolean'] !== undefined) {
            this.fixed = new fhir.FhirBoolean({ value: source.fixedBoolean }, options);
        }
        else if (source['fixedCode'] !== undefined) {
            this.fixed = new fhir.FhirCode({ value: source.fixedCode }, options);
        }
        else if (source['fixedDate'] !== undefined) {
            this.fixed = new fhir.FhirDate({ value: source.fixedDate }, options);
        }
        else if (source['fixedDateTime'] !== undefined) {
            this.fixed = new fhir.FhirDateTime({ value: source.fixedDateTime }, options);
        }
        else if (source['fixedDecimal'] !== undefined) {
            this.fixed = new fhir.FhirDecimal({ value: source.fixedDecimal }, options);
        }
        else if (source['fixedId'] !== undefined) {
            this.fixed = new fhir.FhirId({ value: source.fixedId }, options);
        }
        else if (source['fixedInstant'] !== undefined) {
            this.fixed = new fhir.FhirInstant({ value: source.fixedInstant }, options);
        }
        else if (source['fixedInteger'] !== undefined) {
            this.fixed = new fhir.FhirInteger({ value: source.fixedInteger }, options);
        }
        else if (source['fixedMarkdown'] !== undefined) {
            this.fixed = new fhir.FhirMarkdown({ value: source.fixedMarkdown }, options);
        }
        else if (source['fixedOid'] !== undefined) {
            this.fixed = new fhir.FhirOid({ value: source.fixedOid }, options);
        }
        else if (source['fixedPositiveInt'] !== undefined) {
            this.fixed = new fhir.FhirPositiveInt({ value: source.fixedPositiveInt }, options);
        }
        else if (source['fixedString'] !== undefined) {
            this.fixed = new fhir.FhirString({ value: source.fixedString }, options);
        }
        else if (source['fixedTime'] !== undefined) {
            this.fixed = new fhir.FhirTime({ value: source.fixedTime }, options);
        }
        else if (source['fixedUnsignedInt'] !== undefined) {
            this.fixed = new fhir.FhirUnsignedInt({ value: source.fixedUnsignedInt }, options);
        }
        else if (source['fixedUri'] !== undefined) {
            this.fixed = new fhir.FhirUri({ value: source.fixedUri }, options);
        }
        else if (source['fixedAddress']) {
            this.fixed = new fhir.Address(source.fixedAddress, options);
        }
        else if (source['fixedAge']) {
            this.fixed = new fhir.Age(source.fixedAge, options);
        }
        else if (source['fixedAnnotation']) {
            this.fixed = new fhir.Annotation(source.fixedAnnotation, options);
        }
        else if (source['fixedAttachment']) {
            this.fixed = new fhir.Attachment(source.fixedAttachment, options);
        }
        else if (source['fixedCodeableConcept']) {
            this.fixed = new fhir.CodeableConcept(source.fixedCodeableConcept, options);
        }
        else if (source['fixedCoding']) {
            this.fixed = new fhir.Coding(source.fixedCoding, options);
        }
        else if (source['fixedContactPoint']) {
            this.fixed = new fhir.ContactPoint(source.fixedContactPoint, options);
        }
        else if (source['fixedCount']) {
            this.fixed = new fhir.Count(source.fixedCount, options);
        }
        else if (source['fixedDistance']) {
            this.fixed = new fhir.Distance(source.fixedDistance, options);
        }
        else if (source['fixedDuration']) {
            this.fixed = new fhir.Duration(source.fixedDuration, options);
        }
        else if (source['fixedHumanName']) {
            this.fixed = new fhir.HumanName(source.fixedHumanName, options);
        }
        else if (source['fixedIdentifier']) {
            this.fixed = new fhir.Identifier(source.fixedIdentifier, options);
        }
        else if (source['fixedMoney']) {
            this.fixed = new fhir.Money(source.fixedMoney, options);
        }
        else if (source['fixedPeriod']) {
            this.fixed = new fhir.Period(source.fixedPeriod, options);
        }
        else if (source['fixedQuantity']) {
            this.fixed = new fhir.Quantity(source.fixedQuantity, options);
        }
        else if (source['fixedRange']) {
            this.fixed = new fhir.Range(source.fixedRange, options);
        }
        else if (source['fixedRatio']) {
            this.fixed = new fhir.Ratio(source.fixedRatio, options);
        }
        else if (source['fixedReference']) {
            this.fixed = new fhir.Reference(source.fixedReference, options);
        }
        else if (source['fixedSampledData']) {
            this.fixed = new fhir.SampledData(source.fixedSampledData, options);
        }
        else if (source['fixedSignature']) {
            this.fixed = new fhir.Signature(source.fixedSignature, options);
        }
        else if (source['fixedTiming']) {
            this.fixed = new fhir.Timing(source.fixedTiming, options);
        }
        else if (source['fixedMeta']) {
            this.fixed = new fhir.Meta(source.fixedMeta, options);
        }
        if (source['pattern']) {
            this.pattern = source.pattern;
        }
        else if (source['patternBase64Binary'] !== undefined) {
            this.pattern = new fhir.FhirBase64Binary({ value: source.patternBase64Binary }, options);
        }
        else if (source['patternBoolean'] !== undefined) {
            this.pattern = new fhir.FhirBoolean({ value: source.patternBoolean }, options);
        }
        else if (source['patternCode'] !== undefined) {
            this.pattern = new fhir.FhirCode({ value: source.patternCode }, options);
        }
        else if (source['patternDate'] !== undefined) {
            this.pattern = new fhir.FhirDate({ value: source.patternDate }, options);
        }
        else if (source['patternDateTime'] !== undefined) {
            this.pattern = new fhir.FhirDateTime({ value: source.patternDateTime }, options);
        }
        else if (source['patternDecimal'] !== undefined) {
            this.pattern = new fhir.FhirDecimal({ value: source.patternDecimal }, options);
        }
        else if (source['patternId'] !== undefined) {
            this.pattern = new fhir.FhirId({ value: source.patternId }, options);
        }
        else if (source['patternInstant'] !== undefined) {
            this.pattern = new fhir.FhirInstant({ value: source.patternInstant }, options);
        }
        else if (source['patternInteger'] !== undefined) {
            this.pattern = new fhir.FhirInteger({ value: source.patternInteger }, options);
        }
        else if (source['patternMarkdown'] !== undefined) {
            this.pattern = new fhir.FhirMarkdown({ value: source.patternMarkdown }, options);
        }
        else if (source['patternOid'] !== undefined) {
            this.pattern = new fhir.FhirOid({ value: source.patternOid }, options);
        }
        else if (source['patternPositiveInt'] !== undefined) {
            this.pattern = new fhir.FhirPositiveInt({ value: source.patternPositiveInt }, options);
        }
        else if (source['patternString'] !== undefined) {
            this.pattern = new fhir.FhirString({ value: source.patternString }, options);
        }
        else if (source['patternTime'] !== undefined) {
            this.pattern = new fhir.FhirTime({ value: source.patternTime }, options);
        }
        else if (source['patternUnsignedInt'] !== undefined) {
            this.pattern = new fhir.FhirUnsignedInt({ value: source.patternUnsignedInt }, options);
        }
        else if (source['patternUri'] !== undefined) {
            this.pattern = new fhir.FhirUri({ value: source.patternUri }, options);
        }
        else if (source['patternAddress']) {
            this.pattern = new fhir.Address(source.patternAddress, options);
        }
        else if (source['patternAge']) {
            this.pattern = new fhir.Age(source.patternAge, options);
        }
        else if (source['patternAnnotation']) {
            this.pattern = new fhir.Annotation(source.patternAnnotation, options);
        }
        else if (source['patternAttachment']) {
            this.pattern = new fhir.Attachment(source.patternAttachment, options);
        }
        else if (source['patternCodeableConcept']) {
            this.pattern = new fhir.CodeableConcept(source.patternCodeableConcept, options);
        }
        else if (source['patternCoding']) {
            this.pattern = new fhir.Coding(source.patternCoding, options);
        }
        else if (source['patternContactPoint']) {
            this.pattern = new fhir.ContactPoint(source.patternContactPoint, options);
        }
        else if (source['patternCount']) {
            this.pattern = new fhir.Count(source.patternCount, options);
        }
        else if (source['patternDistance']) {
            this.pattern = new fhir.Distance(source.patternDistance, options);
        }
        else if (source['patternDuration']) {
            this.pattern = new fhir.Duration(source.patternDuration, options);
        }
        else if (source['patternHumanName']) {
            this.pattern = new fhir.HumanName(source.patternHumanName, options);
        }
        else if (source['patternIdentifier']) {
            this.pattern = new fhir.Identifier(source.patternIdentifier, options);
        }
        else if (source['patternMoney']) {
            this.pattern = new fhir.Money(source.patternMoney, options);
        }
        else if (source['patternPeriod']) {
            this.pattern = new fhir.Period(source.patternPeriod, options);
        }
        else if (source['patternQuantity']) {
            this.pattern = new fhir.Quantity(source.patternQuantity, options);
        }
        else if (source['patternRange']) {
            this.pattern = new fhir.Range(source.patternRange, options);
        }
        else if (source['patternRatio']) {
            this.pattern = new fhir.Ratio(source.patternRatio, options);
        }
        else if (source['patternReference']) {
            this.pattern = new fhir.Reference(source.patternReference, options);
        }
        else if (source['patternSampledData']) {
            this.pattern = new fhir.SampledData(source.patternSampledData, options);
        }
        else if (source['patternSignature']) {
            this.pattern = new fhir.Signature(source.patternSignature, options);
        }
        else if (source['patternTiming']) {
            this.pattern = new fhir.Timing(source.patternTiming, options);
        }
        else if (source['patternMeta']) {
            this.pattern = new fhir.Meta(source.patternMeta, options);
        }
        if (source['example']) {
            this.example = source.example.map((x) => new fhir.ElementDefinitionExample(x, options));
        }
        else {
            this.example = [];
        }
        if (source['minValue']) {
            this.minValue = source.minValue;
        }
        else if (source['minValueDate'] !== undefined) {
            this.minValue = new fhir.FhirDate({ value: source.minValueDate }, options);
        }
        else if (source['minValueDateTime'] !== undefined) {
            this.minValue = new fhir.FhirDateTime({ value: source.minValueDateTime }, options);
        }
        else if (source['minValueInstant'] !== undefined) {
            this.minValue = new fhir.FhirInstant({ value: source.minValueInstant }, options);
        }
        else if (source['minValueTime'] !== undefined) {
            this.minValue = new fhir.FhirTime({ value: source.minValueTime }, options);
        }
        else if (source['minValueDecimal'] !== undefined) {
            this.minValue = new fhir.FhirDecimal({ value: source.minValueDecimal }, options);
        }
        else if (source['minValueInteger'] !== undefined) {
            this.minValue = new fhir.FhirInteger({ value: source.minValueInteger }, options);
        }
        else if (source['minValuePositiveInt'] !== undefined) {
            this.minValue = new fhir.FhirPositiveInt({ value: source.minValuePositiveInt }, options);
        }
        else if (source['minValueUnsignedInt'] !== undefined) {
            this.minValue = new fhir.FhirUnsignedInt({ value: source.minValueUnsignedInt }, options);
        }
        else if (source['minValueQuantity']) {
            this.minValue = new fhir.Quantity(source.minValueQuantity, options);
        }
        if (source['maxValue']) {
            this.maxValue = source.maxValue;
        }
        else if (source['maxValueDate'] !== undefined) {
            this.maxValue = new fhir.FhirDate({ value: source.maxValueDate }, options);
        }
        else if (source['maxValueDateTime'] !== undefined) {
            this.maxValue = new fhir.FhirDateTime({ value: source.maxValueDateTime }, options);
        }
        else if (source['maxValueInstant'] !== undefined) {
            this.maxValue = new fhir.FhirInstant({ value: source.maxValueInstant }, options);
        }
        else if (source['maxValueTime'] !== undefined) {
            this.maxValue = new fhir.FhirTime({ value: source.maxValueTime }, options);
        }
        else if (source['maxValueDecimal'] !== undefined) {
            this.maxValue = new fhir.FhirDecimal({ value: source.maxValueDecimal }, options);
        }
        else if (source['maxValueInteger'] !== undefined) {
            this.maxValue = new fhir.FhirInteger({ value: source.maxValueInteger }, options);
        }
        else if (source['maxValuePositiveInt'] !== undefined) {
            this.maxValue = new fhir.FhirPositiveInt({ value: source.maxValuePositiveInt }, options);
        }
        else if (source['maxValueUnsignedInt'] !== undefined) {
            this.maxValue = new fhir.FhirUnsignedInt({ value: source.maxValueUnsignedInt }, options);
        }
        else if (source['maxValueQuantity']) {
            this.maxValue = new fhir.Quantity(source.maxValueQuantity, options);
        }
        if (source['maxLength'] !== undefined) {
            this.maxLength = new fhir.FhirInteger({ value: source.maxLength }, options);
        }
        if (source['_maxLength']) {
            if (this.maxLength) {
                this.maxLength.addExtendedProperties(source._maxLength);
            }
            else {
                this.maxLength = new fhir.FhirInteger(source._maxLength, options);
            }
        }
        if (source['condition'] !== undefined) {
            this.condition = source.condition.map((x) => new fhir.FhirId({ value: x }, options));
        }
        else {
            this.condition = [];
        }
        if (source['_condition']) {
            source._condition.forEach((x, i) => {
                if (this.condition.length >= i) {
                    if (x) {
                        this.condition[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.condition.push(new fhir.FhirId(x));
                    }
                }
            });
        }
        if (source['constraint']) {
            this.constraint = source.constraint.map((x) => new fhir.ElementDefinitionConstraint(x, options));
        }
        else {
            this.constraint = [];
        }
        if (source['mustSupport'] !== undefined) {
            this.mustSupport = new fhir.FhirBoolean({ value: source.mustSupport }, options);
        }
        if (source['_mustSupport']) {
            if (this.mustSupport) {
                this.mustSupport.addExtendedProperties(source._mustSupport);
            }
            else {
                this.mustSupport = new fhir.FhirBoolean(source._mustSupport, options);
            }
        }
        if (source['isModifier'] !== undefined) {
            this.isModifier = new fhir.FhirBoolean({ value: source.isModifier }, options);
        }
        if (source['_isModifier']) {
            if (this.isModifier) {
                this.isModifier.addExtendedProperties(source._isModifier);
            }
            else {
                this.isModifier = new fhir.FhirBoolean(source._isModifier, options);
            }
        }
        if (source['isSummary'] !== undefined) {
            this.isSummary = new fhir.FhirBoolean({ value: source.isSummary }, options);
        }
        if (source['_isSummary']) {
            if (this.isSummary) {
                this.isSummary.addExtendedProperties(source._isSummary);
            }
            else {
                this.isSummary = new fhir.FhirBoolean(source._isSummary, options);
            }
        }
        if (source['binding']) {
            this.binding = new fhir.ElementDefinitionBinding(source.binding, options);
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.ElementDefinitionMapping(x, options));
        }
        else {
            this.mapping = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition';
        }
        iss.push(...this.vRS('path', exp));
        iss.push(...this.vOAV('representation', exp, 'PropertyRepresentation', PropertyRepresentationVsValidation, 'r'));
        iss.push(...this.vOS('sliceName', exp));
        iss.push(...this.vOS('label', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOS('slicing', exp));
        iss.push(...this.vOS('short', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOS('requirements', exp));
        iss.push(...this.vOA('alias', exp));
        iss.push(...this.vOS('min', exp));
        iss.push(...this.vOS('max', exp));
        iss.push(...this.vOS('base', exp));
        iss.push(...this.vOS('contentReference', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('defaultValue', exp));
        iss.push(...this.vOS('meaningWhenMissing', exp));
        iss.push(...this.vOS('orderMeaning', exp));
        iss.push(...this.vOS('fixed', exp));
        iss.push(...this.vOS('pattern', exp));
        iss.push(...this.vOA('example', exp));
        iss.push(...this.vOS('minValue', exp));
        iss.push(...this.vOS('maxValue', exp));
        iss.push(...this.vOS('maxLength', exp));
        iss.push(...this.vOA('condition', exp));
        iss.push(...this.vOA('constraint', exp));
        iss.push(...this.vOS('mustSupport', exp));
        iss.push(...this.vOS('isModifier', exp));
        iss.push(...this.vOS('isSummary', exp));
        iss.push(...this.vOS('binding', exp));
        iss.push(...this.vOA('mapping', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinition._fts_dataType = 'ElementDefinition';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.defaultValue[x]
 */
ElementDefinition._fts_defaultValueIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.fixed[x]
 */
ElementDefinition._fts_fixedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.pattern[x]
 */
ElementDefinition._fts_patternIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.minValue[x]
 */
ElementDefinition._fts_minValueIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.maxValue[x]
 */
ElementDefinition._fts_maxValueIsChoice = true;
//# sourceMappingURL=data:application/json;base64,