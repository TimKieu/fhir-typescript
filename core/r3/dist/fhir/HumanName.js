// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: HumanName
import * as fhir from '../fhir.js';
// @ts-ignore
import { NameUseVsValidation } from '../fhirValueSets/NameUseVsValidation.js';
/**
 * A human's name with the ability to identify parts and usage.
 */
export class HumanName extends fhir.FhirElement {
    /**
     * Default constructor for HumanName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['family']) {
            this.family = new fhir.FhirString({ value: source.family });
        }
        if (source['_family']) {
            if (this.family) {
                this.family.addExtendedProperties(source._family);
            }
            else {
                this.family = new fhir.FhirString(source._family);
            }
        }
        if (source['given']) {
            this.given = source.given.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.given = [];
        }
        if (source['_given']) {
            source._given.forEach((x, i) => {
                if (this.given.length >= i) {
                    if (x) {
                        this.given[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.given.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['prefix']) {
            this.prefix = source.prefix.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.prefix = [];
        }
        if (source['_prefix']) {
            source._prefix.forEach((x, i) => {
                if (this.prefix.length >= i) {
                    if (x) {
                        this.prefix[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.prefix.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['suffix']) {
            this.suffix = source.suffix.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.suffix = [];
        }
        if (source['_suffix']) {
            source._suffix.forEach((x, i) => {
                if (this.suffix.length >= i) {
                    if (x) {
                        this.suffix[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.suffix.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HumanName';
        }
        iss.push(...this.vOSV('use', exp, 'NameUse', NameUseVsValidation, 'r'));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOS('family', exp));
        iss.push(...this.vOA('given', exp));
        iss.push(...this.vOA('prefix', exp));
        iss.push(...this.vOA('suffix', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
    /**
     * Convert a HumanName into a displayable string
     */
    toDisplay(familyFirst = true, includeAnnotations = false) {
        if ((this.text) && (this.text.length > 0)) {
            return this.text.toString();
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family.toString();
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HumanName._fts_dataType = 'HumanName';
//# sourceMappingURL=data:application/json;base64,