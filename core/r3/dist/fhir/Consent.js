// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Consent
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConsentDataMeaningVsValidation } from '../fhirValueSets/ConsentDataMeaningVsValidation.js';
// @ts-ignore
import { ConsentExceptTypeVsValidation } from '../fhirValueSets/ConsentExceptTypeVsValidation.js';
// @ts-ignore
import { ConsentStateVsValidation } from '../fhirValueSets/ConsentStateVsValidation.js';
/**
 * Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
 */
export class ConsentActor extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.actor';
        }
        this.vRS('role', exp);
        this.vRS('reference', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentActor._fts_dataType = 'ConsentActor';
/**
 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
 */
export class ConsentPolicy extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentPolicy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authority']) {
            this.authority = new fhir.FhirUri({ value: source.authority });
        }
        if (source['_authority']) {
            if (this.authority) {
                this.authority.addExtendedProperties(source._authority);
            }
            else {
                this.authority = new fhir.FhirUri(source._authority);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.policy';
        }
        this.vOS('authority', exp);
        this.vOS('uri', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentPolicy._fts_dataType = 'ConsentPolicy';
/**
 * The resources controlled by this consent, if specific resources are referenced.
 */
export class ConsentData extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['meaning']) {
            this.meaning = new fhir.FhirCode({ value: source.meaning });
        }
        else {
            this.meaning = null;
        }
        if (source['_meaning']) {
            if (this.meaning) {
                this.meaning.addExtendedProperties(source._meaning);
            }
            else {
                this.meaning = new fhir.FhirCode(source._meaning);
            }
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.data';
        }
        this.vRSV('meaning', exp, 'ConsentDataMeaning', ConsentDataMeaningVsValidation, 'r');
        this.vRS('reference', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentData._fts_dataType = 'ConsentData';
/**
 * Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
 */
export class ConsentExceptActor extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentExceptActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.except.actor';
        }
        this.vRS('role', exp);
        this.vRS('reference', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentExceptActor._fts_dataType = 'ConsentExceptActor';
/**
 * The resources controlled by this exception, if specific resources are referenced.
 */
export class ConsentExceptData extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentExceptData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['meaning']) {
            this.meaning = new fhir.FhirCode({ value: source.meaning });
        }
        else {
            this.meaning = null;
        }
        if (source['_meaning']) {
            if (this.meaning) {
                this.meaning.addExtendedProperties(source._meaning);
            }
            else {
                this.meaning = new fhir.FhirCode(source._meaning);
            }
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.except.data';
        }
        this.vRSV('meaning', exp, 'ConsentDataMeaning', ConsentDataMeaningVsValidation, 'r');
        this.vRS('reference', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentExceptData._fts_dataType = 'ConsentExceptData';
/**
 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
 */
export class ConsentExcept extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentExcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ConsentExceptActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.action = [];
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => new fhir.Coding(x));
        }
        else {
            this.purpose = [];
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.Coding(x));
        }
        else {
            this.class = [];
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['dataPeriod']) {
            this.dataPeriod = new fhir.Period(source.dataPeriod);
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.ConsentExceptData(x));
        }
        else {
            this.data = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.except';
        }
        this.vRSV('type', exp, 'ConsentExceptType', ConsentExceptTypeVsValidation, 'r');
        this.vOS('period', exp);
        this.vOA('actor', exp);
        this.vOA('action', exp);
        this.vOA('securityLabel', exp);
        this.vOA('purpose', exp);
        this.vOA('class', exp);
        this.vOA('code', exp);
        this.vOS('dataPeriod', exp);
        this.vOA('data', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentExcept._fts_dataType = 'ConsentExcept';
/**
 * A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
export class Consent extends fhir.DomainResource {
    /**
     * Default constructor for Consent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Consent';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        if (source['_dateTime']) {
            if (this.dateTime) {
                this.dateTime.addExtendedProperties(source._dateTime);
            }
            else {
                this.dateTime = new fhir.FhirDateTime(source._dateTime);
            }
        }
        if (source['consentingParty']) {
            this.consentingParty = source.consentingParty.map((x) => new fhir.Reference(x));
        }
        else {
            this.consentingParty = [];
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ConsentActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.action = [];
        }
        if (source['organization']) {
            this.organization = source.organization.map((x) => new fhir.Reference(x));
        }
        else {
            this.organization = [];
        }
        if (source['source']) {
            this.source = source.source;
        }
        else if (source['sourceAttachment']) {
            this.source = new fhir.Attachment(source.sourceAttachment);
        }
        else if (source['sourceIdentifier']) {
            this.source = new fhir.Identifier(source.sourceIdentifier);
        }
        else if (source['sourceReference']) {
            this.source = new fhir.Reference(source.sourceReference);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.ConsentPolicy(x));
        }
        else {
            this.policy = [];
        }
        if (source['policyRule']) {
            this.policyRule = new fhir.FhirUri({ value: source.policyRule });
        }
        if (source['_policyRule']) {
            if (this.policyRule) {
                this.policyRule.addExtendedProperties(source._policyRule);
            }
            else {
                this.policyRule = new fhir.FhirUri(source._policyRule);
            }
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => new fhir.Coding(x));
        }
        else {
            this.purpose = [];
        }
        if (source['dataPeriod']) {
            this.dataPeriod = new fhir.Period(source.dataPeriod);
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.ConsentData(x));
        }
        else {
            this.data = [];
        }
        if (source['except']) {
            this.except = source.except.map((x) => new fhir.ConsentExcept(x));
        }
        else {
            this.except = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent';
        }
        this.vRS('resourceType', exp);
        this.vOS('identifier', exp);
        this.vRSV('status', exp, 'ConsentState', ConsentStateVsValidation, 'r');
        this.vOA('category', exp);
        this.vRS('patient', exp);
        this.vOS('period', exp);
        this.vOS('dateTime', exp);
        this.vOA('consentingParty', exp);
        this.vOA('actor', exp);
        this.vOA('action', exp);
        this.vOA('organization', exp);
        this.vOS('source', exp);
        this.vOA('policy', exp);
        this.vOS('policyRule', exp);
        this.vOA('securityLabel', exp);
        this.vOA('purpose', exp);
        this.vOS('dataPeriod', exp);
        this.vOA('data', exp);
        this.vOA('except', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Consent._fts_dataType = 'Consent';
/**
 * Internal flag to properly serialize choice-type element Consent.source[x]
 */
Consent._fts_sourceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,