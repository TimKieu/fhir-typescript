// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyDelivery
import * as fhir from '../fhir.js';
// @ts-ignore
import { SupplydeliveryStatusVsValidation } from '../fhirValueSets/SupplydeliveryStatusVsValidation.js';
// @ts-ignore
import { SupplydeliveryTypeVsValidation } from '../fhirValueSets/SupplydeliveryTypeVsValidation.js';
/**
 * The item that is being delivered or has been supplied.
 */
export class SupplyDeliverySuppliedItem extends fhir.BackboneElement {
    /**
     * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SupplyDelivery.suppliedItem';
        }
        this.vOS('quantity', exp);
        this.vOS('item', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SupplyDeliverySuppliedItem._fts_dataType = 'SupplyDeliverySuppliedItem';
/**
 * Internal flag to properly serialize choice-type element SupplyDelivery.suppliedItem.item[x]
 */
SupplyDeliverySuppliedItem._fts_itemIsChoice = true;
/**
 * Record of delivery of what is supplied.
 */
export class SupplyDelivery extends fhir.DomainResource {
    /**
     * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SupplyDelivery';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['suppliedItem']) {
            this.suppliedItem = new fhir.SupplyDeliverySuppliedItem(source.suppliedItem);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['supplier']) {
            this.supplier = new fhir.Reference(source.supplier);
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x));
        }
        else {
            this.receiver = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SupplyDelivery';
        }
        this.vRS('resourceType', exp);
        this.vOS('identifier', exp);
        this.vOA('basedOn', exp);
        this.vOA('partOf', exp);
        this.vOSV('status', exp, 'SupplydeliveryStatus', SupplydeliveryStatusVsValidation, 'r');
        this.vOS('patient', exp);
        this.vOSV('type', exp, 'SupplydeliveryType', SupplydeliveryTypeVsValidation, 'r');
        this.vOS('suppliedItem', exp);
        this.vOS('occurrence', exp);
        this.vOS('supplier', exp);
        this.vOS('destination', exp);
        this.vOA('receiver', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SupplyDelivery._fts_dataType = 'SupplyDelivery';
/**
 * Internal flag to properly serialize choice-type element SupplyDelivery.occurrence[x]
 */
SupplyDelivery._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,