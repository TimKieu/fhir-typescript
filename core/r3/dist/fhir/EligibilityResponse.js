// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: EligibilityResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * Benefits Used to date.
 */
export class EligibilityResponseInsuranceBenefitBalanceFinancial extends fhir.BackboneElement {
    /**
     * Default constructor for EligibilityResponseInsuranceBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt']) {
            this.allowed = new fhir.FhirUnsignedInt({ value: source.allowedUnsignedInt });
        }
        else if (source['allowedString']) {
            this.allowed = new fhir.FhirString({ value: source.allowedString });
        }
        else if (source['allowedMoney']) {
            this.allowed = new fhir.Money(source.allowedMoney);
        }
        if (source['used']) {
            this.used = source.used;
        }
        else if (source['usedUnsignedInt']) {
            this.used = new fhir.FhirUnsignedInt({ value: source.usedUnsignedInt });
        }
        else if (source['usedMoney']) {
            this.used = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EligibilityResponse.insurance.benefitBalance.financial';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('allowed', exp));
        iss.push(...this.vOS('used', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EligibilityResponseInsuranceBenefitBalanceFinancial._fts_dataType = 'EligibilityResponseInsuranceBenefitBalanceFinancial';
/**
 * Internal flag to properly serialize choice-type element EligibilityResponse.insurance.benefitBalance.financial.allowed[x]
 */
EligibilityResponseInsuranceBenefitBalanceFinancial._fts_allowedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element EligibilityResponse.insurance.benefitBalance.financial.used[x]
 */
EligibilityResponseInsuranceBenefitBalanceFinancial._fts_usedIsChoice = true;
/**
 * Benefits and optionally current balances by Category.
 */
export class EligibilityResponseInsuranceBenefitBalance extends fhir.BackboneElement {
    /**
     * Default constructor for EligibilityResponseInsuranceBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['subCategory']) {
            this.subCategory = new fhir.CodeableConcept(source.subCategory);
        }
        if (source['excluded']) {
            this.excluded = new fhir.FhirBoolean({ value: source.excluded });
        }
        if (source['_excluded']) {
            if (this.excluded) {
                this.excluded.addExtendedProperties(source._excluded);
            }
            else {
                this.excluded = new fhir.FhirBoolean(source._excluded);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['financial']) {
            this.financial = source.financial.map((x) => new fhir.EligibilityResponseInsuranceBenefitBalanceFinancial(x));
        }
        else {
            this.financial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EligibilityResponse.insurance.benefitBalance';
        }
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOS('subCategory', exp));
        iss.push(...this.vOS('excluded', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOS('unit', exp));
        iss.push(...this.vOS('term', exp));
        iss.push(...this.vOA('financial', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EligibilityResponseInsuranceBenefitBalance._fts_dataType = 'EligibilityResponseInsuranceBenefitBalance';
/**
 * The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer.
 */
export class EligibilityResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for EligibilityResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        if (source['contract']) {
            this.contract = new fhir.Reference(source.contract);
        }
        if (source['benefitBalance']) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhir.EligibilityResponseInsuranceBenefitBalance(x));
        }
        else {
            this.benefitBalance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EligibilityResponse.insurance';
        }
        iss.push(...this.vOS('coverage', exp));
        iss.push(...this.vOS('contract', exp));
        iss.push(...this.vOA('benefitBalance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EligibilityResponseInsurance._fts_dataType = 'EligibilityResponseInsurance';
/**
 * Mutually exclusive with Services Provided (Item).
 */
export class EligibilityResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for EligibilityResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EligibilityResponse.error';
        }
        iss.push(...this.vRS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EligibilityResponseError._fts_dataType = 'EligibilityResponseError';
/**
 * This resource provides eligibility and plan details from the processing of an Eligibility resource.
 */
export class EligibilityResponse extends fhir.DomainResource {
    /**
     * Default constructor for EligibilityResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EligibilityResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['requestProvider']) {
            this.requestProvider = new fhir.Reference(source.requestProvider);
        }
        if (source['requestOrganization']) {
            this.requestOrganization = new fhir.Reference(source.requestOrganization);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition);
            }
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (source['inforce']) {
            this.inforce = new fhir.FhirBoolean({ value: source.inforce });
        }
        if (source['_inforce']) {
            if (this.inforce) {
                this.inforce.addExtendedProperties(source._inforce);
            }
            else {
                this.inforce = new fhir.FhirBoolean(source._inforce);
            }
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.EligibilityResponseInsurance(x));
        }
        else {
            this.insurance = [];
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.EligibilityResponseError(x));
        }
        else {
            this.error = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EligibilityResponse';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('requestProvider', exp));
        iss.push(...this.vOS('requestOrganization', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOSV('outcome', exp, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r'));
        iss.push(...this.vOS('disposition', exp));
        iss.push(...this.vOS('insurer', exp));
        iss.push(...this.vOS('inforce', exp));
        iss.push(...this.vOA('insurance', exp));
        iss.push(...this.vOS('form', exp));
        iss.push(...this.vOA('error', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EligibilityResponse._fts_dataType = 'EligibilityResponse';
//# sourceMappingURL=data:application/json;base64,