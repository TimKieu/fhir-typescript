// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Observation
import * as fhir from '../fhir.js';
// @ts-ignore
import { ObservationRelationshiptypesVsValidation } from '../fhirValueSets/ObservationRelationshiptypesVsValidation.js';
// @ts-ignore
import { ObservationStatusVsValidation } from '../fhirValueSets/ObservationStatusVsValidation.js';
/**
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
export class ObservationReferenceRange extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationReferenceRange - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['low']) {
            this.low = new fhir.Quantity(source.low);
        }
        if (source['high']) {
            this.high = new fhir.Quantity(source.high);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['appliesTo']) {
            this.appliesTo = source.appliesTo.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.appliesTo = [];
        }
        if (source['age']) {
            this.age = new fhir.Range(source.age);
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Observation.referenceRange';
        }
        iss.push(...this.vOS('low', exp));
        iss.push(...this.vOS('high', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('appliesTo', exp));
        iss.push(...this.vOS('age', exp));
        iss.push(...this.vOS('text', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationReferenceRange._fts_dataType = 'ObservationReferenceRange';
/**
 * For a discussion on the ways Observations can assembled in groups together see [Notes below](observation.html#4.20.4).
 */
export class ObservationRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Observation.related';
        }
        iss.push(...this.vOSV('type', exp, 'ObservationRelationshiptypes', ObservationRelationshiptypesVsValidation, 'r'));
        iss.push(...this.vRS('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationRelated._fts_dataType = 'ObservationRelated';
/**
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
export class ObservationComponent extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['interpretation']) {
            this.interpretation = new fhir.CodeableConcept(source.interpretation);
        }
        if (source['referenceRange']) {
            this.referenceRange = source.referenceRange.map((x) => new fhir.ObservationReferenceRange(x));
        }
        else {
            this.referenceRange = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Observation.component';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('dataAbsentReason', exp));
        iss.push(...this.vOS('interpretation', exp));
        iss.push(...this.vOA('referenceRange', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationComponent._fts_dataType = 'ObservationComponent';
/**
 * Internal flag to properly serialize choice-type element Observation.component.value[x]
 */
ObservationComponent._fts_valueIsChoice = true;
/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
export class Observation extends fhir.DomainResource {
    /**
     * Default constructor for Observation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Observation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirInstant(source._issued);
            }
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['interpretation']) {
            this.interpretation = new fhir.CodeableConcept(source.interpretation);
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['specimen']) {
            this.specimen = new fhir.Reference(source.specimen);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['referenceRange']) {
            this.referenceRange = source.referenceRange.map((x) => new fhir.ObservationReferenceRange(x));
        }
        else {
            this.referenceRange = [];
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ObservationRelated(x));
        }
        else {
            this.related = [];
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.ObservationComponent(x));
        }
        else {
            this.component = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Observation';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vRSV('status', exp, 'ObservationStatus', ObservationStatusVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('effective', exp));
        iss.push(...this.vOS('issued', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('dataAbsentReason', exp));
        iss.push(...this.vOS('interpretation', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('specimen', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOA('referenceRange', exp));
        iss.push(...this.vOA('related', exp));
        iss.push(...this.vOA('component', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Observation._fts_dataType = 'Observation';
/**
 * Internal flag to properly serialize choice-type element Observation.effective[x]
 */
Observation._fts_effectiveIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Observation.value[x]
 */
Observation._fts_valueIsChoice = true;
//# sourceMappingURL=data:application/json;base64,