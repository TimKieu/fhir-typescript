// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: GuidanceResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { GuidanceResponseStatusVsValidation } from '../fhirValueSets/GuidanceResponseStatusVsValidation.js';
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export class GuidanceResponse extends fhir.DomainResource {
    /**
     * Default constructor for GuidanceResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'GuidanceResponse';
        if (source['requestId'] !== undefined) {
            this.requestId = new fhir.FhirId({ value: source.requestId }, options);
        }
        if (source['_requestId']) {
            if (this.requestId) {
                this.requestId.addExtendedProperties(source._requestId);
            }
            else {
                this.requestId = new fhir.FhirId(source._requestId, options);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['module']) {
            this.module = new fhir.Reference(source.module, options);
        }
        else {
            this.module = null;
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['occurrenceDateTime'] !== undefined) {
            this.occurrenceDateTime = new fhir.FhirDateTime({ value: source.occurrenceDateTime }, options);
        }
        if (source['_occurrenceDateTime']) {
            if (this.occurrenceDateTime) {
                this.occurrenceDateTime.addExtendedProperties(source._occurrenceDateTime);
            }
            else {
                this.occurrenceDateTime = new fhir.FhirDateTime(source._occurrenceDateTime, options);
            }
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer, options);
        }
        if (source['reason']) {
            this.reason = source.reason;
        }
        else if (source['reasonCodeableConcept']) {
            this.reason = new fhir.CodeableConcept(source.reasonCodeableConcept, options);
        }
        else if (source['reasonReference']) {
            this.reason = new fhir.Reference(source.reasonReference, options);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['evaluationMessage']) {
            this.evaluationMessage = source.evaluationMessage.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.evaluationMessage = [];
        }
        if (source['outputParameters']) {
            this.outputParameters = new fhir.Reference(source.outputParameters, options);
        }
        if (source['result']) {
            this.result = new fhir.Reference(source.result, options);
        }
        if (source['dataRequirement']) {
            this.dataRequirement = source.dataRequirement.map((x) => new fhir.DataRequirement(x, options));
        }
        else {
            this.dataRequirement = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'GuidanceResponse';
        }
        iss.push(...this.vOS('requestId', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRS('module', exp));
        iss.push(...this.vRSV('status', exp, 'GuidanceResponseStatus', GuidanceResponseStatusVsValidation, 'r'));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('occurrenceDateTime', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('evaluationMessage', exp));
        iss.push(...this.vOS('outputParameters', exp));
        iss.push(...this.vOS('result', exp));
        iss.push(...this.vOA('dataRequirement', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GuidanceResponse._fts_dataType = 'GuidanceResponse';
/**
 * Internal flag to properly serialize choice-type element GuidanceResponse.reason[x]
 */
GuidanceResponse._fts_reasonIsChoice = true;
//# sourceMappingURL=data:application/json;base64,