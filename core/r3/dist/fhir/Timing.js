// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Timing
import * as fhir from '../fhir.js';
// @ts-ignore
import { UnitsOfTimeVsValidation } from '../fhirValueSets/UnitsOfTimeVsValidation.js';
// @ts-ignore
import { DaysOfWeekVsValidation } from '../fhirValueSets/DaysOfWeekVsValidation.js';
// @ts-ignore
import { EventTimingVsValidation } from '../fhirValueSets/EventTimingVsValidation.js';
/**
 * A set of rules that describe when the event is scheduled.
 */
export class TimingRepeat extends fhir.FhirElement {
    /**
     * Default constructor for TimingRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['bounds']) {
            this.bounds = source.bounds;
        }
        else if (source['boundsDuration']) {
            this.bounds = new fhir.Duration(source.boundsDuration);
        }
        else if (source['boundsRange']) {
            this.bounds = new fhir.Range(source.boundsRange);
        }
        else if (source['boundsPeriod']) {
            this.bounds = new fhir.Period(source.boundsPeriod);
        }
        if (source['count']) {
            this.count = new fhir.FhirInteger({ value: source.count });
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirInteger(source._count);
            }
        }
        if (source['countMax']) {
            this.countMax = new fhir.FhirInteger({ value: source.countMax });
        }
        if (source['_countMax']) {
            if (this.countMax) {
                this.countMax.addExtendedProperties(source._countMax);
            }
            else {
                this.countMax = new fhir.FhirInteger(source._countMax);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirDecimal(source._duration);
            }
        }
        if (source['durationMax']) {
            this.durationMax = new fhir.FhirDecimal({ value: source.durationMax });
        }
        if (source['_durationMax']) {
            if (this.durationMax) {
                this.durationMax.addExtendedProperties(source._durationMax);
            }
            else {
                this.durationMax = new fhir.FhirDecimal(source._durationMax);
            }
        }
        if (source['durationUnit']) {
            this.durationUnit = new fhir.FhirCode({ value: source.durationUnit });
        }
        if (source['_durationUnit']) {
            if (this.durationUnit) {
                this.durationUnit.addExtendedProperties(source._durationUnit);
            }
            else {
                this.durationUnit = new fhir.FhirCode(source._durationUnit);
            }
        }
        if (source['frequency']) {
            this.frequency = new fhir.FhirInteger({ value: source.frequency });
        }
        if (source['_frequency']) {
            if (this.frequency) {
                this.frequency.addExtendedProperties(source._frequency);
            }
            else {
                this.frequency = new fhir.FhirInteger(source._frequency);
            }
        }
        if (source['frequencyMax']) {
            this.frequencyMax = new fhir.FhirInteger({ value: source.frequencyMax });
        }
        if (source['_frequencyMax']) {
            if (this.frequencyMax) {
                this.frequencyMax.addExtendedProperties(source._frequencyMax);
            }
            else {
                this.frequencyMax = new fhir.FhirInteger(source._frequencyMax);
            }
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        if (source['_period']) {
            if (this.period) {
                this.period.addExtendedProperties(source._period);
            }
            else {
                this.period = new fhir.FhirDecimal(source._period);
            }
        }
        if (source['periodMax']) {
            this.periodMax = new fhir.FhirDecimal({ value: source.periodMax });
        }
        if (source['_periodMax']) {
            if (this.periodMax) {
                this.periodMax.addExtendedProperties(source._periodMax);
            }
            else {
                this.periodMax = new fhir.FhirDecimal(source._periodMax);
            }
        }
        if (source['periodUnit']) {
            this.periodUnit = new fhir.FhirCode({ value: source.periodUnit });
        }
        if (source['_periodUnit']) {
            if (this.periodUnit) {
                this.periodUnit.addExtendedProperties(source._periodUnit);
            }
            else {
                this.periodUnit = new fhir.FhirCode(source._periodUnit);
            }
        }
        if (source['dayOfWeek']) {
            this.dayOfWeek = source.dayOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.dayOfWeek = [];
        }
        if (source['_dayOfWeek']) {
            source._dayOfWeek.forEach((x, i) => {
                if (this.dayOfWeek.length >= i) {
                    if (x) {
                        this.dayOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.dayOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['timeOfDay']) {
            this.timeOfDay = source.timeOfDay.map((x) => new fhir.FhirTime({ value: x }));
        }
        else {
            this.timeOfDay = [];
        }
        if (source['_timeOfDay']) {
            source._timeOfDay.forEach((x, i) => {
                if (this.timeOfDay.length >= i) {
                    if (x) {
                        this.timeOfDay[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.timeOfDay.push(new fhir.FhirTime(x));
                    }
                }
            });
        }
        if (source['when']) {
            this.when = source.when.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.when = [];
        }
        if (source['_when']) {
            source._when.forEach((x, i) => {
                if (this.when.length >= i) {
                    if (x) {
                        this.when[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.when.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['offset']) {
            this.offset = new fhir.FhirUnsignedInt({ value: source.offset });
        }
        if (source['_offset']) {
            if (this.offset) {
                this.offset.addExtendedProperties(source._offset);
            }
            else {
                this.offset = new fhir.FhirUnsignedInt(source._offset);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Timing.repeat';
        }
        this.vOS('bounds', exp);
        this.vOS('count', exp);
        this.vOS('countMax', exp);
        this.vOS('duration', exp);
        this.vOS('durationMax', exp);
        this.vOSV('durationUnit', exp, 'UnitsOfTime', UnitsOfTimeVsValidation, 'r');
        this.vOS('frequency', exp);
        this.vOS('frequencyMax', exp);
        this.vOS('period', exp);
        this.vOS('periodMax', exp);
        this.vOSV('periodUnit', exp, 'UnitsOfTime', UnitsOfTimeVsValidation, 'r');
        this.vOAV('dayOfWeek', exp, 'DaysOfWeek', DaysOfWeekVsValidation, 'r');
        this.vOA('timeOfDay', exp);
        this.vOAV('when', exp, 'EventTiming', EventTimingVsValidation, 'r');
        this.vOS('offset', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TimingRepeat._fts_dataType = 'TimingRepeat';
/**
 * Internal flag to properly serialize choice-type element Timing.repeat.bounds[x]
 */
TimingRepeat._fts_boundsIsChoice = true;
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
export class Timing extends fhir.FhirElement {
    /**
     * Default constructor for Timing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.FhirDateTime({ value: x }));
        }
        else {
            this.event = [];
        }
        if (source['_event']) {
            source._event.forEach((x, i) => {
                if (this.event.length >= i) {
                    if (x) {
                        this.event[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.event.push(new fhir.FhirDateTime(x));
                    }
                }
            });
        }
        if (source['repeat']) {
            this.repeat = new fhir.TimingRepeat(source.repeat);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Timing';
        }
        this.vOA('event', exp);
        this.vOS('repeat', exp);
        this.vOS('code', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Timing._fts_dataType = 'Timing';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltaW5nLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9UaW1pbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMkJBQTJCO0FBRTNCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUd0RixhQUFhO0FBQ2IsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFHcEYsYUFBYTtBQUNiLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBMkl0Rjs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFhLFNBQVEsSUFBSSxDQUFDLFdBQVc7SUFxRWhEOztPQUVHO0lBQ0gsWUFBWSxTQUFtQyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN6RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQUU7YUFDakQsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUFFO2FBQ3pGLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQUU7YUFDaEYsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE1B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Q0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQUU7SUFDNUUsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsTUFBYSxFQUFFO1FBQy9DLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUQsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQTtTQUFFO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3BCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBMUNEOztHQUVHO0FBQzZCLG9CQUFhLEdBQVUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIENvbXBsZXhUeXBlOiBUaW1pbmdcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFVuaXRzT2ZUaW1lQ29kZXMsICBVbml0c09mVGltZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Vbml0c09mVGltZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBVbml0c09mVGltZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVW5pdHNPZlRpbWVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERheXNPZldlZWtDb2RlcywgIERheXNPZldlZWtDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRGF5c09mV2Vla0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEYXlzT2ZXZWVrVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EYXlzT2ZXZWVrVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFdmVudFRpbWluZ0NvZGVzLCAgRXZlbnRUaW1pbmdDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRXZlbnRUaW1pbmdDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXZlbnRUaW1pbmdWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V2ZW50VGltaW5nVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBUaW1pbmdBYmJyZXZpYXRpb25Db2RlcywgIFRpbWluZ0FiYnJldmlhdGlvbkNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9UaW1pbmdBYmJyZXZpYXRpb25Db2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVGltaW5nQWJicmV2aWF0aW9uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9UaW1pbmdBYmJyZXZpYXRpb25Wc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVGltaW5nUmVwZWF0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRpbWluZ1JlcGVhdEFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogRWl0aGVyIGEgZHVyYXRpb24gZm9yIHRoZSBsZW5ndGggb2YgdGhlIHRpbWluZyBzY2hlZHVsZSwgYSByYW5nZSBvZiBwb3NzaWJsZSBsZW5ndGgsIG9yIG91dGVyIGJvdW5kcyBmb3Igc3RhcnQgYW5kL29yIGVuZCBsaW1pdHMgb2YgdGhlIHRpbWluZyBzY2hlZHVsZS5cclxuICAgKi9cclxuICBib3VuZHM/OiBmaGlyLkR1cmF0aW9ufGZoaXIuUmFuZ2V8Zmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEVpdGhlciBhIGR1cmF0aW9uIGZvciB0aGUgbGVuZ3RoIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUsIGEgcmFuZ2Ugb2YgcG9zc2libGUgbGVuZ3RoLCBvciBvdXRlciBib3VuZHMgZm9yIHN0YXJ0IGFuZC9vciBlbmQgbGltaXRzIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUuXHJcbiAgICovXHJcbiAgYm91bmRzRHVyYXRpb24/OiBmaGlyLkR1cmF0aW9uQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWl0aGVyIGEgZHVyYXRpb24gZm9yIHRoZSBsZW5ndGggb2YgdGhlIHRpbWluZyBzY2hlZHVsZSwgYSByYW5nZSBvZiBwb3NzaWJsZSBsZW5ndGgsIG9yIG91dGVyIGJvdW5kcyBmb3Igc3RhcnQgYW5kL29yIGVuZCBsaW1pdHMgb2YgdGhlIHRpbWluZyBzY2hlZHVsZS5cclxuICAgKi9cclxuICBib3VuZHNSYW5nZT86IGZoaXIuUmFuZ2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFaXRoZXIgYSBkdXJhdGlvbiBmb3IgdGhlIGxlbmd0aCBvZiB0aGUgdGltaW5nIHNjaGVkdWxlLCBhIHJhbmdlIG9mIHBvc3NpYmxlIGxlbmd0aCwgb3Igb3V0ZXIgYm91bmRzIGZvciBzdGFydCBhbmQvb3IgZW5kIGxpbWl0cyBvZiB0aGUgdGltaW5nIHNjaGVkdWxlLlxyXG4gICAqL1xyXG4gIGJvdW5kc1BlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgeW91IGhhdmUgYm90aCBib3VuZHMgYW5kIGNvdW50LCB0aGVuIHRoaXMgc2hvdWxkIGJlIHVuZGVyc3Rvb2QgYXMgd2l0aGluIHRoZSBib3VuZHMgcGVyaW9kLCB1bnRpbCBjb3VudCB0aW1lcyBoYXBwZW5zLlxyXG4gICAqL1xyXG4gIGNvdW50PzogZmhpci5GaGlySW50ZWdlcnxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUaW1pbmcucmVwZWF0LmNvdW50XHJcbiAgICovXHJcbiAgX2NvdW50PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIG1heGltdW0gdmFsdWUgZm9yIHRoZSBjb3VudCBvZiB0aGUgZGVzaXJlZCByZXBldGl0aW9ucyAoZS5nLiBkbyBzb21ldGhpbmcgNi04IHRpbWVzKS5cclxuICAgKi9cclxuICBjb3VudE1heD86IGZoaXIuRmhpckludGVnZXJ8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGltaW5nLnJlcGVhdC5jb3VudE1heFxyXG4gICAqL1xyXG4gIF9jb3VudE1heD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogRm9yIHNvbWUgZXZlbnRzIHRoZSBkdXJhdGlvbiBpcyBwYXJ0IG9mIHRoZSBkZWZpbml0aW9uIG9mIHRoZSBldmVudCAoZS5nLiBJViBpbmZ1c2lvbnMsIHdoZXJlIHRoZSBkdXJhdGlvbiBpcyBpbXBsaWNpdCBpbiB0aGUgc3BlY2lmaWVkIHF1YW50aXR5IGFuZCByYXRlKS4gRm9yIG90aGVycywgaXQncyBwYXJ0IG9mIHRoZSB0aW1pbmcgc3BlY2lmaWNhdGlvbiAoZS5nLiBleGVyY2lzZSkuXHJcbiAgICovXHJcbiAgZHVyYXRpb24/OiBmaGlyLkZoaXJEZWNpbWFsfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRpbWluZy5yZXBlYXQuZHVyYXRpb25cclxuICAgKi9cclxuICBfZHVyYXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEZvciBzb21lIGV2ZW50cyB0aGUgZHVyYXRpb24gaXMgcGFydCBvZiB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgZXZlbnQgKGUuZy4gSVYgaW5mdXNpb25zLCB3aGVyZSB0aGUgZHVyYXRpb24gaXMgaW1wbGljaXQgaW4gdGhlIHNwZWNpZmllZCBxdWFudGl0eSBhbmQgcmF0ZSkuIEZvciBvdGhlcnMsIGl0J3MgcGFydCBvZiB0aGUgdGltaW5nIHNwZWNpZmljYXRpb24gKGUuZy4gZXhlcmNpc2UpLlxyXG4gICAqL1xyXG4gIGR1cmF0aW9uTWF4PzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUaW1pbmcucmVwZWF0LmR1cmF0aW9uTWF4XHJcbiAgICovXHJcbiAgX2R1cmF0aW9uTWF4PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgdW5pdHMgb2YgdGltZSBmb3IgdGhlIGR1cmF0aW9uLCBpbiBVQ1VNIHVuaXRzLlxyXG4gICAqL1xyXG4gIGR1cmF0aW9uVW5pdD86IGZoaXIuRmhpckNvZGU8VW5pdHNPZlRpbWVDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGltaW5nLnJlcGVhdC5kdXJhdGlvblVuaXRcclxuICAgKi9cclxuICBfZHVyYXRpb25Vbml0PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYWN0aW9uIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHBlcmlvZCAvIHBlcmlvZCByYW5nZSAoaS5lLiBib3RoIHBlcmlvZCBhbmQgcGVyaW9kTWF4IHByb3ZpZGVkKS5cclxuICAgKi9cclxuICBmcmVxdWVuY3k/OiBmaGlyLkZoaXJJbnRlZ2VyfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRpbWluZy5yZXBlYXQuZnJlcXVlbmN5XHJcbiAgICovXHJcbiAgX2ZyZXF1ZW5jeT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoYXQgdGhlIGZyZXF1ZW5jeSBpcyBhIHJhbmdlIC0gc28gdG8gcmVwZWF0IGJldHdlZW4gW2ZyZXF1ZW5jeV0gYW5kIFtmcmVxdWVuY3lNYXhdIHRpbWVzIHdpdGhpbiB0aGUgcGVyaW9kIG9yIHBlcmlvZCByYW5nZS5cclxuICAgKi9cclxuICBmcmVxdWVuY3lNYXg/OiBmaGlyLkZoaXJJbnRlZ2VyfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRpbWluZy5yZXBlYXQuZnJlcXVlbmN5TWF4XHJcbiAgICovXHJcbiAgX2ZyZXF1ZW5jeU1heD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSBkdXJhdGlvbiBvZiB0aW1lIG92ZXIgd2hpY2ggcmVwZXRpdGlvbnMgYXJlIHRvIG9jY3VyOyBlLmcuIHRvIGV4cHJlc3MgXCIzIHRpbWVzIHBlciBkYXlcIiwgMyB3b3VsZCBiZSB0aGUgZnJlcXVlbmN5IGFuZCBcIjEgZGF5XCIgd291bGQgYmUgdGhlIHBlcmlvZC5cclxuICAgKi9cclxuICBwZXJpb2Q/OiBmaGlyLkZoaXJEZWNpbWFsfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRpbWluZy5yZXBlYXQucGVyaW9kXHJcbiAgICovXHJcbiAgX3BlcmlvZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoYXQgdGhlIHBlcmlvZCBpcyBhIHJhbmdlIGZyb20gW3BlcmlvZF0gdG8gW3BlcmlvZE1heF0sIGFsbG93aW5nIGV4cHJlc3NpbmcgY29uY2VwdHMgc3VjaCBhcyBcImRvIHRoaXMgb25jZSBldmVyeSAzLTUgZGF5cy5cclxuICAgKi9cclxuICBwZXJpb2RNYXg/OiBmaGlyLkZoaXJEZWNpbWFsfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRpbWluZy5yZXBlYXQucGVyaW9kTWF4XHJcbiAgICovXHJcbiAgX3BlcmlvZE1heD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHVuaXRzIG9mIHRpbWUgZm9yIHRoZSBwZXJpb2QgaW4gVUNVTSB1bml0cy5cclxuICAgKi9cclxuICBwZXJpb2RVbml0PzogZmhpci5GaGlyQ29kZTxVbml0c09mVGltZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUaW1pbmcucmVwZWF0LnBlcmlvZFVuaXRcclxuICAgKi9cclxuICBfcGVyaW9kVW5pdD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWYgbm8gZGF5cyBhcmUgc3BlY2lmaWVkLCB0aGUgYWN0aW9uIGlzIGFzc3VtZWQgdG8gaGFwcGVuIGV2ZXJ5IGRheSBhcyBvdGhlcndpc2Ugc3BlY2lmaWVkLiBUaGUgZWxlbWVudHMgZnJlcXVlbmN5IGFuZCBwZXJpb2QgY2Fubm90IGJlIHVzZWQgYXMgd2VsbCBhcyBkYXlPZldlZWsuXHJcbiAgICovXHJcbiAgZGF5T2ZXZWVrPzogZmhpci5GaGlyQ29kZTxEYXlzT2ZXZWVrQ29kZVR5cGU+W118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGltaW5nLnJlcGVhdC5kYXlPZldlZWtcclxuICAgKi9cclxuICBfZGF5T2ZXZWVrPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBXaGVuIHRpbWUgb2YgZGF5IGlzIHNwZWNpZmllZCwgaXQgaXMgaW5mZXJyZWQgdGhhdCB0aGUgYWN0aW9uIGhhcHBlbnMgZXZlcnkgZGF5IChhcyBmaWx0ZXJlZCBieSBkYXlvZldlZWspIG9uIHRoZSBzcGVjaWZpZWQgdGltZXMuIFRoZSBlbGVtZW50cyB3aGVuLCBmcmVxdWVuY3kgYW5kIHBlcmlvZCBjYW5ub3QgYmUgdXNlZCBhcyB3ZWxsIGFzIHRpbWVPZkRheS5cclxuICAgKi9cclxuICB0aW1lT2ZEYXk/OiBmaGlyLkZoaXJUaW1lW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGltaW5nLnJlcGVhdC50aW1lT2ZEYXlcclxuICAgKi9cclxuICBfdGltZU9mRGF5PzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBXaGVuIG1vcmUgdGhhbiBvbmUgZXZlbnQgaXMgbGlzdGVkLCB0aGUgZXZlbnQgaXMgdGllZCB0byB0aGUgdW5pb24gb2YgdGhlIHNwZWNpZmllZCBldmVudHMuXHJcbiAgICovXHJcbiAgd2hlbj86IGZoaXIuRmhpckNvZGVbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUaW1pbmcucmVwZWF0LndoZW5cclxuICAgKi9cclxuICBfd2hlbj86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVGhlIG51bWJlciBvZiBtaW51dGVzIGZyb20gdGhlIGV2ZW50LiBJZiB0aGUgZXZlbnQgY29kZSBkb2VzIG5vdCBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBtaW51dGVzIGlzIGJlZm9yZSBvciBhZnRlciB0aGUgZXZlbnQsIHRoZW4gdGhlIG9mZnNldCBpcyBhc3N1bWVkIHRvIGJlIGFmdGVyIHRoZSBldmVudC5cclxuICAgKi9cclxuICBvZmZzZXQ/OiBmaGlyLkZoaXJVbnNpZ25lZEludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUaW1pbmcucmVwZWF0Lm9mZnNldFxyXG4gICAqL1xyXG4gIF9vZmZzZXQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgcnVsZXMgdGhhdCBkZXNjcmliZSB3aGVuIHRoZSBldmVudCBpcyBzY2hlZHVsZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGltaW5nUmVwZWF0IGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdUaW1pbmdSZXBlYXQnO1xyXG4gIC8qKlxyXG4gICAqIEVpdGhlciBhIGR1cmF0aW9uIGZvciB0aGUgbGVuZ3RoIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUsIGEgcmFuZ2Ugb2YgcG9zc2libGUgbGVuZ3RoLCBvciBvdXRlciBib3VuZHMgZm9yIHN0YXJ0IGFuZC9vciBlbmQgbGltaXRzIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUuXHJcbiAgICovXHJcbiAgcHVibGljIGJvdW5kcz86IChmaGlyLkR1cmF0aW9ufGZoaXIuUmFuZ2V8Zmhpci5QZXJpb2QpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IFRpbWluZy5yZXBlYXQuYm91bmRzW3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX2JvdW5kc0lzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIElmIHlvdSBoYXZlIGJvdGggYm91bmRzIGFuZCBjb3VudCwgdGhlbiB0aGlzIHNob3VsZCBiZSB1bmRlcnN0b29kIGFzIHdpdGhpbiB0aGUgYm91bmRzIHBlcmlvZCwgdW50aWwgY291bnQgdGltZXMgaGFwcGVucy5cclxuICAgKi9cclxuICBwdWJsaWMgY291bnQ/OiBmaGlyLkZoaXJJbnRlZ2VyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG1heGltdW0gdmFsdWUgZm9yIHRoZSBjb3VudCBvZiB0aGUgZGVzaXJlZCByZXBldGl0aW9ucyAoZS5nLiBkbyBzb21ldGhpbmcgNi04IHRpbWVzKS5cclxuICAgKi9cclxuICBwdWJsaWMgY291bnRNYXg/OiBmaGlyLkZoaXJJbnRlZ2VyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3Igc29tZSBldmVudHMgdGhlIGR1cmF0aW9uIGlzIHBhcnQgb2YgdGhlIGRlZmluaXRpb24gb2YgdGhlIGV2ZW50IChlLmcuIElWIGluZnVzaW9ucywgd2hlcmUgdGhlIGR1cmF0aW9uIGlzIGltcGxpY2l0IGluIHRoZSBzcGVjaWZpZWQgcXVhbnRpdHkgYW5kIHJhdGUpLiBGb3Igb3RoZXJzLCBpdCdzIHBhcnQgb2YgdGhlIHRpbWluZyBzcGVjaWZpY2F0aW9uIChlLmcuIGV4ZXJjaXNlKS5cclxuICAgKi9cclxuICBwdWJsaWMgZHVyYXRpb24/OiBmaGlyLkZoaXJEZWNpbWFsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3Igc29tZSBldmVudHMgdGhlIGR1cmF0aW9uIGlzIHBhcnQgb2YgdGhlIGRlZmluaXRpb24gb2YgdGhlIGV2ZW50IChlLmcuIElWIGluZnVzaW9ucywgd2hlcmUgdGhlIGR1cmF0aW9uIGlzIGltcGxpY2l0IGluIHRoZSBzcGVjaWZpZWQgcXVhbnRpdHkgYW5kIHJhdGUpLiBGb3Igb3RoZXJzLCBpdCdzIHBhcnQgb2YgdGhlIHRpbWluZyBzcGVjaWZpY2F0aW9uIChlLmcuIGV4ZXJjaXNlKS5cclxuICAgKi9cclxuICBwdWJsaWMgZHVyYXRpb25NYXg/OiBmaGlyLkZoaXJEZWNpbWFsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdW5pdHMgb2YgdGltZSBmb3IgdGhlIGR1cmF0aW9uLCBpbiBVQ1VNIHVuaXRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkdXJhdGlvblVuaXQ/OiBmaGlyLkZoaXJDb2RlPFVuaXRzT2ZUaW1lQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYWN0aW9uIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHBlcmlvZCAvIHBlcmlvZCByYW5nZSAoaS5lLiBib3RoIHBlcmlvZCBhbmQgcGVyaW9kTWF4IHByb3ZpZGVkKS5cclxuICAgKi9cclxuICBwdWJsaWMgZnJlcXVlbmN5PzogZmhpci5GaGlySW50ZWdlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoYXQgdGhlIGZyZXF1ZW5jeSBpcyBhIHJhbmdlIC0gc28gdG8gcmVwZWF0IGJldHdlZW4gW2ZyZXF1ZW5jeV0gYW5kIFtmcmVxdWVuY3lNYXhdIHRpbWVzIHdpdGhpbiB0aGUgcGVyaW9kIG9yIHBlcmlvZCByYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgZnJlcXVlbmN5TWF4PzogZmhpci5GaGlySW50ZWdlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSBkdXJhdGlvbiBvZiB0aW1lIG92ZXIgd2hpY2ggcmVwZXRpdGlvbnMgYXJlIHRvIG9jY3VyOyBlLmcuIHRvIGV4cHJlc3MgXCIzIHRpbWVzIHBlciBkYXlcIiwgMyB3b3VsZCBiZSB0aGUgZnJlcXVlbmN5IGFuZCBcIjEgZGF5XCIgd291bGQgYmUgdGhlIHBlcmlvZC5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyaW9kPzogZmhpci5GaGlyRGVjaW1hbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoYXQgdGhlIHBlcmlvZCBpcyBhIHJhbmdlIGZyb20gW3BlcmlvZF0gdG8gW3BlcmlvZE1heF0sIGFsbG93aW5nIGV4cHJlc3NpbmcgY29uY2VwdHMgc3VjaCBhcyBcImRvIHRoaXMgb25jZSBldmVyeSAzLTUgZGF5cy5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyaW9kTWF4PzogZmhpci5GaGlyRGVjaW1hbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHVuaXRzIG9mIHRpbWUgZm9yIHRoZSBwZXJpb2QgaW4gVUNVTSB1bml0cy5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyaW9kVW5pdD86IGZoaXIuRmhpckNvZGU8VW5pdHNPZlRpbWVDb2RlVHlwZT58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIG5vIGRheXMgYXJlIHNwZWNpZmllZCwgdGhlIGFjdGlvbiBpcyBhc3N1bWVkIHRvIGhhcHBlbiBldmVyeSBkYXkgYXMgb3RoZXJ3aXNlIHNwZWNpZmllZC4gVGhlIGVsZW1lbnRzIGZyZXF1ZW5jeSBhbmQgcGVyaW9kIGNhbm5vdCBiZSB1c2VkIGFzIHdlbGwgYXMgZGF5T2ZXZWVrLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXlPZldlZWs6IGZoaXIuRmhpckNvZGU8RGF5c09mV2Vla0NvZGVUeXBlPltdO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gdGltZSBvZiBkYXkgaXMgc3BlY2lmaWVkLCBpdCBpcyBpbmZlcnJlZCB0aGF0IHRoZSBhY3Rpb24gaGFwcGVucyBldmVyeSBkYXkgKGFzIGZpbHRlcmVkIGJ5IGRheW9mV2Vlaykgb24gdGhlIHNwZWNpZmllZCB0aW1lcy4gVGhlIGVsZW1lbnRzIHdoZW4sIGZyZXF1ZW5jeSBhbmQgcGVyaW9kIGNhbm5vdCBiZSB1c2VkIGFzIHdlbGwgYXMgdGltZU9mRGF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0aW1lT2ZEYXk6IGZoaXIuRmhpclRpbWVbXTtcclxuICAvKipcclxuICAgKiBXaGVuIG1vcmUgdGhhbiBvbmUgZXZlbnQgaXMgbGlzdGVkLCB0aGUgZXZlbnQgaXMgdGllZCB0byB0aGUgdW5pb24gb2YgdGhlIHNwZWNpZmllZCBldmVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIHdoZW46IGZoaXIuRmhpckNvZGVbXTtcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbnV0ZXMgZnJvbSB0aGUgZXZlbnQuIElmIHRoZSBldmVudCBjb2RlIGRvZXMgbm90IGluZGljYXRlIHdoZXRoZXIgdGhlIG1pbnV0ZXMgaXMgYmVmb3JlIG9yIGFmdGVyIHRoZSBldmVudCwgdGhlbiB0aGUgb2Zmc2V0IGlzIGFzc3VtZWQgdG8gYmUgYWZ0ZXIgdGhlIGV2ZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvZmZzZXQ/OiBmaGlyLkZoaXJVbnNpZ25lZEludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVGltaW5nUmVwZWF0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGltaW5nUmVwZWF0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2JvdW5kcyddKSB7IHRoaXMuYm91bmRzID0gc291cmNlLmJvdW5kczsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydib3VuZHNEdXJhdGlvbiddKSB7IHRoaXMuYm91bmRzID0gbmV3IGZoaXIuRHVyYXRpb24oc291cmNlLmJvdW5kc0R1cmF0aW9uKTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydib3VuZHNSYW5nZSddKSB7IHRoaXMuYm91bmRzID0gbmV3IGZoaXIuUmFuZ2Uoc291cmNlLmJvdW5kc1JhbmdlKTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydib3VuZHNQZXJpb2QnXSkgeyB0aGlzLmJvdW5kcyA9IG5ldyBmaGlyLlBlcmlvZChzb3VyY2UuYm91bmRzUGVyaW9kKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY291bnQnXSkgeyB0aGlzLmNvdW50ID0gbmV3IGZoaXIuRmhpckludGVnZXIoe3ZhbHVlOiBzb3VyY2UuY291bnR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvdW50J10pIHtcclxuICAgICAgaWYgKHRoaXMuY291bnQpIHsgdGhpcy5jb3VudC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb3VudCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmNvdW50ID0gbmV3IGZoaXIuRmhpckludGVnZXIoc291cmNlLl9jb3VudCBhcyBQYXJ0aWFsPGZoaXIuRmhpckludGVnZXJBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvdW50TWF4J10pIHsgdGhpcy5jb3VudE1heCA9IG5ldyBmaGlyLkZoaXJJbnRlZ2VyKHt2YWx1ZTogc291cmNlLmNvdW50TWF4fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb3VudE1heCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvdW50TWF4KSB7IHRoaXMuY291bnRNYXguYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY291bnRNYXghKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb3VudE1heCA9IG5ldyBmaGlyLkZoaXJJbnRlZ2VyKHNvdXJjZS5fY291bnRNYXggYXMgUGFydGlhbDxmaGlyLkZoaXJJbnRlZ2VyQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkdXJhdGlvbiddKSB7IHRoaXMuZHVyYXRpb24gPSBuZXcgZmhpci5GaGlyRGVjaW1hbCh7dmFsdWU6IHNvdXJjZS5kdXJhdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZHVyYXRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kdXJhdGlvbikgeyB0aGlzLmR1cmF0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2R1cmF0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZHVyYXRpb24gPSBuZXcgZmhpci5GaGlyRGVjaW1hbChzb3VyY2UuX2R1cmF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGVjaW1hbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZHVyYXRpb25NYXgnXSkgeyB0aGlzLmR1cmF0aW9uTWF4ID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UuZHVyYXRpb25NYXh9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2R1cmF0aW9uTWF4J10pIHtcclxuICAgICAgaWYgKHRoaXMuZHVyYXRpb25NYXgpIHsgdGhpcy5kdXJhdGlvbk1heC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kdXJhdGlvbk1heCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmR1cmF0aW9uTWF4ID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoc291cmNlLl9kdXJhdGlvbk1heCBhcyBQYXJ0aWFsPGZoaXIuRmhpckRlY2ltYWxBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2R1cmF0aW9uVW5pdCddKSB7IHRoaXMuZHVyYXRpb25Vbml0ID0gbmV3IGZoaXIuRmhpckNvZGU8VW5pdHNPZlRpbWVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UuZHVyYXRpb25Vbml0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kdXJhdGlvblVuaXQnXSkge1xyXG4gICAgICBpZiAodGhpcy5kdXJhdGlvblVuaXQpIHsgdGhpcy5kdXJhdGlvblVuaXQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZHVyYXRpb25Vbml0ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZHVyYXRpb25Vbml0ID0gbmV3IGZoaXIuRmhpckNvZGU8VW5pdHNPZlRpbWVDb2RlVHlwZT4oc291cmNlLl9kdXJhdGlvblVuaXQgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2ZyZXF1ZW5jeSddKSB7IHRoaXMuZnJlcXVlbmN5ID0gbmV3IGZoaXIuRmhpckludGVnZXIoe3ZhbHVlOiBzb3VyY2UuZnJlcXVlbmN5fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19mcmVxdWVuY3knXSkge1xyXG4gICAgICBpZiAodGhpcy5mcmVxdWVuY3kpIHsgdGhpcy5mcmVxdWVuY3kuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZnJlcXVlbmN5ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZnJlcXVlbmN5ID0gbmV3IGZoaXIuRmhpckludGVnZXIoc291cmNlLl9mcmVxdWVuY3kgYXMgUGFydGlhbDxmaGlyLkZoaXJJbnRlZ2VyQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydmcmVxdWVuY3lNYXgnXSkgeyB0aGlzLmZyZXF1ZW5jeU1heCA9IG5ldyBmaGlyLkZoaXJJbnRlZ2VyKHt2YWx1ZTogc291cmNlLmZyZXF1ZW5jeU1heH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZnJlcXVlbmN5TWF4J10pIHtcclxuICAgICAgaWYgKHRoaXMuZnJlcXVlbmN5TWF4KSB7IHRoaXMuZnJlcXVlbmN5TWF4LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2ZyZXF1ZW5jeU1heCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmZyZXF1ZW5jeU1heCA9IG5ldyBmaGlyLkZoaXJJbnRlZ2VyKHNvdXJjZS5fZnJlcXVlbmN5TWF4IGFzIFBhcnRpYWw8Zmhpci5GaGlySW50ZWdlckFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncGVyaW9kJ10pIHsgdGhpcy5wZXJpb2QgPSBuZXcgZmhpci5GaGlyRGVjaW1hbCh7dmFsdWU6IHNvdXJjZS5wZXJpb2R9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3BlcmlvZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnBlcmlvZCkgeyB0aGlzLnBlcmlvZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wZXJpb2QhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wZXJpb2QgPSBuZXcgZmhpci5GaGlyRGVjaW1hbChzb3VyY2UuX3BlcmlvZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckRlY2ltYWxBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZE1heCddKSB7IHRoaXMucGVyaW9kTWF4ID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UucGVyaW9kTWF4fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wZXJpb2RNYXgnXSkge1xyXG4gICAgICBpZiAodGhpcy5wZXJpb2RNYXgpIHsgdGhpcy5wZXJpb2RNYXguYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcGVyaW9kTWF4ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucGVyaW9kTWF4ID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoc291cmNlLl9wZXJpb2RNYXggYXMgUGFydGlhbDxmaGlyLkZoaXJEZWNpbWFsQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwZXJpb2RVbml0J10pIHsgdGhpcy5wZXJpb2RVbml0ID0gbmV3IGZoaXIuRmhpckNvZGU8VW5pdHNPZlRpbWVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UucGVyaW9kVW5pdH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcGVyaW9kVW5pdCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnBlcmlvZFVuaXQpIHsgdGhpcy5wZXJpb2RVbml0LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3BlcmlvZFVuaXQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wZXJpb2RVbml0ID0gbmV3IGZoaXIuRmhpckNvZGU8VW5pdHNPZlRpbWVDb2RlVHlwZT4oc291cmNlLl9wZXJpb2RVbml0IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkYXlPZldlZWsnXSkgeyB0aGlzLmRheU9mV2VlayA9IHNvdXJjZS5kYXlPZldlZWsubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ29kZTxEYXlzT2ZXZWVrQ29kZVR5cGU+KHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZGF5T2ZXZWVrID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19kYXlPZldlZWsnXSkge1xyXG4gICAgICBzb3VyY2UuX2RheU9mV2Vlay5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5kYXlPZldlZWsubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5kYXlPZldlZWtbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5kYXlPZldlZWsucHVzaChuZXcgZmhpci5GaGlyQ29kZTxEYXlzT2ZXZWVrQ29kZVR5cGU+KHggYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0aW1lT2ZEYXknXSkgeyB0aGlzLnRpbWVPZkRheSA9IHNvdXJjZS50aW1lT2ZEYXkubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyVGltZSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRpbWVPZkRheSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfdGltZU9mRGF5J10pIHtcclxuICAgICAgc291cmNlLl90aW1lT2ZEYXkuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZU9mRGF5Lmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMudGltZU9mRGF5W2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMudGltZU9mRGF5LnB1c2gobmV3IGZoaXIuRmhpclRpbWUoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclRpbWVBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd3aGVuJ10pIHsgdGhpcy53aGVuID0gc291cmNlLndoZW4ubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ29kZSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLndoZW4gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3doZW4nXSkge1xyXG4gICAgICBzb3VyY2UuX3doZW4uZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMud2hlbi5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLndoZW5baV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy53aGVuLnB1c2gobmV3IGZoaXIuRmhpckNvZGUoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGVBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydvZmZzZXQnXSkgeyB0aGlzLm9mZnNldCA9IG5ldyBmaGlyLkZoaXJVbnNpZ25lZEludCh7dmFsdWU6IHNvdXJjZS5vZmZzZXR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX29mZnNldCddKSB7XHJcbiAgICAgIGlmICh0aGlzLm9mZnNldCkgeyB0aGlzLm9mZnNldC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9vZmZzZXQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5vZmZzZXQgPSBuZXcgZmhpci5GaGlyVW5zaWduZWRJbnQoc291cmNlLl9vZmZzZXQgYXMgUGFydGlhbDxmaGlyLkZoaXJVbnNpZ25lZEludEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1RpbWluZy5yZXBlYXQnIH1cclxuICAgIHRoaXMudk9TKCdib3VuZHMnLGV4cClcclxuICAgIHRoaXMudk9TKCdjb3VudCcsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2NvdW50TWF4JyxleHApXHJcbiAgICB0aGlzLnZPUygnZHVyYXRpb24nLGV4cClcclxuICAgIHRoaXMudk9TKCdkdXJhdGlvbk1heCcsZXhwKVxyXG4gICAgdGhpcy52T1NWKCdkdXJhdGlvblVuaXQnLGV4cCwnVW5pdHNPZlRpbWUnLFVuaXRzT2ZUaW1lVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9TKCdmcmVxdWVuY3knLGV4cClcclxuICAgIHRoaXMudk9TKCdmcmVxdWVuY3lNYXgnLGV4cClcclxuICAgIHRoaXMudk9TKCdwZXJpb2QnLGV4cClcclxuICAgIHRoaXMudk9TKCdwZXJpb2RNYXgnLGV4cClcclxuICAgIHRoaXMudk9TVigncGVyaW9kVW5pdCcsZXhwLCdVbml0c09mVGltZScsVW5pdHNPZlRpbWVWc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T0FWKCdkYXlPZldlZWsnLGV4cCwnRGF5c09mV2VlaycsRGF5c09mV2Vla1ZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZPQSgndGltZU9mRGF5JyxleHApXHJcbiAgICB0aGlzLnZPQVYoJ3doZW4nLGV4cCwnRXZlbnRUaW1pbmcnLEV2ZW50VGltaW5nVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9TKCdvZmZzZXQnLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUaW1pbmcgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGltaW5nQXJncyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHNwZWNpZmljIHRpbWVzIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cclxuICAgKi9cclxuICBldmVudD86IGZoaXIuRmhpckRhdGVUaW1lW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGltaW5nLmV2ZW50XHJcbiAgICovXHJcbiAgX2V2ZW50PzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBBIHNldCBvZiBydWxlcyB0aGF0IGRlc2NyaWJlIHdoZW4gdGhlIGV2ZW50IGlzIHNjaGVkdWxlZC5cclxuICAgKi9cclxuICByZXBlYXQ/OiBmaGlyLlRpbWluZ1JlcGVhdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEJJRCBldGMgYXJlIGRlZmluZWQgYXMgJ2F0IGluc3RpdHV0aW9uYWxseSBzcGVjaWZpZWQgdGltZXMnLiBGb3IgZXhhbXBsZSwgYW4gaW5zdGl0dXRpb24gbWF5IGNob29zZSB0aGF0IEJJRCBpcyBcImFsd2F5cyBhdCA3YW0gYW5kIDZwbVwiLiAgSWYgaXQgaXMgaW5hcHByb3ByaWF0ZSBmb3IgdGhpcyBjaG9pY2UgdG8gYmUgbWFkZSwgdGhlIGNvZGUgQklEIHNob3VsZCBub3QgYmUgdXNlZC4gSW5zdGVhZCwgYSBkaXN0aW5jdCBvcmdhbml6YXRpb24tc3BlY2lmaWMgY29kZSBzaG91bGQgYmUgdXNlZCBpbiBwbGFjZSBvZiB0aGUgSEw3LWRlZmluZWQgQklEIGNvZGUgYW5kL29yIHRoZSBhIHN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gc2hvdWxkIGJlIHVzZWQgKGluIHRoaXMgY2FzZSwgc3BlY2lmeWluZyB0aGUgdHdvIGV2ZW50IHRpbWVzKS5cclxuICAgKi9cclxuICBjb2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmllcyBhbiBldmVudCB0aGF0IG1heSBvY2N1ciBtdWx0aXBsZSB0aW1lcy4gVGltaW5nIHNjaGVkdWxlcyBhcmUgdXNlZCB0byByZWNvcmQgd2hlbiB0aGluZ3MgYXJlIHBsYW5uZWQsIGV4cGVjdGVkIG9yIHJlcXVlc3RlZCB0byBvY2N1ci4gVGhlIG1vc3QgY29tbW9uIHVzYWdlIGlzIGluIGRvc2FnZSBpbnN0cnVjdGlvbnMgZm9yIG1lZGljYXRpb25zLiBUaGV5IGFyZSBhbHNvIHVzZWQgd2hlbiBwbGFubmluZyBjYXJlIG9mIHZhcmlvdXMga2luZHMsIGFuZCBtYXkgYmUgdXNlZCBmb3IgcmVwb3J0aW5nIHRoZSBzY2hlZHVsZSB0byB3aGljaCBwYXN0IHJlZ3VsYXIgYWN0aXZpdGllcyB3ZXJlIGNhcnJpZWQgb3V0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRpbWluZyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVGltaW5nJztcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHNwZWNpZmljIHRpbWVzIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cclxuICAgKi9cclxuICBwdWJsaWMgZXZlbnQ6IGZoaXIuRmhpckRhdGVUaW1lW107XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2YgcnVsZXMgdGhhdCBkZXNjcmliZSB3aGVuIHRoZSBldmVudCBpcyBzY2hlZHVsZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHJlcGVhdD86IGZoaXIuVGltaW5nUmVwZWF0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBCSUQgZXRjIGFyZSBkZWZpbmVkIGFzICdhdCBpbnN0aXR1dGlvbmFsbHkgc3BlY2lmaWVkIHRpbWVzJy4gRm9yIGV4YW1wbGUsIGFuIGluc3RpdHV0aW9uIG1heSBjaG9vc2UgdGhhdCBCSUQgaXMgXCJhbHdheXMgYXQgN2FtIGFuZCA2cG1cIi4gIElmIGl0IGlzIGluYXBwcm9wcmlhdGUgZm9yIHRoaXMgY2hvaWNlIHRvIGJlIG1hZGUsIHRoZSBjb2RlIEJJRCBzaG91bGQgbm90IGJlIHVzZWQuIEluc3RlYWQsIGEgZGlzdGluY3Qgb3JnYW5pemF0aW9uLXNwZWNpZmljIGNvZGUgc2hvdWxkIGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGhlIEhMNy1kZWZpbmVkIEJJRCBjb2RlIGFuZC9vciB0aGUgYSBzdHJ1Y3R1cmVkIHJlcHJlc2VudGF0aW9uIHNob3VsZCBiZSB1c2VkIChpbiB0aGlzIGNhc2UsIHNwZWNpZnlpbmcgdGhlIHR3byBldmVudCB0aW1lcykuXHJcbiAgICovXHJcbiAgcHVibGljIGNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVGltaW5nIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGltaW5nQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2V2ZW50J10pIHsgdGhpcy5ldmVudCA9IHNvdXJjZS5ldmVudC5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmV2ZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19ldmVudCddKSB7XHJcbiAgICAgIHNvdXJjZS5fZXZlbnQuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnQubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5ldmVudFtpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLmV2ZW50LnB1c2gobmV3IGZoaXIuRmhpckRhdGVUaW1lKHggYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcGVhdCddKSB7IHRoaXMucmVwZWF0ID0gbmV3IGZoaXIuVGltaW5nUmVwZWF0KHNvdXJjZS5yZXBlYXQpOyB9XHJcbiAgICBpZiAoc291cmNlWydjb2RlJ10pIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5jb2RlKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1RpbWluZycgfVxyXG4gICAgdGhpcy52T0EoJ2V2ZW50JyxleHApXHJcbiAgICB0aGlzLnZPUygncmVwZWF0JyxleHApXHJcbiAgICB0aGlzLnZPUygnY29kZScsZXhwKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19