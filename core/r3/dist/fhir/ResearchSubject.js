// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchSubject
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResearchSubjectStatusVsValidation } from '../fhirValueSets/ResearchSubjectStatusVsValidation.js';
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export class ResearchSubject extends fhir.DomainResource {
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchSubject';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['study']) {
            this.study = new fhir.Reference(source.study, options);
        }
        else {
            this.study = null;
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual, options);
        }
        else {
            this.individual = null;
        }
        if (source['assignedArm'] !== undefined) {
            this.assignedArm = new fhir.FhirString({ value: source.assignedArm }, options);
        }
        if (source['_assignedArm']) {
            if (this.assignedArm) {
                this.assignedArm.addExtendedProperties(source._assignedArm);
            }
            else {
                this.assignedArm = new fhir.FhirString(source._assignedArm, options);
            }
        }
        if (source['actualArm'] !== undefined) {
            this.actualArm = new fhir.FhirString({ value: source.actualArm }, options);
        }
        if (source['_actualArm']) {
            if (this.actualArm) {
                this.actualArm.addExtendedProperties(source._actualArm);
            }
            else {
                this.actualArm = new fhir.FhirString(source._actualArm, options);
            }
        }
        if (source['consent']) {
            this.consent = new fhir.Reference(source.consent, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ResearchSubject';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ResearchSubjectStatus', ResearchSubjectStatusVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRS('study', exp));
        iss.push(...this.vRS('individual', exp));
        iss.push(...this.vOS('assignedArm', exp));
        iss.push(...this.vOS('actualArm', exp));
        iss.push(...this.vOS('consent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchSubject._fts_dataType = 'ResearchSubject';
//# sourceMappingURL=data:application/json;base64,