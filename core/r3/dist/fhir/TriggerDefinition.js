// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: TriggerDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { TriggerTypeVsValidation } from '../fhirValueSets/TriggerTypeVsValidation.js';
/**
 * A description of a triggering event.
 */
export class TriggerDefinition extends fhir.FhirElement {
    /**
     * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['eventName']) {
            this.eventName = new fhir.FhirString({ value: source.eventName });
        }
        if (source['_eventName']) {
            if (this.eventName) {
                this.eventName.addExtendedProperties(source._eventName);
            }
            else {
                this.eventName = new fhir.FhirString(source._eventName);
            }
        }
        if (source['eventTiming']) {
            this.eventTiming = source.eventTiming;
        }
        else if (source['eventTimingTiming']) {
            this.eventTiming = new fhir.Timing(source.eventTimingTiming);
        }
        else if (source['eventTimingReference']) {
            this.eventTiming = new fhir.Reference(source.eventTimingReference);
        }
        else if (source['eventTimingDate']) {
            this.eventTiming = new fhir.FhirDate({ value: source.eventTimingDate });
        }
        else if (source['eventTimingDateTime']) {
            this.eventTiming = new fhir.FhirDateTime({ value: source.eventTimingDateTime });
        }
        if (source['eventData']) {
            this.eventData = new fhir.DataRequirement(source.eventData);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TriggerDefinition';
        }
        this.vRSV('type', exp, 'TriggerType', TriggerTypeVsValidation, 'r');
        this.vOS('eventName', exp);
        this.vOS('eventTiming', exp);
        this.vOS('eventData', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TriggerDefinition._fts_dataType = 'TriggerDefinition';
/**
 * Internal flag to properly serialize choice-type element TriggerDefinition.eventTiming[x]
 */
TriggerDefinition._fts_eventTimingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,