// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentReference
import * as fhir from '../fhir.js';
// @ts-ignore
import { DocumentRelationshipTypeVsValidation } from '../fhirValueSets/DocumentRelationshipTypeVsValidation.js';
// @ts-ignore
import { DocumentReferenceStatusVsValidation } from '../fhirValueSets/DocumentReferenceStatusVsValidation.js';
// @ts-ignore
import { CompositionStatusVsValidation } from '../fhirValueSets/CompositionStatusVsValidation.js';
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export class DocumentReferenceRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.relatesTo';
        }
        iss.push(...this.vRSV('code', exp, 'DocumentRelationshipType', DocumentRelationshipTypeVsValidation, 'r'));
        iss.push(...this.vRS('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceRelatesTo._fts_dataType = 'DocumentReferenceRelatesTo';
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
export class DocumentReferenceContent extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
        else {
            this.attachment = null;
        }
        if (source['format']) {
            this.format = new fhir.Coding(source.format);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.content';
        }
        iss.push(...this.vRS('attachment', exp));
        iss.push(...this.vOS('format', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContent._fts_dataType = 'DocumentReferenceContent';
/**
 * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
 */
export class DocumentReferenceContextRelated extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContextRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['ref']) {
            this.ref = new fhir.Reference(source.ref);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.context.related';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('ref', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContextRelated._fts_dataType = 'DocumentReferenceContextRelated';
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
export class DocumentReferenceContext extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.event = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['facilityType']) {
            this.facilityType = new fhir.CodeableConcept(source.facilityType);
        }
        if (source['practiceSetting']) {
            this.practiceSetting = new fhir.CodeableConcept(source.practiceSetting);
        }
        if (source['sourcePatientInfo']) {
            this.sourcePatientInfo = new fhir.Reference(source.sourcePatientInfo);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.DocumentReferenceContextRelated(x));
        }
        else {
            this.related = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference.context';
        }
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOA('event', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('facilityType', exp));
        iss.push(...this.vOS('practiceSetting', exp));
        iss.push(...this.vOS('sourcePatientInfo', exp));
        iss.push(...this.vOA('related', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContext._fts_dataType = 'DocumentReferenceContext';
/**
 * A reference to a document.
 */
export class DocumentReference extends fhir.DomainResource {
    /**
     * Default constructor for DocumentReference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DocumentReference';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['docStatus']) {
            this.docStatus = new fhir.FhirCode({ value: source.docStatus });
        }
        if (source['_docStatus']) {
            if (this.docStatus) {
                this.docStatus.addExtendedProperties(source._docStatus);
            }
            else {
                this.docStatus = new fhir.FhirCode(source._docStatus);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['indexed']) {
            this.indexed = new fhir.FhirInstant({ value: source.indexed });
        }
        else {
            this.indexed = null;
        }
        if (source['_indexed']) {
            if (this.indexed) {
                this.indexed.addExtendedProperties(source._indexed);
            }
            else {
                this.indexed = new fhir.FhirInstant(source._indexed);
            }
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['authenticator']) {
            this.authenticator = new fhir.Reference(source.authenticator);
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.DocumentReferenceRelatesTo(x));
        }
        else {
            this.relatesTo = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.DocumentReferenceContent(x));
        }
        else {
            this.content = [];
        }
        if (source['context']) {
            this.context = new fhir.DocumentReferenceContext(source.context);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentReference';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('masterIdentifier', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'DocumentReferenceStatus', DocumentReferenceStatusVsValidation, 'r'));
        iss.push(...this.vOSV('docStatus', exp, 'CompositionStatus', CompositionStatusVsValidation, 'r'));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('class', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vRS('indexed', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOS('authenticator', exp));
        iss.push(...this.vOS('custodian', exp));
        iss.push(...this.vOA('relatesTo', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('securityLabel', exp));
        iss.push(...this.vRA('content', exp));
        iss.push(...this.vOS('context', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReference._fts_dataType = 'DocumentReference';
//# sourceMappingURL=data:application/json;base64,