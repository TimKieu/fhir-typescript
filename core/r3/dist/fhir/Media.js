// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media
import * as fhir from '../fhir.js';
// @ts-ignore
import { DigitalMediaTypeVsValidation } from '../fhirValueSets/DigitalMediaTypeVsValidation.js';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Media';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['subtype']) {
            this.subtype = new fhir.CodeableConcept(source.subtype);
        }
        if (source['view']) {
            this.view = new fhir.CodeableConcept(source.view);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        if (source['operator']) {
            this.operator = new fhir.Reference(source.operator);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['height']) {
            this.height = new fhir.FhirPositiveInt({ value: source.height });
        }
        if (source['_height']) {
            if (this.height) {
                this.height.addExtendedProperties(source._height);
            }
            else {
                this.height = new fhir.FhirPositiveInt(source._height);
            }
        }
        if (source['width']) {
            this.width = new fhir.FhirPositiveInt({ value: source.width });
        }
        if (source['_width']) {
            if (this.width) {
                this.width.addExtendedProperties(source._width);
            }
            else {
                this.width = new fhir.FhirPositiveInt(source._width);
            }
        }
        if (source['frames']) {
            this.frames = new fhir.FhirPositiveInt({ value: source.frames });
        }
        if (source['_frames']) {
            if (this.frames) {
                this.frames.addExtendedProperties(source._frames);
            }
            else {
                this.frames = new fhir.FhirPositiveInt(source._frames);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.FhirUnsignedInt({ value: source.duration });
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirUnsignedInt(source._duration);
            }
        }
        if (source['content']) {
            this.content = new fhir.Attachment(source.content);
        }
        else {
            this.content = null;
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Media';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vRSV('type', exp, 'DigitalMediaType', DigitalMediaTypeVsValidation, 'r'));
        iss.push(...this.vOS('subtype', exp));
        iss.push(...this.vOS('view', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('occurrence', exp));
        iss.push(...this.vOS('operator', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOS('height', exp));
        iss.push(...this.vOS('width', exp));
        iss.push(...this.vOS('frames', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vRS('content', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Media._fts_dataType = 'Media';
/**
 * Internal flag to properly serialize choice-type element Media.occurrence[x]
 */
Media._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,