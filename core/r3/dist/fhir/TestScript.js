// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestScript
import * as fhir from '../fhir.js';
// @ts-ignore
import { DefinedTypesVsValidation } from '../fhirValueSets/DefinedTypesVsValidation.js';
// @ts-ignore
import { ContentTypeVsValidation } from '../fhirValueSets/ContentTypeVsValidation.js';
// @ts-ignore
import { AssertDirectionVsValidation } from '../fhirValueSets/AssertDirectionVsValidation.js';
// @ts-ignore
import { AssertOperatorVsValidation } from '../fhirValueSets/AssertOperatorVsValidation.js';
// @ts-ignore
import { HttpOperationsVsValidation } from '../fhirValueSets/HttpOperationsVsValidation.js';
// @ts-ignore
import { AssertResponseCodeTypesVsValidation } from '../fhirValueSets/AssertResponseCodeTypesVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export class TestScriptOrigin extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptOrigin - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['index']) {
            this.index = new fhir.FhirInteger({ value: source.index });
        }
        else {
            this.index = null;
        }
        if (source['_index']) {
            if (this.index) {
                this.index.addExtendedProperties(source._index);
            }
            else {
                this.index = new fhir.FhirInteger(source._index);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Coding(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.origin';
        }
        this.vRS('index', exp);
        this.vRS('profile', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptOrigin._fts_dataType = 'TestScriptOrigin';
/**
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export class TestScriptDestination extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['index']) {
            this.index = new fhir.FhirInteger({ value: source.index });
        }
        else {
            this.index = null;
        }
        if (source['_index']) {
            if (this.index) {
                this.index.addExtendedProperties(source._index);
            }
            else {
                this.index = new fhir.FhirInteger(source._index);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Coding(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.destination';
        }
        this.vRS('index', exp);
        this.vRS('profile', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptDestination._fts_dataType = 'TestScriptDestination';
/**
 * A link to the FHIR specification that this test is covering.
 */
export class TestScriptMetadataLink extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.metadata.link';
        }
        this.vRS('url', exp);
        this.vOS('description', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataLink._fts_dataType = 'TestScriptMetadataLink';
/**
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export class TestScriptMetadataCapability extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['required']) {
            this.required = new fhir.FhirBoolean({ value: source.required });
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required);
            }
        }
        if (source['validated']) {
            this.validated = new fhir.FhirBoolean({ value: source.validated });
        }
        if (source['_validated']) {
            if (this.validated) {
                this.validated.addExtendedProperties(source._validated);
            }
            else {
                this.validated = new fhir.FhirBoolean(source._validated);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['origin']) {
            this.origin = source.origin.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.origin = [];
        }
        if (source['_origin']) {
            source._origin.forEach((x, i) => {
                if (this.origin.length >= i) {
                    if (x) {
                        this.origin[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.origin.push(new fhir.FhirInteger(x));
                    }
                }
            });
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['_destination']) {
            if (this.destination) {
                this.destination.addExtendedProperties(source._destination);
            }
            else {
                this.destination = new fhir.FhirInteger(source._destination);
            }
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.link = [];
        }
        if (source['_link']) {
            source._link.forEach((x, i) => {
                if (this.link.length >= i) {
                    if (x) {
                        this.link[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.link.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['capabilities']) {
            this.capabilities = new fhir.Reference(source.capabilities);
        }
        else {
            this.capabilities = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.metadata.capability';
        }
        this.vOS('required', exp);
        this.vOS('validated', exp);
        this.vOS('description', exp);
        this.vOA('origin', exp);
        this.vOS('destination', exp);
        this.vOA('link', exp);
        this.vRS('capabilities', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataCapability._fts_dataType = 'TestScriptMetadataCapability';
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export class TestScriptMetadata extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadata - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.TestScriptMetadataLink(x));
        }
        else {
            this.link = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.TestScriptMetadataCapability(x));
        }
        else {
            this.capability = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.metadata';
        }
        this.vOA('link', exp);
        this.vRA('capability', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadata._fts_dataType = 'TestScriptMetadata';
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export class TestScriptFixture extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptFixture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['autocreate']) {
            this.autocreate = new fhir.FhirBoolean({ value: source.autocreate });
        }
        if (source['_autocreate']) {
            if (this.autocreate) {
                this.autocreate.addExtendedProperties(source._autocreate);
            }
            else {
                this.autocreate = new fhir.FhirBoolean(source._autocreate);
            }
        }
        if (source['autodelete']) {
            this.autodelete = new fhir.FhirBoolean({ value: source.autodelete });
        }
        if (source['_autodelete']) {
            if (this.autodelete) {
                this.autodelete.addExtendedProperties(source._autodelete);
            }
            else {
                this.autodelete = new fhir.FhirBoolean(source._autodelete);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.fixture';
        }
        this.vOS('autocreate', exp);
        this.vOS('autodelete', exp);
        this.vOS('resource', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptFixture._fts_dataType = 'TestScriptFixture';
/**
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export class TestScriptVariable extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['defaultValue']) {
            this.defaultValue = new fhir.FhirString({ value: source.defaultValue });
        }
        if (source['_defaultValue']) {
            if (this.defaultValue) {
                this.defaultValue.addExtendedProperties(source._defaultValue);
            }
            else {
                this.defaultValue = new fhir.FhirString(source._defaultValue);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression);
            }
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['_headerField']) {
            if (this.headerField) {
                this.headerField.addExtendedProperties(source._headerField);
            }
            else {
                this.headerField = new fhir.FhirString(source._headerField);
            }
        }
        if (source['hint']) {
            this.hint = new fhir.FhirString({ value: source.hint });
        }
        if (source['_hint']) {
            if (this.hint) {
                this.hint.addExtendedProperties(source._hint);
            }
            else {
                this.hint = new fhir.FhirString(source._hint);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.variable';
        }
        this.vRS('name', exp);
        this.vOS('defaultValue', exp);
        this.vOS('description', exp);
        this.vOS('expression', exp);
        this.vOS('headerField', exp);
        this.vOS('hint', exp);
        this.vOS('path', exp);
        this.vOS('sourceId', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptVariable._fts_dataType = 'TestScriptVariable';
/**
 * The parameter value can be dynamic at runtime.
 */
export class TestScriptRuleParam extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptRuleParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.rule.param';
        }
        this.vRS('name', exp);
        this.vOS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptRuleParam._fts_dataType = 'TestScriptRuleParam';
/**
 * Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
 */
export class TestScriptRule extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
        else {
            this.resource = null;
        }
        if (source['param']) {
            this.param = source.param.map((x) => new fhir.TestScriptRuleParam(x));
        }
        else {
            this.param = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.rule';
        }
        this.vRS('resource', exp);
        this.vOA('param', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptRule._fts_dataType = 'TestScriptRule';
/**
 * The parameter value can be dynamic at runtime.
 */
export class TestScriptRulesetRuleParam extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptRulesetRuleParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.ruleset.rule.param';
        }
        this.vRS('name', exp);
        this.vOS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptRulesetRuleParam._fts_dataType = 'TestScriptRulesetRuleParam';
/**
 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
 */
export class TestScriptRulesetRule extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptRulesetRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['ruleId']) {
            this.ruleId = new fhir.FhirId({ value: source.ruleId });
        }
        else {
            this.ruleId = null;
        }
        if (source['_ruleId']) {
            if (this.ruleId) {
                this.ruleId.addExtendedProperties(source._ruleId);
            }
            else {
                this.ruleId = new fhir.FhirId(source._ruleId);
            }
        }
        if (source['param']) {
            this.param = source.param.map((x) => new fhir.TestScriptRulesetRuleParam(x));
        }
        else {
            this.param = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.ruleset.rule';
        }
        this.vRS('ruleId', exp);
        this.vOA('param', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptRulesetRule._fts_dataType = 'TestScriptRulesetRule';
/**
 * Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
 */
export class TestScriptRuleset extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptRuleset - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
        else {
            this.resource = null;
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.TestScriptRulesetRule(x));
        }
        else {
            this.rule = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.ruleset';
        }
        this.vRS('resource', exp);
        this.vRA('rule', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptRuleset._fts_dataType = 'TestScriptRuleset';
/**
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://hl7.org/fhir/STU3/http.html#2.1.0.5.1 - "If-Match" header.  See http://hl7.org/fhir/STU3/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://hl7.org/fhir/STU3/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
export class TestScriptSetupActionOperationRequestHeader extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperationRequestHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['field']) {
            this.field = new fhir.FhirString({ value: source.field });
        }
        else {
            this.field = null;
        }
        if (source['_field']) {
            if (this.field) {
                this.field.addExtendedProperties(source._field);
            }
            else {
                this.field = new fhir.FhirString(source._field);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.operation.requestHeader';
        }
        this.vRS('field', exp);
        this.vRS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperationRequestHeader._fts_dataType = 'TestScriptSetupActionOperationRequestHeader';
/**
 * The operation to perform.
 */
export class TestScriptSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCode(source._resource);
            }
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['accept']) {
            this.accept = new fhir.FhirCode({ value: source.accept });
        }
        if (source['_accept']) {
            if (this.accept) {
                this.accept.addExtendedProperties(source._accept);
            }
            else {
                this.accept = new fhir.FhirCode(source._accept);
            }
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['_destination']) {
            if (this.destination) {
                this.destination.addExtendedProperties(source._destination);
            }
            else {
                this.destination = new fhir.FhirInteger(source._destination);
            }
        }
        if (source['encodeRequestUrl']) {
            this.encodeRequestUrl = new fhir.FhirBoolean({ value: source.encodeRequestUrl });
        }
        if (source['_encodeRequestUrl']) {
            if (this.encodeRequestUrl) {
                this.encodeRequestUrl.addExtendedProperties(source._encodeRequestUrl);
            }
            else {
                this.encodeRequestUrl = new fhir.FhirBoolean(source._encodeRequestUrl);
            }
        }
        if (source['origin']) {
            this.origin = new fhir.FhirInteger({ value: source.origin });
        }
        if (source['_origin']) {
            if (this.origin) {
                this.origin.addExtendedProperties(source._origin);
            }
            else {
                this.origin = new fhir.FhirInteger(source._origin);
            }
        }
        if (source['params']) {
            this.params = new fhir.FhirString({ value: source.params });
        }
        if (source['_params']) {
            if (this.params) {
                this.params.addExtendedProperties(source._params);
            }
            else {
                this.params = new fhir.FhirString(source._params);
            }
        }
        if (source['requestHeader']) {
            this.requestHeader = source.requestHeader.map((x) => new fhir.TestScriptSetupActionOperationRequestHeader(x));
        }
        else {
            this.requestHeader = [];
        }
        if (source['requestId']) {
            this.requestId = new fhir.FhirId({ value: source.requestId });
        }
        if (source['_requestId']) {
            if (this.requestId) {
                this.requestId.addExtendedProperties(source._requestId);
            }
            else {
                this.requestId = new fhir.FhirId(source._requestId);
            }
        }
        if (source['responseId']) {
            this.responseId = new fhir.FhirId({ value: source.responseId });
        }
        if (source['_responseId']) {
            if (this.responseId) {
                this.responseId.addExtendedProperties(source._responseId);
            }
            else {
                this.responseId = new fhir.FhirId(source._responseId);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
        if (source['targetId']) {
            this.targetId = new fhir.FhirId({ value: source.targetId });
        }
        if (source['_targetId']) {
            if (this.targetId) {
                this.targetId.addExtendedProperties(source._targetId);
            }
            else {
                this.targetId = new fhir.FhirId(source._targetId);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirString({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirString(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.operation';
        }
        this.vOS('type', exp);
        this.vOSV('resource', exp, 'DefinedTypes', DefinedTypesVsValidation, 'r');
        this.vOS('label', exp);
        this.vOS('description', exp);
        this.vOSV('accept', exp, 'ContentType', ContentTypeVsValidation, 'r');
        this.vOSV('contentType', exp, 'ContentType', ContentTypeVsValidation, 'r');
        this.vOS('destination', exp);
        this.vOS('encodeRequestUrl', exp);
        this.vOS('origin', exp);
        this.vOS('params', exp);
        this.vOA('requestHeader', exp);
        this.vOS('requestId', exp);
        this.vOS('responseId', exp);
        this.vOS('sourceId', exp);
        this.vOS('targetId', exp);
        this.vOS('url', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperation._fts_dataType = 'TestScriptSetupActionOperation';
/**
 * The parameter value can be dynamic at runtime.
 */
export class TestScriptSetupActionAssertRuleParam extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssertRuleParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert.rule.param';
        }
        this.vRS('name', exp);
        this.vRS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssertRuleParam._fts_dataType = 'TestScriptSetupActionAssertRuleParam';
/**
 * Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.
 */
export class TestScriptSetupActionAssertRule extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssertRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['ruleId']) {
            this.ruleId = new fhir.FhirId({ value: source.ruleId });
        }
        else {
            this.ruleId = null;
        }
        if (source['_ruleId']) {
            if (this.ruleId) {
                this.ruleId.addExtendedProperties(source._ruleId);
            }
            else {
                this.ruleId = new fhir.FhirId(source._ruleId);
            }
        }
        if (source['param']) {
            this.param = source.param.map((x) => new fhir.TestScriptSetupActionAssertRuleParam(x));
        }
        else {
            this.param = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert.rule';
        }
        this.vRS('ruleId', exp);
        this.vOA('param', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssertRule._fts_dataType = 'TestScriptSetupActionAssertRule';
/**
 * The parameter value can be dynamic at runtime.
 */
export class TestScriptSetupActionAssertRulesetRuleParam extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssertRulesetRuleParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert.ruleset.rule.param';
        }
        this.vRS('name', exp);
        this.vRS('value', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssertRulesetRuleParam._fts_dataType = 'TestScriptSetupActionAssertRulesetRuleParam';
/**
 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
 */
export class TestScriptSetupActionAssertRulesetRule extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssertRulesetRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['ruleId']) {
            this.ruleId = new fhir.FhirId({ value: source.ruleId });
        }
        else {
            this.ruleId = null;
        }
        if (source['_ruleId']) {
            if (this.ruleId) {
                this.ruleId.addExtendedProperties(source._ruleId);
            }
            else {
                this.ruleId = new fhir.FhirId(source._ruleId);
            }
        }
        if (source['param']) {
            this.param = source.param.map((x) => new fhir.TestScriptSetupActionAssertRulesetRuleParam(x));
        }
        else {
            this.param = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert.ruleset.rule';
        }
        this.vRS('ruleId', exp);
        this.vOA('param', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssertRulesetRule._fts_dataType = 'TestScriptSetupActionAssertRulesetRule';
/**
 * Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.
 */
export class TestScriptSetupActionAssertRuleset extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssertRuleset - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['rulesetId']) {
            this.rulesetId = new fhir.FhirId({ value: source.rulesetId });
        }
        else {
            this.rulesetId = null;
        }
        if (source['_rulesetId']) {
            if (this.rulesetId) {
                this.rulesetId.addExtendedProperties(source._rulesetId);
            }
            else {
                this.rulesetId = new fhir.FhirId(source._rulesetId);
            }
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.TestScriptSetupActionAssertRulesetRule(x));
        }
        else {
            this.rule = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert.ruleset';
        }
        this.vRS('rulesetId', exp);
        this.vOA('rule', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssertRuleset._fts_dataType = 'TestScriptSetupActionAssertRuleset';
/**
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export class TestScriptSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['direction']) {
            this.direction = new fhir.FhirCode({ value: source.direction });
        }
        if (source['_direction']) {
            if (this.direction) {
                this.direction.addExtendedProperties(source._direction);
            }
            else {
                this.direction = new fhir.FhirCode(source._direction);
            }
        }
        if (source['compareToSourceId']) {
            this.compareToSourceId = new fhir.FhirString({ value: source.compareToSourceId });
        }
        if (source['_compareToSourceId']) {
            if (this.compareToSourceId) {
                this.compareToSourceId.addExtendedProperties(source._compareToSourceId);
            }
            else {
                this.compareToSourceId = new fhir.FhirString(source._compareToSourceId);
            }
        }
        if (source['compareToSourceExpression']) {
            this.compareToSourceExpression = new fhir.FhirString({ value: source.compareToSourceExpression });
        }
        if (source['_compareToSourceExpression']) {
            if (this.compareToSourceExpression) {
                this.compareToSourceExpression.addExtendedProperties(source._compareToSourceExpression);
            }
            else {
                this.compareToSourceExpression = new fhir.FhirString(source._compareToSourceExpression);
            }
        }
        if (source['compareToSourcePath']) {
            this.compareToSourcePath = new fhir.FhirString({ value: source.compareToSourcePath });
        }
        if (source['_compareToSourcePath']) {
            if (this.compareToSourcePath) {
                this.compareToSourcePath.addExtendedProperties(source._compareToSourcePath);
            }
            else {
                this.compareToSourcePath = new fhir.FhirString(source._compareToSourcePath);
            }
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression);
            }
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['_headerField']) {
            if (this.headerField) {
                this.headerField.addExtendedProperties(source._headerField);
            }
            else {
                this.headerField = new fhir.FhirString(source._headerField);
            }
        }
        if (source['minimumId']) {
            this.minimumId = new fhir.FhirString({ value: source.minimumId });
        }
        if (source['_minimumId']) {
            if (this.minimumId) {
                this.minimumId.addExtendedProperties(source._minimumId);
            }
            else {
                this.minimumId = new fhir.FhirString(source._minimumId);
            }
        }
        if (source['navigationLinks']) {
            this.navigationLinks = new fhir.FhirBoolean({ value: source.navigationLinks });
        }
        if (source['_navigationLinks']) {
            if (this.navigationLinks) {
                this.navigationLinks.addExtendedProperties(source._navigationLinks);
            }
            else {
                this.navigationLinks = new fhir.FhirBoolean(source._navigationLinks);
            }
        }
        if (source['operator']) {
            this.operator = new fhir.FhirCode({ value: source.operator });
        }
        if (source['_operator']) {
            if (this.operator) {
                this.operator.addExtendedProperties(source._operator);
            }
            else {
                this.operator = new fhir.FhirCode(source._operator);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['requestMethod']) {
            this.requestMethod = new fhir.FhirCode({ value: source.requestMethod });
        }
        if (source['_requestMethod']) {
            if (this.requestMethod) {
                this.requestMethod.addExtendedProperties(source._requestMethod);
            }
            else {
                this.requestMethod = new fhir.FhirCode(source._requestMethod);
            }
        }
        if (source['requestURL']) {
            this.requestURL = new fhir.FhirString({ value: source.requestURL });
        }
        if (source['_requestURL']) {
            if (this.requestURL) {
                this.requestURL.addExtendedProperties(source._requestURL);
            }
            else {
                this.requestURL = new fhir.FhirString(source._requestURL);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCode(source._resource);
            }
        }
        if (source['response']) {
            this.response = new fhir.FhirCode({ value: source.response });
        }
        if (source['_response']) {
            if (this.response) {
                this.response.addExtendedProperties(source._response);
            }
            else {
                this.response = new fhir.FhirCode(source._response);
            }
        }
        if (source['responseCode']) {
            this.responseCode = new fhir.FhirString({ value: source.responseCode });
        }
        if (source['_responseCode']) {
            if (this.responseCode) {
                this.responseCode.addExtendedProperties(source._responseCode);
            }
            else {
                this.responseCode = new fhir.FhirString(source._responseCode);
            }
        }
        if (source['rule']) {
            this.rule = new fhir.TestScriptSetupActionAssertRule(source.rule);
        }
        if (source['ruleset']) {
            this.ruleset = new fhir.TestScriptSetupActionAssertRuleset(source.ruleset);
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
        if (source['validateProfileId']) {
            this.validateProfileId = new fhir.FhirId({ value: source.validateProfileId });
        }
        if (source['_validateProfileId']) {
            if (this.validateProfileId) {
                this.validateProfileId.addExtendedProperties(source._validateProfileId);
            }
            else {
                this.validateProfileId = new fhir.FhirId(source._validateProfileId);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['warningOnly']) {
            this.warningOnly = new fhir.FhirBoolean({ value: source.warningOnly });
        }
        if (source['_warningOnly']) {
            if (this.warningOnly) {
                this.warningOnly.addExtendedProperties(source._warningOnly);
            }
            else {
                this.warningOnly = new fhir.FhirBoolean(source._warningOnly);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert';
        }
        this.vOS('label', exp);
        this.vOS('description', exp);
        this.vOSV('direction', exp, 'AssertDirection', AssertDirectionVsValidation, 'r');
        this.vOS('compareToSourceId', exp);
        this.vOS('compareToSourceExpression', exp);
        this.vOS('compareToSourcePath', exp);
        this.vOSV('contentType', exp, 'ContentType', ContentTypeVsValidation, 'r');
        this.vOS('expression', exp);
        this.vOS('headerField', exp);
        this.vOS('minimumId', exp);
        this.vOS('navigationLinks', exp);
        this.vOSV('operator', exp, 'AssertOperator', AssertOperatorVsValidation, 'r');
        this.vOS('path', exp);
        this.vOSV('requestMethod', exp, 'HttpOperations', HttpOperationsVsValidation, 'r');
        this.vOS('requestURL', exp);
        this.vOSV('resource', exp, 'DefinedTypes', DefinedTypesVsValidation, 'r');
        this.vOSV('response', exp, 'AssertResponseCodeTypes', AssertResponseCodeTypesVsValidation, 'r');
        this.vOS('responseCode', exp);
        this.vOS('rule', exp);
        this.vOS('ruleset', exp);
        this.vOS('sourceId', exp);
        this.vOS('validateProfileId', exp);
        this.vOS('value', exp);
        this.vOS('warningOnly', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssert._fts_dataType = 'TestScriptSetupActionAssert';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action';
        }
        this.vOS('operation', exp);
        this.vOS('assert', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupAction._fts_dataType = 'TestScriptSetupAction';
/**
 * A series of required setup operations before tests are executed.
 */
export class TestScriptSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptSetupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup';
        }
        this.vRA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetup._fts_dataType = 'TestScriptSetup';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.test.action';
        }
        this.vOS('operation', exp);
        this.vOS('assert', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTestAction._fts_dataType = 'TestScriptTestAction';
/**
 * A test in this script.
 */
export class TestScriptTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTestAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.test';
        }
        this.vOS('name', exp);
        this.vOS('description', exp);
        this.vRA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTest._fts_dataType = 'TestScriptTest';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        else {
            this.operation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.teardown.action';
        }
        this.vRS('operation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardownAction._fts_dataType = 'TestScriptTeardownAction';
/**
 * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
 */
export class TestScriptTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTeardownAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.teardown';
        }
        this.vRA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardown._fts_dataType = 'TestScriptTeardown';
/**
 * A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification.
 */
export class TestScript extends fhir.DomainResource {
    /**
     * Default constructor for TestScript - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TestScript';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['origin']) {
            this.origin = source.origin.map((x) => new fhir.TestScriptOrigin(x));
        }
        else {
            this.origin = [];
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.TestScriptDestination(x));
        }
        else {
            this.destination = [];
        }
        if (source['metadata']) {
            this.metadata = new fhir.TestScriptMetadata(source.metadata);
        }
        if (source['fixture']) {
            this.fixture = source.fixture.map((x) => new fhir.TestScriptFixture(x));
        }
        else {
            this.fixture = [];
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x));
        }
        else {
            this.profile = [];
        }
        if (source['variable']) {
            this.variable = source.variable.map((x) => new fhir.TestScriptVariable(x));
        }
        else {
            this.variable = [];
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.TestScriptRule(x));
        }
        else {
            this.rule = [];
        }
        if (source['ruleset']) {
            this.ruleset = source.ruleset.map((x) => new fhir.TestScriptRuleset(x));
        }
        else {
            this.ruleset = [];
        }
        if (source['setup']) {
            this.setup = new fhir.TestScriptSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestScriptTest(x));
        }
        else {
            this.test = [];
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestScriptTeardown(source.teardown);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript';
        }
        this.vRS('resourceType', exp);
        this.vRS('url', exp);
        this.vOS('identifier', exp);
        this.vOS('version', exp);
        this.vRS('name', exp);
        this.vOS('title', exp);
        this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('date', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('description', exp);
        this.vOA('useContext', exp);
        this.vOA('jurisdiction', exp);
        this.vOS('purpose', exp);
        this.vOS('copyright', exp);
        this.vOA('origin', exp);
        this.vOA('destination', exp);
        this.vOS('metadata', exp);
        this.vOA('fixture', exp);
        this.vOA('profile', exp);
        this.vOA('variable', exp);
        this.vOA('rule', exp);
        this.vOA('ruleset', exp);
        this.vOS('setup', exp);
        this.vOA('test', exp);
        this.vOS('teardown', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScript._fts_dataType = 'TestScript';
//# sourceMappingURL=data:application/json;base64,