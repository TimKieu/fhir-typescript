// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentManifest
import * as fhir from '../fhir.js';
// @ts-ignore
import { DocumentReferenceStatusVsValidation } from '../fhirValueSets/DocumentReferenceStatusVsValidation.js';
/**
 * The list of Documents included in the manifest.
 */
export class DocumentManifestContent extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentManifestContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['p']) {
            this.p = source.p;
        }
        else if (source['pAttachment']) {
            this.p = new fhir.Attachment(source.pAttachment);
        }
        else if (source['pReference']) {
            this.p = new fhir.Reference(source.pReference);
        }
        else {
            this.p = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentManifest.content';
        }
        iss.push(...this.vRS('p', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentManifestContent._fts_dataType = 'DocumentManifestContent';
/**
 * Internal flag to properly serialize choice-type element DocumentManifest.content.p[x]
 */
DocumentManifestContent._fts_pIsChoice = true;
/**
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export class DocumentManifestRelated extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentManifestRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['ref']) {
            this.ref = new fhir.Reference(source.ref);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentManifest.related';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('ref', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentManifestRelated._fts_dataType = 'DocumentManifestRelated';
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
export class DocumentManifest extends fhir.DomainResource {
    /**
     * Default constructor for DocumentManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DocumentManifest';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
        if (source['source']) {
            this.source = new fhir.FhirUri({ value: source.source });
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirUri(source._source);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.DocumentManifestContent(x));
        }
        else {
            this.content = [];
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.DocumentManifestRelated(x));
        }
        else {
            this.related = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DocumentManifest';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('masterIdentifier', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'DocumentReferenceStatus', DocumentReferenceStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOA('recipient', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vRA('content', exp));
        iss.push(...this.vOA('related', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentManifest._fts_dataType = 'DocumentManifest';
//# sourceMappingURL=data:application/json;base64,