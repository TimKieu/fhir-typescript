// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiagnosticReportStatusVsValidation } from '../fhirValueSets/DiagnosticReportStatusVsValidation.js';
/**
 * Indicates who or what participated in producing the report.
 */
export class DiagnosticReportPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticReport.performer';
        }
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vRS('actor', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReportPerformer._fts_dataType = 'DiagnosticReportPerformer';
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export class DiagnosticReportImage extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportImage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
        if (source['link']) {
            this.link = new fhir.Reference(source.link, options);
        }
        else {
            this.link = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticReport.image';
        }
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vRS('link', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReportImage._fts_dataType = 'DiagnosticReportImage';
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export class DiagnosticReport extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DiagnosticReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime'] !== undefined) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime }, options);
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod, options);
        }
        if (source['issued'] !== undefined) {
            this.issued = new fhir.FhirInstant({ value: source.issued }, options);
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirInstant(source._issued, options);
            }
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.DiagnosticReportPerformer(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.specimen = [];
        }
        if (source['result']) {
            this.result = source.result.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.result = [];
        }
        if (source['imagingStudy']) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.imagingStudy = [];
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.DiagnosticReportImage(x, options));
        }
        else {
            this.image = [];
        }
        if (source['conclusion'] !== undefined) {
            this.conclusion = new fhir.FhirString({ value: source.conclusion }, options);
        }
        if (source['_conclusion']) {
            if (this.conclusion) {
                this.conclusion.addExtendedProperties(source._conclusion);
            }
            else {
                this.conclusion = new fhir.FhirString(source._conclusion, options);
            }
        }
        if (source['codedDiagnosis']) {
            this.codedDiagnosis = source.codedDiagnosis.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.codedDiagnosis = [];
        }
        if (source['presentedForm']) {
            this.presentedForm = source.presentedForm.map((x) => new fhir.Attachment(x, options));
        }
        else {
            this.presentedForm = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticReport';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vRSV('status', exp, 'DiagnosticReportStatus', DiagnosticReportStatusVsValidation, 'r'));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('effective', exp));
        iss.push(...this.vOS('issued', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOA('specimen', exp));
        iss.push(...this.vOA('result', exp));
        iss.push(...this.vOA('imagingStudy', exp));
        iss.push(...this.vOA('image', exp));
        iss.push(...this.vOS('conclusion', exp));
        iss.push(...this.vOA('codedDiagnosis', exp));
        iss.push(...this.vOA('presentedForm', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReport._fts_dataType = 'DiagnosticReport';
/**
 * Internal flag to properly serialize choice-type element DiagnosticReport.effective[x]
 */
DiagnosticReport._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,