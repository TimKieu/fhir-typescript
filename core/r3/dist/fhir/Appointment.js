// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Appointment
import * as fhir from '../fhir.js';
// @ts-ignore
import { ParticipantrequiredVsValidation } from '../fhirValueSets/ParticipantrequiredVsValidation.js';
// @ts-ignore
import { ParticipationstatusVsValidation } from '../fhirValueSets/ParticipationstatusVsValidation.js';
// @ts-ignore
import { AppointmentstatusVsValidation } from '../fhirValueSets/AppointmentstatusVsValidation.js';
/**
 * List of participants involved in the appointment.
 */
export class AppointmentParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for AppointmentParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['required']) {
            this.required = new fhir.FhirCode({ value: source.required });
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirCode(source._required);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Appointment.participant';
        }
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('actor', exp));
        iss.push(...this.vOSV('required', exp, 'Participantrequired', ParticipantrequiredVsValidation, 'r'));
        iss.push(...this.vRSV('status', exp, 'Participationstatus', ParticipationstatusVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AppointmentParticipant._fts_dataType = 'AppointmentParticipant';
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export class Appointment extends fhir.DomainResource {
    /**
     * Default constructor for Appointment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Appointment';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['serviceCategory']) {
            this.serviceCategory = new fhir.CodeableConcept(source.serviceCategory);
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceType = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['indication']) {
            this.indication = source.indication.map((x) => new fhir.Reference(x));
        }
        else {
            this.indication = [];
        }
        if (source['priority']) {
            this.priority = new fhir.FhirUnsignedInt({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirUnsignedInt(source._priority);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['start']) {
            this.start = new fhir.FhirInstant({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInstant(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInstant({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end);
            }
        }
        if (source['minutesDuration']) {
            this.minutesDuration = new fhir.FhirPositiveInt({ value: source.minutesDuration });
        }
        if (source['_minutesDuration']) {
            if (this.minutesDuration) {
                this.minutesDuration.addExtendedProperties(source._minutesDuration);
            }
            else {
                this.minutesDuration = new fhir.FhirPositiveInt(source._minutesDuration);
            }
        }
        if (source['slot']) {
            this.slot = source.slot.map((x) => new fhir.Reference(x));
        }
        else {
            this.slot = [];
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['incomingReferral']) {
            this.incomingReferral = source.incomingReferral.map((x) => new fhir.Reference(x));
        }
        else {
            this.incomingReferral = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.AppointmentParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['requestedPeriod']) {
            this.requestedPeriod = source.requestedPeriod.map((x) => new fhir.Period(x));
        }
        else {
            this.requestedPeriod = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Appointment';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'Appointmentstatus', AppointmentstatusVsValidation, 'r'));
        iss.push(...this.vOS('serviceCategory', exp));
        iss.push(...this.vOA('serviceType', exp));
        iss.push(...this.vOA('specialty', exp));
        iss.push(...this.vOS('appointmentType', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('indication', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('minutesDuration', exp));
        iss.push(...this.vOA('slot', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOA('incomingReferral', exp));
        iss.push(...this.vRA('participant', exp));
        iss.push(...this.vOA('requestedPeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Appointment._fts_dataType = 'Appointment';
//# sourceMappingURL=data:application/json;base64,