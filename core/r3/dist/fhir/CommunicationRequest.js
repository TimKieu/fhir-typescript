// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: CommunicationRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export class CommunicationRequestPayload extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationRequestPayload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentString']) {
            this.content = new fhir.FhirString({ value: source.contentString });
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest.payload';
        }
        iss.push(...this.vRS('content', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequestPayload._fts_dataType = 'CommunicationRequestPayload';
/**
 * Internal flag to properly serialize choice-type element CommunicationRequest.payload.content[x]
 */
CommunicationRequestPayload._fts_contentIsChoice = true;
/**
 * The individual who initiated the request and has responsibility for its activation.
 */
export class CommunicationRequestRequester extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationRequestRequester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['agent']) {
            this.agent = new fhir.Reference(source.agent);
        }
        else {
            this.agent = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest.requester';
        }
        iss.push(...this.vRS('agent', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequestRequester._fts_dataType = 'CommunicationRequestRequester';
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export class CommunicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for CommunicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CommunicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        else {
            this.replaces = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['medium']) {
            this.medium = source.medium.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.medium = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.Reference(x));
        }
        else {
            this.topic = [];
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['payload']) {
            this.payload = source.payload.map((x) => new fhir.CommunicationRequestPayload(x));
        }
        else {
            this.payload = [];
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['requester']) {
            this.requester = new fhir.CommunicationRequestRequester(source.requester);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('replaces', exp));
        iss.push(...this.vOS('groupIdentifier', exp));
        iss.push(...this.vRSV('status', exp, 'RequestStatus', RequestStatusVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r'));
        iss.push(...this.vOA('medium', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOA('recipient', exp));
        iss.push(...this.vOA('topic', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOA('payload', exp));
        iss.push(...this.vOS('occurrence', exp));
        iss.push(...this.vOS('authoredOn', exp));
        iss.push(...this.vOS('sender', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequest._fts_dataType = 'CommunicationRequest';
/**
 * Internal flag to properly serialize choice-type element CommunicationRequest.occurrence[x]
 */
CommunicationRequest._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,