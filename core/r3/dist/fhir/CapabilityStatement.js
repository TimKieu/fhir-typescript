// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: CapabilityStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { TypeRestfulInteractionVsValidation } from '../fhirValueSets/TypeRestfulInteractionVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { VersioningPolicyVsValidation } from '../fhirValueSets/VersioningPolicyVsValidation.js';
// @ts-ignore
import { ConditionalReadStatusVsValidation } from '../fhirValueSets/ConditionalReadStatusVsValidation.js';
// @ts-ignore
import { ConditionalDeleteStatusVsValidation } from '../fhirValueSets/ConditionalDeleteStatusVsValidation.js';
// @ts-ignore
import { ReferenceHandlingPolicyVsValidation } from '../fhirValueSets/ReferenceHandlingPolicyVsValidation.js';
// @ts-ignore
import { SystemRestfulInteractionVsValidation } from '../fhirValueSets/SystemRestfulInteractionVsValidation.js';
// @ts-ignore
import { RestfulCapabilityModeVsValidation } from '../fhirValueSets/RestfulCapabilityModeVsValidation.js';
// @ts-ignore
import { EventCapabilityModeVsValidation } from '../fhirValueSets/EventCapabilityModeVsValidation.js';
// @ts-ignore
import { MessageSignificanceCategoryVsValidation } from '../fhirValueSets/MessageSignificanceCategoryVsValidation.js';
// @ts-ignore
import { DocumentModeVsValidation } from '../fhirValueSets/DocumentModeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { CapabilityStatementKindVsValidation } from '../fhirValueSets/CapabilityStatementKindVsValidation.js';
// @ts-ignore
import { UnknownContentVsValidation } from '../fhirValueSets/UnknownContentVsValidation.js';
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
export class CapabilityStatementSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['releaseDate']) {
            this.releaseDate = new fhir.FhirDateTime({ value: source.releaseDate });
        }
        if (source['_releaseDate']) {
            if (this.releaseDate) {
                this.releaseDate.addExtendedProperties(source._releaseDate);
            }
            else {
                this.releaseDate = new fhir.FhirDateTime(source._releaseDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.software';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('releaseDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementSoftware._fts_dataType = 'CapabilityStatementSoftware';
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class CapabilityStatementImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.implementation';
        }
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementImplementation._fts_dataType = 'CapabilityStatementImplementation';
/**
 * Certificates associated with security profiles.
 */
export class CapabilityStatementRestSecurityCertificate extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestSecurityCertificate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['blob']) {
            this.blob = new fhir.FhirBase64Binary({ value: source.blob });
        }
        if (source['_blob']) {
            if (this.blob) {
                this.blob.addExtendedProperties(source._blob);
            }
            else {
                this.blob = new fhir.FhirBase64Binary(source._blob);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.security.certificate';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('blob', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestSecurityCertificate._fts_dataType = 'CapabilityStatementRestSecurityCertificate';
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class CapabilityStatementRestSecurity extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestSecurity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['cors']) {
            this.cors = new fhir.FhirBoolean({ value: source.cors });
        }
        if (source['_cors']) {
            if (this.cors) {
                this.cors.addExtendedProperties(source._cors);
            }
            else {
                this.cors = new fhir.FhirBoolean(source._cors);
            }
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.service = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['certificate']) {
            this.certificate = source.certificate.map((x) => new fhir.CapabilityStatementRestSecurityCertificate(x));
        }
        else {
            this.certificate = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.security';
        }
        iss.push(...this.vOS('cors', exp));
        iss.push(...this.vOA('service', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('certificate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestSecurity._fts_dataType = 'CapabilityStatementRestSecurity';
/**
 * Identifies a restful operation supported by the solution.
 */
export class CapabilityStatementRestResourceInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.resource.interaction';
        }
        iss.push(...this.vRSV('code', exp, 'TypeRestfulInteraction', TypeRestfulInteractionVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceInteraction._fts_dataType = 'CapabilityStatementRestResourceInteraction';
/**
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 */
export class CapabilityStatementRestResourceSearchParam extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirUri({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.resource.searchParam';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vRSV('type', exp, 'SearchParamType', SearchParamTypeVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceSearchParam._fts_dataType = 'CapabilityStatementRestResourceSearchParam';
/**
 * Max of one repetition per resource type.
 */
export class CapabilityStatementRestResource extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile);
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestResourceInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['versioning']) {
            this.versioning = new fhir.FhirCode({ value: source.versioning });
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning);
            }
        }
        if (source['readHistory']) {
            this.readHistory = new fhir.FhirBoolean({ value: source.readHistory });
        }
        if (source['_readHistory']) {
            if (this.readHistory) {
                this.readHistory.addExtendedProperties(source._readHistory);
            }
            else {
                this.readHistory = new fhir.FhirBoolean(source._readHistory);
            }
        }
        if (source['updateCreate']) {
            this.updateCreate = new fhir.FhirBoolean({ value: source.updateCreate });
        }
        if (source['_updateCreate']) {
            if (this.updateCreate) {
                this.updateCreate.addExtendedProperties(source._updateCreate);
            }
            else {
                this.updateCreate = new fhir.FhirBoolean(source._updateCreate);
            }
        }
        if (source['conditionalCreate']) {
            this.conditionalCreate = new fhir.FhirBoolean({ value: source.conditionalCreate });
        }
        if (source['_conditionalCreate']) {
            if (this.conditionalCreate) {
                this.conditionalCreate.addExtendedProperties(source._conditionalCreate);
            }
            else {
                this.conditionalCreate = new fhir.FhirBoolean(source._conditionalCreate);
            }
        }
        if (source['conditionalRead']) {
            this.conditionalRead = new fhir.FhirCode({ value: source.conditionalRead });
        }
        if (source['_conditionalRead']) {
            if (this.conditionalRead) {
                this.conditionalRead.addExtendedProperties(source._conditionalRead);
            }
            else {
                this.conditionalRead = new fhir.FhirCode(source._conditionalRead);
            }
        }
        if (source['conditionalUpdate']) {
            this.conditionalUpdate = new fhir.FhirBoolean({ value: source.conditionalUpdate });
        }
        if (source['_conditionalUpdate']) {
            if (this.conditionalUpdate) {
                this.conditionalUpdate.addExtendedProperties(source._conditionalUpdate);
            }
            else {
                this.conditionalUpdate = new fhir.FhirBoolean(source._conditionalUpdate);
            }
        }
        if (source['conditionalDelete']) {
            this.conditionalDelete = new fhir.FhirCode({ value: source.conditionalDelete });
        }
        if (source['_conditionalDelete']) {
            if (this.conditionalDelete) {
                this.conditionalDelete.addExtendedProperties(source._conditionalDelete);
            }
            else {
                this.conditionalDelete = new fhir.FhirCode(source._conditionalDelete);
            }
        }
        if (source['referencePolicy']) {
            this.referencePolicy = source.referencePolicy.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.referencePolicy = [];
        }
        if (source['_referencePolicy']) {
            source._referencePolicy.forEach((x, i) => {
                if (this.referencePolicy.length >= i) {
                    if (x) {
                        this.referencePolicy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.referencePolicy.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['searchInclude']) {
            this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchInclude = [];
        }
        if (source['_searchInclude']) {
            source._searchInclude.forEach((x, i) => {
                if (this.searchInclude.length >= i) {
                    if (x) {
                        this.searchInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchRevInclude']) {
            this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchRevInclude = [];
        }
        if (source['_searchRevInclude']) {
            source._searchRevInclude.forEach((x, i) => {
                if (this.searchRevInclude.length >= i) {
                    if (x) {
                        this.searchRevInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchRevInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.resource';
        }
        iss.push(...this.vRSV('type', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOS('profile', exp));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vRA('interaction', exp));
        iss.push(...this.vOSV('versioning', exp, 'VersioningPolicy', VersioningPolicyVsValidation, 'r'));
        iss.push(...this.vOS('readHistory', exp));
        iss.push(...this.vOS('updateCreate', exp));
        iss.push(...this.vOS('conditionalCreate', exp));
        iss.push(...this.vOSV('conditionalRead', exp, 'ConditionalReadStatus', ConditionalReadStatusVsValidation, 'r'));
        iss.push(...this.vOS('conditionalUpdate', exp));
        iss.push(...this.vOSV('conditionalDelete', exp, 'ConditionalDeleteStatus', ConditionalDeleteStatusVsValidation, 'r'));
        iss.push(...this.vOAV('referencePolicy', exp, 'ReferenceHandlingPolicy', ReferenceHandlingPolicyVsValidation, 'r'));
        iss.push(...this.vOA('searchInclude', exp));
        iss.push(...this.vOA('searchRevInclude', exp));
        iss.push(...this.vOA('searchParam', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResource._fts_dataType = 'CapabilityStatementRestResource';
/**
 * A specification of restful operations supported by the system.
 */
export class CapabilityStatementRestInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.interaction';
        }
        iss.push(...this.vRSV('code', exp, 'SystemRestfulInteraction', SystemRestfulInteractionVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestInteraction._fts_dataType = 'CapabilityStatementRestInteraction';
/**
 * Definition of an operation or a named query together with its parameters and their meaning and type.
 */
export class CapabilityStatementRestOperation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition);
        }
        else {
            this.definition = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest.operation';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRS('definition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestOperation._fts_dataType = 'CapabilityStatementRestOperation';
/**
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export class CapabilityStatementRest extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['security']) {
            this.security = new fhir.CapabilityStatementRestSecurity(source.security);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.CapabilityStatementRestResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestOperation(x));
        }
        else {
            this.operation = [];
        }
        if (source['compartment']) {
            this.compartment = source.compartment.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.compartment = [];
        }
        if (source['_compartment']) {
            source._compartment.forEach((x, i) => {
                if (this.compartment.length >= i) {
                    if (x) {
                        this.compartment[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.compartment.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.rest';
        }
        iss.push(...this.vRSV('mode', exp, 'RestfulCapabilityMode', RestfulCapabilityModeVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vOS('security', exp));
        iss.push(...this.vOA('resource', exp));
        iss.push(...this.vOA('interaction', exp));
        iss.push(...this.vOA('searchParam', exp));
        iss.push(...this.vOA('operation', exp));
        iss.push(...this.vOA('compartment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRest._fts_dataType = 'CapabilityStatementRest';
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class CapabilityStatementMessagingEndpoint extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['protocol']) {
            this.protocol = new fhir.Coding(source.protocol);
        }
        else {
            this.protocol = null;
        }
        if (source['address']) {
            this.address = new fhir.FhirUri({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirUri(source._address);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.messaging.endpoint';
        }
        iss.push(...this.vRS('protocol', exp));
        iss.push(...this.vRS('address', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingEndpoint._fts_dataType = 'CapabilityStatementMessagingEndpoint';
/**
 * This is a proposed alternative to the messaging.event structure.
 */
export class CapabilityStatementMessagingSupportedMessage extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingSupportedMessage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition);
        }
        else {
            this.definition = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.messaging.supportedMessage';
        }
        iss.push(...this.vRSV('mode', exp, 'EventCapabilityMode', EventCapabilityModeVsValidation, 'r'));
        iss.push(...this.vRS('definition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingSupportedMessage._fts_dataType = 'CapabilityStatementMessagingSupportedMessage';
/**
 * The same event may be listed up to two times - once as sender and once as receiver.
 */
export class CapabilityStatementMessagingEvent extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.Coding(source.code);
        }
        else {
            this.code = null;
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['focus']) {
            this.focus = new fhir.FhirCode({ value: source.focus });
        }
        else {
            this.focus = null;
        }
        if (source['_focus']) {
            if (this.focus) {
                this.focus.addExtendedProperties(source._focus);
            }
            else {
                this.focus = new fhir.FhirCode(source._focus);
            }
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        else {
            this.request = null;
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response);
        }
        else {
            this.response = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.messaging.event';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOSV('category', exp, 'MessageSignificanceCategory', MessageSignificanceCategoryVsValidation, 'r'));
        iss.push(...this.vRSV('mode', exp, 'EventCapabilityMode', EventCapabilityModeVsValidation, 'r'));
        iss.push(...this.vRSV('focus', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vRS('request', exp));
        iss.push(...this.vRS('response', exp));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingEvent._fts_dataType = 'CapabilityStatementMessagingEvent';
/**
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export class CapabilityStatementMessaging extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.CapabilityStatementMessagingEndpoint(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['reliableCache']) {
            this.reliableCache = new fhir.FhirUnsignedInt({ value: source.reliableCache });
        }
        if (source['_reliableCache']) {
            if (this.reliableCache) {
                this.reliableCache.addExtendedProperties(source._reliableCache);
            }
            else {
                this.reliableCache = new fhir.FhirUnsignedInt(source._reliableCache);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['supportedMessage']) {
            this.supportedMessage = source.supportedMessage.map((x) => new fhir.CapabilityStatementMessagingSupportedMessage(x));
        }
        else {
            this.supportedMessage = [];
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CapabilityStatementMessagingEvent(x));
        }
        else {
            this.event = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.messaging';
        }
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vOS('reliableCache', exp));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vOA('supportedMessage', exp));
        iss.push(...this.vOA('event', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessaging._fts_dataType = 'CapabilityStatementMessaging';
/**
 * A document definition.
 */
export class CapabilityStatementDocument extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementDocument - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement.document';
        }
        iss.push(...this.vRSV('mode', exp, 'DocumentMode', DocumentModeVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vRS('profile', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementDocument._fts_dataType = 'CapabilityStatementDocument';
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class CapabilityStatement extends fhir.DomainResource {
    /**
     * Default constructor for CapabilityStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CapabilityStatement';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['_instantiates']) {
            source._instantiates.forEach((x, i) => {
                if (this.instantiates.length >= i) {
                    if (x) {
                        this.instantiates[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiates.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['software']) {
            this.software = new fhir.CapabilityStatementSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.CapabilityStatementImplementation(source.implementation);
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirId({ value: source.fhirVersion });
        }
        else {
            this.fhirVersion = null;
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirId(source._fhirVersion);
            }
        }
        if (source['acceptUnknown']) {
            this.acceptUnknown = new fhir.FhirCode({ value: source.acceptUnknown });
        }
        else {
            this.acceptUnknown = null;
        }
        if (source['_acceptUnknown']) {
            if (this.acceptUnknown) {
                this.acceptUnknown.addExtendedProperties(source._acceptUnknown);
            }
            else {
                this.acceptUnknown = new fhir.FhirCode(source._acceptUnknown);
            }
        }
        if (source['format']) {
            this.format = source.format.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.format = [];
        }
        if (source['_format']) {
            source._format.forEach((x, i) => {
                if (this.format.length >= i) {
                    if (x) {
                        this.format[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.format.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['patchFormat']) {
            this.patchFormat = source.patchFormat.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.patchFormat = [];
        }
        if (source['_patchFormat']) {
            source._patchFormat.forEach((x, i) => {
                if (this.patchFormat.length >= i) {
                    if (x) {
                        this.patchFormat[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.patchFormat.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['implementationGuide']) {
            this.implementationGuide = source.implementationGuide.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.implementationGuide = [];
        }
        if (source['_implementationGuide']) {
            source._implementationGuide.forEach((x, i) => {
                if (this.implementationGuide.length >= i) {
                    if (x) {
                        this.implementationGuide[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.implementationGuide.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x));
        }
        else {
            this.profile = [];
        }
        if (source['rest']) {
            this.rest = source.rest.map((x) => new fhir.CapabilityStatementRest(x));
        }
        else {
            this.rest = [];
        }
        if (source['messaging']) {
            this.messaging = source.messaging.map((x) => new fhir.CapabilityStatementMessaging(x));
        }
        else {
            this.messaging = [];
        }
        if (source['document']) {
            this.document = source.document.map((x) => new fhir.CapabilityStatementDocument(x));
        }
        else {
            this.document = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CapabilityStatement';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vRSV('kind', exp, 'CapabilityStatementKind', CapabilityStatementKindVsValidation, 'r'));
        iss.push(...this.vOA('instantiates', exp));
        iss.push(...this.vOS('software', exp));
        iss.push(...this.vOS('implementation', exp));
        iss.push(...this.vRS('fhirVersion', exp));
        iss.push(...this.vRSV('acceptUnknown', exp, 'UnknownContent', UnknownContentVsValidation, 'r'));
        iss.push(...this.vRA('format', exp));
        iss.push(...this.vOA('patchFormat', exp));
        iss.push(...this.vOA('implementationGuide', exp));
        iss.push(...this.vOA('profile', exp));
        iss.push(...this.vOA('rest', exp));
        iss.push(...this.vOA('messaging', exp));
        iss.push(...this.vOA('document', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatement._fts_dataType = 'CapabilityStatement';
//# sourceMappingURL=data:application/json;base64,