// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingStudy
import * as fhir from '../fhir.js';
// @ts-ignore
import { InstanceAvailabilityVsValidation } from '../fhirValueSets/InstanceAvailabilityVsValidation.js';
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export class ImagingStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['number'] !== undefined) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number }, options);
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirUnsignedInt(source._number, options);
            }
        }
        if (source['sopClass'] !== undefined) {
            this.sopClass = new fhir.FhirOid({ value: source.sopClass }, options);
        }
        else {
            this.sopClass = null;
        }
        if (source['_sopClass']) {
            if (this.sopClass) {
                this.sopClass.addExtendedProperties(source._sopClass);
            }
            else {
                this.sopClass = new fhir.FhirOid(source._sopClass, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy.series.instance';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOS('number', exp));
        iss.push(...this.vRS('sopClass', exp));
        iss.push(...this.vOS('title', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeriesInstance._fts_dataType = 'ImagingStudySeriesInstance';
/**
 * Each study has one or more series of images or other content.
 */
export class ImagingStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['number'] !== undefined) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number }, options);
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirUnsignedInt(source._number, options);
            }
        }
        if (source['modality']) {
            this.modality = new fhir.Coding(source.modality, options);
        }
        else {
            this.modality = null;
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['numberOfInstances'] !== undefined) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances }, options);
        }
        if (source['_numberOfInstances']) {
            if (this.numberOfInstances) {
                this.numberOfInstances.addExtendedProperties(source._numberOfInstances);
            }
            else {
                this.numberOfInstances = new fhir.FhirUnsignedInt(source._numberOfInstances, options);
            }
        }
        if (source['availability'] !== undefined) {
            this.availability = new fhir.FhirCode({ value: source.availability }, options);
        }
        if (source['_availability']) {
            if (this.availability) {
                this.availability.addExtendedProperties(source._availability);
            }
            else {
                this.availability = new fhir.FhirCode(source._availability, options);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.endpoint = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.Coding(source.bodySite, options);
        }
        if (source['laterality']) {
            this.laterality = new fhir.Coding(source.laterality, options);
        }
        if (source['started'] !== undefined) {
            this.started = new fhir.FhirDateTime({ value: source.started }, options);
        }
        if (source['_started']) {
            if (this.started) {
                this.started.addExtendedProperties(source._started);
            }
            else {
                this.started = new fhir.FhirDateTime(source._started, options);
            }
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingStudySeriesInstance(x, options));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy.series';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOS('number', exp));
        iss.push(...this.vRS('modality', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('numberOfInstances', exp));
        iss.push(...this.vOSV('availability', exp, 'InstanceAvailability', InstanceAvailabilityVsValidation, 'r'));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOS('laterality', exp));
        iss.push(...this.vOS('started', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOA('instance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeries._fts_dataType = 'ImagingStudySeries';
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export class ImagingStudy extends fhir.DomainResource {
    /**
     * Default constructor for ImagingStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingStudy';
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['accession']) {
            this.accession = new fhir.Identifier(source.accession, options);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['availability'] !== undefined) {
            this.availability = new fhir.FhirCode({ value: source.availability }, options);
        }
        if (source['_availability']) {
            if (this.availability) {
                this.availability.addExtendedProperties(source._availability);
            }
            else {
                this.availability = new fhir.FhirCode(source._availability, options);
            }
        }
        if (source['modalityList']) {
            this.modalityList = source.modalityList.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.modalityList = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['started'] !== undefined) {
            this.started = new fhir.FhirDateTime({ value: source.started }, options);
        }
        if (source['_started']) {
            if (this.started) {
                this.started.addExtendedProperties(source._started);
            }
            else {
                this.started = new fhir.FhirDateTime(source._started, options);
            }
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['referrer']) {
            this.referrer = new fhir.Reference(source.referrer, options);
        }
        if (source['interpreter']) {
            this.interpreter = source.interpreter.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.interpreter = [];
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.endpoint = [];
        }
        if (source['numberOfSeries'] !== undefined) {
            this.numberOfSeries = new fhir.FhirUnsignedInt({ value: source.numberOfSeries }, options);
        }
        if (source['_numberOfSeries']) {
            if (this.numberOfSeries) {
                this.numberOfSeries.addExtendedProperties(source._numberOfSeries);
            }
            else {
                this.numberOfSeries = new fhir.FhirUnsignedInt(source._numberOfSeries, options);
            }
        }
        if (source['numberOfInstances'] !== undefined) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances }, options);
        }
        if (source['_numberOfInstances']) {
            if (this.numberOfInstances) {
                this.numberOfInstances.addExtendedProperties(source._numberOfInstances);
            }
            else {
                this.numberOfInstances = new fhir.FhirUnsignedInt(source._numberOfInstances, options);
            }
        }
        if (source['procedureReference']) {
            this.procedureReference = source.procedureReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.procedureReference = [];
        }
        if (source['procedureCode']) {
            this.procedureCode = source.procedureCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.procedureCode = [];
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingStudySeries(x, options));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingStudy';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOS('accession', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('availability', exp, 'InstanceAvailability', InstanceAvailabilityVsValidation, 'r'));
        iss.push(...this.vOA('modalityList', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('started', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOS('referrer', exp));
        iss.push(...this.vOA('interpreter', exp));
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vOS('numberOfSeries', exp));
        iss.push(...this.vOS('numberOfInstances', exp));
        iss.push(...this.vOA('procedureReference', exp));
        iss.push(...this.vOA('procedureCode', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('series', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudy._fts_dataType = 'ImagingStudy';
//# sourceMappingURL=data:application/json;base64,