// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: DataRequirement
import * as fhir from '../fhir.js';
// @ts-ignore
import { AllTypesVsValidation } from '../fhirValueSets/AllTypesVsValidation.js';
/**
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
 */
export class DataRequirementCodeFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementCodeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path'] !== undefined) {
            this.path = new fhir.FhirString({ value: source.path }, options);
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path, options);
            }
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        else if (source['valueSetString'] !== undefined) {
            this.valueSet = new fhir.FhirString({ value: source.valueSetString }, options);
        }
        else if (source['valueSetReference']) {
            this.valueSet = new fhir.Reference(source.valueSetReference, options);
        }
        if (source['valueCode'] !== undefined) {
            this.valueCode = source.valueCode.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.valueCode = [];
        }
        if (source['_valueCode']) {
            source._valueCode.forEach((x, i) => {
                if (this.valueCode.length >= i) {
                    if (x) {
                        this.valueCode[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.valueCode.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['valueCoding']) {
            this.valueCoding = source.valueCoding.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.valueCoding = [];
        }
        if (source['valueCodeableConcept']) {
            this.valueCodeableConcept = source.valueCodeableConcept.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.valueCodeableConcept = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement.codeFilter';
        }
        iss.push(...this.vRS('path', exp));
        iss.push(...this.vOS('valueSet', exp));
        iss.push(...this.vOA('valueCode', exp));
        iss.push(...this.vOA('valueCoding', exp));
        iss.push(...this.vOA('valueCodeableConcept', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementCodeFilter._fts_dataType = 'DataRequirementCodeFilter';
/**
 * Internal flag to properly serialize choice-type element DataRequirement.codeFilter.valueSet[x]
 */
DataRequirementCodeFilter._fts_valueSetIsChoice = true;
/**
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.
 */
export class DataRequirementDateFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementDateFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path'] !== undefined) {
            this.path = new fhir.FhirString({ value: source.path }, options);
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path, options);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueDateTime'] !== undefined) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime }, options);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod, options);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement.dateFilter';
        }
        iss.push(...this.vRS('path', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementDateFilter._fts_dataType = 'DataRequirementDateFilter';
/**
 * Internal flag to properly serialize choice-type element DataRequirement.dateFilter.value[x]
 */
DataRequirementDateFilter._fts_valueIsChoice = true;
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export class DataRequirement extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['profile'] !== undefined) {
            this.profile = source.profile.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.profile = [];
        }
        if (source['_profile']) {
            source._profile.forEach((x, i) => {
                if (this.profile.length >= i) {
                    if (x) {
                        this.profile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.profile.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['mustSupport'] !== undefined) {
            this.mustSupport = source.mustSupport.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.mustSupport = [];
        }
        if (source['_mustSupport']) {
            source._mustSupport.forEach((x, i) => {
                if (this.mustSupport.length >= i) {
                    if (x) {
                        this.mustSupport[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.mustSupport.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['codeFilter']) {
            this.codeFilter = source.codeFilter.map((x) => new fhir.DataRequirementCodeFilter(x, options));
        }
        else {
            this.codeFilter = [];
        }
        if (source['dateFilter']) {
            this.dateFilter = source.dateFilter.map((x) => new fhir.DataRequirementDateFilter(x, options));
        }
        else {
            this.dateFilter = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement';
        }
        iss.push(...this.vRSV('type', exp, 'AllTypes', AllTypesVsValidation, 'r'));
        iss.push(...this.vOA('profile', exp));
        iss.push(...this.vOA('mustSupport', exp));
        iss.push(...this.vOA('codeFilter', exp));
        iss.push(...this.vOA('dateFilter', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirement._fts_dataType = 'DataRequirement';
//# sourceMappingURL=data:application/json;base64,