// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Dosage
import * as fhir from '../fhir.js';
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export class Dosage extends fhir.FhirElement {
    /**
     * Default constructor for Dosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirInteger({ value: source.sequence });
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirInteger(source._sequence);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['additionalInstruction']) {
            this.additionalInstruction = source.additionalInstruction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.additionalInstruction = [];
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['_patientInstruction']) {
            if (this.patientInstruction) {
                this.patientInstruction.addExtendedProperties(source._patientInstruction);
            }
            else {
                this.patientInstruction = new fhir.FhirString(source._patientInstruction);
            }
        }
        if (source['timing']) {
            this.timing = new fhir.Timing(source.timing);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['dose']) {
            this.dose = source.dose;
        }
        else if (source['doseRange']) {
            this.dose = new fhir.Range(source.doseRange);
        }
        else if (source['doseQuantity']) {
            this.dose = new fhir.Quantity(source.doseQuantity);
        }
        if (source['maxDosePerPeriod']) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod);
        }
        if (source['maxDosePerAdministration']) {
            this.maxDosePerAdministration = new fhir.Quantity(source.maxDosePerAdministration);
        }
        if (source['maxDosePerLifetime']) {
            this.maxDosePerLifetime = new fhir.Quantity(source.maxDosePerLifetime);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
        else if (source['rateRange']) {
            this.rate = new fhir.Range(source.rateRange);
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Dosage';
        }
        iss.push(...this.vOS('sequence', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOA('additionalInstruction', exp));
        iss.push(...this.vOS('patientInstruction', exp));
        iss.push(...this.vOS('timing', exp));
        iss.push(...this.vOS('asNeeded', exp));
        iss.push(...this.vOS('site', exp));
        iss.push(...this.vOS('route', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('dose', exp));
        iss.push(...this.vOS('maxDosePerPeriod', exp));
        iss.push(...this.vOS('maxDosePerAdministration', exp));
        iss.push(...this.vOS('maxDosePerLifetime', exp));
        iss.push(...this.vOS('rate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Dosage._fts_dataType = 'Dosage';
/**
 * Internal flag to properly serialize choice-type element Dosage.asNeeded[x]
 */
Dosage._fts_asNeededIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Dosage.dose[x]
 */
Dosage._fts_doseIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Dosage.rate[x]
 */
Dosage._fts_rateIsChoice = true;
//# sourceMappingURL=data:application/json;base64,