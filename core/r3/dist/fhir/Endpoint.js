// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Endpoint
import * as fhir from '../fhir.js';
// @ts-ignore
import { EndpointStatusVsValidation } from '../fhirValueSets/EndpointStatusVsValidation.js';
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export class Endpoint extends fhir.DomainResource {
    /**
     * Default constructor for Endpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Endpoint';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['connectionType']) {
            this.connectionType = new fhir.Coding(source.connectionType);
        }
        else {
            this.connectionType = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payloadType']) {
            this.payloadType = source.payloadType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.payloadType = [];
        }
        if (source['payloadMimeType']) {
            this.payloadMimeType = source.payloadMimeType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.payloadMimeType = [];
        }
        if (source['_payloadMimeType']) {
            source._payloadMimeType.forEach((x, i) => {
                if (this.payloadMimeType.length >= i) {
                    if (x) {
                        this.payloadMimeType[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.payloadMimeType.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['address']) {
            this.address = new fhir.FhirUri({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirUri(source._address);
            }
        }
        if (source['header']) {
            this.header = source.header.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.header = [];
        }
        if (source['_header']) {
            source._header.forEach((x, i) => {
                if (this.header.length >= i) {
                    if (x) {
                        this.header[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.header.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Endpoint';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'EndpointStatus', EndpointStatusVsValidation, 'r'));
        iss.push(...this.vRS('connectionType', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('managingOrganization', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRA('payloadType', exp));
        iss.push(...this.vOA('payloadMimeType', exp));
        iss.push(...this.vRS('address', exp));
        iss.push(...this.vOA('header', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Endpoint._fts_dataType = 'Endpoint';
//# sourceMappingURL=data:application/json;base64,