// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
// @ts-ignore
import { ImmunizationStatusVsValidation } from '../fhirValueSets/ImmunizationStatusVsValidation.js';
/**
 * Indicates who or what performed the event.
 */
export class ImmunizationPractitioner extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPractitioner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.practitioner';
        }
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vRS('actor', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationPractitioner._fts_dataType = 'ImmunizationPractitioner';
/**
 * Reasons why a vaccine was or was not administered.
 */
export class ImmunizationExplanation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationExplanation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['reasonNotGiven']) {
            this.reasonNotGiven = source.reasonNotGiven.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonNotGiven = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.explanation';
        }
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('reasonNotGiven', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationExplanation._fts_dataType = 'ImmunizationExplanation';
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case,  it should be recorded as a new [AllergyIntolerance](allergyintolerance.html) resource instance as most systems will not query against  past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail, options);
        }
        if (source['reported'] !== undefined) {
            this.reported = new fhir.FhirBoolean({ value: source.reported }, options);
        }
        if (source['_reported']) {
            if (this.reported) {
                this.reported.addExtendedProperties(source._reported);
            }
            else {
                this.reported = new fhir.FhirBoolean(source._reported, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.reaction';
        }
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('detail', exp));
        iss.push(...this.vOS('reported', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationReaction._fts_dataType = 'ImmunizationReaction';
/**
 * Contains information about the protocol(s) under which the vaccine was administered.
 */
export class ImmunizationVaccinationProtocol extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationVaccinationProtocol - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['doseSequence'] !== undefined) {
            this.doseSequence = new fhir.FhirPositiveInt({ value: source.doseSequence }, options);
        }
        if (source['_doseSequence']) {
            if (this.doseSequence) {
                this.doseSequence.addExtendedProperties(source._doseSequence);
            }
            else {
                this.doseSequence = new fhir.FhirPositiveInt(source._doseSequence, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority, options);
        }
        if (source['series'] !== undefined) {
            this.series = new fhir.FhirString({ value: source.series }, options);
        }
        if (source['_series']) {
            if (this.series) {
                this.series.addExtendedProperties(source._series);
            }
            else {
                this.series = new fhir.FhirString(source._series, options);
            }
        }
        if (source['seriesDoses'] !== undefined) {
            this.seriesDoses = new fhir.FhirPositiveInt({ value: source.seriesDoses }, options);
        }
        if (source['_seriesDoses']) {
            if (this.seriesDoses) {
                this.seriesDoses.addExtendedProperties(source._seriesDoses);
            }
            else {
                this.seriesDoses = new fhir.FhirPositiveInt(source._seriesDoses, options);
            }
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.targetDisease = [];
        }
        if (source['doseStatus']) {
            this.doseStatus = new fhir.CodeableConcept(source.doseStatus, options);
        }
        else {
            this.doseStatus = null;
        }
        if (source['doseStatusReason']) {
            this.doseStatusReason = new fhir.CodeableConcept(source.doseStatusReason, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.vaccinationProtocol';
        }
        iss.push(...this.vOS('doseSequence', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('authority', exp));
        iss.push(...this.vOS('series', exp));
        iss.push(...this.vOS('seriesDoses', exp));
        iss.push(...this.vRA('targetDisease', exp));
        iss.push(...this.vRS('doseStatus', exp));
        iss.push(...this.vOS('doseStatusReason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationVaccinationProtocol._fts_dataType = 'ImmunizationVaccinationProtocol';
/**
 * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['notGiven'] !== undefined) {
            this.notGiven = new fhir.FhirBoolean({ value: source.notGiven }, options);
        }
        else {
            this.notGiven = null;
        }
        if (source['_notGiven']) {
            if (this.notGiven) {
                this.notGiven.addExtendedProperties(source._notGiven);
            }
            else {
                this.notGiven = new fhir.FhirBoolean(source._notGiven, options);
            }
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode, options);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['primarySource'] !== undefined) {
            this.primarySource = new fhir.FhirBoolean({ value: source.primarySource }, options);
        }
        else {
            this.primarySource = null;
        }
        if (source['_primarySource']) {
            if (this.primarySource) {
                this.primarySource.addExtendedProperties(source._primarySource);
            }
            else {
                this.primarySource = new fhir.FhirBoolean(source._primarySource, options);
            }
        }
        if (source['reportOrigin']) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin, options);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer, options);
        }
        if (source['lotNumber'] !== undefined) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber }, options);
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber, options);
            }
        }
        if (source['expirationDate'] !== undefined) {
            this.expirationDate = new fhir.FhirDate({ value: source.expirationDate }, options);
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDate(source._expirationDate, options);
            }
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site, options);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route, options);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity, options);
        }
        if (source['practitioner']) {
            this.practitioner = source.practitioner.map((x) => new fhir.ImmunizationPractitioner(x, options));
        }
        else {
            this.practitioner = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['explanation']) {
            this.explanation = new fhir.ImmunizationExplanation(source.explanation, options);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x, options));
        }
        else {
            this.reaction = [];
        }
        if (source['vaccinationProtocol']) {
            this.vaccinationProtocol = source.vaccinationProtocol.map((x) => new fhir.ImmunizationVaccinationProtocol(x, options));
        }
        else {
            this.vaccinationProtocol = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ImmunizationStatus', ImmunizationStatusVsValidation, 'r'));
        iss.push(...this.vRS('notGiven', exp));
        iss.push(...this.vRS('vaccineCode', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vRS('primarySource', exp));
        iss.push(...this.vOS('reportOrigin', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOS('lotNumber', exp));
        iss.push(...this.vOS('expirationDate', exp));
        iss.push(...this.vOS('site', exp));
        iss.push(...this.vOS('route', exp));
        iss.push(...this.vOS('doseQuantity', exp));
        iss.push(...this.vOA('practitioner', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOS('explanation', exp));
        iss.push(...this.vOA('reaction', exp));
        iss.push(...this.vOA('vaccinationProtocol', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Immunization._fts_dataType = 'Immunization';
//# sourceMappingURL=data:application/json;base64,