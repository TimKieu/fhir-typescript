// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim
import * as fhir from '../fhir.js';
// @ts-ignore
import { V3ActIncidentVsValidation } from '../fhirValueSets/V3ActIncidentVsValidation.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { ClaimTypeVsValidation } from '../fhirValueSets/ClaimTypeVsValidation.js';
// @ts-ignore
import { ClaimUseVsValidation } from '../fhirValueSets/ClaimUseVsValidation.js';
/**
 * Other claims which are related to this claim such as prior claim versions or for related services.
 */
export class ClaimRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            this.reference = new fhir.Identifier(source.reference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.related';
        }
        iss.push(...this.vOS('claim', exp));
        iss.push(...this.vOS('relationship', exp));
        iss.push(...this.vOS('reference', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimRelated._fts_dataType = 'ClaimRelated';
/**
 * The party to be reimbursed for the services.
 */
export class ClaimPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['resourceType']) {
            this.resourceType = new fhir.Coding(source.resourceType);
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.payee';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('resourceType', exp));
        iss.push(...this.vOS('party', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimPayee._fts_dataType = 'ClaimPayee';
/**
 * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
 */
export class ClaimCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.FhirBoolean({ value: source.responsible });
        }
        if (source['_responsible']) {
            if (this.responsible) {
                this.responsible.addExtendedProperties(source._responsible);
            }
            else {
                this.responsible = new fhir.FhirBoolean(source._responsible);
            }
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['qualification']) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.careTeam';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('provider', exp));
        iss.push(...this.vOS('responsible', exp));
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOS('qualification', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimCareTeam._fts_dataType = 'ClaimCareTeam';
/**
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
 */
export class ClaimInformation extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimInformation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDate']) {
            this.timing = new fhir.FhirDate({ value: source.timingDate });
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.information';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('category', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('timing', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('reason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimInformation._fts_dataType = 'ClaimInformation';
/**
 * Internal flag to properly serialize choice-type element Claim.information.timing[x]
 */
ClaimInformation._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Claim.information.value[x]
 */
ClaimInformation._fts_valueIsChoice = true;
/**
 * List of patient diagnosis for which care is sought.
 */
export class ClaimDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference);
        }
        else {
            this.diagnosis = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['packageCode']) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.diagnosis';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('diagnosis', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('packageCode', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimDiagnosis._fts_dataType = 'ClaimDiagnosis';
/**
 * Internal flag to properly serialize choice-type element Claim.diagnosis.diagnosis[x]
 */
ClaimDiagnosis._fts_diagnosisIsChoice = true;
/**
 * Ordered list of patient procedures performed to support the adjudication.
 */
export class ClaimProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['procedure']) {
            this.procedure = source.procedure;
        }
        else if (source['procedureCodeableConcept']) {
            this.procedure = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        else if (source['procedureReference']) {
            this.procedure = new fhir.Reference(source.procedureReference);
        }
        else {
            this.procedure = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.procedure';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vRS('procedure', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimProcedure._fts_dataType = 'ClaimProcedure';
/**
 * Internal flag to properly serialize choice-type element Claim.procedure.procedure[x]
 */
ClaimProcedure._fts_procedureIsChoice = true;
/**
 * Financial instrument by which payment information for health care.
 */
export class ClaimInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement });
        }
        if (source['_businessArrangement']) {
            if (this.businessArrangement) {
                this.businessArrangement.addExtendedProperties(source._businessArrangement);
            }
            else {
                this.businessArrangement = new fhir.FhirString(source._businessArrangement);
            }
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.insurance';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('focal', exp));
        iss.push(...this.vRS('coverage', exp));
        iss.push(...this.vOS('businessArrangement', exp));
        iss.push(...this.vOA('preAuthRef', exp));
        iss.push(...this.vOS('claimResponse', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimInsurance._fts_dataType = 'ClaimInsurance';
/**
 * An accident which resulted in the need for healthcare services.
 */
export class ClaimAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.accident';
        }
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vOSV('type', exp, 'V3ActIncident', V3ActIncidentVsValidation, 'r'));
        iss.push(...this.vOS('location', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimAccident._fts_dataType = 'ClaimAccident';
/**
 * Internal flag to properly serialize choice-type element Claim.accident.location[x]
 */
ClaimAccident._fts_locationIsChoice = true;
/**
 * Third tier of goods and services.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['service']) {
            this.service = new fhir.CodeableConcept(source.service);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item.detail.subDetail';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('service', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('udi', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItemDetailSubDetail._fts_dataType = 'ClaimItemDetailSubDetail';
/**
 * Second tier of goods and services.
 */
export class ClaimItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['service']) {
            this.service = new fhir.CodeableConcept(source.service);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item.detail';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('service', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('udi', exp));
        iss.push(...this.vOA('subDetail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItemDetail._fts_dataType = 'ClaimItemDetail';
/**
 * First tier of goods and services.
 */
export class ClaimItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['careTeamLinkId']) {
            this.careTeamLinkId = source.careTeamLinkId.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.careTeamLinkId = [];
        }
        if (source['_careTeamLinkId']) {
            source._careTeamLinkId.forEach((x, i) => {
                if (this.careTeamLinkId.length >= i) {
                    if (x) {
                        this.careTeamLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.careTeamLinkId.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['diagnosisLinkId']) {
            this.diagnosisLinkId = source.diagnosisLinkId.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.diagnosisLinkId = [];
        }
        if (source['_diagnosisLinkId']) {
            source._diagnosisLinkId.forEach((x, i) => {
                if (this.diagnosisLinkId.length >= i) {
                    if (x) {
                        this.diagnosisLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.diagnosisLinkId.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['procedureLinkId']) {
            this.procedureLinkId = source.procedureLinkId.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.procedureLinkId = [];
        }
        if (source['_procedureLinkId']) {
            source._procedureLinkId.forEach((x, i) => {
                if (this.procedureLinkId.length >= i) {
                    if (x) {
                        this.procedureLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.procedureLinkId.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['informationLinkId']) {
            this.informationLinkId = source.informationLinkId.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.informationLinkId = [];
        }
        if (source['_informationLinkId']) {
            source._informationLinkId.forEach((x, i) => {
                if (this.informationLinkId.length >= i) {
                    if (x) {
                        this.informationLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.informationLinkId.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['service']) {
            this.service = new fhir.CodeableConcept(source.service);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subSite = [];
        }
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        else {
            this.encounter = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vOA('careTeamLinkId', exp));
        iss.push(...this.vOA('diagnosisLinkId', exp));
        iss.push(...this.vOA('procedureLinkId', exp));
        iss.push(...this.vOA('informationLinkId', exp));
        iss.push(...this.vOS('revenue', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('service', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('programCode', exp));
        iss.push(...this.vOS('serviced', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOA('udi', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOA('subSite', exp));
        iss.push(...this.vOA('encounter', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItem._fts_dataType = 'ClaimItem';
/**
 * Internal flag to properly serialize choice-type element Claim.item.serviced[x]
 */
ClaimItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Claim.item.location[x]
 */
ClaimItem._fts_locationIsChoice = true;
/**
 * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
 */
export class Claim extends fhir.DomainResource {
    /**
     * Default constructor for Claim - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Claim';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = source.subType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subType = [];
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['billablePeriod']) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ClaimRelated(x));
        }
        else {
            this.related = [];
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        if (source['payee']) {
            this.payee = new fhir.ClaimPayee(source.payee);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.ClaimCareTeam(x));
        }
        else {
            this.careTeam = [];
        }
        if (source['information']) {
            this.information = source.information.map((x) => new fhir.ClaimInformation(x));
        }
        else {
            this.information = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ClaimDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['procedure']) {
            this.procedure = source.procedure.map((x) => new fhir.ClaimProcedure(x));
        }
        else {
            this.procedure = [];
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ClaimInsurance(x));
        }
        else {
            this.insurance = [];
        }
        if (source['accident']) {
            this.accident = new fhir.ClaimAccident(source.accident);
        }
        if (source['employmentImpacted']) {
            this.employmentImpacted = new fhir.Period(source.employmentImpacted);
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.Period(source.hospitalization);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ClaimItem(x));
        }
        else {
            this.item = [];
        }
        if (source['total']) {
            this.total = new fhir.Money(source.total);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOSV('type', exp, 'ClaimType', ClaimTypeVsValidation, 'r'));
        iss.push(...this.vOA('subType', exp));
        iss.push(...this.vOSV('use', exp, 'ClaimUse', ClaimUseVsValidation, 'r'));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('billablePeriod', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('enterer', exp));
        iss.push(...this.vOS('insurer', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vOS('organization', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('fundsReserve', exp));
        iss.push(...this.vOA('related', exp));
        iss.push(...this.vOS('prescription', exp));
        iss.push(...this.vOS('originalPrescription', exp));
        iss.push(...this.vOS('payee', exp));
        iss.push(...this.vOS('referral', exp));
        iss.push(...this.vOS('facility', exp));
        iss.push(...this.vOA('careTeam', exp));
        iss.push(...this.vOA('information', exp));
        iss.push(...this.vOA('diagnosis', exp));
        iss.push(...this.vOA('procedure', exp));
        iss.push(...this.vOA('insurance', exp));
        iss.push(...this.vOS('accident', exp));
        iss.push(...this.vOS('employmentImpacted', exp));
        iss.push(...this.vOS('hospitalization', exp));
        iss.push(...this.vOA('item', exp));
        iss.push(...this.vOS('total', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Claim._fts_dataType = 'Claim';
//# sourceMappingURL=data:application/json;base64,