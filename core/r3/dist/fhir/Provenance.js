// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProvenanceEntityRoleVsValidation } from '../fhirValueSets/ProvenanceEntityRoleVsValidation.js';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.role = [];
        }
        if (source['who']) {
            this.who = source.who;
        }
        else if (source['whoUri'] !== undefined) {
            this.who = new fhir.FhirUri({ value: source.whoUri }, options);
        }
        else if (source['whoReference']) {
            this.who = new fhir.Reference(source.whoReference, options);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = source.onBehalfOf;
        }
        else if (source['onBehalfOfUri'] !== undefined) {
            this.onBehalfOf = new fhir.FhirUri({ value: source.onBehalfOfUri }, options);
        }
        else if (source['onBehalfOfReference']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOfReference, options);
        }
        if (source['relatedAgentType']) {
            this.relatedAgentType = new fhir.CodeableConcept(source.relatedAgentType, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.agent';
        }
        iss.push(...this.vOA('role', exp));
        iss.push(...this.vRS('who', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        iss.push(...this.vOS('relatedAgentType', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
/**
 * Internal flag to properly serialize choice-type element Provenance.agent.who[x]
 */
ProvenanceAgent._fts_whoIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Provenance.agent.onBehalfOf[x]
 */
ProvenanceAgent._fts_onBehalfOfIsChoice = true;
/**
 * Multiple userIds may be associated with the same Practitioner or other individual across various appearances, each with distinct privileges.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role'] !== undefined) {
            this.role = new fhir.FhirCode({ value: source.role }, options);
        }
        else {
            this.role = null;
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirCode(source._role, options);
            }
        }
        if (source['what']) {
            this.what = source.what;
        }
        else if (source['whatUri'] !== undefined) {
            this.what = new fhir.FhirUri({ value: source.whatUri }, options);
        }
        else if (source['whatReference']) {
            this.what = new fhir.Reference(source.whatReference, options);
        }
        else if (source['whatIdentifier']) {
            this.what = new fhir.Identifier(source.whatIdentifier, options);
        }
        else {
            this.what = null;
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x, options));
        }
        else {
            this.agent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.entity';
        }
        iss.push(...this.vRSV('role', exp, 'ProvenanceEntityRole', ProvenanceEntityRoleVsValidation, 'r'));
        iss.push(...this.vRS('what', exp));
        iss.push(...this.vOA('agent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
/**
 * Internal flag to properly serialize choice-type element Provenance.entity.what[x]
 */
ProvenanceEntity._fts_whatIsChoice = true;
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.target = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['recorded'] !== undefined) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded }, options);
        }
        else {
            this.recorded = null;
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirInstant(source._recorded, options);
            }
        }
        if (source['policy'] !== undefined) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.policy = [];
        }
        if (source['_policy']) {
            source._policy.forEach((x, i) => {
                if (this.policy.length >= i) {
                    if (x) {
                        this.policy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.policy.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['activity']) {
            this.activity = new fhir.Coding(source.activity, options);
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x, options));
        }
        else {
            this.agent = [];
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x, options));
        }
        else {
            this.entity = [];
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x, options));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance';
        }
        iss.push(...this.vRA('target', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRS('recorded', exp));
        iss.push(...this.vOA('policy', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOS('activity', exp));
        iss.push(...this.vRA('agent', exp));
        iss.push(...this.vOA('entity', exp));
        iss.push(...this.vOA('signature', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Provenance._fts_dataType = 'Provenance';
//# sourceMappingURL=data:application/json;base64,