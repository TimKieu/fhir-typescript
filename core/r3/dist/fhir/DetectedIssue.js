// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DetectedIssue
import * as fhir from '../fhir.js';
// @ts-ignore
import { ObservationStatusVsValidation } from '../fhirValueSets/ObservationStatusVsValidation.js';
// @ts-ignore
import { DetectedissueSeverityVsValidation } from '../fhirValueSets/DetectedissueSeverityVsValidation.js';
/**
 * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export class DetectedIssueMitigation extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueMitigation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action, options);
        }
        else {
            this.action = null;
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DetectedIssue.mitigation';
        }
        iss.push(...this.vRS('action', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('author', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssueMitigation._fts_dataType = 'DetectedIssueMitigation';
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export class DetectedIssue extends fhir.DomainResource {
    /**
     * Default constructor for DetectedIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DetectedIssue';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['severity'] !== undefined) {
            this.severity = new fhir.FhirCode({ value: source.severity }, options);
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity, options);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['implicated']) {
            this.implicated = source.implicated.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.implicated = [];
        }
        if (source['detail'] !== undefined) {
            this.detail = new fhir.FhirString({ value: source.detail }, options);
        }
        if (source['_detail']) {
            if (this.detail) {
                this.detail.addExtendedProperties(source._detail);
            }
            else {
                this.detail = new fhir.FhirString(source._detail, options);
            }
        }
        if (source['reference'] !== undefined) {
            this.reference = new fhir.FhirUri({ value: source.reference }, options);
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirUri(source._reference, options);
            }
        }
        if (source['mitigation']) {
            this.mitigation = source.mitigation.map((x) => new fhir.DetectedIssueMitigation(x, options));
        }
        else {
            this.mitigation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DetectedIssue';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ObservationStatus', ObservationStatusVsValidation, 'r'));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOSV('severity', exp, 'DetectedissueSeverity', DetectedissueSeverityVsValidation, 'r'));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOA('implicated', exp));
        iss.push(...this.vOS('detail', exp));
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOA('mitigation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssue._fts_dataType = 'DetectedIssue';
//# sourceMappingURL=data:application/json;base64,