// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Device
import * as fhir from '../fhir.js';
// @ts-ignore
import { UdiEntryTypeVsValidation } from '../fhirValueSets/UdiEntryTypeVsValidation.js';
// @ts-ignore
import { DeviceStatusVsValidation } from '../fhirValueSets/DeviceStatusVsValidation.js';
/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export class DeviceUdi extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceUdi - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['deviceIdentifier']) {
            this.deviceIdentifier = new fhir.FhirString({ value: source.deviceIdentifier });
        }
        if (source['_deviceIdentifier']) {
            if (this.deviceIdentifier) {
                this.deviceIdentifier.addExtendedProperties(source._deviceIdentifier);
            }
            else {
                this.deviceIdentifier = new fhir.FhirString(source._deviceIdentifier);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.FhirUri({ value: source.jurisdiction });
        }
        if (source['_jurisdiction']) {
            if (this.jurisdiction) {
                this.jurisdiction.addExtendedProperties(source._jurisdiction);
            }
            else {
                this.jurisdiction = new fhir.FhirUri(source._jurisdiction);
            }
        }
        if (source['carrierHRF']) {
            this.carrierHRF = new fhir.FhirString({ value: source.carrierHRF });
        }
        if (source['_carrierHRF']) {
            if (this.carrierHRF) {
                this.carrierHRF.addExtendedProperties(source._carrierHRF);
            }
            else {
                this.carrierHRF = new fhir.FhirString(source._carrierHRF);
            }
        }
        if (source['carrierAIDC']) {
            this.carrierAIDC = new fhir.FhirBase64Binary({ value: source.carrierAIDC });
        }
        if (source['_carrierAIDC']) {
            if (this.carrierAIDC) {
                this.carrierAIDC.addExtendedProperties(source._carrierAIDC);
            }
            else {
                this.carrierAIDC = new fhir.FhirBase64Binary(source._carrierAIDC);
            }
        }
        if (source['issuer']) {
            this.issuer = new fhir.FhirUri({ value: source.issuer });
        }
        if (source['_issuer']) {
            if (this.issuer) {
                this.issuer.addExtendedProperties(source._issuer);
            }
            else {
                this.issuer = new fhir.FhirUri(source._issuer);
            }
        }
        if (source['entryType']) {
            this.entryType = new fhir.FhirCode({ value: source.entryType });
        }
        if (source['_entryType']) {
            if (this.entryType) {
                this.entryType.addExtendedProperties(source._entryType);
            }
            else {
                this.entryType = new fhir.FhirCode(source._entryType);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Device.udi';
        }
        this.vOS('deviceIdentifier', exp);
        this.vOS('name', exp);
        this.vOS('jurisdiction', exp);
        this.vOS('carrierHRF', exp);
        this.vOS('carrierAIDC', exp);
        this.vOS('issuer', exp);
        this.vOSV('entryType', exp, 'UdiEntryType', UdiEntryTypeVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceUdi._fts_dataType = 'DeviceUdi';
/**
 * This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices include durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
 */
export class Device extends fhir.DomainResource {
    /**
     * Default constructor for Device - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Device';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['udi']) {
            this.udi = new fhir.DeviceUdi(source.udi);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.FhirString({ value: source.manufacturer });
        }
        if (source['_manufacturer']) {
            if (this.manufacturer) {
                this.manufacturer.addExtendedProperties(source._manufacturer);
            }
            else {
                this.manufacturer = new fhir.FhirString(source._manufacturer);
            }
        }
        if (source['manufactureDate']) {
            this.manufactureDate = new fhir.FhirDateTime({ value: source.manufactureDate });
        }
        if (source['_manufactureDate']) {
            if (this.manufactureDate) {
                this.manufactureDate.addExtendedProperties(source._manufactureDate);
            }
            else {
                this.manufactureDate = new fhir.FhirDateTime(source._manufactureDate);
            }
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate });
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDateTime(source._expirationDate);
            }
        }
        if (source['model']) {
            this.model = new fhir.FhirString({ value: source.model });
        }
        if (source['_model']) {
            if (this.model) {
                this.model.addExtendedProperties(source._model);
            }
            else {
                this.model = new fhir.FhirString(source._model);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.safety = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Device';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('udi', exp);
        this.vOSV('status', exp, 'DeviceStatus', DeviceStatusVsValidation, 'r');
        this.vOS('type', exp);
        this.vOS('lotNumber', exp);
        this.vOS('manufacturer', exp);
        this.vOS('manufactureDate', exp);
        this.vOS('expirationDate', exp);
        this.vOS('model', exp);
        this.vOS('version', exp);
        this.vOS('patient', exp);
        this.vOS('owner', exp);
        this.vOA('contact', exp);
        this.vOS('location', exp);
        this.vOS('url', exp);
        this.vOA('note', exp);
        this.vOA('safety', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Device._fts_dataType = 'Device';
//# sourceMappingURL=data:application/json;base64,