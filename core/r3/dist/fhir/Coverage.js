// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
/**
 * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageGrouping extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageGrouping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['group'] !== undefined) {
            this.group = new fhir.FhirString({ value: source.group }, options);
        }
        if (source['_group']) {
            if (this.group) {
                this.group.addExtendedProperties(source._group);
            }
            else {
                this.group = new fhir.FhirString(source._group, options);
            }
        }
        if (source['groupDisplay'] !== undefined) {
            this.groupDisplay = new fhir.FhirString({ value: source.groupDisplay }, options);
        }
        if (source['_groupDisplay']) {
            if (this.groupDisplay) {
                this.groupDisplay.addExtendedProperties(source._groupDisplay);
            }
            else {
                this.groupDisplay = new fhir.FhirString(source._groupDisplay, options);
            }
        }
        if (source['subGroup'] !== undefined) {
            this.subGroup = new fhir.FhirString({ value: source.subGroup }, options);
        }
        if (source['_subGroup']) {
            if (this.subGroup) {
                this.subGroup.addExtendedProperties(source._subGroup);
            }
            else {
                this.subGroup = new fhir.FhirString(source._subGroup, options);
            }
        }
        if (source['subGroupDisplay'] !== undefined) {
            this.subGroupDisplay = new fhir.FhirString({ value: source.subGroupDisplay }, options);
        }
        if (source['_subGroupDisplay']) {
            if (this.subGroupDisplay) {
                this.subGroupDisplay.addExtendedProperties(source._subGroupDisplay);
            }
            else {
                this.subGroupDisplay = new fhir.FhirString(source._subGroupDisplay, options);
            }
        }
        if (source['plan'] !== undefined) {
            this.plan = new fhir.FhirString({ value: source.plan }, options);
        }
        if (source['_plan']) {
            if (this.plan) {
                this.plan.addExtendedProperties(source._plan);
            }
            else {
                this.plan = new fhir.FhirString(source._plan, options);
            }
        }
        if (source['planDisplay'] !== undefined) {
            this.planDisplay = new fhir.FhirString({ value: source.planDisplay }, options);
        }
        if (source['_planDisplay']) {
            if (this.planDisplay) {
                this.planDisplay.addExtendedProperties(source._planDisplay);
            }
            else {
                this.planDisplay = new fhir.FhirString(source._planDisplay, options);
            }
        }
        if (source['subPlan'] !== undefined) {
            this.subPlan = new fhir.FhirString({ value: source.subPlan }, options);
        }
        if (source['_subPlan']) {
            if (this.subPlan) {
                this.subPlan.addExtendedProperties(source._subPlan);
            }
            else {
                this.subPlan = new fhir.FhirString(source._subPlan, options);
            }
        }
        if (source['subPlanDisplay'] !== undefined) {
            this.subPlanDisplay = new fhir.FhirString({ value: source.subPlanDisplay }, options);
        }
        if (source['_subPlanDisplay']) {
            if (this.subPlanDisplay) {
                this.subPlanDisplay.addExtendedProperties(source._subPlanDisplay);
            }
            else {
                this.subPlanDisplay = new fhir.FhirString(source._subPlanDisplay, options);
            }
        }
        if (source['class'] !== undefined) {
            this.class = new fhir.FhirString({ value: source.class }, options);
        }
        if (source['_class']) {
            if (this.class) {
                this.class.addExtendedProperties(source._class);
            }
            else {
                this.class = new fhir.FhirString(source._class, options);
            }
        }
        if (source['classDisplay'] !== undefined) {
            this.classDisplay = new fhir.FhirString({ value: source.classDisplay }, options);
        }
        if (source['_classDisplay']) {
            if (this.classDisplay) {
                this.classDisplay.addExtendedProperties(source._classDisplay);
            }
            else {
                this.classDisplay = new fhir.FhirString(source._classDisplay, options);
            }
        }
        if (source['subClass'] !== undefined) {
            this.subClass = new fhir.FhirString({ value: source.subClass }, options);
        }
        if (source['_subClass']) {
            if (this.subClass) {
                this.subClass.addExtendedProperties(source._subClass);
            }
            else {
                this.subClass = new fhir.FhirString(source._subClass, options);
            }
        }
        if (source['subClassDisplay'] !== undefined) {
            this.subClassDisplay = new fhir.FhirString({ value: source.subClassDisplay }, options);
        }
        if (source['_subClassDisplay']) {
            if (this.subClassDisplay) {
                this.subClassDisplay.addExtendedProperties(source._subClassDisplay);
            }
            else {
                this.subClassDisplay = new fhir.FhirString(source._subClassDisplay, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.grouping';
        }
        iss.push(...this.vOS('group', exp));
        iss.push(...this.vOS('groupDisplay', exp));
        iss.push(...this.vOS('subGroup', exp));
        iss.push(...this.vOS('subGroupDisplay', exp));
        iss.push(...this.vOS('plan', exp));
        iss.push(...this.vOS('planDisplay', exp));
        iss.push(...this.vOS('subPlan', exp));
        iss.push(...this.vOS('subPlanDisplay', exp));
        iss.push(...this.vOS('class', exp));
        iss.push(...this.vOS('classDisplay', exp));
        iss.push(...this.vOS('subClass', exp));
        iss.push(...this.vOS('subClassDisplay', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageGrouping._fts_dataType = 'CoverageGrouping';
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Coverage';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['policyHolder']) {
            this.policyHolder = new fhir.Reference(source.policyHolder, options);
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber, options);
        }
        if (source['subscriberId'] !== undefined) {
            this.subscriberId = new fhir.FhirString({ value: source.subscriberId }, options);
        }
        if (source['_subscriberId']) {
            if (this.subscriberId) {
                this.subscriberId.addExtendedProperties(source._subscriberId);
            }
            else {
                this.subscriberId = new fhir.FhirString(source._subscriberId, options);
            }
        }
        if (source['beneficiary']) {
            this.beneficiary = new fhir.Reference(source.beneficiary, options);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship, options);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['payor']) {
            this.payor = source.payor.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.payor = [];
        }
        if (source['grouping']) {
            this.grouping = new fhir.CoverageGrouping(source.grouping, options);
        }
        if (source['dependent'] !== undefined) {
            this.dependent = new fhir.FhirString({ value: source.dependent }, options);
        }
        if (source['_dependent']) {
            if (this.dependent) {
                this.dependent.addExtendedProperties(source._dependent);
            }
            else {
                this.dependent = new fhir.FhirString(source._dependent, options);
            }
        }
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirString({ value: source.sequence }, options);
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirString(source._sequence, options);
            }
        }
        if (source['order'] !== undefined) {
            this.order = new fhir.FhirPositiveInt({ value: source.order }, options);
        }
        if (source['_order']) {
            if (this.order) {
                this.order.addExtendedProperties(source._order);
            }
            else {
                this.order = new fhir.FhirPositiveInt(source._order, options);
            }
        }
        if (source['network'] !== undefined) {
            this.network = new fhir.FhirString({ value: source.network }, options);
        }
        if (source['_network']) {
            if (this.network) {
                this.network.addExtendedProperties(source._network);
            }
            else {
                this.network = new fhir.FhirString(source._network, options);
            }
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.contract = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('policyHolder', exp));
        iss.push(...this.vOS('subscriber', exp));
        iss.push(...this.vOS('subscriberId', exp));
        iss.push(...this.vOS('beneficiary', exp));
        iss.push(...this.vOS('relationship', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOA('payor', exp));
        iss.push(...this.vOS('grouping', exp));
        iss.push(...this.vOS('dependent', exp));
        iss.push(...this.vOS('sequence', exp));
        iss.push(...this.vOS('order', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOA('contract', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Coverage._fts_dataType = 'Coverage';
//# sourceMappingURL=data:application/json;base64,