// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: CarePlan
import * as fhir from '../fhir.js';
// @ts-ignore
import { CarePlanActivityStatusVsValidation } from '../fhirValueSets/CarePlanActivityStatusVsValidation.js';
// @ts-ignore
import { CarePlanStatusVsValidation } from '../fhirValueSets/CarePlanStatusVsValidation.js';
// @ts-ignore
import { CarePlanIntentVsValidation } from '../fhirValueSets/CarePlanIntentVsValidation.js';
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
export class CarePlanActivityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x));
        }
        else {
            this.goal = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.FhirString({ value: source.statusReason });
        }
        if (source['_statusReason']) {
            if (this.statusReason) {
                this.statusReason.addExtendedProperties(source._statusReason);
            }
            else {
                this.statusReason = new fhir.FhirString(source._statusReason);
            }
        }
        if (source['prohibited']) {
            this.prohibited = new fhir.FhirBoolean({ value: source.prohibited });
        }
        if (source['_prohibited']) {
            if (this.prohibited) {
                this.prohibited.addExtendedProperties(source._prohibited);
            }
            else {
                this.prohibited = new fhir.FhirBoolean(source._prohibited);
            }
        }
        if (source['scheduled']) {
            this.scheduled = source.scheduled;
        }
        else if (source['scheduledTiming']) {
            this.scheduled = new fhir.Timing(source.scheduledTiming);
        }
        else if (source['scheduledPeriod']) {
            this.scheduled = new fhir.Period(source.scheduledPeriod);
        }
        else if (source['scheduledString']) {
            this.scheduled = new fhir.FhirString({ value: source.scheduledString });
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        if (source['dailyAmount']) {
            this.dailyAmount = new fhir.Quantity(source.dailyAmount);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.activity.detail';
        }
        this.vOS('category', exp);
        this.vOS('definition', exp);
        this.vOS('code', exp);
        this.vOA('reasonCode', exp);
        this.vOA('reasonReference', exp);
        this.vOA('goal', exp);
        this.vRSV('status', exp, 'CarePlanActivityStatus', CarePlanActivityStatusVsValidation, 'r');
        this.vOS('statusReason', exp);
        this.vOS('prohibited', exp);
        this.vOS('scheduled', exp);
        this.vOS('location', exp);
        this.vOA('performer', exp);
        this.vOS('product', exp);
        this.vOS('dailyAmount', exp);
        this.vOS('quantity', exp);
        this.vOS('description', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanActivityDetail._fts_dataType = 'CarePlanActivityDetail';
/**
 * Internal flag to properly serialize choice-type element CarePlan.activity.detail.scheduled[x]
 */
CarePlanActivityDetail._fts_scheduledIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element CarePlan.activity.detail.product[x]
 */
CarePlanActivityDetail._fts_productIsChoice = true;
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
export class CarePlanActivity extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['outcomeCodeableConcept']) {
            this.outcomeCodeableConcept = source.outcomeCodeableConcept.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.outcomeCodeableConcept = [];
        }
        if (source['outcomeReference']) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.outcomeReference = [];
        }
        if (source['progress']) {
            this.progress = source.progress.map((x) => new fhir.Annotation(x));
        }
        else {
            this.progress = [];
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        if (source['detail']) {
            this.detail = new fhir.CarePlanActivityDetail(source.detail);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.activity';
        }
        this.vOA('outcomeCodeableConcept', exp);
        this.vOA('outcomeReference', exp);
        this.vOA('progress', exp);
        this.vOS('reference', exp);
        this.vOS('detail', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanActivity._fts_dataType = 'CarePlanActivity';
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export class CarePlan extends fhir.DomainResource {
    /**
     * Default constructor for CarePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CarePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.Reference(x));
        }
        else {
            this.definition = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        else {
            this.replaces = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.Reference(x));
        }
        else {
            this.careTeam = [];
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        else {
            this.addresses = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x));
        }
        else {
            this.goal = [];
        }
        if (source['activity']) {
            this.activity = source.activity.map((x) => new fhir.CarePlanActivity(x));
        }
        else {
            this.activity = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('definition', exp);
        this.vOA('basedOn', exp);
        this.vOA('replaces', exp);
        this.vOA('partOf', exp);
        this.vRSV('status', exp, 'CarePlanStatus', CarePlanStatusVsValidation, 'r');
        this.vRSV('intent', exp, 'CarePlanIntent', CarePlanIntentVsValidation, 'r');
        this.vOA('category', exp);
        this.vOS('title', exp);
        this.vOS('description', exp);
        this.vRS('subject', exp);
        this.vOS('context', exp);
        this.vOS('period', exp);
        this.vOA('author', exp);
        this.vOA('careTeam', exp);
        this.vOA('addresses', exp);
        this.vOA('supportingInfo', exp);
        this.vOA('goal', exp);
        this.vOA('activity', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlan._fts_dataType = 'CarePlan';
//# sourceMappingURL=data:application/json;base64,