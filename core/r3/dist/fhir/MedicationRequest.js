// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationRequestStatusVsValidation } from '../fhirValueSets/MedicationRequestStatusVsValidation.js';
// @ts-ignore
import { MedicationRequestIntentVsValidation } from '../fhirValueSets/MedicationRequestIntentVsValidation.js';
// @ts-ignore
import { MedicationRequestPriorityVsValidation } from '../fhirValueSets/MedicationRequestPriorityVsValidation.js';
/**
 * The individual, organization or device that initiated the request and has responsibility for its activation.
 */
export class MedicationRequestRequester extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestRequester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['agent']) {
            this.agent = new fhir.Reference(source.agent);
        }
        else {
            this.agent = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest.requester';
        }
        this.vRS('agent', exp);
        this.vOS('onBehalfOf', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestRequester._fts_dataType = 'MedicationRequestRequester';
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export class MedicationRequestDispenseRequest extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['numberOfRepeatsAllowed']) {
            this.numberOfRepeatsAllowed = new fhir.FhirPositiveInt({ value: source.numberOfRepeatsAllowed });
        }
        if (source['_numberOfRepeatsAllowed']) {
            if (this.numberOfRepeatsAllowed) {
                this.numberOfRepeatsAllowed.addExtendedProperties(source._numberOfRepeatsAllowed);
            }
            else {
                this.numberOfRepeatsAllowed = new fhir.FhirPositiveInt(source._numberOfRepeatsAllowed);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['expectedSupplyDuration']) {
            this.expectedSupplyDuration = new fhir.Duration(source.expectedSupplyDuration);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest.dispenseRequest';
        }
        this.vOS('validityPeriod', exp);
        this.vOS('numberOfRepeatsAllowed', exp);
        this.vOS('quantity', exp);
        this.vOS('expectedSupplyDuration', exp);
        this.vOS('performer', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestDispenseRequest._fts_dataType = 'MedicationRequestDispenseRequest';
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export class MedicationRequestSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['allowed']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowed });
        }
        else {
            this.allowed = null;
        }
        if (source['_allowed']) {
            if (this.allowed) {
                this.allowed.addExtendedProperties(source._allowed);
            }
            else {
                this.allowed = new fhir.FhirBoolean(source._allowed);
            }
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest.substitution';
        }
        this.vRS('allowed', exp);
        this.vOS('reason', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestSubstitution._fts_dataType = 'MedicationRequestSubstitution';
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export class MedicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for MedicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.Reference(x));
        }
        else {
            this.definition = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.MedicationRequestRequester(source.requester);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['dispenseRequest']) {
            this.dispenseRequest = new fhir.MedicationRequestDispenseRequest(source.dispenseRequest);
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationRequestSubstitution(source.substitution);
        }
        if (source['priorPrescription']) {
            this.priorPrescription = new fhir.Reference(source.priorPrescription);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        else {
            this.detectedIssue = [];
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('definition', exp);
        this.vOA('basedOn', exp);
        this.vOS('groupIdentifier', exp);
        this.vOSV('status', exp, 'MedicationRequestStatus', MedicationRequestStatusVsValidation, 'r');
        this.vRSV('intent', exp, 'MedicationRequestIntent', MedicationRequestIntentVsValidation, 'r');
        this.vOS('category', exp);
        this.vOSV('priority', exp, 'MedicationRequestPriority', MedicationRequestPriorityVsValidation, 'r');
        this.vRS('medication', exp);
        this.vRS('subject', exp);
        this.vOS('context', exp);
        this.vOA('supportingInformation', exp);
        this.vOS('authoredOn', exp);
        this.vOS('requester', exp);
        this.vOS('recorder', exp);
        this.vOA('reasonCode', exp);
        this.vOA('reasonReference', exp);
        this.vOA('note', exp);
        this.vOA('dosageInstruction', exp);
        this.vOS('dispenseRequest', exp);
        this.vOS('substitution', exp);
        this.vOS('priorPrescription', exp);
        this.vOA('detectedIssue', exp);
        this.vOA('eventHistory', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequest._fts_dataType = 'MedicationRequest';
/**
 * Internal flag to properly serialize choice-type element MedicationRequest.medication[x]
 */
MedicationRequest._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,