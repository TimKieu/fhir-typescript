// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationRequestStatusVsValidation } from '../fhirValueSets/MedicationRequestStatusVsValidation.js';
// @ts-ignore
import { MedicationRequestIntentVsValidation } from '../fhirValueSets/MedicationRequestIntentVsValidation.js';
// @ts-ignore
import { MedicationRequestPriorityVsValidation } from '../fhirValueSets/MedicationRequestPriorityVsValidation.js';
/**
 * The individual, organization or device that initiated the request and has responsibility for its activation.
 */
export class MedicationRequestRequester extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestRequester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['agent']) {
            this.agent = new fhir.Reference(source.agent, options);
        }
        else {
            this.agent = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest.requester';
        }
        iss.push(...this.vRS('agent', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestRequester._fts_dataType = 'MedicationRequestRequester';
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export class MedicationRequestDispenseRequest extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod, options);
        }
        if (source['numberOfRepeatsAllowed'] !== undefined) {
            this.numberOfRepeatsAllowed = new fhir.FhirPositiveInt({ value: source.numberOfRepeatsAllowed }, options);
        }
        if (source['_numberOfRepeatsAllowed']) {
            if (this.numberOfRepeatsAllowed) {
                this.numberOfRepeatsAllowed.addExtendedProperties(source._numberOfRepeatsAllowed);
            }
            else {
                this.numberOfRepeatsAllowed = new fhir.FhirPositiveInt(source._numberOfRepeatsAllowed, options);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['expectedSupplyDuration']) {
            this.expectedSupplyDuration = new fhir.Duration(source.expectedSupplyDuration, options);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest.dispenseRequest';
        }
        iss.push(...this.vOS('validityPeriod', exp));
        iss.push(...this.vOS('numberOfRepeatsAllowed', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('expectedSupplyDuration', exp));
        iss.push(...this.vOS('performer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestDispenseRequest._fts_dataType = 'MedicationRequestDispenseRequest';
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export class MedicationRequestSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['allowed'] !== undefined) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowed }, options);
        }
        else {
            this.allowed = null;
        }
        if (source['_allowed']) {
            if (this.allowed) {
                this.allowed.addExtendedProperties(source._allowed);
            }
            else {
                this.allowed = new fhir.FhirBoolean(source._allowed, options);
            }
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest.substitution';
        }
        iss.push(...this.vRS('allowed', exp));
        iss.push(...this.vOS('reason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestSubstitution._fts_dataType = 'MedicationRequestSubstitution';
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export class MedicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for MedicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.definition = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['intent'] !== undefined) {
            this.intent = new fhir.FhirCode({ value: source.intent }, options);
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent, options);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirCode({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority, options);
            }
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept, options);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference, options);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['authoredOn'] !== undefined) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn }, options);
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn, options);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.MedicationRequestRequester(source.requester, options);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x, options));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['dispenseRequest']) {
            this.dispenseRequest = new fhir.MedicationRequestDispenseRequest(source.dispenseRequest, options);
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationRequestSubstitution(source.substitution, options);
        }
        if (source['priorPrescription']) {
            this.priorPrescription = new fhir.Reference(source.priorPrescription, options);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.detectedIssue = [];
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationRequest';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('definition', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOS('groupIdentifier', exp));
        iss.push(...this.vOSV('status', exp, 'MedicationRequestStatus', MedicationRequestStatusVsValidation, 'r'));
        iss.push(...this.vRSV('intent', exp, 'MedicationRequestIntent', MedicationRequestIntentVsValidation, 'r'));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOSV('priority', exp, 'MedicationRequestPriority', MedicationRequestPriorityVsValidation, 'r'));
        iss.push(...this.vRS('medication', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        iss.push(...this.vOS('authoredOn', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOS('recorder', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('dosageInstruction', exp));
        iss.push(...this.vOS('dispenseRequest', exp));
        iss.push(...this.vOS('substitution', exp));
        iss.push(...this.vOS('priorPrescription', exp));
        iss.push(...this.vOA('detectedIssue', exp));
        iss.push(...this.vOA('eventHistory', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequest._fts_dataType = 'MedicationRequest';
/**
 * Internal flag to properly serialize choice-type element MedicationRequest.medication[x]
 */
MedicationRequest._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,