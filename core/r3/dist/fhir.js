// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
import { FhirBase } from './fhir/FhirBase.js';
import { FhirPrimitive } from './fhir/FhirPrimitive.js';
import { FhirBase64Binary } from './fhir/FhirBase64Binary.js';
import { FhirBoolean } from './fhir/FhirBoolean.js';
import { FhirCode } from './fhir/FhirCode.js';
import { FhirDate } from './fhir/FhirDate.js';
import { FhirDateTime } from './fhir/FhirDateTime.js';
import { FhirDecimal } from './fhir/FhirDecimal.js';
import { FhirId } from './fhir/FhirId.js';
import { FhirInstant } from './fhir/FhirInstant.js';
import { FhirInteger } from './fhir/FhirInteger.js';
import { FhirMarkdown } from './fhir/FhirMarkdown.js';
import { FhirOid } from './fhir/FhirOid.js';
import { FhirPositiveInt } from './fhir/FhirPositiveInt.js';
import { FhirString } from './fhir/FhirString.js';
import { FhirTime } from './fhir/FhirTime.js';
import { FhirUnsignedInt } from './fhir/FhirUnsignedInt.js';
import { FhirUri } from './fhir/FhirUri.js';
import { FhirUuid } from './fhir/FhirUuid.js';
import { FhirXhtml } from './fhir/FhirXhtml.js';
import { FhirElement } from './fhir/FhirElement.js';
import { Coding } from './fhir/Coding.js';
import { Address } from './fhir/Address.js';
import { Quantity } from './fhir/Quantity.js';
import { Age } from './fhir/Age.js';
import { Annotation } from './fhir/Annotation.js';
import { Attachment } from './fhir/Attachment.js';
import { BackboneElement } from './fhir/BackboneElement.js';
import { CodeableConcept } from './fhir/CodeableConcept.js';
import { ContactDetail } from './fhir/ContactDetail.js';
import { ContactPoint } from './fhir/ContactPoint.js';
import { Contributor } from './fhir/Contributor.js';
import { Count } from './fhir/Count.js';
import { DataRequirement, DataRequirementCodeFilter, DataRequirementDateFilter } from './fhir/DataRequirement.js';
import { Distance } from './fhir/Distance.js';
import { Dosage } from './fhir/Dosage.js';
import { Duration } from './fhir/Duration.js';
import { ElementDefinition, ElementDefinitionSlicing, ElementDefinitionSlicingDiscriminator, ElementDefinitionBase, ElementDefinitionType, ElementDefinitionExample, ElementDefinitionConstraint, ElementDefinitionBinding, ElementDefinitionMapping } from './fhir/ElementDefinition.js';
import { Extension } from './fhir/Extension.js';
import { HumanName } from './fhir/HumanName.js';
import { Identifier } from './fhir/Identifier.js';
import { Meta } from './fhir/Meta.js';
import { Money } from './fhir/Money.js';
import { Narrative } from './fhir/Narrative.js';
import { ParameterDefinition } from './fhir/ParameterDefinition.js';
import { Period } from './fhir/Period.js';
import { Range } from './fhir/Range.js';
import { Ratio } from './fhir/Ratio.js';
import { Reference } from './fhir/Reference.js';
import { RelatedArtifact } from './fhir/RelatedArtifact.js';
import { SampledData } from './fhir/SampledData.js';
import { Signature } from './fhir/Signature.js';
import { Timing, TimingRepeat } from './fhir/Timing.js';
import { TriggerDefinition } from './fhir/TriggerDefinition.js';
import { UsageContext } from './fhir/UsageContext.js';
import { Resource } from './fhir/Resource.js';
import { DomainResource } from './fhir/DomainResource.js';
import { Account, AccountCoverage, AccountGuarantor } from './fhir/Account.js';
import { ActivityDefinition, ActivityDefinitionParticipant, ActivityDefinitionDynamicValue } from './fhir/ActivityDefinition.js';
import { AdverseEvent, AdverseEventSuspectEntity } from './fhir/AdverseEvent.js';
import { AllergyIntolerance, AllergyIntoleranceReaction } from './fhir/AllergyIntolerance.js';
import { Appointment, AppointmentParticipant } from './fhir/Appointment.js';
import { AppointmentResponse } from './fhir/AppointmentResponse.js';
import { AuditEvent, AuditEventAgent, AuditEventAgentNetwork, AuditEventSource, AuditEventEntity, AuditEventEntityDetail } from './fhir/AuditEvent.js';
import { Basic } from './fhir/Basic.js';
import { Binary } from './fhir/Binary.js';
import { BodySite } from './fhir/BodySite.js';
import { Bundle, BundleLink, BundleEntry, BundleEntrySearch, BundleEntryRequest, BundleEntryResponse } from './fhir/Bundle.js';
import { CapabilityStatement, CapabilityStatementSoftware, CapabilityStatementImplementation, CapabilityStatementRest, CapabilityStatementRestSecurity, CapabilityStatementRestSecurityCertificate, CapabilityStatementRestResource, CapabilityStatementRestResourceInteraction, CapabilityStatementRestResourceSearchParam, CapabilityStatementRestInteraction, CapabilityStatementRestOperation, CapabilityStatementMessaging, CapabilityStatementMessagingEndpoint, CapabilityStatementMessagingSupportedMessage, CapabilityStatementMessagingEvent, CapabilityStatementDocument } from './fhir/CapabilityStatement.js';
import { CarePlan, CarePlanActivity, CarePlanActivityDetail } from './fhir/CarePlan.js';
import { CareTeam, CareTeamParticipant } from './fhir/CareTeam.js';
import { ChargeItem, ChargeItemParticipant } from './fhir/ChargeItem.js';
import { Claim, ClaimRelated, ClaimPayee, ClaimCareTeam, ClaimInformation, ClaimDiagnosis, ClaimProcedure, ClaimInsurance, ClaimAccident, ClaimItem, ClaimItemDetail, ClaimItemDetailSubDetail } from './fhir/Claim.js';
import { ClaimResponse, ClaimResponseItem, ClaimResponseItemAdjudication, ClaimResponseItemDetail, ClaimResponseItemDetailSubDetail, ClaimResponseAddItem, ClaimResponseAddItemDetail, ClaimResponseError, ClaimResponsePayment, ClaimResponseProcessNote, ClaimResponseInsurance } from './fhir/ClaimResponse.js';
import { ClinicalImpression, ClinicalImpressionInvestigation, ClinicalImpressionFinding } from './fhir/ClinicalImpression.js';
import { CodeSystem, CodeSystemFilter, CodeSystemProperty, CodeSystemConcept, CodeSystemConceptDesignation, CodeSystemConceptProperty } from './fhir/CodeSystem.js';
import { Communication, CommunicationPayload } from './fhir/Communication.js';
import { CommunicationRequest, CommunicationRequestPayload, CommunicationRequestRequester } from './fhir/CommunicationRequest.js';
import { CompartmentDefinition, CompartmentDefinitionResource } from './fhir/CompartmentDefinition.js';
import { Composition, CompositionAttester, CompositionRelatesTo, CompositionEvent, CompositionSection } from './fhir/Composition.js';
import { ConceptMap, ConceptMapGroup, ConceptMapGroupElement, ConceptMapGroupElementTarget, ConceptMapGroupElementTargetDependsOn, ConceptMapGroupUnmapped } from './fhir/ConceptMap.js';
import { Condition, ConditionStage, ConditionEvidence } from './fhir/Condition.js';
import { Consent, ConsentActor, ConsentPolicy, ConsentData, ConsentExcept, ConsentExceptActor, ConsentExceptData } from './fhir/Consent.js';
import { Contract, ContractAgent, ContractSigner, ContractValuedItem, ContractTerm, ContractTermAgent, ContractTermValuedItem, ContractFriendly, ContractLegal, ContractRule } from './fhir/Contract.js';
import { Coverage, CoverageGrouping } from './fhir/Coverage.js';
import { DataElement, DataElementMapping } from './fhir/DataElement.js';
import { DetectedIssue, DetectedIssueMitigation } from './fhir/DetectedIssue.js';
import { Device, DeviceUdi } from './fhir/Device.js';
import { DeviceComponent, DeviceComponentProductionSpecification } from './fhir/DeviceComponent.js';
import { DeviceMetric, DeviceMetricCalibration } from './fhir/DeviceMetric.js';
import { DeviceRequest, DeviceRequestRequester } from './fhir/DeviceRequest.js';
import { DeviceUseStatement } from './fhir/DeviceUseStatement.js';
import { DiagnosticReport, DiagnosticReportPerformer, DiagnosticReportImage } from './fhir/DiagnosticReport.js';
import { DocumentManifest, DocumentManifestContent, DocumentManifestRelated } from './fhir/DocumentManifest.js';
import { DocumentReference, DocumentReferenceRelatesTo, DocumentReferenceContent, DocumentReferenceContext, DocumentReferenceContextRelated } from './fhir/DocumentReference.js';
import { EligibilityRequest } from './fhir/EligibilityRequest.js';
import { EligibilityResponse, EligibilityResponseInsurance, EligibilityResponseInsuranceBenefitBalance, EligibilityResponseInsuranceBenefitBalanceFinancial, EligibilityResponseError } from './fhir/EligibilityResponse.js';
import { Encounter, EncounterStatusHistory, EncounterClassHistory, EncounterParticipant, EncounterDiagnosis, EncounterHospitalization, EncounterLocation } from './fhir/Encounter.js';
import { Endpoint } from './fhir/Endpoint.js';
import { EnrollmentRequest } from './fhir/EnrollmentRequest.js';
import { EnrollmentResponse } from './fhir/EnrollmentResponse.js';
import { EpisodeOfCare, EpisodeOfCareStatusHistory, EpisodeOfCareDiagnosis } from './fhir/EpisodeOfCare.js';
import { ExpansionProfile, ExpansionProfileFixedVersion, ExpansionProfileExcludedSystem, ExpansionProfileDesignation, ExpansionProfileDesignationInclude, ExpansionProfileDesignationIncludeDesignation, ExpansionProfileDesignationExclude, ExpansionProfileDesignationExcludeDesignation } from './fhir/ExpansionProfile.js';
import { ExplanationOfBenefit, ExplanationOfBenefitRelated, ExplanationOfBenefitPayee, ExplanationOfBenefitInformation, ExplanationOfBenefitCareTeam, ExplanationOfBenefitDiagnosis, ExplanationOfBenefitProcedure, ExplanationOfBenefitInsurance, ExplanationOfBenefitAccident, ExplanationOfBenefitItem, ExplanationOfBenefitItemAdjudication, ExplanationOfBenefitItemDetail, ExplanationOfBenefitItemDetailSubDetail, ExplanationOfBenefitAddItem, ExplanationOfBenefitAddItemDetail, ExplanationOfBenefitPayment, ExplanationOfBenefitProcessNote, ExplanationOfBenefitBenefitBalance, ExplanationOfBenefitBenefitBalanceFinancial } from './fhir/ExplanationOfBenefit.js';
import { FamilyMemberHistory, FamilyMemberHistoryCondition } from './fhir/FamilyMemberHistory.js';
import { Flag } from './fhir/Flag.js';
import { Goal, GoalTarget } from './fhir/Goal.js';
import { GraphDefinition, GraphDefinitionLink, GraphDefinitionLinkTarget, GraphDefinitionLinkTargetCompartment } from './fhir/GraphDefinition.js';
import { Group, GroupCharacteristic, GroupMember } from './fhir/Group.js';
import { GuidanceResponse } from './fhir/GuidanceResponse.js';
import { HealthcareService, HealthcareServiceAvailableTime, HealthcareServiceNotAvailable } from './fhir/HealthcareService.js';
import { ImagingManifest, ImagingManifestStudy, ImagingManifestStudySeries, ImagingManifestStudySeriesInstance } from './fhir/ImagingManifest.js';
import { ImagingStudy, ImagingStudySeries, ImagingStudySeriesInstance } from './fhir/ImagingStudy.js';
import { Immunization, ImmunizationPractitioner, ImmunizationExplanation, ImmunizationReaction, ImmunizationVaccinationProtocol } from './fhir/Immunization.js';
import { ImmunizationRecommendation, ImmunizationRecommendationRecommendation, ImmunizationRecommendationRecommendationDateCriterion, ImmunizationRecommendationRecommendationProtocol } from './fhir/ImmunizationRecommendation.js';
import { ImplementationGuide, ImplementationGuideDependency, ImplementationGuidePackage, ImplementationGuidePackageResource, ImplementationGuideGlobal, ImplementationGuidePage } from './fhir/ImplementationGuide.js';
import { Library } from './fhir/Library.js';
import { Linkage, LinkageItem } from './fhir/Linkage.js';
import { List, ListEntry } from './fhir/List.js';
import { Location, LocationPosition } from './fhir/Location.js';
import { Measure, MeasureGroup, MeasureGroupPopulation, MeasureGroupStratifier, MeasureSupplementalData } from './fhir/Measure.js';
import { MeasureReport, MeasureReportGroup, MeasureReportGroupPopulation, MeasureReportGroupStratifier, MeasureReportGroupStratifierStratum, MeasureReportGroupStratifierStratumPopulation } from './fhir/MeasureReport.js';
import { Media } from './fhir/Media.js';
import { Medication, MedicationIngredient, MedicationPackage, MedicationPackageContent, MedicationPackageBatch } from './fhir/Medication.js';
import { MedicationAdministration, MedicationAdministrationPerformer, MedicationAdministrationDosage } from './fhir/MedicationAdministration.js';
import { MedicationDispense, MedicationDispensePerformer, MedicationDispenseSubstitution } from './fhir/MedicationDispense.js';
import { MedicationRequest, MedicationRequestRequester, MedicationRequestDispenseRequest, MedicationRequestSubstitution } from './fhir/MedicationRequest.js';
import { MedicationStatement } from './fhir/MedicationStatement.js';
import { MessageDefinition, MessageDefinitionFocus, MessageDefinitionAllowedResponse } from './fhir/MessageDefinition.js';
import { MessageHeader, MessageHeaderDestination, MessageHeaderSource, MessageHeaderResponse } from './fhir/MessageHeader.js';
import { NamingSystem, NamingSystemUniqueId } from './fhir/NamingSystem.js';
import { NutritionOrder, NutritionOrderOralDiet, NutritionOrderOralDietNutrient, NutritionOrderOralDietTexture, NutritionOrderSupplement, NutritionOrderEnteralFormula, NutritionOrderEnteralFormulaAdministration } from './fhir/NutritionOrder.js';
import { Observation, ObservationReferenceRange, ObservationRelated, ObservationComponent } from './fhir/Observation.js';
import { OperationDefinition, OperationDefinitionParameter, OperationDefinitionParameterBinding, OperationDefinitionOverload } from './fhir/OperationDefinition.js';
import { OperationOutcome, OperationOutcomeIssue } from './fhir/OperationOutcome.js';
import { Organization, OrganizationContact } from './fhir/Organization.js';
import { Parameters, ParametersParameter } from './fhir/Parameters.js';
import { Patient, PatientContact, PatientAnimal, PatientCommunication, PatientLink } from './fhir/Patient.js';
import { PaymentNotice } from './fhir/PaymentNotice.js';
import { PaymentReconciliation, PaymentReconciliationDetail, PaymentReconciliationProcessNote } from './fhir/PaymentReconciliation.js';
import { Person, PersonLink } from './fhir/Person.js';
import { PlanDefinition, PlanDefinitionGoal, PlanDefinitionGoalTarget, PlanDefinitionAction, PlanDefinitionActionCondition, PlanDefinitionActionRelatedAction, PlanDefinitionActionParticipant, PlanDefinitionActionDynamicValue } from './fhir/PlanDefinition.js';
import { Practitioner, PractitionerQualification } from './fhir/Practitioner.js';
import { PractitionerRole, PractitionerRoleAvailableTime, PractitionerRoleNotAvailable } from './fhir/PractitionerRole.js';
import { Procedure, ProcedurePerformer, ProcedureFocalDevice } from './fhir/Procedure.js';
import { ProcedureRequest, ProcedureRequestRequester } from './fhir/ProcedureRequest.js';
import { ProcessRequest, ProcessRequestItem } from './fhir/ProcessRequest.js';
import { ProcessResponse, ProcessResponseProcessNote } from './fhir/ProcessResponse.js';
import { Provenance, ProvenanceAgent, ProvenanceEntity } from './fhir/Provenance.js';
import { Questionnaire, QuestionnaireItem, QuestionnaireItemEnableWhen, QuestionnaireItemOption } from './fhir/Questionnaire.js';
import { QuestionnaireResponse, QuestionnaireResponseItem, QuestionnaireResponseItemAnswer } from './fhir/QuestionnaireResponse.js';
import { ReferralRequest, ReferralRequestRequester } from './fhir/ReferralRequest.js';
import { RelatedPerson } from './fhir/RelatedPerson.js';
import { RequestGroup, RequestGroupAction, RequestGroupActionCondition, RequestGroupActionRelatedAction } from './fhir/RequestGroup.js';
import { ResearchStudy, ResearchStudyArm } from './fhir/ResearchStudy.js';
import { ResearchSubject } from './fhir/ResearchSubject.js';
import { RiskAssessment, RiskAssessmentPrediction } from './fhir/RiskAssessment.js';
import { Schedule } from './fhir/Schedule.js';
import { SearchParameter, SearchParameterComponent } from './fhir/SearchParameter.js';
import { Sequence, SequenceReferenceSeq, SequenceVariant, SequenceQuality, SequenceRepository } from './fhir/Sequence.js';
import { ServiceDefinition } from './fhir/ServiceDefinition.js';
import { Slot } from './fhir/Slot.js';
import { Specimen, SpecimenCollection, SpecimenProcessing, SpecimenContainer } from './fhir/Specimen.js';
import { StructureDefinition, StructureDefinitionMapping, StructureDefinitionSnapshot, StructureDefinitionDifferential } from './fhir/StructureDefinition.js';
import { StructureMap, StructureMapStructure, StructureMapGroup, StructureMapGroupInput, StructureMapGroupRule, StructureMapGroupRuleSource, StructureMapGroupRuleTarget, StructureMapGroupRuleTargetParameter, StructureMapGroupRuleDependent } from './fhir/StructureMap.js';
import { Subscription, SubscriptionChannel } from './fhir/Subscription.js';
import { Substance, SubstanceInstance, SubstanceIngredient } from './fhir/Substance.js';
import { SupplyDelivery, SupplyDeliverySuppliedItem } from './fhir/SupplyDelivery.js';
import { SupplyRequest, SupplyRequestOrderedItem, SupplyRequestRequester } from './fhir/SupplyRequest.js';
import { Task, TaskRequester, TaskRestriction, TaskInput, TaskOutput } from './fhir/Task.js';
import { TestReport, TestReportParticipant, TestReportSetup, TestReportSetupAction, TestReportSetupActionOperation, TestReportSetupActionAssert, TestReportTest, TestReportTestAction, TestReportTeardown, TestReportTeardownAction } from './fhir/TestReport.js';
import { TestScript, TestScriptOrigin, TestScriptDestination, TestScriptMetadata, TestScriptMetadataLink, TestScriptMetadataCapability, TestScriptFixture, TestScriptVariable, TestScriptRule, TestScriptRuleParam, TestScriptRuleset, TestScriptRulesetRule, TestScriptRulesetRuleParam, TestScriptSetup, TestScriptSetupAction, TestScriptSetupActionOperation, TestScriptSetupActionOperationRequestHeader, TestScriptSetupActionAssert, TestScriptSetupActionAssertRule, TestScriptSetupActionAssertRuleParam, TestScriptSetupActionAssertRuleset, TestScriptSetupActionAssertRulesetRule, TestScriptSetupActionAssertRulesetRuleParam, TestScriptTest, TestScriptTestAction, TestScriptTeardown, TestScriptTeardownAction } from './fhir/TestScript.js';
import { ValueSet, ValueSetCompose, ValueSetComposeInclude, ValueSetComposeIncludeConcept, ValueSetComposeIncludeConceptDesignation, ValueSetComposeIncludeFilter, ValueSetExpansion, ValueSetExpansionParameter, ValueSetExpansionContains } from './fhir/ValueSet.js';
import { VisionPrescription, VisionPrescriptionDispense } from './fhir/VisionPrescription.js';
/**
 * Factory creator for FHIR Resources
 */
function resourceFactory(source) {
    switch (source['resourceType']) {
        case "Account": return new Account(source);
        case "ActivityDefinition": return new ActivityDefinition(source);
        case "AdverseEvent": return new AdverseEvent(source);
        case "AllergyIntolerance": return new AllergyIntolerance(source);
        case "Appointment": return new Appointment(source);
        case "AppointmentResponse": return new AppointmentResponse(source);
        case "AuditEvent": return new AuditEvent(source);
        case "Basic": return new Basic(source);
        case "Binary": return new Binary(source);
        case "BodySite": return new BodySite(source);
        case "Bundle": return new Bundle(source);
        case "CapabilityStatement": return new CapabilityStatement(source);
        case "CarePlan": return new CarePlan(source);
        case "CareTeam": return new CareTeam(source);
        case "ChargeItem": return new ChargeItem(source);
        case "Claim": return new Claim(source);
        case "ClaimResponse": return new ClaimResponse(source);
        case "ClinicalImpression": return new ClinicalImpression(source);
        case "CodeSystem": return new CodeSystem(source);
        case "Communication": return new Communication(source);
        case "CommunicationRequest": return new CommunicationRequest(source);
        case "CompartmentDefinition": return new CompartmentDefinition(source);
        case "Composition": return new Composition(source);
        case "ConceptMap": return new ConceptMap(source);
        case "Condition": return new Condition(source);
        case "Consent": return new Consent(source);
        case "Contract": return new Contract(source);
        case "Coverage": return new Coverage(source);
        case "DataElement": return new DataElement(source);
        case "DetectedIssue": return new DetectedIssue(source);
        case "Device": return new Device(source);
        case "DeviceComponent": return new DeviceComponent(source);
        case "DeviceMetric": return new DeviceMetric(source);
        case "DeviceRequest": return new DeviceRequest(source);
        case "DeviceUseStatement": return new DeviceUseStatement(source);
        case "DiagnosticReport": return new DiagnosticReport(source);
        case "DocumentManifest": return new DocumentManifest(source);
        case "DocumentReference": return new DocumentReference(source);
        case "DomainResource": return new DomainResource(source);
        case "EligibilityRequest": return new EligibilityRequest(source);
        case "EligibilityResponse": return new EligibilityResponse(source);
        case "Encounter": return new Encounter(source);
        case "Endpoint": return new Endpoint(source);
        case "EnrollmentRequest": return new EnrollmentRequest(source);
        case "EnrollmentResponse": return new EnrollmentResponse(source);
        case "EpisodeOfCare": return new EpisodeOfCare(source);
        case "ExpansionProfile": return new ExpansionProfile(source);
        case "ExplanationOfBenefit": return new ExplanationOfBenefit(source);
        case "FamilyMemberHistory": return new FamilyMemberHistory(source);
        case "Flag": return new Flag(source);
        case "Goal": return new Goal(source);
        case "GraphDefinition": return new GraphDefinition(source);
        case "Group": return new Group(source);
        case "GuidanceResponse": return new GuidanceResponse(source);
        case "HealthcareService": return new HealthcareService(source);
        case "ImagingManifest": return new ImagingManifest(source);
        case "ImagingStudy": return new ImagingStudy(source);
        case "Immunization": return new Immunization(source);
        case "ImmunizationRecommendation": return new ImmunizationRecommendation(source);
        case "ImplementationGuide": return new ImplementationGuide(source);
        case "Library": return new Library(source);
        case "Linkage": return new Linkage(source);
        case "List": return new List(source);
        case "Location": return new Location(source);
        case "Measure": return new Measure(source);
        case "MeasureReport": return new MeasureReport(source);
        case "Media": return new Media(source);
        case "Medication": return new Medication(source);
        case "MedicationAdministration": return new MedicationAdministration(source);
        case "MedicationDispense": return new MedicationDispense(source);
        case "MedicationRequest": return new MedicationRequest(source);
        case "MedicationStatement": return new MedicationStatement(source);
        case "MessageDefinition": return new MessageDefinition(source);
        case "MessageHeader": return new MessageHeader(source);
        case "NamingSystem": return new NamingSystem(source);
        case "NutritionOrder": return new NutritionOrder(source);
        case "Observation": return new Observation(source);
        case "OperationDefinition": return new OperationDefinition(source);
        case "OperationOutcome": return new OperationOutcome(source);
        case "Organization": return new Organization(source);
        case "Parameters": return new Parameters(source);
        case "Patient": return new Patient(source);
        case "PaymentNotice": return new PaymentNotice(source);
        case "PaymentReconciliation": return new PaymentReconciliation(source);
        case "Person": return new Person(source);
        case "PlanDefinition": return new PlanDefinition(source);
        case "Practitioner": return new Practitioner(source);
        case "PractitionerRole": return new PractitionerRole(source);
        case "Procedure": return new Procedure(source);
        case "ProcedureRequest": return new ProcedureRequest(source);
        case "ProcessRequest": return new ProcessRequest(source);
        case "ProcessResponse": return new ProcessResponse(source);
        case "Provenance": return new Provenance(source);
        case "Questionnaire": return new Questionnaire(source);
        case "QuestionnaireResponse": return new QuestionnaireResponse(source);
        case "ReferralRequest": return new ReferralRequest(source);
        case "RelatedPerson": return new RelatedPerson(source);
        case "RequestGroup": return new RequestGroup(source);
        case "ResearchStudy": return new ResearchStudy(source);
        case "ResearchSubject": return new ResearchSubject(source);
        case "Resource": return new Resource(source);
        case "RiskAssessment": return new RiskAssessment(source);
        case "Schedule": return new Schedule(source);
        case "SearchParameter": return new SearchParameter(source);
        case "Sequence": return new Sequence(source);
        case "ServiceDefinition": return new ServiceDefinition(source);
        case "Slot": return new Slot(source);
        case "Specimen": return new Specimen(source);
        case "StructureDefinition": return new StructureDefinition(source);
        case "StructureMap": return new StructureMap(source);
        case "Subscription": return new Subscription(source);
        case "Substance": return new Substance(source);
        case "SupplyDelivery": return new SupplyDelivery(source);
        case "SupplyRequest": return new SupplyRequest(source);
        case "Task": return new Task(source);
        case "TestReport": return new TestReport(source);
        case "TestScript": return new TestScript(source);
        case "ValueSet": return new ValueSet(source);
        case "VisionPrescription": return new VisionPrescription(source);
        default: return null;
    }
}
export { FhirBase, FhirPrimitive, FhirBase64Binary, FhirBoolean, FhirCode, FhirDate, FhirDateTime, FhirDecimal, FhirId, FhirInstant, FhirInteger, FhirMarkdown, FhirOid, FhirPositiveInt, FhirString, FhirTime, FhirUnsignedInt, FhirUri, FhirUuid, FhirXhtml, FhirElement, Coding, Address, Quantity, Age, Annotation, Attachment, BackboneElement, CodeableConcept, ContactDetail, ContactPoint, Contributor, Count, DataRequirement, DataRequirementCodeFilter, DataRequirementDateFilter, Distance, Dosage, Duration, ElementDefinition, ElementDefinitionSlicing, ElementDefinitionSlicingDiscriminator, ElementDefinitionBase, ElementDefinitionType, ElementDefinitionExample, ElementDefinitionConstraint, ElementDefinitionBinding, ElementDefinitionMapping, Extension, HumanName, Identifier, Meta, Money, Narrative, ParameterDefinition, Period, Range, Ratio, Reference, RelatedArtifact, SampledData, Signature, Timing, TimingRepeat, TriggerDefinition, UsageContext, Resource, DomainResource, Account, AccountCoverage, AccountGuarantor, ActivityDefinition, ActivityDefinitionParticipant, ActivityDefinitionDynamicValue, AdverseEvent, AdverseEventSuspectEntity, AllergyIntolerance, AllergyIntoleranceReaction, Appointment, AppointmentParticipant, AppointmentResponse, AuditEvent, AuditEventAgent, AuditEventAgentNetwork, AuditEventSource, AuditEventEntity, AuditEventEntityDetail, Basic, Binary, BodySite, Bundle, BundleLink, BundleEntry, BundleEntrySearch, BundleEntryRequest, BundleEntryResponse, CapabilityStatement, CapabilityStatementSoftware, CapabilityStatementImplementation, CapabilityStatementRest, CapabilityStatementRestSecurity, CapabilityStatementRestSecurityCertificate, CapabilityStatementRestResource, CapabilityStatementRestResourceInteraction, CapabilityStatementRestResourceSearchParam, CapabilityStatementRestInteraction, CapabilityStatementRestOperation, CapabilityStatementMessaging, CapabilityStatementMessagingEndpoint, CapabilityStatementMessagingSupportedMessage, CapabilityStatementMessagingEvent, CapabilityStatementDocument, CarePlan, CarePlanActivity, CarePlanActivityDetail, CareTeam, CareTeamParticipant, ChargeItem, ChargeItemParticipant, Claim, ClaimRelated, ClaimPayee, ClaimCareTeam, ClaimInformation, ClaimDiagnosis, ClaimProcedure, ClaimInsurance, ClaimAccident, ClaimItem, ClaimItemDetail, ClaimItemDetailSubDetail, ClaimResponse, ClaimResponseItem, ClaimResponseItemAdjudication, ClaimResponseItemDetail, ClaimResponseItemDetailSubDetail, ClaimResponseAddItem, ClaimResponseAddItemDetail, ClaimResponseError, ClaimResponsePayment, ClaimResponseProcessNote, ClaimResponseInsurance, ClinicalImpression, ClinicalImpressionInvestigation, ClinicalImpressionFinding, CodeSystem, CodeSystemFilter, CodeSystemProperty, CodeSystemConcept, CodeSystemConceptDesignation, CodeSystemConceptProperty, Communication, CommunicationPayload, CommunicationRequest, CommunicationRequestPayload, CommunicationRequestRequester, CompartmentDefinition, CompartmentDefinitionResource, Composition, CompositionAttester, CompositionRelatesTo, CompositionEvent, CompositionSection, ConceptMap, ConceptMapGroup, ConceptMapGroupElement, ConceptMapGroupElementTarget, ConceptMapGroupElementTargetDependsOn, ConceptMapGroupUnmapped, Condition, ConditionStage, ConditionEvidence, Consent, ConsentActor, ConsentPolicy, ConsentData, ConsentExcept, ConsentExceptActor, ConsentExceptData, Contract, ContractAgent, ContractSigner, ContractValuedItem, ContractTerm, ContractTermAgent, ContractTermValuedItem, ContractFriendly, ContractLegal, ContractRule, Coverage, CoverageGrouping, DataElement, DataElementMapping, DetectedIssue, DetectedIssueMitigation, Device, DeviceUdi, DeviceComponent, DeviceComponentProductionSpecification, DeviceMetric, DeviceMetricCalibration, DeviceRequest, DeviceRequestRequester, DeviceUseStatement, DiagnosticReport, DiagnosticReportPerformer, DiagnosticReportImage, DocumentManifest, DocumentManifestContent, DocumentManifestRelated, DocumentReference, DocumentReferenceRelatesTo, DocumentReferenceContent, DocumentReferenceContext, DocumentReferenceContextRelated, EligibilityRequest, EligibilityResponse, EligibilityResponseInsurance, EligibilityResponseInsuranceBenefitBalance, EligibilityResponseInsuranceBenefitBalanceFinancial, EligibilityResponseError, Encounter, EncounterStatusHistory, EncounterClassHistory, EncounterParticipant, EncounterDiagnosis, EncounterHospitalization, EncounterLocation, Endpoint, EnrollmentRequest, EnrollmentResponse, EpisodeOfCare, EpisodeOfCareStatusHistory, EpisodeOfCareDiagnosis, ExpansionProfile, ExpansionProfileFixedVersion, ExpansionProfileExcludedSystem, ExpansionProfileDesignation, ExpansionProfileDesignationInclude, ExpansionProfileDesignationIncludeDesignation, ExpansionProfileDesignationExclude, ExpansionProfileDesignationExcludeDesignation, ExplanationOfBenefit, ExplanationOfBenefitRelated, ExplanationOfBenefitPayee, ExplanationOfBenefitInformation, ExplanationOfBenefitCareTeam, ExplanationOfBenefitDiagnosis, ExplanationOfBenefitProcedure, ExplanationOfBenefitInsurance, ExplanationOfBenefitAccident, ExplanationOfBenefitItem, ExplanationOfBenefitItemAdjudication, ExplanationOfBenefitItemDetail, ExplanationOfBenefitItemDetailSubDetail, ExplanationOfBenefitAddItem, ExplanationOfBenefitAddItemDetail, ExplanationOfBenefitPayment, ExplanationOfBenefitProcessNote, ExplanationOfBenefitBenefitBalance, ExplanationOfBenefitBenefitBalanceFinancial, FamilyMemberHistory, FamilyMemberHistoryCondition, Flag, Goal, GoalTarget, GraphDefinition, GraphDefinitionLink, GraphDefinitionLinkTarget, GraphDefinitionLinkTargetCompartment, Group, GroupCharacteristic, GroupMember, GuidanceResponse, HealthcareService, HealthcareServiceAvailableTime, HealthcareServiceNotAvailable, ImagingManifest, ImagingManifestStudy, ImagingManifestStudySeries, ImagingManifestStudySeriesInstance, ImagingStudy, ImagingStudySeries, ImagingStudySeriesInstance, Immunization, ImmunizationPractitioner, ImmunizationExplanation, ImmunizationReaction, ImmunizationVaccinationProtocol, ImmunizationRecommendation, ImmunizationRecommendationRecommendation, ImmunizationRecommendationRecommendationDateCriterion, ImmunizationRecommendationRecommendationProtocol, ImplementationGuide, ImplementationGuideDependency, ImplementationGuidePackage, ImplementationGuidePackageResource, ImplementationGuideGlobal, ImplementationGuidePage, Library, Linkage, LinkageItem, List, ListEntry, Location, LocationPosition, Measure, MeasureGroup, MeasureGroupPopulation, MeasureGroupStratifier, MeasureSupplementalData, MeasureReport, MeasureReportGroup, MeasureReportGroupPopulation, MeasureReportGroupStratifier, MeasureReportGroupStratifierStratum, MeasureReportGroupStratifierStratumPopulation, Media, Medication, MedicationIngredient, MedicationPackage, MedicationPackageContent, MedicationPackageBatch, MedicationAdministration, MedicationAdministrationPerformer, MedicationAdministrationDosage, MedicationDispense, MedicationDispensePerformer, MedicationDispenseSubstitution, MedicationRequest, MedicationRequestRequester, MedicationRequestDispenseRequest, MedicationRequestSubstitution, MedicationStatement, MessageDefinition, MessageDefinitionFocus, MessageDefinitionAllowedResponse, MessageHeader, MessageHeaderDestination, MessageHeaderSource, MessageHeaderResponse, NamingSystem, NamingSystemUniqueId, NutritionOrder, NutritionOrderOralDiet, NutritionOrderOralDietNutrient, NutritionOrderOralDietTexture, NutritionOrderSupplement, NutritionOrderEnteralFormula, NutritionOrderEnteralFormulaAdministration, Observation, ObservationReferenceRange, ObservationRelated, ObservationComponent, OperationDefinition, OperationDefinitionParameter, OperationDefinitionParameterBinding, OperationDefinitionOverload, OperationOutcome, OperationOutcomeIssue, Organization, OrganizationContact, Parameters, ParametersParameter, Patient, PatientContact, PatientAnimal, PatientCommunication, PatientLink, PaymentNotice, PaymentReconciliation, PaymentReconciliationDetail, PaymentReconciliationProcessNote, Person, PersonLink, PlanDefinition, PlanDefinitionGoal, PlanDefinitionGoalTarget, PlanDefinitionAction, PlanDefinitionActionCondition, PlanDefinitionActionRelatedAction, PlanDefinitionActionParticipant, PlanDefinitionActionDynamicValue, Practitioner, PractitionerQualification, PractitionerRole, PractitionerRoleAvailableTime, PractitionerRoleNotAvailable, Procedure, ProcedurePerformer, ProcedureFocalDevice, ProcedureRequest, ProcedureRequestRequester, ProcessRequest, ProcessRequestItem, ProcessResponse, ProcessResponseProcessNote, Provenance, ProvenanceAgent, ProvenanceEntity, Questionnaire, QuestionnaireItem, QuestionnaireItemEnableWhen, QuestionnaireItemOption, QuestionnaireResponse, QuestionnaireResponseItem, QuestionnaireResponseItemAnswer, ReferralRequest, ReferralRequestRequester, RelatedPerson, RequestGroup, RequestGroupAction, RequestGroupActionCondition, RequestGroupActionRelatedAction, ResearchStudy, ResearchStudyArm, ResearchSubject, RiskAssessment, RiskAssessmentPrediction, Schedule, SearchParameter, SearchParameterComponent, Sequence, SequenceReferenceSeq, SequenceVariant, SequenceQuality, SequenceRepository, ServiceDefinition, Slot, Specimen, SpecimenCollection, SpecimenProcessing, SpecimenContainer, StructureDefinition, StructureDefinitionMapping, StructureDefinitionSnapshot, StructureDefinitionDifferential, StructureMap, StructureMapStructure, StructureMapGroup, StructureMapGroupInput, StructureMapGroupRule, StructureMapGroupRuleSource, StructureMapGroupRuleTarget, StructureMapGroupRuleTargetParameter, StructureMapGroupRuleDependent, Subscription, SubscriptionChannel, Substance, SubstanceInstance, SubstanceIngredient, SupplyDelivery, SupplyDeliverySuppliedItem, SupplyRequest, SupplyRequestOrderedItem, SupplyRequestRequester, Task, TaskRequester, TaskRestriction, TaskInput, TaskOutput, TestReport, TestReportParticipant, TestReportSetup, TestReportSetupAction, TestReportSetupActionOperation, TestReportSetupActionAssert, TestReportTest, TestReportTestAction, TestReportTeardown, TestReportTeardownAction, TestScript, TestScriptOrigin, TestScriptDestination, TestScriptMetadata, TestScriptMetadataLink, TestScriptMetadataCapability, TestScriptFixture, TestScriptVariable, TestScriptRule, TestScriptRuleParam, TestScriptRuleset, TestScriptRulesetRule, TestScriptRulesetRuleParam, TestScriptSetup, TestScriptSetupAction, TestScriptSetupActionOperation, TestScriptSetupActionOperationRequestHeader, TestScriptSetupActionAssert, TestScriptSetupActionAssertRule, TestScriptSetupActionAssertRuleParam, TestScriptSetupActionAssertRuleset, TestScriptSetupActionAssertRulesetRule, TestScriptSetupActionAssertRulesetRuleParam, TestScriptTest, TestScriptTestAction, TestScriptTeardown, TestScriptTeardownAction, ValueSet, ValueSetCompose, ValueSetComposeInclude, ValueSetComposeIncludeConcept, ValueSetComposeIncludeConceptDesignation, ValueSetComposeIncludeFilter, ValueSetExpansion, ValueSetExpansionParameter, ValueSetExpansionContains, VisionPrescription, VisionPrescriptionDispense, resourceFactory, };
//# sourceMappingURL=data:application/json;base64,