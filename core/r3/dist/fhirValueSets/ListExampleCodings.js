// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-example-codes|3.0.2
/**
 * Example use codes for the List resource - typical kinds of use.
 */
export const ListExampleCodings = {
    /**
     * adverserxns: A list of part adverse reactions.
     */
    AdverseReactions: {
        display: "Adverse Reactions",
        code: "adverserxns",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * alerts: A list of alerts for the patient.
     */
    Alerts: {
        display: "Alerts",
        code: "alerts",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * allergies: A list of Allergies for the patient.
     */
    Allergies: {
        display: "Allergies",
        code: "allergies",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * medications: A list of medication statements for the patient.
     */
    MedicationList: {
        display: "Medication List",
        code: "medications",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * plans: A set of care plans that apply in a particular context of care.
     */
    CarePlans: {
        display: "Care Plans",
        code: "plans",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * problems: A list of problems that the patient is known of have (or have had in the past).
     */
    ProblemList: {
        display: "Problem List",
        code: "problems",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * protocols: A set of protocols to be followed.
     */
    Protocols: {
        display: "Protocols",
        code: "protocols",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * waiting: A list of items waiting for an event (perhaps a surgical patient waiting list).
     */
    WaitingList: {
        display: "Waiting List",
        code: "waiting",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
    /**
     * worklist: A list of items that constitute a set of work to be performed (typically this code would be specialized for more specific uses, such as a ward round list).
     */
    Worklist: {
        display: "Worklist",
        code: "worklist",
        system: "http://hl7.org/fhir/list-example-use-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEV4YW1wbGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9MaXN0RXhhbXBsZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBOEN2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsNENBQTRDO0tBQ3JEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsNENBQTRDO0tBQ3JEO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNENBQTRDO0tBQ3JEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsNENBQTRDO0tBQ3JEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9saXN0LWV4YW1wbGUtY29kZXN8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBFeGFtcGxlIHVzZSBjb2RlcyBmb3IgdGhlIExpc3QgcmVzb3VyY2UgLSB0eXBpY2FsIGtpbmRzIG9mIHVzZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIExpc3RFeGFtcGxlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhZHZlcnNlcnhuczogQSBsaXN0IG9mIHBhcnQgYWR2ZXJzZSByZWFjdGlvbnMuXHJcbiAgICovXHJcbiAgQWR2ZXJzZVJlYWN0aW9uczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBhbGVydHM6IEEgbGlzdCBvZiBhbGVydHMgZm9yIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIEFsZXJ0czogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBhbGxlcmdpZXM6IEEgbGlzdCBvZiBBbGxlcmdpZXMgZm9yIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIEFsbGVyZ2llczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtZWRpY2F0aW9uczogQSBsaXN0IG9mIG1lZGljYXRpb24gc3RhdGVtZW50cyBmb3IgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgTWVkaWNhdGlvbkxpc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGxhbnM6IEEgc2V0IG9mIGNhcmUgcGxhbnMgdGhhdCBhcHBseSBpbiBhIHBhcnRpY3VsYXIgY29udGV4dCBvZiBjYXJlLlxyXG4gICAqL1xyXG4gIENhcmVQbGFuczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm9ibGVtczogQSBsaXN0IG9mIHByb2JsZW1zIHRoYXQgdGhlIHBhdGllbnQgaXMga25vd24gb2YgaGF2ZSAob3IgaGF2ZSBoYWQgaW4gdGhlIHBhc3QpLlxyXG4gICAqL1xyXG4gIFByb2JsZW1MaXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb3RvY29sczogQSBzZXQgb2YgcHJvdG9jb2xzIHRvIGJlIGZvbGxvd2VkLlxyXG4gICAqL1xyXG4gIFByb3RvY29sczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3YWl0aW5nOiBBIGxpc3Qgb2YgaXRlbXMgd2FpdGluZyBmb3IgYW4gZXZlbnQgKHBlcmhhcHMgYSBzdXJnaWNhbCBwYXRpZW50IHdhaXRpbmcgbGlzdCkuXHJcbiAgICovXHJcbiAgV2FpdGluZ0xpc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd29ya2xpc3Q6IEEgbGlzdCBvZiBpdGVtcyB0aGF0IGNvbnN0aXR1dGUgYSBzZXQgb2Ygd29yayB0byBiZSBwZXJmb3JtZWQgKHR5cGljYWxseSB0aGlzIGNvZGUgd291bGQgYmUgc3BlY2lhbGl6ZWQgZm9yIG1vcmUgc3BlY2lmaWMgdXNlcywgc3VjaCBhcyBhIHdhcmQgcm91bmQgbGlzdCkuXHJcbiAgICovXHJcbiAgV29ya2xpc3Q6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeGFtcGxlIHVzZSBjb2RlcyBmb3IgdGhlIExpc3QgcmVzb3VyY2UgLSB0eXBpY2FsIGtpbmRzIG9mIHVzZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBMaXN0RXhhbXBsZUNvZGluZ3M6TGlzdEV4YW1wbGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFkdmVyc2VyeG5zOiBBIGxpc3Qgb2YgcGFydCBhZHZlcnNlIHJlYWN0aW9ucy5cclxuICAgKi9cclxuICBBZHZlcnNlUmVhY3Rpb25zOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFkdmVyc2UgUmVhY3Rpb25zXCIsXHJcbiAgICBjb2RlOiBcImFkdmVyc2VyeG5zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhbGVydHM6IEEgbGlzdCBvZiBhbGVydHMgZm9yIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIEFsZXJ0czoge1xyXG4gICAgZGlzcGxheTogXCJBbGVydHNcIixcclxuICAgIGNvZGU6IFwiYWxlcnRzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhbGxlcmdpZXM6IEEgbGlzdCBvZiBBbGxlcmdpZXMgZm9yIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIEFsbGVyZ2llczoge1xyXG4gICAgZGlzcGxheTogXCJBbGxlcmdpZXNcIixcclxuICAgIGNvZGU6IFwiYWxsZXJnaWVzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtZWRpY2F0aW9uczogQSBsaXN0IG9mIG1lZGljYXRpb24gc3RhdGVtZW50cyBmb3IgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgTWVkaWNhdGlvbkxpc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiTWVkaWNhdGlvbiBMaXN0XCIsXHJcbiAgICBjb2RlOiBcIm1lZGljYXRpb25zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwbGFuczogQSBzZXQgb2YgY2FyZSBwbGFucyB0aGF0IGFwcGx5IGluIGEgcGFydGljdWxhciBjb250ZXh0IG9mIGNhcmUuXHJcbiAgICovXHJcbiAgQ2FyZVBsYW5zOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhcmUgUGxhbnNcIixcclxuICAgIGNvZGU6IFwicGxhbnNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2xpc3QtZXhhbXBsZS11c2UtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByb2JsZW1zOiBBIGxpc3Qgb2YgcHJvYmxlbXMgdGhhdCB0aGUgcGF0aWVudCBpcyBrbm93biBvZiBoYXZlIChvciBoYXZlIGhhZCBpbiB0aGUgcGFzdCkuXHJcbiAgICovXHJcbiAgUHJvYmxlbUxpc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvYmxlbSBMaXN0XCIsXHJcbiAgICBjb2RlOiBcInByb2JsZW1zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm90b2NvbHM6IEEgc2V0IG9mIHByb3RvY29scyB0byBiZSBmb2xsb3dlZC5cclxuICAgKi9cclxuICBQcm90b2NvbHM6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvdG9jb2xzXCIsXHJcbiAgICBjb2RlOiBcInByb3RvY29sc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd2FpdGluZzogQSBsaXN0IG9mIGl0ZW1zIHdhaXRpbmcgZm9yIGFuIGV2ZW50IChwZXJoYXBzIGEgc3VyZ2ljYWwgcGF0aWVudCB3YWl0aW5nIGxpc3QpLlxyXG4gICAqL1xyXG4gIFdhaXRpbmdMaXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIldhaXRpbmcgTGlzdFwiLFxyXG4gICAgY29kZTogXCJ3YWl0aW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3b3JrbGlzdDogQSBsaXN0IG9mIGl0ZW1zIHRoYXQgY29uc3RpdHV0ZSBhIHNldCBvZiB3b3JrIHRvIGJlIHBlcmZvcm1lZCAodHlwaWNhbGx5IHRoaXMgY29kZSB3b3VsZCBiZSBzcGVjaWFsaXplZCBmb3IgbW9yZSBzcGVjaWZpYyB1c2VzLCBzdWNoIGFzIGEgd2FyZCByb3VuZCBsaXN0KS5cclxuICAgKi9cclxuICBXb3JrbGlzdDoge1xyXG4gICAgZGlzcGxheTogXCJXb3JrbGlzdFwiLFxyXG4gICAgY29kZTogXCJ3b3JrbGlzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==