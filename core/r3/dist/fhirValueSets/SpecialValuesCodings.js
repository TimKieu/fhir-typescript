// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/special-values|3.0.2
/**
 * A set of generally useful codes defined so they can be included in value sets.
 */
export const SpecialValuesCodings = {
    /**
     * false: Boolean false.
     */
    False: {
        display: "false",
        code: "false",
        system: "http://hl7.org/fhir/special-values",
    },
    /**
     * nil-known: The are no known applicable values in this context.
     */
    NilKnown: {
        display: "Nil Known",
        code: "nil-known",
        system: "http://hl7.org/fhir/special-values",
    },
    /**
     * sufficient: The specific quantity is not known, but is known to be non-zero and is not specified because it makes up the bulk of the material.
     */
    SufficientQuantity: {
        display: "Sufficient Quantity",
        code: "sufficient",
        system: "http://hl7.org/fhir/special-values",
    },
    /**
     * trace: The content is greater than zero, but too small to be quantified.
     */
    TraceAmountDetected: {
        display: "Trace Amount Detected",
        code: "trace",
        system: "http://hl7.org/fhir/special-values",
    },
    /**
     * true: Boolean true.
     */
    True: {
        display: "true",
        code: "true",
        system: "http://hl7.org/fhir/special-values",
    },
    /**
     * withdrawn: The value is no longer available.
     */
    ValueWithdrawn: {
        display: "Value Withdrawn",
        code: "withdrawn",
        system: "http://hl7.org/fhir/special-values",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlY2lhbFZhbHVlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NwZWNpYWxWYWx1ZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQWtDbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0M7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0M7SUFDRDs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLG9DQUFvQztLQUM3QztJQUNEOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUU7UUFDbkIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0M7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0M7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NwZWNpYWwtdmFsdWVzfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgZ2VuZXJhbGx5IHVzZWZ1bCBjb2RlcyBkZWZpbmVkIHNvIHRoZXkgY2FuIGJlIGluY2x1ZGVkIGluIHZhbHVlIHNldHMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTcGVjaWFsVmFsdWVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBmYWxzZTogQm9vbGVhbiBmYWxzZS5cclxuICAgKi9cclxuICBGYWxzZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuaWwta25vd246IFRoZSBhcmUgbm8ga25vd24gYXBwbGljYWJsZSB2YWx1ZXMgaW4gdGhpcyBjb250ZXh0LlxyXG4gICAqL1xyXG4gIE5pbEtub3duOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1ZmZpY2llbnQ6IFRoZSBzcGVjaWZpYyBxdWFudGl0eSBpcyBub3Qga25vd24sIGJ1dCBpcyBrbm93biB0byBiZSBub24temVybyBhbmQgaXMgbm90IHNwZWNpZmllZCBiZWNhdXNlIGl0IG1ha2VzIHVwIHRoZSBidWxrIG9mIHRoZSBtYXRlcmlhbC5cclxuICAgKi9cclxuICBTdWZmaWNpZW50UXVhbnRpdHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdHJhY2U6IFRoZSBjb250ZW50IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvLCBidXQgdG9vIHNtYWxsIHRvIGJlIHF1YW50aWZpZWQuXHJcbiAgICovXHJcbiAgVHJhY2VBbW91bnREZXRlY3RlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0cnVlOiBCb29sZWFuIHRydWUuXHJcbiAgICovXHJcbiAgVHJ1ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3aXRoZHJhd246IFRoZSB2YWx1ZSBpcyBubyBsb25nZXIgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIFZhbHVlV2l0aGRyYXduOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgZ2VuZXJhbGx5IHVzZWZ1bCBjb2RlcyBkZWZpbmVkIHNvIHRoZXkgY2FuIGJlIGluY2x1ZGVkIGluIHZhbHVlIHNldHMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU3BlY2lhbFZhbHVlc0NvZGluZ3M6U3BlY2lhbFZhbHVlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmFsc2U6IEJvb2xlYW4gZmFsc2UuXHJcbiAgICovXHJcbiAgRmFsc2U6IHtcclxuICAgIGRpc3BsYXk6IFwiZmFsc2VcIixcclxuICAgIGNvZGU6IFwiZmFsc2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NwZWNpYWwtdmFsdWVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuaWwta25vd246IFRoZSBhcmUgbm8ga25vd24gYXBwbGljYWJsZSB2YWx1ZXMgaW4gdGhpcyBjb250ZXh0LlxyXG4gICAqL1xyXG4gIE5pbEtub3duOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5pbCBLbm93blwiLFxyXG4gICAgY29kZTogXCJuaWwta25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NwZWNpYWwtdmFsdWVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdWZmaWNpZW50OiBUaGUgc3BlY2lmaWMgcXVhbnRpdHkgaXMgbm90IGtub3duLCBidXQgaXMga25vd24gdG8gYmUgbm9uLXplcm8gYW5kIGlzIG5vdCBzcGVjaWZpZWQgYmVjYXVzZSBpdCBtYWtlcyB1cCB0aGUgYnVsayBvZiB0aGUgbWF0ZXJpYWwuXHJcbiAgICovXHJcbiAgU3VmZmljaWVudFF1YW50aXR5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlN1ZmZpY2llbnQgUXVhbnRpdHlcIixcclxuICAgIGNvZGU6IFwic3VmZmljaWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc3BlY2lhbC12YWx1ZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRyYWNlOiBUaGUgY29udGVudCBpcyBncmVhdGVyIHRoYW4gemVybywgYnV0IHRvbyBzbWFsbCB0byBiZSBxdWFudGlmaWVkLlxyXG4gICAqL1xyXG4gIFRyYWNlQW1vdW50RGV0ZWN0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiVHJhY2UgQW1vdW50IERldGVjdGVkXCIsXHJcbiAgICBjb2RlOiBcInRyYWNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zcGVjaWFsLXZhbHVlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdHJ1ZTogQm9vbGVhbiB0cnVlLlxyXG4gICAqL1xyXG4gIFRydWU6IHtcclxuICAgIGRpc3BsYXk6IFwidHJ1ZVwiLFxyXG4gICAgY29kZTogXCJ0cnVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zcGVjaWFsLXZhbHVlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd2l0aGRyYXduOiBUaGUgdmFsdWUgaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBWYWx1ZVdpdGhkcmF3bjoge1xyXG4gICAgZGlzcGxheTogXCJWYWx1ZSBXaXRoZHJhd25cIixcclxuICAgIGNvZGU6IFwid2l0aGRyYXduXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zcGVjaWFsLXZhbHVlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==