// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-valueabsentreason|3.0.2
/**
 * This value set defines the set of codes for identifying the reason why the expected result in Observation.value[x] is missing.
 */
export const ObservationValueabsentreasonCodes = {
    /**
     * asked: The source human does not know the value.
     */
    Asked: "asked",
    /**
     * astext: The content of the data is represented in the resource narrative.
     */
    AsText: "astext",
    /**
     * error: Some system or workflow process error means that the information is not available.
     */
    Error: "error",
    /**
     * masked: The information is not available due to security, privacy or related reasons.
     */
    Masked: "masked",
    /**
     * NaN: NaN, standing for not a number, is a numeric data type value representing an undefined or unrepresentable value.
     */
    NotANumber: "NaN",
    /**
     * not-asked: The workflow didn't lead to this value being known.
     */
    NotAsked: "not-asked",
    /**
     * not-performed: The value is not available because the observation procedure (test, etc.) was not performed.
     */
    NotPerformed: "not-performed",
    /**
     * temp: There is reason to expect (from the workflow) that the value may become known.
     */
    Temp: "temp",
    /**
     * unknown: The value is not known.
     */
    Unknown: "unknown",
    /**
     * unsupported: The source system wasn't capable of supporting this element.
     */
    Unsupported: "unsupported",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25WYWx1ZWFic2VudHJlYXNvbkNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9PYnNlcnZhdGlvblZhbHVlYWJzZW50cmVhc29uQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsa0ZBQWtGO0FBRWxGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUNBQWlDLEdBQUc7SUFDL0M7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxVQUFVLEVBQUUsS0FBSztJQUNqQjs7T0FFRztJQUNILFFBQVEsRUFBRSxXQUFXO0lBQ3JCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLGVBQWU7SUFDN0I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxXQUFXLEVBQUUsYUFBYTtDQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L29ic2VydmF0aW9uLXZhbHVlYWJzZW50cmVhc29ufDMuMC4yXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyB0aGUgc2V0IG9mIGNvZGVzIGZvciBpZGVudGlmeWluZyB0aGUgcmVhc29uIHdoeSB0aGUgZXhwZWN0ZWQgcmVzdWx0IGluIE9ic2VydmF0aW9uLnZhbHVlW3hdIGlzIG1pc3NpbmcuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgT2JzZXJ2YXRpb25WYWx1ZWFic2VudHJlYXNvbkNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFza2VkOiBUaGUgc291cmNlIGh1bWFuIGRvZXMgbm90IGtub3cgdGhlIHZhbHVlLlxyXG4gICAqL1xyXG4gIEFza2VkOiBcImFza2VkXCIsXHJcbiAgLyoqXHJcbiAgICogYXN0ZXh0OiBUaGUgY29udGVudCBvZiB0aGUgZGF0YSBpcyByZXByZXNlbnRlZCBpbiB0aGUgcmVzb3VyY2UgbmFycmF0aXZlLlxyXG4gICAqL1xyXG4gIEFzVGV4dDogXCJhc3RleHRcIixcclxuICAvKipcclxuICAgKiBlcnJvcjogU29tZSBzeXN0ZW0gb3Igd29ya2Zsb3cgcHJvY2VzcyBlcnJvciBtZWFucyB0aGF0IHRoZSBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIEVycm9yOiBcImVycm9yXCIsXHJcbiAgLyoqXHJcbiAgICogbWFza2VkOiBUaGUgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZSBkdWUgdG8gc2VjdXJpdHksIHByaXZhY3kgb3IgcmVsYXRlZCByZWFzb25zLlxyXG4gICAqL1xyXG4gIE1hc2tlZDogXCJtYXNrZWRcIixcclxuICAvKipcclxuICAgKiBOYU46IE5hTiwgc3RhbmRpbmcgZm9yIG5vdCBhIG51bWJlciwgaXMgYSBudW1lcmljIGRhdGEgdHlwZSB2YWx1ZSByZXByZXNlbnRpbmcgYW4gdW5kZWZpbmVkIG9yIHVucmVwcmVzZW50YWJsZSB2YWx1ZS5cclxuICAgKi9cclxuICBOb3RBTnVtYmVyOiBcIk5hTlwiLFxyXG4gIC8qKlxyXG4gICAqIG5vdC1hc2tlZDogVGhlIHdvcmtmbG93IGRpZG4ndCBsZWFkIHRvIHRoaXMgdmFsdWUgYmVpbmcga25vd24uXHJcbiAgICovXHJcbiAgTm90QXNrZWQ6IFwibm90LWFza2VkXCIsXHJcbiAgLyoqXHJcbiAgICogbm90LXBlcmZvcm1lZDogVGhlIHZhbHVlIGlzIG5vdCBhdmFpbGFibGUgYmVjYXVzZSB0aGUgb2JzZXJ2YXRpb24gcHJvY2VkdXJlICh0ZXN0LCBldGMuKSB3YXMgbm90IHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBOb3RQZXJmb3JtZWQ6IFwibm90LXBlcmZvcm1lZFwiLFxyXG4gIC8qKlxyXG4gICAqIHRlbXA6IFRoZXJlIGlzIHJlYXNvbiB0byBleHBlY3QgKGZyb20gdGhlIHdvcmtmbG93KSB0aGF0IHRoZSB2YWx1ZSBtYXkgYmVjb21lIGtub3duLlxyXG4gICAqL1xyXG4gIFRlbXA6IFwidGVtcFwiLFxyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSB2YWx1ZSBpcyBub3Qga25vd24uXHJcbiAgICovXHJcbiAgVW5rbm93bjogXCJ1bmtub3duXCIsXHJcbiAgLyoqXHJcbiAgICogdW5zdXBwb3J0ZWQ6IFRoZSBzb3VyY2Ugc3lzdGVtIHdhc24ndCBjYXBhYmxlIG9mIHN1cHBvcnRpbmcgdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIFVuc3VwcG9ydGVkOiBcInVuc3VwcG9ydGVkXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyB0aGUgc2V0IG9mIGNvZGVzIGZvciBpZGVudGlmeWluZyB0aGUgcmVhc29uIHdoeSB0aGUgZXhwZWN0ZWQgcmVzdWx0IGluIE9ic2VydmF0aW9uLnZhbHVlW3hdIGlzIG1pc3NpbmcuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPYnNlcnZhdGlvblZhbHVlYWJzZW50cmVhc29uQ29kZVR5cGUgPSB0eXBlb2YgT2JzZXJ2YXRpb25WYWx1ZWFic2VudHJlYXNvbkNvZGVzW2tleW9mIHR5cGVvZiBPYnNlcnZhdGlvblZhbHVlYWJzZW50cmVhc29uQ29kZXNdO1xyXG4iXX0=