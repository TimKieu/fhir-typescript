// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measurement-principle|3.0.2
/**
 * Different measurement principle supported by the device.
 */
export const MeasurementPrincipleCodes = {
    /**
     * acoustical: Measurement is done using the acoustical principle.
     */
    MSPAcoustical: "acoustical",
    /**
     * biological: Measurement is done using the biological principle.
     */
    MSPBiological: "biological",
    /**
     * chemical: Measurement is done using the chemical principle.
     */
    MSPChemical: "chemical",
    /**
     * electrical: Measurement is done using the electrical principle.
     */
    MSPElectrical: "electrical",
    /**
     * impedance: Measurement is done using the impedance principle.
     */
    MSPImpedance: "impedance",
    /**
     * manual: Measurement is done using the manual principle.
     */
    MSPManual: "manual",
    /**
     * mechanical: Measurement is done using the mechanical principle.
     */
    MSPMechanical: "mechanical",
    /**
     * nuclear: Measurement is done using the nuclear principle.
     */
    MSPNuclear: "nuclear",
    /**
     * optical: Measurement is done using the optical principle.
     */
    MSPOptical: "optical",
    /**
     * other: Measurement principle isn't in the list.
     */
    MSPOther: "other",
    /**
     * thermal: Measurement is done using the thermal principle.
     */
    MSPThermal: "thermal",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZW1lbnRQcmluY2lwbGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVhc3VyZW1lbnRQcmluY2lwbGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywwRUFBMEU7QUFFMUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRztJQUN2Qzs7T0FFRztJQUNILGFBQWEsRUFBRSxZQUFZO0lBQzNCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLFlBQVk7SUFDM0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsVUFBVTtJQUN2Qjs7T0FFRztJQUNILGFBQWEsRUFBRSxZQUFZO0lBQzNCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLFdBQVc7SUFDekI7O09BRUc7SUFDSCxTQUFTLEVBQUUsUUFBUTtJQUNuQjs7T0FFRztJQUNILGFBQWEsRUFBRSxZQUFZO0lBQzNCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFNBQVM7SUFDckI7O09BRUc7SUFDSCxVQUFVLEVBQUUsU0FBUztJQUNyQjs7T0FFRztJQUNILFFBQVEsRUFBRSxPQUFPO0lBQ2pCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFNBQVM7Q0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lYXN1cmVtZW50LXByaW5jaXBsZXwzLjAuMlxyXG5cclxuLyoqXHJcbiAqIERpZmZlcmVudCBtZWFzdXJlbWVudCBwcmluY2lwbGUgc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVhc3VyZW1lbnRQcmluY2lwbGVDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhY291c3RpY2FsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBhY291c3RpY2FsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BBY291c3RpY2FsOiBcImFjb3VzdGljYWxcIixcclxuICAvKipcclxuICAgKiBiaW9sb2dpY2FsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBiaW9sb2dpY2FsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BCaW9sb2dpY2FsOiBcImJpb2xvZ2ljYWxcIixcclxuICAvKipcclxuICAgKiBjaGVtaWNhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgY2hlbWljYWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUENoZW1pY2FsOiBcImNoZW1pY2FsXCIsXHJcbiAgLyoqXHJcbiAgICogZWxlY3RyaWNhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgZWxlY3RyaWNhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQRWxlY3RyaWNhbDogXCJlbGVjdHJpY2FsXCIsXHJcbiAgLyoqXHJcbiAgICogaW1wZWRhbmNlOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBpbXBlZGFuY2UgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUEltcGVkYW5jZTogXCJpbXBlZGFuY2VcIixcclxuICAvKipcclxuICAgKiBtYW51YWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIG1hbnVhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQTWFudWFsOiBcIm1hbnVhbFwiLFxyXG4gIC8qKlxyXG4gICAqIG1lY2hhbmljYWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIG1lY2hhbmljYWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUE1lY2hhbmljYWw6IFwibWVjaGFuaWNhbFwiLFxyXG4gIC8qKlxyXG4gICAqIG51Y2xlYXI6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIG51Y2xlYXIgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUE51Y2xlYXI6IFwibnVjbGVhclwiLFxyXG4gIC8qKlxyXG4gICAqIG9wdGljYWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIG9wdGljYWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUE9wdGljYWw6IFwib3B0aWNhbFwiLFxyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBNZWFzdXJlbWVudCBwcmluY2lwbGUgaXNuJ3QgaW4gdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgTVNQT3RoZXI6IFwib3RoZXJcIixcclxuICAvKipcclxuICAgKiB0aGVybWFsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSB0aGVybWFsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BUaGVybWFsOiBcInRoZXJtYWxcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBEaWZmZXJlbnQgbWVhc3VyZW1lbnQgcHJpbmNpcGxlIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVhc3VyZW1lbnRQcmluY2lwbGVDb2RlVHlwZSA9IHR5cGVvZiBNZWFzdXJlbWVudFByaW5jaXBsZUNvZGVzW2tleW9mIHR5cGVvZiBNZWFzdXJlbWVudFByaW5jaXBsZUNvZGVzXTtcclxuIl19