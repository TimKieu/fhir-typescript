// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-relationshiptypes|3.0.2
/**
 * Codes specifying how two observations are related.
 */
export const ObservationRelationshiptypesCodings = {
    /**
     * derived-from: The target resource (Observation or QuestionnaireResponse) is part of the information from which this observation value is derived. (e.g. calculated anion gap, Apgar score)  NOTE:  "derived-from" is the only logical choice when referencing QuestionnaireResponse.
     */
    DerivedFrom: {
        display: "Derived From",
        code: "derived-from",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * has-member: This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    HasMember: {
        display: "Has Member",
        code: "has-member",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * interfered-by: The value of the target observation interferes (degrades quality, or prevents valid observation) with the semantics of the source observation (e.g. a hemolysis measure target from a plasma potassium measure, which has no value).
     */
    InterferedBy: {
        display: "Interfered By",
        code: "interfered-by",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * qualified-by: The value of the target observation qualifies (refines) the semantics of the source observation (e.g. a lipemia measure target from a plasma measure).
     */
    QualifiedBy: {
        display: "Qualified By",
        code: "qualified-by",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * replaces: This observation replaces a previous observation (i.e. a revised value). The target observation is now obsolete.
     */
    Replaces: {
        display: "Replaces",
        code: "replaces",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * sequel-to: This observation follows the target observation (e.g. timed tests such as Glucose Tolerance Test).
     */
    SequelTo: {
        display: "Sequel To",
        code: "sequel-to",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL09ic2VydmF0aW9uUmVsYXRpb25zaGlwdHlwZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGtGQUFrRjtBQWtDbEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBMEM7SUFDeEY7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9vYnNlcnZhdGlvbi1yZWxhdGlvbnNoaXB0eXBlc3wzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIHNwZWNpZnlpbmcgaG93IHR3byBvYnNlcnZhdGlvbnMgYXJlIHJlbGF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkZXJpdmVkLWZyb206IFRoZSB0YXJnZXQgcmVzb3VyY2UgKE9ic2VydmF0aW9uIG9yIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSkgaXMgcGFydCBvZiB0aGUgaW5mb3JtYXRpb24gZnJvbSB3aGljaCB0aGlzIG9ic2VydmF0aW9uIHZhbHVlIGlzIGRlcml2ZWQuIChlLmcuIGNhbGN1bGF0ZWQgYW5pb24gZ2FwLCBBcGdhciBzY29yZSkgIE5PVEU6ICBcImRlcml2ZWQtZnJvbVwiIGlzIHRoZSBvbmx5IGxvZ2ljYWwgY2hvaWNlIHdoZW4gcmVmZXJlbmNpbmcgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIERlcml2ZWRGcm9tOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGhhcy1tZW1iZXI6IFRoaXMgb2JzZXJ2YXRpb24gaXMgYSBncm91cCBvYnNlcnZhdGlvbiAoZS5nLiBhIGJhdHRlcnksIGEgcGFuZWwgb2YgdGVzdHMsIGEgc2V0IG9mIHZpdGFsIHNpZ24gbWVhc3VyZW1lbnRzKSB0aGF0IGluY2x1ZGVzIHRoZSB0YXJnZXQgYXMgYSBtZW1iZXIgb2YgdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIEhhc01lbWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbnRlcmZlcmVkLWJ5OiBUaGUgdmFsdWUgb2YgdGhlIHRhcmdldCBvYnNlcnZhdGlvbiBpbnRlcmZlcmVzIChkZWdyYWRlcyBxdWFsaXR5LCBvciBwcmV2ZW50cyB2YWxpZCBvYnNlcnZhdGlvbikgd2l0aCB0aGUgc2VtYW50aWNzIG9mIHRoZSBzb3VyY2Ugb2JzZXJ2YXRpb24gKGUuZy4gYSBoZW1vbHlzaXMgbWVhc3VyZSB0YXJnZXQgZnJvbSBhIHBsYXNtYSBwb3Rhc3NpdW0gbWVhc3VyZSwgd2hpY2ggaGFzIG5vIHZhbHVlKS5cclxuICAgKi9cclxuICBJbnRlcmZlcmVkQnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcXVhbGlmaWVkLWJ5OiBUaGUgdmFsdWUgb2YgdGhlIHRhcmdldCBvYnNlcnZhdGlvbiBxdWFsaWZpZXMgKHJlZmluZXMpIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIHNvdXJjZSBvYnNlcnZhdGlvbiAoZS5nLiBhIGxpcGVtaWEgbWVhc3VyZSB0YXJnZXQgZnJvbSBhIHBsYXNtYSBtZWFzdXJlKS5cclxuICAgKi9cclxuICBRdWFsaWZpZWRCeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXBsYWNlczogVGhpcyBvYnNlcnZhdGlvbiByZXBsYWNlcyBhIHByZXZpb3VzIG9ic2VydmF0aW9uIChpLmUuIGEgcmV2aXNlZCB2YWx1ZSkuIFRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gaXMgbm93IG9ic29sZXRlLlxyXG4gICAqL1xyXG4gIFJlcGxhY2VzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNlcXVlbC10bzogVGhpcyBvYnNlcnZhdGlvbiBmb2xsb3dzIHRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gKGUuZy4gdGltZWQgdGVzdHMgc3VjaCBhcyBHbHVjb3NlIFRvbGVyYW5jZSBUZXN0KS5cclxuICAgKi9cclxuICBTZXF1ZWxUbzogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvZGVzIHNwZWNpZnlpbmcgaG93IHR3byBvYnNlcnZhdGlvbnMgYXJlIHJlbGF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGluZ3M6T2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGVyaXZlZC1mcm9tOiBUaGUgdGFyZ2V0IHJlc291cmNlIChPYnNlcnZhdGlvbiBvciBRdWVzdGlvbm5haXJlUmVzcG9uc2UpIGlzIHBhcnQgb2YgdGhlIGluZm9ybWF0aW9uIGZyb20gd2hpY2ggdGhpcyBvYnNlcnZhdGlvbiB2YWx1ZSBpcyBkZXJpdmVkLiAoZS5nLiBjYWxjdWxhdGVkIGFuaW9uIGdhcCwgQXBnYXIgc2NvcmUpICBOT1RFOiAgXCJkZXJpdmVkLWZyb21cIiBpcyB0aGUgb25seSBsb2dpY2FsIGNob2ljZSB3aGVuIHJlZmVyZW5jaW5nIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5cclxuICAgKi9cclxuICBEZXJpdmVkRnJvbToge1xyXG4gICAgZGlzcGxheTogXCJEZXJpdmVkIEZyb21cIixcclxuICAgIGNvZGU6IFwiZGVyaXZlZC1mcm9tXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1yZWxhdGlvbnNoaXB0eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGFzLW1lbWJlcjogVGhpcyBvYnNlcnZhdGlvbiBpcyBhIGdyb3VwIG9ic2VydmF0aW9uIChlLmcuIGEgYmF0dGVyeSwgYSBwYW5lbCBvZiB0ZXN0cywgYSBzZXQgb2Ygdml0YWwgc2lnbiBtZWFzdXJlbWVudHMpIHRoYXQgaW5jbHVkZXMgdGhlIHRhcmdldCBhcyBhIG1lbWJlciBvZiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgSGFzTWVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkhhcyBNZW1iZXJcIixcclxuICAgIGNvZGU6IFwiaGFzLW1lbWJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tcmVsYXRpb25zaGlwdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGludGVyZmVyZWQtYnk6IFRoZSB2YWx1ZSBvZiB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIGludGVyZmVyZXMgKGRlZ3JhZGVzIHF1YWxpdHksIG9yIHByZXZlbnRzIHZhbGlkIG9ic2VydmF0aW9uKSB3aXRoIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIHNvdXJjZSBvYnNlcnZhdGlvbiAoZS5nLiBhIGhlbW9seXNpcyBtZWFzdXJlIHRhcmdldCBmcm9tIGEgcGxhc21hIHBvdGFzc2l1bSBtZWFzdXJlLCB3aGljaCBoYXMgbm8gdmFsdWUpLlxyXG4gICAqL1xyXG4gIEludGVyZmVyZWRCeToge1xyXG4gICAgZGlzcGxheTogXCJJbnRlcmZlcmVkIEJ5XCIsXHJcbiAgICBjb2RlOiBcImludGVyZmVyZWQtYnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXJlbGF0aW9uc2hpcHR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBxdWFsaWZpZWQtYnk6IFRoZSB2YWx1ZSBvZiB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIHF1YWxpZmllcyAocmVmaW5lcykgdGhlIHNlbWFudGljcyBvZiB0aGUgc291cmNlIG9ic2VydmF0aW9uIChlLmcuIGEgbGlwZW1pYSBtZWFzdXJlIHRhcmdldCBmcm9tIGEgcGxhc21hIG1lYXN1cmUpLlxyXG4gICAqL1xyXG4gIFF1YWxpZmllZEJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlF1YWxpZmllZCBCeVwiLFxyXG4gICAgY29kZTogXCJxdWFsaWZpZWQtYnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXJlbGF0aW9uc2hpcHR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXBsYWNlczogVGhpcyBvYnNlcnZhdGlvbiByZXBsYWNlcyBhIHByZXZpb3VzIG9ic2VydmF0aW9uIChpLmUuIGEgcmV2aXNlZCB2YWx1ZSkuIFRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gaXMgbm93IG9ic29sZXRlLlxyXG4gICAqL1xyXG4gIFJlcGxhY2VzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlcGxhY2VzXCIsXHJcbiAgICBjb2RlOiBcInJlcGxhY2VzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1yZWxhdGlvbnNoaXB0eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc2VxdWVsLXRvOiBUaGlzIG9ic2VydmF0aW9uIGZvbGxvd3MgdGhlIHRhcmdldCBvYnNlcnZhdGlvbiAoZS5nLiB0aW1lZCB0ZXN0cyBzdWNoIGFzIEdsdWNvc2UgVG9sZXJhbmNlIFRlc3QpLlxyXG4gICAqL1xyXG4gIFNlcXVlbFRvOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNlcXVlbCBUb1wiLFxyXG4gICAgY29kZTogXCJzZXF1ZWwtdG9cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXJlbGF0aW9uc2hpcHR5cGVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19