// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/history-not-done-reason|3.0.2
/**
 * Codes describing the reason why a family member history was not done.
 */
export const HistoryNotDoneReasonCodings = {
    /**
     * deferred: Patient does not have the information now, but can provide the information at a later date.
     */
    Deferred: {
        display: "Deferred",
        code: "deferred",
        system: "http://hl7.org/fhir/history-not-done-reason",
    },
    /**
     * subject-unknown: Patient does not know the subject, e.g. the biological parent of an adopted patient.
     */
    SubjectUnknown: {
        display: "Subject Unknown",
        code: "subject-unknown",
        system: "http://hl7.org/fhir/history-not-done-reason",
    },
    /**
     * unable-to-obtain: Information cannot be obtained; e.g. unconscious patient
     */
    UnableToObtain: {
        display: "Unable To Obtain",
        code: "unable-to-obtain",
        system: "http://hl7.org/fhir/history-not-done-reason",
    },
    /**
     * withheld: The patient withheld or refused to share the information.
     */
    InformationWithheld: {
        display: "Information Withheld",
        code: "withheld",
        system: "http://hl7.org/fhir/history-not-done-reason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeU5vdERvbmVSZWFzb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9IaXN0b3J5Tm90RG9uZVJlYXNvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNEVBQTRFO0FBMEI1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFrQztJQUN4RTs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSw2Q0FBNkM7S0FDdEQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsNkNBQTZDO0tBQ3REO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLDZDQUE2QztLQUN0RDtJQUNEOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUU7UUFDbkIsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsNkNBQTZDO0tBQ3REO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9oaXN0b3J5LW5vdC1kb25lLXJlYXNvbnwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGRlc2NyaWJpbmcgdGhlIHJlYXNvbiB3aHkgYSBmYW1pbHkgbWVtYmVyIGhpc3Rvcnkgd2FzIG5vdCBkb25lLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSGlzdG9yeU5vdERvbmVSZWFzb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRlZmVycmVkOiBQYXRpZW50IGRvZXMgbm90IGhhdmUgdGhlIGluZm9ybWF0aW9uIG5vdywgYnV0IGNhbiBwcm92aWRlIHRoZSBpbmZvcm1hdGlvbiBhdCBhIGxhdGVyIGRhdGUuXHJcbiAgICovXHJcbiAgRGVmZXJyZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3ViamVjdC11bmtub3duOiBQYXRpZW50IGRvZXMgbm90IGtub3cgdGhlIHN1YmplY3QsIGUuZy4gdGhlIGJpb2xvZ2ljYWwgcGFyZW50IG9mIGFuIGFkb3B0ZWQgcGF0aWVudC5cclxuICAgKi9cclxuICBTdWJqZWN0VW5rbm93bjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bmFibGUtdG8tb2J0YWluOiBJbmZvcm1hdGlvbiBjYW5ub3QgYmUgb2J0YWluZWQ7IGUuZy4gdW5jb25zY2lvdXMgcGF0aWVudFxyXG4gICAqL1xyXG4gIFVuYWJsZVRvT2J0YWluOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHdpdGhoZWxkOiBUaGUgcGF0aWVudCB3aXRoaGVsZCBvciByZWZ1c2VkIHRvIHNoYXJlIHRoZSBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBJbmZvcm1hdGlvbldpdGhoZWxkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ29kZXMgZGVzY3JpYmluZyB0aGUgcmVhc29uIHdoeSBhIGZhbWlseSBtZW1iZXIgaGlzdG9yeSB3YXMgbm90IGRvbmUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSGlzdG9yeU5vdERvbmVSZWFzb25Db2RpbmdzOkhpc3RvcnlOb3REb25lUmVhc29uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkZWZlcnJlZDogUGF0aWVudCBkb2VzIG5vdCBoYXZlIHRoZSBpbmZvcm1hdGlvbiBub3csIGJ1dCBjYW4gcHJvdmlkZSB0aGUgaW5mb3JtYXRpb24gYXQgYSBsYXRlciBkYXRlLlxyXG4gICAqL1xyXG4gIERlZmVycmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRlZmVycmVkXCIsXHJcbiAgICBjb2RlOiBcImRlZmVycmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9oaXN0b3J5LW5vdC1kb25lLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3ViamVjdC11bmtub3duOiBQYXRpZW50IGRvZXMgbm90IGtub3cgdGhlIHN1YmplY3QsIGUuZy4gdGhlIGJpb2xvZ2ljYWwgcGFyZW50IG9mIGFuIGFkb3B0ZWQgcGF0aWVudC5cclxuICAgKi9cclxuICBTdWJqZWN0VW5rbm93bjoge1xyXG4gICAgZGlzcGxheTogXCJTdWJqZWN0IFVua25vd25cIixcclxuICAgIGNvZGU6IFwic3ViamVjdC11bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9oaXN0b3J5LW5vdC1kb25lLXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5hYmxlLXRvLW9idGFpbjogSW5mb3JtYXRpb24gY2Fubm90IGJlIG9idGFpbmVkOyBlLmcuIHVuY29uc2Npb3VzIHBhdGllbnRcclxuICAgKi9cclxuICBVbmFibGVUb09idGFpbjoge1xyXG4gICAgZGlzcGxheTogXCJVbmFibGUgVG8gT2J0YWluXCIsXHJcbiAgICBjb2RlOiBcInVuYWJsZS10by1vYnRhaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2hpc3Rvcnktbm90LWRvbmUtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3aXRoaGVsZDogVGhlIHBhdGllbnQgd2l0aGhlbGQgb3IgcmVmdXNlZCB0byBzaGFyZSB0aGUgaW5mb3JtYXRpb24uXHJcbiAgICovXHJcbiAgSW5mb3JtYXRpb25XaXRoaGVsZDoge1xyXG4gICAgZGlzcGxheTogXCJJbmZvcm1hdGlvbiBXaXRoaGVsZFwiLFxyXG4gICAgY29kZTogXCJ3aXRoaGVsZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaGlzdG9yeS1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=