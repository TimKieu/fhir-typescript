// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-interpretation|3.0.2
/**
 * This value set defines the set of codes that can be used to indicate the meaning/use of a reference range.
 */
export const ObservationInterpretationCodes = {
    /**
     * Code: &lt;
     */
    OffScaleLow: "<",
    /**
     * Code: &gt;
     */
    OffScaleHigh: ">",
    /**
     * Code: A
     */
    Abnormal: "A",
    /**
     * Code: AA
     */
    CriticallyAbnormal: "AA",
    /**
     * Code: AC
     */
    AntiComplementarySubstancesPresent: "AC",
    /**
     * Code: B
     */
    Better: "B",
    /**
     * Code: D
     */
    SignificantChangeDown: "D",
    /**
     * Code: DET
     */
    Detected: "DET",
    /**
     * Code: H
     */
    High: "H",
    /**
     * Code: HH
     */
    CriticallyHigh: "HH",
    /**
     * Code: HM
     */
    HoldForMedicalReview: "HM",
    /**
     * Code: HU
     */
    VeryHigh: "HU",
    /**
     * Code: I
     */
    Intermediate: "I",
    /**
     * Code: IE
     */
    InsufficientEvidence: "IE",
    /**
     * Code: IND
     */
    Indeterminate: "IND",
    /**
     * Code: L
     */
    Low: "L",
    /**
     * Code: LL
     */
    CriticallyLow: "LL",
    /**
     * Code: LU
     */
    VeryLow: "LU",
    /**
     * Code: MS
     */
    ModeratelySusceptibleIndicatesForMicrobiologySusceptibilitiesOnly: "MS",
    /**
     * Code: N
     */
    Normal: "N",
    /**
     * Code: ND
     */
    NotDetected: "ND",
    /**
     * Code: NEG
     */
    Negative: "NEG",
    /**
     * Code: NR
     */
    NonReactive: "NR",
    /**
     * Code: NS
     */
    NonSusceptible: "NS",
    /**
     * Code: null
     */
    NoRangeDefinedOrNormalRangesDonQuoteTApply: "null",
    /**
     * Code: OBX
     */
    InterpretationQualifiersInSeparateOBXSegments: "OBX",
    /**
     * Code: POS
     */
    Positive: "POS",
    /**
     * Code: QCF
     */
    QualityControlFailure: "QCF",
    /**
     * Code: R
     */
    Resistant: "R",
    /**
     * Code: RR
     */
    Reactive: "RR",
    /**
     * Code: S
     */
    Susceptible: "S",
    /**
     * Code: SDD
     */
    SusceptibleDoseDependent: "SDD",
    /**
     * Code: SYN-R
     */
    SynergyResistant: "SYN-R",
    /**
     * Code: SYN-S
     */
    SynergySusceptible: "SYN-S",
    /**
     * Code: TOX
     */
    CytotoxicSubstancePresent: "TOX",
    /**
     * Code: U
     */
    SignificantChangeUp: "U",
    /**
     * Code: VS
     */
    VerySusceptibleIndicatesForMicrobiologySusceptibilitiesOnly: "VS",
    /**
     * Code: W
     */
    Worse: "W",
    /**
     * Code: WR
     */
    WeaklyReactive: "WR",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9PYnNlcnZhdGlvbkludGVycHJldGF0aW9uQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBRS9FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUc7SUFDNUM7O09BRUc7SUFDSCxXQUFXLEVBQUUsR0FBRztJQUNoQjs7T0FFRztJQUNILFlBQVksRUFBRSxHQUFHO0lBQ2pCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLEdBQUc7SUFDYjs7T0FFRztJQUNILGtCQUFrQixFQUFFLElBQUk7SUFDeEI7O09BRUc7SUFDSCxrQ0FBa0MsRUFBRSxJQUFJO0lBQ3hDOztPQUVHO0lBQ0gsTUFBTSxFQUFFLEdBQUc7SUFDWDs7T0FFRztJQUNILHFCQUFxQixFQUFFLEdBQUc7SUFDMUI7O09BRUc7SUFDSCxRQUFRLEVBQUUsS0FBSztJQUNmOztPQUVHO0lBQ0gsSUFBSSxFQUFFLEdBQUc7SUFDVDs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJO0lBQ3BCOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUUsSUFBSTtJQUMxQjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJO0lBQ2Q7O09BRUc7SUFDSCxZQUFZLEVBQUUsR0FBRztJQUNqQjs7T0FFRztJQUNILG9CQUFvQixFQUFFLElBQUk7SUFDMUI7O09BRUc7SUFDSCxhQUFhLEVBQUUsS0FBSztJQUNwQjs7T0FFRztJQUNILEdBQUcsRUFBRSxHQUFHO0lBQ1I7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSTtJQUNuQjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJO0lBQ2I7O09BRUc7SUFDSCxpRUFBaUUsRUFBRSxJQUFJO0lBQ3ZFOztPQUVHO0lBQ0gsTUFBTSxFQUFFLEdBQUc7SUFDWDs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJO0lBQ2pCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLEtBQUs7SUFDZjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJO0lBQ2pCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUk7SUFDcEI7O09BRUc7SUFDSCwwQ0FBMEMsRUFBRSxNQUFNO0lBQ2xEOztPQUVHO0lBQ0gsNkNBQTZDLEVBQUUsS0FBSztJQUNwRDs7T0FFRztJQUNILFFBQVEsRUFBRSxLQUFLO0lBQ2Y7O09BRUc7SUFDSCxxQkFBcUIsRUFBRSxLQUFLO0lBQzVCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLEdBQUc7SUFDZDs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJO0lBQ2Q7O09BRUc7SUFDSCxXQUFXLEVBQUUsR0FBRztJQUNoQjs7T0FFRztJQUNILHdCQUF3QixFQUFFLEtBQUs7SUFDL0I7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsT0FBTztJQUMzQjs7T0FFRztJQUNILHlCQUF5QixFQUFFLEtBQUs7SUFDaEM7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxHQUFHO0lBQ3hCOztPQUVHO0lBQ0gsMkRBQTJELEVBQUUsSUFBSTtJQUNqRTs7T0FFRztJQUNILEtBQUssRUFBRSxHQUFHO0lBQ1Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSTtDQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvb2JzZXJ2YXRpb24taW50ZXJwcmV0YXRpb258My4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIHRoZSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgbWVhbmluZy91c2Ugb2YgYSByZWZlcmVuY2UgcmFuZ2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6ICZsdDtcclxuICAgKi9cclxuICBPZmZTY2FsZUxvdzogXCI8XCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogJmd0O1xyXG4gICAqL1xyXG4gIE9mZlNjYWxlSGlnaDogXCI+XCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQVxyXG4gICAqL1xyXG4gIEFibm9ybWFsOiBcIkFcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBBQVxyXG4gICAqL1xyXG4gIENyaXRpY2FsbHlBYm5vcm1hbDogXCJBQVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFDXHJcbiAgICovXHJcbiAgQW50aUNvbXBsZW1lbnRhcnlTdWJzdGFuY2VzUHJlc2VudDogXCJBQ1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJcclxuICAgKi9cclxuICBCZXR0ZXI6IFwiQlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERcclxuICAgKi9cclxuICBTaWduaWZpY2FudENoYW5nZURvd246IFwiRFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERFVFxyXG4gICAqL1xyXG4gIERldGVjdGVkOiBcIkRFVFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhcclxuICAgKi9cclxuICBIaWdoOiBcIkhcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBISFxyXG4gICAqL1xyXG4gIENyaXRpY2FsbHlIaWdoOiBcIkhIXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSE1cclxuICAgKi9cclxuICBIb2xkRm9yTWVkaWNhbFJldmlldzogXCJITVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhVXHJcbiAgICovXHJcbiAgVmVyeUhpZ2g6IFwiSFVcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBJXHJcbiAgICovXHJcbiAgSW50ZXJtZWRpYXRlOiBcIklcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBJRVxyXG4gICAqL1xyXG4gIEluc3VmZmljaWVudEV2aWRlbmNlOiBcIklFXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSU5EXHJcbiAgICovXHJcbiAgSW5kZXRlcm1pbmF0ZTogXCJJTkRcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBMXHJcbiAgICovXHJcbiAgTG93OiBcIkxcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBMTFxyXG4gICAqL1xyXG4gIENyaXRpY2FsbHlMb3c6IFwiTExcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBMVVxyXG4gICAqL1xyXG4gIFZlcnlMb3c6IFwiTFVcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBNU1xyXG4gICAqL1xyXG4gIE1vZGVyYXRlbHlTdXNjZXB0aWJsZUluZGljYXRlc0Zvck1pY3JvYmlvbG9neVN1c2NlcHRpYmlsaXRpZXNPbmx5OiBcIk1TXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTlxyXG4gICAqL1xyXG4gIE5vcm1hbDogXCJOXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTkRcclxuICAgKi9cclxuICBOb3REZXRlY3RlZDogXCJORFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5FR1xyXG4gICAqL1xyXG4gIE5lZ2F0aXZlOiBcIk5FR1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5SXHJcbiAgICovXHJcbiAgTm9uUmVhY3RpdmU6IFwiTlJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBOU1xyXG4gICAqL1xyXG4gIE5vblN1c2NlcHRpYmxlOiBcIk5TXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogbnVsbFxyXG4gICAqL1xyXG4gIE5vUmFuZ2VEZWZpbmVkT3JOb3JtYWxSYW5nZXNEb25RdW90ZVRBcHBseTogXCJudWxsXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogT0JYXHJcbiAgICovXHJcbiAgSW50ZXJwcmV0YXRpb25RdWFsaWZpZXJzSW5TZXBhcmF0ZU9CWFNlZ21lbnRzOiBcIk9CWFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBPU1xyXG4gICAqL1xyXG4gIFBvc2l0aXZlOiBcIlBPU1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFFDRlxyXG4gICAqL1xyXG4gIFF1YWxpdHlDb250cm9sRmFpbHVyZTogXCJRQ0ZcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBSXHJcbiAgICovXHJcbiAgUmVzaXN0YW50OiBcIlJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBSUlxyXG4gICAqL1xyXG4gIFJlYWN0aXZlOiBcIlJSXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1xyXG4gICAqL1xyXG4gIFN1c2NlcHRpYmxlOiBcIlNcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBTRERcclxuICAgKi9cclxuICBTdXNjZXB0aWJsZURvc2VEZXBlbmRlbnQ6IFwiU0REXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1lOLVJcclxuICAgKi9cclxuICBTeW5lcmd5UmVzaXN0YW50OiBcIlNZTi1SXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1lOLVNcclxuICAgKi9cclxuICBTeW5lcmd5U3VzY2VwdGlibGU6IFwiU1lOLVNcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBUT1hcclxuICAgKi9cclxuICBDeXRvdG94aWNTdWJzdGFuY2VQcmVzZW50OiBcIlRPWFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFVcclxuICAgKi9cclxuICBTaWduaWZpY2FudENoYW5nZVVwOiBcIlVcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBWU1xyXG4gICAqL1xyXG4gIFZlcnlTdXNjZXB0aWJsZUluZGljYXRlc0Zvck1pY3JvYmlvbG9neVN1c2NlcHRpYmlsaXRpZXNPbmx5OiBcIlZTXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogV1xyXG4gICAqL1xyXG4gIFdvcnNlOiBcIldcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBXUlxyXG4gICAqL1xyXG4gIFdlYWtseVJlYWN0aXZlOiBcIldSXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyB0aGUgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIG1lYW5pbmcvdXNlIG9mIGEgcmVmZXJlbmNlIHJhbmdlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkNvZGVUeXBlID0gdHlwZW9mIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25Db2Rlc1trZXlvZiB0eXBlb2YgT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkNvZGVzXTtcclxuIl19