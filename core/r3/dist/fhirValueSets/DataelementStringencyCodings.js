// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/dataelement-stringency|3.0.2
/**
 * Indicates the degree of precision of the data element definition.
 */
export const DataelementStringencyCodings = {
    /**
     * comparable: The data element is sufficiently well-constrained that multiple pieces of data captured according to the constraints of the data element will be comparable (though in some cases, a degree of automated conversion/normalization may be required).
     */
    Comparable: {
        display: "Comparable",
        code: "comparable",
        system: "http://hl7.org/fhir/dataelement-stringency",
    },
    /**
     * convertable: The data element allows multiple units of measure that are convertable between each other (e.g. inches and centimeters) and/or allows data to be captured in multiple value sets for which a known mapping exists allowing conversion of meaning.
     */
    Convertable: {
        display: "Convertable",
        code: "convertable",
        system: "http://hl7.org/fhir/dataelement-stringency",
    },
    /**
     * equivalent: The data element allows multiple units of measure having equivalent meaning; e.g. "cc" (cubic centimeter) and "mL" (milliliter).
     */
    Equivalent: {
        display: "Equivalent",
        code: "equivalent",
        system: "http://hl7.org/fhir/dataelement-stringency",
    },
    /**
     * flexible: The data element is unconstrained in units, choice of data types and/or choice of vocabulary such that automated comparison of data captured using the data element is not possible.
     */
    Flexible: {
        display: "Flexible",
        code: "flexible",
        system: "http://hl7.org/fhir/dataelement-stringency",
    },
    /**
     * fully-specified: The data element is fully specified down to a single value set, single unit of measure, single data type, etc.  Multiple pieces of data associated with this data element are fully comparable.
     */
    FullySpecified: {
        display: "Fully Specified",
        code: "fully-specified",
        system: "http://hl7.org/fhir/dataelement-stringency",
    },
    /**
     * scaleable: A convertable data element where unit conversions are different only by a power of 10; e.g. g, mg, kg.
     */
    Scaleable: {
        display: "Scaleable",
        code: "scaleable",
        system: "http://hl7.org/fhir/dataelement-stringency",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YWVsZW1lbnRTdHJpbmdlbmN5Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRGF0YWVsZW1lbnRTdHJpbmdlbmN5Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywyRUFBMkU7QUFrQzNFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQW1DO0lBQzFFOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2RhdGFlbGVtZW50LXN0cmluZ2VuY3l8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhlIGRlZ3JlZSBvZiBwcmVjaXNpb24gb2YgdGhlIGRhdGEgZWxlbWVudCBkZWZpbml0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRGF0YWVsZW1lbnRTdHJpbmdlbmN5Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb21wYXJhYmxlOiBUaGUgZGF0YSBlbGVtZW50IGlzIHN1ZmZpY2llbnRseSB3ZWxsLWNvbnN0cmFpbmVkIHRoYXQgbXVsdGlwbGUgcGllY2VzIG9mIGRhdGEgY2FwdHVyZWQgYWNjb3JkaW5nIHRvIHRoZSBjb25zdHJhaW50cyBvZiB0aGUgZGF0YSBlbGVtZW50IHdpbGwgYmUgY29tcGFyYWJsZSAodGhvdWdoIGluIHNvbWUgY2FzZXMsIGEgZGVncmVlIG9mIGF1dG9tYXRlZCBjb252ZXJzaW9uL25vcm1hbGl6YXRpb24gbWF5IGJlIHJlcXVpcmVkKS5cclxuICAgKi9cclxuICBDb21wYXJhYmxlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbnZlcnRhYmxlOiBUaGUgZGF0YSBlbGVtZW50IGFsbG93cyBtdWx0aXBsZSB1bml0cyBvZiBtZWFzdXJlIHRoYXQgYXJlIGNvbnZlcnRhYmxlIGJldHdlZW4gZWFjaCBvdGhlciAoZS5nLiBpbmNoZXMgYW5kIGNlbnRpbWV0ZXJzKSBhbmQvb3IgYWxsb3dzIGRhdGEgdG8gYmUgY2FwdHVyZWQgaW4gbXVsdGlwbGUgdmFsdWUgc2V0cyBmb3Igd2hpY2ggYSBrbm93biBtYXBwaW5nIGV4aXN0cyBhbGxvd2luZyBjb252ZXJzaW9uIG9mIG1lYW5pbmcuXHJcbiAgICovXHJcbiAgQ29udmVydGFibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZXF1aXZhbGVudDogVGhlIGRhdGEgZWxlbWVudCBhbGxvd3MgbXVsdGlwbGUgdW5pdHMgb2YgbWVhc3VyZSBoYXZpbmcgZXF1aXZhbGVudCBtZWFuaW5nOyBlLmcuIFwiY2NcIiAoY3ViaWMgY2VudGltZXRlcikgYW5kIFwibUxcIiAobWlsbGlsaXRlcikuXHJcbiAgICovXHJcbiAgRXF1aXZhbGVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBmbGV4aWJsZTogVGhlIGRhdGEgZWxlbWVudCBpcyB1bmNvbnN0cmFpbmVkIGluIHVuaXRzLCBjaG9pY2Ugb2YgZGF0YSB0eXBlcyBhbmQvb3IgY2hvaWNlIG9mIHZvY2FidWxhcnkgc3VjaCB0aGF0IGF1dG9tYXRlZCBjb21wYXJpc29uIG9mIGRhdGEgY2FwdHVyZWQgdXNpbmcgdGhlIGRhdGEgZWxlbWVudCBpcyBub3QgcG9zc2libGUuXHJcbiAgICovXHJcbiAgRmxleGlibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZnVsbHktc3BlY2lmaWVkOiBUaGUgZGF0YSBlbGVtZW50IGlzIGZ1bGx5IHNwZWNpZmllZCBkb3duIHRvIGEgc2luZ2xlIHZhbHVlIHNldCwgc2luZ2xlIHVuaXQgb2YgbWVhc3VyZSwgc2luZ2xlIGRhdGEgdHlwZSwgZXRjLiAgTXVsdGlwbGUgcGllY2VzIG9mIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGF0YSBlbGVtZW50IGFyZSBmdWxseSBjb21wYXJhYmxlLlxyXG4gICAqL1xyXG4gIEZ1bGx5U3BlY2lmaWVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNjYWxlYWJsZTogQSBjb252ZXJ0YWJsZSBkYXRhIGVsZW1lbnQgd2hlcmUgdW5pdCBjb252ZXJzaW9ucyBhcmUgZGlmZmVyZW50IG9ubHkgYnkgYSBwb3dlciBvZiAxMDsgZS5nLiBnLCBtZywga2cuXHJcbiAgICovXHJcbiAgU2NhbGVhYmxlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHRoZSBkZWdyZWUgb2YgcHJlY2lzaW9uIG9mIHRoZSBkYXRhIGVsZW1lbnQgZGVmaW5pdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBEYXRhZWxlbWVudFN0cmluZ2VuY3lDb2RpbmdzOkRhdGFlbGVtZW50U3RyaW5nZW5jeUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcGFyYWJsZTogVGhlIGRhdGEgZWxlbWVudCBpcyBzdWZmaWNpZW50bHkgd2VsbC1jb25zdHJhaW5lZCB0aGF0IG11bHRpcGxlIHBpZWNlcyBvZiBkYXRhIGNhcHR1cmVkIGFjY29yZGluZyB0byB0aGUgY29uc3RyYWludHMgb2YgdGhlIGRhdGEgZWxlbWVudCB3aWxsIGJlIGNvbXBhcmFibGUgKHRob3VnaCBpbiBzb21lIGNhc2VzLCBhIGRlZ3JlZSBvZiBhdXRvbWF0ZWQgY29udmVyc2lvbi9ub3JtYWxpemF0aW9uIG1heSBiZSByZXF1aXJlZCkuXHJcbiAgICovXHJcbiAgQ29tcGFyYWJsZToge1xyXG4gICAgZGlzcGxheTogXCJDb21wYXJhYmxlXCIsXHJcbiAgICBjb2RlOiBcImNvbXBhcmFibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RhdGFlbGVtZW50LXN0cmluZ2VuY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbnZlcnRhYmxlOiBUaGUgZGF0YSBlbGVtZW50IGFsbG93cyBtdWx0aXBsZSB1bml0cyBvZiBtZWFzdXJlIHRoYXQgYXJlIGNvbnZlcnRhYmxlIGJldHdlZW4gZWFjaCBvdGhlciAoZS5nLiBpbmNoZXMgYW5kIGNlbnRpbWV0ZXJzKSBhbmQvb3IgYWxsb3dzIGRhdGEgdG8gYmUgY2FwdHVyZWQgaW4gbXVsdGlwbGUgdmFsdWUgc2V0cyBmb3Igd2hpY2ggYSBrbm93biBtYXBwaW5nIGV4aXN0cyBhbGxvd2luZyBjb252ZXJzaW9uIG9mIG1lYW5pbmcuXHJcbiAgICovXHJcbiAgQ29udmVydGFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29udmVydGFibGVcIixcclxuICAgIGNvZGU6IFwiY29udmVydGFibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RhdGFlbGVtZW50LXN0cmluZ2VuY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVxdWl2YWxlbnQ6IFRoZSBkYXRhIGVsZW1lbnQgYWxsb3dzIG11bHRpcGxlIHVuaXRzIG9mIG1lYXN1cmUgaGF2aW5nIGVxdWl2YWxlbnQgbWVhbmluZzsgZS5nLiBcImNjXCIgKGN1YmljIGNlbnRpbWV0ZXIpIGFuZCBcIm1MXCIgKG1pbGxpbGl0ZXIpLlxyXG4gICAqL1xyXG4gIEVxdWl2YWxlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRXF1aXZhbGVudFwiLFxyXG4gICAgY29kZTogXCJlcXVpdmFsZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kYXRhZWxlbWVudC1zdHJpbmdlbmN5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmbGV4aWJsZTogVGhlIGRhdGEgZWxlbWVudCBpcyB1bmNvbnN0cmFpbmVkIGluIHVuaXRzLCBjaG9pY2Ugb2YgZGF0YSB0eXBlcyBhbmQvb3IgY2hvaWNlIG9mIHZvY2FidWxhcnkgc3VjaCB0aGF0IGF1dG9tYXRlZCBjb21wYXJpc29uIG9mIGRhdGEgY2FwdHVyZWQgdXNpbmcgdGhlIGRhdGEgZWxlbWVudCBpcyBub3QgcG9zc2libGUuXHJcbiAgICovXHJcbiAgRmxleGlibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiRmxleGlibGVcIixcclxuICAgIGNvZGU6IFwiZmxleGlibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RhdGFlbGVtZW50LXN0cmluZ2VuY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZ1bGx5LXNwZWNpZmllZDogVGhlIGRhdGEgZWxlbWVudCBpcyBmdWxseSBzcGVjaWZpZWQgZG93biB0byBhIHNpbmdsZSB2YWx1ZSBzZXQsIHNpbmdsZSB1bml0IG9mIG1lYXN1cmUsIHNpbmdsZSBkYXRhIHR5cGUsIGV0Yy4gIE11bHRpcGxlIHBpZWNlcyBvZiBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRhdGEgZWxlbWVudCBhcmUgZnVsbHkgY29tcGFyYWJsZS5cclxuICAgKi9cclxuICBGdWxseVNwZWNpZmllZDoge1xyXG4gICAgZGlzcGxheTogXCJGdWxseSBTcGVjaWZpZWRcIixcclxuICAgIGNvZGU6IFwiZnVsbHktc3BlY2lmaWVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kYXRhZWxlbWVudC1zdHJpbmdlbmN5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzY2FsZWFibGU6IEEgY29udmVydGFibGUgZGF0YSBlbGVtZW50IHdoZXJlIHVuaXQgY29udmVyc2lvbnMgYXJlIGRpZmZlcmVudCBvbmx5IGJ5IGEgcG93ZXIgb2YgMTA7IGUuZy4gZywgbWcsIGtnLlxyXG4gICAqL1xyXG4gIFNjYWxlYWJsZToge1xyXG4gICAgZGlzcGxheTogXCJTY2FsZWFibGVcIixcclxuICAgIGNvZGU6IFwic2NhbGVhYmxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kYXRhZWxlbWVudC1zdHJpbmdlbmN5XCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19