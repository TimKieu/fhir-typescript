// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/data-types|3.0.2
/**
 * The type of an element - one of the FHIR data types.
 */
export const DataTypesCodings = {
    /**
     * Address: An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
     */
    Address: {
        display: "Address",
        code: "Address",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Age: A duration of time during which an organism (or a process) has existed.
     */
    Age: {
        display: "Age",
        code: "Age",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Annotation: A  text note which also  contains information about who made the statement and when.
     */
    Annotation: {
        display: "Annotation",
        code: "Annotation",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Attachment: For referring to data content defined in other formats.
     */
    Attachment: {
        display: "Attachment",
        code: "Attachment",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * BackboneElement: Base definition for all elements that are defined inside a resource - but not those in a data type.
     */
    BackboneElement: {
        display: "BackboneElement",
        code: "BackboneElement",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * base64Binary: A stream of bytes
     */
    Base64Binary: {
        display: "base64Binary",
        code: "base64Binary",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * boolean: Value of "true" or "false"
     */
    VALBoolean: {
        display: "boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * code: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    Code: {
        display: "code",
        code: "code",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * CodeableConcept: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    CodeableConcept: {
        display: "CodeableConcept",
        code: "CodeableConcept",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Coding: A reference to a code defined by a terminology system.
     */
    Coding: {
        display: "Coding",
        code: "Coding",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * ContactDetail: Specifies contact information for a person or organization.
     */
    ContactDetail: {
        display: "ContactDetail",
        code: "ContactDetail",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * ContactPoint: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    ContactPoint: {
        display: "ContactPoint",
        code: "ContactPoint",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Contributor: A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
     */
    Contributor: {
        display: "Contributor",
        code: "Contributor",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Count: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    Count: {
        display: "Count",
        code: "Count",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * DataRequirement: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
     */
    DataRequirement: {
        display: "DataRequirement",
        code: "DataRequirement",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * date: A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    Date: {
        display: "date",
        code: "date",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * dateTime: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    DateTime: {
        display: "dateTime",
        code: "dateTime",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * decimal: A rational number with implicit precision
     */
    Decimal: {
        display: "decimal",
        code: "decimal",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Distance: A length - a value with a unit that is a physical distance.
     */
    Distance: {
        display: "Distance",
        code: "Distance",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Dosage: Indicates how the medication is/was taken or should be taken by the patient.
     */
    Dosage: {
        display: "Dosage",
        code: "Dosage",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Duration: A length of time.
     */
    Duration: {
        display: "Duration",
        code: "Duration",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Element: Base definition for all elements in a resource.
     */
    VALElement: {
        display: "Element",
        code: "Element",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * ElementDefinition: Captures constraints on each element within the resource, profile, or extension.
     */
    ElementDefinition: {
        display: "ElementDefinition",
        code: "ElementDefinition",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Extension: Optional Extension Element - found in all resources.
     */
    Extension: {
        display: "Extension",
        code: "Extension",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * HumanName: A human's name with the ability to identify parts and usage.
     */
    HumanName: {
        display: "HumanName",
        code: "HumanName",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * id: Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    Id: {
        display: "id",
        code: "id",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Identifier: A technical identifier - identifies some entity uniquely and unambiguously.
     */
    Identifier: {
        display: "Identifier",
        code: "Identifier",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * instant: An instant in time - known at least to the second
     */
    Instant: {
        display: "instant",
        code: "instant",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * integer: A whole number
     */
    Integer: {
        display: "integer",
        code: "integer",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * markdown: A string that may contain markdown syntax for optional processing by a mark down presentation engine
     */
    Markdown: {
        display: "markdown",
        code: "markdown",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Meta: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
     */
    Meta: {
        display: "Meta",
        code: "Meta",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Money: An amount of economic utility in some recognized currency.
     */
    Money: {
        display: "Money",
        code: "Money",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Narrative: A human-readable formatted text, including images.
     */
    Narrative: {
        display: "Narrative",
        code: "Narrative",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * oid: An OID represented as a URI
     */
    Oid: {
        display: "oid",
        code: "oid",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * ParameterDefinition: The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
     */
    ParameterDefinition: {
        display: "ParameterDefinition",
        code: "ParameterDefinition",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Period: A time period defined by a start and end date and optionally time.
     */
    Period: {
        display: "Period",
        code: "Period",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * positiveInt: An integer with a value that is positive (e.g. &gt;0)
     */
    PositiveInt: {
        display: "positiveInt",
        code: "positiveInt",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Quantity: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    Quantity: {
        display: "Quantity",
        code: "Quantity",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Range: A set of ordered Quantities defined by a low and high limit.
     */
    Range: {
        display: "Range",
        code: "Range",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Ratio: A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    Ratio: {
        display: "Ratio",
        code: "Ratio",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Reference: A reference from one resource to another.
     */
    Reference: {
        display: "Reference",
        code: "Reference",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * RelatedArtifact: Related artifacts such as additional documentation, justification, or bibliographic references.
     */
    RelatedArtifact: {
        display: "RelatedArtifact",
        code: "RelatedArtifact",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * SampledData: A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    SampledData: {
        display: "SampledData",
        code: "SampledData",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Signature: A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different signature approaches have different utilities.
     */
    Signature: {
        display: "Signature",
        code: "Signature",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Code: SimpleQuantity
     */
    SimpleQuantity: {
        display: "SimpleQuantity",
        code: "SimpleQuantity",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * string: A sequence of Unicode characters
     */
    VALString: {
        display: "string",
        code: "string",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * time: A time during the day, with no date specified
     */
    Time: {
        display: "time",
        code: "time",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * Timing: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
     */
    Timing: {
        display: "Timing",
        code: "Timing",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * TriggerDefinition: A description of a triggering event.
     */
    TriggerDefinition: {
        display: "TriggerDefinition",
        code: "TriggerDefinition",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * unsignedInt: An integer with a value that is not negative (e.g. &gt;= 0)
     */
    UnsignedInt: {
        display: "unsignedInt",
        code: "unsignedInt",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * uri: String of characters used to identify a name or a resource
     */
    Uri: {
        display: "uri",
        code: "uri",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * UsageContext: Specifies clinical/business/etc metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
     */
    UsageContext: {
        display: "UsageContext",
        code: "UsageContext",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * uuid: A UUID, represented as a URI
     */
    Uuid: {
        display: "uuid",
        code: "uuid",
        system: "http://hl7.org/fhir/data-types",
    },
    /**
     * xhtml: XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
     */
    XHTML: {
        display: "XHTML",
        code: "xhtml",
        system: "http://hl7.org/fhir/data-types",
    },
};
//# sourceMappingURL=data:application/json;base64,