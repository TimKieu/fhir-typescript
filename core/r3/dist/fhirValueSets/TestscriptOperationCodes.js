// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/testscript-operation-codes|3.0.2
/**
 * This value set defines a set of codes that are used to indicate the supported operations of a testing engine or tool.
 */
export const TestscriptOperationCodes = {
    /**
     * apply: Realize a definition in a specific context
     */
    DollarApply: "apply",
    /**
     * batch: Update, create or delete a set of resources as independent actions.
     */
    Batch: "batch",
    /**
     * cancel: Cancel Task
     */
    DollarCancel: "cancel",
    /**
     * capabilities: Get a capability statement for the system.
     */
    Capabilities: "capabilities",
    /**
     * closure: Closure Table Maintenance
     */
    DollarClosure: "closure",
    /**
     * compose: Code Composition based on supplied properties
     */
    DollarCompose: "compose",
    /**
     * conforms: Test if a server implements a client's required operations
     */
    DollarConforms: "conforms",
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: "create",
    /**
     * data-requirements: Aggregates and return the parameters and data requirements as a single module definition library
     */
    DollarDataRequirements: "data-requirements",
    /**
     * delete: Delete a resource.
     */
    Delete: "delete",
    /**
     * deleteCondMultiple: Conditionally delete one or more resources based on search parameters.
     */
    ConditionalDeleteMultiple: "deleteCondMultiple",
    /**
     * deleteCondSingle: Conditionally delete a single resource based on search parameters.
     */
    ConditionalDeleteSingle: "deleteCondSingle",
    /**
     * document: Generate a Document
     */
    DollarDocument: "document",
    /**
     * evaluate: Evaluate DecisionSupportRule / DecisionSupportServiceModule
     */
    DollarEvaluate: "evaluate",
    /**
     * evaluate-measure: Evaluate Measure
     */
    DollarEvaluateMeasure: "evaluate-measure",
    /**
     * everything: Fetch Encounter/Patient Record
     */
    DollarEverything: "everything",
    /**
     * expand: Value Set Expansion
     */
    DollarExpand: "expand",
    /**
     * fail: Fail Task
     */
    DollarFail: "fail",
    /**
     * find: Find a functional list
     */
    DollarFind: "find",
    /**
     * finish: Finish Task
     */
    DollarFinish: "finish",
    /**
     * history: Retrieve the change history for a particular resource or resource type.
     */
    History: "history",
    /**
     * implements: Test if a server implements a client's required operations
     */
    DollarImplements: "implements",
    /**
     * lookup: Concept Look Up
     */
    DollarLookup: "lookup",
    /**
     * match: Find patient matches using MPI based logic
     */
    DollarMatch: "match",
    /**
     * meta: Access a list of profiles, tags, and security labels
     */
    DollarMeta: "meta",
    /**
     * meta-add: Add profiles, tags, and security labels to a resource
     */
    DollarMetaAdd: "meta-add",
    /**
     * meta-delete: Delete profiles, tags, and security labels for a resource
     */
    DollarMetaDelete: "meta-delete",
    /**
     * populate: Populate Questionnaire
     */
    DollarPopulate: "populate",
    /**
     * populatehtml: Generate HTML for Questionnaire
     */
    DollarPopulatehtml: "populatehtml",
    /**
     * populatelink: Generate a link to a Questionnaire completion webpage
     */
    DollarPopulatelink: "populatelink",
    /**
     * process-message: Process Message
     */
    DollarProcessMessage: "process-message",
    /**
     * questionnaire: Build Questionnaire
     */
    DollarQuestionnaire: "questionnaire",
    /**
     * read: Read the current state of the resource.
     */
    Read: "read",
    /**
     * release: Release Task
     */
    DollarRelease: "release",
    /**
     * reserve: Reserve Task
     */
    DollarReserve: "reserve",
    /**
     * resume: Resume Task
     */
    DollarResume: "resume",
    /**
     * search: Search based on some filter criteria.
     */
    Search: "search",
    /**
     * set-input: Set Task Input
     */
    DollarSetInput: "set-input",
    /**
     * set-output: Set Task Output
     */
    DollarSetOutput: "set-output",
    /**
     * start: Start Task
     */
    DollarStart: "start",
    /**
     * stats: Observation Statistics
     */
    DollarStats: "stats",
    /**
     * stop: Stop Task
     */
    DollarStop: "stop",
    /**
     * subset: Fetch a subset of the CapabilityStatement resource
     */
    DollarSubset: "subset",
    /**
     * subsumes: Determine if code A is subsumed by code B
     */
    DollarSubsumes: "subsumes",
    /**
     * suspend: Suspend Task
     */
    DollarSuspend: "suspend",
    /**
     * transaction: Update, create or delete a set of resources as a single transaction.
     */
    Transaction: "transaction",
    /**
     * transform: Model Instance Transformation
     */
    DollarTransform: "transform",
    /**
     * translate: Concept Translation
     */
    DollarTranslate: "translate",
    /**
     * update: Update an existing resource by its id.
     */
    Update: "update",
    /**
     * updateCreate: Update an existing resource by its id (or create it if it is new).
     */
    CreateUsingUpdate: "updateCreate",
    /**
     * validate: Validate a resource
     */
    DollarValidate: "validate",
    /**
     * validate-code: Value Set based Validation
     */
    DollarValidateCode: "validate-code",
    /**
     * vread: Read the state of a specific version of the resource.
     */
    VersionRead: "vread",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdHNjcmlwdE9wZXJhdGlvbkNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UZXN0c2NyaXB0T3BlcmF0aW9uQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBRS9FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUc7SUFDdEM7O09BRUc7SUFDSCxXQUFXLEVBQUUsT0FBTztJQUNwQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxZQUFZLEVBQUUsUUFBUTtJQUN0Qjs7T0FFRztJQUNILFlBQVksRUFBRSxjQUFjO0lBQzVCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLFNBQVM7SUFDeEI7O09BRUc7SUFDSCxhQUFhLEVBQUUsU0FBUztJQUN4Qjs7T0FFRztJQUNILGNBQWMsRUFBRSxVQUFVO0lBQzFCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxzQkFBc0IsRUFBRSxtQkFBbUI7SUFDM0M7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILHlCQUF5QixFQUFFLG9CQUFvQjtJQUMvQzs7T0FFRztJQUNILHVCQUF1QixFQUFFLGtCQUFrQjtJQUMzQzs7T0FFRztJQUNILGNBQWMsRUFBRSxVQUFVO0lBQzFCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLFVBQVU7SUFDMUI7O09BRUc7SUFDSCxxQkFBcUIsRUFBRSxrQkFBa0I7SUFDekM7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxZQUFZO0lBQzlCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLFFBQVE7SUFDdEI7O09BRUc7SUFDSCxVQUFVLEVBQUUsTUFBTTtJQUNsQjs7T0FFRztJQUNILFVBQVUsRUFBRSxNQUFNO0lBQ2xCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLFFBQVE7SUFDdEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILGdCQUFnQixFQUFFLFlBQVk7SUFDOUI7O09BRUc7SUFDSCxZQUFZLEVBQUUsUUFBUTtJQUN0Qjs7T0FFRztJQUNILFdBQVcsRUFBRSxPQUFPO0lBQ3BCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLE1BQU07SUFDbEI7O09BRUc7SUFDSCxhQUFhLEVBQUUsVUFBVTtJQUN6Qjs7T0FFRztJQUNILGdCQUFnQixFQUFFLGFBQWE7SUFDL0I7O09BRUc7SUFDSCxjQUFjLEVBQUUsVUFBVTtJQUMxQjs7T0FFRztJQUNILGtCQUFrQixFQUFFLGNBQWM7SUFDbEM7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxjQUFjO0lBQ2xDOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUUsaUJBQWlCO0lBQ3ZDOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsZUFBZTtJQUNwQzs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxhQUFhLEVBQUUsU0FBUztJQUN4Qjs7T0FFRztJQUNILGFBQWEsRUFBRSxTQUFTO0lBQ3hCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLFFBQVE7SUFDdEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILGNBQWMsRUFBRSxXQUFXO0lBQzNCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLFlBQVk7SUFDN0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsT0FBTztJQUNwQjs7T0FFRztJQUNILFdBQVcsRUFBRSxPQUFPO0lBQ3BCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLE1BQU07SUFDbEI7O09BRUc7SUFDSCxZQUFZLEVBQUUsUUFBUTtJQUN0Qjs7T0FFRztJQUNILGNBQWMsRUFBRSxVQUFVO0lBQzFCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLFNBQVM7SUFDeEI7O09BRUc7SUFDSCxXQUFXLEVBQUUsYUFBYTtJQUMxQjs7T0FFRztJQUNILGVBQWUsRUFBRSxXQUFXO0lBQzVCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLFdBQVc7SUFDNUI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILGlCQUFpQixFQUFFLGNBQWM7SUFDakM7O09BRUc7SUFDSCxjQUFjLEVBQUUsVUFBVTtJQUMxQjs7T0FFRztJQUNILGtCQUFrQixFQUFFLGVBQWU7SUFDbkM7O09BRUc7SUFDSCxXQUFXLEVBQUUsT0FBTztDQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdGVzdHNjcmlwdC1vcGVyYXRpb24tY29kZXN8My4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgYXJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1cHBvcnRlZCBvcGVyYXRpb25zIG9mIGEgdGVzdGluZyBlbmdpbmUgb3IgdG9vbC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUZXN0c2NyaXB0T3BlcmF0aW9uQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYXBwbHk6IFJlYWxpemUgYSBkZWZpbml0aW9uIGluIGEgc3BlY2lmaWMgY29udGV4dFxyXG4gICAqL1xyXG4gIERvbGxhckFwcGx5OiBcImFwcGx5XCIsXHJcbiAgLyoqXHJcbiAgICogYmF0Y2g6IFVwZGF0ZSwgY3JlYXRlIG9yIGRlbGV0ZSBhIHNldCBvZiByZXNvdXJjZXMgYXMgaW5kZXBlbmRlbnQgYWN0aW9ucy5cclxuICAgKi9cclxuICBCYXRjaDogXCJiYXRjaFwiLFxyXG4gIC8qKlxyXG4gICAqIGNhbmNlbDogQ2FuY2VsIFRhc2tcclxuICAgKi9cclxuICBEb2xsYXJDYW5jZWw6IFwiY2FuY2VsXCIsXHJcbiAgLyoqXHJcbiAgICogY2FwYWJpbGl0aWVzOiBHZXQgYSBjYXBhYmlsaXR5IHN0YXRlbWVudCBmb3IgdGhlIHN5c3RlbS5cclxuICAgKi9cclxuICBDYXBhYmlsaXRpZXM6IFwiY2FwYWJpbGl0aWVzXCIsXHJcbiAgLyoqXHJcbiAgICogY2xvc3VyZTogQ2xvc3VyZSBUYWJsZSBNYWludGVuYW5jZVxyXG4gICAqL1xyXG4gIERvbGxhckNsb3N1cmU6IFwiY2xvc3VyZVwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBvc2U6IENvZGUgQ29tcG9zaXRpb24gYmFzZWQgb24gc3VwcGxpZWQgcHJvcGVydGllc1xyXG4gICAqL1xyXG4gIERvbGxhckNvbXBvc2U6IFwiY29tcG9zZVwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbmZvcm1zOiBUZXN0IGlmIGEgc2VydmVyIGltcGxlbWVudHMgYSBjbGllbnQncyByZXF1aXJlZCBvcGVyYXRpb25zXHJcbiAgICovXHJcbiAgRG9sbGFyQ29uZm9ybXM6IFwiY29uZm9ybXNcIixcclxuICAvKipcclxuICAgKiBjcmVhdGU6IENyZWF0ZSBhIG5ldyByZXNvdXJjZSB3aXRoIGEgc2VydmVyIGFzc2lnbmVkIGlkLlxyXG4gICAqL1xyXG4gIENyZWF0ZTogXCJjcmVhdGVcIixcclxuICAvKipcclxuICAgKiBkYXRhLXJlcXVpcmVtZW50czogQWdncmVnYXRlcyBhbmQgcmV0dXJuIHRoZSBwYXJhbWV0ZXJzIGFuZCBkYXRhIHJlcXVpcmVtZW50cyBhcyBhIHNpbmdsZSBtb2R1bGUgZGVmaW5pdGlvbiBsaWJyYXJ5XHJcbiAgICovXHJcbiAgRG9sbGFyRGF0YVJlcXVpcmVtZW50czogXCJkYXRhLXJlcXVpcmVtZW50c1wiLFxyXG4gIC8qKlxyXG4gICAqIGRlbGV0ZTogRGVsZXRlIGEgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgRGVsZXRlOiBcImRlbGV0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGRlbGV0ZUNvbmRNdWx0aXBsZTogQ29uZGl0aW9uYWxseSBkZWxldGUgb25lIG9yIG1vcmUgcmVzb3VyY2VzIGJhc2VkIG9uIHNlYXJjaCBwYXJhbWV0ZXJzLlxyXG4gICAqL1xyXG4gIENvbmRpdGlvbmFsRGVsZXRlTXVsdGlwbGU6IFwiZGVsZXRlQ29uZE11bHRpcGxlXCIsXHJcbiAgLyoqXHJcbiAgICogZGVsZXRlQ29uZFNpbmdsZTogQ29uZGl0aW9uYWxseSBkZWxldGUgYSBzaW5nbGUgcmVzb3VyY2UgYmFzZWQgb24gc2VhcmNoIHBhcmFtZXRlcnMuXHJcbiAgICovXHJcbiAgQ29uZGl0aW9uYWxEZWxldGVTaW5nbGU6IFwiZGVsZXRlQ29uZFNpbmdsZVwiLFxyXG4gIC8qKlxyXG4gICAqIGRvY3VtZW50OiBHZW5lcmF0ZSBhIERvY3VtZW50XHJcbiAgICovXHJcbiAgRG9sbGFyRG9jdW1lbnQ6IFwiZG9jdW1lbnRcIixcclxuICAvKipcclxuICAgKiBldmFsdWF0ZTogRXZhbHVhdGUgRGVjaXNpb25TdXBwb3J0UnVsZSAvIERlY2lzaW9uU3VwcG9ydFNlcnZpY2VNb2R1bGVcclxuICAgKi9cclxuICBEb2xsYXJFdmFsdWF0ZTogXCJldmFsdWF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGV2YWx1YXRlLW1lYXN1cmU6IEV2YWx1YXRlIE1lYXN1cmVcclxuICAgKi9cclxuICBEb2xsYXJFdmFsdWF0ZU1lYXN1cmU6IFwiZXZhbHVhdGUtbWVhc3VyZVwiLFxyXG4gIC8qKlxyXG4gICAqIGV2ZXJ5dGhpbmc6IEZldGNoIEVuY291bnRlci9QYXRpZW50IFJlY29yZFxyXG4gICAqL1xyXG4gIERvbGxhckV2ZXJ5dGhpbmc6IFwiZXZlcnl0aGluZ1wiLFxyXG4gIC8qKlxyXG4gICAqIGV4cGFuZDogVmFsdWUgU2V0IEV4cGFuc2lvblxyXG4gICAqL1xyXG4gIERvbGxhckV4cGFuZDogXCJleHBhbmRcIixcclxuICAvKipcclxuICAgKiBmYWlsOiBGYWlsIFRhc2tcclxuICAgKi9cclxuICBEb2xsYXJGYWlsOiBcImZhaWxcIixcclxuICAvKipcclxuICAgKiBmaW5kOiBGaW5kIGEgZnVuY3Rpb25hbCBsaXN0XHJcbiAgICovXHJcbiAgRG9sbGFyRmluZDogXCJmaW5kXCIsXHJcbiAgLyoqXHJcbiAgICogZmluaXNoOiBGaW5pc2ggVGFza1xyXG4gICAqL1xyXG4gIERvbGxhckZpbmlzaDogXCJmaW5pc2hcIixcclxuICAvKipcclxuICAgKiBoaXN0b3J5OiBSZXRyaWV2ZSB0aGUgY2hhbmdlIGhpc3RvcnkgZm9yIGEgcGFydGljdWxhciByZXNvdXJjZSBvciByZXNvdXJjZSB0eXBlLlxyXG4gICAqL1xyXG4gIEhpc3Rvcnk6IFwiaGlzdG9yeVwiLFxyXG4gIC8qKlxyXG4gICAqIGltcGxlbWVudHM6IFRlc3QgaWYgYSBzZXJ2ZXIgaW1wbGVtZW50cyBhIGNsaWVudCdzIHJlcXVpcmVkIG9wZXJhdGlvbnNcclxuICAgKi9cclxuICBEb2xsYXJJbXBsZW1lbnRzOiBcImltcGxlbWVudHNcIixcclxuICAvKipcclxuICAgKiBsb29rdXA6IENvbmNlcHQgTG9vayBVcFxyXG4gICAqL1xyXG4gIERvbGxhckxvb2t1cDogXCJsb29rdXBcIixcclxuICAvKipcclxuICAgKiBtYXRjaDogRmluZCBwYXRpZW50IG1hdGNoZXMgdXNpbmcgTVBJIGJhc2VkIGxvZ2ljXHJcbiAgICovXHJcbiAgRG9sbGFyTWF0Y2g6IFwibWF0Y2hcIixcclxuICAvKipcclxuICAgKiBtZXRhOiBBY2Nlc3MgYSBsaXN0IG9mIHByb2ZpbGVzLCB0YWdzLCBhbmQgc2VjdXJpdHkgbGFiZWxzXHJcbiAgICovXHJcbiAgRG9sbGFyTWV0YTogXCJtZXRhXCIsXHJcbiAgLyoqXHJcbiAgICogbWV0YS1hZGQ6IEFkZCBwcm9maWxlcywgdGFncywgYW5kIHNlY3VyaXR5IGxhYmVscyB0byBhIHJlc291cmNlXHJcbiAgICovXHJcbiAgRG9sbGFyTWV0YUFkZDogXCJtZXRhLWFkZFwiLFxyXG4gIC8qKlxyXG4gICAqIG1ldGEtZGVsZXRlOiBEZWxldGUgcHJvZmlsZXMsIHRhZ3MsIGFuZCBzZWN1cml0eSBsYWJlbHMgZm9yIGEgcmVzb3VyY2VcclxuICAgKi9cclxuICBEb2xsYXJNZXRhRGVsZXRlOiBcIm1ldGEtZGVsZXRlXCIsXHJcbiAgLyoqXHJcbiAgICogcG9wdWxhdGU6IFBvcHVsYXRlIFF1ZXN0aW9ubmFpcmVcclxuICAgKi9cclxuICBEb2xsYXJQb3B1bGF0ZTogXCJwb3B1bGF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHBvcHVsYXRlaHRtbDogR2VuZXJhdGUgSFRNTCBmb3IgUXVlc3Rpb25uYWlyZVxyXG4gICAqL1xyXG4gIERvbGxhclBvcHVsYXRlaHRtbDogXCJwb3B1bGF0ZWh0bWxcIixcclxuICAvKipcclxuICAgKiBwb3B1bGF0ZWxpbms6IEdlbmVyYXRlIGEgbGluayB0byBhIFF1ZXN0aW9ubmFpcmUgY29tcGxldGlvbiB3ZWJwYWdlXHJcbiAgICovXHJcbiAgRG9sbGFyUG9wdWxhdGVsaW5rOiBcInBvcHVsYXRlbGlua1wiLFxyXG4gIC8qKlxyXG4gICAqIHByb2Nlc3MtbWVzc2FnZTogUHJvY2VzcyBNZXNzYWdlXHJcbiAgICovXHJcbiAgRG9sbGFyUHJvY2Vzc01lc3NhZ2U6IFwicHJvY2Vzcy1tZXNzYWdlXCIsXHJcbiAgLyoqXHJcbiAgICogcXVlc3Rpb25uYWlyZTogQnVpbGQgUXVlc3Rpb25uYWlyZVxyXG4gICAqL1xyXG4gIERvbGxhclF1ZXN0aW9ubmFpcmU6IFwicXVlc3Rpb25uYWlyZVwiLFxyXG4gIC8qKlxyXG4gICAqIHJlYWQ6IFJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFJlYWQ6IFwicmVhZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlbGVhc2U6IFJlbGVhc2UgVGFza1xyXG4gICAqL1xyXG4gIERvbGxhclJlbGVhc2U6IFwicmVsZWFzZVwiLFxyXG4gIC8qKlxyXG4gICAqIHJlc2VydmU6IFJlc2VydmUgVGFza1xyXG4gICAqL1xyXG4gIERvbGxhclJlc2VydmU6IFwicmVzZXJ2ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHJlc3VtZTogUmVzdW1lIFRhc2tcclxuICAgKi9cclxuICBEb2xsYXJSZXN1bWU6IFwicmVzdW1lXCIsXHJcbiAgLyoqXHJcbiAgICogc2VhcmNoOiBTZWFyY2ggYmFzZWQgb24gc29tZSBmaWx0ZXIgY3JpdGVyaWEuXHJcbiAgICovXHJcbiAgU2VhcmNoOiBcInNlYXJjaFwiLFxyXG4gIC8qKlxyXG4gICAqIHNldC1pbnB1dDogU2V0IFRhc2sgSW5wdXRcclxuICAgKi9cclxuICBEb2xsYXJTZXRJbnB1dDogXCJzZXQtaW5wdXRcIixcclxuICAvKipcclxuICAgKiBzZXQtb3V0cHV0OiBTZXQgVGFzayBPdXRwdXRcclxuICAgKi9cclxuICBEb2xsYXJTZXRPdXRwdXQ6IFwic2V0LW91dHB1dFwiLFxyXG4gIC8qKlxyXG4gICAqIHN0YXJ0OiBTdGFydCBUYXNrXHJcbiAgICovXHJcbiAgRG9sbGFyU3RhcnQ6IFwic3RhcnRcIixcclxuICAvKipcclxuICAgKiBzdGF0czogT2JzZXJ2YXRpb24gU3RhdGlzdGljc1xyXG4gICAqL1xyXG4gIERvbGxhclN0YXRzOiBcInN0YXRzXCIsXHJcbiAgLyoqXHJcbiAgICogc3RvcDogU3RvcCBUYXNrXHJcbiAgICovXHJcbiAgRG9sbGFyU3RvcDogXCJzdG9wXCIsXHJcbiAgLyoqXHJcbiAgICogc3Vic2V0OiBGZXRjaCBhIHN1YnNldCBvZiB0aGUgQ2FwYWJpbGl0eVN0YXRlbWVudCByZXNvdXJjZVxyXG4gICAqL1xyXG4gIERvbGxhclN1YnNldDogXCJzdWJzZXRcIixcclxuICAvKipcclxuICAgKiBzdWJzdW1lczogRGV0ZXJtaW5lIGlmIGNvZGUgQSBpcyBzdWJzdW1lZCBieSBjb2RlIEJcclxuICAgKi9cclxuICBEb2xsYXJTdWJzdW1lczogXCJzdWJzdW1lc1wiLFxyXG4gIC8qKlxyXG4gICAqIHN1c3BlbmQ6IFN1c3BlbmQgVGFza1xyXG4gICAqL1xyXG4gIERvbGxhclN1c3BlbmQ6IFwic3VzcGVuZFwiLFxyXG4gIC8qKlxyXG4gICAqIHRyYW5zYWN0aW9uOiBVcGRhdGUsIGNyZWF0ZSBvciBkZWxldGUgYSBzZXQgb2YgcmVzb3VyY2VzIGFzIGEgc2luZ2xlIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIFRyYW5zYWN0aW9uOiBcInRyYW5zYWN0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogdHJhbnNmb3JtOiBNb2RlbCBJbnN0YW5jZSBUcmFuc2Zvcm1hdGlvblxyXG4gICAqL1xyXG4gIERvbGxhclRyYW5zZm9ybTogXCJ0cmFuc2Zvcm1cIixcclxuICAvKipcclxuICAgKiB0cmFuc2xhdGU6IENvbmNlcHQgVHJhbnNsYXRpb25cclxuICAgKi9cclxuICBEb2xsYXJUcmFuc2xhdGU6IFwidHJhbnNsYXRlXCIsXHJcbiAgLyoqXHJcbiAgICogdXBkYXRlOiBVcGRhdGUgYW4gZXhpc3RpbmcgcmVzb3VyY2UgYnkgaXRzIGlkLlxyXG4gICAqL1xyXG4gIFVwZGF0ZTogXCJ1cGRhdGVcIixcclxuICAvKipcclxuICAgKiB1cGRhdGVDcmVhdGU6IFVwZGF0ZSBhbiBleGlzdGluZyByZXNvdXJjZSBieSBpdHMgaWQgKG9yIGNyZWF0ZSBpdCBpZiBpdCBpcyBuZXcpLlxyXG4gICAqL1xyXG4gIENyZWF0ZVVzaW5nVXBkYXRlOiBcInVwZGF0ZUNyZWF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHZhbGlkYXRlOiBWYWxpZGF0ZSBhIHJlc291cmNlXHJcbiAgICovXHJcbiAgRG9sbGFyVmFsaWRhdGU6IFwidmFsaWRhdGVcIixcclxuICAvKipcclxuICAgKiB2YWxpZGF0ZS1jb2RlOiBWYWx1ZSBTZXQgYmFzZWQgVmFsaWRhdGlvblxyXG4gICAqL1xyXG4gIERvbGxhclZhbGlkYXRlQ29kZTogXCJ2YWxpZGF0ZS1jb2RlXCIsXHJcbiAgLyoqXHJcbiAgICogdnJlYWQ6IFJlYWQgdGhlIHN0YXRlIG9mIGEgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgVmVyc2lvblJlYWQ6IFwidnJlYWRcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgYXJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1cHBvcnRlZCBvcGVyYXRpb25zIG9mIGEgdGVzdGluZyBlbmdpbmUgb3IgdG9vbC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRlc3RzY3JpcHRPcGVyYXRpb25Db2RlVHlwZSA9IHR5cGVvZiBUZXN0c2NyaXB0T3BlcmF0aW9uQ29kZXNba2V5b2YgdHlwZW9mIFRlc3RzY3JpcHRPcGVyYXRpb25Db2Rlc107XHJcbiJdfQ==