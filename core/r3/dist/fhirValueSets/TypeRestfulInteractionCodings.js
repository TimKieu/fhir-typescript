// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/type-restful-interaction|3.0.2
/**
 * Operations supported by REST at the type or instance level.
 */
export const TypeRestfulInteractionCodings = {
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: {
        display: "create",
        code: "create",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * delete: Delete a resource.
     */
    Delete: {
        display: "delete",
        code: "delete",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-instance: Retrieve the change history for a particular resource.
     */
    HistoryInstance: {
        display: "history-instance",
        code: "history-instance",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * history-type: Retrieve the change history for all resources of a particular type.
     */
    HistoryType: {
        display: "history-type",
        code: "history-type",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * patch: Update an existing resource by posting a set of changes to it.
     */
    Patch: {
        display: "patch",
        code: "patch",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * read: Read the current state of the resource.
     */
    Read: {
        display: "read",
        code: "read",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * search-type: Search all resources of the specified type based on some filter criteria.
     */
    SearchType: {
        display: "search-type",
        code: "search-type",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * update: Update an existing resource by its id (or create it if it is new).
     */
    Update: {
        display: "update",
        code: "update",
        system: "http://hl7.org/fhir/restful-interaction",
    },
    /**
     * vread: Read the state of a specific version of the resource.
     */
    Vread: {
        display: "vread",
        code: "vread",
        system: "http://hl7.org/fhir/restful-interaction",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1R5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQThDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC90eXBlLXJlc3RmdWwtaW50ZXJhY3Rpb258My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBPcGVyYXRpb25zIHN1cHBvcnRlZCBieSBSRVNUIGF0IHRoZSB0eXBlIG9yIGluc3RhbmNlIGxldmVsLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY3JlYXRlOiBDcmVhdGUgYSBuZXcgcmVzb3VyY2Ugd2l0aCBhIHNlcnZlciBhc3NpZ25lZCBpZC5cclxuICAgKi9cclxuICBDcmVhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGVsZXRlOiBEZWxldGUgYSByZXNvdXJjZS5cclxuICAgKi9cclxuICBEZWxldGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaGlzdG9yeS1pbnN0YW5jZTogUmV0cmlldmUgdGhlIGNoYW5nZSBoaXN0b3J5IGZvciBhIHBhcnRpY3VsYXIgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgSGlzdG9yeUluc3RhbmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGhpc3RvcnktdHlwZTogUmV0cmlldmUgdGhlIGNoYW5nZSBoaXN0b3J5IGZvciBhbGwgcmVzb3VyY2VzIG9mIGEgcGFydGljdWxhciB0eXBlLlxyXG4gICAqL1xyXG4gIEhpc3RvcnlUeXBlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBhdGNoOiBVcGRhdGUgYW4gZXhpc3RpbmcgcmVzb3VyY2UgYnkgcG9zdGluZyBhIHNldCBvZiBjaGFuZ2VzIHRvIGl0LlxyXG4gICAqL1xyXG4gIFBhdGNoOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlYWQ6IFJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFJlYWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc2VhcmNoLXR5cGU6IFNlYXJjaCBhbGwgcmVzb3VyY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBiYXNlZCBvbiBzb21lIGZpbHRlciBjcml0ZXJpYS5cclxuICAgKi9cclxuICBTZWFyY2hUeXBlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVwZGF0ZTogVXBkYXRlIGFuIGV4aXN0aW5nIHJlc291cmNlIGJ5IGl0cyBpZCAob3IgY3JlYXRlIGl0IGlmIGl0IGlzIG5ldykuXHJcbiAgICovXHJcbiAgVXBkYXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHZyZWFkOiBSZWFkIHRoZSBzdGF0ZSBvZiBhIHNwZWNpZmljIHZlcnNpb24gb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFZyZWFkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogT3BlcmF0aW9ucyBzdXBwb3J0ZWQgYnkgUkVTVCBhdCB0aGUgdHlwZSBvciBpbnN0YW5jZSBsZXZlbC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUeXBlUmVzdGZ1bEludGVyYWN0aW9uQ29kaW5nczpUeXBlUmVzdGZ1bEludGVyYWN0aW9uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjcmVhdGU6IENyZWF0ZSBhIG5ldyByZXNvdXJjZSB3aXRoIGEgc2VydmVyIGFzc2lnbmVkIGlkLlxyXG4gICAqL1xyXG4gIENyZWF0ZToge1xyXG4gICAgZGlzcGxheTogXCJjcmVhdGVcIixcclxuICAgIGNvZGU6IFwiY3JlYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkZWxldGU6IERlbGV0ZSBhIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIERlbGV0ZToge1xyXG4gICAgZGlzcGxheTogXCJkZWxldGVcIixcclxuICAgIGNvZGU6IFwiZGVsZXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBoaXN0b3J5LWluc3RhbmNlOiBSZXRyaWV2ZSB0aGUgY2hhbmdlIGhpc3RvcnkgZm9yIGEgcGFydGljdWxhciByZXNvdXJjZS5cclxuICAgKi9cclxuICBIaXN0b3J5SW5zdGFuY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiaGlzdG9yeS1pbnN0YW5jZVwiLFxyXG4gICAgY29kZTogXCJoaXN0b3J5LWluc3RhbmNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBoaXN0b3J5LXR5cGU6IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYWxsIHJlc291cmNlcyBvZiBhIHBhcnRpY3VsYXIgdHlwZS5cclxuICAgKi9cclxuICBIaXN0b3J5VHlwZToge1xyXG4gICAgZGlzcGxheTogXCJoaXN0b3J5LXR5cGVcIixcclxuICAgIGNvZGU6IFwiaGlzdG9yeS10eXBlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwYXRjaDogVXBkYXRlIGFuIGV4aXN0aW5nIHJlc291cmNlIGJ5IHBvc3RpbmcgYSBzZXQgb2YgY2hhbmdlcyB0byBpdC5cclxuICAgKi9cclxuICBQYXRjaDoge1xyXG4gICAgZGlzcGxheTogXCJwYXRjaFwiLFxyXG4gICAgY29kZTogXCJwYXRjaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVhZDogUmVhZCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgUmVhZDoge1xyXG4gICAgZGlzcGxheTogXCJyZWFkXCIsXHJcbiAgICBjb2RlOiBcInJlYWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNlYXJjaC10eXBlOiBTZWFyY2ggYWxsIHJlc291cmNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgYmFzZWQgb24gc29tZSBmaWx0ZXIgY3JpdGVyaWEuXHJcbiAgICovXHJcbiAgU2VhcmNoVHlwZToge1xyXG4gICAgZGlzcGxheTogXCJzZWFyY2gtdHlwZVwiLFxyXG4gICAgY29kZTogXCJzZWFyY2gtdHlwZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdXBkYXRlOiBVcGRhdGUgYW4gZXhpc3RpbmcgcmVzb3VyY2UgYnkgaXRzIGlkIChvciBjcmVhdGUgaXQgaWYgaXQgaXMgbmV3KS5cclxuICAgKi9cclxuICBVcGRhdGU6IHtcclxuICAgIGRpc3BsYXk6IFwidXBkYXRlXCIsXHJcbiAgICBjb2RlOiBcInVwZGF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdnJlYWQ6IFJlYWQgdGhlIHN0YXRlIG9mIGEgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgVnJlYWQ6IHtcclxuICAgIGRpc3BsYXk6IFwidnJlYWRcIixcclxuICAgIGNvZGU6IFwidnJlYWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=