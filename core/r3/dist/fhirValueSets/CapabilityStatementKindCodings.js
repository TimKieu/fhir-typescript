// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/capability-statement-kind|3.0.2
/**
 * How a capability statement is intended to be used.
 */
export const CapabilityStatementKindCodings = {
    /**
     * capability: The CapabilityStatement instance represents the capabilities of a system or piece of software, independent of a particular installation.
     */
    Capability: {
        display: "Capability",
        code: "capability",
        system: "http://hl7.org/fhir/capability-statement-kind",
    },
    /**
     * instance: The CapabilityStatement instance represents the present capabilities of a specific system instance.  This is the kind returned by OPTIONS for a FHIR server end-point.
     */
    Instance: {
        display: "Instance",
        code: "instance",
        system: "http://hl7.org/fhir/capability-statement-kind",
    },
    /**
     * requirements: The CapabilityStatement instance represents a set of requirements for other systems to meet; e.g. as part of an implementation guide or 'request for proposal'.
     */
    Requirements: {
        display: "Requirements",
        code: "requirements",
        system: "http://hl7.org/fhir/capability-statement-kind",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9DYXBhYmlsaXR5U3RhdGVtZW50S2luZENvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBc0I5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NhcGFiaWxpdHktc3RhdGVtZW50LWtpbmR8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBIb3cgYSBjYXBhYmlsaXR5IHN0YXRlbWVudCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhcGFiaWxpdHk6IFRoZSBDYXBhYmlsaXR5U3RhdGVtZW50IGluc3RhbmNlIHJlcHJlc2VudHMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHN5c3RlbSBvciBwaWVjZSBvZiBzb2Z0d2FyZSwgaW5kZXBlbmRlbnQgb2YgYSBwYXJ0aWN1bGFyIGluc3RhbGxhdGlvbi5cclxuICAgKi9cclxuICBDYXBhYmlsaXR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlOiBUaGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpbnN0YW5jZSByZXByZXNlbnRzIHRoZSBwcmVzZW50IGNhcGFiaWxpdGllcyBvZiBhIHNwZWNpZmljIHN5c3RlbSBpbnN0YW5jZS4gIFRoaXMgaXMgdGhlIGtpbmQgcmV0dXJuZWQgYnkgT1BUSU9OUyBmb3IgYSBGSElSIHNlcnZlciBlbmQtcG9pbnQuXHJcbiAgICovXHJcbiAgSW5zdGFuY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVxdWlyZW1lbnRzOiBUaGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpbnN0YW5jZSByZXByZXNlbnRzIGEgc2V0IG9mIHJlcXVpcmVtZW50cyBmb3Igb3RoZXIgc3lzdGVtcyB0byBtZWV0OyBlLmcuIGFzIHBhcnQgb2YgYW4gaW1wbGVtZW50YXRpb24gZ3VpZGUgb3IgJ3JlcXVlc3QgZm9yIHByb3Bvc2FsJy5cclxuICAgKi9cclxuICBSZXF1aXJlbWVudHM6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIb3cgYSBjYXBhYmlsaXR5IHN0YXRlbWVudCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kQ29kaW5nczpDYXBhYmlsaXR5U3RhdGVtZW50S2luZENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY2FwYWJpbGl0eTogVGhlIENhcGFiaWxpdHlTdGF0ZW1lbnQgaW5zdGFuY2UgcmVwcmVzZW50cyB0aGUgY2FwYWJpbGl0aWVzIG9mIGEgc3lzdGVtIG9yIHBpZWNlIG9mIHNvZnR3YXJlLCBpbmRlcGVuZGVudCBvZiBhIHBhcnRpY3VsYXIgaW5zdGFsbGF0aW9uLlxyXG4gICAqL1xyXG4gIENhcGFiaWxpdHk6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2FwYWJpbGl0eVwiLFxyXG4gICAgY29kZTogXCJjYXBhYmlsaXR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXBhYmlsaXR5LXN0YXRlbWVudC1raW5kXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbnN0YW5jZTogVGhlIENhcGFiaWxpdHlTdGF0ZW1lbnQgaW5zdGFuY2UgcmVwcmVzZW50cyB0aGUgcHJlc2VudCBjYXBhYmlsaXRpZXMgb2YgYSBzcGVjaWZpYyBzeXN0ZW0gaW5zdGFuY2UuICBUaGlzIGlzIHRoZSBraW5kIHJldHVybmVkIGJ5IE9QVElPTlMgZm9yIGEgRkhJUiBzZXJ2ZXIgZW5kLXBvaW50LlxyXG4gICAqL1xyXG4gIEluc3RhbmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkluc3RhbmNlXCIsXHJcbiAgICBjb2RlOiBcImluc3RhbmNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXBhYmlsaXR5LXN0YXRlbWVudC1raW5kXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXF1aXJlbWVudHM6IFRoZSBDYXBhYmlsaXR5U3RhdGVtZW50IGluc3RhbmNlIHJlcHJlc2VudHMgYSBzZXQgb2YgcmVxdWlyZW1lbnRzIGZvciBvdGhlciBzeXN0ZW1zIHRvIG1lZXQ7IGUuZy4gYXMgcGFydCBvZiBhbiBpbXBsZW1lbnRhdGlvbiBndWlkZSBvciAncmVxdWVzdCBmb3IgcHJvcG9zYWwnLlxyXG4gICAqL1xyXG4gIFJlcXVpcmVtZW50czoge1xyXG4gICAgZGlzcGxheTogXCJSZXF1aXJlbWVudHNcIixcclxuICAgIGNvZGU6IFwicmVxdWlyZW1lbnRzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXBhYmlsaXR5LXN0YXRlbWVudC1raW5kXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19