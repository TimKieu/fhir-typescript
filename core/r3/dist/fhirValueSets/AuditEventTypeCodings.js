// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/audit-event-type|20150326
/**
 * Event Types for Audit Events - defined by DICOM with some FHIR specific additions.
 */
export const AuditEventTypeCodings = {
    /**
     * 110100: Audit event: Application Activity has taken place
     */
    ApplicationActivity: {
        display: "Application Activity",
        code: "110100",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110101: Audit event: Audit Log has been used
     */
    AuditLogUsed: {
        display: "Audit Log Used",
        code: "110101",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110102: Audit event: Storage of DICOM Instances has begun
     */
    BeginTransferringDICOMInstances: {
        display: "Begin Transferring DICOM Instances",
        code: "110102",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110103: Audit event: DICOM Instances have been created, read, updated, or deleted
     */
    DICOMInstancesAccessed: {
        display: "DICOM Instances Accessed",
        code: "110103",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110104: Audit event: Storage of DICOM Instances has been completed
     */
    DICOMInstancesTransferred: {
        display: "DICOM Instances Transferred",
        code: "110104",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110105: Audit event: Entire Study has been deleted
     */
    DICOMStudyDeleted: {
        display: "DICOM Study Deleted",
        code: "110105",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110106: Audit event: Data has been exported out of the system
     */
    Export: {
        display: "Export",
        code: "110106",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110107: Audit event: Data has been imported into the system
     */
    Import: {
        display: "Import",
        code: "110107",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110108: Audit event: System has joined or left network
     */
    NetworkEntry: {
        display: "Network Entry",
        code: "110108",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110109: Audit event: Order has been created, read, updated or deleted
     */
    OrderRecord: {
        display: "Order Record",
        code: "110109",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110110: Audit event: Patient Record has been created, read, updated, or deleted
     */
    PatientRecord: {
        display: "Patient Record",
        code: "110110",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110111: Audit event: Procedure Record has been created, read, updated, or deleted
     */
    ProcedureRecord: {
        display: "Procedure Record",
        code: "110111",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110112: Audit event: Query has been made
     */
    Query: {
        display: "Query",
        code: "110112",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110113: Audit event: Security Alert has been raised
     */
    SecurityAlert: {
        display: "Security Alert",
        code: "110113",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * 110114: Audit event: User Authentication has been attempted
     */
    UserAuthentication: {
        display: "User Authentication",
        code: "110114",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * rest: Audit Event: Execution of a RESTful operation as defined by FHIR.
     */
    RESTfulOperation: {
        display: "RESTful Operation",
        code: "rest",
        system: "http://hl7.org/fhir/audit-event-type",
    },
};
//# sourceMappingURL=data:application/json;base64,