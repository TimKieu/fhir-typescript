// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/testscript-operation-codes|3.0.2
/**
 * This value set defines a set of codes that are used to indicate the supported operations of a testing engine or tool.
 */
export const TestscriptOperationCodings = {
    /**
     * apply: Realize a definition in a specific context
     */
    DollarApply: {
        display: "$apply",
        code: "apply",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * batch: Update, create or delete a set of resources as independent actions.
     */
    Batch: {
        display: "Batch",
        code: "batch",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * cancel: Cancel Task
     */
    DollarCancel: {
        display: "$cancel",
        code: "cancel",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * capabilities: Get a capability statement for the system.
     */
    Capabilities: {
        display: "Capabilities",
        code: "capabilities",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * closure: Closure Table Maintenance
     */
    DollarClosure: {
        display: "$closure",
        code: "closure",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * compose: Code Composition based on supplied properties
     */
    DollarCompose: {
        display: "$compose",
        code: "compose",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * conforms: Test if a server implements a client's required operations
     */
    DollarConforms: {
        display: "$conforms",
        code: "conforms",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: {
        display: "Create",
        code: "create",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * data-requirements: Aggregates and return the parameters and data requirements as a single module definition library
     */
    DollarDataRequirements: {
        display: "$data-requirements",
        code: "data-requirements",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * delete: Delete a resource.
     */
    Delete: {
        display: "Delete",
        code: "delete",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * deleteCondMultiple: Conditionally delete one or more resources based on search parameters.
     */
    ConditionalDeleteMultiple: {
        display: "Conditional Delete Multiple",
        code: "deleteCondMultiple",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * deleteCondSingle: Conditionally delete a single resource based on search parameters.
     */
    ConditionalDeleteSingle: {
        display: "Conditional Delete Single",
        code: "deleteCondSingle",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * document: Generate a Document
     */
    DollarDocument: {
        display: "$document",
        code: "document",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * evaluate: Evaluate DecisionSupportRule / DecisionSupportServiceModule
     */
    DollarEvaluate: {
        display: "$evaluate",
        code: "evaluate",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * evaluate-measure: Evaluate Measure
     */
    DollarEvaluateMeasure: {
        display: "$evaluate-measure",
        code: "evaluate-measure",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * everything: Fetch Encounter/Patient Record
     */
    DollarEverything: {
        display: "$everything",
        code: "everything",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * expand: Value Set Expansion
     */
    DollarExpand: {
        display: "$expand",
        code: "expand",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * fail: Fail Task
     */
    DollarFail: {
        display: "$fail",
        code: "fail",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * find: Find a functional list
     */
    DollarFind: {
        display: "$find",
        code: "find",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * finish: Finish Task
     */
    DollarFinish: {
        display: "$finish",
        code: "finish",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * history: Retrieve the change history for a particular resource or resource type.
     */
    History: {
        display: "History",
        code: "history",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * implements: Test if a server implements a client's required operations
     */
    DollarImplements: {
        display: "$implements",
        code: "implements",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * lookup: Concept Look Up
     */
    DollarLookup: {
        display: "$lookup",
        code: "lookup",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * match: Find patient matches using MPI based logic
     */
    DollarMatch: {
        display: "$match",
        code: "match",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * meta: Access a list of profiles, tags, and security labels
     */
    DollarMeta: {
        display: "$meta",
        code: "meta",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * meta-add: Add profiles, tags, and security labels to a resource
     */
    DollarMetaAdd: {
        display: "$meta-add",
        code: "meta-add",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * meta-delete: Delete profiles, tags, and security labels for a resource
     */
    DollarMetaDelete: {
        display: "$meta-delete",
        code: "meta-delete",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * populate: Populate Questionnaire
     */
    DollarPopulate: {
        display: "$populate",
        code: "populate",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * populatehtml: Generate HTML for Questionnaire
     */
    DollarPopulatehtml: {
        display: "$populatehtml",
        code: "populatehtml",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * populatelink: Generate a link to a Questionnaire completion webpage
     */
    DollarPopulatelink: {
        display: "$populatelink",
        code: "populatelink",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * process-message: Process Message
     */
    DollarProcessMessage: {
        display: "$process-message",
        code: "process-message",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * questionnaire: Build Questionnaire
     */
    DollarQuestionnaire: {
        display: "$questionnaire",
        code: "questionnaire",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * read: Read the current state of the resource.
     */
    Read: {
        display: "Read",
        code: "read",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * release: Release Task
     */
    DollarRelease: {
        display: "$release",
        code: "release",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * reserve: Reserve Task
     */
    DollarReserve: {
        display: "$reserve",
        code: "reserve",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * resume: Resume Task
     */
    DollarResume: {
        display: "$resume",
        code: "resume",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * search: Search based on some filter criteria.
     */
    Search: {
        display: "Search",
        code: "search",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * set-input: Set Task Input
     */
    DollarSetInput: {
        display: "$set-input",
        code: "set-input",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * set-output: Set Task Output
     */
    DollarSetOutput: {
        display: "$set-output",
        code: "set-output",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * start: Start Task
     */
    DollarStart: {
        display: "$start",
        code: "start",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * stats: Observation Statistics
     */
    DollarStats: {
        display: "$stats",
        code: "stats",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * stop: Stop Task
     */
    DollarStop: {
        display: "$stop",
        code: "stop",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * subset: Fetch a subset of the CapabilityStatement resource
     */
    DollarSubset: {
        display: "$subset",
        code: "subset",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * subsumes: Determine if code A is subsumed by code B
     */
    DollarSubsumes: {
        display: "$subsumes",
        code: "subsumes",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * suspend: Suspend Task
     */
    DollarSuspend: {
        display: "$suspend",
        code: "suspend",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * transaction: Update, create or delete a set of resources as a single transaction.
     */
    Transaction: {
        display: "Transaction",
        code: "transaction",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * transform: Model Instance Transformation
     */
    DollarTransform: {
        display: "$transform",
        code: "transform",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * translate: Concept Translation
     */
    DollarTranslate: {
        display: "$translate",
        code: "translate",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * update: Update an existing resource by its id.
     */
    Update: {
        display: "Update",
        code: "update",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * updateCreate: Update an existing resource by its id (or create it if it is new).
     */
    CreateUsingUpdate: {
        display: "Create using Update",
        code: "updateCreate",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * validate: Validate a resource
     */
    DollarValidate: {
        display: "$validate",
        code: "validate",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * validate-code: Value Set based Validation
     */
    DollarValidateCode: {
        display: "$validate-code",
        code: "validate-code",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
    /**
     * vread: Read the state of a specific version of the resource.
     */
    VersionRead: {
        display: "Version Read",
        code: "vread",
        system: "http://hl7.org/fhir/testscript-operation-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,