// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/bundle-type|3.0.2
/**
 * Indicates the purpose of a bundle - how it was intended to be used.
 */
export const BundleTypeCodes = {
    /**
     * batch: The bundle is a transaction - intended to be processed by a server as a group of actions.
     */
    Batch: "batch",
    /**
     * batch-response: The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
     */
    BatchResponse: "batch-response",
    /**
     * collection: The bundle is a set of resources collected into a single package for ease of distribution.
     */
    Collection: "collection",
    /**
     * document: The bundle is a document. The first resource is a Composition.
     */
    Document: "document",
    /**
     * history: The bundle is a list of resources from a history interaction on a server.
     */
    HistoryList: "history",
    /**
     * message: The bundle is a message. The first resource is a MessageHeader.
     */
    Message: "message",
    /**
     * searchset: The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
     */
    SearchResults: "searchset",
    /**
     * transaction: The bundle is a transaction - intended to be processed by a server as an atomic commit.
     */
    Transaction: "transaction",
    /**
     * transaction-response: The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
     */
    TransactionResponse: "transaction-response",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVuZGxlVHlwZUNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9CdW5kbGVUeXBlQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsZ0VBQWdFO0FBRWhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHO0lBQzdCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLFNBQVM7SUFDdEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILGFBQWEsRUFBRSxXQUFXO0lBQzFCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7SUFDMUI7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxzQkFBc0I7Q0FDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9idW5kbGUtdHlwZXwzLjAuMlxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGUgcHVycG9zZSBvZiBhIGJ1bmRsZSAtIGhvdyBpdCB3YXMgaW50ZW5kZWQgdG8gYmUgdXNlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBCdW5kbGVUeXBlQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYmF0Y2g6IFRoZSBidW5kbGUgaXMgYSB0cmFuc2FjdGlvbiAtIGludGVuZGVkIHRvIGJlIHByb2Nlc3NlZCBieSBhIHNlcnZlciBhcyBhIGdyb3VwIG9mIGFjdGlvbnMuXHJcbiAgICovXHJcbiAgQmF0Y2g6IFwiYmF0Y2hcIixcclxuICAvKipcclxuICAgKiBiYXRjaC1yZXNwb25zZTogVGhlIGJ1bmRsZSBpcyBhIGJhdGNoIHJlc3BvbnNlLiBOb3RlIHRoYXQgYXMgYSBiYXRjaCwgc29tZSByZXNwb25zZXMgbWF5IGluZGljYXRlIGZhaWx1cmUgYW5kIG90aGVycyBzdWNjZXNzLlxyXG4gICAqL1xyXG4gIEJhdGNoUmVzcG9uc2U6IFwiYmF0Y2gtcmVzcG9uc2VcIixcclxuICAvKipcclxuICAgKiBjb2xsZWN0aW9uOiBUaGUgYnVuZGxlIGlzIGEgc2V0IG9mIHJlc291cmNlcyBjb2xsZWN0ZWQgaW50byBhIHNpbmdsZSBwYWNrYWdlIGZvciBlYXNlIG9mIGRpc3RyaWJ1dGlvbi5cclxuICAgKi9cclxuICBDb2xsZWN0aW9uOiBcImNvbGxlY3Rpb25cIixcclxuICAvKipcclxuICAgKiBkb2N1bWVudDogVGhlIGJ1bmRsZSBpcyBhIGRvY3VtZW50LiBUaGUgZmlyc3QgcmVzb3VyY2UgaXMgYSBDb21wb3NpdGlvbi5cclxuICAgKi9cclxuICBEb2N1bWVudDogXCJkb2N1bWVudFwiLFxyXG4gIC8qKlxyXG4gICAqIGhpc3Rvcnk6IFRoZSBidW5kbGUgaXMgYSBsaXN0IG9mIHJlc291cmNlcyBmcm9tIGEgaGlzdG9yeSBpbnRlcmFjdGlvbiBvbiBhIHNlcnZlci5cclxuICAgKi9cclxuICBIaXN0b3J5TGlzdDogXCJoaXN0b3J5XCIsXHJcbiAgLyoqXHJcbiAgICogbWVzc2FnZTogVGhlIGJ1bmRsZSBpcyBhIG1lc3NhZ2UuIFRoZSBmaXJzdCByZXNvdXJjZSBpcyBhIE1lc3NhZ2VIZWFkZXIuXHJcbiAgICovXHJcbiAgTWVzc2FnZTogXCJtZXNzYWdlXCIsXHJcbiAgLyoqXHJcbiAgICogc2VhcmNoc2V0OiBUaGUgYnVuZGxlIGlzIGEgbGlzdCBvZiByZXNvdXJjZXMgcmV0dXJuZWQgYXMgYSByZXN1bHQgb2YgYSBzZWFyY2gvcXVlcnkgaW50ZXJhY3Rpb24sIG9wZXJhdGlvbiwgb3IgbWVzc2FnZS5cclxuICAgKi9cclxuICBTZWFyY2hSZXN1bHRzOiBcInNlYXJjaHNldFwiLFxyXG4gIC8qKlxyXG4gICAqIHRyYW5zYWN0aW9uOiBUaGUgYnVuZGxlIGlzIGEgdHJhbnNhY3Rpb24gLSBpbnRlbmRlZCB0byBiZSBwcm9jZXNzZWQgYnkgYSBzZXJ2ZXIgYXMgYW4gYXRvbWljIGNvbW1pdC5cclxuICAgKi9cclxuICBUcmFuc2FjdGlvbjogXCJ0cmFuc2FjdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIHRyYW5zYWN0aW9uLXJlc3BvbnNlOiBUaGUgYnVuZGxlIGlzIGEgdHJhbnNhY3Rpb24gcmVzcG9uc2UuIEJlY2F1c2UgdGhlIHJlc3BvbnNlIGlzIGEgdHJhbnNhY3Rpb24gcmVzcG9uc2UsIHRoZSB0cmFuc2FjdGlvbiBoYXMgc3VjY2VlZGVkLCBhbmQgYWxsIHJlc3BvbnNlcyBhcmUgZXJyb3IgZnJlZS5cclxuICAgKi9cclxuICBUcmFuc2FjdGlvblJlc3BvbnNlOiBcInRyYW5zYWN0aW9uLXJlc3BvbnNlXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHRoZSBwdXJwb3NlIG9mIGEgYnVuZGxlIC0gaG93IGl0IHdhcyBpbnRlbmRlZCB0byBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQnVuZGxlVHlwZUNvZGVUeXBlID0gdHlwZW9mIEJ1bmRsZVR5cGVDb2Rlc1trZXlvZiB0eXBlb2YgQnVuZGxlVHlwZUNvZGVzXTtcclxuIl19