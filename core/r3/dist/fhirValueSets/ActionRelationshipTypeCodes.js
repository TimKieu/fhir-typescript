// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-relationship-type|3.0.2
/**
 * Defines the types of relationships between actions
 */
export const ActionRelationshipTypeCodes = {
    /**
     * after: The action must be performed after the related action
     */
    After: "after",
    /**
     * after-end: The action must be performed after the end of the related action
     */
    AfterEnd: "after-end",
    /**
     * after-start: The action must be performed after the start of the related action
     */
    AfterStart: "after-start",
    /**
     * before: The action must be performed before the related action
     */
    Before: "before",
    /**
     * before-end: The action must be performed before the end of the related action
     */
    BeforeEnd: "before-end",
    /**
     * before-start: The action must be performed before the start of the related action
     */
    BeforeStart: "before-start",
    /**
     * concurrent: The action must be performed concurrent with the related action
     */
    Concurrent: "concurrent",
    /**
     * concurrent-with-end: The action must be performed concurrent with the end of the related action
     */
    ConcurrentWithEnd: "concurrent-with-end",
    /**
     * concurrent-with-start: The action must be performed concurrent with the start of the related action
     */
    ConcurrentWithStart: "concurrent-with-start",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uUmVsYXRpb25zaGlwVHlwZUNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNkVBQTZFO0FBRTdFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUc7SUFDekM7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFdBQVc7SUFDckI7O09BRUc7SUFDSCxVQUFVLEVBQUUsYUFBYTtJQUN6Qjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFlBQVk7SUFDdkI7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILFVBQVUsRUFBRSxZQUFZO0lBQ3hCOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUUscUJBQXFCO0lBQ3hDOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsdUJBQXVCO0NBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlfDMuMC4yXHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgdHlwZXMgb2YgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGFjdGlvbnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBBY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYWZ0ZXI6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYWZ0ZXIgdGhlIHJlbGF0ZWQgYWN0aW9uXHJcbiAgICovXHJcbiAgQWZ0ZXI6IFwiYWZ0ZXJcIixcclxuICAvKipcclxuICAgKiBhZnRlci1lbmQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb25cclxuICAgKi9cclxuICBBZnRlckVuZDogXCJhZnRlci1lbmRcIixcclxuICAvKipcclxuICAgKiBhZnRlci1zdGFydDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBhZnRlciB0aGUgc3RhcnQgb2YgdGhlIHJlbGF0ZWQgYWN0aW9uXHJcbiAgICovXHJcbiAgQWZ0ZXJTdGFydDogXCJhZnRlci1zdGFydFwiLFxyXG4gIC8qKlxyXG4gICAqIGJlZm9yZTogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBiZWZvcmUgdGhlIHJlbGF0ZWQgYWN0aW9uXHJcbiAgICovXHJcbiAgQmVmb3JlOiBcImJlZm9yZVwiLFxyXG4gIC8qKlxyXG4gICAqIGJlZm9yZS1lbmQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHJlbGF0ZWQgYWN0aW9uXHJcbiAgICovXHJcbiAgQmVmb3JlRW5kOiBcImJlZm9yZS1lbmRcIixcclxuICAvKipcclxuICAgKiBiZWZvcmUtc3RhcnQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYmVmb3JlIHRoZSBzdGFydCBvZiB0aGUgcmVsYXRlZCBhY3Rpb25cclxuICAgKi9cclxuICBCZWZvcmVTdGFydDogXCJiZWZvcmUtc3RhcnRcIixcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50OiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGNvbmN1cnJlbnQgd2l0aCB0aGUgcmVsYXRlZCBhY3Rpb25cclxuICAgKi9cclxuICBDb25jdXJyZW50OiBcImNvbmN1cnJlbnRcIixcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50LXdpdGgtZW5kOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGNvbmN1cnJlbnQgd2l0aCB0aGUgZW5kIG9mIHRoZSByZWxhdGVkIGFjdGlvblxyXG4gICAqL1xyXG4gIENvbmN1cnJlbnRXaXRoRW5kOiBcImNvbmN1cnJlbnQtd2l0aC1lbmRcIixcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50LXdpdGgtc3RhcnQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgY29uY3VycmVudCB3aXRoIHRoZSBzdGFydCBvZiB0aGUgcmVsYXRlZCBhY3Rpb25cclxuICAgKi9cclxuICBDb25jdXJyZW50V2l0aFN0YXJ0OiBcImNvbmN1cnJlbnQtd2l0aC1zdGFydFwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgdGhlIHR5cGVzIG9mIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBhY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kZVR5cGUgPSB0eXBlb2YgQWN0aW9uUmVsYXRpb25zaGlwVHlwZUNvZGVzW2tleW9mIHR5cGVvZiBBY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kZXNdO1xyXG4iXX0=