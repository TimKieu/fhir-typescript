// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-diet|3.0.2
/**
 * This value set defines a set of codes that can be used to indicate dietary preferences or restrictions a patient may have.
 */
export const EncounterDietCodings = {
    /**
     * dairy-free: Excludes dairy products.
     */
    DairyFree: {
        display: "Dairy Free",
        code: "dairy-free",
        system: "http://hl7.org/fhir/diet",
    },
    /**
     * gluten-free: Excludes ingredients containing gluten.
     */
    GlutenFree: {
        display: "Gluten Free",
        code: "gluten-free",
        system: "http://hl7.org/fhir/diet",
    },
    /**
     * halal: Foods that conform to Islamic law.
     */
    Halal: {
        display: "Halal",
        code: "halal",
        system: "http://hl7.org/fhir/diet",
    },
    /**
     * kosher: Foods that conform to Jewish dietary law.
     */
    Kosher: {
        display: "Kosher",
        code: "kosher",
        system: "http://hl7.org/fhir/diet",
    },
    /**
     * nut-free: Excludes ingredients containing nuts.
     */
    NutFree: {
        display: "Nut Free",
        code: "nut-free",
        system: "http://hl7.org/fhir/diet",
    },
    /**
     * vegan: Food without meat, poultry, seafood, eggs, dairy products and other animal-derived substances.
     */
    Vegan: {
        display: "Vegan",
        code: "vegan",
        system: "http://hl7.org/fhir/diet",
    },
    /**
     * vegetarian: Food without meat, poultry or seafood.
     */
    Vegetarian: {
        display: "Vegetarian",
        code: "vegetarian",
        system: "http://hl7.org/fhir/diet",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyRGlldENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0VuY291bnRlckRpZXRDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQXNDbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsMEJBQTBCO0tBQ25DO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsMEJBQTBCO0tBQ25DO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwQkFBMEI7S0FDbkM7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDBCQUEwQjtLQUNuQztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBCQUEwQjtLQUNuQztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMEJBQTBCO0tBQ25DO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsMEJBQTBCO0tBQ25DO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbmNvdW50ZXItZGlldHwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBkaWV0YXJ5IHByZWZlcmVuY2VzIG9yIHJlc3RyaWN0aW9ucyBhIHBhdGllbnQgbWF5IGhhdmUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFbmNvdW50ZXJEaWV0Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkYWlyeS1mcmVlOiBFeGNsdWRlcyBkYWlyeSBwcm9kdWN0cy5cclxuICAgKi9cclxuICBEYWlyeUZyZWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ2x1dGVuLWZyZWU6IEV4Y2x1ZGVzIGluZ3JlZGllbnRzIGNvbnRhaW5pbmcgZ2x1dGVuLlxyXG4gICAqL1xyXG4gIEdsdXRlbkZyZWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaGFsYWw6IEZvb2RzIHRoYXQgY29uZm9ybSB0byBJc2xhbWljIGxhdy5cclxuICAgKi9cclxuICBIYWxhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBrb3NoZXI6IEZvb2RzIHRoYXQgY29uZm9ybSB0byBKZXdpc2ggZGlldGFyeSBsYXcuXHJcbiAgICovXHJcbiAgS29zaGVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG51dC1mcmVlOiBFeGNsdWRlcyBpbmdyZWRpZW50cyBjb250YWluaW5nIG51dHMuXHJcbiAgICovXHJcbiAgTnV0RnJlZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB2ZWdhbjogRm9vZCB3aXRob3V0IG1lYXQsIHBvdWx0cnksIHNlYWZvb2QsIGVnZ3MsIGRhaXJ5IHByb2R1Y3RzIGFuZCBvdGhlciBhbmltYWwtZGVyaXZlZCBzdWJzdGFuY2VzLlxyXG4gICAqL1xyXG4gIFZlZ2FuOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHZlZ2V0YXJpYW46IEZvb2Qgd2l0aG91dCBtZWF0LCBwb3VsdHJ5IG9yIHNlYWZvb2QuXHJcbiAgICovXHJcbiAgVmVnZXRhcmlhbjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBkaWV0YXJ5IHByZWZlcmVuY2VzIG9yIHJlc3RyaWN0aW9ucyBhIHBhdGllbnQgbWF5IGhhdmUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRW5jb3VudGVyRGlldENvZGluZ3M6RW5jb3VudGVyRGlldENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGFpcnktZnJlZTogRXhjbHVkZXMgZGFpcnkgcHJvZHVjdHMuXHJcbiAgICovXHJcbiAgRGFpcnlGcmVlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhaXJ5IEZyZWVcIixcclxuICAgIGNvZGU6IFwiZGFpcnktZnJlZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGlldFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ2x1dGVuLWZyZWU6IEV4Y2x1ZGVzIGluZ3JlZGllbnRzIGNvbnRhaW5pbmcgZ2x1dGVuLlxyXG4gICAqL1xyXG4gIEdsdXRlbkZyZWU6IHtcclxuICAgIGRpc3BsYXk6IFwiR2x1dGVuIEZyZWVcIixcclxuICAgIGNvZGU6IFwiZ2x1dGVuLWZyZWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RpZXRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGhhbGFsOiBGb29kcyB0aGF0IGNvbmZvcm0gdG8gSXNsYW1pYyBsYXcuXHJcbiAgICovXHJcbiAgSGFsYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiSGFsYWxcIixcclxuICAgIGNvZGU6IFwiaGFsYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RpZXRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGtvc2hlcjogRm9vZHMgdGhhdCBjb25mb3JtIHRvIEpld2lzaCBkaWV0YXJ5IGxhdy5cclxuICAgKi9cclxuICBLb3NoZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiS29zaGVyXCIsXHJcbiAgICBjb2RlOiBcImtvc2hlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGlldFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbnV0LWZyZWU6IEV4Y2x1ZGVzIGluZ3JlZGllbnRzIGNvbnRhaW5pbmcgbnV0cy5cclxuICAgKi9cclxuICBOdXRGcmVlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk51dCBGcmVlXCIsXHJcbiAgICBjb2RlOiBcIm51dC1mcmVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kaWV0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2ZWdhbjogRm9vZCB3aXRob3V0IG1lYXQsIHBvdWx0cnksIHNlYWZvb2QsIGVnZ3MsIGRhaXJ5IHByb2R1Y3RzIGFuZCBvdGhlciBhbmltYWwtZGVyaXZlZCBzdWJzdGFuY2VzLlxyXG4gICAqL1xyXG4gIFZlZ2FuOiB7XHJcbiAgICBkaXNwbGF5OiBcIlZlZ2FuXCIsXHJcbiAgICBjb2RlOiBcInZlZ2FuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kaWV0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2ZWdldGFyaWFuOiBGb29kIHdpdGhvdXQgbWVhdCwgcG91bHRyeSBvciBzZWFmb29kLlxyXG4gICAqL1xyXG4gIFZlZ2V0YXJpYW46IHtcclxuICAgIGRpc3BsYXk6IFwiVmVnZXRhcmlhblwiLFxyXG4gICAgY29kZTogXCJ2ZWdldGFyaWFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kaWV0XCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19