// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-transform|3.0.2
/**
 * How data is copied/created
 */
export const MapTransformCodes = {
    /**
     * append: append(source...) - source is element or string
     */
    Append: "append",
    /**
     * c: Create a Coding. Parameters = (system. Code[, display])
     */
    C: "c",
    /**
     * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known
     */
    Cast: "cast",
    /**
     * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display])
     */
    Cc: "cc",
    /**
     * copy: copy(source)
     */
    Copy: "copy",
    /**
     * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value
     */
    Cp: "cp",
    /**
     * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it
     */
    Create: "create",
    /**
     * dateOp: Perform a date operation. *Parameters to be documented*
     */
    DateOp: "dateOp",
    /**
     * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped
     */
    Escape: "escape",
    /**
     * evaluate: Execute the supplied fluentpath expression and use the value returned by that
     */
    Evaluate: "evaluate",
    /**
     * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set
     */
    Id: "id",
    /**
     * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter
     */
    Pointer: "pointer",
    /**
     * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit
     */
    Qty: "qty",
    /**
     * reference: reference(source : object) - return a string that references the provided tree properly
     */
    Reference: "reference",
    /**
     * translate: translate(source, uri_of_map) - use the translate operation
     */
    Translate: "translate",
    /**
     * truncate: truncate(source, length) - source must be stringy type
     */
    Truncate: "truncate",
    /**
     * uuid: Generate a random UUID (in lowercase). No Parameters
     */
    Uuid: "uuid",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVHJhbnNmb3JtQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01hcFRyYW5zZm9ybUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGtFQUFrRTtBQUVsRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9COztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxDQUFDLEVBQUUsR0FBRztJQUNOOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILEVBQUUsRUFBRSxJQUFJO0lBQ1I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tYXAtdHJhbnNmb3JtfDMuMC4yXHJcblxyXG4vKipcclxuICogSG93IGRhdGEgaXMgY29waWVkL2NyZWF0ZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBNYXBUcmFuc2Zvcm1Db2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhcHBlbmQ6IGFwcGVuZChzb3VyY2UuLi4pIC0gc291cmNlIGlzIGVsZW1lbnQgb3Igc3RyaW5nXHJcbiAgICovXHJcbiAgQXBwZW5kOiBcImFwcGVuZFwiLFxyXG4gIC8qKlxyXG4gICAqIGM6IENyZWF0ZSBhIENvZGluZy4gUGFyYW1ldGVycyA9IChzeXN0ZW0uIENvZGVbLCBkaXNwbGF5XSlcclxuICAgKi9cclxuICBDOiBcImNcIixcclxuICAvKipcclxuICAgKiBjYXN0OiBjYXN0KHNvdXJjZSwgdHlwZT8pIC0gY2FzZSBzb3VyY2UgZnJvbSBvbmUgdHlwZSB0byBhbm90aGVyLiB0YXJnZXQgdHlwZSBjYW4gYmUgbGVmdCBhcyBpbXBsaWNpdCBpZiB0aGVyZSBpcyBvbmUgYW5kIG9ubHkgb25lIHRhcmdldCB0eXBlIGtub3duXHJcbiAgICovXHJcbiAgQ2FzdDogXCJjYXN0XCIsXHJcbiAgLyoqXHJcbiAgICogY2M6IENyZWF0ZSBhIENvZGVhYmxlQ29uY2VwdC4gUGFyYW1ldGVycyA9ICh0ZXh0KSBvciAoc3lzdGVtLiBDb2RlWywgZGlzcGxheV0pXHJcbiAgICovXHJcbiAgQ2M6IFwiY2NcIixcclxuICAvKipcclxuICAgKiBjb3B5OiBjb3B5KHNvdXJjZSlcclxuICAgKi9cclxuICBDb3B5OiBcImNvcHlcIixcclxuICAvKipcclxuICAgKiBjcDogQ3JlYXRlIGEgY29udGFjdCBkZXRhaWxzLiBQYXJhbWV0ZXJzID0gKHZhbHVlKSBvciAoc3lzdGVtLCB2YWx1ZSkuIElmIG5vIHN5c3RlbSBpcyBwcm92aWRlZCwgdGhlIHN5c3RlbSBzaG91bGQgYmUgaW5mZXJyZWQgZnJvbSB0aGUgY29udGVudCBvZiB0aGUgdmFsdWVcclxuICAgKi9cclxuICBDcDogXCJjcFwiLFxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZTogY3JlYXRlKHR5cGUgOiBzdHJpbmcpIC0gdHlwZSBpcyBwYXNzZWQgdGhyb3VnaCB0byB0aGUgYXBwbGljYXRpb24gb24gdGhlIHN0YW5kYXJkIEFQSSwgYW5kIG11c3QgYmUga25vd24gYnkgaXRcclxuICAgKi9cclxuICBDcmVhdGU6IFwiY3JlYXRlXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0ZU9wOiBQZXJmb3JtIGEgZGF0ZSBvcGVyYXRpb24uICpQYXJhbWV0ZXJzIHRvIGJlIGRvY3VtZW50ZWQqXHJcbiAgICovXHJcbiAgRGF0ZU9wOiBcImRhdGVPcFwiLFxyXG4gIC8qKlxyXG4gICAqIGVzY2FwZTogZXNjYXBlKHNvdXJjZSwgZm10MSwgZm10MikgLSBjaGFuZ2Ugc291cmNlIGZyb20gb25lIGtpbmQgb2YgZXNjYXBpbmcgdG8gYW5vdGhlciAocGxhaW4sIGphdmEsIHhtbCwganNvbikuIG5vdGUgdGhhdCB0aGlzIGlzIGZvciB3aGVuIHRoZSBzdHJpbmcgaXRzZWxmIGlzIGVzY2FwZWRcclxuICAgKi9cclxuICBFc2NhcGU6IFwiZXNjYXBlXCIsXHJcbiAgLyoqXHJcbiAgICogZXZhbHVhdGU6IEV4ZWN1dGUgdGhlIHN1cHBsaWVkIGZsdWVudHBhdGggZXhwcmVzc2lvbiBhbmQgdXNlIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGF0XHJcbiAgICovXHJcbiAgRXZhbHVhdGU6IFwiZXZhbHVhdGVcIixcclxuICAvKipcclxuICAgKiBpZDogQ3JlYXRlIGFuIGlkZW50aWZpZXIuIFBhcmFtZXRlcnMgPSAoc3lzdGVtLCB2YWx1ZVssIHR5cGVdKSB3aGVyZSB0eXBlIGlzIGEgY29kZSBmcm9tIHRoZSBpZGVudGlmaWVyIHR5cGUgdmFsdWUgc2V0XHJcbiAgICovXHJcbiAgSWQ6IFwiaWRcIixcclxuICAvKipcclxuICAgKiBwb2ludGVyOiBSZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHN0cmluZyB0byBwdXQgaW4gYSByZWZlcmVuY2UgdGhhdCByZWZlcnMgdG8gdGhlIHJlc291cmNlIHByb3ZpZGVkIGFzIGEgcGFyYW1ldGVyXHJcbiAgICovXHJcbiAgUG9pbnRlcjogXCJwb2ludGVyXCIsXHJcbiAgLyoqXHJcbiAgICogcXR5OiBDcmVhdGUgYSBxdWFudGl0eS4gUGFyYW1ldGVycyA9ICh0ZXh0KSBvciAodmFsdWUsIHVuaXQsIFtzeXN0ZW0sIGNvZGVdKSB3aGVyZSB0ZXh0IGlzIHRoZSBuYXR1cmFsIHJlcHJlc2VudGF0aW9uIGUuZy4gW2NvbXBhcmF0b3JddmFsdWVbc3BhY2VddW5pdFxyXG4gICAqL1xyXG4gIFF0eTogXCJxdHlcIixcclxuICAvKipcclxuICAgKiByZWZlcmVuY2U6IHJlZmVyZW5jZShzb3VyY2UgOiBvYmplY3QpIC0gcmV0dXJuIGEgc3RyaW5nIHRoYXQgcmVmZXJlbmNlcyB0aGUgcHJvdmlkZWQgdHJlZSBwcm9wZXJseVxyXG4gICAqL1xyXG4gIFJlZmVyZW5jZTogXCJyZWZlcmVuY2VcIixcclxuICAvKipcclxuICAgKiB0cmFuc2xhdGU6IHRyYW5zbGF0ZShzb3VyY2UsIHVyaV9vZl9tYXApIC0gdXNlIHRoZSB0cmFuc2xhdGUgb3BlcmF0aW9uXHJcbiAgICovXHJcbiAgVHJhbnNsYXRlOiBcInRyYW5zbGF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHRydW5jYXRlOiB0cnVuY2F0ZShzb3VyY2UsIGxlbmd0aCkgLSBzb3VyY2UgbXVzdCBiZSBzdHJpbmd5IHR5cGVcclxuICAgKi9cclxuICBUcnVuY2F0ZTogXCJ0cnVuY2F0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHV1aWQ6IEdlbmVyYXRlIGEgcmFuZG9tIFVVSUQgKGluIGxvd2VyY2FzZSkuIE5vIFBhcmFtZXRlcnNcclxuICAgKi9cclxuICBVdWlkOiBcInV1aWRcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBIb3cgZGF0YSBpcyBjb3BpZWQvY3JlYXRlZFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFwVHJhbnNmb3JtQ29kZVR5cGUgPSB0eXBlb2YgTWFwVHJhbnNmb3JtQ29kZXNba2V5b2YgdHlwZW9mIE1hcFRyYW5zZm9ybUNvZGVzXTtcclxuIl19