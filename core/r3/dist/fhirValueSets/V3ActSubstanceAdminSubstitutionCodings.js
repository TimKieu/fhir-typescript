// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/v3-ActSubstanceAdminSubstitutionCode|2014-03-26
/**
 * No Description Provided
 */
export const V3ActSubstanceAdminSubstitutionCodings = {
    /**
     * BC: Description:
     *
     *
     *                         Substitution occurred or is permitted between equivalent Brands but not Generics
     *
     *
     *                            Examples:
     *
     *
     *
     *                            Zestril  for Prinivil
     *                            Coumadin for Jantoven
     */
    BrandComposition: {
        display: "brand composition",
        code: "BC",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * E: Description: Substitution occurred or is permitted with another bioequivalent and therapeutically equivalent product.
     */
    Equivalent: {
        display: "equivalent",
        code: "E",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * EC: Description:
     *
     *
     *                         Substitution occurred or is permitted with another product that is a:
     *
     *
     *                            pharmaceutical alternative containing the same active ingredient but is formulated with different salt, ester
     *                            pharmaceutical equivalent that has the same active ingredient, strength, dosage form and route of administration
     *
     *
     *                            Examples:
     *
     *
     *
     *
     *                               Pharmaceutical alternative: Erythromycin Ethylsuccinate for Erythromycin Stearate
     *
     *                               Pharmaceutical equivalent: Lisonpril for Zestril
     */
    EquivalentComposition: {
        display: "equivalent composition",
        code: "EC",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * F: Description: This substitution was performed or is permitted based on formulary guidelines.
     */
    Formulary: {
        display: "formulary",
        code: "F",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * G: Description: Substitution occurred or is permitted between equivalent Generics but not Brands
     *
     *
     *                            Examples:
     *
     *
     *
     *                            Lisnopril (Lupin Corp) for Lisnopril (Wockhardt Corp)
     */
    GenericComposition: {
        display: "generic composition",
        code: "G",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * N: No substitution occurred or is permitted.
     */
    None: {
        display: "none",
        code: "N",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * TB: Description: Substitution occurred or is permitted between therapeutically equivalent Brands but not Generics
     * &gt;
     *                            Examples:
     *
     *
     *
     *                            Zantac for Tagamet
     */
    TherapeuticBrand: {
        display: "therapeutic brand",
        code: "TB",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * TE: Description: Substitution occurred or is permitted with another product having the same therapeutic objective and safety profile.
     *
     *
     *                            Examples:
     *
     *
     *
     *                            ranitidine for Tagamet
     */
    TherapeuticAlternative: {
        display: "therapeutic alternative",
        code: "TE",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
    /**
     * TG: Description: Substitution occurred or is permitted between therapeutically equivalent Generics but not Brands
     * &gt;
     *                            Examples:
     *
     *
     *
     *                            Ranitidine  for cimetidine
     */
    TherapeuticGeneric: {
        display: "therapeutic generic",
        code: "TG",
        system: "http://hl7.org/fhir/v3/substanceAdminSubstitution",
    },
};
//# sourceMappingURL=data:application/json;base64,