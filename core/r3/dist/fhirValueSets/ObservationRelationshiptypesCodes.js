// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-relationshiptypes|3.0.2
/**
 * Codes specifying how two observations are related.
 */
export const ObservationRelationshiptypesCodes = {
    /**
     * derived-from: The target resource (Observation or QuestionnaireResponse) is part of the information from which this observation value is derived. (e.g. calculated anion gap, Apgar score)  NOTE:  "derived-from" is the only logical choice when referencing QuestionnaireResponse.
     */
    DerivedFrom: "derived-from",
    /**
     * has-member: This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    HasMember: "has-member",
    /**
     * interfered-by: The value of the target observation interferes (degrades quality, or prevents valid observation) with the semantics of the source observation (e.g. a hemolysis measure target from a plasma potassium measure, which has no value).
     */
    InterferedBy: "interfered-by",
    /**
     * qualified-by: The value of the target observation qualifies (refines) the semantics of the source observation (e.g. a lipemia measure target from a plasma measure).
     */
    QualifiedBy: "qualified-by",
    /**
     * replaces: This observation replaces a previous observation (i.e. a revised value). The target observation is now obsolete.
     */
    Replaces: "replaces",
    /**
     * sequel-to: This observation follows the target observation (e.g. timed tests such as Glucose Tolerance Test).
     */
    SequelTo: "sequel-to",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9PYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsa0ZBQWtGO0FBRWxGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUNBQWlDLEdBQUc7SUFDL0M7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILFNBQVMsRUFBRSxZQUFZO0lBQ3ZCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLGVBQWU7SUFDN0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFdBQVc7Q0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L29ic2VydmF0aW9uLXJlbGF0aW9uc2hpcHR5cGVzfDMuMC4yXHJcblxyXG4vKipcclxuICogQ29kZXMgc3BlY2lmeWluZyBob3cgdHdvIG9ic2VydmF0aW9ucyBhcmUgcmVsYXRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBPYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogZGVyaXZlZC1mcm9tOiBUaGUgdGFyZ2V0IHJlc291cmNlIChPYnNlcnZhdGlvbiBvciBRdWVzdGlvbm5haXJlUmVzcG9uc2UpIGlzIHBhcnQgb2YgdGhlIGluZm9ybWF0aW9uIGZyb20gd2hpY2ggdGhpcyBvYnNlcnZhdGlvbiB2YWx1ZSBpcyBkZXJpdmVkLiAoZS5nLiBjYWxjdWxhdGVkIGFuaW9uIGdhcCwgQXBnYXIgc2NvcmUpICBOT1RFOiAgXCJkZXJpdmVkLWZyb21cIiBpcyB0aGUgb25seSBsb2dpY2FsIGNob2ljZSB3aGVuIHJlZmVyZW5jaW5nIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5cclxuICAgKi9cclxuICBEZXJpdmVkRnJvbTogXCJkZXJpdmVkLWZyb21cIixcclxuICAvKipcclxuICAgKiBoYXMtbWVtYmVyOiBUaGlzIG9ic2VydmF0aW9uIGlzIGEgZ3JvdXAgb2JzZXJ2YXRpb24gKGUuZy4gYSBiYXR0ZXJ5LCBhIHBhbmVsIG9mIHRlc3RzLCBhIHNldCBvZiB2aXRhbCBzaWduIG1lYXN1cmVtZW50cykgdGhhdCBpbmNsdWRlcyB0aGUgdGFyZ2V0IGFzIGEgbWVtYmVyIG9mIHRoZSBncm91cC5cclxuICAgKi9cclxuICBIYXNNZW1iZXI6IFwiaGFzLW1lbWJlclwiLFxyXG4gIC8qKlxyXG4gICAqIGludGVyZmVyZWQtYnk6IFRoZSB2YWx1ZSBvZiB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIGludGVyZmVyZXMgKGRlZ3JhZGVzIHF1YWxpdHksIG9yIHByZXZlbnRzIHZhbGlkIG9ic2VydmF0aW9uKSB3aXRoIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIHNvdXJjZSBvYnNlcnZhdGlvbiAoZS5nLiBhIGhlbW9seXNpcyBtZWFzdXJlIHRhcmdldCBmcm9tIGEgcGxhc21hIHBvdGFzc2l1bSBtZWFzdXJlLCB3aGljaCBoYXMgbm8gdmFsdWUpLlxyXG4gICAqL1xyXG4gIEludGVyZmVyZWRCeTogXCJpbnRlcmZlcmVkLWJ5XCIsXHJcbiAgLyoqXHJcbiAgICogcXVhbGlmaWVkLWJ5OiBUaGUgdmFsdWUgb2YgdGhlIHRhcmdldCBvYnNlcnZhdGlvbiBxdWFsaWZpZXMgKHJlZmluZXMpIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIHNvdXJjZSBvYnNlcnZhdGlvbiAoZS5nLiBhIGxpcGVtaWEgbWVhc3VyZSB0YXJnZXQgZnJvbSBhIHBsYXNtYSBtZWFzdXJlKS5cclxuICAgKi9cclxuICBRdWFsaWZpZWRCeTogXCJxdWFsaWZpZWQtYnlcIixcclxuICAvKipcclxuICAgKiByZXBsYWNlczogVGhpcyBvYnNlcnZhdGlvbiByZXBsYWNlcyBhIHByZXZpb3VzIG9ic2VydmF0aW9uIChpLmUuIGEgcmV2aXNlZCB2YWx1ZSkuIFRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gaXMgbm93IG9ic29sZXRlLlxyXG4gICAqL1xyXG4gIFJlcGxhY2VzOiBcInJlcGxhY2VzXCIsXHJcbiAgLyoqXHJcbiAgICogc2VxdWVsLXRvOiBUaGlzIG9ic2VydmF0aW9uIGZvbGxvd3MgdGhlIHRhcmdldCBvYnNlcnZhdGlvbiAoZS5nLiB0aW1lZCB0ZXN0cyBzdWNoIGFzIEdsdWNvc2UgVG9sZXJhbmNlIFRlc3QpLlxyXG4gICAqL1xyXG4gIFNlcXVlbFRvOiBcInNlcXVlbC10b1wiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIHNwZWNpZnlpbmcgaG93IHR3byBvYnNlcnZhdGlvbnMgYXJlIHJlbGF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kZVR5cGUgPSB0eXBlb2YgT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGVzW2tleW9mIHR5cGVvZiBPYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kZXNdO1xyXG4iXX0=