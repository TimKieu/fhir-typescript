// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/request-intent|3.0.2
/**
 * Codes indicating the degree of authority/intentionality associated with a request
 */
export const RequestIntentCodes = {
    /**
     * filler-order: The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order
     */
    FillerOrder: "filler-order",
    /**
     * instance-order: An order created in fulfillment of a broader order that represents the authorization for a single activity occurrence.  E.g. The administration of a single dose of a drug.
     */
    InstanceOrder: "instance-order",
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or other constraints among a set of requests.
     * Refer to [[[RequestGroup]]] for additional information on how this status is used
     */
    Option: "option",
    /**
     * order: The request represents a request/demand and authorization for action
     */
    Order: "order",
    /**
     * original-order: The request represents an original authorization for action
     */
    OriginalOrder: "original-order",
    /**
     * plan: The request represents an intension to ensure something occurs without providing an authorization for others to act
     */
    Plan: "plan",
    /**
     * proposal: The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
     */
    Proposal: "proposal",
    /**
     * reflex-order: The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization
     */
    ReflexOrder: "reflex-order",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdEludGVudENvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZXF1ZXN0SW50ZW50Q29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsbUVBQW1FO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUc7SUFDaEM7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7OztPQUdHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGdCQUFnQjtJQUMvQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFdBQVcsRUFBRSxjQUFjO0NBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVxdWVzdC1pbnRlbnR8My4wLjJcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpbmRpY2F0aW5nIHRoZSBkZWdyZWUgb2YgYXV0aG9yaXR5L2ludGVudGlvbmFsaXR5IGFzc29jaWF0ZWQgd2l0aCBhIHJlcXVlc3RcclxuICovXHJcbmV4cG9ydCBjb25zdCBSZXF1ZXN0SW50ZW50Q29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlsbGVyLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSB2aWV3IG9mIGFuIGF1dGhvcml6YXRpb24gaW5zdGFudGlhdGVkIGJ5IGEgZnVsZmlsbGluZyBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBmdWxmaWxsZXIncyBpbnRlbnRpb24gdG8gYWN0IHVwb24gYSBzdWJtaXR0ZWQgb3JkZXJcclxuICAgKi9cclxuICBGaWxsZXJPcmRlcjogXCJmaWxsZXItb3JkZXJcIixcclxuICAvKipcclxuICAgKiBpbnN0YW5jZS1vcmRlcjogQW4gb3JkZXIgY3JlYXRlZCBpbiBmdWxmaWxsbWVudCBvZiBhIGJyb2FkZXIgb3JkZXIgdGhhdCByZXByZXNlbnRzIHRoZSBhdXRob3JpemF0aW9uIGZvciBhIHNpbmdsZSBhY3Rpdml0eSBvY2N1cnJlbmNlLiAgRS5nLiBUaGUgYWRtaW5pc3RyYXRpb24gb2YgYSBzaW5nbGUgZG9zZSBvZiBhIGRydWcuXHJcbiAgICovXHJcbiAgSW5zdGFuY2VPcmRlcjogXCJpbnN0YW5jZS1vcmRlclwiLFxyXG4gIC8qKlxyXG4gICAqIG9wdGlvbjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhIGNvbXBvbmVudCBvciBvcHRpb24gZm9yIGEgUmVxdWVzdEdyb3VwIHRoYXQgZXN0YWJsaXNoZXMgdGltaW5nLCBjb25kaXRpb25hbGl0eSBhbmQvb3Igb3RoZXIgY29uc3RyYWludHMgYW1vbmcgYSBzZXQgb2YgcmVxdWVzdHMuXHJcbiAgICogUmVmZXIgdG8gW1tbUmVxdWVzdEdyb3VwXV1dIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9uIGhvdyB0aGlzIHN0YXR1cyBpcyB1c2VkXHJcbiAgICovXHJcbiAgT3B0aW9uOiBcIm9wdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIG9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgcmVxdWVzdC9kZW1hbmQgYW5kIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvblxyXG4gICAqL1xyXG4gIE9yZGVyOiBcIm9yZGVyXCIsXHJcbiAgLyoqXHJcbiAgICogb3JpZ2luYWwtb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gb3JpZ2luYWwgYXV0aG9yaXphdGlvbiBmb3IgYWN0aW9uXHJcbiAgICovXHJcbiAgT3JpZ2luYWxPcmRlcjogXCJvcmlnaW5hbC1vcmRlclwiLFxyXG4gIC8qKlxyXG4gICAqIHBsYW46IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gaW50ZW5zaW9uIHRvIGVuc3VyZSBzb21ldGhpbmcgb2NjdXJzIHdpdGhvdXQgcHJvdmlkaW5nIGFuIGF1dGhvcml6YXRpb24gZm9yIG90aGVycyB0byBhY3RcclxuICAgKi9cclxuICBQbGFuOiBcInBsYW5cIixcclxuICAvKipcclxuICAgKiBwcm9wb3NhbDogVGhlIHJlcXVlc3QgaXMgYSBzdWdnZXN0aW9uIG1hZGUgYnkgc29tZW9uZS9zb21ldGhpbmcgdGhhdCBkb2Vzbid0IGhhdmUgYW4gaW50ZW50aW9uIHRvIGVuc3VyZSBpdCBvY2N1cnMgYW5kIHdpdGhvdXQgcHJvdmlkaW5nIGFuIGF1dGhvcml6YXRpb24gdG8gYWN0XHJcbiAgICovXHJcbiAgUHJvcG9zYWw6IFwicHJvcG9zYWxcIixcclxuICAvKipcclxuICAgKiByZWZsZXgtb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgc3VwcGxlbWVudGFsIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvbiBiYXNlZCBvbiBhIHBhcmVudCBhdXRob3JpemF0aW9uIHRvZ2V0aGVyIHdpdGggaW5pdGlhbCByZXN1bHRzIG9mIHRoZSBhY3Rpb24gdGFrZW4gYWdhaW5zdCB0aGF0IHBhcmVudCBhdXRob3JpemF0aW9uXHJcbiAgICovXHJcbiAgUmVmbGV4T3JkZXI6IFwicmVmbGV4LW9yZGVyXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZXMgaW5kaWNhdGluZyB0aGUgZGVncmVlIG9mIGF1dGhvcml0eS9pbnRlbnRpb25hbGl0eSBhc3NvY2lhdGVkIHdpdGggYSByZXF1ZXN0XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZXF1ZXN0SW50ZW50Q29kZVR5cGUgPSB0eXBlb2YgUmVxdWVzdEludGVudENvZGVzW2tleW9mIHR5cGVvZiBSZXF1ZXN0SW50ZW50Q29kZXNdO1xyXG4iXX0=