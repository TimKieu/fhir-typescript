// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/concept-property-type|3.0.2
/**
 * The type of a property value
 */
export const ConceptPropertyTypeCodings = {
    /**
     * boolean: The property value is a boolean true | false
     */
    VALBoolean: {
        display: "boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * code: The property value is a code that identifies a concept defined in the code system
     */
    CodeInternalReference: {
        display: "code (internal reference)",
        code: "code",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * Coding: The property  value is a code defined in an external code system. This may be used for translations, but is not the intent
     */
    CodingExternalReference: {
        display: "Coding (external reference)",
        code: "Coding",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * dateTime: The property is a date or a date + time
     */
    DateTime: {
        display: "dateTime",
        code: "dateTime",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * integer: The property value is a string (often used to assign ranking values to concepts for supporting score assessments)
     */
    Integer: {
        display: "integer",
        code: "integer",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * string: The property value is a string
     */
    VALString: {
        display: "string",
        code: "string",
        system: "http://hl7.org/fhir/concept-property-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uY2VwdFByb3BlcnR5VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvbmNlcHRQcm9wZXJ0eVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDBFQUEwRTtBQWtDMUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBaUM7SUFDdEU7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCx1QkFBdUIsRUFBRTtRQUN2QixPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbmNlcHQtcHJvcGVydHktdHlwZXwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIGEgcHJvcGVydHkgdmFsdWVcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbmNlcHRQcm9wZXJ0eVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJvb2xlYW46IFRoZSBwcm9wZXJ0eSB2YWx1ZSBpcyBhIGJvb2xlYW4gdHJ1ZSB8IGZhbHNlXHJcbiAgICovXHJcbiAgVkFMQm9vbGVhbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb2RlOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBjb2RlIHRoYXQgaWRlbnRpZmllcyBhIGNvbmNlcHQgZGVmaW5lZCBpbiB0aGUgY29kZSBzeXN0ZW1cclxuICAgKi9cclxuICBDb2RlSW50ZXJuYWxSZWZlcmVuY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kaW5nOiBUaGUgcHJvcGVydHkgIHZhbHVlIGlzIGEgY29kZSBkZWZpbmVkIGluIGFuIGV4dGVybmFsIGNvZGUgc3lzdGVtLiBUaGlzIG1heSBiZSB1c2VkIGZvciB0cmFuc2xhdGlvbnMsIGJ1dCBpcyBub3QgdGhlIGludGVudFxyXG4gICAqL1xyXG4gIENvZGluZ0V4dGVybmFsUmVmZXJlbmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBUaGUgcHJvcGVydHkgaXMgYSBkYXRlIG9yIGEgZGF0ZSArIHRpbWVcclxuICAgKi9cclxuICBEYXRlVGltZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbnRlZ2VyOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBzdHJpbmcgKG9mdGVuIHVzZWQgdG8gYXNzaWduIHJhbmtpbmcgdmFsdWVzIHRvIGNvbmNlcHRzIGZvciBzdXBwb3J0aW5nIHNjb3JlIGFzc2Vzc21lbnRzKVxyXG4gICAqL1xyXG4gIEludGVnZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBzdHJpbmdcclxuICAgKi9cclxuICBWQUxTdHJpbmc6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBhIHByb3BlcnR5IHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29uY2VwdFByb3BlcnR5VHlwZUNvZGluZ3M6Q29uY2VwdFByb3BlcnR5VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYm9vbGVhbjogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgYm9vbGVhbiB0cnVlIHwgZmFsc2VcclxuICAgKi9cclxuICBWQUxCb29sZWFuOiB7XHJcbiAgICBkaXNwbGF5OiBcImJvb2xlYW5cIixcclxuICAgIGNvZGU6IFwiYm9vbGVhblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uY2VwdC1wcm9wZXJ0eS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb2RlOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBjb2RlIHRoYXQgaWRlbnRpZmllcyBhIGNvbmNlcHQgZGVmaW5lZCBpbiB0aGUgY29kZSBzeXN0ZW1cclxuICAgKi9cclxuICBDb2RlSW50ZXJuYWxSZWZlcmVuY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiY29kZSAoaW50ZXJuYWwgcmVmZXJlbmNlKVwiLFxyXG4gICAgY29kZTogXCJjb2RlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25jZXB0LXByb3BlcnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGluZzogVGhlIHByb3BlcnR5ICB2YWx1ZSBpcyBhIGNvZGUgZGVmaW5lZCBpbiBhbiBleHRlcm5hbCBjb2RlIHN5c3RlbS4gVGhpcyBtYXkgYmUgdXNlZCBmb3IgdHJhbnNsYXRpb25zLCBidXQgaXMgbm90IHRoZSBpbnRlbnRcclxuICAgKi9cclxuICBDb2RpbmdFeHRlcm5hbFJlZmVyZW5jZToge1xyXG4gICAgZGlzcGxheTogXCJDb2RpbmcgKGV4dGVybmFsIHJlZmVyZW5jZSlcIixcclxuICAgIGNvZGU6IFwiQ29kaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25jZXB0LXByb3BlcnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBUaGUgcHJvcGVydHkgaXMgYSBkYXRlIG9yIGEgZGF0ZSArIHRpbWVcclxuICAgKi9cclxuICBEYXRlVGltZToge1xyXG4gICAgZGlzcGxheTogXCJkYXRlVGltZVwiLFxyXG4gICAgY29kZTogXCJkYXRlVGltZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uY2VwdC1wcm9wZXJ0eS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbnRlZ2VyOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBzdHJpbmcgKG9mdGVuIHVzZWQgdG8gYXNzaWduIHJhbmtpbmcgdmFsdWVzIHRvIGNvbmNlcHRzIGZvciBzdXBwb3J0aW5nIHNjb3JlIGFzc2Vzc21lbnRzKVxyXG4gICAqL1xyXG4gIEludGVnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiaW50ZWdlclwiLFxyXG4gICAgY29kZTogXCJpbnRlZ2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25jZXB0LXByb3BlcnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgc3RyaW5nXHJcbiAgICovXHJcbiAgVkFMU3RyaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcInN0cmluZ1wiLFxyXG4gICAgY29kZTogXCJzdHJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==