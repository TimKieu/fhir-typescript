// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/reference-handling-policy|3.0.2
/**
 * A set of flags that defines how references are supported.
 */
export const ReferenceHandlingPolicyCodings = {
    /**
     * enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems
     */
    ReferenceIntegrityEnforced: {
        display: "Reference Integrity Enforced",
        code: "enforced",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * literal: The server supports and populates Literal references where they are known (this code does not guarantee that all references are literal; see 'enforced')
     */
    LiteralReferences: {
        display: "Literal References",
        code: "literal",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * local: The server does not support references that point to other servers
     */
    LocalReferencesOnly: {
        display: "Local References Only",
        code: "local",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * logical: The server allows logical references
     */
    LogicalReferences: {
        display: "Logical References",
        code: "logical",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * resolves: The server will attempt to resolve logical references to literal references (if resolution fails, the server may still accept resources; see logical)
     */
    ResolvesReferences: {
        display: "Resolves References",
        code: "resolves",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBOEI5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILDBCQUEwQixFQUFFO1FBQzFCLE9BQU8sRUFBRSw4QkFBOEI7UUFDdkMsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILG1CQUFtQixFQUFFO1FBQ25CLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5fDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgZmxhZ3MgdGhhdCBkZWZpbmVzIGhvdyByZWZlcmVuY2VzIGFyZSBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZW5mb3JjZWQ6IFRoZSBzZXJ2ZXIgZW5mb3JjZXMgdGhhdCByZWZlcmVuY2VzIGhhdmUgaW50ZWdyaXR5IC0gZS5nLiBpdCBlbnN1cmVzIHRoYXQgcmVmZXJlbmNlcyBjYW4gYWx3YXlzIGJlIHJlc29sdmVkLiBUaGlzIGlzIHR5cGljYWxseSB0aGUgY2FzZSBmb3IgY2xpbmljYWwgcmVjb3JkIHN5c3RlbXMsIGJ1dCBvZnRlbiBub3QgdGhlIGNhc2UgZm9yIG1pZGRsZXdhcmUvcHJveHkgc3lzdGVtc1xyXG4gICAqL1xyXG4gIFJlZmVyZW5jZUludGVncml0eUVuZm9yY2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxpdGVyYWw6IFRoZSBzZXJ2ZXIgc3VwcG9ydHMgYW5kIHBvcHVsYXRlcyBMaXRlcmFsIHJlZmVyZW5jZXMgd2hlcmUgdGhleSBhcmUga25vd24gKHRoaXMgY29kZSBkb2VzIG5vdCBndWFyYW50ZWUgdGhhdCBhbGwgcmVmZXJlbmNlcyBhcmUgbGl0ZXJhbDsgc2VlICdlbmZvcmNlZCcpXHJcbiAgICovXHJcbiAgTGl0ZXJhbFJlZmVyZW5jZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbG9jYWw6IFRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCByZWZlcmVuY2VzIHRoYXQgcG9pbnQgdG8gb3RoZXIgc2VydmVyc1xyXG4gICAqL1xyXG4gIExvY2FsUmVmZXJlbmNlc09ubHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbG9naWNhbDogVGhlIHNlcnZlciBhbGxvd3MgbG9naWNhbCByZWZlcmVuY2VzXHJcbiAgICovXHJcbiAgTG9naWNhbFJlZmVyZW5jZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVzb2x2ZXM6IFRoZSBzZXJ2ZXIgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgbG9naWNhbCByZWZlcmVuY2VzIHRvIGxpdGVyYWwgcmVmZXJlbmNlcyAoaWYgcmVzb2x1dGlvbiBmYWlscywgdGhlIHNlcnZlciBtYXkgc3RpbGwgYWNjZXB0IHJlc291cmNlczsgc2VlIGxvZ2ljYWwpXHJcbiAgICovXHJcbiAgUmVzb2x2ZXNSZWZlcmVuY2VzOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgZmxhZ3MgdGhhdCBkZWZpbmVzIGhvdyByZWZlcmVuY2VzIGFyZSBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdzOlJlZmVyZW5jZUhhbmRsaW5nUG9saWN5Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBlbmZvcmNlZDogVGhlIHNlcnZlciBlbmZvcmNlcyB0aGF0IHJlZmVyZW5jZXMgaGF2ZSBpbnRlZ3JpdHkgLSBlLmcuIGl0IGVuc3VyZXMgdGhhdCByZWZlcmVuY2VzIGNhbiBhbHdheXMgYmUgcmVzb2x2ZWQuIFRoaXMgaXMgdHlwaWNhbGx5IHRoZSBjYXNlIGZvciBjbGluaWNhbCByZWNvcmQgc3lzdGVtcywgYnV0IG9mdGVuIG5vdCB0aGUgY2FzZSBmb3IgbWlkZGxld2FyZS9wcm94eSBzeXN0ZW1zXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlSW50ZWdyaXR5RW5mb3JjZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVmZXJlbmNlIEludGVncml0eSBFbmZvcmNlZFwiLFxyXG4gICAgY29kZTogXCJlbmZvcmNlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbGl0ZXJhbDogVGhlIHNlcnZlciBzdXBwb3J0cyBhbmQgcG9wdWxhdGVzIExpdGVyYWwgcmVmZXJlbmNlcyB3aGVyZSB0aGV5IGFyZSBrbm93biAodGhpcyBjb2RlIGRvZXMgbm90IGd1YXJhbnRlZSB0aGF0IGFsbCByZWZlcmVuY2VzIGFyZSBsaXRlcmFsOyBzZWUgJ2VuZm9yY2VkJylcclxuICAgKi9cclxuICBMaXRlcmFsUmVmZXJlbmNlczoge1xyXG4gICAgZGlzcGxheTogXCJMaXRlcmFsIFJlZmVyZW5jZXNcIixcclxuICAgIGNvZGU6IFwibGl0ZXJhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbG9jYWw6IFRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCByZWZlcmVuY2VzIHRoYXQgcG9pbnQgdG8gb3RoZXIgc2VydmVyc1xyXG4gICAqL1xyXG4gIExvY2FsUmVmZXJlbmNlc09ubHk6IHtcclxuICAgIGRpc3BsYXk6IFwiTG9jYWwgUmVmZXJlbmNlcyBPbmx5XCIsXHJcbiAgICBjb2RlOiBcImxvY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsb2dpY2FsOiBUaGUgc2VydmVyIGFsbG93cyBsb2dpY2FsIHJlZmVyZW5jZXNcclxuICAgKi9cclxuICBMb2dpY2FsUmVmZXJlbmNlczoge1xyXG4gICAgZGlzcGxheTogXCJMb2dpY2FsIFJlZmVyZW5jZXNcIixcclxuICAgIGNvZGU6IFwibG9naWNhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVzb2x2ZXM6IFRoZSBzZXJ2ZXIgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgbG9naWNhbCByZWZlcmVuY2VzIHRvIGxpdGVyYWwgcmVmZXJlbmNlcyAoaWYgcmVzb2x1dGlvbiBmYWlscywgdGhlIHNlcnZlciBtYXkgc3RpbGwgYWNjZXB0IHJlc291cmNlczsgc2VlIGxvZ2ljYWwpXHJcbiAgICovXHJcbiAgUmVzb2x2ZXNSZWZlcmVuY2VzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlc29sdmVzIFJlZmVyZW5jZXNcIixcclxuICAgIGNvZGU6IFwicmVzb2x2ZXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVyZW5jZS1oYW5kbGluZy1wb2xpY3lcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=