// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/data-absent-reason|3.0.2
/**
 * Used to specify why the normally expected content of the data element is missing.
 */
export const DataAbsentReasonCodings = {
    /**
     * asked: The source human does not know the value.
     */
    Asked: {
        display: "Asked",
        code: "asked",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * astext: The content of the data is represented in the resource narrative.
     */
    AsText: {
        display: "As Text",
        code: "astext",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * error: Some system or workflow process error means that the information is not available.
     */
    Error: {
        display: "Error",
        code: "error",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * masked: The information is not available due to security, privacy or related reasons.
     */
    Masked: {
        display: "Masked",
        code: "masked",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * NaN: NaN, standing for not a number, is a numeric data type value representing an undefined or unrepresentable value.
     */
    NotANumber: {
        display: "Not a Number",
        code: "NaN",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * not-asked: The workflow didn't lead to this value being known.
     */
    NotAsked: {
        display: "Not Asked",
        code: "not-asked",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * not-performed: The value is not available because the observation procedure (test, etc.) was not performed.
     */
    NotPerformed: {
        display: "Not Performed",
        code: "not-performed",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * temp: There is reason to expect (from the workflow) that the value may become known.
     */
    Temp: {
        display: "Temp",
        code: "temp",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * unknown: The value is not known.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
    /**
     * unsupported: The source system wasn't capable of supporting this element.
     */
    Unsupported: {
        display: "Unsupported",
        code: "unsupported",
        system: "http://hl7.org/fhir/data-absent-reason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUFic2VudFJlYXNvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RhdGFBYnNlbnRSZWFzb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHVFQUF1RTtBQWtEdkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBOEI7SUFDaEU7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZGF0YS1hYnNlbnQtcmVhc29ufDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVXNlZCB0byBzcGVjaWZ5IHdoeSB0aGUgbm9ybWFsbHkgZXhwZWN0ZWQgY29udGVudCBvZiB0aGUgZGF0YSBlbGVtZW50IGlzIG1pc3NpbmcuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEYXRhQWJzZW50UmVhc29uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhc2tlZDogVGhlIHNvdXJjZSBodW1hbiBkb2VzIG5vdCBrbm93IHRoZSB2YWx1ZS5cclxuICAgKi9cclxuICBBc2tlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBhc3RleHQ6IFRoZSBjb250ZW50IG9mIHRoZSBkYXRhIGlzIHJlcHJlc2VudGVkIGluIHRoZSByZXNvdXJjZSBuYXJyYXRpdmUuXHJcbiAgICovXHJcbiAgQXNUZXh0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVycm9yOiBTb21lIHN5c3RlbSBvciB3b3JrZmxvdyBwcm9jZXNzIGVycm9yIG1lYW5zIHRoYXQgdGhlIGluZm9ybWF0aW9uIGlzIG5vdCBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWFza2VkOiBUaGUgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZSBkdWUgdG8gc2VjdXJpdHksIHByaXZhY3kgb3IgcmVsYXRlZCByZWFzb25zLlxyXG4gICAqL1xyXG4gIE1hc2tlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBOYU46IE5hTiwgc3RhbmRpbmcgZm9yIG5vdCBhIG51bWJlciwgaXMgYSBudW1lcmljIGRhdGEgdHlwZSB2YWx1ZSByZXByZXNlbnRpbmcgYW4gdW5kZWZpbmVkIG9yIHVucmVwcmVzZW50YWJsZSB2YWx1ZS5cclxuICAgKi9cclxuICBOb3RBTnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdC1hc2tlZDogVGhlIHdvcmtmbG93IGRpZG4ndCBsZWFkIHRvIHRoaXMgdmFsdWUgYmVpbmcga25vd24uXHJcbiAgICovXHJcbiAgTm90QXNrZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90LXBlcmZvcm1lZDogVGhlIHZhbHVlIGlzIG5vdCBhdmFpbGFibGUgYmVjYXVzZSB0aGUgb2JzZXJ2YXRpb24gcHJvY2VkdXJlICh0ZXN0LCBldGMuKSB3YXMgbm90IHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBOb3RQZXJmb3JtZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdGVtcDogVGhlcmUgaXMgcmVhc29uIHRvIGV4cGVjdCAoZnJvbSB0aGUgd29ya2Zsb3cpIHRoYXQgdGhlIHZhbHVlIG1heSBiZWNvbWUga25vd24uXHJcbiAgICovXHJcbiAgVGVtcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgdmFsdWUgaXMgbm90IGtub3duLlxyXG4gICAqL1xyXG4gIFVua25vd246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdW5zdXBwb3J0ZWQ6IFRoZSBzb3VyY2Ugc3lzdGVtIHdhc24ndCBjYXBhYmxlIG9mIHN1cHBvcnRpbmcgdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIFVuc3VwcG9ydGVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVXNlZCB0byBzcGVjaWZ5IHdoeSB0aGUgbm9ybWFsbHkgZXhwZWN0ZWQgY29udGVudCBvZiB0aGUgZGF0YSBlbGVtZW50IGlzIG1pc3NpbmcuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRGF0YUFic2VudFJlYXNvbkNvZGluZ3M6RGF0YUFic2VudFJlYXNvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXNrZWQ6IFRoZSBzb3VyY2UgaHVtYW4gZG9lcyBub3Qga25vdyB0aGUgdmFsdWUuXHJcbiAgICovXHJcbiAgQXNrZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQXNrZWRcIixcclxuICAgIGNvZGU6IFwiYXNrZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RhdGEtYWJzZW50LXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYXN0ZXh0OiBUaGUgY29udGVudCBvZiB0aGUgZGF0YSBpcyByZXByZXNlbnRlZCBpbiB0aGUgcmVzb3VyY2UgbmFycmF0aXZlLlxyXG4gICAqL1xyXG4gIEFzVGV4dDoge1xyXG4gICAgZGlzcGxheTogXCJBcyBUZXh0XCIsXHJcbiAgICBjb2RlOiBcImFzdGV4dFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGF0YS1hYnNlbnQtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlcnJvcjogU29tZSBzeXN0ZW0gb3Igd29ya2Zsb3cgcHJvY2VzcyBlcnJvciBtZWFucyB0aGF0IHRoZSBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIEVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kYXRhLWFic2VudC1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1hc2tlZDogVGhlIGluZm9ybWF0aW9uIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIHNlY3VyaXR5LCBwcml2YWN5IG9yIHJlbGF0ZWQgcmVhc29ucy5cclxuICAgKi9cclxuICBNYXNrZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTWFza2VkXCIsXHJcbiAgICBjb2RlOiBcIm1hc2tlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGF0YS1hYnNlbnQtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBOYU46IE5hTiwgc3RhbmRpbmcgZm9yIG5vdCBhIG51bWJlciwgaXMgYSBudW1lcmljIGRhdGEgdHlwZSB2YWx1ZSByZXByZXNlbnRpbmcgYW4gdW5kZWZpbmVkIG9yIHVucmVwcmVzZW50YWJsZSB2YWx1ZS5cclxuICAgKi9cclxuICBOb3RBTnVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBhIE51bWJlclwiLFxyXG4gICAgY29kZTogXCJOYU5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RhdGEtYWJzZW50LXJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90LWFza2VkOiBUaGUgd29ya2Zsb3cgZGlkbid0IGxlYWQgdG8gdGhpcyB2YWx1ZSBiZWluZyBrbm93bi5cclxuICAgKi9cclxuICBOb3RBc2tlZDoge1xyXG4gICAgZGlzcGxheTogXCJOb3QgQXNrZWRcIixcclxuICAgIGNvZGU6IFwibm90LWFza2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kYXRhLWFic2VudC1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdC1wZXJmb3JtZWQ6IFRoZSB2YWx1ZSBpcyBub3QgYXZhaWxhYmxlIGJlY2F1c2UgdGhlIG9ic2VydmF0aW9uIHByb2NlZHVyZSAodGVzdCwgZXRjLikgd2FzIG5vdCBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgTm90UGVyZm9ybWVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBQZXJmb3JtZWRcIixcclxuICAgIGNvZGU6IFwibm90LXBlcmZvcm1lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGF0YS1hYnNlbnQtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0ZW1wOiBUaGVyZSBpcyByZWFzb24gdG8gZXhwZWN0IChmcm9tIHRoZSB3b3JrZmxvdykgdGhhdCB0aGUgdmFsdWUgbWF5IGJlY29tZSBrbm93bi5cclxuICAgKi9cclxuICBUZW1wOiB7XHJcbiAgICBkaXNwbGF5OiBcIlRlbXBcIixcclxuICAgIGNvZGU6IFwidGVtcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGF0YS1hYnNlbnQtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgdmFsdWUgaXMgbm90IGtub3duLlxyXG4gICAqL1xyXG4gIFVua25vd246IHtcclxuICAgIGRpc3BsYXk6IFwiVW5rbm93blwiLFxyXG4gICAgY29kZTogXCJ1bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kYXRhLWFic2VudC1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHVuc3VwcG9ydGVkOiBUaGUgc291cmNlIHN5c3RlbSB3YXNuJ3QgY2FwYWJsZSBvZiBzdXBwb3J0aW5nIHRoaXMgZWxlbWVudC5cclxuICAgKi9cclxuICBVbnN1cHBvcnRlZDoge1xyXG4gICAgZGlzcGxheTogXCJVbnN1cHBvcnRlZFwiLFxyXG4gICAgY29kZTogXCJ1bnN1cHBvcnRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGF0YS1hYnNlbnQtcmVhc29uXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19