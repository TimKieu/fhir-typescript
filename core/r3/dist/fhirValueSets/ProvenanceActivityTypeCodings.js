// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/provenance-activity-type|1.1.0
/**
 * This value set contains representative Activity Type codes, which includes codes from the HL7 DocumentCompletion, ActStatus, and DataOperations code system, W3C PROV-DM and PROV-N concepts and display names, several HL7 Lifecycle Event codes for which there are agreed upon definitions, and non-duplicated codes from the HL7 Security and Privacy Ontology Operations codes.
 */
export const ProvenanceActivityTypeCodings = {
    /**
     * ABORT: Description:Change the status of an object representing an Act to "aborted", i.e., terminated prior to the originally intended completion. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Abort: {
        display: "abort",
        code: "ABORT",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * aborted: The Act has been terminated prior to the originally intended completion.
     */
    Aborted: {
        display: "aborted",
        code: "aborted",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * ACTIVATE: Description:Change the status of an object representing an Act to "active", i.e., so it can be performed or is being performed, for the first time. (Contrast with REACTIVATE.) For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Activate: {
        display: "activate",
        code: "ACTIVATE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * active: The Act can be performed or is being performed
     */
    Active: {
        display: "active",
        code: "active",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * aggregate: Activity resulting in a structured collection of preexisting content that does not necessarily result in an integral object with semantic context making it more than the sum of component parts, from which components could be disaggregated without loss of semantic context, e.g., the assembly of multiple stand-alone documents.
     */
    Aggregate: {
        display: "aggregate",
        code: "aggregate",
        system: "http://hl7.org/fhir/extra-activity-type",
    },
    /**
     * ANONY: Custodian system must remove any information that could result in identifying the information subject.
     */
    Anonymize: {
        display: "anonymize",
        code: "ANONY",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * AOD: Custodian system must make available to an information subject upon request an accounting of certain disclosures of the individualâ€™s protected health information over a period of time.  Policy may dictate that the accounting include information about the information disclosed,  the date of disclosure, the identification of the receiver, the purpose of the disclosure, the time in which the disclosing entity must provide a response and the time period for which accountings of disclosure can be requested.
     */
    AccountingOfDisclosure: {
        display: "accounting of disclosure",
        code: "AOD",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * APPEND: Description:Fundamental operation in an Information System (IS) that results only in the addition of information to an object already in existence. Note: The preceding definition is taken from the HL7 RBAC specification.  There is no restriction on how the operation is invoked, e.g., via a user interface.
     */
    Append: {
        display: "append",
        code: "APPEND",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * Attribution: Ascribing of an entity (object/document) to an agent.
     */
    WasAttributedTo: {
        display: "wasAttributedTo",
        code: "Attribution",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * AU: A completion status in which a document has been signed manually or electronically by one or more individuals who attest to its accuracy.  No explicit determination is made that the assigned individual has performed the authentication.  While the standard allows multiple instances of authentication, it would be typical to have a single instance of authentication, usually by the assigned individual.
     */
    Authenticated: {
        display: "authenticated",
        code: "AU",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * AUDIT: Custodian system must monitor systems to ensure that all users are authorized to operate on information objects.
     */
    Audit: {
        display: "audit",
        code: "AUDIT",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * AUDTR: Custodian system must monitor and maintain retrievable log for each user and operation on information.
     */
    AuditTrail: {
        display: "audit trail",
        code: "AUDTR",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CANCEL: Description:Change the status of an object representing an Act to "cancelled", i.e., abandoned before activation. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Cancel: {
        display: "cancel",
        code: "CANCEL",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * cancelled: The Act has been abandoned before activation.
     */
    Cancelled: {
        display: "cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * Collection:  An aggregating activity that results in composition of an entity, which provides a structure to some constituents that must themselves be entities. These constituents are said to be member of the collections.
     */
    IsCollectionOf: {
        display: "isCollectionOf",
        code: "Collection",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * Communication: The exchange of some unspecified entity by two activities, one activity using some entity generated by the other. A communication implies that activity a2 is dependent on another activity, a1, by way of some unspecified entity that is generated by a1 and used by a2.
     */
    WasInformedBy: {
        display: "wasInformedBy",
        code: "Communication",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * COMPLETE: Description:Change the status of an object representing an Act to "completed", i.e., terminated normally after all of its constituents have been performed. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Complete: {
        display: "complete",
        code: "COMPLETE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * completed: An Act that has terminated normally after all of its constituents have been performed.
     */
    Completed: {
        display: "completed",
        code: "completed",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * compose: Activity resulting in the structured compilation of new and preexisting content for the purposes of forming an integral object with  semantic context making it more than the sum of component parts, which would be lost if decomposed. For example, the composition of a document that includes in whole or part other documents along with new content that result in a new document that has unique semantic meaning.
     */
    Compose: {
        display: "compose",
        code: "compose",
        system: "http://hl7.org/fhir/extra-activity-type",
    },
    /**
     * CPLYCC: Custodian security system must retrieve, evaluate, and comply with the information handling directions of the Confidentiality Code associated with an information target.
     */
    ComplyWithConfidentialityCode: {
        display: "comply with confidentiality code",
        code: "CPLYCC",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPLYCD: Custodian security system must retrieve, evaluate, and comply with applicable information subject consent directives.
     */
    ComplyWithConsentDirective: {
        display: "comply with consent directive",
        code: "CPLYCD",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPLYJPP: Custodian security system must retrieve, evaluate, and comply with applicable jurisdictional privacy policies associated with the target information.
     */
    ComplyWithJurisdictionalPrivacyPolicy: {
        display: "comply with jurisdictional privacy policy",
        code: "CPLYJPP",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPLYOPP: Custodian security system must retrieve, evaluate, and comply with applicable organizational privacy policies associated with the target information.
     */
    ComplyWithOrganizationalPrivacyPolicy: {
        display: "comply with organizational privacy policy",
        code: "CPLYOPP",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPLYOSP: Custodian security system must retrieve, evaluate, and comply with the organizational security policies associated with the target information.
     */
    ComplyWithOrganizationalSecurityPolicy: {
        display: "comply with organizational security policy",
        code: "CPLYOSP",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPLYPOL: Custodian security system must retrieve, evaluate, and comply with applicable policies associated with the target information.
     */
    ComplyWithPolicy: {
        display: "comply with policy",
        code: "CPLYPOL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CREATE: Description:Fundamental operation in an Information System (IS) that results only in the act of bringing an object into existence. Note: The preceding definition is taken from the HL7 RBAC specification.  There is no restriction on how the operation is invoked, e.g., via a user interface. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Create: {
        display: "create",
        code: "CREATE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * DECLASSIFYLABEL: Custodian security system must declassify information assigned security labels by instantiating a new version of the classified information so as to break the binding of the classifying security label when assigning a new security label that marks the information as unclassified in accordance with applicable jurisdictional privacy policies associated with the target information. The system must retain an immutable record of the previous assignment and binding.
     */
    DeclassifySecurityLabel: {
        display: "declassify security label",
        code: "DECLASSIFYLABEL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DEID: Custodian system must strip information of data that would allow the identification of the source of the information or the information subject.
     */
    Deidentify: {
        display: "deidentify",
        code: "DEID",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DELAU: Custodian system must remove target information from access after use.
     */
    DeleteAfterUse: {
        display: "delete after use",
        code: "DELAU",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DELETE: Description:Fundamental operation in an Information System (IS) that results only in the removal of information about an object from memory or storage. Note: The preceding definition is taken from the HL7 RBAC specification.  There is no restriction on how the operation is invoked, e.g., via a user interface.
     */
    Delete: {
        display: "delete",
        code: "DELETE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * Derivation: A transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a pre-existing entity. For an entity to be transformed from, created from, or resulting from an update to another, there must be some underpinning activity or activities performing the necessary action(s) resulting in such a derivation. A derivation can be described at various levels of precision. In its simplest form, derivation relates two entities. Optionally, attributes can be added to represent further information about the derivation. If the derivation is the result of a single known activity, then this activity can also be optionally expressed. To provide a completely accurate description of the derivation, the generation and usage of the generated and used entities, respectively, can be provided, so as to make the derivation path, through usage, activity, and generation, explicit. Optional information such as activity, generation, and usage can be linked to derivations to aid analysis of provenance and to facilitate provenance-based reproducibility.
     */
    WasDerivedFrom: {
        display: "wasDerivedFrom",
        code: "Derivation",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * DI: A completion status in which information has been orally recorded but not yet transcribed.
     */
    Dictated: {
        display: "dictated",
        code: "DI",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * DO: A completion status in which document content, other than dictation, has been received but has not been translated into the final electronic format.  Examples include paper documents, whether hand-written or typewritten, and intermediate electronic forms, such as voice to text.
     */
    Documented: {
        display: "documented",
        code: "DO",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * DOWNGRDLABEL: Custodian security system must downgrade information assigned security labels by instantiating a new version of the classified information so as to break the binding of the classifying security label when assigning a new security label that marks the information as classified at a less protected level in accordance with applicable jurisdictional privacy policies associated with the target information. The system must retain an immutable record of the previous assignment and binding.
     */
    DowngradeSecurityLabel: {
        display: "downgrade security label",
        code: "DOWNGRDLABEL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DRIVLABEL: Custodian security system must assign and bind security labels derived from compilations of information by aggregation or disaggregation in order to classify information compiled in the information systems under its control for collection, access, use and disclosure in accordance with applicable jurisdictional privacy policies associated with the target information. The system must retain an immutable record of the previous assignment and binding.
     */
    DeriveSecurityLabel: {
        display: "derive security label",
        code: "DRIVLABEL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * ENCRYPT: Custodian system must render information unreadable by algorithmically transforming plaintext into ciphertext.
     *
     *
     *
     *
     *                            Usage Notes: A mathematical transposition of a file or data stream so that it cannot be deciphered at the receiving end without the proper key. Encryption is a security feature that assures that only the parties who are supposed to be participating in a videoconference or data transfer are able to do so. It can include a password, public and private keys, or a complex combination of all.  (Per Infoway.)
     */
    Encrypt: {
        display: "encrypt",
        code: "ENCRYPT",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * ENCRYPTR: Custodian system must render information unreadable and unusable by algorithmically transforming plaintext into ciphertext when "at rest" or in storage.
     */
    EncryptAtRest: {
        display: "encrypt at rest",
        code: "ENCRYPTR",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * ENCRYPTT: Custodian system must render information unreadable and unusable by algorithmically transforming plaintext into ciphertext while "in transit" or being transported by any means.
     */
    EncryptInTransit: {
        display: "encrypt in transit",
        code: "ENCRYPTT",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * ENCRYPTU: Custodian system must render information unreadable and unusable by algorithmically transforming plaintext into ciphertext while in use such that operations permitted on the target information are limited by the license granted to the end user.
     */
    EncryptInUse: {
        display: "encrypt in use",
        code: "ENCRYPTU",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * End: When an activity is deemed to have been ended by an entity, known as trigger. The activity no longer exists after its end. Any usage, generation, or invalidation involving an activity precedes the activity's end. An end may refer to a trigger entity that terminated the activity, or to an activity, known as ender that generated the trigger.
     */
    WasEndedBy: {
        display: "wasEndedBy",
        code: "End",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * EXECUTE: Description:Fundamental operation in an IS that results only in initiating performance of a single or set of programs (i.e., software objects). Note: The preceding definition is taken from the HL7 RBAC specification.  There is no restriction on how the operation is invoked, e.g., via a user interface.
     */
    Execute: {
        display: "execute",
        code: "EXECUTE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * Generation: The completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation. Given that a generation is the completion of production of an entity, it is instantaneous.
     */
    WasGeneratedBy: {
        display: "wasGeneratedBy",
        code: "Generation",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * held: An Act that is still in the preparatory stages has been put aside.  No action can occur until the Act is released.
     */
    Held: {
        display: "held",
        code: "held",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * HOLD: Description:Change the status of an object representing an Act to "held", i.e., put aside an Act that is still in preparatory stages.  No action can occur until the Act is released. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Hold: {
        display: "hold",
        code: "HOLD",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * HUAPRV: Custodian system must require human review and approval for permission requested.
     */
    HumanApproval: {
        display: "human approval",
        code: "HUAPRV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * IN: A completion status in which information is known to be missing from a transcribed document.
     */
    Incomplete: {
        display: "incomplete",
        code: "IN",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * Invalidation: The start of the destruction, cessation, or expiry of an existing entity by an activity. The entity is no longer available for use (or further invalidation) after invalidation. Any generation or usage of an entity precedes its invalidation. Given that an invalidation is the start of destruction, cessation, or expiry, it is instantaneous.
     */
    WasInvalidatedBy: {
        display: "wasInvalidatedBy",
        code: "Invalidation",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * IP: A workflow status where the material has been assigned to personnel to perform the task of transcription. The document remains in this state until the document is transcribed.
     */
    InProgress: {
        display: "in progress",
        code: "IP",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * JUMP: Description:Change the status of an object representing an Act to a normal state. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Jump: {
        display: "jump",
        code: "JUMP",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * LA: A completion status in which a document has been signed manually or electronically by the individual who is legally responsible for that document. This is the most mature state in the workflow progression.
     */
    LegallyAuthenticated: {
        display: "legally authenticated",
        code: "LA",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * label: The means used to associate a set of security attributes with a specific information object as part of the data structure for that object. [ISO-10181-3 Access Control]
     */
    Label: {
        display: "label",
        code: "label",
        system: "http://hl7.org/fhir/extra-activity-type",
    },
    /**
     * LABEL: Custodian security system must assign and bind security labels in order to classify information created in the information systems under its control for collection, access, use and disclosure in accordance with applicable jurisdictional privacy policies associated with the target information. The system must retain an immutable record of the assignment and binding.
     *
     *
     *                            Usage Note: In security systems, security policy label assignments do not change, they may supersede prior assignments, and such reassignments are always tracked for auditing and other purposes.
     */
    AssignSecurityLabel: {
        display: "assign security label",
        code: "LABEL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * MASK: Custodian system must render information unreadable and unusable by algorithmically transforming plaintext into ciphertext.  User may be provided a key to decrypt per license or "shared secret".
     */
    Mask: {
        display: "mask",
        code: "MASK",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * MINEC: Custodian must limit access and disclosure to the minimum information required to support an authorized user's purpose of use.
     *
     *
     *                            Usage Note: Limiting the information available for access and disclosure to that an authorized user or receiver "needs to know" in order to perform permitted workflow or purpose of use.
     */
    MinimumNecessary: {
        display: "minimum necessary",
        code: "MINEC",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * MODIFYSTATUS: Description:Change the status of an object representing an Act.
     */
    ModifyStatus: {
        display: "modify status",
        code: "MODIFYSTATUS",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * new: An Act that is in the preparatory stages and may not yet be acted upon
     */
    New: {
        display: "new",
        code: "new",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * normal: Encompasses the expected states of an Act, but excludes "nullified" and "obsolete" which represent unusual terminal states for the life-cycle.
     */
    Normal: {
        display: "normal",
        code: "normal",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * NU: A completion status in which a document was created in error or was placed in the wrong chart. The document is no longer available.
     */
    NullifiedDocument: {
        display: "nullified document",
        code: "NU",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * nullified: This Act instance was created in error and has been 'removed' and is treated as though it never existed.  A record is retained for audit purposes only.
     */
    Nullified: {
        display: "nullified",
        code: "nullified",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * NULLIFY: Description:Change the status of an object representing an Act to "nullified", i.e., treat as though it never existed. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Nullify: {
        display: "nullify",
        code: "NULLIFY",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * ObligationPolicy: Conveys the mandated workflow action that an information custodian, receiver, or user must perform.
     *
     *
     *                            Usage Notes: Per ISO 22600-2, ObligationPolicy instances 'are event-triggered and define actions to be performed by manager agent'. Per HL7 Composite Security and Privacy Domain Analysis Model:  This value set refers to the action required to receive the permission specified in the privacy rule. Per OASIS XACML, an obligation is an operation specified in a policy or policy that is performed in conjunction with the enforcement of an access control decision.
     */
    ObligationPolicy: {
        display: "obligation policy",
        code: "ObligationPolicy",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * obsolete: This Act instance has been replaced by a new instance.
     */
    Obsolete: {
        display: "obsolete",
        code: "obsolete",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * OBSOLETE: Description:Change the status of an object representing an Act to "obsolete" when it has been replaced by a new instance. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    ObsoleteOBSOLETE: {
        display: "obsolete",
        code: "OBSOLETE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * OPERATE: Description:Act on an object or objects.
     */
    Operate: {
        display: "operate",
        code: "OPERATE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * PA: A completion status in which a document is transcribed but not authenticated.
     */
    PreAuthenticated: {
        display: "pre-authenticated",
        code: "PA",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * PERSISTLABEL: Custodian security system must persist the binding of security labels to classify information received or imported by information systems under its control for collection, access, use and disclosure in accordance with applicable jurisdictional privacy policies associated with the target information.  The system must retain an immutable record of the assignment and binding.
     */
    PersistSecurityLabel: {
        display: "persist security label",
        code: "PERSISTLABEL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * Primary-Source: Refers to something produced by some agent with direct experience and knowledge about the topic, at the time of the topic's study, without benefit from hindsight. Because of the directness of primary sources, they 'speak for themselves' in ways that cannot be captured through the filter of secondary sources. As such, it is important for secondary sources to reference those primary sources from which they were derived, so that their reliability can be investigated. It is also important to note that a given entity might be a primary source for one entity but not another. It is the reason why Primary Source is defined as a relation as opposed to a subtype of Entity.
     */
    WasPrimarySourceOf: {
        display: "wasPrimarySourceOf",
        code: "Primary-Source",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * PRIVMARK: Custodian must create and/or maintain human readable security label tags as required by policy.
     *
     *                         Map:  Aligns with ISO 22600-3 Section A.3.4.3 description of privacy mark:  "If present, the privacy-mark is not used for access control. The content of the privacy-mark may be defined by the security policy in force (identified by the security-policy-identifier) which may define a list of values to be used. Alternately, the value may be determined by the originator of the security-label."
     */
    PrivacyMark: {
        display: "privacy mark",
        code: "PRIVMARK",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * PSEUD: Custodian system must strip information of data that would allow the identification of the source of the information or the information subject.  Custodian may retain a key to relink data necessary to reidentify the information subject.
     */
    Pseudonymize: {
        display: "pseudonymize",
        code: "PSEUD",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * Quotation: The repeat of (some or all of) an entity, such as text or image, by someone who may or may not be its original author. A quotation relation is a kind of derivation relation, for which an entity was derived from a preceding entity by copying, or 'quoting', some or all of it.
     */
    WasQuotedFrom: {
        display: "wasQuotedFrom",
        code: "Quotation",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * REACTIVATE: Description:Change the status of a formerly active object representing an Act to "active", i.e., so it can again be performed or is being performed. (Contrast with ACTIVATE.) For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Reactivate: {
        display: "reactivate",
        code: "REACTIVATE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * READ: Description:Fundamental operation in an Information System (IS) that results only in the flow of information about an object to a subject. Note: The preceding definition is taken from the HL7 RBAC specification.  There is no restriction on how the operation is invoked, e.g., via a user interface.
     */
    Read: {
        display: "read",
        code: "READ",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * REDACT: Custodian system must remove information, which is not authorized to be access, used, or disclosed from records made available to otherwise authorized users.
     */
    Redact: {
        display: "redact",
        code: "REDACT",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * RELEASE: Description:Change the status of an object representing an Act so it is no longer "held", i.e., allow action to occur. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Release: {
        display: "release",
        code: "RELEASE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * RESUME: Description:Change the status of a suspended object representing an Act to "active", i.e., so it can be performed or is being performed. For an HL7 Act, the state transitions per the HL7 Reference Information Model.
     */
    Resume: {
        display: "resume",
        code: "RESUME",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * Revision: A derivation for which the resulting entity is a revised version of some original. The implication here is that the resulting entity contains substantial content from the original. A revision relation is a kind of derivation relation from a revised entity to a preceding entity.
     */
    WasRevisionOf: {
        display: "wasRevisionOf",
        code: "Revision",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * Start: When an activity is deemed to have been started by an entity, known as trigger. The activity did not exist before its start. Any usage, generation, or invalidation involving an activity follows the activity's start. A start may refer to a trigger entity that set off the activity, or to an activity, known as starter, that generated the trigger. Given that a start is when an activity is deemed to have started, it is instantaneous.
     */
    WasStartedBy: {
        display: "wasStartedBy",
        code: "Start",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
    /**
     * SUSPEND: Definition:Change the status of an object representing an Act to suspended, i.e., so it is temporarily not in service.
     */
    Suspend: {
        display: "suspend",
        code: "SUSPEND",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * suspended: An Act that has been activated (actions could or have been performed against it), but has been temporarily disabled.  No further action should be taken against it until it is released
     */
    Suspended: {
        display: "suspended",
        code: "suspended",
        system: "http://hl7.org/fhir/v3/ActStatus",
    },
    /**
     * UC: A completion status where the document is complete and there is no expectation that the document will be signed.
     */
    UnsignedCompletedDocument: {
        display: "unsigned completed document",
        code: "UC",
        system: "http://hl7.org/fhir/v3/DocumentCompletion",
    },
    /**
     * UPDATE: Definition:Fundamental operation in an Information System (IS) that results only in the revision or alteration of an object. Note: The preceding definition is taken from the HL7 RBAC specification. There is no restriction on how the operation is invoked, e.g., via a user interface.
     */
    Revise: {
        display: "revise",
        code: "UPDATE",
        system: "http://hl7.org/fhir/v3/DataOperation",
    },
    /**
     * UPGRDLABEL: Custodian security system must declassify information assigned security labels by instantiating a new version of the classified information so as to break the binding of the classifying security label when assigning a new security label that marks the information as classified at a more protected level  in accordance with applicable jurisdictional privacy policies associated with the target information. The system must retain an immutable record of the previous assignment and binding.
     */
    UpgradeSecurityLabel: {
        display: "upgrade security label",
        code: "UPGRDLABEL",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * Usage: the beginning of utilizing an entity by an activity. Before usage, the activity had not begun to utilize this entity and could not have been affected by the entity.  (Note: This definition is formulated for a given usage; it is permitted for an activity to have used a same entity multiple times.) Given that a usage is the beginning of utilizing an entity, it is instantaneous.
     */
    Used: {
        display: "used",
        code: "Usage",
        system: "http://hl7.org/fhir/w3c-provenance-activity-type",
    },
};
//# sourceMappingURL=data:application/json;base64,