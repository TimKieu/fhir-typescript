// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/appointmentstatus|3.0.2
/**
 * The free/busy status of an appointment.
 */
export const AppointmentstatusCodings = {
    /**
     * arrived: Some of the patients have arrived.
     */
    Arrived: {
        display: "Arrived",
        code: "arrived",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * booked: All participant(s) have been considered and the appointment is confirmed to go ahead at the date/times specified.
     */
    Booked: {
        display: "Booked",
        code: "booked",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * cancelled: The appointment has been cancelled.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * entered-in-error: This instance should not have been part of this patient's medical record.
     */
    EnteredInError: {
        display: "Entered in error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * fulfilled: This appointment has completed and may have resulted in an encounter.
     */
    Fulfilled: {
        display: "Fulfilled",
        code: "fulfilled",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * noshow: Some or all of the participant(s) have not/did not appear for the appointment (usually the patient).
     */
    NoShow: {
        display: "No Show",
        code: "noshow",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * pending: Some or all of the participant(s) have not finalized their acceptance of the appointment request.
     */
    Pending: {
        display: "Pending",
        code: "pending",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
    /**
     * proposed: None of the participant(s) have finalized their acceptance of the appointment request, and the start/end time may not be set yet.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/appointmentstatus",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwb2ludG1lbnRzdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BcHBvaW50bWVudHN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsc0VBQXNFO0FBMEN0RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FwcG9pbnRtZW50c3RhdHVzfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIGZyZWUvYnVzeSBzdGF0dXMgb2YgYW4gYXBwb2ludG1lbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBcHBvaW50bWVudHN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXJyaXZlZDogU29tZSBvZiB0aGUgcGF0aWVudHMgaGF2ZSBhcnJpdmVkLlxyXG4gICAqL1xyXG4gIEFycml2ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYm9va2VkOiBBbGwgcGFydGljaXBhbnQocykgaGF2ZSBiZWVuIGNvbnNpZGVyZWQgYW5kIHRoZSBhcHBvaW50bWVudCBpcyBjb25maXJtZWQgdG8gZ28gYWhlYWQgYXQgdGhlIGRhdGUvdGltZXMgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIEJvb2tlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBhcHBvaW50bWVudCBoYXMgYmVlbiBjYW5jZWxsZWQuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgaW5zdGFuY2Ugc2hvdWxkIG5vdCBoYXZlIGJlZW4gcGFydCBvZiB0aGlzIHBhdGllbnQncyBtZWRpY2FsIHJlY29yZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBmdWxmaWxsZWQ6IFRoaXMgYXBwb2ludG1lbnQgaGFzIGNvbXBsZXRlZCBhbmQgbWF5IGhhdmUgcmVzdWx0ZWQgaW4gYW4gZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIEZ1bGZpbGxlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3Nob3c6IFNvbWUgb3IgYWxsIG9mIHRoZSBwYXJ0aWNpcGFudChzKSBoYXZlIG5vdC9kaWQgbm90IGFwcGVhciBmb3IgdGhlIGFwcG9pbnRtZW50ICh1c3VhbGx5IHRoZSBwYXRpZW50KS5cclxuICAgKi9cclxuICBOb1Nob3c6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGVuZGluZzogU29tZSBvciBhbGwgb2YgdGhlIHBhcnRpY2lwYW50KHMpIGhhdmUgbm90IGZpbmFsaXplZCB0aGVpciBhY2NlcHRhbmNlIG9mIHRoZSBhcHBvaW50bWVudCByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIFBlbmRpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IE5vbmUgb2YgdGhlIHBhcnRpY2lwYW50KHMpIGhhdmUgZmluYWxpemVkIHRoZWlyIGFjY2VwdGFuY2Ugb2YgdGhlIGFwcG9pbnRtZW50IHJlcXVlc3QsIGFuZCB0aGUgc3RhcnQvZW5kIHRpbWUgbWF5IG5vdCBiZSBzZXQgeWV0LlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGZyZWUvYnVzeSBzdGF0dXMgb2YgYW4gYXBwb2ludG1lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQXBwb2ludG1lbnRzdGF0dXNDb2RpbmdzOkFwcG9pbnRtZW50c3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcnJpdmVkOiBTb21lIG9mIHRoZSBwYXRpZW50cyBoYXZlIGFycml2ZWQuXHJcbiAgICovXHJcbiAgQXJyaXZlZDoge1xyXG4gICAgZGlzcGxheTogXCJBcnJpdmVkXCIsXHJcbiAgICBjb2RlOiBcImFycml2ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FwcG9pbnRtZW50c3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBib29rZWQ6IEFsbCBwYXJ0aWNpcGFudChzKSBoYXZlIGJlZW4gY29uc2lkZXJlZCBhbmQgdGhlIGFwcG9pbnRtZW50IGlzIGNvbmZpcm1lZCB0byBnbyBhaGVhZCBhdCB0aGUgZGF0ZS90aW1lcyBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgQm9va2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkJvb2tlZFwiLFxyXG4gICAgY29kZTogXCJib29rZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FwcG9pbnRtZW50c3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBhcHBvaW50bWVudCBoYXMgYmVlbiBjYW5jZWxsZWQuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhbmNlbGxlZFwiLFxyXG4gICAgY29kZTogXCJjYW5jZWxsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FwcG9pbnRtZW50c3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGlzIGluc3RhbmNlIHNob3VsZCBub3QgaGF2ZSBiZWVuIHBhcnQgb2YgdGhpcyBwYXRpZW50J3MgbWVkaWNhbCByZWNvcmQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBlcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hcHBvaW50bWVudHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZnVsZmlsbGVkOiBUaGlzIGFwcG9pbnRtZW50IGhhcyBjb21wbGV0ZWQgYW5kIG1heSBoYXZlIHJlc3VsdGVkIGluIGFuIGVuY291bnRlci5cclxuICAgKi9cclxuICBGdWxmaWxsZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRnVsZmlsbGVkXCIsXHJcbiAgICBjb2RlOiBcImZ1bGZpbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXBwb2ludG1lbnRzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vc2hvdzogU29tZSBvciBhbGwgb2YgdGhlIHBhcnRpY2lwYW50KHMpIGhhdmUgbm90L2RpZCBub3QgYXBwZWFyIGZvciB0aGUgYXBwb2ludG1lbnQgKHVzdWFsbHkgdGhlIHBhdGllbnQpLlxyXG4gICAqL1xyXG4gIE5vU2hvdzoge1xyXG4gICAgZGlzcGxheTogXCJObyBTaG93XCIsXHJcbiAgICBjb2RlOiBcIm5vc2hvd1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXBwb2ludG1lbnRzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBlbmRpbmc6IFNvbWUgb3IgYWxsIG9mIHRoZSBwYXJ0aWNpcGFudChzKSBoYXZlIG5vdCBmaW5hbGl6ZWQgdGhlaXIgYWNjZXB0YW5jZSBvZiB0aGUgYXBwb2ludG1lbnQgcmVxdWVzdC5cclxuICAgKi9cclxuICBQZW5kaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlbmRpbmdcIixcclxuICAgIGNvZGU6IFwicGVuZGluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXBwb2ludG1lbnRzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2VkOiBOb25lIG9mIHRoZSBwYXJ0aWNpcGFudChzKSBoYXZlIGZpbmFsaXplZCB0aGVpciBhY2NlcHRhbmNlIG9mIHRoZSBhcHBvaW50bWVudCByZXF1ZXN0LCBhbmQgdGhlIHN0YXJ0L2VuZCB0aW1lIG1heSBub3QgYmUgc2V0IHlldC5cclxuICAgKi9cclxuICBQcm9wb3NlZDoge1xyXG4gICAgZGlzcGxheTogXCJQcm9wb3NlZFwiLFxyXG4gICAgY29kZTogXCJwcm9wb3NlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXBwb2ludG1lbnRzdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=