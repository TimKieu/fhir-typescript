// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/identifier-type|3.0.2
/**
 * A coded type for an identifier that can be used to determine which identifier to use for a specific purpose.
 */
export const IdentifierTypeCodes = {
    /**
     * Code: ACSN
     */
    AccessionID: "ACSN",
    /**
     * Code: BRN
     */
    BreedRegistryNumber: "BRN",
    /**
     * Code: DL
     */
    DriverQuoteSLicenseNumber: "DL",
    /**
     * Code: DR
     */
    DonorRegistrationNumber: "DR",
    /**
     * Code: EN
     */
    EmployerNumber: "EN",
    /**
     * FILL: The Identifier associated with the person, or service, who produces the observations or fulfills the order requested by the requestor.
     */
    FillerIdentifier: "FILL",
    /**
     * Code: MCN
     */
    MicrochipNumber: "MCN",
    /**
     * Code: MD
     */
    MedicalLicenseNumber: "MD",
    /**
     * Code: MR
     */
    MedicalRecordNumber: "MR",
    /**
     * Code: NIIP
     */
    NationalInsurancePayorIdentifierPayor: "NIIP",
    /**
     * PLAC: The identifier associated with the person or service that requests or places an order.
     */
    PlacerIdentifier: "PLAC",
    /**
     * Code: PPN
     */
    PassportNumber: "PPN",
    /**
     * Code: PRN
     */
    ProviderNumber: "PRN",
    /**
     * SB: An identifier issued by a governmental organization to an individual for the purpose of the receipt of social services and benefits.
     */
    SocialBeneficiaryIdentifier: "SB",
    /**
     * SNO: An identifier affixed to an item by the manufacturer when it is first made, where each item has a different identifier.
     */
    SerialNumber: "SNO",
    /**
     * Code: TAX
     */
    TaxIDNumber: "TAX",
    /**
     * UDI: A identifier assigned to a device using the Universal Device Identifier framework as defined by FDA (http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/).
     */
    UniversalDeviceIdentifier: "UDI",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWRlbnRpZmllclR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSWRlbnRpZmllclR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxvRUFBb0U7QUFFcEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQzs7T0FFRztJQUNILFdBQVcsRUFBRSxNQUFNO0lBQ25COztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsS0FBSztJQUMxQjs7T0FFRztJQUNILHlCQUF5QixFQUFFLElBQUk7SUFDL0I7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxJQUFJO0lBQzdCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUk7SUFDcEI7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxNQUFNO0lBQ3hCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLEtBQUs7SUFDdEI7O09BRUc7SUFDSCxvQkFBb0IsRUFBRSxJQUFJO0lBQzFCOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsSUFBSTtJQUN6Qjs7T0FFRztJQUNILHFDQUFxQyxFQUFFLE1BQU07SUFDN0M7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxNQUFNO0lBQ3hCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLEtBQUs7SUFDckI7O09BRUc7SUFDSCxjQUFjLEVBQUUsS0FBSztJQUNyQjs7T0FFRztJQUNILDJCQUEyQixFQUFFLElBQUk7SUFDakM7O09BRUc7SUFDSCxZQUFZLEVBQUUsS0FBSztJQUNuQjs7T0FFRztJQUNILFdBQVcsRUFBRSxLQUFLO0lBQ2xCOztPQUVHO0lBQ0gseUJBQXlCLEVBQUUsS0FBSztDQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2lkZW50aWZpZXItdHlwZXwzLjAuMlxyXG5cclxuLyoqXHJcbiAqIEEgY29kZWQgdHlwZSBmb3IgYW4gaWRlbnRpZmllciB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSB3aGljaCBpZGVudGlmaWVyIHRvIHVzZSBmb3IgYSBzcGVjaWZpYyBwdXJwb3NlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IElkZW50aWZpZXJUeXBlQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUNTTlxyXG4gICAqL1xyXG4gIEFjY2Vzc2lvbklEOiBcIkFDU05cIixcclxuICAvKipcclxuICAgKiBDb2RlOiBCUk5cclxuICAgKi9cclxuICBCcmVlZFJlZ2lzdHJ5TnVtYmVyOiBcIkJSTlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERMXHJcbiAgICovXHJcbiAgRHJpdmVyUXVvdGVTTGljZW5zZU51bWJlcjogXCJETFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERSXHJcbiAgICovXHJcbiAgRG9ub3JSZWdpc3RyYXRpb25OdW1iZXI6IFwiRFJcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBFTlxyXG4gICAqL1xyXG4gIEVtcGxveWVyTnVtYmVyOiBcIkVOXCIsXHJcbiAgLyoqXHJcbiAgICogRklMTDogVGhlIElkZW50aWZpZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBwZXJzb24sIG9yIHNlcnZpY2UsIHdobyBwcm9kdWNlcyB0aGUgb2JzZXJ2YXRpb25zIG9yIGZ1bGZpbGxzIHRoZSBvcmRlciByZXF1ZXN0ZWQgYnkgdGhlIHJlcXVlc3Rvci5cclxuICAgKi9cclxuICBGaWxsZXJJZGVudGlmaWVyOiBcIkZJTExcIixcclxuICAvKipcclxuICAgKiBDb2RlOiBNQ05cclxuICAgKi9cclxuICBNaWNyb2NoaXBOdW1iZXI6IFwiTUNOXCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTURcclxuICAgKi9cclxuICBNZWRpY2FsTGljZW5zZU51bWJlcjogXCJNRFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1SXHJcbiAgICovXHJcbiAgTWVkaWNhbFJlY29yZE51bWJlcjogXCJNUlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5JSVBcclxuICAgKi9cclxuICBOYXRpb25hbEluc3VyYW5jZVBheW9ySWRlbnRpZmllclBheW9yOiBcIk5JSVBcIixcclxuICAvKipcclxuICAgKiBQTEFDOiBUaGUgaWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIHBlcnNvbiBvciBzZXJ2aWNlIHRoYXQgcmVxdWVzdHMgb3IgcGxhY2VzIGFuIG9yZGVyLlxyXG4gICAqL1xyXG4gIFBsYWNlcklkZW50aWZpZXI6IFwiUExBQ1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBQTlxyXG4gICAqL1xyXG4gIFBhc3Nwb3J0TnVtYmVyOiBcIlBQTlwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBSTlxyXG4gICAqL1xyXG4gIFByb3ZpZGVyTnVtYmVyOiBcIlBSTlwiLFxyXG4gIC8qKlxyXG4gICAqIFNCOiBBbiBpZGVudGlmaWVyIGlzc3VlZCBieSBhIGdvdmVybm1lbnRhbCBvcmdhbml6YXRpb24gdG8gYW4gaW5kaXZpZHVhbCBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhlIHJlY2VpcHQgb2Ygc29jaWFsIHNlcnZpY2VzIGFuZCBiZW5lZml0cy5cclxuICAgKi9cclxuICBTb2NpYWxCZW5lZmljaWFyeUlkZW50aWZpZXI6IFwiU0JcIixcclxuICAvKipcclxuICAgKiBTTk86IEFuIGlkZW50aWZpZXIgYWZmaXhlZCB0byBhbiBpdGVtIGJ5IHRoZSBtYW51ZmFjdHVyZXIgd2hlbiBpdCBpcyBmaXJzdCBtYWRlLCB3aGVyZSBlYWNoIGl0ZW0gaGFzIGEgZGlmZmVyZW50IGlkZW50aWZpZXIuXHJcbiAgICovXHJcbiAgU2VyaWFsTnVtYmVyOiBcIlNOT1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRBWFxyXG4gICAqL1xyXG4gIFRheElETnVtYmVyOiBcIlRBWFwiLFxyXG4gIC8qKlxyXG4gICAqIFVESTogQSBpZGVudGlmaWVyIGFzc2lnbmVkIHRvIGEgZGV2aWNlIHVzaW5nIHRoZSBVbml2ZXJzYWwgRGV2aWNlIElkZW50aWZpZXIgZnJhbWV3b3JrIGFzIGRlZmluZWQgYnkgRkRBIChodHRwOi8vd3d3LmZkYS5nb3YvTWVkaWNhbERldmljZXMvRGV2aWNlUmVndWxhdGlvbmFuZEd1aWRhbmNlL1VuaXF1ZURldmljZUlkZW50aWZpY2F0aW9uLykuXHJcbiAgICovXHJcbiAgVW5pdmVyc2FsRGV2aWNlSWRlbnRpZmllcjogXCJVRElcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGVkIHR5cGUgZm9yIGFuIGlkZW50aWZpZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggaWRlbnRpZmllciB0byB1c2UgZm9yIGEgc3BlY2lmaWMgcHVycG9zZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIElkZW50aWZpZXJUeXBlQ29kZVR5cGUgPSB0eXBlb2YgSWRlbnRpZmllclR5cGVDb2Rlc1trZXlvZiB0eXBlb2YgSWRlbnRpZmllclR5cGVDb2Rlc107XHJcbiJdfQ==