// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/subscription-channel-type|3.0.2
/**
 * The type of method used to execute a subscription.
 */
export const SubscriptionChannelTypeCodings = {
    /**
     * email: The channel is executed by sending an email to the email addressed in the URI (which must be a mailto:).
     */
    Email: {
        display: "Email",
        code: "email",
        system: "http://hl7.org/fhir/subscription-channel-type",
    },
    /**
     * message: The channel is executed by sending a message (e.g. a Bundle with a MessageHeader resource etc.) to the application identified in the URI.
     */
    Message: {
        display: "Message",
        code: "message",
        system: "http://hl7.org/fhir/subscription-channel-type",
    },
    /**
     * rest-hook: The channel is executed by making a post to the URI. If a payload is included, the URL is interpreted as the service base, and an update (PUT) is made.
     */
    RestHook: {
        display: "Rest Hook",
        code: "rest-hook",
        system: "http://hl7.org/fhir/subscription-channel-type",
    },
    /**
     * sms: The channel is executed by sending an SMS message to the phone number identified in the URL (tel:).
     */
    SMS: {
        display: "SMS",
        code: "sms",
        system: "http://hl7.org/fhir/subscription-channel-type",
    },
    /**
     * websocket: The channel is executed by sending a packet across a web socket connection maintained by the client. The URL identifies the websocket, and the client binds to this URL.
     */
    Websocket: {
        display: "Websocket",
        code: "websocket",
        system: "http://hl7.org/fhir/subscription-channel-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic2NyaXB0aW9uQ2hhbm5lbFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9TdWJzY3JpcHRpb25DaGFubmVsVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBOEI5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc3Vic2NyaXB0aW9uLWNoYW5uZWwtdHlwZXwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG1ldGhvZCB1c2VkIHRvIGV4ZWN1dGUgYSBzdWJzY3JpcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb25DaGFubmVsVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZW1haWw6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IHNlbmRpbmcgYW4gZW1haWwgdG8gdGhlIGVtYWlsIGFkZHJlc3NlZCBpbiB0aGUgVVJJICh3aGljaCBtdXN0IGJlIGEgbWFpbHRvOikuXHJcbiAgICovXHJcbiAgRW1haWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWVzc2FnZTogVGhlIGNoYW5uZWwgaXMgZXhlY3V0ZWQgYnkgc2VuZGluZyBhIG1lc3NhZ2UgKGUuZy4gYSBCdW5kbGUgd2l0aCBhIE1lc3NhZ2VIZWFkZXIgcmVzb3VyY2UgZXRjLikgdG8gdGhlIGFwcGxpY2F0aW9uIGlkZW50aWZpZWQgaW4gdGhlIFVSSS5cclxuICAgKi9cclxuICBNZXNzYWdlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlc3QtaG9vazogVGhlIGNoYW5uZWwgaXMgZXhlY3V0ZWQgYnkgbWFraW5nIGEgcG9zdCB0byB0aGUgVVJJLiBJZiBhIHBheWxvYWQgaXMgaW5jbHVkZWQsIHRoZSBVUkwgaXMgaW50ZXJwcmV0ZWQgYXMgdGhlIHNlcnZpY2UgYmFzZSwgYW5kIGFuIHVwZGF0ZSAoUFVUKSBpcyBtYWRlLlxyXG4gICAqL1xyXG4gIFJlc3RIb29rOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNtczogVGhlIGNoYW5uZWwgaXMgZXhlY3V0ZWQgYnkgc2VuZGluZyBhbiBTTVMgbWVzc2FnZSB0byB0aGUgcGhvbmUgbnVtYmVyIGlkZW50aWZpZWQgaW4gdGhlIFVSTCAodGVsOikuXHJcbiAgICovXHJcbiAgU01TOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHdlYnNvY2tldDogVGhlIGNoYW5uZWwgaXMgZXhlY3V0ZWQgYnkgc2VuZGluZyBhIHBhY2tldCBhY3Jvc3MgYSB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gbWFpbnRhaW5lZCBieSB0aGUgY2xpZW50LiBUaGUgVVJMIGlkZW50aWZpZXMgdGhlIHdlYnNvY2tldCwgYW5kIHRoZSBjbGllbnQgYmluZHMgdG8gdGhpcyBVUkwuXHJcbiAgICovXHJcbiAgV2Vic29ja2V0OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgbWV0aG9kIHVzZWQgdG8gZXhlY3V0ZSBhIHN1YnNjcmlwdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTdWJzY3JpcHRpb25DaGFubmVsVHlwZUNvZGluZ3M6U3Vic2NyaXB0aW9uQ2hhbm5lbFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGVtYWlsOiBUaGUgY2hhbm5lbCBpcyBleGVjdXRlZCBieSBzZW5kaW5nIGFuIGVtYWlsIHRvIHRoZSBlbWFpbCBhZGRyZXNzZWQgaW4gdGhlIFVSSSAod2hpY2ggbXVzdCBiZSBhIG1haWx0bzopLlxyXG4gICAqL1xyXG4gIEVtYWlsOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVtYWlsXCIsXHJcbiAgICBjb2RlOiBcImVtYWlsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdWJzY3JpcHRpb24tY2hhbm5lbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtZXNzYWdlOiBUaGUgY2hhbm5lbCBpcyBleGVjdXRlZCBieSBzZW5kaW5nIGEgbWVzc2FnZSAoZS5nLiBhIEJ1bmRsZSB3aXRoIGEgTWVzc2FnZUhlYWRlciByZXNvdXJjZSBldGMuKSB0byB0aGUgYXBwbGljYXRpb24gaWRlbnRpZmllZCBpbiB0aGUgVVJJLlxyXG4gICAqL1xyXG4gIE1lc3NhZ2U6IHtcclxuICAgIGRpc3BsYXk6IFwiTWVzc2FnZVwiLFxyXG4gICAgY29kZTogXCJtZXNzYWdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdWJzY3JpcHRpb24tY2hhbm5lbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXN0LWhvb2s6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IG1ha2luZyBhIHBvc3QgdG8gdGhlIFVSSS4gSWYgYSBwYXlsb2FkIGlzIGluY2x1ZGVkLCB0aGUgVVJMIGlzIGludGVycHJldGVkIGFzIHRoZSBzZXJ2aWNlIGJhc2UsIGFuZCBhbiB1cGRhdGUgKFBVVCkgaXMgbWFkZS5cclxuICAgKi9cclxuICBSZXN0SG9vazoge1xyXG4gICAgZGlzcGxheTogXCJSZXN0IEhvb2tcIixcclxuICAgIGNvZGU6IFwicmVzdC1ob29rXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdWJzY3JpcHRpb24tY2hhbm5lbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzbXM6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IHNlbmRpbmcgYW4gU01TIG1lc3NhZ2UgdG8gdGhlIHBob25lIG51bWJlciBpZGVudGlmaWVkIGluIHRoZSBVUkwgKHRlbDopLlxyXG4gICAqL1xyXG4gIFNNUzoge1xyXG4gICAgZGlzcGxheTogXCJTTVNcIixcclxuICAgIGNvZGU6IFwic21zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdWJzY3JpcHRpb24tY2hhbm5lbC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3ZWJzb2NrZXQ6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IHNlbmRpbmcgYSBwYWNrZXQgYWNyb3NzIGEgd2ViIHNvY2tldCBjb25uZWN0aW9uIG1haW50YWluZWQgYnkgdGhlIGNsaWVudC4gVGhlIFVSTCBpZGVudGlmaWVzIHRoZSB3ZWJzb2NrZXQsIGFuZCB0aGUgY2xpZW50IGJpbmRzIHRvIHRoaXMgVVJMLlxyXG4gICAqL1xyXG4gIFdlYnNvY2tldDoge1xyXG4gICAgZGlzcGxheTogXCJXZWJzb2NrZXRcIixcclxuICAgIGNvZGU6IFwid2Vic29ja2V0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdWJzY3JpcHRpb24tY2hhbm5lbC10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19