// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-source-list-mode|3.0.2
/**
 * If field is a list, how to manage the source
 */
export const MapSourceListModeCodings = {
    /**
     * first: Only process this rule for the first in the list
     */
    First: {
        display: "First",
        code: "first",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * last: Only process this rule for the last in the list
     */
    Last: {
        display: "Last",
        code: "last",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * not_first: Process this rule for all but the first
     */
    AllButTheFirst: {
        display: "All but the first",
        code: "not_first",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * not_last: Process this rule for all but the last
     */
    AllButTheLast: {
        display: "All but the last",
        code: "not_last",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * only_one: Only process this rule is there is only item
     */
    EnforceOnlyOne: {
        display: "Enforce only one",
        code: "only_one",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwU291cmNlTGlzdE1vZGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NYXBTb3VyY2VMaXN0TW9kZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBOEJ6RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21hcC1zb3VyY2UtbGlzdC1tb2RlfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSWYgZmllbGQgaXMgYSBsaXN0LCBob3cgdG8gbWFuYWdlIHRoZSBzb3VyY2VcclxuICovXHJcbmV4cG9ydCB0eXBlIE1hcFNvdXJjZUxpc3RNb2RlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBmaXJzdDogT25seSBwcm9jZXNzIHRoaXMgcnVsZSBmb3IgdGhlIGZpcnN0IGluIHRoZSBsaXN0XHJcbiAgICovXHJcbiAgRmlyc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGFzdDogT25seSBwcm9jZXNzIHRoaXMgcnVsZSBmb3IgdGhlIGxhc3QgaW4gdGhlIGxpc3RcclxuICAgKi9cclxuICBMYXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdF9maXJzdDogUHJvY2VzcyB0aGlzIHJ1bGUgZm9yIGFsbCBidXQgdGhlIGZpcnN0XHJcbiAgICovXHJcbiAgQWxsQnV0VGhlRmlyc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90X2xhc3Q6IFByb2Nlc3MgdGhpcyBydWxlIGZvciBhbGwgYnV0IHRoZSBsYXN0XHJcbiAgICovXHJcbiAgQWxsQnV0VGhlTGFzdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbmx5X29uZTogT25seSBwcm9jZXNzIHRoaXMgcnVsZSBpcyB0aGVyZSBpcyBvbmx5IGl0ZW1cclxuICAgKi9cclxuICBFbmZvcmNlT25seU9uZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIElmIGZpZWxkIGlzIGEgbGlzdCwgaG93IHRvIG1hbmFnZSB0aGUgc291cmNlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWFwU291cmNlTGlzdE1vZGVDb2RpbmdzOk1hcFNvdXJjZUxpc3RNb2RlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBmaXJzdDogT25seSBwcm9jZXNzIHRoaXMgcnVsZSBmb3IgdGhlIGZpcnN0IGluIHRoZSBsaXN0XHJcbiAgICovXHJcbiAgRmlyc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiRmlyc3RcIixcclxuICAgIGNvZGU6IFwiZmlyc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21hcC1zb3VyY2UtbGlzdC1tb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsYXN0OiBPbmx5IHByb2Nlc3MgdGhpcyBydWxlIGZvciB0aGUgbGFzdCBpbiB0aGUgbGlzdFxyXG4gICAqL1xyXG4gIExhc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiTGFzdFwiLFxyXG4gICAgY29kZTogXCJsYXN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90X2ZpcnN0OiBQcm9jZXNzIHRoaXMgcnVsZSBmb3IgYWxsIGJ1dCB0aGUgZmlyc3RcclxuICAgKi9cclxuICBBbGxCdXRUaGVGaXJzdDoge1xyXG4gICAgZGlzcGxheTogXCJBbGwgYnV0IHRoZSBmaXJzdFwiLFxyXG4gICAgY29kZTogXCJub3RfZmlyc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21hcC1zb3VyY2UtbGlzdC1tb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3RfbGFzdDogUHJvY2VzcyB0aGlzIHJ1bGUgZm9yIGFsbCBidXQgdGhlIGxhc3RcclxuICAgKi9cclxuICBBbGxCdXRUaGVMYXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkFsbCBidXQgdGhlIGxhc3RcIixcclxuICAgIGNvZGU6IFwibm90X2xhc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21hcC1zb3VyY2UtbGlzdC1tb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvbmx5X29uZTogT25seSBwcm9jZXNzIHRoaXMgcnVsZSBpcyB0aGVyZSBpcyBvbmx5IGl0ZW1cclxuICAgKi9cclxuICBFbmZvcmNlT25seU9uZToge1xyXG4gICAgZGlzcGxheTogXCJFbmZvcmNlIG9ubHkgb25lXCIsXHJcbiAgICBjb2RlOiBcIm9ubHlfb25lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==