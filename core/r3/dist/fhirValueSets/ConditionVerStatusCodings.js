// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/condition-ver-status|3.0.2
/**
 * The verification status to support or decline the clinical status of the condition or diagnosis.
 */
export const ConditionVerStatusCodings = {
    /**
     * confirmed: There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Confirmed: {
        display: "Confirmed",
        code: "confirmed",
        system: "http://hl7.org/fhir/condition-ver-status",
    },
    /**
     * differential: One of a set of potential (and typically mutually exclusive) diagnoses asserted to further guide the diagnostic process and preliminary treatment.
     */
    Differential: {
        display: "Differential",
        code: "differential",
        system: "http://hl7.org/fhir/condition-ver-status",
    },
    /**
     * entered-in-error: The statement was entered in error and is not valid.
     */
    EnteredInError: {
        display: "Entered In Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/condition-ver-status",
    },
    /**
     * provisional: This is a tentative diagnosis - still a candidate that is under consideration.
     */
    Provisional: {
        display: "Provisional",
        code: "provisional",
        system: "http://hl7.org/fhir/condition-ver-status",
    },
    /**
     * refuted: This condition has been ruled out by diagnostic and clinical evidence.
     */
    Refuted: {
        display: "Refuted",
        code: "refuted",
        system: "http://hl7.org/fhir/condition-ver-status",
    },
    /**
     * unknown: The condition status is unknown.  Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown".
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/condition-ver-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFrQ3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb25kaXRpb24tdmVyLXN0YXR1c3wzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB2ZXJpZmljYXRpb24gc3RhdHVzIHRvIHN1cHBvcnQgb3IgZGVjbGluZSB0aGUgY2xpbmljYWwgc3RhdHVzIG9mIHRoZSBjb25kaXRpb24gb3IgZGlhZ25vc2lzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb25maXJtZWQ6IFRoZXJlIGlzIHN1ZmZpY2llbnQgZGlhZ25vc3RpYyBhbmQvb3IgY2xpbmljYWwgZXZpZGVuY2UgdG8gdHJlYXQgdGhpcyBhcyBhIGNvbmZpcm1lZCBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgQ29uZmlybWVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRpZmZlcmVudGlhbDogT25lIG9mIGEgc2V0IG9mIHBvdGVudGlhbCAoYW5kIHR5cGljYWxseSBtdXR1YWxseSBleGNsdXNpdmUpIGRpYWdub3NlcyBhc3NlcnRlZCB0byBmdXJ0aGVyIGd1aWRlIHRoZSBkaWFnbm9zdGljIHByb2Nlc3MgYW5kIHByZWxpbWluYXJ5IHRyZWF0bWVudC5cclxuICAgKi9cclxuICBEaWZmZXJlbnRpYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIHN0YXRlbWVudCB3YXMgZW50ZXJlZCBpbiBlcnJvciBhbmQgaXMgbm90IHZhbGlkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb3Zpc2lvbmFsOiBUaGlzIGlzIGEgdGVudGF0aXZlIGRpYWdub3NpcyAtIHN0aWxsIGEgY2FuZGlkYXRlIHRoYXQgaXMgdW5kZXIgY29uc2lkZXJhdGlvbi5cclxuICAgKi9cclxuICBQcm92aXNpb25hbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWZ1dGVkOiBUaGlzIGNvbmRpdGlvbiBoYXMgYmVlbiBydWxlZCBvdXQgYnkgZGlhZ25vc3RpYyBhbmQgY2xpbmljYWwgZXZpZGVuY2UuXHJcbiAgICovXHJcbiAgUmVmdXRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgY29uZGl0aW9uIHN0YXR1cyBpcyB1bmtub3duLiAgTm90ZSB0aGF0IFwidW5rbm93blwiIGlzIGEgdmFsdWUgb2YgbGFzdCByZXNvcnQgYW5kIGV2ZXJ5IGF0dGVtcHQgc2hvdWxkIGJlIG1hZGUgdG8gcHJvdmlkZSBhIG1lYW5pbmdmdWwgdmFsdWUgb3RoZXIgdGhhbiBcInVua25vd25cIi5cclxuICAgKi9cclxuICBVbmtub3duOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHZlcmlmaWNhdGlvbiBzdGF0dXMgdG8gc3VwcG9ydCBvciBkZWNsaW5lIHRoZSBjbGluaWNhbCBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiBvciBkaWFnbm9zaXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5nczpDb25kaXRpb25WZXJTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbmZpcm1lZDogVGhlcmUgaXMgc3VmZmljaWVudCBkaWFnbm9zdGljIGFuZC9vciBjbGluaWNhbCBldmlkZW5jZSB0byB0cmVhdCB0aGlzIGFzIGEgY29uZmlybWVkIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBDb25maXJtZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29uZmlybWVkXCIsXHJcbiAgICBjb2RlOiBcImNvbmZpcm1lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRpZmZlcmVudGlhbDogT25lIG9mIGEgc2V0IG9mIHBvdGVudGlhbCAoYW5kIHR5cGljYWxseSBtdXR1YWxseSBleGNsdXNpdmUpIGRpYWdub3NlcyBhc3NlcnRlZCB0byBmdXJ0aGVyIGd1aWRlIHRoZSBkaWFnbm9zdGljIHByb2Nlc3MgYW5kIHByZWxpbWluYXJ5IHRyZWF0bWVudC5cclxuICAgKi9cclxuICBEaWZmZXJlbnRpYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiRGlmZmVyZW50aWFsXCIsXHJcbiAgICBjb2RlOiBcImRpZmZlcmVudGlhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBzdGF0ZW1lbnQgd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIGlzIG5vdCB2YWxpZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIEluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm92aXNpb25hbDogVGhpcyBpcyBhIHRlbnRhdGl2ZSBkaWFnbm9zaXMgLSBzdGlsbCBhIGNhbmRpZGF0ZSB0aGF0IGlzIHVuZGVyIGNvbnNpZGVyYXRpb24uXHJcbiAgICovXHJcbiAgUHJvdmlzaW9uYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvdmlzaW9uYWxcIixcclxuICAgIGNvZGU6IFwicHJvdmlzaW9uYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWZ1dGVkOiBUaGlzIGNvbmRpdGlvbiBoYXMgYmVlbiBydWxlZCBvdXQgYnkgZGlhZ25vc3RpYyBhbmQgY2xpbmljYWwgZXZpZGVuY2UuXHJcbiAgICovXHJcbiAgUmVmdXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZWZ1dGVkXCIsXHJcbiAgICBjb2RlOiBcInJlZnV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgY29uZGl0aW9uIHN0YXR1cyBpcyB1bmtub3duLiAgTm90ZSB0aGF0IFwidW5rbm93blwiIGlzIGEgdmFsdWUgb2YgbGFzdCByZXNvcnQgYW5kIGV2ZXJ5IGF0dGVtcHQgc2hvdWxkIGJlIG1hZGUgdG8gcHJvdmlkZSBhIG1lYW5pbmdmdWwgdmFsdWUgb3RoZXIgdGhhbiBcInVua25vd25cIi5cclxuICAgKi9cclxuICBVbmtub3duOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=