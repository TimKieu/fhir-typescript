// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/v3-ActInvoiceGroupCode|2014-03-26
/**
 *  Type of invoice element that is used to assist in describing an Invoice that is either submitted for adjudication or for which is returned on adjudication results. Invoice elements of this type signify a grouping of one or more children (detail) invoice elements.  They do not have intrinsic costing associated with them, but merely reflect the sum of all costing for it's immediate children invoice elements.
 */
export const V3ActInvoiceGroupCodings = {
    /**
     * _ActInvoiceInterGroupCode: Type of invoice element that is used to assist in describing an Invoice that is either submitted for adjudication or for which is returned on adjudication results.
     *
     *                         Invoice elements of this type signify a grouping of one or more children (detail) invoice elements.  They do not have intrinsic costing associated with them, but merely reflect the sum of all costing for it's immediate children invoice elements.
     *
     *                         The domain is only specified for an intermediate invoice element group (non-root or non-top level) for an Invoice.
     */
    ActInvoiceInterGroupCode: {
        display: "ActInvoiceInterGroupCode",
        code: "_ActInvoiceInterGroupCode",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * _ActInvoiceRootGroupCode: Type of invoice element that is used to assist in describing an Invoice that is either submitted for adjudication or for which is returned on adjudication results.
     *
     *                         Invoice elements of this type signify a grouping of one or more children (detail) invoice elements.  They do not have intrinsic costing associated with them, but merely reflect the sum of all costing for it's immediate children invoice elements.
     *
     *                         Codes from this domain reflect the type of Invoice such as Pharmacy Dispense, Clinical Service and Clinical Product.  The domain is only specified for the root (top level) invoice element group for an Invoice.
     */
    ActInvoiceRootGroupCode: {
        display: "ActInvoiceRootGroupCode",
        code: "_ActInvoiceRootGroupCode",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPINV: Clinical product invoice where the Invoice Grouping contains one or more billable item and is supported by clinical product(s).
     *
     *                         For example, a crutch or a wheelchair.
     */
    ClinicalProductInvoice: {
        display: "clinical product invoice",
        code: "CPINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPNDDRGING: A grouping of invoice element groups and details including the ones specifying the compound ingredients being invoiced. It may also contain generic detail items such as markup.
     */
    CompoundDrugInvoiceGroup: {
        display: "compound drug invoice group",
        code: "CPNDDRGING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPNDINDING: A grouping of invoice element details including the one specifying an ingredient drug being invoiced. It may also contain generic detail items such as tax or markup.
     */
    CompoundIngredientInvoiceGroup: {
        display: "compound ingredient invoice group",
        code: "CPNDINDING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CPNDSUPING: A grouping of invoice element groups and details including the ones specifying the compound supplies being invoiced. It may also contain generic detail items such as markup.
     */
    CompoundSupplyInvoiceGroup: {
        display: "compound supply invoice group",
        code: "CPNDSUPING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CSINV: Clinical Services Invoice which can be used to describe a single service, multiple services or repeated services.
     *
     *                         [1] Single Clinical services invoice where the Invoice Grouping contains one billable item and is supported by one clinical service.
     *
     *                         For example, a single service for an office visit or simple clinical procedure (e.g. knee mobilization).
     *
     *                         [2] Multiple Clinical services invoice where the Invoice Grouping contains more than one billable item, supported by one or more clinical services.  The services can be distinct and over multiple dates, but for the same patient. This type of invoice includes a series of treatments which must be adjudicated together.
     *
     *                         For example, an adjustment and ultrasound for a chiropractic session where fees are associated for each of the services and adjudicated (invoiced) together.
     *
     *                         [3] Repeated Clinical services invoice where the Invoice Grouping contains one or more billable item, supported by the same clinical service repeated over a period of time.
     *
     *                         For example, the same Chiropractic adjustment (service or treatment) delivered on 3 separate occasions over a period of time at the discretion of the provider (e.g. month).
     */
    ClinicalServiceInvoice: {
        display: "clinical service invoice",
        code: "CSINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CSPINV: A clinical Invoice Grouping consisting of one or more services and one or more product.  Billing for these service(s) and product(s) are supported by multiple clinical billable events (acts).
     *
     *                         All items in the Invoice Grouping must be adjudicated together to be acceptable to the Adjudicator.
     *
     *                         For example , a brace (product) invoiced together with the fitting (service).
     */
    ClinicalServiceAndProduct: {
        display: "clinical service and product",
        code: "CSPINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DRUGING: A grouping of invoice element details including the one specifying the drug being invoiced. It may also contain generic detail items such as markup.
     */
    DrugInvoiceGroup: {
        display: "drug invoice group",
        code: "DRUGING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * FININV: Invoice Grouping without clinical justification.  These will not require identification of participants and associations from a clinical context such as patient and provider.
     *
     *                         Examples are interest charges and mileage.
     */
    FinancialInvoice: {
        display: "financial invoice",
        code: "FININV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * FRAMEING: A grouping of invoice element details including the ones specifying the frame fee and the frame dispensing cost that are being invoiced.
     */
    FrameInvoiceGroup: {
        display: "frame invoice group",
        code: "FRAMEING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * LENSING: A grouping of invoice element details including the ones specifying the lens fee and the lens dispensing cost that are being invoiced.
     */
    LensInvoiceGroup: {
        display: "lens invoice group",
        code: "LENSING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * OHSINV: A clinical Invoice Grouping consisting of one or more oral health services. Billing for these service(s) are supported by multiple clinical billable events (acts).
     *
     *                         All items in the Invoice Grouping must be adjudicated together to be acceptable to the Adjudicator.
     */
    OralHealthService: {
        display: "oral health service",
        code: "OHSINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * PAINV: HealthCare facility preferred accommodation invoice.
     */
    PreferredAccommodationInvoice: {
        display: "preferred accommodation invoice",
        code: "PAINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * PRDING: A grouping of invoice element details including the one specifying the product (good or supply) being invoiced. It may also contain generic detail items such as tax or discount.
     */
    ProductInvoiceGroup: {
        display: "product invoice group",
        code: "PRDING",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * RXCINV: Pharmacy dispense invoice for a compound.
     */
    RxCompoundInvoice: {
        display: "Rx compound invoice",
        code: "RXCINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * RXDINV: Pharmacy dispense invoice not involving a compound
     */
    RxDispenseInvoice: {
        display: "Rx dispense invoice",
        code: "RXDINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * SBFINV: Clinical services invoice where the Invoice Group contains one billable item for multiple clinical services in one or more sessions.
     */
    SessionalOrBlockFeeInvoice: {
        display: "sessional or block fee invoice",
        code: "SBFINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * VRXINV: Vision dispense invoice for up to 2 lens (left and right), frame and optional discount.  Eye exams are invoiced as a clinical service invoice.
     */
    VisionDispenseInvoice: {
        display: "vision dispense invoice",
        code: "VRXINV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
};
//# sourceMappingURL=data:application/json;base64,