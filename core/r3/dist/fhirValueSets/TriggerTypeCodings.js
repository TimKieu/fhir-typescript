// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/trigger-type|3.0.2
/**
 * The type of trigger
 */
export const TriggerTypeCodings = {
    /**
     * data-access-ended: The trigger occurs whenever access to data of a particular type is completed
     */
    DataAccessEnded: {
        display: "Data Access Ended",
        code: "data-access-ended",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-accessed: The trigger occurs whenever data of a particular type is accessed
     */
    DataAccessed: {
        display: "Data Accessed",
        code: "data-accessed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-added: The trigger occurs whenever data of a particular type is added
     */
    DataAdded: {
        display: "Data Added",
        code: "data-added",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-modified: The trigger occurs whenever data of a particular type is modified
     */
    DataModified: {
        display: "Data Modified",
        code: "data-modified",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-removed: The trigger occurs whenever data of a particular type is removed
     */
    DataRemoved: {
        display: "Data Removed",
        code: "data-removed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * named-event: The trigger occurs in response to a specific named event
     */
    NamedEvent: {
        display: "Named Event",
        code: "named-event",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule
     */
    Periodic: {
        display: "Periodic",
        code: "periodic",
        system: "http://hl7.org/fhir/trigger-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJpZ2dlclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UcmlnZ2VyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBc0NqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC90cmlnZ2VyLXR5cGV8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0cmlnZ2VyXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUcmlnZ2VyVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1hY2Nlc3MtZW5kZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBhY2Nlc3MgdG8gZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBjb21wbGV0ZWRcclxuICAgKi9cclxuICBEYXRhQWNjZXNzRW5kZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1hY2Nlc3NlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWNjZXNzZWRcclxuICAgKi9cclxuICBEYXRhQWNjZXNzZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1hZGRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWRkZWRcclxuICAgKi9cclxuICBEYXRhQWRkZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1tb2RpZmllZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgbW9kaWZpZWRcclxuICAgKi9cclxuICBEYXRhTW9kaWZpZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1yZW1vdmVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyByZW1vdmVkXHJcbiAgICovXHJcbiAgRGF0YVJlbW92ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbmFtZWQtZXZlbnQ6IFRoZSB0cmlnZ2VyIG9jY3VycyBpbiByZXNwb25zZSB0byBhIHNwZWNpZmljIG5hbWVkIGV2ZW50XHJcbiAgICovXHJcbiAgTmFtZWRFdmVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwZXJpb2RpYzogVGhlIHRyaWdnZXIgb2NjdXJzIGF0IGEgc3BlY2lmaWMgdGltZSBvciBwZXJpb2RpY2FsbHkgYXMgZGVzY3JpYmVkIGJ5IGEgdGltaW5nIG9yIHNjaGVkdWxlXHJcbiAgICovXHJcbiAgUGVyaW9kaWM6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0cmlnZ2VyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVHJpZ2dlclR5cGVDb2RpbmdzOlRyaWdnZXJUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzcy1lbmRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGFjY2VzcyB0byBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNvbXBsZXRlZFxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NFbmRlZDoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIEFjY2VzcyBFbmRlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWFjY2Vzcy1lbmRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzc2VkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBhY2Nlc3NlZFxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NlZDoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIEFjY2Vzc2VkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtYWNjZXNzZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF0YS1hZGRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWRkZWRcclxuICAgKi9cclxuICBEYXRhQWRkZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBBZGRlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWFkZGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtbW9kaWZpZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIG1vZGlmaWVkXHJcbiAgICovXHJcbiAgRGF0YU1vZGlmaWVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgTW9kaWZpZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1tb2RpZmllZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhLXJlbW92ZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIHJlbW92ZWRcclxuICAgKi9cclxuICBEYXRhUmVtb3ZlZDoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIFJlbW92ZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1yZW1vdmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5hbWVkLWV2ZW50OiBUaGUgdHJpZ2dlciBvY2N1cnMgaW4gcmVzcG9uc2UgdG8gYSBzcGVjaWZpYyBuYW1lZCBldmVudFxyXG4gICAqL1xyXG4gIE5hbWVkRXZlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTmFtZWQgRXZlbnRcIixcclxuICAgIGNvZGU6IFwibmFtZWQtZXZlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGVyaW9kaWM6IFRoZSB0cmlnZ2VyIG9jY3VycyBhdCBhIHNwZWNpZmljIHRpbWUgb3IgcGVyaW9kaWNhbGx5IGFzIGRlc2NyaWJlZCBieSBhIHRpbWluZyBvciBzY2hlZHVsZVxyXG4gICAqL1xyXG4gIFBlcmlvZGljOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlcmlvZGljXCIsXHJcbiAgICBjb2RlOiBcInBlcmlvZGljXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=