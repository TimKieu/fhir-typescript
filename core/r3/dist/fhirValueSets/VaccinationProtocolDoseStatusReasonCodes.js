// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/vaccination-protocol-dose-status-reason|3.0.2
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why an administered dose has been assigned a particular status. Often, this reason describes why a dose is considered invalid. This value set is provided as a suggestive example.
 */
export const VaccinationProtocolDoseStatusReasonCodes = {
    /**
     * advstorage: The product was stored in a manner inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product.
     */
    AdverseStorageCondition: "advstorage",
    /**
     * coldchbrk: The product was stored at a temperature inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product.
     */
    ColdChainBreak: "coldchbrk",
    /**
     * explot: The product was administered after the expiration date associated with lot of vaccine.
     */
    ExpiredLot: "explot",
    /**
     * outsidesched: The product was administered at a time inconsistent with the documented schedule.
     */
    AdministeredOutsideRecommendedSchedule: "outsidesched",
    /**
     * prodrecall: The product administered has been recalled by the manufacturer.
     */
    ProductRecall: "prodrecall",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFjY2luYXRpb25Qcm90b2NvbERvc2VTdGF0dXNSZWFzb25Db2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVmFjY2luYXRpb25Qcm90b2NvbERvc2VTdGF0dXNSZWFzb25Db2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0RkFBNEY7QUFFNUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx3Q0FBd0MsR0FBRztJQUN0RDs7T0FFRztJQUNILHVCQUF1QixFQUFFLFlBQVk7SUFDckM7O09BRUc7SUFDSCxjQUFjLEVBQUUsV0FBVztJQUMzQjs7T0FFRztJQUNILFVBQVUsRUFBRSxRQUFRO0lBQ3BCOztPQUVHO0lBQ0gsc0NBQXNDLEVBQUUsY0FBYztJQUN0RDs7T0FFRztJQUNILGFBQWEsRUFBRSxZQUFZO0NBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luYXRpb24tcHJvdG9jb2wtZG9zZS1zdGF0dXMtcmVhc29ufDMuMC4yXHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSByZWFzb24gd2h5IGFuIGFkbWluaXN0ZXJlZCBkb3NlIGhhcyBiZWVuIGFzc2lnbmVkIGEgcGFydGljdWxhciBzdGF0dXMuIE9mdGVuLCB0aGlzIHJlYXNvbiBkZXNjcmliZXMgd2h5IGEgZG9zZSBpcyBjb25zaWRlcmVkIGludmFsaWQuIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFZhY2NpbmF0aW9uUHJvdG9jb2xEb3NlU3RhdHVzUmVhc29uQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYWR2c3RvcmFnZTogVGhlIHByb2R1Y3Qgd2FzIHN0b3JlZCBpbiBhIG1hbm5lciBpbmNvbnNpc3RlbnQgd2l0aCBtYW51ZmFjdHVyZXIgZ3VpZGVsaW5lcyBwb3RlbnRpYWxseSByZWR1Y2luZyB0aGUgZWZmZWN0aXZlbmVzcyBvZiB0aGUgcHJvZHVjdC5cclxuICAgKi9cclxuICBBZHZlcnNlU3RvcmFnZUNvbmRpdGlvbjogXCJhZHZzdG9yYWdlXCIsXHJcbiAgLyoqXHJcbiAgICogY29sZGNoYnJrOiBUaGUgcHJvZHVjdCB3YXMgc3RvcmVkIGF0IGEgdGVtcGVyYXR1cmUgaW5jb25zaXN0ZW50IHdpdGggbWFudWZhY3R1cmVyIGd1aWRlbGluZXMgcG90ZW50aWFsbHkgcmVkdWNpbmcgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgdGhlIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgQ29sZENoYWluQnJlYWs6IFwiY29sZGNoYnJrXCIsXHJcbiAgLyoqXHJcbiAgICogZXhwbG90OiBUaGUgcHJvZHVjdCB3YXMgYWRtaW5pc3RlcmVkIGFmdGVyIHRoZSBleHBpcmF0aW9uIGRhdGUgYXNzb2NpYXRlZCB3aXRoIGxvdCBvZiB2YWNjaW5lLlxyXG4gICAqL1xyXG4gIEV4cGlyZWRMb3Q6IFwiZXhwbG90XCIsXHJcbiAgLyoqXHJcbiAgICogb3V0c2lkZXNjaGVkOiBUaGUgcHJvZHVjdCB3YXMgYWRtaW5pc3RlcmVkIGF0IGEgdGltZSBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgZG9jdW1lbnRlZCBzY2hlZHVsZS5cclxuICAgKi9cclxuICBBZG1pbmlzdGVyZWRPdXRzaWRlUmVjb21tZW5kZWRTY2hlZHVsZTogXCJvdXRzaWRlc2NoZWRcIixcclxuICAvKipcclxuICAgKiBwcm9kcmVjYWxsOiBUaGUgcHJvZHVjdCBhZG1pbmlzdGVyZWQgaGFzIGJlZW4gcmVjYWxsZWQgYnkgdGhlIG1hbnVmYWN0dXJlci5cclxuICAgKi9cclxuICBQcm9kdWN0UmVjYWxsOiBcInByb2RyZWNhbGxcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHJlYXNvbiB3aHkgYW4gYWRtaW5pc3RlcmVkIGRvc2UgaGFzIGJlZW4gYXNzaWduZWQgYSBwYXJ0aWN1bGFyIHN0YXR1cy4gT2Z0ZW4sIHRoaXMgcmVhc29uIGRlc2NyaWJlcyB3aHkgYSBkb3NlIGlzIGNvbnNpZGVyZWQgaW52YWxpZC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBWYWNjaW5hdGlvblByb3RvY29sRG9zZVN0YXR1c1JlYXNvbkNvZGVUeXBlID0gdHlwZW9mIFZhY2NpbmF0aW9uUHJvdG9jb2xEb3NlU3RhdHVzUmVhc29uQ29kZXNba2V5b2YgdHlwZW9mIFZhY2NpbmF0aW9uUHJvdG9jb2xEb3NlU3RhdHVzUmVhc29uQ29kZXNdO1xyXG4iXX0=