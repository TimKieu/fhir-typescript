// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/parameter-group|3.0.2
/**
 * Codes identifying groupings of parameters; e.g. Cardiovascular.
 */
export const ParameterGroupCodings = {
    /**
     * blood-chemistry: Blood Chemistry Parameter Group - MDC_PGRP_BLOOD_CHEM
     */
    BloodChemistryParameterGroup: {
        display: "Blood Chemistry Parameter Group",
        code: "blood-chemistry",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * drug-delivery: Drug Delivery Parameter Group - MDC_PGRP_DRUG
     */
    DrugDeliveryParameterGroup: {
        display: "Drug Delivery Parameter Group",
        code: "drug-delivery",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * ecg: ECG Parameter Group - MDC_PGRP_ECG
     */
    ECGParameterGroup: {
        display: "ECG Parameter Group",
        code: "ecg",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * fluid-chemistry: Fluid Chemistry Parameter Group - MDC_PGRP_FLUID
     */
    FluidChemistryParameterGroup: {
        display: "Fluid Chemistry Parameter Group",
        code: "fluid-chemistry",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * haemodynamic: Haemodynamic Parameter Group - MDC_PGRP_HEMO
     */
    HaemodynamicParameterGroup: {
        display: "Haemodynamic Parameter Group",
        code: "haemodynamic",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * miscellaneous: Miscellaneous Parameter Group - MDC_PGRP_MISC
     */
    MiscellaneousParameterGroup: {
        display: "Miscellaneous Parameter Group",
        code: "miscellaneous",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * neurological: Neurological Parameter Group - MDC_PGRP_NEURO
     */
    NeurologicalParameterGroup: {
        display: "Neurological Parameter Group",
        code: "neurological",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * respiratory: Respiratory Parameter Group - MDC_PGRP_RESP
     */
    RespiratoryParameterGroup: {
        display: "Respiratory Parameter Group",
        code: "respiratory",
        system: "http://hl7.org/fhir/parameter-group",
    },
    /**
     * ventilation: Ventilation Parameter Group - MDC_PGRP_VENT
     */
    VentilationParameterGroup: {
        display: "Ventilation Parameter Group",
        code: "ventilation",
        system: "http://hl7.org/fhir/parameter-group",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFyYW1ldGVyR3JvdXBDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9QYXJhbWV0ZXJHcm91cENvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBOENwRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILDRCQUE0QixFQUFFO1FBQzVCLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsK0JBQStCO1FBQ3hDLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7SUFDRDs7T0FFRztJQUNILGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCw0QkFBNEIsRUFBRTtRQUM1QixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLDhCQUE4QjtRQUN2QyxJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCwyQkFBMkIsRUFBRTtRQUMzQixPQUFPLEVBQUUsK0JBQStCO1FBQ3hDLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7SUFDRDs7T0FFRztJQUNILDBCQUEwQixFQUFFO1FBQzFCLE9BQU8sRUFBRSw4QkFBOEI7UUFDdkMsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gseUJBQXlCLEVBQUU7UUFDekIsT0FBTyxFQUFFLDZCQUE2QjtRQUN0QyxJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCx5QkFBeUIsRUFBRTtRQUN6QixPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3BhcmFtZXRlci1ncm91cHwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIGdyb3VwaW5ncyBvZiBwYXJhbWV0ZXJzOyBlLmcuIENhcmRpb3Zhc2N1bGFyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyR3JvdXBDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJsb29kLWNoZW1pc3RyeTogQmxvb2QgQ2hlbWlzdHJ5IFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX0JMT09EX0NIRU1cclxuICAgKi9cclxuICBCbG9vZENoZW1pc3RyeVBhcmFtZXRlckdyb3VwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRydWctZGVsaXZlcnk6IERydWcgRGVsaXZlcnkgUGFyYW1ldGVyIEdyb3VwIC0gTURDX1BHUlBfRFJVR1xyXG4gICAqL1xyXG4gIERydWdEZWxpdmVyeVBhcmFtZXRlckdyb3VwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVjZzogRUNHIFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX0VDR1xyXG4gICAqL1xyXG4gIEVDR1BhcmFtZXRlckdyb3VwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZsdWlkLWNoZW1pc3RyeTogRmx1aWQgQ2hlbWlzdHJ5IFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX0ZMVUlEXHJcbiAgICovXHJcbiAgRmx1aWRDaGVtaXN0cnlQYXJhbWV0ZXJHcm91cDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBoYWVtb2R5bmFtaWM6IEhhZW1vZHluYW1pYyBQYXJhbWV0ZXIgR3JvdXAgLSBNRENfUEdSUF9IRU1PXHJcbiAgICovXHJcbiAgSGFlbW9keW5hbWljUGFyYW1ldGVyR3JvdXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWlzY2VsbGFuZW91czogTWlzY2VsbGFuZW91cyBQYXJhbWV0ZXIgR3JvdXAgLSBNRENfUEdSUF9NSVNDXHJcbiAgICovXHJcbiAgTWlzY2VsbGFuZW91c1BhcmFtZXRlckdyb3VwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5ldXJvbG9naWNhbDogTmV1cm9sb2dpY2FsIFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX05FVVJPXHJcbiAgICovXHJcbiAgTmV1cm9sb2dpY2FsUGFyYW1ldGVyR3JvdXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVzcGlyYXRvcnk6IFJlc3BpcmF0b3J5IFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX1JFU1BcclxuICAgKi9cclxuICBSZXNwaXJhdG9yeVBhcmFtZXRlckdyb3VwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHZlbnRpbGF0aW9uOiBWZW50aWxhdGlvbiBQYXJhbWV0ZXIgR3JvdXAgLSBNRENfUEdSUF9WRU5UXHJcbiAgICovXHJcbiAgVmVudGlsYXRpb25QYXJhbWV0ZXJHcm91cDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIGdyb3VwaW5ncyBvZiBwYXJhbWV0ZXJzOyBlLmcuIENhcmRpb3Zhc2N1bGFyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBhcmFtZXRlckdyb3VwQ29kaW5nczpQYXJhbWV0ZXJHcm91cENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmxvb2QtY2hlbWlzdHJ5OiBCbG9vZCBDaGVtaXN0cnkgUGFyYW1ldGVyIEdyb3VwIC0gTURDX1BHUlBfQkxPT0RfQ0hFTVxyXG4gICAqL1xyXG4gIEJsb29kQ2hlbWlzdHJ5UGFyYW1ldGVyR3JvdXA6IHtcclxuICAgIGRpc3BsYXk6IFwiQmxvb2QgQ2hlbWlzdHJ5IFBhcmFtZXRlciBHcm91cFwiLFxyXG4gICAgY29kZTogXCJibG9vZC1jaGVtaXN0cnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3BhcmFtZXRlci1ncm91cFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZHJ1Zy1kZWxpdmVyeTogRHJ1ZyBEZWxpdmVyeSBQYXJhbWV0ZXIgR3JvdXAgLSBNRENfUEdSUF9EUlVHXHJcbiAgICovXHJcbiAgRHJ1Z0RlbGl2ZXJ5UGFyYW1ldGVyR3JvdXA6IHtcclxuICAgIGRpc3BsYXk6IFwiRHJ1ZyBEZWxpdmVyeSBQYXJhbWV0ZXIgR3JvdXBcIixcclxuICAgIGNvZGU6IFwiZHJ1Zy1kZWxpdmVyeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGFyYW1ldGVyLWdyb3VwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlY2c6IEVDRyBQYXJhbWV0ZXIgR3JvdXAgLSBNRENfUEdSUF9FQ0dcclxuICAgKi9cclxuICBFQ0dQYXJhbWV0ZXJHcm91cDoge1xyXG4gICAgZGlzcGxheTogXCJFQ0cgUGFyYW1ldGVyIEdyb3VwXCIsXHJcbiAgICBjb2RlOiBcImVjZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGFyYW1ldGVyLWdyb3VwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmbHVpZC1jaGVtaXN0cnk6IEZsdWlkIENoZW1pc3RyeSBQYXJhbWV0ZXIgR3JvdXAgLSBNRENfUEdSUF9GTFVJRFxyXG4gICAqL1xyXG4gIEZsdWlkQ2hlbWlzdHJ5UGFyYW1ldGVyR3JvdXA6IHtcclxuICAgIGRpc3BsYXk6IFwiRmx1aWQgQ2hlbWlzdHJ5IFBhcmFtZXRlciBHcm91cFwiLFxyXG4gICAgY29kZTogXCJmbHVpZC1jaGVtaXN0cnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3BhcmFtZXRlci1ncm91cFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGFlbW9keW5hbWljOiBIYWVtb2R5bmFtaWMgUGFyYW1ldGVyIEdyb3VwIC0gTURDX1BHUlBfSEVNT1xyXG4gICAqL1xyXG4gIEhhZW1vZHluYW1pY1BhcmFtZXRlckdyb3VwOiB7XHJcbiAgICBkaXNwbGF5OiBcIkhhZW1vZHluYW1pYyBQYXJhbWV0ZXIgR3JvdXBcIixcclxuICAgIGNvZGU6IFwiaGFlbW9keW5hbWljXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJhbWV0ZXItZ3JvdXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1pc2NlbGxhbmVvdXM6IE1pc2NlbGxhbmVvdXMgUGFyYW1ldGVyIEdyb3VwIC0gTURDX1BHUlBfTUlTQ1xyXG4gICAqL1xyXG4gIE1pc2NlbGxhbmVvdXNQYXJhbWV0ZXJHcm91cDoge1xyXG4gICAgZGlzcGxheTogXCJNaXNjZWxsYW5lb3VzIFBhcmFtZXRlciBHcm91cFwiLFxyXG4gICAgY29kZTogXCJtaXNjZWxsYW5lb3VzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJhbWV0ZXItZ3JvdXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5ldXJvbG9naWNhbDogTmV1cm9sb2dpY2FsIFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX05FVVJPXHJcbiAgICovXHJcbiAgTmV1cm9sb2dpY2FsUGFyYW1ldGVyR3JvdXA6IHtcclxuICAgIGRpc3BsYXk6IFwiTmV1cm9sb2dpY2FsIFBhcmFtZXRlciBHcm91cFwiLFxyXG4gICAgY29kZTogXCJuZXVyb2xvZ2ljYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3BhcmFtZXRlci1ncm91cFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVzcGlyYXRvcnk6IFJlc3BpcmF0b3J5IFBhcmFtZXRlciBHcm91cCAtIE1EQ19QR1JQX1JFU1BcclxuICAgKi9cclxuICBSZXNwaXJhdG9yeVBhcmFtZXRlckdyb3VwOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlc3BpcmF0b3J5IFBhcmFtZXRlciBHcm91cFwiLFxyXG4gICAgY29kZTogXCJyZXNwaXJhdG9yeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGFyYW1ldGVyLWdyb3VwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2ZW50aWxhdGlvbjogVmVudGlsYXRpb24gUGFyYW1ldGVyIEdyb3VwIC0gTURDX1BHUlBfVkVOVFxyXG4gICAqL1xyXG4gIFZlbnRpbGF0aW9uUGFyYW1ldGVyR3JvdXA6IHtcclxuICAgIGRpc3BsYXk6IFwiVmVudGlsYXRpb24gUGFyYW1ldGVyIEdyb3VwXCIsXHJcbiAgICBjb2RlOiBcInZlbnRpbGF0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJhbWV0ZXItZ3JvdXBcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=