// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/task-status|3.0.2
/**
 * The current status of the task.
 */
export const TaskStatusCodes = {
    /**
     * accepted: The potential performer has agreed to execute the task but has not yet started work.
     */
    Accepted: "accepted",
    /**
     * cancelled: The task was not completed.
     */
    Cancelled: "cancelled",
    /**
     * completed: The task has been completed.
     */
    Completed: "completed",
    /**
     * draft: The task is not yet ready to be acted upon.
     */
    Draft: "draft",
    /**
     * entered-in-error: The task should never have existed and is retained only because of the possibility it may have used.
     */
    EnteredInError: "entered-in-error",
    /**
     * failed: The task was attempted but could not be completed due to some error.
     */
    Failed: "failed",
    /**
     * in-progress: Task has been started but is not yet complete.
     */
    InProgress: "in-progress",
    /**
     * on-hold: Task has been started but work has been paused.
     */
    OnHold: "on-hold",
    /**
     * ready: Task is ready to be performed, but no action has yet been taken.  Used in place of requested/received/accepted/rejected when request assignment and acceptance is a given.
     */
    Ready: "ready",
    /**
     * received: A potential performer has claimed ownership of the task and is evaluating whether to perform it.
     */
    Received: "received",
    /**
     * rejected: The potential performer who claimed ownership of the task has decided not to execute it prior to performing any action.
     */
    Rejected: "rejected",
    /**
     * requested: The task is ready to be acted upon and action is sought.
     */
    Requested: "requested",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza1N0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UYXNrU3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsZ0VBQWdFO0FBRWhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHO0lBQzdCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGNBQWMsRUFBRSxrQkFBa0I7SUFDbEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFVBQVUsRUFBRSxhQUFhO0lBQ3pCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFNBQVM7SUFDakI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0NBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC90YXNrLXN0YXR1c3wzLjAuMlxyXG5cclxuLyoqXHJcbiAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgdGFzay5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUYXNrU3RhdHVzQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNjZXB0ZWQ6IFRoZSBwb3RlbnRpYWwgcGVyZm9ybWVyIGhhcyBhZ3JlZWQgdG8gZXhlY3V0ZSB0aGUgdGFzayBidXQgaGFzIG5vdCB5ZXQgc3RhcnRlZCB3b3JrLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiBcImFjY2VwdGVkXCIsXHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgdGFzayB3YXMgbm90IGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IFwiY2FuY2VsbGVkXCIsXHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgdGFzayBoYXMgYmVlbiBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBcImNvbXBsZXRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgdGFzayBpcyBub3QgeWV0IHJlYWR5IHRvIGJlIGFjdGVkIHVwb24uXHJcbiAgICovXHJcbiAgRHJhZnQ6IFwiZHJhZnRcIixcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgdGFzayBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkIGFuZCBpcyByZXRhaW5lZCBvbmx5IGJlY2F1c2Ugb2YgdGhlIHBvc3NpYmlsaXR5IGl0IG1heSBoYXZlIHVzZWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gIC8qKlxyXG4gICAqIGZhaWxlZDogVGhlIHRhc2sgd2FzIGF0dGVtcHRlZCBidXQgY291bGQgbm90IGJlIGNvbXBsZXRlZCBkdWUgdG8gc29tZSBlcnJvci5cclxuICAgKi9cclxuICBGYWlsZWQ6IFwiZmFpbGVkXCIsXHJcbiAgLyoqXHJcbiAgICogaW4tcHJvZ3Jlc3M6IFRhc2sgaGFzIGJlZW4gc3RhcnRlZCBidXQgaXMgbm90IHlldCBjb21wbGV0ZS5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBcImluLXByb2dyZXNzXCIsXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGFzayBoYXMgYmVlbiBzdGFydGVkIGJ1dCB3b3JrIGhhcyBiZWVuIHBhdXNlZC5cclxuICAgKi9cclxuICBPbkhvbGQ6IFwib24taG9sZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlYWR5OiBUYXNrIGlzIHJlYWR5IHRvIGJlIHBlcmZvcm1lZCwgYnV0IG5vIGFjdGlvbiBoYXMgeWV0IGJlZW4gdGFrZW4uICBVc2VkIGluIHBsYWNlIG9mIHJlcXVlc3RlZC9yZWNlaXZlZC9hY2NlcHRlZC9yZWplY3RlZCB3aGVuIHJlcXVlc3QgYXNzaWdubWVudCBhbmQgYWNjZXB0YW5jZSBpcyBhIGdpdmVuLlxyXG4gICAqL1xyXG4gIFJlYWR5OiBcInJlYWR5XCIsXHJcbiAgLyoqXHJcbiAgICogcmVjZWl2ZWQ6IEEgcG90ZW50aWFsIHBlcmZvcm1lciBoYXMgY2xhaW1lZCBvd25lcnNoaXAgb2YgdGhlIHRhc2sgYW5kIGlzIGV2YWx1YXRpbmcgd2hldGhlciB0byBwZXJmb3JtIGl0LlxyXG4gICAqL1xyXG4gIFJlY2VpdmVkOiBcInJlY2VpdmVkXCIsXHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSBwb3RlbnRpYWwgcGVyZm9ybWVyIHdobyBjbGFpbWVkIG93bmVyc2hpcCBvZiB0aGUgdGFzayBoYXMgZGVjaWRlZCBub3QgdG8gZXhlY3V0ZSBpdCBwcmlvciB0byBwZXJmb3JtaW5nIGFueSBhY3Rpb24uXHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IFwicmVqZWN0ZWRcIixcclxuICAvKipcclxuICAgKiByZXF1ZXN0ZWQ6IFRoZSB0YXNrIGlzIHJlYWR5IHRvIGJlIGFjdGVkIHVwb24gYW5kIGFjdGlvbiBpcyBzb3VnaHQuXHJcbiAgICovXHJcbiAgUmVxdWVzdGVkOiBcInJlcXVlc3RlZFwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgdGFzay5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRhc2tTdGF0dXNDb2RlVHlwZSA9IHR5cGVvZiBUYXNrU3RhdHVzQ29kZXNba2V5b2YgdHlwZW9mIFRhc2tTdGF0dXNDb2Rlc107XHJcbiJdfQ==