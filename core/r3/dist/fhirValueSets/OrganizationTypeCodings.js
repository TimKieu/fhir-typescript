// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/organization-type|3.0.2
/**
 * This example value set defines a set of codes that can be used to indicate a type of organization.
 */
export const OrganizationTypeCodings = {
    /**
     * bus: An organization that is a registered business or corporation but not identified by other types.
     */
    NonHealthcareBusinessOrCorporation: {
        display: "Non-Healthcare Business or Corporation",
        code: "bus",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * cg: An un-incorporated community group.
     */
    CommunityGroup: {
        display: "Community Group",
        code: "cg",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * crs: An organization that is identified as a Pharmaceutical/Clinical Research Sponsor.
     */
    ClinicalResearchSponsor: {
        display: "Clinical Research Sponsor",
        code: "crs",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * dept: A department or ward within a hospital (Generally is not applicable to top level organizations)
     */
    HospitalDepartment: {
        display: "Hospital Department",
        code: "dept",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * edu: An educational institution that provides education or research facilities.
     */
    EducationalInstitute: {
        display: "Educational Institute",
        code: "edu",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * govt: A political body, often used when including organization records for government bodies such as a Federal Government, State or Local Government.
     */
    Government: {
        display: "Government",
        code: "govt",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * ins: A company that provides insurance to its subscribers that may include healthcare related policies.
     */
    InsuranceCompany: {
        display: "Insurance Company",
        code: "ins",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * other: Other type of organization not already specified.
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * prov: An organization that provides healthcare services.
     */
    HealthcareProvider: {
        display: "Healthcare Provider",
        code: "prov",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * reli: An organization that is identified as a part of a religious institution.
     */
    ReligiousInstitution: {
        display: "Religious Institution",
        code: "reli",
        system: "http://hl7.org/fhir/organization-type",
    },
    /**
     * team: An organizational team is usually a grouping of practitioners that perform a specific function within an organization (which could be a top level organization, or a department).
     */
    OrganizationalTeam: {
        display: "Organizational team",
        code: "team",
        system: "http://hl7.org/fhir/organization-type",
    },
};
//# sourceMappingURL=data:application/json;base64,