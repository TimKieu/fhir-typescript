// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-state-codes|3.0.2
/**
 * Indicates the state of the consent
 */
export const ConsentStateCodings = {
    /**
     * active: The consent is to be followed and enforced.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * draft: The consent is in development or awaiting use but is not yet intended to be acted upon.
     */
    Pending: {
        display: "Pending",
        code: "draft",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * entered-in-error: The consent was created wrongly (e.g. wrong patient) and should be ignored
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * inactive: The consent is terminated or replaced.
     */
    Inactive: {
        display: "Inactive",
        code: "inactive",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * proposed: The consent has been proposed but not yet agreed to by all parties. The negotiation stage.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * rejected: The consent has been rejected by one or more of the parties.
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc2VudFN0YXRlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uc2VudFN0YXRlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3RUFBd0U7QUFrQ3hFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb25zZW50LXN0YXRlLWNvZGVzfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29uc2VudFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29uc2VudFN0YXRlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSBjb25zZW50IGlzIHRvIGJlIGZvbGxvd2VkIGFuZCBlbmZvcmNlZC5cclxuICAgKi9cclxuICBBY3RpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSBjb25zZW50IGlzIGluIGRldmVsb3BtZW50IG9yIGF3YWl0aW5nIHVzZSBidXQgaXMgbm90IHlldCBpbnRlbmRlZCB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIFBlbmRpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIGNvbnNlbnQgd2FzIGNyZWF0ZWQgd3JvbmdseSAoZS5nLiB3cm9uZyBwYXRpZW50KSBhbmQgc2hvdWxkIGJlIGlnbm9yZWRcclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbmFjdGl2ZTogVGhlIGNvbnNlbnQgaXMgdGVybWluYXRlZCBvciByZXBsYWNlZC5cclxuICAgKi9cclxuICBJbmFjdGl2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm9wb3NlZDogVGhlIGNvbnNlbnQgaGFzIGJlZW4gcHJvcG9zZWQgYnV0IG5vdCB5ZXQgYWdyZWVkIHRvIGJ5IGFsbCBwYXJ0aWVzLiBUaGUgbmVnb3RpYXRpb24gc3RhZ2UuXHJcbiAgICovXHJcbiAgUHJvcG9zZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSBjb25zZW50IGhhcyBiZWVuIHJlamVjdGVkIGJ5IG9uZSBvciBtb3JlIG9mIHRoZSBwYXJ0aWVzLlxyXG4gICAqL1xyXG4gIFJlamVjdGVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29uc2VudFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbnNlbnRTdGF0ZUNvZGluZ3M6Q29uc2VudFN0YXRlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSBjb25zZW50IGlzIHRvIGJlIGZvbGxvd2VkIGFuZCBlbmZvcmNlZC5cclxuICAgKi9cclxuICBBY3RpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImFjdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSBjb25zZW50IGlzIGluIGRldmVsb3BtZW50IG9yIGF3YWl0aW5nIHVzZSBidXQgaXMgbm90IHlldCBpbnRlbmRlZCB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIFBlbmRpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiUGVuZGluZ1wiLFxyXG4gICAgY29kZTogXCJkcmFmdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIGNvbnNlbnQgd2FzIGNyZWF0ZWQgd3JvbmdseSAoZS5nLiB3cm9uZyBwYXRpZW50KSBhbmQgc2hvdWxkIGJlIGlnbm9yZWRcclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluYWN0aXZlOiBUaGUgY29uc2VudCBpcyB0ZXJtaW5hdGVkIG9yIHJlcGxhY2VkLlxyXG4gICAqL1xyXG4gIEluYWN0aXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkluYWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImluYWN0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9wb3NlZDogVGhlIGNvbnNlbnQgaGFzIGJlZW4gcHJvcG9zZWQgYnV0IG5vdCB5ZXQgYWdyZWVkIHRvIGJ5IGFsbCBwYXJ0aWVzLiBUaGUgbmVnb3RpYXRpb24gc3RhZ2UuXHJcbiAgICovXHJcbiAgUHJvcG9zZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvcG9zZWRcIixcclxuICAgIGNvZGU6IFwicHJvcG9zZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlamVjdGVkOiBUaGUgY29uc2VudCBoYXMgYmVlbiByZWplY3RlZCBieSBvbmUgb3IgbW9yZSBvZiB0aGUgcGFydGllcy5cclxuICAgKi9cclxuICBSZWplY3RlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZWplY3RlZFwiLFxyXG4gICAgY29kZTogXCJyZWplY3RlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==