// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/name-use|3.0.2
/**
 * The use of a human name
 */
export const NameUseCodings = {
    /**
     * anonymous: Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons)
     */
    Anonymous: {
        display: "Anonymous",
        code: "anonymous",
        system: "http://hl7.org/fhir/name-use",
    },
    /**
     * maiden: A name used prior to changing name because of marriage. This name use is for use by applications that collect and store names that were used prior to a marriage. Marriage naming customs vary greatly around the world, and are constantly changing. This term is not gender specific. The use of this term does not imply any particular history for a person's name
     */
    NameChangedForMarriage: {
        display: "Name changed for Marriage",
        code: "maiden",
        system: "http://hl7.org/fhir/name-use",
    },
    /**
     * nickname: A name that is used to address the person in an informal manner, but is not part of their formal or usual name
     */
    Nickname: {
        display: "Nickname",
        code: "nickname",
        system: "http://hl7.org/fhir/name-use",
    },
    /**
     * official: The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called "legal name".
     */
    Official: {
        display: "Official",
        code: "official",
        system: "http://hl7.org/fhir/name-use",
    },
    /**
     * old: This name is no longer in use (or was never correct, but retained for records)
     */
    Old: {
        display: "Old",
        code: "old",
        system: "http://hl7.org/fhir/name-use",
    },
    /**
     * temp: A temporary name. Name.period can provide more detailed information. This may also be used for temporary names assigned at birth or in emergency situations.
     */
    Temp: {
        display: "Temp",
        code: "temp",
        system: "http://hl7.org/fhir/name-use",
    },
    /**
     * usual: Known as/conventional/the one you normally use
     */
    Usual: {
        display: "Usual",
        code: "usual",
        system: "http://hl7.org/fhir/name-use",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmFtZVVzZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL05hbWVVc2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZEQUE2RDtBQXNDN0Q7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQXFCO0lBQzlDOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDhCQUE4QjtLQUN2QztJQUNEOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSw4QkFBOEI7S0FDdkM7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSw4QkFBOEI7S0FDdkM7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSw4QkFBOEI7S0FDdkM7SUFDRDs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsOEJBQThCO0tBQ3ZDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDhCQUE4QjtLQUN2QztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsOEJBQThCO0tBQ3ZDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9uYW1lLXVzZXwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB1c2Ugb2YgYSBodW1hbiBuYW1lXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBOYW1lVXNlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbm9ueW1vdXM6IEFub255bW91cyBhc3NpZ25lZCBuYW1lLCBhbGlhcywgb3IgcHNldWRvbnltICh1c2VkIHRvIHByb3RlY3QgYSBwZXJzb24ncyBpZGVudGl0eSBmb3IgcHJpdmFjeSByZWFzb25zKVxyXG4gICAqL1xyXG4gIEFub255bW91czogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtYWlkZW46IEEgbmFtZSB1c2VkIHByaW9yIHRvIGNoYW5naW5nIG5hbWUgYmVjYXVzZSBvZiBtYXJyaWFnZS4gVGhpcyBuYW1lIHVzZSBpcyBmb3IgdXNlIGJ5IGFwcGxpY2F0aW9ucyB0aGF0IGNvbGxlY3QgYW5kIHN0b3JlIG5hbWVzIHRoYXQgd2VyZSB1c2VkIHByaW9yIHRvIGEgbWFycmlhZ2UuIE1hcnJpYWdlIG5hbWluZyBjdXN0b21zIHZhcnkgZ3JlYXRseSBhcm91bmQgdGhlIHdvcmxkLCBhbmQgYXJlIGNvbnN0YW50bHkgY2hhbmdpbmcuIFRoaXMgdGVybSBpcyBub3QgZ2VuZGVyIHNwZWNpZmljLiBUaGUgdXNlIG9mIHRoaXMgdGVybSBkb2VzIG5vdCBpbXBseSBhbnkgcGFydGljdWxhciBoaXN0b3J5IGZvciBhIHBlcnNvbidzIG5hbWVcclxuICAgKi9cclxuICBOYW1lQ2hhbmdlZEZvck1hcnJpYWdlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5pY2tuYW1lOiBBIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGFkZHJlc3MgdGhlIHBlcnNvbiBpbiBhbiBpbmZvcm1hbCBtYW5uZXIsIGJ1dCBpcyBub3QgcGFydCBvZiB0aGVpciBmb3JtYWwgb3IgdXN1YWwgbmFtZVxyXG4gICAqL1xyXG4gIE5pY2tuYW1lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9mZmljaWFsOiBUaGUgZm9ybWFsIG5hbWUgYXMgcmVnaXN0ZXJlZCBpbiBhbiBvZmZpY2lhbCAoZ292ZXJubWVudCkgcmVnaXN0cnksIGJ1dCB3aGljaCBuYW1lIG1pZ2h0IG5vdCBiZSBjb21tb25seSB1c2VkLiBNYXkgYmUgY2FsbGVkIFwibGVnYWwgbmFtZVwiLlxyXG4gICAqL1xyXG4gIE9mZmljaWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9sZDogVGhpcyBuYW1lIGlzIG5vIGxvbmdlciBpbiB1c2UgKG9yIHdhcyBuZXZlciBjb3JyZWN0LCBidXQgcmV0YWluZWQgZm9yIHJlY29yZHMpXHJcbiAgICovXHJcbiAgT2xkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRlbXA6IEEgdGVtcG9yYXJ5IG5hbWUuIE5hbWUucGVyaW9kIGNhbiBwcm92aWRlIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24uIFRoaXMgbWF5IGFsc28gYmUgdXNlZCBmb3IgdGVtcG9yYXJ5IG5hbWVzIGFzc2lnbmVkIGF0IGJpcnRoIG9yIGluIGVtZXJnZW5jeSBzaXR1YXRpb25zLlxyXG4gICAqL1xyXG4gIFRlbXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdXN1YWw6IEtub3duIGFzL2NvbnZlbnRpb25hbC90aGUgb25lIHlvdSBub3JtYWxseSB1c2VcclxuICAgKi9cclxuICBVc3VhbDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB1c2Ugb2YgYSBodW1hbiBuYW1lXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTmFtZVVzZUNvZGluZ3M6TmFtZVVzZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYW5vbnltb3VzOiBBbm9ueW1vdXMgYXNzaWduZWQgbmFtZSwgYWxpYXMsIG9yIHBzZXVkb255bSAodXNlZCB0byBwcm90ZWN0IGEgcGVyc29uJ3MgaWRlbnRpdHkgZm9yIHByaXZhY3kgcmVhc29ucylcclxuICAgKi9cclxuICBBbm9ueW1vdXM6IHtcclxuICAgIGRpc3BsYXk6IFwiQW5vbnltb3VzXCIsXHJcbiAgICBjb2RlOiBcImFub255bW91c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbmFtZS11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1haWRlbjogQSBuYW1lIHVzZWQgcHJpb3IgdG8gY2hhbmdpbmcgbmFtZSBiZWNhdXNlIG9mIG1hcnJpYWdlLiBUaGlzIG5hbWUgdXNlIGlzIGZvciB1c2UgYnkgYXBwbGljYXRpb25zIHRoYXQgY29sbGVjdCBhbmQgc3RvcmUgbmFtZXMgdGhhdCB3ZXJlIHVzZWQgcHJpb3IgdG8gYSBtYXJyaWFnZS4gTWFycmlhZ2UgbmFtaW5nIGN1c3RvbXMgdmFyeSBncmVhdGx5IGFyb3VuZCB0aGUgd29ybGQsIGFuZCBhcmUgY29uc3RhbnRseSBjaGFuZ2luZy4gVGhpcyB0ZXJtIGlzIG5vdCBnZW5kZXIgc3BlY2lmaWMuIFRoZSB1c2Ugb2YgdGhpcyB0ZXJtIGRvZXMgbm90IGltcGx5IGFueSBwYXJ0aWN1bGFyIGhpc3RvcnkgZm9yIGEgcGVyc29uJ3MgbmFtZVxyXG4gICAqL1xyXG4gIE5hbWVDaGFuZ2VkRm9yTWFycmlhZ2U6IHtcclxuICAgIGRpc3BsYXk6IFwiTmFtZSBjaGFuZ2VkIGZvciBNYXJyaWFnZVwiLFxyXG4gICAgY29kZTogXCJtYWlkZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL25hbWUtdXNlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuaWNrbmFtZTogQSBuYW1lIHRoYXQgaXMgdXNlZCB0byBhZGRyZXNzIHRoZSBwZXJzb24gaW4gYW4gaW5mb3JtYWwgbWFubmVyLCBidXQgaXMgbm90IHBhcnQgb2YgdGhlaXIgZm9ybWFsIG9yIHVzdWFsIG5hbWVcclxuICAgKi9cclxuICBOaWNrbmFtZToge1xyXG4gICAgZGlzcGxheTogXCJOaWNrbmFtZVwiLFxyXG4gICAgY29kZTogXCJuaWNrbmFtZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbmFtZS11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9mZmljaWFsOiBUaGUgZm9ybWFsIG5hbWUgYXMgcmVnaXN0ZXJlZCBpbiBhbiBvZmZpY2lhbCAoZ292ZXJubWVudCkgcmVnaXN0cnksIGJ1dCB3aGljaCBuYW1lIG1pZ2h0IG5vdCBiZSBjb21tb25seSB1c2VkLiBNYXkgYmUgY2FsbGVkIFwibGVnYWwgbmFtZVwiLlxyXG4gICAqL1xyXG4gIE9mZmljaWFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9mZmljaWFsXCIsXHJcbiAgICBjb2RlOiBcIm9mZmljaWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9uYW1lLXVzZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb2xkOiBUaGlzIG5hbWUgaXMgbm8gbG9uZ2VyIGluIHVzZSAob3Igd2FzIG5ldmVyIGNvcnJlY3QsIGJ1dCByZXRhaW5lZCBmb3IgcmVjb3JkcylcclxuICAgKi9cclxuICBPbGQ6IHtcclxuICAgIGRpc3BsYXk6IFwiT2xkXCIsXHJcbiAgICBjb2RlOiBcIm9sZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbmFtZS11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRlbXA6IEEgdGVtcG9yYXJ5IG5hbWUuIE5hbWUucGVyaW9kIGNhbiBwcm92aWRlIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24uIFRoaXMgbWF5IGFsc28gYmUgdXNlZCBmb3IgdGVtcG9yYXJ5IG5hbWVzIGFzc2lnbmVkIGF0IGJpcnRoIG9yIGluIGVtZXJnZW5jeSBzaXR1YXRpb25zLlxyXG4gICAqL1xyXG4gIFRlbXA6IHtcclxuICAgIGRpc3BsYXk6IFwiVGVtcFwiLFxyXG4gICAgY29kZTogXCJ0ZW1wXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9uYW1lLXVzZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdXN1YWw6IEtub3duIGFzL2NvbnZlbnRpb25hbC90aGUgb25lIHlvdSBub3JtYWxseSB1c2VcclxuICAgKi9cclxuICBVc3VhbDoge1xyXG4gICAgZGlzcGxheTogXCJVc3VhbFwiLFxyXG4gICAgY29kZTogXCJ1c3VhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbmFtZS11c2VcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=