// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-discharge-disposition|3.0.2
/**
 * This value set defines a set of codes that can be used to where the patient left the hospital.
 */
export const EncounterDischargeDispositionCodes = {
    /**
     * aadvice: The patient self discharged against medical advice.
     */
    LeftAgainstAdvice: "aadvice",
    /**
     * exp: The patient has deceased during this encounter.
     */
    Expired: "exp",
    /**
     * home: The patient was dicharged and has indicated that they are going to return home afterwards.
     */
    Home: "home",
    /**
     * hosp: The patient has been discharged into palliative care.
     */
    Hospice: "hosp",
    /**
     * long: The patient has been discharged into long-term care where is likely to be monitored through an ongoing episode-of-care.
     */
    LongTermCare: "long",
    /**
     * oth: The discharge disposition has not otherwise defined.
     */
    Other: "oth",
    /**
     * other-hcf: The patient was transferred to another healthcare facility.
     */
    OtherHealthcareFacility: "other-hcf",
    /**
     * psy: The patient has been transferred to a psychiatric facility.
     */
    PsychiatricHospital: "psy",
    /**
     * rehab: The patient was discharged and is to receive post acute care rehabilitation services.
     */
    Rehabilitation: "rehab",
    /**
     * snf: The patient has been discharged to a skilled nursing facility for the patient to receive additional care.
     */
    SkilledNursingFacility: "snf",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxvRkFBb0Y7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRztJQUNoRDs7T0FFRztJQUNILGlCQUFpQixFQUFFLFNBQVM7SUFDNUI7O09BRUc7SUFDSCxPQUFPLEVBQUUsS0FBSztJQUNkOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILE9BQU8sRUFBRSxNQUFNO0lBQ2Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsTUFBTTtJQUNwQjs7T0FFRztJQUNILEtBQUssRUFBRSxLQUFLO0lBQ1o7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxXQUFXO0lBQ3BDOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsS0FBSztJQUMxQjs7T0FFRztJQUNILGNBQWMsRUFBRSxPQUFPO0lBQ3ZCOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsS0FBSztDQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2VuY291bnRlci1kaXNjaGFyZ2UtZGlzcG9zaXRpb258My4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gd2hlcmUgdGhlIHBhdGllbnQgbGVmdCB0aGUgaG9zcGl0YWwuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhYWR2aWNlOiBUaGUgcGF0aWVudCBzZWxmIGRpc2NoYXJnZWQgYWdhaW5zdCBtZWRpY2FsIGFkdmljZS5cclxuICAgKi9cclxuICBMZWZ0QWdhaW5zdEFkdmljZTogXCJhYWR2aWNlXCIsXHJcbiAgLyoqXHJcbiAgICogZXhwOiBUaGUgcGF0aWVudCBoYXMgZGVjZWFzZWQgZHVyaW5nIHRoaXMgZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIEV4cGlyZWQ6IFwiZXhwXCIsXHJcbiAgLyoqXHJcbiAgICogaG9tZTogVGhlIHBhdGllbnQgd2FzIGRpY2hhcmdlZCBhbmQgaGFzIGluZGljYXRlZCB0aGF0IHRoZXkgYXJlIGdvaW5nIHRvIHJldHVybiBob21lIGFmdGVyd2FyZHMuXHJcbiAgICovXHJcbiAgSG9tZTogXCJob21lXCIsXHJcbiAgLyoqXHJcbiAgICogaG9zcDogVGhlIHBhdGllbnQgaGFzIGJlZW4gZGlzY2hhcmdlZCBpbnRvIHBhbGxpYXRpdmUgY2FyZS5cclxuICAgKi9cclxuICBIb3NwaWNlOiBcImhvc3BcIixcclxuICAvKipcclxuICAgKiBsb25nOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBkaXNjaGFyZ2VkIGludG8gbG9uZy10ZXJtIGNhcmUgd2hlcmUgaXMgbGlrZWx5IHRvIGJlIG1vbml0b3JlZCB0aHJvdWdoIGFuIG9uZ29pbmcgZXBpc29kZS1vZi1jYXJlLlxyXG4gICAqL1xyXG4gIExvbmdUZXJtQ2FyZTogXCJsb25nXCIsXHJcbiAgLyoqXHJcbiAgICogb3RoOiBUaGUgZGlzY2hhcmdlIGRpc3Bvc2l0aW9uIGhhcyBub3Qgb3RoZXJ3aXNlIGRlZmluZWQuXHJcbiAgICovXHJcbiAgT3RoZXI6IFwib3RoXCIsXHJcbiAgLyoqXHJcbiAgICogb3RoZXItaGNmOiBUaGUgcGF0aWVudCB3YXMgdHJhbnNmZXJyZWQgdG8gYW5vdGhlciBoZWFsdGhjYXJlIGZhY2lsaXR5LlxyXG4gICAqL1xyXG4gIE90aGVySGVhbHRoY2FyZUZhY2lsaXR5OiBcIm90aGVyLWhjZlwiLFxyXG4gIC8qKlxyXG4gICAqIHBzeTogVGhlIHBhdGllbnQgaGFzIGJlZW4gdHJhbnNmZXJyZWQgdG8gYSBwc3ljaGlhdHJpYyBmYWNpbGl0eS5cclxuICAgKi9cclxuICBQc3ljaGlhdHJpY0hvc3BpdGFsOiBcInBzeVwiLFxyXG4gIC8qKlxyXG4gICAqIHJlaGFiOiBUaGUgcGF0aWVudCB3YXMgZGlzY2hhcmdlZCBhbmQgaXMgdG8gcmVjZWl2ZSBwb3N0IGFjdXRlIGNhcmUgcmVoYWJpbGl0YXRpb24gc2VydmljZXMuXHJcbiAgICovXHJcbiAgUmVoYWJpbGl0YXRpb246IFwicmVoYWJcIixcclxuICAvKipcclxuICAgKiBzbmY6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGRpc2NoYXJnZWQgdG8gYSBza2lsbGVkIG51cnNpbmcgZmFjaWxpdHkgZm9yIHRoZSBwYXRpZW50IHRvIHJlY2VpdmUgYWRkaXRpb25hbCBjYXJlLlxyXG4gICAqL1xyXG4gIFNraWxsZWROdXJzaW5nRmFjaWxpdHk6IFwic25mXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHdoZXJlIHRoZSBwYXRpZW50IGxlZnQgdGhlIGhvc3BpdGFsLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlVHlwZSA9IHR5cGVvZiBFbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGVzW2tleW9mIHR5cGVvZiBFbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGVzXTtcclxuIl19