// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/communication-not-done-reason|3.0.2
/**
 * Codes for the reason why a communication was not done.
 */
export const CommunicationNotDoneReasonCodings = {
    /**
     * family-objection: The communication was not done due to a family objection.
     */
    FamilyObjection: {
        display: "Family Objection",
        code: "family-objection",
        system: "http://hl7.org/fhir/communication-not-done-reason",
    },
    /**
     * invalid-phone-number: The communication was not done due to an invalid phone number.
     */
    InvalidPhoneNumber: {
        display: "Invalid Phone Number",
        code: "invalid-phone-number",
        system: "http://hl7.org/fhir/communication-not-done-reason",
    },
    /**
     * patient-objection: The communication was not done due to a patient objection.
     */
    PatientObjection: {
        display: "Patient Objection",
        code: "patient-objection",
        system: "http://hl7.org/fhir/communication-not-done-reason",
    },
    /**
     * recipient-unavailable: The communication was not done due to the recipient being unavailable.
     */
    RecipientUnavailable: {
        display: "Recipient Unavailable",
        code: "recipient-unavailable",
        system: "http://hl7.org/fhir/communication-not-done-reason",
    },
    /**
     * system-error: The communication was not done due to a system error.
     */
    SystemError: {
        display: "System Error",
        code: "system-error",
        system: "http://hl7.org/fhir/communication-not-done-reason",
    },
    /**
     * unknown: The communication was not done due to an unknown reason.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/communication-not-done-reason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbXVuaWNhdGlvbk5vdERvbmVSZWFzb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db21tdW5pY2F0aW9uTm90RG9uZVJlYXNvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsa0ZBQWtGO0FBa0NsRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUF3QztJQUNwRjs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLG1EQUFtRDtLQUM1RDtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbW11bmljYXRpb24tbm90LWRvbmUtcmVhc29ufDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgZm9yIHRoZSByZWFzb24gd2h5IGEgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb21tdW5pY2F0aW9uTm90RG9uZVJlYXNvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmFtaWx5LW9iamVjdGlvbjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhIGZhbWlseSBvYmplY3Rpb24uXHJcbiAgICovXHJcbiAgRmFtaWx5T2JqZWN0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGludmFsaWQtcGhvbmUtbnVtYmVyOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGFuIGludmFsaWQgcGhvbmUgbnVtYmVyLlxyXG4gICAqL1xyXG4gIEludmFsaWRQaG9uZU51bWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXRpZW50LW9iamVjdGlvbjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhIHBhdGllbnQgb2JqZWN0aW9uLlxyXG4gICAqL1xyXG4gIFBhdGllbnRPYmplY3Rpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVjaXBpZW50LXVuYXZhaWxhYmxlOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIHRoZSByZWNpcGllbnQgYmVpbmcgdW5hdmFpbGFibGUuXHJcbiAgICovXHJcbiAgUmVjaXBpZW50VW5hdmFpbGFibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3lzdGVtLWVycm9yOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGEgc3lzdGVtIGVycm9yLlxyXG4gICAqL1xyXG4gIFN5c3RlbUVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSBjb21tdW5pY2F0aW9uIHdhcyBub3QgZG9uZSBkdWUgdG8gYW4gdW5rbm93biByZWFzb24uXHJcbiAgICovXHJcbiAgVW5rbm93bjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvZGVzIGZvciB0aGUgcmVhc29uIHdoeSBhIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbW11bmljYXRpb25Ob3REb25lUmVhc29uQ29kaW5nczpDb21tdW5pY2F0aW9uTm90RG9uZVJlYXNvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmFtaWx5LW9iamVjdGlvbjogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byBhIGZhbWlseSBvYmplY3Rpb24uXHJcbiAgICovXHJcbiAgRmFtaWx5T2JqZWN0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkZhbWlseSBPYmplY3Rpb25cIixcclxuICAgIGNvZGU6IFwiZmFtaWx5LW9iamVjdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGludmFsaWQtcGhvbmUtbnVtYmVyOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGFuIGludmFsaWQgcGhvbmUgbnVtYmVyLlxyXG4gICAqL1xyXG4gIEludmFsaWRQaG9uZU51bWJlcjoge1xyXG4gICAgZGlzcGxheTogXCJJbnZhbGlkIFBob25lIE51bWJlclwiLFxyXG4gICAgY29kZTogXCJpbnZhbGlkLXBob25lLW51bWJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBhdGllbnQtb2JqZWN0aW9uOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgbm90IGRvbmUgZHVlIHRvIGEgcGF0aWVudCBvYmplY3Rpb24uXHJcbiAgICovXHJcbiAgUGF0aWVudE9iamVjdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJQYXRpZW50IE9iamVjdGlvblwiLFxyXG4gICAgY29kZTogXCJwYXRpZW50LW9iamVjdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlY2lwaWVudC11bmF2YWlsYWJsZTogVGhlIGNvbW11bmljYXRpb24gd2FzIG5vdCBkb25lIGR1ZSB0byB0aGUgcmVjaXBpZW50IGJlaW5nIHVuYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIFJlY2lwaWVudFVuYXZhaWxhYmxlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlY2lwaWVudCBVbmF2YWlsYWJsZVwiLFxyXG4gICAgY29kZTogXCJyZWNpcGllbnQtdW5hdmFpbGFibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbW11bmljYXRpb24tbm90LWRvbmUtcmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzeXN0ZW0tZXJyb3I6IFRoZSBjb21tdW5pY2F0aW9uIHdhcyBub3QgZG9uZSBkdWUgdG8gYSBzeXN0ZW0gZXJyb3IuXHJcbiAgICovXHJcbiAgU3lzdGVtRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiU3lzdGVtIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcInN5c3RlbS1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1ub3QtZG9uZS1yZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSBjb21tdW5pY2F0aW9uIHdhcyBub3QgZG9uZSBkdWUgdG8gYW4gdW5rbm93biByZWFzb24uXHJcbiAgICovXHJcbiAgVW5rbm93bjoge1xyXG4gICAgZGlzcGxheTogXCJVbmtub3duXCIsXHJcbiAgICBjb2RlOiBcInVua25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbW11bmljYXRpb24tbm90LWRvbmUtcmVhc29uXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19