// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/plan-definition-type|3.0.2
/**
 * The type of PlanDefinition
 */
export const PlanDefinitionTypeCodings = {
    /**
     * eca-rule: A decision support rule of the form [on Event] if Condition then Action. It is intended to be a shareable, computable definition of actions that should be taken whenever some condition is met in response to a particular event or events
     */
    ECARule: {
        display: "ECA Rule",
        code: "eca-rule",
        system: "http://hl7.org/fhir/plan-definition-type",
    },
    /**
     * order-set: A pre-defined and approved group of orders related to a particular clinical condition (e.g. hypertension treatment and monitoring) or stage of care (e.g. hospital admission to Coronary Care Unit). An order set is used as a checklist for the clinician when managing a patient with a specific condition. It is a structured collection of orders relevant to that condition and presented to the clinician in a computerized provider order entry (CPOE) system
     */
    OrderSet: {
        display: "Order Set",
        code: "order-set",
        system: "http://hl7.org/fhir/plan-definition-type",
    },
    /**
     * protocol: A set of activities that can be performed that have relationships in terms of order, pre-conditions, etc.
     */
    Protocol: {
        display: "Protocol",
        code: "protocol",
        system: "http://hl7.org/fhir/plan-definition-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhbkRlZmluaXRpb25UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUGxhbkRlZmluaXRpb25UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFzQnpFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcGxhbi1kZWZpbml0aW9uLXR5cGV8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBQbGFuRGVmaW5pdGlvblxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGxhbkRlZmluaXRpb25UeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBlY2EtcnVsZTogQSBkZWNpc2lvbiBzdXBwb3J0IHJ1bGUgb2YgdGhlIGZvcm0gW29uIEV2ZW50XSBpZiBDb25kaXRpb24gdGhlbiBBY3Rpb24uIEl0IGlzIGludGVuZGVkIHRvIGJlIGEgc2hhcmVhYmxlLCBjb21wdXRhYmxlIGRlZmluaXRpb24gb2YgYWN0aW9ucyB0aGF0IHNob3VsZCBiZSB0YWtlbiB3aGVuZXZlciBzb21lIGNvbmRpdGlvbiBpcyBtZXQgaW4gcmVzcG9uc2UgdG8gYSBwYXJ0aWN1bGFyIGV2ZW50IG9yIGV2ZW50c1xyXG4gICAqL1xyXG4gIEVDQVJ1bGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3JkZXItc2V0OiBBIHByZS1kZWZpbmVkIGFuZCBhcHByb3ZlZCBncm91cCBvZiBvcmRlcnMgcmVsYXRlZCB0byBhIHBhcnRpY3VsYXIgY2xpbmljYWwgY29uZGl0aW9uIChlLmcuIGh5cGVydGVuc2lvbiB0cmVhdG1lbnQgYW5kIG1vbml0b3JpbmcpIG9yIHN0YWdlIG9mIGNhcmUgKGUuZy4gaG9zcGl0YWwgYWRtaXNzaW9uIHRvIENvcm9uYXJ5IENhcmUgVW5pdCkuIEFuIG9yZGVyIHNldCBpcyB1c2VkIGFzIGEgY2hlY2tsaXN0IGZvciB0aGUgY2xpbmljaWFuIHdoZW4gbWFuYWdpbmcgYSBwYXRpZW50IHdpdGggYSBzcGVjaWZpYyBjb25kaXRpb24uIEl0IGlzIGEgc3RydWN0dXJlZCBjb2xsZWN0aW9uIG9mIG9yZGVycyByZWxldmFudCB0byB0aGF0IGNvbmRpdGlvbiBhbmQgcHJlc2VudGVkIHRvIHRoZSBjbGluaWNpYW4gaW4gYSBjb21wdXRlcml6ZWQgcHJvdmlkZXIgb3JkZXIgZW50cnkgKENQT0UpIHN5c3RlbVxyXG4gICAqL1xyXG4gIE9yZGVyU2V0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb3RvY29sOiBBIHNldCBvZiBhY3Rpdml0aWVzIHRoYXQgY2FuIGJlIHBlcmZvcm1lZCB0aGF0IGhhdmUgcmVsYXRpb25zaGlwcyBpbiB0ZXJtcyBvZiBvcmRlciwgcHJlLWNvbmRpdGlvbnMsIGV0Yy5cclxuICAgKi9cclxuICBQcm90b2NvbDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIFBsYW5EZWZpbml0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUGxhbkRlZmluaXRpb25UeXBlQ29kaW5nczpQbGFuRGVmaW5pdGlvblR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGVjYS1ydWxlOiBBIGRlY2lzaW9uIHN1cHBvcnQgcnVsZSBvZiB0aGUgZm9ybSBbb24gRXZlbnRdIGlmIENvbmRpdGlvbiB0aGVuIEFjdGlvbi4gSXQgaXMgaW50ZW5kZWQgdG8gYmUgYSBzaGFyZWFibGUsIGNvbXB1dGFibGUgZGVmaW5pdGlvbiBvZiBhY3Rpb25zIHRoYXQgc2hvdWxkIGJlIHRha2VuIHdoZW5ldmVyIHNvbWUgY29uZGl0aW9uIGlzIG1ldCBpbiByZXNwb25zZSB0byBhIHBhcnRpY3VsYXIgZXZlbnQgb3IgZXZlbnRzXHJcbiAgICovXHJcbiAgRUNBUnVsZToge1xyXG4gICAgZGlzcGxheTogXCJFQ0EgUnVsZVwiLFxyXG4gICAgY29kZTogXCJlY2EtcnVsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGxhbi1kZWZpbml0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9yZGVyLXNldDogQSBwcmUtZGVmaW5lZCBhbmQgYXBwcm92ZWQgZ3JvdXAgb2Ygb3JkZXJzIHJlbGF0ZWQgdG8gYSBwYXJ0aWN1bGFyIGNsaW5pY2FsIGNvbmRpdGlvbiAoZS5nLiBoeXBlcnRlbnNpb24gdHJlYXRtZW50IGFuZCBtb25pdG9yaW5nKSBvciBzdGFnZSBvZiBjYXJlIChlLmcuIGhvc3BpdGFsIGFkbWlzc2lvbiB0byBDb3JvbmFyeSBDYXJlIFVuaXQpLiBBbiBvcmRlciBzZXQgaXMgdXNlZCBhcyBhIGNoZWNrbGlzdCBmb3IgdGhlIGNsaW5pY2lhbiB3aGVuIG1hbmFnaW5nIGEgcGF0aWVudCB3aXRoIGEgc3BlY2lmaWMgY29uZGl0aW9uLiBJdCBpcyBhIHN0cnVjdHVyZWQgY29sbGVjdGlvbiBvZiBvcmRlcnMgcmVsZXZhbnQgdG8gdGhhdCBjb25kaXRpb24gYW5kIHByZXNlbnRlZCB0byB0aGUgY2xpbmljaWFuIGluIGEgY29tcHV0ZXJpemVkIHByb3ZpZGVyIG9yZGVyIGVudHJ5IChDUE9FKSBzeXN0ZW1cclxuICAgKi9cclxuICBPcmRlclNldDoge1xyXG4gICAgZGlzcGxheTogXCJPcmRlciBTZXRcIixcclxuICAgIGNvZGU6IFwib3JkZXItc2V0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wbGFuLWRlZmluaXRpb24tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvdG9jb2w6IEEgc2V0IG9mIGFjdGl2aXRpZXMgdGhhdCBjYW4gYmUgcGVyZm9ybWVkIHRoYXQgaGF2ZSByZWxhdGlvbnNoaXBzIGluIHRlcm1zIG9mIG9yZGVyLCBwcmUtY29uZGl0aW9ucywgZXRjLlxyXG4gICAqL1xyXG4gIFByb3RvY29sOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3RvY29sXCIsXHJcbiAgICBjb2RlOiBcInByb3RvY29sXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wbGFuLWRlZmluaXRpb24tdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==