// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/task-performer-type|3.0.2
/**
 * The type(s) of task performers allowed
 */
export const TaskPerformerTypeCodings = {
    /**
     * acquirer: A workflow participant that acquires resources (specimens, images, etc) necessary to perform the task.
     */
    Acquirer: {
        display: "Acquirer",
        code: "acquirer",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * dispatcher: A workflow participant that dispatches services (assigns another task to a participant).
     */
    Dispatcher: {
        display: "Dispatcher",
        code: "dispatcher",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * manager: A workflow participant that manages task activity.
     */
    Manager: {
        display: "Manager",
        code: "manager",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * monitor: A workflow participant that monitors task activity.
     */
    Monitor: {
        display: "Monitor",
        code: "monitor",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * performer: A workflow participant that performs services.
     */
    Performer: {
        display: "Performer",
        code: "performer",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * requester: A workflow participant that requests services.
     */
    Requester: {
        display: "Requester",
        code: "requester",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * reviewer: A workflow participant that reviews task inputs or outputs.
     */
    Reviewer: {
        display: "Reviewer",
        code: "reviewer",
        system: "http://hl7.org/fhir/task-performer-type",
    },
    /**
     * scheduler: A workflow participant that schedules (dispatches and sets the time or date for performance of) services.
     */
    Scheduler: {
        display: "Scheduler",
        code: "scheduler",
        system: "http://hl7.org/fhir/task-performer-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza1BlcmZvcm1lclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UYXNrUGVyZm9ybWVyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBMEN4RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC90YXNrLXBlcmZvcm1lci10eXBlfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUocykgb2YgdGFzayBwZXJmb3JtZXJzIGFsbG93ZWRcclxuICovXHJcbmV4cG9ydCB0eXBlIFRhc2tQZXJmb3JtZXJUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3F1aXJlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IGFjcXVpcmVzIHJlc291cmNlcyAoc3BlY2ltZW5zLCBpbWFnZXMsIGV0YykgbmVjZXNzYXJ5IHRvIHBlcmZvcm0gdGhlIHRhc2suXHJcbiAgICovXHJcbiAgQWNxdWlyZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGlzcGF0Y2hlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IGRpc3BhdGNoZXMgc2VydmljZXMgKGFzc2lnbnMgYW5vdGhlciB0YXNrIHRvIGEgcGFydGljaXBhbnQpLlxyXG4gICAqL1xyXG4gIERpc3BhdGNoZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWFuYWdlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IG1hbmFnZXMgdGFzayBhY3Rpdml0eS5cclxuICAgKi9cclxuICBNYW5hZ2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG1vbml0b3I6IEEgd29ya2Zsb3cgcGFydGljaXBhbnQgdGhhdCBtb25pdG9ycyB0YXNrIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIE1vbml0b3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGVyZm9ybWVyOiBBIHdvcmtmbG93IHBhcnRpY2lwYW50IHRoYXQgcGVyZm9ybXMgc2VydmljZXMuXHJcbiAgICovXHJcbiAgUGVyZm9ybWVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlcXVlc3RlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IHJlcXVlc3RzIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXZpZXdlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IHJldmlld3MgdGFzayBpbnB1dHMgb3Igb3V0cHV0cy5cclxuICAgKi9cclxuICBSZXZpZXdlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzY2hlZHVsZXI6IEEgd29ya2Zsb3cgcGFydGljaXBhbnQgdGhhdCBzY2hlZHVsZXMgKGRpc3BhdGNoZXMgYW5kIHNldHMgdGhlIHRpbWUgb3IgZGF0ZSBmb3IgcGVyZm9ybWFuY2Ugb2YpIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIFNjaGVkdWxlcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlKHMpIG9mIHRhc2sgcGVyZm9ybWVycyBhbGxvd2VkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVGFza1BlcmZvcm1lclR5cGVDb2RpbmdzOlRhc2tQZXJmb3JtZXJUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3F1aXJlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IGFjcXVpcmVzIHJlc291cmNlcyAoc3BlY2ltZW5zLCBpbWFnZXMsIGV0YykgbmVjZXNzYXJ5IHRvIHBlcmZvcm0gdGhlIHRhc2suXHJcbiAgICovXHJcbiAgQWNxdWlyZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiQWNxdWlyZXJcIixcclxuICAgIGNvZGU6IFwiYWNxdWlyZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stcGVyZm9ybWVyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRpc3BhdGNoZXI6IEEgd29ya2Zsb3cgcGFydGljaXBhbnQgdGhhdCBkaXNwYXRjaGVzIHNlcnZpY2VzIChhc3NpZ25zIGFub3RoZXIgdGFzayB0byBhIHBhcnRpY2lwYW50KS5cclxuICAgKi9cclxuICBEaXNwYXRjaGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpc3BhdGNoZXJcIixcclxuICAgIGNvZGU6IFwiZGlzcGF0Y2hlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdGFzay1wZXJmb3JtZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbWFuYWdlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IG1hbmFnZXMgdGFzayBhY3Rpdml0eS5cclxuICAgKi9cclxuICBNYW5hZ2VyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1hbmFnZXJcIixcclxuICAgIGNvZGU6IFwibWFuYWdlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdGFzay1wZXJmb3JtZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbW9uaXRvcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IG1vbml0b3JzIHRhc2sgYWN0aXZpdHkuXHJcbiAgICovXHJcbiAgTW9uaXRvcjoge1xyXG4gICAgZGlzcGxheTogXCJNb25pdG9yXCIsXHJcbiAgICBjb2RlOiBcIm1vbml0b3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stcGVyZm9ybWVyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBlcmZvcm1lcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IHBlcmZvcm1zIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIFBlcmZvcm1lcjoge1xyXG4gICAgZGlzcGxheTogXCJQZXJmb3JtZXJcIixcclxuICAgIGNvZGU6IFwicGVyZm9ybWVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90YXNrLXBlcmZvcm1lci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXF1ZXN0ZXI6IEEgd29ya2Zsb3cgcGFydGljaXBhbnQgdGhhdCByZXF1ZXN0cyBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBSZXF1ZXN0ZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVxdWVzdGVyXCIsXHJcbiAgICBjb2RlOiBcInJlcXVlc3RlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdGFzay1wZXJmb3JtZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmV2aWV3ZXI6IEEgd29ya2Zsb3cgcGFydGljaXBhbnQgdGhhdCByZXZpZXdzIHRhc2sgaW5wdXRzIG9yIG91dHB1dHMuXHJcbiAgICovXHJcbiAgUmV2aWV3ZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUmV2aWV3ZXJcIixcclxuICAgIGNvZGU6IFwicmV2aWV3ZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stcGVyZm9ybWVyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNjaGVkdWxlcjogQSB3b3JrZmxvdyBwYXJ0aWNpcGFudCB0aGF0IHNjaGVkdWxlcyAoZGlzcGF0Y2hlcyBhbmQgc2V0cyB0aGUgdGltZSBvciBkYXRlIGZvciBwZXJmb3JtYW5jZSBvZikgc2VydmljZXMuXHJcbiAgICovXHJcbiAgU2NoZWR1bGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNjaGVkdWxlclwiLFxyXG4gICAgY29kZTogXCJzY2hlZHVsZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stcGVyZm9ybWVyLXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=