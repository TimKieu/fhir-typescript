// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/nutrition-request-status|3.0.2
/**
 * Codes specifying the state of the request. Describes the lifecycle of the nutrition order.
 */
export const NutritionRequestStatusCodings = {
    /**
     * active: The request is 'actionable', but not all actions that are implied by it have occurred yet.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * cancelled: The request has been withdrawn and is no longer actionable.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * completed: All actions that are implied by the order have occurred and no continuation is planned (this will rarely be made explicit).
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * draft: The request is in preliminary form prior to being sent.
     */
    Draft: {
        display: "Draft",
        code: "draft",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * entered-in-error: The request was entered in error and voided.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * on-hold: Actions implied by the request have been temporarily halted, but are expected to continue later. May also be called "suspended".
     */
    OnHold: {
        display: "On-Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * planned: The request has been planned.
     */
    Planned: {
        display: "Planned",
        code: "planned",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * proposed: The request has been proposed.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
    /**
     * requested: The request has been placed.
     */
    Requested: {
        display: "Requested",
        code: "requested",
        system: "http://hl7.org/fhir/nutrition-request-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnV0cml0aW9uUmVxdWVzdFN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL051dHJpdGlvblJlcXVlc3RTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQThDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9udXRyaXRpb24tcmVxdWVzdC1zdGF0dXN8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBzcGVjaWZ5aW5nIHRoZSBzdGF0ZSBvZiB0aGUgcmVxdWVzdC4gRGVzY3JpYmVzIHRoZSBsaWZlY3ljbGUgb2YgdGhlIG51dHJpdGlvbiBvcmRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIE51dHJpdGlvblJlcXVlc3RTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIHJlcXVlc3QgaXMgJ2FjdGlvbmFibGUnLCBidXQgbm90IGFsbCBhY3Rpb25zIHRoYXQgYXJlIGltcGxpZWQgYnkgaXQgaGF2ZSBvY2N1cnJlZCB5ZXQuXHJcbiAgICovXHJcbiAgQWN0aXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gd2l0aGRyYXduIGFuZCBpcyBubyBsb25nZXIgYWN0aW9uYWJsZS5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBBbGwgYWN0aW9ucyB0aGF0IGFyZSBpbXBsaWVkIGJ5IHRoZSBvcmRlciBoYXZlIG9jY3VycmVkIGFuZCBubyBjb250aW51YXRpb24gaXMgcGxhbm5lZCAodGhpcyB3aWxsIHJhcmVseSBiZSBtYWRlIGV4cGxpY2l0KS5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSByZXF1ZXN0IGlzIGluIHByZWxpbWluYXJ5IGZvcm0gcHJpb3IgdG8gYmVpbmcgc2VudC5cclxuICAgKi9cclxuICBEcmFmdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgcmVxdWVzdCB3YXMgZW50ZXJlZCBpbiBlcnJvciBhbmQgdm9pZGVkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9uLWhvbGQ6IEFjdGlvbnMgaW1wbGllZCBieSB0aGUgcmVxdWVzdCBoYXZlIGJlZW4gdGVtcG9yYXJpbHkgaGFsdGVkLCBidXQgYXJlIGV4cGVjdGVkIHRvIGNvbnRpbnVlIGxhdGVyLiBNYXkgYWxzbyBiZSBjYWxsZWQgXCJzdXNwZW5kZWRcIi5cclxuICAgKi9cclxuICBPbkhvbGQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhbm5lZC5cclxuICAgKi9cclxuICBQbGFubmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2VkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBwcm9wb3NlZC5cclxuICAgKi9cclxuICBQcm9wb3NlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXF1ZXN0ZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHBsYWNlZC5cclxuICAgKi9cclxuICBSZXF1ZXN0ZWQ6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBzcGVjaWZ5aW5nIHRoZSBzdGF0ZSBvZiB0aGUgcmVxdWVzdC4gRGVzY3JpYmVzIHRoZSBsaWZlY3ljbGUgb2YgdGhlIG51dHJpdGlvbiBvcmRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBOdXRyaXRpb25SZXF1ZXN0U3RhdHVzQ29kaW5nczpOdXRyaXRpb25SZXF1ZXN0U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSByZXF1ZXN0IGlzICdhY3Rpb25hYmxlJywgYnV0IG5vdCBhbGwgYWN0aW9ucyB0aGF0IGFyZSBpbXBsaWVkIGJ5IGl0IGhhdmUgb2NjdXJyZWQgeWV0LlxyXG4gICAqL1xyXG4gIEFjdGl2ZToge1xyXG4gICAgZGlzcGxheTogXCJBY3RpdmVcIixcclxuICAgIGNvZGU6IFwiYWN0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9udXRyaXRpb24tcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gd2l0aGRyYXduIGFuZCBpcyBubyBsb25nZXIgYWN0aW9uYWJsZS5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2FuY2VsbGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbmNlbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbnV0cml0aW9uLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IEFsbCBhY3Rpb25zIHRoYXQgYXJlIGltcGxpZWQgYnkgdGhlIG9yZGVyIGhhdmUgb2NjdXJyZWQgYW5kIG5vIGNvbnRpbnVhdGlvbiBpcyBwbGFubmVkICh0aGlzIHdpbGwgcmFyZWx5IGJlIG1hZGUgZXhwbGljaXQpLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJDb21wbGV0ZWRcIixcclxuICAgIGNvZGU6IFwiY29tcGxldGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9udXRyaXRpb24tcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgcmVxdWVzdCBpcyBpbiBwcmVsaW1pbmFyeSBmb3JtIHByaW9yIHRvIGJlaW5nIHNlbnQuXHJcbiAgICovXHJcbiAgRHJhZnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRHJhZnRcIixcclxuICAgIGNvZGU6IFwiZHJhZnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL251dHJpdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIHJlcXVlc3Qgd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIHZvaWRlZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL251dHJpdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogQWN0aW9ucyBpbXBsaWVkIGJ5IHRoZSByZXF1ZXN0IGhhdmUgYmVlbiB0ZW1wb3JhcmlseSBoYWx0ZWQsIGJ1dCBhcmUgZXhwZWN0ZWQgdG8gY29udGludWUgbGF0ZXIuIE1heSBhbHNvIGJlIGNhbGxlZCBcInN1c3BlbmRlZFwiLlxyXG4gICAqL1xyXG4gIE9uSG9sZDoge1xyXG4gICAgZGlzcGxheTogXCJPbi1Ib2xkXCIsXHJcbiAgICBjb2RlOiBcIm9uLWhvbGRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL251dHJpdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhbm5lZC5cclxuICAgKi9cclxuICBQbGFubmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5uZWRcIixcclxuICAgIGNvZGU6IFwicGxhbm5lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbnV0cml0aW9uLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9wb3NlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcHJvcG9zZWQuXHJcbiAgICovXHJcbiAgUHJvcG9zZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvcG9zZWRcIixcclxuICAgIGNvZGU6IFwicHJvcG9zZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL251dHJpdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVxdWVzdGVkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBwbGFjZWQuXHJcbiAgICovXHJcbiAgUmVxdWVzdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlcXVlc3RlZFwiLFxyXG4gICAgY29kZTogXCJyZXF1ZXN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL251dHJpdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==