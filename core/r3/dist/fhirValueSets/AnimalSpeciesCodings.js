// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/animal-species|3.0.2
/**
 * This example value set defines a set of codes that can be used to indicate species of animal patients.
 */
export const AnimalSpeciesCodings = {
    /**
     * Code: 125097000
     */
    Goat: {
        display: "goat",
        code: "125097000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 125099002
     */
    Sheep: {
        display: "sheep",
        code: "125099002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 132950000
     */
    Mule: {
        display: "mule",
        code: "132950000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 15778005
     */
    Goose: {
        display: "goose",
        code: "15778005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 34618005
     */
    Cow: {
        display: "cow",
        code: "34618005",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 388445009
     */
    Horse: {
        display: "horse",
        code: "388445009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 396620009
     */
    Duck: {
        display: "duck",
        code: "396620009",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 425134008
     */
    Turkey: {
        display: "turkey",
        code: "425134008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 47290002
     */
    Chicken: {
        display: "chicken",
        code: "47290002",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 85626006
     */
    Donkey: {
        display: "donkey",
        code: "85626006",
        system: "http://snomed.info/sct",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5pbWFsU3BlY2llc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0FuaW1hbFNwZWNpZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQWtEbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FuaW1hbC1zcGVjaWVzfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyBleGFtcGxlIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgc3BlY2llcyBvZiBhbmltYWwgcGF0aWVudHMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBbmltYWxTcGVjaWVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiAxMjUwOTcwMDBcclxuICAgKi9cclxuICBHb2F0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDEyNTA5OTAwMlxyXG4gICAqL1xyXG4gIFNoZWVwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDEzMjk1MDAwMFxyXG4gICAqL1xyXG4gIE11bGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTU3NzgwMDVcclxuICAgKi9cclxuICBHb29zZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAzNDYxODAwNVxyXG4gICAqL1xyXG4gIENvdzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAzODg0NDUwMDlcclxuICAgKi9cclxuICBIb3JzZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAzOTY2MjAwMDlcclxuICAgKi9cclxuICBEdWNrOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDQyNTEzNDAwOFxyXG4gICAqL1xyXG4gIFR1cmtleTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiA0NzI5MDAwMlxyXG4gICAqL1xyXG4gIENoaWNrZW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogODU2MjYwMDZcclxuICAgKi9cclxuICBEb25rZXk6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGV4YW1wbGUgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBzcGVjaWVzIG9mIGFuaW1hbCBwYXRpZW50cy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBbmltYWxTcGVjaWVzQ29kaW5nczpBbmltYWxTcGVjaWVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiAxMjUwOTcwMDBcclxuICAgKi9cclxuICBHb2F0OiB7XHJcbiAgICBkaXNwbGF5OiBcImdvYXRcIixcclxuICAgIGNvZGU6IFwiMTI1MDk3MDAwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTI1MDk5MDAyXHJcbiAgICovXHJcbiAgU2hlZXA6IHtcclxuICAgIGRpc3BsYXk6IFwic2hlZXBcIixcclxuICAgIGNvZGU6IFwiMTI1MDk5MDAyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTMyOTUwMDAwXHJcbiAgICovXHJcbiAgTXVsZToge1xyXG4gICAgZGlzcGxheTogXCJtdWxlXCIsXHJcbiAgICBjb2RlOiBcIjEzMjk1MDAwMFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE1Nzc4MDA1XHJcbiAgICovXHJcbiAgR29vc2U6IHtcclxuICAgIGRpc3BsYXk6IFwiZ29vc2VcIixcclxuICAgIGNvZGU6IFwiMTU3NzgwMDVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzNDYxODAwNVxyXG4gICAqL1xyXG4gIENvdzoge1xyXG4gICAgZGlzcGxheTogXCJjb3dcIixcclxuICAgIGNvZGU6IFwiMzQ2MTgwMDVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzODg0NDUwMDlcclxuICAgKi9cclxuICBIb3JzZToge1xyXG4gICAgZGlzcGxheTogXCJob3JzZVwiLFxyXG4gICAgY29kZTogXCIzODg0NDUwMDlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzOTY2MjAwMDlcclxuICAgKi9cclxuICBEdWNrOiB7XHJcbiAgICBkaXNwbGF5OiBcImR1Y2tcIixcclxuICAgIGNvZGU6IFwiMzk2NjIwMDA5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogNDI1MTM0MDA4XHJcbiAgICovXHJcbiAgVHVya2V5OiB7XHJcbiAgICBkaXNwbGF5OiBcInR1cmtleVwiLFxyXG4gICAgY29kZTogXCI0MjUxMzQwMDhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiA0NzI5MDAwMlxyXG4gICAqL1xyXG4gIENoaWNrZW46IHtcclxuICAgIGRpc3BsYXk6IFwiY2hpY2tlblwiLFxyXG4gICAgY29kZTogXCI0NzI5MDAwMlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDg1NjI2MDA2XHJcbiAgICovXHJcbiAgRG9ua2V5OiB7XHJcbiAgICBkaXNwbGF5OiBcImRvbmtleVwiLFxyXG4gICAgY29kZTogXCI4NTYyNjAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=