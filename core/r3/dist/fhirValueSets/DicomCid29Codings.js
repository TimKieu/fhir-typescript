// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/dicom-cid29|20121129
/**
 * This Value Set includes codes that may be used to identify an image or waveform acquisition modality, as used in the ImagingStudy resource, Dicom  Attribute Modality (0008,0060) or HL7 v2 Table 0259 (see HL7 v2.6 Chapter 8 Section 8.8.8.47). It generally corresponds to a class of diagnostic equipment, or to a specific acquisition function or technique in a device.
 */
export const DicomCid29Codings = {
    /**
     * AR: Autorefraction device
     */
    Autorefraction: {
        display: "Autorefraction",
        code: "AR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * BDUS: Ultrasound Bone Densitometry (modality)
     */
    UltrasoundBoneDensitometry: {
        display: "Ultrasound Bone Densitometry",
        code: "BDUS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * BMD: Bone Mineral Densitometry by X-Ray (modality), including dual-energy X-Ray absorptiometry (DXA) and morphometric X-Ray absorptiometry (MXA)
     */
    BoneMineralDensitometry: {
        display: "Bone Mineral Densitometry",
        code: "BMD",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * CR: Computed Radiography device
     */
    ComputedRadiography: {
        display: "Computed Radiography",
        code: "CR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * CT: Computed Tomography device
     */
    ComputedTomography: {
        display: "Computed Tomography",
        code: "CT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * DX: Digital Radiography device
     */
    DigitalRadiography: {
        display: "Digital Radiography",
        code: "DX",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * ECG: Electrocardiography device
     */
    Electrocardiography: {
        display: "Electrocardiography",
        code: "ECG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * EPS: Cardiac Electrophysiology device
     */
    CardiacElectrophysiology: {
        display: "Cardiac Electrophysiology",
        code: "EPS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * ES: Endoscopy device
     */
    Endoscopy: {
        display: "Endoscopy",
        code: "ES",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * GM: General Microscopy device
     */
    GeneralMicroscopy: {
        display: "General Microscopy",
        code: "GM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * HD: Hemodynamic Waveform acquisition device
     */
    HemodynamicWaveform: {
        display: "Hemodynamic Waveform",
        code: "HD",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * IO: Intra-oral Radiography device
     */
    IntraOralRadiography: {
        display: "Intra-oral Radiography",
        code: "IO",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * IVOCT: An acquisition device, process or method that performs intravascular optical coherence tomography
     */
    IntravascularOpticalCoherenceTomography: {
        display: "Intravascular Optical Coherence Tomography",
        code: "IVOCT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * IVUS: Intravascular Ultrasound device
     */
    IntravascularUltrasound: {
        display: "Intravascular Ultrasound",
        code: "IVUS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * KER: Keratometry device
     */
    Keratometry: {
        display: "Keratometry",
        code: "KER",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * LEN: Lensometry device
     */
    Lensometry: {
        display: "Lensometry",
        code: "LEN",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * MG: Mammography device
     */
    Mammography: {
        display: "Mammography",
        code: "MG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * MR: Magnetic Resonance device
     */
    MagneticResonance: {
        display: "Magnetic Resonance",
        code: "MR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * NM: Nuclear Medicine device
     */
    NuclearMedicine: {
        display: "Nuclear Medicine",
        code: "NM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OAM: Measurements of the axial length of the eye, which are done by various devices
     */
    OphthalmicAxialMeasurements: {
        display: "Ophthalmic Axial Measurements",
        code: "OAM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OCT: Modality device that uses an interferometric, non-invasive optical tomographic technique to image 2D slices and 3D volumes of tissue using visible and near visible frequencies
     */
    OpticalCoherenceTomography: {
        display: "Optical Coherence Tomography",
        code: "OCT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OP: Ophthalmic photography modality
     */
    OphthalmicPhotography: {
        display: "Ophthalmic photography",
        code: "OP",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPM: Modality device that measures corneal topography, corneal or retinal thickness, and other similar parameters that are typically displayed as maps
     */
    OphthalmicMapping: {
        display: "Ophthalmic Mapping",
        code: "OPM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPR: Modality device that measures the refractive characteristics of the eye
     */
    OphthalmicRefraction: {
        display: "Ophthalmic Refraction",
        code: "OPR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPT: Tomography of the eye acquired by a modality that is based on light and optical principles. Tomography based on other principles, such as ultrasound, is excluded
     */
    OphthalmicTomography: {
        display: "Ophthalmic Tomography",
        code: "OPT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OPV: Modality device that measures visual fields and perform visual perimetry
     */
    OphthalmicVisualField: {
        display: "Ophthalmic Visual Field",
        code: "OPV",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * OSS: An acquisition device, process or method that performs optical surface scanning
     */
    OpticalSurvaceScanner: {
        display: "Optical Survace Scanner",
        code: "OSS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * PT: Positron emission tomography (PET) device
     */
    PositronEmissionTomography: {
        display: "Positron emission tomography",
        code: "PT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * PX: Panoramic X-Ray device
     */
    PanoramicXRay: {
        display: "Panoramic X-Ray",
        code: "PX",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * RF: Radiofluoroscopy device
     */
    Radiofluoroscopy: {
        display: "Radiofluoroscopy",
        code: "RF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * RG: Radiographic imaging (conventional film/screen)
     */
    RadiographicImaging: {
        display: "Radiographic imaging",
        code: "RG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * SM: Slide Microscopy
     */
    SlideMicroscopy: {
        display: "Slide Microscopy",
        code: "SM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * SRF: Subjective Refraction device
     */
    SubjectiveRefraction: {
        display: "Subjective Refraction",
        code: "SRF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * US: Ultrasound device
     */
    Ultrasound: {
        display: "Ultrasound",
        code: "US",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * VA: Visual Acuity device
     */
    VisualAcuity: {
        display: "Visual Acuity",
        code: "VA",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * XA: X-Ray Angiography device
     */
    XRayAngiography: {
        display: "X-Ray Angiography",
        code: "XA",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
    /**
     * XC: External-camera Photography device
     */
    ExternalCameraPhotography: {
        display: "External-camera Photography",
        code: "XC",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    },
};
//# sourceMappingURL=data:application/json;base64,