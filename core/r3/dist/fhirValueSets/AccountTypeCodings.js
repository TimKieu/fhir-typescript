// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/account-type|3.0.2
/**
 * This examples value set defines the set of codes that can be used to represent the type of an account.
 */
export const AccountTypeCodings = {
    /**
     * _ActAccountCode: An account represents a grouping of financial transactions that are tracked and reported together with a single balance. 	 	Examples of account codes (types) are Patient billing accounts (collection of charges), Cost centers; Cash.
     */
    ActAccountCode: {
        display: "ActAccountCode",
        code: "_ActAccountCode",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * ACCTRECEIVABLE: An account for collecting charges, reversals, adjustments and payments, including deductibles, copayments, coinsurance (financial transactions) credited or debited to the account receivable account for a patient's encounter.
     */
    AccountReceivable: {
        display: "account receivable",
        code: "ACCTRECEIVABLE",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * AE: American Express
     */
    AmericanExpress: {
        display: "American Express",
        code: "AE",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CASH: Cash
     */
    Cash: {
        display: "Cash",
        code: "CASH",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * CC: Description: Types of advance payment to be made on a plastic card usually issued by a financial institution used of purchasing services and/or products.
     */
    CreditCard: {
        display: "credit card",
        code: "CC",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DN: Diner's Club
     */
    DinerQuoteSClub: {
        display: "Diner's Club",
        code: "DN",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * DV: Discover Card
     */
    DiscoverCard: {
        display: "Discover Card",
        code: "DV",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * MC: Master Card
     */
    MasterCard: {
        display: "Master Card",
        code: "MC",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * PBILLACCT: An account representing charges and credits (financial transactions) for a patient's encounter.
     */
    PatientBillingAccount: {
        display: "patient billing account",
        code: "PBILLACCT",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
    /**
     * V: Visa
     */
    Visa: {
        display: "Visa",
        code: "V",
        system: "http://hl7.org/fhir/v3/ActCode",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3VudFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BY2NvdW50VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBa0RqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FjY291bnQtdHlwZXwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZXhhbXBsZXMgdmFsdWUgc2V0IGRlZmluZXMgdGhlIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBhbiBhY2NvdW50LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQWNjb3VudFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIF9BY3RBY2NvdW50Q29kZTogQW4gYWNjb3VudCByZXByZXNlbnRzIGEgZ3JvdXBpbmcgb2YgZmluYW5jaWFsIHRyYW5zYWN0aW9ucyB0aGF0IGFyZSB0cmFja2VkIGFuZCByZXBvcnRlZCB0b2dldGhlciB3aXRoIGEgc2luZ2xlIGJhbGFuY2UuIFx0IFx0RXhhbXBsZXMgb2YgYWNjb3VudCBjb2RlcyAodHlwZXMpIGFyZSBQYXRpZW50IGJpbGxpbmcgYWNjb3VudHMgKGNvbGxlY3Rpb24gb2YgY2hhcmdlcyksIENvc3QgY2VudGVyczsgQ2FzaC5cclxuICAgKi9cclxuICBBY3RBY2NvdW50Q29kZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBBQ0NUUkVDRUlWQUJMRTogQW4gYWNjb3VudCBmb3IgY29sbGVjdGluZyBjaGFyZ2VzLCByZXZlcnNhbHMsIGFkanVzdG1lbnRzIGFuZCBwYXltZW50cywgaW5jbHVkaW5nIGRlZHVjdGlibGVzLCBjb3BheW1lbnRzLCBjb2luc3VyYW5jZSAoZmluYW5jaWFsIHRyYW5zYWN0aW9ucykgY3JlZGl0ZWQgb3IgZGViaXRlZCB0byB0aGUgYWNjb3VudCByZWNlaXZhYmxlIGFjY291bnQgZm9yIGEgcGF0aWVudCdzIGVuY291bnRlci5cclxuICAgKi9cclxuICBBY2NvdW50UmVjZWl2YWJsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBBRTogQW1lcmljYW4gRXhwcmVzc1xyXG4gICAqL1xyXG4gIEFtZXJpY2FuRXhwcmVzczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDQVNIOiBDYXNoXHJcbiAgICovXHJcbiAgQ2FzaDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDQzogRGVzY3JpcHRpb246IFR5cGVzIG9mIGFkdmFuY2UgcGF5bWVudCB0byBiZSBtYWRlIG9uIGEgcGxhc3RpYyBjYXJkIHVzdWFsbHkgaXNzdWVkIGJ5IGEgZmluYW5jaWFsIGluc3RpdHV0aW9uIHVzZWQgb2YgcHVyY2hhc2luZyBzZXJ2aWNlcyBhbmQvb3IgcHJvZHVjdHMuXHJcbiAgICovXHJcbiAgQ3JlZGl0Q2FyZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBETjogRGluZXIncyBDbHViXHJcbiAgICovXHJcbiAgRGluZXJRdW90ZVNDbHViOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIERWOiBEaXNjb3ZlciBDYXJkXHJcbiAgICovXHJcbiAgRGlzY292ZXJDYXJkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE1DOiBNYXN0ZXIgQ2FyZFxyXG4gICAqL1xyXG4gIE1hc3RlckNhcmQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUEJJTExBQ0NUOiBBbiBhY2NvdW50IHJlcHJlc2VudGluZyBjaGFyZ2VzIGFuZCBjcmVkaXRzIChmaW5hbmNpYWwgdHJhbnNhY3Rpb25zKSBmb3IgYSBwYXRpZW50J3MgZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIFBhdGllbnRCaWxsaW5nQWNjb3VudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBWOiBWaXNhXHJcbiAgICovXHJcbiAgVmlzYTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZXhhbXBsZXMgdmFsdWUgc2V0IGRlZmluZXMgdGhlIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBhbiBhY2NvdW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFjY291bnRUeXBlQ29kaW5nczpBY2NvdW50VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogX0FjdEFjY291bnRDb2RlOiBBbiBhY2NvdW50IHJlcHJlc2VudHMgYSBncm91cGluZyBvZiBmaW5hbmNpYWwgdHJhbnNhY3Rpb25zIHRoYXQgYXJlIHRyYWNrZWQgYW5kIHJlcG9ydGVkIHRvZ2V0aGVyIHdpdGggYSBzaW5nbGUgYmFsYW5jZS4gXHQgXHRFeGFtcGxlcyBvZiBhY2NvdW50IGNvZGVzICh0eXBlcykgYXJlIFBhdGllbnQgYmlsbGluZyBhY2NvdW50cyAoY29sbGVjdGlvbiBvZiBjaGFyZ2VzKSwgQ29zdCBjZW50ZXJzOyBDYXNoLlxyXG4gICAqL1xyXG4gIEFjdEFjY291bnRDb2RlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjdEFjY291bnRDb2RlXCIsXHJcbiAgICBjb2RlOiBcIl9BY3RBY2NvdW50Q29kZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQUNDVFJFQ0VJVkFCTEU6IEFuIGFjY291bnQgZm9yIGNvbGxlY3RpbmcgY2hhcmdlcywgcmV2ZXJzYWxzLCBhZGp1c3RtZW50cyBhbmQgcGF5bWVudHMsIGluY2x1ZGluZyBkZWR1Y3RpYmxlcywgY29wYXltZW50cywgY29pbnN1cmFuY2UgKGZpbmFuY2lhbCB0cmFuc2FjdGlvbnMpIGNyZWRpdGVkIG9yIGRlYml0ZWQgdG8gdGhlIGFjY291bnQgcmVjZWl2YWJsZSBhY2NvdW50IGZvciBhIHBhdGllbnQncyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgQWNjb3VudFJlY2VpdmFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiYWNjb3VudCByZWNlaXZhYmxlXCIsXHJcbiAgICBjb2RlOiBcIkFDQ1RSRUNFSVZBQkxFXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci92My9BY3RDb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBBRTogQW1lcmljYW4gRXhwcmVzc1xyXG4gICAqL1xyXG4gIEFtZXJpY2FuRXhwcmVzczoge1xyXG4gICAgZGlzcGxheTogXCJBbWVyaWNhbiBFeHByZXNzXCIsXHJcbiAgICBjb2RlOiBcIkFFXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci92My9BY3RDb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDQVNIOiBDYXNoXHJcbiAgICovXHJcbiAgQ2FzaDoge1xyXG4gICAgZGlzcGxheTogXCJDYXNoXCIsXHJcbiAgICBjb2RlOiBcIkNBU0hcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3YzL0FjdENvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENDOiBEZXNjcmlwdGlvbjogVHlwZXMgb2YgYWR2YW5jZSBwYXltZW50IHRvIGJlIG1hZGUgb24gYSBwbGFzdGljIGNhcmQgdXN1YWxseSBpc3N1ZWQgYnkgYSBmaW5hbmNpYWwgaW5zdGl0dXRpb24gdXNlZCBvZiBwdXJjaGFzaW5nIHNlcnZpY2VzIGFuZC9vciBwcm9kdWN0cy5cclxuICAgKi9cclxuICBDcmVkaXRDYXJkOiB7XHJcbiAgICBkaXNwbGF5OiBcImNyZWRpdCBjYXJkXCIsXHJcbiAgICBjb2RlOiBcIkNDXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci92My9BY3RDb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBETjogRGluZXIncyBDbHViXHJcbiAgICovXHJcbiAgRGluZXJRdW90ZVNDbHViOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpbmVyJ3MgQ2x1YlwiLFxyXG4gICAgY29kZTogXCJETlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogRFY6IERpc2NvdmVyIENhcmRcclxuICAgKi9cclxuICBEaXNjb3ZlckNhcmQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGlzY292ZXIgQ2FyZFwiLFxyXG4gICAgY29kZTogXCJEVlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogTUM6IE1hc3RlciBDYXJkXHJcbiAgICovXHJcbiAgTWFzdGVyQ2FyZDoge1xyXG4gICAgZGlzcGxheTogXCJNYXN0ZXIgQ2FyZFwiLFxyXG4gICAgY29kZTogXCJNQ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWN0Q29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUEJJTExBQ0NUOiBBbiBhY2NvdW50IHJlcHJlc2VudGluZyBjaGFyZ2VzIGFuZCBjcmVkaXRzIChmaW5hbmNpYWwgdHJhbnNhY3Rpb25zKSBmb3IgYSBwYXRpZW50J3MgZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIFBhdGllbnRCaWxsaW5nQWNjb3VudDoge1xyXG4gICAgZGlzcGxheTogXCJwYXRpZW50IGJpbGxpbmcgYWNjb3VudFwiLFxyXG4gICAgY29kZTogXCJQQklMTEFDQ1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3YzL0FjdENvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFY6IFZpc2FcclxuICAgKi9cclxuICBWaXNhOiB7XHJcbiAgICBkaXNwbGF5OiBcIlZpc2FcIixcclxuICAgIGNvZGU6IFwiVlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWN0Q29kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==