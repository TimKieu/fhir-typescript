// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-modifier-code|3.0.2
/**
 * A supported modifier for a search parameter.
 */
export const SearchModifierCodes = {
    /**
     * above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
     */
    Above: "above",
    /**
     * below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
     */
    Below: "below",
    /**
     * contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
     */
    Contains: "contains",
    /**
     * exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
     */
    Exact: "exact",
    /**
     * in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
     */
    In: "in",
    /**
     * missing: The search parameter returns resources that have a value or not.
     */
    Missing: "missing",
    /**
     * not: The search parameter returns resources that do not contain a match.
     */
    Not: "not",
    /**
     * not-in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
     */
    NotIn: "not-in",
    /**
     * text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
     */
    Text: "text",
    /**
     * type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
     */
    Type: "type",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoTW9kaWZpZXJDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU2VhcmNoTW9kaWZpZXJDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQzs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILEtBQUssRUFBRSxRQUFRO0lBQ2Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NlYXJjaC1tb2RpZmllci1jb2RlfDMuMC4yXHJcblxyXG4vKipcclxuICogQSBzdXBwb3J0ZWQgbW9kaWZpZXIgZm9yIGEgc2VhcmNoIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hNb2RpZmllckNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFib3ZlOiBUaGUgc2VhcmNoIHBhcmFtZXRlciB0ZXN0cyB3aGV0aGVyIHRoZSB2YWx1ZSBpbiBhIHJlc291cmNlIHN1YnN1bWVzIHRoZSBzcGVjaWZpZWQgdmFsdWUgKGlzLWEsIG9yIGhpZXJhcmNoaWNhbCByZWxhdGlvbnNoaXBzKS5cclxuICAgKi9cclxuICBBYm92ZTogXCJhYm92ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGJlbG93OiBUaGUgc2VhcmNoIHBhcmFtZXRlciB0ZXN0cyB3aGV0aGVyIHRoZSB2YWx1ZSBpbiBhIHJlc291cmNlIGlzIHN1YnN1bWVkIGJ5IHRoZSBzcGVjaWZpZWQgdmFsdWUgKGlzLWEsIG9yIGhpZXJhcmNoaWNhbCByZWxhdGlvbnNoaXBzKS5cclxuICAgKi9cclxuICBCZWxvdzogXCJiZWxvd1wiLFxyXG4gIC8qKlxyXG4gICAqIGNvbnRhaW5zOiBUaGUgc2VhcmNoIHBhcmFtZXRlciByZXR1cm5zIHJlc291cmNlcyB0aGF0IGluY2x1ZGUgdGhlIHN1cHBsaWVkIHBhcmFtZXRlciB2YWx1ZSBhbnl3aGVyZSB3aXRoaW4gdGhlIGZpZWxkIGJlaW5nIHNlYXJjaGVkLlxyXG4gICAqL1xyXG4gIENvbnRhaW5zOiBcImNvbnRhaW5zXCIsXHJcbiAgLyoqXHJcbiAgICogZXhhY3Q6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIHJldHVybnMgcmVzb3VyY2VzIHRoYXQgaGF2ZSBhIHZhbHVlIHRoYXQgZXhhY3RseSBtYXRjaGVzIHRoZSBzdXBwbGllZCBwYXJhbWV0ZXIgKHRoZSB3aG9sZSBzdHJpbmcsIGluY2x1ZGluZyBjYXNpbmcgYW5kIGFjY2VudHMpLlxyXG4gICAqL1xyXG4gIEV4YWN0OiBcImV4YWN0XCIsXHJcbiAgLyoqXHJcbiAgICogaW46IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGEgVVJJIChyZWxhdGl2ZSBvciBhYnNvbHV0ZSkgdGhhdCBpZGVudGlmaWVzIGEgdmFsdWUgc2V0LCBhbmQgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgY29kaW5nIGlzIGluIHRoZSBzcGVjaWZpZWQgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIEluOiBcImluXCIsXHJcbiAgLyoqXHJcbiAgICogbWlzc2luZzogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBoYXZlIGEgdmFsdWUgb3Igbm90LlxyXG4gICAqL1xyXG4gIE1pc3Npbmc6IFwibWlzc2luZ1wiLFxyXG4gIC8qKlxyXG4gICAqIG5vdDogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBkbyBub3QgY29udGFpbiBhIG1hdGNoLlxyXG4gICAqL1xyXG4gIE5vdDogXCJub3RcIixcclxuICAvKipcclxuICAgKiBub3QtaW46IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGEgVVJJIChyZWxhdGl2ZSBvciBhYnNvbHV0ZSkgdGhhdCBpZGVudGlmaWVzIGEgdmFsdWUgc2V0LCBhbmQgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgY29kaW5nIGlzIG5vdCBpbiB0aGUgc3BlY2lmaWVkIHZhbHVlIHNldC5cclxuICAgKi9cclxuICBOb3RJbjogXCJub3QtaW5cIixcclxuICAvKipcclxuICAgKiB0ZXh0OiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBwcm9jZXNzZWQgYXMgYSBzdHJpbmcgdGhhdCBzZWFyY2hlcyB0ZXh0IGFzc29jaWF0ZWQgd2l0aCB0aGUgY29kZS92YWx1ZSAtIGVpdGhlciBDb2RlYWJsZUNvbmNlcHQudGV4dCwgQ29kaW5nLmRpc3BsYXksIG9yIElkZW50aWZpZXIudHlwZS50ZXh0LlxyXG4gICAqL1xyXG4gIFRleHQ6IFwidGV4dFwiLFxyXG4gIC8qKlxyXG4gICAqIHR5cGU6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIG9ubHkgYXBwbGllcyB0byB0aGUgUmVzb3VyY2UgVHlwZSBzcGVjaWZpZWQgYXMgYSBtb2RpZmllciAoZS5nLiB0aGUgbW9kaWZpZXIgaXMgbm90IGFjdHVhbGx5IDp0eXBlLCBidXQgOlBhdGllbnQgZXRjLikuXHJcbiAgICovXHJcbiAgVHlwZTogXCJ0eXBlXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQSBzdXBwb3J0ZWQgbW9kaWZpZXIgZm9yIGEgc2VhcmNoIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNlYXJjaE1vZGlmaWVyQ29kZVR5cGUgPSB0eXBlb2YgU2VhcmNoTW9kaWZpZXJDb2Rlc1trZXlvZiB0eXBlb2YgU2VhcmNoTW9kaWZpZXJDb2Rlc107XHJcbiJdfQ==