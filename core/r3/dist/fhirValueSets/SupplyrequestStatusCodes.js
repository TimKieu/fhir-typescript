// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/supplyrequest-status|3.0.2
/**
 * Status of the supply request
 */
export const SupplyrequestStatusCodes = {
    /**
     * active: The request is ready to be acted upon
     */
    Active: "active",
    /**
     * cancelled: The authorization/request to act has been terminated prior to the full completion of the intended actions.  No further activity should occur.
     */
    Cancelled: "cancelled",
    /**
     * completed: Activity against the request has been sufficiently completed to the satisfaction of the requester
     */
    Completed: "completed",
    /**
     * draft: The request has been created but is not yet complete or ready for action
     */
    Draft: "draft",
    /**
     * entered-in-error: This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".)
     */
    EnteredInError: "entered-in-error",
    /**
     * suspended: The authorization/request to act has been temporarily withdrawn but is expected to resume in the future
     */
    Suspended: "suspended",
    /**
     * unknown: The authoring system does not know which of the status values currently applies for this request.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwcGx5cmVxdWVzdFN0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9TdXBwbHlyZXF1ZXN0U3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBRXpFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUc7SUFDdEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsY0FBYyxFQUFFLGtCQUFrQjtJQUNsQzs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7Q0FDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3N1cHBseXJlcXVlc3Qtc3RhdHVzfDMuMC4yXHJcblxyXG4vKipcclxuICogU3RhdHVzIG9mIHRoZSBzdXBwbHkgcmVxdWVzdFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFN1cHBseXJlcXVlc3RTdGF0dXNDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSByZXF1ZXN0IGlzIHJlYWR5IHRvIGJlIGFjdGVkIHVwb25cclxuICAgKi9cclxuICBBY3RpdmU6IFwiYWN0aXZlXCIsXHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgYXV0aG9yaXphdGlvbi9yZXF1ZXN0IHRvIGFjdCBoYXMgYmVlbiB0ZXJtaW5hdGVkIHByaW9yIHRvIHRoZSBmdWxsIGNvbXBsZXRpb24gb2YgdGhlIGludGVuZGVkIGFjdGlvbnMuICBObyBmdXJ0aGVyIGFjdGl2aXR5IHNob3VsZCBvY2N1ci5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IFwiY2FuY2VsbGVkXCIsXHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBBY3Rpdml0eSBhZ2FpbnN0IHRoZSByZXF1ZXN0IGhhcyBiZWVuIHN1ZmZpY2llbnRseSBjb21wbGV0ZWQgdG8gdGhlIHNhdGlzZmFjdGlvbiBvZiB0aGUgcmVxdWVzdGVyXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBcImNvbXBsZXRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBjcmVhdGVkIGJ1dCBpcyBub3QgeWV0IGNvbXBsZXRlIG9yIHJlYWR5IGZvciBhY3Rpb25cclxuICAgKi9cclxuICBEcmFmdDogXCJkcmFmdFwiLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgZWxlY3Ryb25pYyByZWNvcmQgc2hvdWxkIG5ldmVyIGhhdmUgZXhpc3RlZCwgdGhvdWdoIGl0IGlzIHBvc3NpYmxlIHRoYXQgcmVhbC13b3JsZCBkZWNpc2lvbnMgd2VyZSBiYXNlZCBvbiBpdC4gIChJZiByZWFsLXdvcmxkIGFjdGl2aXR5IGhhcyBvY2N1cnJlZCwgdGhlIHN0YXR1cyBzaG91bGQgYmUgXCJjYW5jZWxsZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gIC8qKlxyXG4gICAqIHN1c3BlbmRlZDogVGhlIGF1dGhvcml6YXRpb24vcmVxdWVzdCB0byBhY3QgaGFzIGJlZW4gdGVtcG9yYXJpbHkgd2l0aGRyYXduIGJ1dCBpcyBleHBlY3RlZCB0byByZXN1bWUgaW4gdGhlIGZ1dHVyZVxyXG4gICAqL1xyXG4gIFN1c3BlbmRlZDogXCJzdXNwZW5kZWRcIixcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgYXV0aG9yaW5nIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGN1cnJlbnRseSBhcHBsaWVzIGZvciB0aGlzIHJlcXVlc3QuICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCBpdCdzIGp1c3Qgbm90IGtub3duIHdoaWNoIG9uZS5cclxuICAgKi9cclxuICBVbmtub3duOiBcInVua25vd25cIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBTdGF0dXMgb2YgdGhlIHN1cHBseSByZXF1ZXN0XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTdXBwbHlyZXF1ZXN0U3RhdHVzQ29kZVR5cGUgPSB0eXBlb2YgU3VwcGx5cmVxdWVzdFN0YXR1c0NvZGVzW2tleW9mIHR5cGVvZiBTdXBwbHlyZXF1ZXN0U3RhdHVzQ29kZXNdO1xyXG4iXX0=