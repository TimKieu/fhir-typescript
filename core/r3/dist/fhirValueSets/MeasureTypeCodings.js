// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measure-type|3.0.2
/**
 * The type of measure (includes codes from 2.16.840.1.113883.1.11.20368)
 */
export const MeasureTypeCodings = {
    /**
     * composite: A measure that combines multiple component measures in to a single quality measure
     */
    Composite: {
        display: "Composite",
        code: "composite",
        system: "http://hl7.org/fhir/measure-type",
    },
    /**
     * outcome: A measure that indicates the result of the performance (or non-performance) of a function or process
     */
    Outcome: {
        display: "Outcome",
        code: "outcome",
        system: "http://hl7.org/fhir/measure-type",
    },
    /**
     * patient-reported-outcome: A measure that focuses on patient-reported information such as patient engagement or patient experience measures
     */
    PatientReportedOutcome: {
        display: "Patient Reported Outcome",
        code: "patient-reported-outcome",
        system: "http://hl7.org/fhir/measure-type",
    },
    /**
     * process: A measure which focuses on a process which leads to a certain outcome, meaning that a scientific basis exists for believing that the process, when executed well, will increase the probability of achieving a desired outcome
     */
    Process: {
        display: "Process",
        code: "process",
        system: "http://hl7.org/fhir/measure-type",
    },
    /**
     * structure: A measure that focuses on a health care provider's capacity, systems, and processes to provide high-quality care
     */
    Structure: {
        display: "Structure",
        code: "structure",
        system: "http://hl7.org/fhir/measure-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBOEJqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsMEJBQTBCO1FBQ2hDLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVhc3VyZS10eXBlfDMuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgbWVhc3VyZSAoaW5jbHVkZXMgY29kZXMgZnJvbSAyLjE2Ljg0MC4xLjExMzg4My4xLjExLjIwMzY4KVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVhc3VyZVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbXBvc2l0ZTogQSBtZWFzdXJlIHRoYXQgY29tYmluZXMgbXVsdGlwbGUgY29tcG9uZW50IG1lYXN1cmVzIGluIHRvIGEgc2luZ2xlIHF1YWxpdHkgbWVhc3VyZVxyXG4gICAqL1xyXG4gIENvbXBvc2l0ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvdXRjb21lOiBBIG1lYXN1cmUgdGhhdCBpbmRpY2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcGVyZm9ybWFuY2UgKG9yIG5vbi1wZXJmb3JtYW5jZSkgb2YgYSBmdW5jdGlvbiBvciBwcm9jZXNzXHJcbiAgICovXHJcbiAgT3V0Y29tZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwYXRpZW50LXJlcG9ydGVkLW91dGNvbWU6IEEgbWVhc3VyZSB0aGF0IGZvY3VzZXMgb24gcGF0aWVudC1yZXBvcnRlZCBpbmZvcm1hdGlvbiBzdWNoIGFzIHBhdGllbnQgZW5nYWdlbWVudCBvciBwYXRpZW50IGV4cGVyaWVuY2UgbWVhc3VyZXNcclxuICAgKi9cclxuICBQYXRpZW50UmVwb3J0ZWRPdXRjb21lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb2Nlc3M6IEEgbWVhc3VyZSB3aGljaCBmb2N1c2VzIG9uIGEgcHJvY2VzcyB3aGljaCBsZWFkcyB0byBhIGNlcnRhaW4gb3V0Y29tZSwgbWVhbmluZyB0aGF0IGEgc2NpZW50aWZpYyBiYXNpcyBleGlzdHMgZm9yIGJlbGlldmluZyB0aGF0IHRoZSBwcm9jZXNzLCB3aGVuIGV4ZWN1dGVkIHdlbGwsIHdpbGwgaW5jcmVhc2UgdGhlIHByb2JhYmlsaXR5IG9mIGFjaGlldmluZyBhIGRlc2lyZWQgb3V0Y29tZVxyXG4gICAqL1xyXG4gIFByb2Nlc3M6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3RydWN0dXJlOiBBIG1lYXN1cmUgdGhhdCBmb2N1c2VzIG9uIGEgaGVhbHRoIGNhcmUgcHJvdmlkZXIncyBjYXBhY2l0eSwgc3lzdGVtcywgYW5kIHByb2Nlc3NlcyB0byBwcm92aWRlIGhpZ2gtcXVhbGl0eSBjYXJlXHJcbiAgICovXHJcbiAgU3RydWN0dXJlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgbWVhc3VyZSAoaW5jbHVkZXMgY29kZXMgZnJvbSAyLjE2Ljg0MC4xLjExMzg4My4xLjExLjIwMzY4KVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lYXN1cmVUeXBlQ29kaW5nczpNZWFzdXJlVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcG9zaXRlOiBBIG1lYXN1cmUgdGhhdCBjb21iaW5lcyBtdWx0aXBsZSBjb21wb25lbnQgbWVhc3VyZXMgaW4gdG8gYSBzaW5nbGUgcXVhbGl0eSBtZWFzdXJlXHJcbiAgICovXHJcbiAgQ29tcG9zaXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBvc2l0ZVwiLFxyXG4gICAgY29kZTogXCJjb21wb3NpdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmUtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3V0Y29tZTogQSBtZWFzdXJlIHRoYXQgaW5kaWNhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHBlcmZvcm1hbmNlIChvciBub24tcGVyZm9ybWFuY2UpIG9mIGEgZnVuY3Rpb24gb3IgcHJvY2Vzc1xyXG4gICAqL1xyXG4gIE91dGNvbWU6IHtcclxuICAgIGRpc3BsYXk6IFwiT3V0Y29tZVwiLFxyXG4gICAgY29kZTogXCJvdXRjb21lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBhdGllbnQtcmVwb3J0ZWQtb3V0Y29tZTogQSBtZWFzdXJlIHRoYXQgZm9jdXNlcyBvbiBwYXRpZW50LXJlcG9ydGVkIGluZm9ybWF0aW9uIHN1Y2ggYXMgcGF0aWVudCBlbmdhZ2VtZW50IG9yIHBhdGllbnQgZXhwZXJpZW5jZSBtZWFzdXJlc1xyXG4gICAqL1xyXG4gIFBhdGllbnRSZXBvcnRlZE91dGNvbWU6IHtcclxuICAgIGRpc3BsYXk6IFwiUGF0aWVudCBSZXBvcnRlZCBPdXRjb21lXCIsXHJcbiAgICBjb2RlOiBcInBhdGllbnQtcmVwb3J0ZWQtb3V0Y29tZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9jZXNzOiBBIG1lYXN1cmUgd2hpY2ggZm9jdXNlcyBvbiBhIHByb2Nlc3Mgd2hpY2ggbGVhZHMgdG8gYSBjZXJ0YWluIG91dGNvbWUsIG1lYW5pbmcgdGhhdCBhIHNjaWVudGlmaWMgYmFzaXMgZXhpc3RzIGZvciBiZWxpZXZpbmcgdGhhdCB0aGUgcHJvY2Vzcywgd2hlbiBleGVjdXRlZCB3ZWxsLCB3aWxsIGluY3JlYXNlIHRoZSBwcm9iYWJpbGl0eSBvZiBhY2hpZXZpbmcgYSBkZXNpcmVkIG91dGNvbWVcclxuICAgKi9cclxuICBQcm9jZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb2Nlc3NcIixcclxuICAgIGNvZGU6IFwicHJvY2Vzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdHJ1Y3R1cmU6IEEgbWVhc3VyZSB0aGF0IGZvY3VzZXMgb24gYSBoZWFsdGggY2FyZSBwcm92aWRlcidzIGNhcGFjaXR5LCBzeXN0ZW1zLCBhbmQgcHJvY2Vzc2VzIHRvIHByb3ZpZGUgaGlnaC1xdWFsaXR5IGNhcmVcclxuICAgKi9cclxuICBTdHJ1Y3R1cmU6IHtcclxuICAgIGRpc3BsYXk6IFwiU3RydWN0dXJlXCIsXHJcbiAgICBjb2RlOiBcInN0cnVjdHVyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19