// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/organization-type|3.0.2
/**
 * This example value set defines a set of codes that can be used to indicate a type of organization.
 */
export const OrganizationTypeCodes = {
    /**
     * bus: An organization that is a registered business or corporation but not identified by other types.
     */
    NonHealthcareBusinessOrCorporation: "bus",
    /**
     * cg: An un-incorporated community group.
     */
    CommunityGroup: "cg",
    /**
     * crs: An organization that is identified as a Pharmaceutical/Clinical Research Sponsor.
     */
    ClinicalResearchSponsor: "crs",
    /**
     * dept: A department or ward within a hospital (Generally is not applicable to top level organizations)
     */
    HospitalDepartment: "dept",
    /**
     * edu: An educational institution that provides education or research facilities.
     */
    EducationalInstitute: "edu",
    /**
     * govt: A political body, often used when including organization records for government bodies such as a Federal Government, State or Local Government.
     */
    Government: "govt",
    /**
     * ins: A company that provides insurance to its subscribers that may include healthcare related policies.
     */
    InsuranceCompany: "ins",
    /**
     * other: Other type of organization not already specified.
     */
    Other: "other",
    /**
     * prov: An organization that provides healthcare services.
     */
    HealthcareProvider: "prov",
    /**
     * reli: An organization that is identified as a part of a religious institution.
     */
    ReligiousInstitution: "reli",
    /**
     * team: An organizational team is usually a grouping of practitioners that perform a specific function within an organization (which could be a top level organization, or a department).
     */
    OrganizationalTeam: "team",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JnYW5pemF0aW9uVHlwZUNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Pcmdhbml6YXRpb25UeXBlQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsc0VBQXNFO0FBRXRFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUc7SUFDbkM7O09BRUc7SUFDSCxrQ0FBa0MsRUFBRSxLQUFLO0lBQ3pDOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUk7SUFDcEI7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxLQUFLO0lBQzlCOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsTUFBTTtJQUMxQjs7T0FFRztJQUNILG9CQUFvQixFQUFFLEtBQUs7SUFDM0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsTUFBTTtJQUNsQjs7T0FFRztJQUNILGdCQUFnQixFQUFFLEtBQUs7SUFDdkI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsTUFBTTtJQUMxQjs7T0FFRztJQUNILG9CQUFvQixFQUFFLE1BQU07SUFDNUI7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxNQUFNO0NBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjMuY29yZSB2ZXJzaW9uOiAzLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvb3JnYW5pemF0aW9uLXR5cGV8My4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGV4YW1wbGUgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSBhIHR5cGUgb2Ygb3JnYW5pemF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE9yZ2FuaXphdGlvblR5cGVDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBidXM6IEFuIG9yZ2FuaXphdGlvbiB0aGF0IGlzIGEgcmVnaXN0ZXJlZCBidXNpbmVzcyBvciBjb3Jwb3JhdGlvbiBidXQgbm90IGlkZW50aWZpZWQgYnkgb3RoZXIgdHlwZXMuXHJcbiAgICovXHJcbiAgTm9uSGVhbHRoY2FyZUJ1c2luZXNzT3JDb3Jwb3JhdGlvbjogXCJidXNcIixcclxuICAvKipcclxuICAgKiBjZzogQW4gdW4taW5jb3Jwb3JhdGVkIGNvbW11bml0eSBncm91cC5cclxuICAgKi9cclxuICBDb21tdW5pdHlHcm91cDogXCJjZ1wiLFxyXG4gIC8qKlxyXG4gICAqIGNyczogQW4gb3JnYW5pemF0aW9uIHRoYXQgaXMgaWRlbnRpZmllZCBhcyBhIFBoYXJtYWNldXRpY2FsL0NsaW5pY2FsIFJlc2VhcmNoIFNwb25zb3IuXHJcbiAgICovXHJcbiAgQ2xpbmljYWxSZXNlYXJjaFNwb25zb3I6IFwiY3JzXCIsXHJcbiAgLyoqXHJcbiAgICogZGVwdDogQSBkZXBhcnRtZW50IG9yIHdhcmQgd2l0aGluIGEgaG9zcGl0YWwgKEdlbmVyYWxseSBpcyBub3QgYXBwbGljYWJsZSB0byB0b3AgbGV2ZWwgb3JnYW5pemF0aW9ucylcclxuICAgKi9cclxuICBIb3NwaXRhbERlcGFydG1lbnQ6IFwiZGVwdFwiLFxyXG4gIC8qKlxyXG4gICAqIGVkdTogQW4gZWR1Y2F0aW9uYWwgaW5zdGl0dXRpb24gdGhhdCBwcm92aWRlcyBlZHVjYXRpb24gb3IgcmVzZWFyY2ggZmFjaWxpdGllcy5cclxuICAgKi9cclxuICBFZHVjYXRpb25hbEluc3RpdHV0ZTogXCJlZHVcIixcclxuICAvKipcclxuICAgKiBnb3Z0OiBBIHBvbGl0aWNhbCBib2R5LCBvZnRlbiB1c2VkIHdoZW4gaW5jbHVkaW5nIG9yZ2FuaXphdGlvbiByZWNvcmRzIGZvciBnb3Zlcm5tZW50IGJvZGllcyBzdWNoIGFzIGEgRmVkZXJhbCBHb3Zlcm5tZW50LCBTdGF0ZSBvciBMb2NhbCBHb3Zlcm5tZW50LlxyXG4gICAqL1xyXG4gIEdvdmVybm1lbnQ6IFwiZ292dFwiLFxyXG4gIC8qKlxyXG4gICAqIGluczogQSBjb21wYW55IHRoYXQgcHJvdmlkZXMgaW5zdXJhbmNlIHRvIGl0cyBzdWJzY3JpYmVycyB0aGF0IG1heSBpbmNsdWRlIGhlYWx0aGNhcmUgcmVsYXRlZCBwb2xpY2llcy5cclxuICAgKi9cclxuICBJbnN1cmFuY2VDb21wYW55OiBcImluc1wiLFxyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBPdGhlciB0eXBlIG9mIG9yZ2FuaXphdGlvbiBub3QgYWxyZWFkeSBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgT3RoZXI6IFwib3RoZXJcIixcclxuICAvKipcclxuICAgKiBwcm92OiBBbiBvcmdhbml6YXRpb24gdGhhdCBwcm92aWRlcyBoZWFsdGhjYXJlIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIEhlYWx0aGNhcmVQcm92aWRlcjogXCJwcm92XCIsXHJcbiAgLyoqXHJcbiAgICogcmVsaTogQW4gb3JnYW5pemF0aW9uIHRoYXQgaXMgaWRlbnRpZmllZCBhcyBhIHBhcnQgb2YgYSByZWxpZ2lvdXMgaW5zdGl0dXRpb24uXHJcbiAgICovXHJcbiAgUmVsaWdpb3VzSW5zdGl0dXRpb246IFwicmVsaVwiLFxyXG4gIC8qKlxyXG4gICAqIHRlYW06IEFuIG9yZ2FuaXphdGlvbmFsIHRlYW0gaXMgdXN1YWxseSBhIGdyb3VwaW5nIG9mIHByYWN0aXRpb25lcnMgdGhhdCBwZXJmb3JtIGEgc3BlY2lmaWMgZnVuY3Rpb24gd2l0aGluIGFuIG9yZ2FuaXphdGlvbiAod2hpY2ggY291bGQgYmUgYSB0b3AgbGV2ZWwgb3JnYW5pemF0aW9uLCBvciBhIGRlcGFydG1lbnQpLlxyXG4gICAqL1xyXG4gIE9yZ2FuaXphdGlvbmFsVGVhbTogXCJ0ZWFtXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyBleGFtcGxlIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgYSB0eXBlIG9mIG9yZ2FuaXphdGlvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIE9yZ2FuaXphdGlvblR5cGVDb2RlVHlwZSA9IHR5cGVvZiBPcmdhbml6YXRpb25UeXBlQ29kZXNba2V5b2YgdHlwZW9mIE9yZ2FuaXphdGlvblR5cGVDb2Rlc107XHJcbiJdfQ==