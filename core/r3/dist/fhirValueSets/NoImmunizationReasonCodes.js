// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/no-immunization-reason|3.0.2
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why a dose of vaccine was not administered. This value set is provided as a suggestive example.
 */
export const NoImmunizationReasonCodes = {
    /**
     * Code: 171257003
     */
    NoConsentTetanusLowDoseDiphtheriaVaccine: "171257003",
    /**
     * Code: 171265000
     */
    PertussisVaccineRefused: "171265000",
    /**
     * Code: 171266004
     */
    NoConsentDiphtheriaImmunization: "171266004",
    /**
     * Code: 171267008
     */
    NoConsentTetanusImmunization: "171267008",
    /**
     * Code: 171268003
     */
    PolioImmunizationRefused: "171268003",
    /**
     * Code: 171269006
     */
    NoConsentMeaslesImmunization: "171269006",
    /**
     * Code: 171270007
     */
    NoConsentRubellaImmunization: "171270007",
    /**
     * Code: 171271006
     */
    NoConsentBCG: "171271006",
    /**
     * Code: 171272004
     */
    NoConsentInfluenzaImmunization: "171272004",
    /**
     * Code: 171280006
     */
    NoConsentForMMR: "171280006",
    /**
     * Code: 171283008
     */
    NoConsentForAnyPrimaryImmunization: "171283008",
    /**
     * Code: 171285001
     */
    NoConsentPreSchoolVaccinations: "171285001",
    /**
     * Code: 171286000
     */
    NoConsentSchoolExitVaccinations: "171286000",
    /**
     * Code: 171291004
     */
    NoConsentHaemophilusInfluenzaeTypeBImmunization: "171291004",
    /**
     * Code: 171292006
     */
    NoConsentPneumococcalImmunization: "171292006",
    /**
     * Code: 171293001
     */
    NoConsentForMRMeaslesRubellaVaccine: "171293001",
    /**
     * Code: 268559007
     */
    NoConsentForAnyImmunization: "268559007",
    /**
     * Code: 310839003
     */
    NoConsentForMMR1: "310839003",
    /**
     * Code: 310840001
     */
    NoConsentForMeaslesMumpsRubellaTwo: "310840001",
    /**
     * Code: 314768003
     */
    NoConsentDTPImmunization: "314768003",
    /**
     * Code: 314769006
     */
    NoConsentDTImmunization: "314769006",
    /**
     * Code: 314936001
     */
    NoConsentForMeningitisCImmunization: "314936001",
    /**
     * Code: 407598009
     */
    NoConsentFor3rdHIBBooster: "407598009",
    /**
     * IMMUNE: Definition:Testing has shown that the patient already has immunity to the agent targeted by the immunization.
     */
    Immunity: "IMMUNE",
    /**
     * MEDPREC: Definition:The patient currently has a medical condition for which the vaccine is contraindicated or for which precaution is warranted.
     */
    MedicalPrecaution: "MEDPREC",
    /**
     * OSTOCK: Definition:There was no supply of the product on hand to perform the service.
     */
    ProductOutOfStock: "OSTOCK",
    /**
     * PATOBJ: Definition:The patient or their guardian objects to receiving the vaccine.
     */
    PatientObjection: "PATOBJ",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9JbW11bml6YXRpb25SZWFzb25Db2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTm9JbW11bml6YXRpb25SZWFzb25Db2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywyRUFBMkU7QUFFM0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRztJQUN2Qzs7T0FFRztJQUNILHdDQUF3QyxFQUFFLFdBQVc7SUFDckQ7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxXQUFXO0lBQ3BDOztPQUVHO0lBQ0gsK0JBQStCLEVBQUUsV0FBVztJQUM1Qzs7T0FFRztJQUNILDRCQUE0QixFQUFFLFdBQVc7SUFDekM7O09BRUc7SUFDSCx3QkFBd0IsRUFBRSxXQUFXO0lBQ3JDOztPQUVHO0lBQ0gsNEJBQTRCLEVBQUUsV0FBVztJQUN6Qzs7T0FFRztJQUNILDRCQUE0QixFQUFFLFdBQVc7SUFDekM7O09BRUc7SUFDSCxZQUFZLEVBQUUsV0FBVztJQUN6Qjs7T0FFRztJQUNILDhCQUE4QixFQUFFLFdBQVc7SUFDM0M7O09BRUc7SUFDSCxlQUFlLEVBQUUsV0FBVztJQUM1Qjs7T0FFRztJQUNILGtDQUFrQyxFQUFFLFdBQVc7SUFDL0M7O09BRUc7SUFDSCw4QkFBOEIsRUFBRSxXQUFXO0lBQzNDOztPQUVHO0lBQ0gsK0JBQStCLEVBQUUsV0FBVztJQUM1Qzs7T0FFRztJQUNILCtDQUErQyxFQUFFLFdBQVc7SUFDNUQ7O09BRUc7SUFDSCxpQ0FBaUMsRUFBRSxXQUFXO0lBQzlDOztPQUVHO0lBQ0gsbUNBQW1DLEVBQUUsV0FBVztJQUNoRDs7T0FFRztJQUNILDJCQUEyQixFQUFFLFdBQVc7SUFDeEM7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxXQUFXO0lBQzdCOztPQUVHO0lBQ0gsa0NBQWtDLEVBQUUsV0FBVztJQUMvQzs7T0FFRztJQUNILHdCQUF3QixFQUFFLFdBQVc7SUFDckM7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxXQUFXO0lBQ3BDOztPQUVHO0lBQ0gsbUNBQW1DLEVBQUUsV0FBVztJQUNoRDs7T0FFRztJQUNILHlCQUF5QixFQUFFLFdBQVc7SUFDdEM7O09BRUc7SUFDSCxRQUFRLEVBQUUsUUFBUTtJQUNsQjs7T0FFRztJQUNILGlCQUFpQixFQUFFLFNBQVM7SUFDNUI7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxRQUFRO0lBQzNCOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsUUFBUTtDQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L25vLWltbXVuaXphdGlvbi1yZWFzb258My4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHJlYXNvbiB3aHkgYSBkb3NlIG9mIHZhY2NpbmUgd2FzIG5vdCBhZG1pbmlzdGVyZWQuIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE5vSW1tdW5pemF0aW9uUmVhc29uQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjU3MDAzXHJcbiAgICovXHJcbiAgTm9Db25zZW50VGV0YW51c0xvd0Rvc2VEaXBodGhlcmlhVmFjY2luZTogXCIxNzEyNTcwMDNcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNjUwMDBcclxuICAgKi9cclxuICBQZXJ0dXNzaXNWYWNjaW5lUmVmdXNlZDogXCIxNzEyNjUwMDBcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNjYwMDRcclxuICAgKi9cclxuICBOb0NvbnNlbnREaXBodGhlcmlhSW1tdW5pemF0aW9uOiBcIjE3MTI2NjAwNFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI2NzAwOFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudFRldGFudXNJbW11bml6YXRpb246IFwiMTcxMjY3MDA4XCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjY4MDAzXHJcbiAgICovXHJcbiAgUG9saW9JbW11bml6YXRpb25SZWZ1c2VkOiBcIjE3MTI2ODAwM1wiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI2OTAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudE1lYXNsZXNJbW11bml6YXRpb246IFwiMTcxMjY5MDA2XCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjcwMDA3XHJcbiAgICovXHJcbiAgTm9Db25zZW50UnViZWxsYUltbXVuaXphdGlvbjogXCIxNzEyNzAwMDdcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNzEwMDZcclxuICAgKi9cclxuICBOb0NvbnNlbnRCQ0c6IFwiMTcxMjcxMDA2XCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjcyMDA0XHJcbiAgICovXHJcbiAgTm9Db25zZW50SW5mbHVlbnphSW1tdW5pemF0aW9uOiBcIjE3MTI3MjAwNFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI4MDAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvck1NUjogXCIxNzEyODAwMDZcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyODMwMDhcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JBbnlQcmltYXJ5SW1tdW5pemF0aW9uOiBcIjE3MTI4MzAwOFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI4NTAwMVxyXG4gICAqL1xyXG4gIE5vQ29uc2VudFByZVNjaG9vbFZhY2NpbmF0aW9uczogXCIxNzEyODUwMDFcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyODYwMDBcclxuICAgKi9cclxuICBOb0NvbnNlbnRTY2hvb2xFeGl0VmFjY2luYXRpb25zOiBcIjE3MTI4NjAwMFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI5MTAwNFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEhhZW1vcGhpbHVzSW5mbHVlbnphZVR5cGVCSW1tdW5pemF0aW9uOiBcIjE3MTI5MTAwNFwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI5MjAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudFBuZXVtb2NvY2NhbEltbXVuaXphdGlvbjogXCIxNzEyOTIwMDZcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyOTMwMDFcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNUk1lYXNsZXNSdWJlbGxhVmFjY2luZTogXCIxNzEyOTMwMDFcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAyNjg1NTkwMDdcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JBbnlJbW11bml6YXRpb246IFwiMjY4NTU5MDA3XCIsXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMzEwODM5MDAzXHJcbiAgICovXHJcbiAgTm9Db25zZW50Rm9yTU1SMTogXCIzMTA4MzkwMDNcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTA4NDAwMDFcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNZWFzbGVzTXVtcHNSdWJlbGxhVHdvOiBcIjMxMDg0MDAwMVwiLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDMxNDc2ODAwM1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudERUUEltbXVuaXphdGlvbjogXCIzMTQ3NjgwMDNcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTQ3NjkwMDZcclxuICAgKi9cclxuICBOb0NvbnNlbnREVEltbXVuaXphdGlvbjogXCIzMTQ3NjkwMDZcIixcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTQ5MzYwMDFcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNZW5pbmdpdGlzQ0ltbXVuaXphdGlvbjogXCIzMTQ5MzYwMDFcIixcclxuICAvKipcclxuICAgKiBDb2RlOiA0MDc1OTgwMDlcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3IzcmRISUJCb29zdGVyOiBcIjQwNzU5ODAwOVwiLFxyXG4gIC8qKlxyXG4gICAqIElNTVVORTogRGVmaW5pdGlvbjpUZXN0aW5nIGhhcyBzaG93biB0aGF0IHRoZSBwYXRpZW50IGFscmVhZHkgaGFzIGltbXVuaXR5IHRvIHRoZSBhZ2VudCB0YXJnZXRlZCBieSB0aGUgaW1tdW5pemF0aW9uLlxyXG4gICAqL1xyXG4gIEltbXVuaXR5OiBcIklNTVVORVwiLFxyXG4gIC8qKlxyXG4gICAqIE1FRFBSRUM6IERlZmluaXRpb246VGhlIHBhdGllbnQgY3VycmVudGx5IGhhcyBhIG1lZGljYWwgY29uZGl0aW9uIGZvciB3aGljaCB0aGUgdmFjY2luZSBpcyBjb250cmFpbmRpY2F0ZWQgb3IgZm9yIHdoaWNoIHByZWNhdXRpb24gaXMgd2FycmFudGVkLlxyXG4gICAqL1xyXG4gIE1lZGljYWxQcmVjYXV0aW9uOiBcIk1FRFBSRUNcIixcclxuICAvKipcclxuICAgKiBPU1RPQ0s6IERlZmluaXRpb246VGhlcmUgd2FzIG5vIHN1cHBseSBvZiB0aGUgcHJvZHVjdCBvbiBoYW5kIHRvIHBlcmZvcm0gdGhlIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgUHJvZHVjdE91dE9mU3RvY2s6IFwiT1NUT0NLXCIsXHJcbiAgLyoqXHJcbiAgICogUEFUT0JKOiBEZWZpbml0aW9uOlRoZSBwYXRpZW50IG9yIHRoZWlyIGd1YXJkaWFuIG9iamVjdHMgdG8gcmVjZWl2aW5nIHRoZSB2YWNjaW5lLlxyXG4gICAqL1xyXG4gIFBhdGllbnRPYmplY3Rpb246IFwiUEFUT0JKXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSByZWFzb24gd2h5IGEgZG9zZSBvZiB2YWNjaW5lIHdhcyBub3QgYWRtaW5pc3RlcmVkLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIE5vSW1tdW5pemF0aW9uUmVhc29uQ29kZVR5cGUgPSB0eXBlb2YgTm9JbW11bml6YXRpb25SZWFzb25Db2Rlc1trZXlvZiB0eXBlb2YgTm9JbW11bml6YXRpb25SZWFzb25Db2Rlc107XHJcbiJdfQ==