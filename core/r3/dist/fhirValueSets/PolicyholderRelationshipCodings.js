// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/policyholder-relationship|3.0.2
/**
 * This value set includes codes for the relationship between the Policyholder and the Beneficiary (insured/covered party/patient)..
 */
export const PolicyholderRelationshipCodings = {
    /**
     * child: The Beneficiary is a child of the Policyholder
     */
    Child: {
        display: "Child",
        code: "child",
        system: "http://hl7.org/fhir/policyholder-relationship",
    },
    /**
     * common: The Beneficiary is a common law spouse or equivalent of the Policyholder
     */
    CommonLawSpouse: {
        display: "Common Law Spouse",
        code: "common",
        system: "http://hl7.org/fhir/policyholder-relationship",
    },
    /**
     * other: The Beneficiary has some other relationship the Policyholder
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/policyholder-relationship",
    },
    /**
     * parent: The Beneficiary is a parent of the Policyholder
     */
    Parent: {
        display: "Parent",
        code: "parent",
        system: "http://hl7.org/fhir/policyholder-relationship",
    },
    /**
     * self: The Beneficiary is the Policyholder
     */
    Self: {
        display: "Self",
        code: "self",
        system: "http://hl7.org/fhir/policyholder-relationship",
    },
    /**
     * spouse: The Beneficiary is a spouse or equivalent of the Policyholder
     */
    Spouse: {
        display: "Spouse",
        code: "spouse",
        system: "http://hl7.org/fhir/policyholder-relationship",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9saWN5aG9sZGVyUmVsYXRpb25zaGlwQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUG9saWN5aG9sZGVyUmVsYXRpb25zaGlwQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw4RUFBOEU7QUFrQzlFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXNDO0lBQ2hGOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIzLmNvcmUgdmVyc2lvbjogMy4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3BvbGljeWhvbGRlci1yZWxhdGlvbnNoaXB8My4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBjb2RlcyBmb3IgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBQb2xpY3lob2xkZXIgYW5kIHRoZSBCZW5lZmljaWFyeSAoaW5zdXJlZC9jb3ZlcmVkIHBhcnR5L3BhdGllbnQpLi5cclxuICovXHJcbmV4cG9ydCB0eXBlIFBvbGljeWhvbGRlclJlbGF0aW9uc2hpcENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY2hpbGQ6IFRoZSBCZW5lZmljaWFyeSBpcyBhIGNoaWxkIG9mIHRoZSBQb2xpY3lob2xkZXJcclxuICAgKi9cclxuICBDaGlsZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb21tb246IFRoZSBCZW5lZmljaWFyeSBpcyBhIGNvbW1vbiBsYXcgc3BvdXNlIG9yIGVxdWl2YWxlbnQgb2YgdGhlIFBvbGljeWhvbGRlclxyXG4gICAqL1xyXG4gIENvbW1vbkxhd1Nwb3VzZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvdGhlcjogVGhlIEJlbmVmaWNpYXJ5IGhhcyBzb21lIG90aGVyIHJlbGF0aW9uc2hpcCB0aGUgUG9saWN5aG9sZGVyXHJcbiAgICovXHJcbiAgT3RoZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGFyZW50OiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBwYXJlbnQgb2YgdGhlIFBvbGljeWhvbGRlclxyXG4gICAqL1xyXG4gIFBhcmVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzZWxmOiBUaGUgQmVuZWZpY2lhcnkgaXMgdGhlIFBvbGljeWhvbGRlclxyXG4gICAqL1xyXG4gIFNlbGY6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3BvdXNlOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBzcG91c2Ugb3IgZXF1aXZhbGVudCBvZiB0aGUgUG9saWN5aG9sZGVyXHJcbiAgICovXHJcbiAgU3BvdXNlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgY29kZXMgZm9yIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgUG9saWN5aG9sZGVyIGFuZCB0aGUgQmVuZWZpY2lhcnkgKGluc3VyZWQvY292ZXJlZCBwYXJ0eS9wYXRpZW50KS4uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUG9saWN5aG9sZGVyUmVsYXRpb25zaGlwQ29kaW5nczpQb2xpY3lob2xkZXJSZWxhdGlvbnNoaXBDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNoaWxkOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBjaGlsZCBvZiB0aGUgUG9saWN5aG9sZGVyXHJcbiAgICovXHJcbiAgQ2hpbGQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2hpbGRcIixcclxuICAgIGNvZGU6IFwiY2hpbGRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3BvbGljeWhvbGRlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbW1vbjogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgY29tbW9uIGxhdyBzcG91c2Ugb3IgZXF1aXZhbGVudCBvZiB0aGUgUG9saWN5aG9sZGVyXHJcbiAgICovXHJcbiAgQ29tbW9uTGF3U3BvdXNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbW1vbiBMYXcgU3BvdXNlXCIsXHJcbiAgICBjb2RlOiBcImNvbW1vblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcG9saWN5aG9sZGVyLXJlbGF0aW9uc2hpcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFRoZSBCZW5lZmljaWFyeSBoYXMgc29tZSBvdGhlciByZWxhdGlvbnNoaXAgdGhlIFBvbGljeWhvbGRlclxyXG4gICAqL1xyXG4gIE90aGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk90aGVyXCIsXHJcbiAgICBjb2RlOiBcIm90aGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wb2xpY3lob2xkZXItcmVsYXRpb25zaGlwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwYXJlbnQ6IFRoZSBCZW5lZmljaWFyeSBpcyBhIHBhcmVudCBvZiB0aGUgUG9saWN5aG9sZGVyXHJcbiAgICovXHJcbiAgUGFyZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIlBhcmVudFwiLFxyXG4gICAgY29kZTogXCJwYXJlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3BvbGljeWhvbGRlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNlbGY6IFRoZSBCZW5lZmljaWFyeSBpcyB0aGUgUG9saWN5aG9sZGVyXHJcbiAgICovXHJcbiAgU2VsZjoge1xyXG4gICAgZGlzcGxheTogXCJTZWxmXCIsXHJcbiAgICBjb2RlOiBcInNlbGZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3BvbGljeWhvbGRlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNwb3VzZTogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgc3BvdXNlIG9yIGVxdWl2YWxlbnQgb2YgdGhlIFBvbGljeWhvbGRlclxyXG4gICAqL1xyXG4gIFNwb3VzZToge1xyXG4gICAgZGlzcGxheTogXCJTcG91c2VcIixcclxuICAgIGNvZGU6IFwic3BvdXNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wb2xpY3lob2xkZXItcmVsYXRpb25zaGlwXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19