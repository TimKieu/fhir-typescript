// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contact-point-system|3.0.2
/**
 * Telecommunications form for contact point
 */
export const ContactPointSystemCodings = {
    /**
     * email: The value is an email address.
     */
    Email: {
        display: "Email",
        code: "email",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * fax: The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
     */
    Fax: {
        display: "Fax",
        code: "fax",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * other: A contact that is not a phone, fax, page or email address and is not expressible as a URL.  E.g. Internal mail address.  This SHOULD NOT be used for contacts that are expressible as a URL (e.g. Skype, Twitter, Facebook, etc.)  Extensions may be used to distinguish "other" contact types.
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * pager: The value is a pager number. These may be local pager numbers that are only usable on a particular pager system.
     */
    Pager: {
        display: "Pager",
        code: "pager",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * phone: The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
     */
    Phone: {
        display: "Phone",
        code: "phone",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * sms: A contact that can be used for sending an sms message (e.g. mobide phones, some landlines)
     */
    SMS: {
        display: "SMS",
        code: "sms",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * url: A contact that is not a phone, fax, pager or email address and is expressed as a URL.  This is intended for various personal contacts including blogs, Skype, Twitter, Facebook, etc. Do not use for email addresses.
     */
    URL: {
        display: "URL",
        code: "url",
        system: "http://hl7.org/fhir/contact-point-system",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdFBvaW50U3lzdGVtQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udGFjdFBvaW50U3lzdGVtQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFzQ3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250YWN0LXBvaW50LXN5c3RlbXwzLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRlbGVjb21tdW5pY2F0aW9ucyBmb3JtIGZvciBjb250YWN0IHBvaW50XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250YWN0UG9pbnRTeXN0ZW1Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGVtYWlsOiBUaGUgdmFsdWUgaXMgYW4gZW1haWwgYWRkcmVzcy5cclxuICAgKi9cclxuICBFbWFpbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBmYXg6IFRoZSB2YWx1ZSBpcyBhIGZheCBtYWNoaW5lLiBVc2Ugb2YgZnVsbCBpbnRlcm5hdGlvbmFsIG51bWJlcnMgc3RhcnRpbmcgd2l0aCArIGlzIHJlY29tbWVuZGVkIHRvIGVuYWJsZSBhdXRvbWF0aWMgZGlhbGluZyBzdXBwb3J0IGJ1dCBub3QgcmVxdWlyZWQuXHJcbiAgICovXHJcbiAgRmF4OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBBIGNvbnRhY3QgdGhhdCBpcyBub3QgYSBwaG9uZSwgZmF4LCBwYWdlIG9yIGVtYWlsIGFkZHJlc3MgYW5kIGlzIG5vdCBleHByZXNzaWJsZSBhcyBhIFVSTC4gIEUuZy4gSW50ZXJuYWwgbWFpbCBhZGRyZXNzLiAgVGhpcyBTSE9VTEQgTk9UIGJlIHVzZWQgZm9yIGNvbnRhY3RzIHRoYXQgYXJlIGV4cHJlc3NpYmxlIGFzIGEgVVJMIChlLmcuIFNreXBlLCBUd2l0dGVyLCBGYWNlYm9vaywgZXRjLikgIEV4dGVuc2lvbnMgbWF5IGJlIHVzZWQgdG8gZGlzdGluZ3Vpc2ggXCJvdGhlclwiIGNvbnRhY3QgdHlwZXMuXHJcbiAgICovXHJcbiAgT3RoZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGFnZXI6IFRoZSB2YWx1ZSBpcyBhIHBhZ2VyIG51bWJlci4gVGhlc2UgbWF5IGJlIGxvY2FsIHBhZ2VyIG51bWJlcnMgdGhhdCBhcmUgb25seSB1c2FibGUgb24gYSBwYXJ0aWN1bGFyIHBhZ2VyIHN5c3RlbS5cclxuICAgKi9cclxuICBQYWdlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwaG9uZTogVGhlIHZhbHVlIGlzIGEgdGVsZXBob25lIG51bWJlciB1c2VkIGZvciB2b2ljZSBjYWxscy4gVXNlIG9mIGZ1bGwgaW50ZXJuYXRpb25hbCBudW1iZXJzIHN0YXJ0aW5nIHdpdGggKyBpcyByZWNvbW1lbmRlZCB0byBlbmFibGUgYXV0b21hdGljIGRpYWxpbmcgc3VwcG9ydCBidXQgbm90IHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIFBob25lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNtczogQSBjb250YWN0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHNlbmRpbmcgYW4gc21zIG1lc3NhZ2UgKGUuZy4gbW9iaWRlIHBob25lcywgc29tZSBsYW5kbGluZXMpXHJcbiAgICovXHJcbiAgU01TOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVybDogQSBjb250YWN0IHRoYXQgaXMgbm90IGEgcGhvbmUsIGZheCwgcGFnZXIgb3IgZW1haWwgYWRkcmVzcyBhbmQgaXMgZXhwcmVzc2VkIGFzIGEgVVJMLiAgVGhpcyBpcyBpbnRlbmRlZCBmb3IgdmFyaW91cyBwZXJzb25hbCBjb250YWN0cyBpbmNsdWRpbmcgYmxvZ3MsIFNreXBlLCBUd2l0dGVyLCBGYWNlYm9vaywgZXRjLiBEbyBub3QgdXNlIGZvciBlbWFpbCBhZGRyZXNzZXMuXHJcbiAgICovXHJcbiAgVVJMOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGVsZWNvbW11bmljYXRpb25zIGZvcm0gZm9yIGNvbnRhY3QgcG9pbnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBDb250YWN0UG9pbnRTeXN0ZW1Db2RpbmdzOkNvbnRhY3RQb2ludFN5c3RlbUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZW1haWw6IFRoZSB2YWx1ZSBpcyBhbiBlbWFpbCBhZGRyZXNzLlxyXG4gICAqL1xyXG4gIEVtYWlsOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVtYWlsXCIsXHJcbiAgICBjb2RlOiBcImVtYWlsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb250YWN0LXBvaW50LXN5c3RlbVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZmF4OiBUaGUgdmFsdWUgaXMgYSBmYXggbWFjaGluZS4gVXNlIG9mIGZ1bGwgaW50ZXJuYXRpb25hbCBudW1iZXJzIHN0YXJ0aW5nIHdpdGggKyBpcyByZWNvbW1lbmRlZCB0byBlbmFibGUgYXV0b21hdGljIGRpYWxpbmcgc3VwcG9ydCBidXQgbm90IHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIEZheDoge1xyXG4gICAgZGlzcGxheTogXCJGYXhcIixcclxuICAgIGNvZGU6IFwiZmF4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb250YWN0LXBvaW50LXN5c3RlbVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IEEgY29udGFjdCB0aGF0IGlzIG5vdCBhIHBob25lLCBmYXgsIHBhZ2Ugb3IgZW1haWwgYWRkcmVzcyBhbmQgaXMgbm90IGV4cHJlc3NpYmxlIGFzIGEgVVJMLiAgRS5nLiBJbnRlcm5hbCBtYWlsIGFkZHJlc3MuICBUaGlzIFNIT1VMRCBOT1QgYmUgdXNlZCBmb3IgY29udGFjdHMgdGhhdCBhcmUgZXhwcmVzc2libGUgYXMgYSBVUkwgKGUuZy4gU2t5cGUsIFR3aXR0ZXIsIEZhY2Vib29rLCBldGMuKSAgRXh0ZW5zaW9ucyBtYXkgYmUgdXNlZCB0byBkaXN0aW5ndWlzaCBcIm90aGVyXCIgY29udGFjdCB0eXBlcy5cclxuICAgKi9cclxuICBPdGhlcjoge1xyXG4gICAgZGlzcGxheTogXCJPdGhlclwiLFxyXG4gICAgY29kZTogXCJvdGhlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29udGFjdC1wb2ludC1zeXN0ZW1cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBhZ2VyOiBUaGUgdmFsdWUgaXMgYSBwYWdlciBudW1iZXIuIFRoZXNlIG1heSBiZSBsb2NhbCBwYWdlciBudW1iZXJzIHRoYXQgYXJlIG9ubHkgdXNhYmxlIG9uIGEgcGFydGljdWxhciBwYWdlciBzeXN0ZW0uXHJcbiAgICovXHJcbiAgUGFnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUGFnZXJcIixcclxuICAgIGNvZGU6IFwicGFnZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnRhY3QtcG9pbnQtc3lzdGVtXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwaG9uZTogVGhlIHZhbHVlIGlzIGEgdGVsZXBob25lIG51bWJlciB1c2VkIGZvciB2b2ljZSBjYWxscy4gVXNlIG9mIGZ1bGwgaW50ZXJuYXRpb25hbCBudW1iZXJzIHN0YXJ0aW5nIHdpdGggKyBpcyByZWNvbW1lbmRlZCB0byBlbmFibGUgYXV0b21hdGljIGRpYWxpbmcgc3VwcG9ydCBidXQgbm90IHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIFBob25lOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBob25lXCIsXHJcbiAgICBjb2RlOiBcInBob25lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb250YWN0LXBvaW50LXN5c3RlbVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc21zOiBBIGNvbnRhY3QgdGhhdCBjYW4gYmUgdXNlZCBmb3Igc2VuZGluZyBhbiBzbXMgbWVzc2FnZSAoZS5nLiBtb2JpZGUgcGhvbmVzLCBzb21lIGxhbmRsaW5lcylcclxuICAgKi9cclxuICBTTVM6IHtcclxuICAgIGRpc3BsYXk6IFwiU01TXCIsXHJcbiAgICBjb2RlOiBcInNtc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29udGFjdC1wb2ludC1zeXN0ZW1cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHVybDogQSBjb250YWN0IHRoYXQgaXMgbm90IGEgcGhvbmUsIGZheCwgcGFnZXIgb3IgZW1haWwgYWRkcmVzcyBhbmQgaXMgZXhwcmVzc2VkIGFzIGEgVVJMLiAgVGhpcyBpcyBpbnRlbmRlZCBmb3IgdmFyaW91cyBwZXJzb25hbCBjb250YWN0cyBpbmNsdWRpbmcgYmxvZ3MsIFNreXBlLCBUd2l0dGVyLCBGYWNlYm9vaywgZXRjLiBEbyBub3QgdXNlIGZvciBlbWFpbCBhZGRyZXNzZXMuXHJcbiAgICovXHJcbiAgVVJMOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVSTFwiLFxyXG4gICAgY29kZTogXCJ1cmxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnRhY3QtcG9pbnQtc3lzdGVtXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19