// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
export {};
//# sourceMappingURL=data:application/json;base64,