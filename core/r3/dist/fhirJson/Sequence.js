// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Sequence
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Sequence.js","sourceRoot":"./src/","sources":["fhirJson/Sequence.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,0BAA0B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r3.core version: 3.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Sequence\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.\r\n */\r\nexport interface SequenceReferenceSeq extends fhir.BackboneElement { \r\n  /**\r\n   * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).\r\n   */\r\n  chromosome?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.\r\n   */\r\n  genomeBuild?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.referenceSeq.genomeBuild\r\n   */\r\n  _genomeBuild?:fhir.FhirElement;\r\n  /**\r\n   * Reference identifier of reference sequence submitted to NCBI. It must match the type in the Sequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.\r\n   */\r\n  referenceSeqId?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A Pointer to another Sequence entity as reference sequence.\r\n   */\r\n  referenceSeqPointer?: fhir.Reference|undefined;\r\n  /**\r\n   * A string like \"ACGT\".\r\n   */\r\n  referenceSeqString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.referenceSeq.referenceSeqString\r\n   */\r\n  _referenceSeqString?:fhir.FhirElement;\r\n  /**\r\n   * Directionality of DNA sequence. Available values are \"1\" for the plus strand (5' to 3')/Watson/Sense/positive  and \"-1\" for the minus strand(3' to 5')/Crick/Antisense/negative.\r\n   */\r\n  strand?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.referenceSeq.strand\r\n   */\r\n  _strand?:fhir.FhirElement;\r\n  /**\r\n   * Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.\r\n   */\r\n  windowStart: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.referenceSeq.windowStart\r\n   */\r\n  _windowStart?:fhir.FhirElement;\r\n  /**\r\n   * End position of the window on the reference sequence. If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.\r\n   */\r\n  windowEnd: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.referenceSeq.windowEnd\r\n   */\r\n  _windowEnd?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.\r\n */\r\nexport interface SequenceVariant extends fhir.BackboneElement { \r\n  /**\r\n   * Start position of the variant on the  reference sequence.If the coordinate system is either 0-based or 1-based, then start position is inclusive.\r\n   */\r\n  start?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.variant.start\r\n   */\r\n  _start?:fhir.FhirElement;\r\n  /**\r\n   * End position of the variant on the reference sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.\r\n   */\r\n  end?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.variant.end\r\n   */\r\n  _end?:fhir.FhirElement;\r\n  /**\r\n   * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.\r\n   */\r\n  observedAllele?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.variant.observedAllele\r\n   */\r\n  _observedAllele?:fhir.FhirElement;\r\n  /**\r\n   * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.\r\n   */\r\n  referenceAllele?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.variant.referenceAllele\r\n   */\r\n  _referenceAllele?:fhir.FhirElement;\r\n  /**\r\n   * Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).\r\n   */\r\n  cigar?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.variant.cigar\r\n   */\r\n  _cigar?:fhir.FhirElement;\r\n  /**\r\n   * A pointer to an Observation containing variant information.\r\n   */\r\n  variantPointer?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).\r\n */\r\nexport interface SequenceQuality extends fhir.BackboneElement { \r\n  /**\r\n   * INDEL / SNP / Undefined variant.\r\n   */\r\n  type: 'indel'|'snp'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Gold standard sequence used for comparing against.\r\n   */\r\n  standardSequence?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.\r\n   */\r\n  start?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.start\r\n   */\r\n  _start?:fhir.FhirElement;\r\n  /**\r\n   * End position of the sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.\r\n   */\r\n  end?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.end\r\n   */\r\n  _end?:fhir.FhirElement;\r\n  /**\r\n   * The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).\r\n   */\r\n  score?: fhir.Quantity|undefined;\r\n  /**\r\n   * Which method is used to get sequence quality.\r\n   */\r\n  method?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.\r\n   */\r\n  truthTP?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.truthTP\r\n   */\r\n  _truthTP?:fhir.FhirElement;\r\n  /**\r\n   * True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.\r\n   */\r\n  queryTP?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.queryTP\r\n   */\r\n  _queryTP?:fhir.FhirElement;\r\n  /**\r\n   * False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.\r\n   */\r\n  truthFN?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.truthFN\r\n   */\r\n  _truthFN?:fhir.FhirElement;\r\n  /**\r\n   * False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.\r\n   */\r\n  queryFP?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.queryFP\r\n   */\r\n  _queryFP?:fhir.FhirElement;\r\n  /**\r\n   * The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).\r\n   */\r\n  gtFP?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.gtFP\r\n   */\r\n  _gtFP?:fhir.FhirElement;\r\n  /**\r\n   * QUERY.TP / (QUERY.TP + QUERY.FP).\r\n   */\r\n  precision?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.precision\r\n   */\r\n  _precision?:fhir.FhirElement;\r\n  /**\r\n   * TRUTH.TP / (TRUTH.TP + TRUTH.FN).\r\n   */\r\n  recall?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.recall\r\n   */\r\n  _recall?:fhir.FhirElement;\r\n  /**\r\n   * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).\r\n   */\r\n  fScore?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.quality.fScore\r\n   */\r\n  _fScore?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.\r\n */\r\nexport interface SequenceRepository extends fhir.BackboneElement { \r\n  /**\r\n   * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.\r\n   */\r\n  type: 'directlink'|'login'|'oauth'|'openapi'|'other'|null;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.repository.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * URI of an external repository which contains further details about the genetics data.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.repository.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * URI of an external repository which contains further details about the genetics data.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.repository.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.\r\n   */\r\n  datasetId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.repository.datasetId\r\n   */\r\n  _datasetId?:fhir.FhirElement;\r\n  /**\r\n   * Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.\r\n   */\r\n  variantsetId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.repository.variantsetId\r\n   */\r\n  _variantsetId?:fhir.FhirElement;\r\n  /**\r\n   * Id of the read in this external repository.\r\n   */\r\n  readsetId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.repository.readsetId\r\n   */\r\n  _readsetId?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Raw data describing a biological sequence.\r\n */\r\nexport interface Sequence extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Sequence\"|null;\r\n  /**\r\n   * A unique identifier for this particular sequence instance. This is a FHIR-defined id.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * Amino Acid Sequence/ DNA Sequence / RNA Sequence.\r\n   */\r\n  type?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).\r\n   */\r\n  coordinateSystem: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.coordinateSystem\r\n   */\r\n  _coordinateSystem?:fhir.FhirElement;\r\n  /**\r\n   * The patient whose sequencing results are described by this resource.\r\n   */\r\n  patient?: fhir.Reference|undefined;\r\n  /**\r\n   * Specimen used for sequencing.\r\n   */\r\n  specimen?: fhir.Reference|undefined;\r\n  /**\r\n   * The method for sequencing, for example, chip information.\r\n   */\r\n  device?: fhir.Reference|undefined;\r\n  /**\r\n   * The organization or lab that should be responsible for this result.\r\n   */\r\n  performer?: fhir.Reference|undefined;\r\n  /**\r\n   * The number of copies of the seqeunce of interest. (RNASeq).\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.\r\n   */\r\n  referenceSeq?: fhir.SequenceReferenceSeq|undefined;\r\n  /**\r\n   * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.\r\n   */\r\n  variant?: (fhir.SequenceVariant|null)[]|undefined;\r\n  /**\r\n   * Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall starts from referenceSeq.windowStart and end by referenceSeq.windowEnd.\r\n   */\r\n  observedSeq?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.observedSeq\r\n   */\r\n  _observedSeq?:fhir.FhirElement;\r\n  /**\r\n   * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).\r\n   */\r\n  quality?: (fhir.SequenceQuality|null)[]|undefined;\r\n  /**\r\n   * Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.\r\n   */\r\n  readCoverage?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Sequence.readCoverage\r\n   */\r\n  _readCoverage?:fhir.FhirElement;\r\n  /**\r\n   * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.\r\n   */\r\n  repository?: (fhir.SequenceRepository|null)[]|undefined;\r\n  /**\r\n   * Pointer to next atomic sequence which at most contains one variant.\r\n   */\r\n  pointer?: (fhir.Reference|null)[]|undefined;\r\n}\r\n"]}