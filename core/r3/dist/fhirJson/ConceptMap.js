// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ConceptMap
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ConceptMap.js","sourceRoot":"./src/","sources":["fhirJson/ConceptMap.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,4BAA4B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r3.core version: 3.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ConceptMap\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.\r\n */\r\nexport interface ConceptMapGroupElementTargetDependsOn extends fhir.BackboneElement { \r\n  /**\r\n   * A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somwhere that is labeled to correspond with a code system property.\r\n   */\r\n  property: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.dependsOn.property\r\n   */\r\n  _property?:fhir.FhirElement;\r\n  /**\r\n   * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).\r\n   */\r\n  system?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.dependsOn.system\r\n   */\r\n  _system?:fhir.FhirElement;\r\n  /**\r\n   * Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.dependsOn.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The display is ignored when processing the map.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.dependsOn.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.\r\n */\r\nexport interface ConceptMapGroupElementTarget extends fhir.BackboneElement { \r\n  /**\r\n   * Identity (code or path) or the element/item that the map refers to.\r\n   */\r\n  code?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The display is ignored when processing the map.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * This element is labeled as a modifier because it may indicate that a target does not apply.\r\n   */\r\n  equivalence?: 'disjoint'|'equal'|'equivalent'|'inexact'|'narrower'|'relatedto'|'specializes'|'subsumes'|'unmatched'|'wider'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.equivalence\r\n   */\r\n  _equivalence?:fhir.FhirElement;\r\n  /**\r\n   * A description of status/issues in mapping that conveys additional information not represented in  the structured data.\r\n   */\r\n  comment?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.target.comment\r\n   */\r\n  _comment?:fhir.FhirElement;\r\n  /**\r\n   * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.\r\n   */\r\n  dependsOn?: (fhir.ConceptMapGroupElementTargetDependsOn|null)[]|undefined;\r\n  /**\r\n   * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.\r\n   */\r\n  product?: (fhir.ConceptMapGroupElementTargetDependsOn|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.\r\n */\r\nexport interface ConceptMapGroupElement extends fhir.BackboneElement { \r\n  /**\r\n   * Identity (code or path) or the element/item being mapped.\r\n   */\r\n  code?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The display is ignored when processing the map.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.element.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.\r\n   */\r\n  target?: (fhir.ConceptMapGroupElementTarget|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * This only applies if the source code is in the system defined for the group.\r\n */\r\nexport interface ConceptMapGroupUnmapped extends fhir.BackboneElement { \r\n  /**\r\n   * Defines which action to take if there is no match in the group. One of 3 actions is possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).\r\n   */\r\n  mode: 'fixed'|'other-map'|'provided'|null;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.unmapped.mode\r\n   */\r\n  _mode?:fhir.FhirElement;\r\n  /**\r\n   * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.\r\n   */\r\n  code?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.unmapped.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The display is ignored when processing the map.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.unmapped.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * The canonical URL of the map to use if this map contains no mapping.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.unmapped.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A group of mappings that all have the same source and target system.\r\n */\r\nexport interface ConceptMapGroup extends fhir.BackboneElement { \r\n  /**\r\n   * An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).\r\n   */\r\n  source?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.source\r\n   */\r\n  _source?:fhir.FhirElement;\r\n  /**\r\n   * The specification of a particular code system version may be required for code systems which lack concept permanence.\r\n   */\r\n  sourceVersion?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.sourceVersion\r\n   */\r\n  _sourceVersion?:fhir.FhirElement;\r\n  /**\r\n   * Target may be omitted if all the targget element equivalence values are 'unmatched'.\r\n   */\r\n  target?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.target\r\n   */\r\n  _target?:fhir.FhirElement;\r\n  /**\r\n   * The specification of a particular code system version may be required for code systems which lack concept permanence.\r\n   */\r\n  targetVersion?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.group.targetVersion\r\n   */\r\n  _targetVersion?:fhir.FhirElement;\r\n  /**\r\n   * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.\r\n   */\r\n  element: (fhir.ConceptMapGroupElement|null)[]|null;\r\n  /**\r\n   * This only applies if the source code is in the system defined for the group.\r\n   */\r\n  unmapped?: fhir.ConceptMapGroupUnmapped|undefined;\r\n}\r\n\r\n/**\r\n * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.\r\n */\r\nexport interface ConceptMap extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ConceptMap\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this concept map outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * There may be different concept map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the concept map with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of concept maps that are appropriate for use vs. not.  \r\n   * This is labeled as \"Is Modifier\" because applications should not use a retired concept map without due consideration.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of concept map that are appropriate for use vs. not. This is labeled as \"Is Modifier\" because applications should not use an experimental concept map in production.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the concept map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization, but may be an individual. The publisher (or steward) of the concept map is the organization or individual primarily responsible for the maintenance and upkeep of the concept map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the concept map. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the concept map to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the concept map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this concept map.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * null Frequently, the copyright differs between the concept map, and codes that are included. The copyright statement should clearly differentiate between these when required.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.\r\n   */\r\n  sourceUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.source[x]\r\n   */\r\n  _sourceUri?:fhir.FhirElement;\r\n  /**\r\n   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.\r\n   */\r\n  sourceReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.\r\n   */\r\n  targetUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ConceptMap.target[x]\r\n   */\r\n  _targetUri?:fhir.FhirElement;\r\n  /**\r\n   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.\r\n   */\r\n  targetReference?: fhir.Reference|undefined;\r\n  /**\r\n   * A group of mappings that all have the same source and target system.\r\n   */\r\n  group?: (fhir.ConceptMapGroup|null)[]|undefined;\r\n}\r\n"]}