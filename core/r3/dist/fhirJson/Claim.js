// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Claim.js","sourceRoot":"./src/","sources":["fhirJson/Claim.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,uBAAuB","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r3.core version: 3.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Claim\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Other claims which are related to this claim such as prior claim versions or for related services.\r\n */\r\nexport interface ClaimRelated extends fhir.BackboneElement { \r\n  /**\r\n   * Do we need a relationship code?\r\n   */\r\n  claim?: fhir.Reference|undefined;\r\n  /**\r\n   * For example prior or umbrella.\r\n   */\r\n  relationship?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .\r\n   */\r\n  reference?: fhir.Identifier|undefined;\r\n}\r\n\r\n/**\r\n * The party to be reimbursed for the services.\r\n */\r\nexport interface ClaimPayee extends fhir.BackboneElement { \r\n  /**\r\n   * Type of Party to be reimbursed: Subscriber, provider, other.\r\n   */\r\n  type: fhir.CodeableConcept|null;\r\n  /**\r\n   * organization | patient | practitioner | relatedperson.\r\n   */\r\n  resourceType?: fhir.Coding|undefined;\r\n  /**\r\n   * Party to be reimbursed: Subscriber, provider, other.\r\n   */\r\n  party?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.\r\n */\r\nexport interface ClaimCareTeam extends fhir.BackboneElement { \r\n  /**\r\n   * Sequence of the careTeam which serves to order and provide a link.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.careTeam.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * Member of the team who provided the overall service.\r\n   */\r\n  provider: fhir.Reference|null;\r\n  /**\r\n   * The party who is billing and responsible for the claimed good or service rendered to the patient.\r\n   */\r\n  responsible?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.careTeam.responsible\r\n   */\r\n  _responsible?:fhir.FhirElement;\r\n  /**\r\n   * The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.\r\n   */\r\n  role?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The qualification which is applicable for this service.\r\n   */\r\n  qualification?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.\r\n */\r\nexport interface ClaimInformation extends fhir.BackboneElement { \r\n  /**\r\n   * Sequence of the information element which serves to provide a link.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.information.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * This may contain the local bill type codes such as the US UB-04 bill type code.\r\n   */\r\n  category: fhir.CodeableConcept|null;\r\n  /**\r\n   * This may contain the local bill type codes such as the US UB-04 bill type code.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The date when or period to which this information refers.\r\n   */\r\n  timingDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.information.timing[x]\r\n   */\r\n  _timingDate?:fhir.FhirElement;\r\n  /**\r\n   * The date when or period to which this information refers.\r\n   */\r\n  timingPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.information.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.\r\n   */\r\n  valueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.\r\n   */\r\n  valueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.\r\n   */\r\n  valueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content.\r\n   */\r\n  reason?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * List of patient diagnosis for which care is sought.\r\n */\r\nexport interface ClaimDiagnosis extends fhir.BackboneElement { \r\n  /**\r\n   * Sequence of diagnosis which serves to provide a link.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.diagnosis.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The diagnosis.\r\n   */\r\n  diagnosisCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The diagnosis.\r\n   */\r\n  diagnosisReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.\r\n   */\r\n  type?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * The package billing code, for example DRG, based on the assigned grouping code system.\r\n   */\r\n  packageCode?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Ordered list of patient procedures performed to support the adjudication.\r\n */\r\nexport interface ClaimProcedure extends fhir.BackboneElement { \r\n  /**\r\n   * Sequence of procedures which serves to order and provide a link.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.procedure.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * SB DateTime??\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.procedure.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * The procedure code.\r\n   */\r\n  procedureCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The procedure code.\r\n   */\r\n  procedureReference?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Financial instrument by which payment information for health care.\r\n */\r\nexport interface ClaimInsurance extends fhir.BackboneElement { \r\n  /**\r\n   * Sequence of coverage which serves to provide a link and convey coordination of benefit order.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * A flag to indicate that this Coverage is the focus for adjudication. The Coverage against which the claim is to be adjudicated.\r\n   */\r\n  focal: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.focal\r\n   */\r\n  _focal?:fhir.FhirElement;\r\n  /**\r\n   * Reference to the program or plan identification, underwriter or payor.\r\n   */\r\n  coverage: fhir.Reference|null;\r\n  /**\r\n   * The contract number of a business agreement which describes the terms and conditions.\r\n   */\r\n  businessArrangement?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.businessArrangement\r\n   */\r\n  _businessArrangement?:fhir.FhirElement;\r\n  /**\r\n   * A list of references from the Insurer to which these services pertain.\r\n   */\r\n  preAuthRef?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.preAuthRef\r\n   */\r\n  _preAuthRef?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The Coverages adjudication details.\r\n   */\r\n  claimResponse?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * An accident which resulted in the need for healthcare services.\r\n */\r\nexport interface ClaimAccident extends fhir.BackboneElement { \r\n  /**\r\n   * Date of an accident which these services are addressing.\r\n   */\r\n  date: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.accident.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Type of accident: work, auto, etc.\r\n   */\r\n  type?: 'MVA'|'SCHOOL'|'SPT'|'WPA'|undefined;\r\n  /**\r\n   * Accident Place.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Accident Place.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Third tier of goods and services.\r\n */\r\nexport interface ClaimItemDetailSubDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of reveneu or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Health Care Service Type Codes  to identify the classification of service or benefits.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).\r\n   */\r\n  service?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.\r\n   */\r\n  programCode?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * The fee for an addittional service or product or charge.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * List of Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: (fhir.Reference|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Second tier of goods and services.\r\n */\r\nexport interface ClaimItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of reveneu or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Health Care Service Type Codes  to identify the classification of service or benefits.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.\r\n   */\r\n  service?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.\r\n   */\r\n  programCode?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * List of Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: (fhir.Reference|null)[]|undefined;\r\n  /**\r\n   * Third tier of goods and services.\r\n   */\r\n  subDetail?: (fhir.ClaimItemDetailSubDetail|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * First tier of goods and services.\r\n */\r\nexport interface ClaimItem extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * CareTeam applicable for this service or product line.\r\n   */\r\n  careTeamLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.careTeamLinkId\r\n   */\r\n  _careTeamLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Diagnosis applicable for this service or product line.\r\n   */\r\n  diagnosisLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.diagnosisLinkId\r\n   */\r\n  _diagnosisLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Procedures applicable for this service or product line.\r\n   */\r\n  procedureLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.procedureLinkId\r\n   */\r\n  _procedureLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Exceptions, special conditions and supporting information pplicable for this service or product line.\r\n   */\r\n  informationLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.informationLinkId\r\n   */\r\n  _informationLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The type of reveneu or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Health Care Service Type Codes  to identify the classification of service or benefits.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,RXNorm,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.\r\n   */\r\n  service?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * For programs which require reason codes for the inclusion or covering of this billed item under the program or sub-program.\r\n   */\r\n  programCode?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * The date or dates when the enclosed suite of services were performed or completed.\r\n   */\r\n  servicedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.serviced[x]\r\n   */\r\n  _servicedDate?:fhir.FhirElement;\r\n  /**\r\n   * The date or dates when the enclosed suite of services were performed or completed.\r\n   */\r\n  servicedPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Where the service was provided.\r\n   */\r\n  locationCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Where the service was provided.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Where the service was provided.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * List of Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: (fhir.Reference|null)[]|undefined;\r\n  /**\r\n   * Physical service site on the patient (limb, tooth, etc).\r\n   */\r\n  bodySite?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A region or surface of the site, eg. limb region or tooth surface(s).\r\n   */\r\n  subSite?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * A billed item may include goods or services provided in multiple encounters.\r\n   */\r\n  encounter?: (fhir.Reference|null)[]|undefined;\r\n  /**\r\n   * Second tier of goods and services.\r\n   */\r\n  detail?: (fhir.ClaimItemDetail|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.\r\n */\r\nexport interface Claim extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Claim\"|null;\r\n  /**\r\n   * The business identifier for the instance: claim number, pre-determination or pre-authorization number.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the claim as not currently valid.\r\n   */\r\n  status?: 'active'|'cancelled'|'draft'|'entered-in-error'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Affects which fields and value sets are used.\r\n   */\r\n  type?: 'institutional'|'oral'|'pharmacy'|'professional'|'vision'|undefined;\r\n  /**\r\n   * This may contain the local bill type codes such as the US UB-04 bill type code.\r\n   */\r\n  subType?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).\r\n   */\r\n  use?: 'complete'|'exploratory'|'other'|'proposed'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.use\r\n   */\r\n  _use?:fhir.FhirElement;\r\n  /**\r\n   * Patient Resource.\r\n   */\r\n  patient?: fhir.Reference|undefined;\r\n  /**\r\n   * The billable period for which charges are being submitted.\r\n   */\r\n  billablePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * The date when the enclosed suite of services were performed or completed.\r\n   */\r\n  created?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.created\r\n   */\r\n  _created?:fhir.FhirElement;\r\n  /**\r\n   * Person who created the invoice/claim/pre-determination or pre-authorization.\r\n   */\r\n  enterer?: fhir.Reference|undefined;\r\n  /**\r\n   * The Insurer who is target of the request.\r\n   */\r\n  insurer?: fhir.Reference|undefined;\r\n  /**\r\n   * The provider which is responsible for the bill, claim pre-determination, pre-authorization.\r\n   */\r\n  provider?: fhir.Reference|undefined;\r\n  /**\r\n   * The organization which is responsible for the bill, claim pre-determination, pre-authorization.\r\n   */\r\n  organization?: fhir.Reference|undefined;\r\n  /**\r\n   * Immediate (STAT), best effort (NORMAL), deferred (DEFER).\r\n   */\r\n  priority?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.\r\n   */\r\n  fundsReserve?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Other claims which are related to this claim such as prior claim versions or for related services.\r\n   */\r\n  related?: (fhir.ClaimRelated|null)[]|undefined;\r\n  /**\r\n   * Should we create a group to hold multiple prescriptions and add a sequence number and on the line items a link to the sequence.\r\n   */\r\n  prescription?: fhir.Reference|undefined;\r\n  /**\r\n   * as above.\r\n   */\r\n  originalPrescription?: fhir.Reference|undefined;\r\n  /**\r\n   * The party to be reimbursed for the services.\r\n   */\r\n  payee?: fhir.ClaimPayee|undefined;\r\n  /**\r\n   * The referral resource which lists the date, practitioner, reason and other supporting information.\r\n   */\r\n  referral?: fhir.Reference|undefined;\r\n  /**\r\n   * Facility where the services were provided.\r\n   */\r\n  facility?: fhir.Reference|undefined;\r\n  /**\r\n   * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.\r\n   */\r\n  careTeam?: (fhir.ClaimCareTeam|null)[]|undefined;\r\n  /**\r\n   * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.\r\n   */\r\n  information?: (fhir.ClaimInformation|null)[]|undefined;\r\n  /**\r\n   * List of patient diagnosis for which care is sought.\r\n   */\r\n  diagnosis?: (fhir.ClaimDiagnosis|null)[]|undefined;\r\n  /**\r\n   * Ordered list of patient procedures performed to support the adjudication.\r\n   */\r\n  procedure?: (fhir.ClaimProcedure|null)[]|undefined;\r\n  /**\r\n   * Financial instrument by which payment information for health care.\r\n   */\r\n  insurance?: (fhir.ClaimInsurance|null)[]|undefined;\r\n  /**\r\n   * An accident which resulted in the need for healthcare services.\r\n   */\r\n  accident?: fhir.ClaimAccident|undefined;\r\n  /**\r\n   * The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).\r\n   */\r\n  employmentImpacted?: fhir.Period|undefined;\r\n  /**\r\n   * The start and optional end dates of when the patient was confined to a treatment center.\r\n   */\r\n  hospitalization?: fhir.Period|undefined;\r\n  /**\r\n   * First tier of goods and services.\r\n   */\r\n  item?: (fhir.ClaimItem|null)[]|undefined;\r\n  /**\r\n   * The total value of the claim.\r\n   */\r\n  total?: fhir.Money|undefined;\r\n}\r\n"]}