// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: CodeSystem
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"CodeSystem.js","sourceRoot":"./src/","sources":["fhirJson/CodeSystem.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,4BAA4B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r3.core version: 3.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: CodeSystem\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * A filter that can be used in a value set compose statement when selecting concepts using a filter.\r\n */\r\nexport interface CodeSystemFilter extends fhir.BackboneElement { \r\n  /**\r\n   * The code that identifies this filter when it is used in the instance.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.filter.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * A description of how or why the filter is used.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.filter.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * A list of operators that can be used with the filter.\r\n   */\r\n  operator: (('='|'descendent-of'|'exists'|'generalizes'|'in'|'is-a'|'is-not-a'|'not-in'|'regex')|null)[]|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.filter.operator\r\n   */\r\n  _operator?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A description of what the value for the filter should be.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.filter.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A property defines an additional slot through which additional information can be provided about a concept.\r\n */\r\nexport interface CodeSystemProperty extends fhir.BackboneElement { \r\n  /**\r\n   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.property.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.\r\n   */\r\n  uri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.property.uri\r\n   */\r\n  _uri?:fhir.FhirElement;\r\n  /**\r\n   * A description of the property- why it is defined, and how its value might be used.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.property.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * The type of the property value. Properties of type \"code\" contain a code defined by the code system (e.g. a reference to anotherr defined concept).\r\n   */\r\n  type: 'boolean'|'code'|'Coding'|'dateTime'|'integer'|'string'|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.property.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.\r\n */\r\nexport interface CodeSystemConceptDesignation extends fhir.BackboneElement { \r\n  /**\r\n   * In the absence of a language, the resource language applies.\r\n   */\r\n  language?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.designation.language\r\n   */\r\n  _language?:fhir.FhirElement;\r\n  /**\r\n   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.\r\n   */\r\n  use?: fhir.Coding|undefined;\r\n  /**\r\n   * The text value for this designation.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.designation.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A property value for this concept.\r\n */\r\nexport interface CodeSystemConceptProperty extends fhir.BackboneElement { \r\n  /**\r\n   * A code that is a reference to CodeSystem.property.code.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.property.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The value of this property.\r\n   */\r\n  valueCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.property.value[x]\r\n   */\r\n  _valueCode?:fhir.FhirElement;\r\n  /**\r\n   * The value of this property.\r\n   */\r\n  valueCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * The value of this property.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.property.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * The value of this property.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.property.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * The value of this property.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.property.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * The value of this property.\r\n   */\r\n  valueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.property.value[x]\r\n   */\r\n  _valueDateTime?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * If this is empty, it means that the code system resource does not represent the content of the code system.\r\n */\r\nexport interface CodeSystemConcept extends fhir.BackboneElement { \r\n  /**\r\n   * A code - a text symbol - that uniquely identifies the concept within the code system.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * A human readable string that is the recommended default way to present this concept to a user.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.\r\n   */\r\n  definition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.concept.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.\r\n   */\r\n  designation?: (fhir.CodeSystemConceptDesignation|null)[]|undefined;\r\n  /**\r\n   * A property value for this concept.\r\n   */\r\n  property?: (fhir.CodeSystemConceptProperty|null)[]|undefined;\r\n  /**\r\n   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.\r\n   */\r\n  concept?: (fhir.CodeSystemConcept|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A code system resource specifies a set of codes drawn from one or more code systems.\r\n */\r\nexport interface CodeSystem extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"CodeSystem\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this code system outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the code system with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of code systems that are appropriate for use vs. not.  \r\n   * This is labeled as \"Is Modifier\" because applications should not use a retired code system without due consideration.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of code system that are appropriate for use vs. not. This is labeled as \"Is Modifier\" because applications should not use an experimental code system in production.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization, but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the code system Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.\r\n   */\r\n  caseSensitive?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.caseSensitive\r\n   */\r\n  _caseSensitive?:fhir.FhirElement;\r\n  /**\r\n   * The definition of the value set SHALL include all codes from this code system, and it SHALL be immutable.\r\n   */\r\n  valueSet?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.valueSet\r\n   */\r\n  _valueSet?:fhir.FhirElement;\r\n  /**\r\n   * The meaning of the hierarchy of concepts.\r\n   */\r\n  hierarchyMeaning?: 'classified-with'|'grouped-by'|'is-a'|'part-of'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.hierarchyMeaning\r\n   */\r\n  _hierarchyMeaning?:fhir.FhirElement;\r\n  /**\r\n   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.\r\n   */\r\n  compositional?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.compositional\r\n   */\r\n  _compositional?:fhir.FhirElement;\r\n  /**\r\n   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.\r\n   */\r\n  versionNeeded?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.versionNeeded\r\n   */\r\n  _versionNeeded?:fhir.FhirElement;\r\n  /**\r\n   * How much of the content of the code system - the concepts and codes it defines - are represented in this resource.\r\n   */\r\n  content: 'complete'|'example'|'fragment'|'not-present'|null;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.content\r\n   */\r\n  _content?:fhir.FhirElement;\r\n  /**\r\n   * The count of concepts defined in this resource cannot be more than this value, but may be less for several reasons - see the content value.\r\n   */\r\n  count?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CodeSystem.count\r\n   */\r\n  _count?:fhir.FhirElement;\r\n  /**\r\n   * A filter that can be used in a value set compose statement when selecting concepts using a filter.\r\n   */\r\n  filter?: (fhir.CodeSystemFilter|null)[]|undefined;\r\n  /**\r\n   * A property defines an additional slot through which additional information can be provided about a concept.\r\n   */\r\n  property?: (fhir.CodeSystemProperty|null)[]|undefined;\r\n  /**\r\n   * If this is empty, it means that the code system resource does not represent the content of the code system.\r\n   */\r\n  concept?: (fhir.CodeSystemConcept|null)[]|undefined;\r\n}\r\n"]}