// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Bundle
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVuZGxlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpckpzb24vQnVuZGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogQnVuZGxlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogQSBzZXJpZXMgb2YgbGlua3MgdGhhdCBwcm92aWRlIGNvbnRleHQgdG8gdGhpcyBidW5kbGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJ1bmRsZUxpbmsgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIEEgbmFtZSB3aGljaCBkZXRhaWxzIHRoZSBmdW5jdGlvbmFsIHVzZSBmb3IgdGhpcyBsaW5rIC0gc2VlIFtodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2xpbmstcmVsYXRpb25zL2xpbmstcmVsYXRpb25zLnhodG1sI2xpbmstcmVsYXRpb25zLTFdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbGluay1yZWxhdGlvbnMvbGluay1yZWxhdGlvbnMueGh0bWwjbGluay1yZWxhdGlvbnMtMSkuXHJcbiAgICovXHJcbiAgcmVsYXRpb246IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBCdW5kbGUubGluay5yZWxhdGlvblxyXG4gICAqL1xyXG4gIF9yZWxhdGlvbj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgcmVmZXJlbmNlIGRldGFpbHMgZm9yIHRoZSBsaW5rLlxyXG4gICAqL1xyXG4gIHVybDogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5saW5rLnVybFxyXG4gICAqL1xyXG4gIF91cmw/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgc2VhcmNoIHByb2Nlc3MgdGhhdCBsZWFkIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGlzIGVudHJ5LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdW5kbGVFbnRyeVNlYXJjaCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogVGhlcmUgaXMgb25seSBvbmUgbW9kZS4gSW4gc29tZSBjb3JuZXIgY2FzZXMsIGEgcmVzb3VyY2UgbWF5IGJlIGluY2x1ZGVkIGJlY2F1c2UgaXQgaXMgYm90aCBhIG1hdGNoIGFuZCBhbiBpbmNsdWRlLiBJbiB0aGVzZSBjaXJjdW1zdGFuY2VzLCAnbWF0Y2gnIHRha2VzIHByZWNlZGVuY2UuXHJcbiAgICovXHJcbiAgbW9kZT86ICdpbmNsdWRlJ3wnbWF0Y2gnfCdvdXRjb21lJ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5lbnRyeS5zZWFyY2gubW9kZVxyXG4gICAqL1xyXG4gIF9tb2RlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFNlcnZlcnMgYXJlIG5vdCByZXF1aXJlZCB0byByZXR1cm4gYSByYW5raW5nIHNjb3JlLiAxIGlzIG1vc3QgcmVsZXZhbnQsIGFuZCAwIGlzIGxlYXN0IHJlbGV2YW50LiBPZnRlbiwgc2VhcmNoIHJlc3VsdHMgYXJlIHNvcnRlZCBieSBzY29yZSwgYnV0IHRoZSBjbGllbnQgbWF5IHNwZWNpZnkgYSBkaWZmZXJlbnQgc29ydCBvcmRlci5cclxuICAgKi9cclxuICBzY29yZT86IG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5lbnRyeS5zZWFyY2guc2NvcmVcclxuICAgKi9cclxuICBfc2NvcmU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGhvdyB0aGlzIGVudHJ5IHNob3VsZCBiZSBwcm9jZXNzZWQgYXMgcGFydCBvZiBhIHRyYW5zYWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdW5kbGVFbnRyeVJlcXVlc3QgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRoZSBIVFRQIHZlcmIgZm9yIHRoaXMgZW50cnkgaW4gZWl0aGVyIGEgY2hhbmdlIGhpc3RvcnksIG9yIGEgdHJhbnNhY3Rpb24vIHRyYW5zYWN0aW9uIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIG1ldGhvZDogJ0RFTEVURSd8J0dFVCd8J1BPU1QnfCdQVVQnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5lbnRyeS5yZXF1ZXN0Lm1ldGhvZFxyXG4gICAqL1xyXG4gIF9tZXRob2Q/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogRS5nLiBmb3IgYSBQYXRpZW50IENyZWF0ZSwgdGhlIG1ldGhvZCB3b3VsZCBiZSBcIlBPU1RcIiBhbmQgdGhlIFVSTCB3b3VsZCBiZSBcIlBhdGllbnRcIi4gRm9yIGEgUGF0aWVudCBVcGRhdGUsIHRoZSBtZXRob2Qgd291bGQgYmUgUFVULCBhbmQgdGhlIFVSTCB3b3VsZCBiZSBcIlBhdGllbnQvW2lkXVwiLlxyXG4gICAqL1xyXG4gIHVybDogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5lbnRyeS5yZXF1ZXN0LnVybFxyXG4gICAqL1xyXG4gIF91cmw/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIEVUYWcgdmFsdWVzIG1hdGNoLCByZXR1cm4gYSAzMDQgTm90IE1vZGlmaWVkIHN0YXR1cy4gU2VlIHRoZSBBUEkgZG9jdW1lbnRhdGlvbiBmb3IgW1wiQ29uZGl0aW9uYWwgUmVhZFwiXShodHRwLmh0bWwjY3JlYWQpLlxyXG4gICAqL1xyXG4gIGlmTm9uZU1hdGNoPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQnVuZGxlLmVudHJ5LnJlcXVlc3QuaWZOb25lTWF0Y2hcclxuICAgKi9cclxuICBfaWZOb25lTWF0Y2g/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogT25seSBwZXJmb3JtIHRoZSBvcGVyYXRpb24gaWYgdGhlIGxhc3QgdXBkYXRlZCBkYXRlIG1hdGNoZXMuIFNlZSB0aGUgQVBJIGRvY3VtZW50YXRpb24gZm9yIFtcIkNvbmRpdGlvbmFsIFJlYWRcIl0oaHR0cC5odG1sI2NyZWFkKS5cclxuICAgKi9cclxuICBpZk1vZGlmaWVkU2luY2U/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBCdW5kbGUuZW50cnkucmVxdWVzdC5pZk1vZGlmaWVkU2luY2VcclxuICAgKi9cclxuICBfaWZNb2RpZmllZFNpbmNlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIE9ubHkgcGVyZm9ybSB0aGUgb3BlcmF0aW9uIGlmIHRoZSBFdGFnIHZhbHVlIG1hdGNoZXMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIEFQSSBzZWN0aW9uIFtcIk1hbmFnaW5nIFJlc291cmNlIENvbnRlbnRpb25cIl0oaHR0cC5odG1sI2NvbmN1cnJlbmN5KS5cclxuICAgKi9cclxuICBpZk1hdGNoPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQnVuZGxlLmVudHJ5LnJlcXVlc3QuaWZNYXRjaFxyXG4gICAqL1xyXG4gIF9pZk1hdGNoPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEluc3RydWN0IHRoZSBzZXJ2ZXIgbm90IHRvIHBlcmZvcm0gdGhlIGNyZWF0ZSBpZiBhIHNwZWNpZmllZCByZXNvdXJjZSBhbHJlYWR5IGV4aXN0cy4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24sIHNlZSB0aGUgQVBJIGRvY3VtZW50YXRpb24gZm9yIFtcIkNvbmRpdGlvbmFsIENyZWF0ZVwiXShodHRwLmh0bWwjY2NyZWF0ZSkuIFRoaXMgaXMganVzdCB0aGUgcXVlcnkgcG9ydGlvbiBvZiB0aGUgVVJMIC0gd2hhdCBmb2xsb3dzIHRoZSBcIj9cIiAobm90IGluY2x1ZGluZyB0aGUgXCI/XCIpLlxyXG4gICAqL1xyXG4gIGlmTm9uZUV4aXN0Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQnVuZGxlLmVudHJ5LnJlcXVlc3QuaWZOb25lRXhpc3RcclxuICAgKi9cclxuICBfaWZOb25lRXhpc3Q/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGhvdyB0aGlzIGVudHJ5IHNob3VsZCBiZSBwcm9jZXNzZWQgYXMgcGFydCBvZiBhIHRyYW5zYWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdW5kbGVFbnRyeVJlc3BvbnNlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBUaGUgc3RhdHVzIGNvZGUgcmV0dXJuZWQgYnkgcHJvY2Vzc2luZyB0aGlzIGVudHJ5LiBUaGUgc3RhdHVzIFNIQUxMIHN0YXJ0IHdpdGggYSAzIGRpZ2l0IEhUVFAgY29kZSAoZS5nLiA0MDQpIGFuZCBtYXkgY29udGFpbiB0aGUgc3RhbmRhcmQgSFRUUCBkZXNjcmlwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIHN0YXR1cyBjb2RlLlxyXG4gICAqL1xyXG4gIHN0YXR1czogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5lbnRyeS5yZXNwb25zZS5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsb2NhdGlvbiBoZWFkZXIgY3JlYXRlZCBieSBwcm9jZXNzaW5nIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIGxvY2F0aW9uPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQnVuZGxlLmVudHJ5LnJlc3BvbnNlLmxvY2F0aW9uXHJcbiAgICovXHJcbiAgX2xvY2F0aW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEV0YWdzIG1hdGNoIHRoZSBSZXNvdXJjZS5tZXRhLnZlcnNpb25JZC4gVGhlIEVUYWcgaGFzIHRvIG1hdGNoIHRoZSB2ZXJzaW9uIGlkIGluIHRoZSBoZWFkZXIgaWYgYSByZXNvdXJjZSBpcyBpbmNsdWRlZC5cclxuICAgKi9cclxuICBldGFnPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQnVuZGxlLmVudHJ5LnJlc3BvbnNlLmV0YWdcclxuICAgKi9cclxuICBfZXRhZz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGlzIGhhcyB0byBtYXRjaCB0aGUgc2FtZSB0aW1lIGluIHRoZSBtZXRhIGhlYWRlciBpZiBhIHJlc291cmNlIGlzIGluY2x1ZGVkLlxyXG4gICAqL1xyXG4gIGxhc3RNb2RpZmllZD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS5lbnRyeS5yZXNwb25zZS5sYXN0TW9kaWZpZWRcclxuICAgKi9cclxuICBfbGFzdE1vZGlmaWVkPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEZvciBhIFBPU1QvUFVUIG9wZXJhdGlvbiwgdGhpcyBpcyB0aGUgZXF1aXZhbGVudCBvdXRjb21lIHRoYXQgd291bGQgYmUgcmV0dXJuZWQgZm9yIHByZWZlciA9IG9wZXJhdGlvbm91dGNvbWUgLSBleGNlcHQgdGhhdCB0aGUgcmVzb3VyY2UgaXMgYWx3YXlzIHJldHVybmVkIHdoZXRoZXIgb3Igbm90IHRoZSBvdXRjb21lIGlzIHJldHVybmVkLlxyXG4gICAqL1xyXG4gIG91dGNvbWU/OiBmaGlyLkZoaXJSZXNvdXJjZXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBlbnRyeSBpbiBhIGJ1bmRsZSByZXNvdXJjZSAtIHdpbGwgZWl0aGVyIGNvbnRhaW4gYSByZXNvdXJjZSwgb3IgaW5mb3JtYXRpb24gYWJvdXQgYSByZXNvdXJjZSAodHJhbnNhY3Rpb25zIGFuZCBoaXN0b3J5IG9ubHkpLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdW5kbGVFbnRyeSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogQSBzZXJpZXMgb2YgbGlua3MgdGhhdCBwcm92aWRlIGNvbnRleHQgdG8gdGhpcyBlbnRyeS5cclxuICAgKi9cclxuICBsaW5rPzogKGZoaXIuQnVuZGxlTGlua3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBmdWxsVXJsIG1heSBub3QgYmUgW3VuaXF1ZSBpbiB0aGUgY29udGV4dCBvZiBhIHJlc291cmNlXShidW5kbGUuaHRtbCNidW5kbGUtdW5pcXVlKS4gTm90ZSB0aGF0IHNpbmNlIFtGSElSIHJlc291cmNlcyBkbyBub3QgbmVlZCB0byBiZSBzZXJ2ZWQgdGhyb3VnaCB0aGUgRkhJUiBBUEldKHJlZmVyZW5jZXMuaHRtbCksIHRoZSBhYnNvbHV0ZSBVUkwgbWF5IG5vdCBlbmQgd2l0aCB0aGUgbG9naWNhbCBpZCBvZiB0aGUgcmVzb3VyY2UgKFJlc291cmNlLmlkKSwgYnV0IGlmIHRoZSBmdWxsVXJsIGRvZXMgbG9vayBsaWtlIGEgUkVTVGZ1bCBzZXJ2ZXIgVVJMIChlLmcuIG1lZXRzIHRoZSBbcmVnZXhdKHJlZmVyZW5jZXMuaHRtbCNyZWdleCksIHRoZW4gaXQgU0hBTEwgZW5kIHdpdGggdGhlIFJlc291cmNlLmlkLlxyXG4gICAqL1xyXG4gIGZ1bGxVcmw/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBCdW5kbGUuZW50cnkuZnVsbFVybFxyXG4gICAqL1xyXG4gIF9mdWxsVXJsPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBSZXNvdXJjZXMgZm9yIHRoZSBlbnRyeS5cclxuICAgKi9cclxuICByZXNvdXJjZT86IGZoaXIuRmhpclJlc291cmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgc2VhcmNoIHByb2Nlc3MgdGhhdCBsZWFkIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGlzIGVudHJ5LlxyXG4gICAqL1xyXG4gIHNlYXJjaD86IGZoaXIuQnVuZGxlRW50cnlTZWFyY2h8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRoaXMgZW50cnkgc2hvdWxkIGJlIHByb2Nlc3NlZCBhcyBwYXJ0IG9mIGEgdHJhbnNhY3Rpb24uXHJcbiAgICovXHJcbiAgcmVxdWVzdD86IGZoaXIuQnVuZGxlRW50cnlSZXF1ZXN0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGhvdyB0aGlzIGVudHJ5IHNob3VsZCBiZSBwcm9jZXNzZWQgYXMgcGFydCBvZiBhIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIHJlc3BvbnNlPzogZmhpci5CdW5kbGVFbnRyeVJlc3BvbnNlfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY29udGFpbmVyIGZvciBhIGNvbGxlY3Rpb24gb2YgcmVzb3VyY2VzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdW5kbGUgZXh0ZW5kcyBmaGlyLlJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIkJ1bmRsZVwifG51bGw7XHJcbiAgLyoqXHJcbiAgICogUGVyc2lzdGVudCBpZGVudGl0eSBnZW5lcmFsbHkgb25seSBtYXR0ZXJzIGZvciBiYXRjaGVzIG9mIHR5cGUgRG9jdW1lbnQsIE1lc3NhZ2UsIGFuZCBDb2xsZWN0aW9uLiBJdCB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgcG9wdWxhdGVkIGZvciBzZWFyY2ggYW5kIGhpc3RvcnkgcmVzdWx0cywgYW5kIHNlcnZlcnMgaWdub3JlIEJ1bmRsZS5pZGVudGlmaWVyIHdoZW4gcHJvY2Vzc2luZyBiYXRjaGVzIGFuZCB0cmFuc2FjdGlvbnMuIEZvciBEb2N1bWVudHMgIHRoZSAuaWRlbnRpZmllciBTSEFMTCBiZSBwb3B1bGF0ZWQgc3VjaCB0aGF0IHRoZSAuaWRlbnRpZmllciBpcyBnbG9iYWxseSB1bmlxdWUuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSXQncyBwb3NzaWJsZSB0byB1c2UgYSBidW5kbGUgZm9yIG90aGVyIHB1cnBvc2VzIChlLmcuIGEgZG9jdW1lbnQgY2FuIGJlIGFjY2VwdGVkIGFzIGEgdHJhbnNhY3Rpb24pLiBUaGlzIGlzIHByaW1hcmlseSBkZWZpbmVkIHNvIHRoYXQgdGhlcmUgY2FuIGJlIHNwZWNpZmljIHJ1bGVzIGZvciBzb21lIG9mIHRoZSBidW5kbGUgdHlwZXMuXHJcbiAgICovXHJcbiAgdHlwZTogJ2JhdGNoJ3wnYmF0Y2gtcmVzcG9uc2UnfCdjb2xsZWN0aW9uJ3wnZG9jdW1lbnQnfCdoaXN0b3J5J3wnbWVzc2FnZSd8J3NlYXJjaHNldCd8J3RyYW5zYWN0aW9uJ3wndHJhbnNhY3Rpb24tcmVzcG9uc2UnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEJ1bmRsZS50eXBlXHJcbiAgICovXHJcbiAgX3R5cGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogT25seSB1c2VkIGlmIHRoZSBidW5kbGUgaXMgYSBzZWFyY2ggcmVzdWx0IHNldC4gVGhlIHRvdGFsIGRvZXMgbm90IGluY2x1ZGUgcmVzb3VyY2VzIHN1Y2ggYXMgT3BlcmF0aW9uT3V0Y29tZSBhbmQgaW5jbHVkZWQgcmVzb3VyY2VzLCBvbmx5IHRoZSB0b3RhbCBudW1iZXIgb2YgbWF0Y2hpbmcgcmVzb3VyY2VzLlxyXG4gICAqL1xyXG4gIHRvdGFsPzogbnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQnVuZGxlLnRvdGFsXHJcbiAgICovXHJcbiAgX3RvdGFsPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEEgc2VyaWVzIG9mIGxpbmtzIHRoYXQgcHJvdmlkZSBjb250ZXh0IHRvIHRoaXMgYnVuZGxlLlxyXG4gICAqL1xyXG4gIGxpbms/OiAoZmhpci5CdW5kbGVMaW5rfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIGVudHJ5IGluIGEgYnVuZGxlIHJlc291cmNlIC0gd2lsbCBlaXRoZXIgY29udGFpbiBhIHJlc291cmNlLCBvciBpbmZvcm1hdGlvbiBhYm91dCBhIHJlc291cmNlICh0cmFuc2FjdGlvbnMgYW5kIGhpc3Rvcnkgb25seSkuXHJcbiAgICovXHJcbiAgZW50cnk/OiAoZmhpci5CdW5kbGVFbnRyeXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc2lnbmF0dXJlIGNvdWxkIGJlIGNyZWF0ZWQgYnkgdGhlIFwiYXV0aG9yXCIgb2YgdGhlIGJ1bmRsZSBvciBieSB0aGUgb3JpZ2luYXRpbmcgZGV2aWNlLiAgIFJlcXVpcmVtZW50cyBhcm91bmQgaW5jbHVzaW9uIG9mIGEgc2lnbmF0dXJlLCB2ZXJpZmljYXRpb24gb2Ygc2lnbmF0dXJlcyBhbmQgdHJlYXRtZW50IG9mIHNpZ25lZC9ub24tc2lnbmVkIGJ1bmRsZXMgaXMgaW1wbGVtZW50YXRpb24tZW52aXJvbm1lbnQgc3BlY2lmaWMuXHJcbiAgICovXHJcbiAgc2lnbmF0dXJlPzogZmhpci5TaWduYXR1cmV8dW5kZWZpbmVkO1xyXG59XHJcbiJdfQ==