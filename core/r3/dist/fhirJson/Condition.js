// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Condition
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpckpzb24vQ29uZGl0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMy5jb3JlIHZlcnNpb246IDMuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogQ29uZGl0aW9uXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogQ2xpbmljYWwgc3RhZ2Ugb3IgZ3JhZGUgb2YgYSBjb25kaXRpb24uIE1heSBpbmNsdWRlIGZvcm1hbCBzZXZlcml0eSBhc3Nlc3NtZW50cy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29uZGl0aW9uU3RhZ2UgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIEEgc2ltcGxlIHN1bW1hcnkgb2YgdGhlIHN0YWdlIHN1Y2ggYXMgXCJTdGFnZSAzXCIuIFRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSBzdGFnZSBpcyBkaXNlYXNlLXNwZWNpZmljLlxyXG4gICAqL1xyXG4gIHN1bW1hcnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVmZXJlbmNlIHRvIGEgZm9ybWFsIHJlY29yZCBvZiB0aGUgZXZpZGVuY2Ugb24gd2hpY2ggdGhlIHN0YWdpbmcgYXNzZXNzbWVudCBpcyBiYXNlZC5cclxuICAgKi9cclxuICBhc3Nlc3NtZW50PzogKGZoaXIuUmVmZXJlbmNlfG51bGwpW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGV2aWRlbmNlIG1heSBiZSBhIHNpbXBsZSBsaXN0IG9mIGNvZGVkIHN5bXB0b21zL21hbmlmZXN0YXRpb25zLCBvciByZWZlcmVuY2VzIHRvIG9ic2VydmF0aW9ucyBvciBmb3JtYWwgYXNzZXNzbWVudHMsIG9yIGJvdGguXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbmRpdGlvbkV2aWRlbmNlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBBIG1hbmlmZXN0YXRpb24gb3Igc3ltcHRvbSB0aGF0IGxlZCB0byB0aGUgcmVjb3JkaW5nIG9mIHRoaXMgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIGNvZGU/OiAoZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGlua3MgdG8gb3RoZXIgcmVsZXZhbnQgaW5mb3JtYXRpb24sIGluY2x1ZGluZyBwYXRob2xvZ3kgcmVwb3J0cy5cclxuICAgKi9cclxuICBkZXRhaWw/OiAoZmhpci5SZWZlcmVuY2V8bnVsbClbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNsaW5pY2FsIGNvbmRpdGlvbiwgcHJvYmxlbSwgZGlhZ25vc2lzLCBvciBvdGhlciBldmVudCwgc2l0dWF0aW9uLCBpc3N1ZSwgb3IgY2xpbmljYWwgY29uY2VwdCB0aGF0IGhhcyByaXNlbiB0byBhIGxldmVsIG9mIGNvbmNlcm4uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbmRpdGlvbiBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2UgeyBcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiQ29uZGl0aW9uXCJ8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGlzIHJlY29yZHMgaWRlbnRpZmllcnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29uZGl0aW9uIHRoYXQgYXJlIGRlZmluZWQgYnkgYnVzaW5lc3MgcHJvY2Vzc2VzIGFuZC9vciB1c2VkIHRvIHJlZmVyIHRvIGl0IHdoZW4gYSBkaXJlY3QgVVJMIHJlZmVyZW5jZSB0byB0aGUgcmVzb3VyY2UgaXRzZWxmIGlzIG5vdCBhcHByb3ByaWF0ZSAoZS5nLiBpbiBDREEgZG9jdW1lbnRzLCBvciBpbiB3cml0dGVuIC8gcHJpbnRlZCBkb2N1bWVudGF0aW9uKS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogKGZoaXIuSWRlbnRpZmllcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyBjb2RlcyB0aGF0IG1hcmsgdGhlIGNvbmRpdGlvbiBhcyBub3QgY3VycmVudGx5IHZhbGlkIG9yIG9mIGNvbmNlcm4uXHJcbiAgICovXHJcbiAgY2xpbmljYWxTdGF0dXM/OiAnYWN0aXZlJ3wnaW5hY3RpdmUnfCdyZWN1cnJlbmNlJ3wncmVtaXNzaW9uJ3wncmVzb2x2ZWQnfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29uZGl0aW9uLmNsaW5pY2FsU3RhdHVzXHJcbiAgICovXHJcbiAgX2NsaW5pY2FsU3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIHZlcmlmaWNhdGlvblN0YXR1cyBpcyBub3QgcmVxdWlyZWQuICBGb3IgZXhhbXBsZSwgd2hlbiBhIHBhdGllbnQgaGFzIGFiZG9taW5hbCBwYWluIGluIHRoZSBFRCwgdGhlcmUgaXMgbm90IGxpa2VseSBnb2luZyB0byBiZSBhIHZlcmlmaWNhdGlvbiBzdGF0dXMuXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIHRoZSBzdGF0dXMgY29udGFpbnMgdGhlIGNvZGUgcmVmdXRlZCBhbmQgZW50ZXJlZC1pbi1lcnJvciB0aGF0IG1hcmsgdGhlIENvbmRpdGlvbiBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHZlcmlmaWNhdGlvblN0YXR1cz86ICdjb25maXJtZWQnfCdkaWZmZXJlbnRpYWwnfCdlbnRlcmVkLWluLWVycm9yJ3wncHJvdmlzaW9uYWwnfCdyZWZ1dGVkJ3wndW5rbm93bid8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb25kaXRpb24udmVyaWZpY2F0aW9uU3RhdHVzXHJcbiAgICovXHJcbiAgX3ZlcmlmaWNhdGlvblN0YXR1cz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgY2F0ZWdvcml6YXRpb24gaXMgb2Z0ZW4gaGlnaGx5IGNvbnRleHR1YWwgYW5kIG1heSBhcHBlYXIgcG9vcmx5IGRpZmZlcmVudGlhdGVkIG9yIG5vdCB2ZXJ5IHVzZWZ1bCBpbiBvdGhlciBjb250ZXh0cy5cclxuICAgKi9cclxuICBjYXRlZ29yeT86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb2Rpbmcgb2YgdGhlIHNldmVyaXR5IHdpdGggYSB0ZXJtaW5vbG9neSBpcyBwcmVmZXJyZWQsIHdoZXJlIHBvc3NpYmxlLlxyXG4gICAqL1xyXG4gIHNldmVyaXR5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpY2F0aW9uIG9mIHRoZSBjb25kaXRpb24sIHByb2JsZW0gb3IgZGlhZ25vc2lzLlxyXG4gICAqL1xyXG4gIGNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT25seSB1c2VkIGlmIG5vdCBpbXBsaWNpdCBpbiBjb2RlIGZvdW5kIGluIENvbmRpdGlvbi5jb2RlLiBJZiB0aGUgdXNlIGNhc2UgcmVxdWlyZXMgYXR0cmlidXRlcyBmcm9tIHRoZSBCb2R5U2l0ZSByZXNvdXJjZSAoZS5nLiB0byBpZGVudGlmeSBhbmQgdHJhY2sgc2VwYXJhdGVseSkgdGhlbiB1c2UgdGhlIHN0YW5kYXJkIGV4dGVuc2lvbiBbYm9keS1zaXRlLWluc3RhbmNlXShleHRlbnNpb24tYm9keS1zaXRlLWluc3RhbmNlLmh0bWwpLiAgTWF5IGJlIGEgc3VtbWFyeSBjb2RlLCBvciBhIHJlZmVyZW5jZSB0byBhIHZlcnkgcHJlY2lzZSBkZWZpbml0aW9uIG9mIHRoZSBsb2NhdGlvbiwgb3IgYm90aC5cclxuICAgKi9cclxuICBib2R5U2l0ZT86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHBhdGllbnQgb3IgZ3JvdXAgd2hvIHRoZSBjb25kaXRpb24gcmVjb3JkIGlzIGFzc29jaWF0ZWQgd2l0aC5cclxuICAgKi9cclxuICBzdWJqZWN0OiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgcmVjb3JkIGluZGljYXRlcyB0aGUgZW5jb3VudGVyIHRoaXMgcGFydGljdWxhciByZWNvcmQgaXMgYXNzb2NpYXRlZCB3aXRoLiAgSW4gdGhlIGNhc2Ugb2YgYSBcIm5ld1wiIGRpYWdub3NpcyByZWZsZWN0aW5nIG9uZ29pbmcvcmV2aXNlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29uZGl0aW9uLCB0aGlzIG1pZ2h0IGJlIGRpc3RpbmN0IGZyb20gdGhlIGZpcnN0IGVuY291bnRlciBpbiB3aGljaCB0aGUgdW5kZXJseWluZyBjb25kaXRpb24gd2FzIGZpcnN0IFwia25vd25cIi5cclxuICAgKi9cclxuICBjb250ZXh0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFnZSBpcyBnZW5lcmFsbHkgdXNlZCB3aGVuIHRoZSBwYXRpZW50IHJlcG9ydHMgYW4gYWdlIGF0IHdoaWNoIHRoZSBDb25kaXRpb24gYmVnYW4gdG8gb2NjdXIuXHJcbiAgICovXHJcbiAgb25zZXREYXRlVGltZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbmRpdGlvbi5vbnNldFt4XVxyXG4gICAqL1xyXG4gIF9vbnNldERhdGVUaW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEFnZSBpcyBnZW5lcmFsbHkgdXNlZCB3aGVuIHRoZSBwYXRpZW50IHJlcG9ydHMgYW4gYWdlIGF0IHdoaWNoIHRoZSBDb25kaXRpb24gYmVnYW4gdG8gb2NjdXIuXHJcbiAgICovXHJcbiAgb25zZXRBZ2U/OiBmaGlyLkFnZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWdlIGlzIGdlbmVyYWxseSB1c2VkIHdoZW4gdGhlIHBhdGllbnQgcmVwb3J0cyBhbiBhZ2UgYXQgd2hpY2ggdGhlIENvbmRpdGlvbiBiZWdhbiB0byBvY2N1ci5cclxuICAgKi9cclxuICBvbnNldFBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBZ2UgaXMgZ2VuZXJhbGx5IHVzZWQgd2hlbiB0aGUgcGF0aWVudCByZXBvcnRzIGFuIGFnZSBhdCB3aGljaCB0aGUgQ29uZGl0aW9uIGJlZ2FuIHRvIG9jY3VyLlxyXG4gICAqL1xyXG4gIG9uc2V0UmFuZ2U/OiBmaGlyLlJhbmdlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBZ2UgaXMgZ2VuZXJhbGx5IHVzZWQgd2hlbiB0aGUgcGF0aWVudCByZXBvcnRzIGFuIGFnZSBhdCB3aGljaCB0aGUgQ29uZGl0aW9uIGJlZ2FuIHRvIG9jY3VyLlxyXG4gICAqL1xyXG4gIG9uc2V0U3RyaW5nPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29uZGl0aW9uLm9uc2V0W3hdXHJcbiAgICovXHJcbiAgX29uc2V0U3RyaW5nPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIGlzIG5vIGV4cGxpY2l0IGRpc3RpbmN0aW9uIGJldHdlZW4gcmVzb2x1dGlvbiBhbmQgcmVtaXNzaW9uIGJlY2F1c2UgaW4gbWFueSBjYXNlcyB0aGUgZGlzdGluY3Rpb24gaXMgbm90IGNsZWFyLiBBZ2UgaXMgZ2VuZXJhbGx5IHVzZWQgd2hlbiB0aGUgcGF0aWVudCByZXBvcnRzIGFuIGFnZSBhdCB3aGljaCB0aGUgQ29uZGl0aW9uIGFiYXRlZC4gIElmIHRoZXJlIGlzIG5vIGFiYXRlbWVudCBlbGVtZW50LCBpdCBpcyB1bmtub3duIHdoZXRoZXIgdGhlIGNvbmRpdGlvbiBoYXMgcmVzb2x2ZWQgb3IgZW50ZXJlZCByZW1pc3Npb247IGFwcGxpY2F0aW9ucyBhbmQgdXNlcnMgc2hvdWxkIGdlbmVyYWxseSBhc3N1bWUgdGhhdCB0aGUgY29uZGl0aW9uIGlzIHN0aWxsIHZhbGlkLiAgV2hlbiBhYmF0ZW1lbnRTdHJpbmcgZXhpc3RzLCBpdCBpbXBsaWVzIHRoZSBjb25kaXRpb24gaXMgYWJhdGVkLlxyXG4gICAqL1xyXG4gIGFiYXRlbWVudERhdGVUaW1lPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29uZGl0aW9uLmFiYXRlbWVudFt4XVxyXG4gICAqL1xyXG4gIF9hYmF0ZW1lbnREYXRlVGltZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGVyZSBpcyBubyBleHBsaWNpdCBkaXN0aW5jdGlvbiBiZXR3ZWVuIHJlc29sdXRpb24gYW5kIHJlbWlzc2lvbiBiZWNhdXNlIGluIG1hbnkgY2FzZXMgdGhlIGRpc3RpbmN0aW9uIGlzIG5vdCBjbGVhci4gQWdlIGlzIGdlbmVyYWxseSB1c2VkIHdoZW4gdGhlIHBhdGllbnQgcmVwb3J0cyBhbiBhZ2UgYXQgd2hpY2ggdGhlIENvbmRpdGlvbiBhYmF0ZWQuICBJZiB0aGVyZSBpcyBubyBhYmF0ZW1lbnQgZWxlbWVudCwgaXQgaXMgdW5rbm93biB3aGV0aGVyIHRoZSBjb25kaXRpb24gaGFzIHJlc29sdmVkIG9yIGVudGVyZWQgcmVtaXNzaW9uOyBhcHBsaWNhdGlvbnMgYW5kIHVzZXJzIHNob3VsZCBnZW5lcmFsbHkgYXNzdW1lIHRoYXQgdGhlIGNvbmRpdGlvbiBpcyBzdGlsbCB2YWxpZC4gIFdoZW4gYWJhdGVtZW50U3RyaW5nIGV4aXN0cywgaXQgaW1wbGllcyB0aGUgY29uZGl0aW9uIGlzIGFiYXRlZC5cclxuICAgKi9cclxuICBhYmF0ZW1lbnRBZ2U/OiBmaGlyLkFnZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgaXMgbm8gZXhwbGljaXQgZGlzdGluY3Rpb24gYmV0d2VlbiByZXNvbHV0aW9uIGFuZCByZW1pc3Npb24gYmVjYXVzZSBpbiBtYW55IGNhc2VzIHRoZSBkaXN0aW5jdGlvbiBpcyBub3QgY2xlYXIuIEFnZSBpcyBnZW5lcmFsbHkgdXNlZCB3aGVuIHRoZSBwYXRpZW50IHJlcG9ydHMgYW4gYWdlIGF0IHdoaWNoIHRoZSBDb25kaXRpb24gYWJhdGVkLiAgSWYgdGhlcmUgaXMgbm8gYWJhdGVtZW50IGVsZW1lbnQsIGl0IGlzIHVua25vd24gd2hldGhlciB0aGUgY29uZGl0aW9uIGhhcyByZXNvbHZlZCBvciBlbnRlcmVkIHJlbWlzc2lvbjsgYXBwbGljYXRpb25zIGFuZCB1c2VycyBzaG91bGQgZ2VuZXJhbGx5IGFzc3VtZSB0aGF0IHRoZSBjb25kaXRpb24gaXMgc3RpbGwgdmFsaWQuICBXaGVuIGFiYXRlbWVudFN0cmluZyBleGlzdHMsIGl0IGltcGxpZXMgdGhlIGNvbmRpdGlvbiBpcyBhYmF0ZWQuXHJcbiAgICovXHJcbiAgYWJhdGVtZW50Qm9vbGVhbj86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb25kaXRpb24uYWJhdGVtZW50W3hdXHJcbiAgICovXHJcbiAgX2FiYXRlbWVudEJvb2xlYW4/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgaXMgbm8gZXhwbGljaXQgZGlzdGluY3Rpb24gYmV0d2VlbiByZXNvbHV0aW9uIGFuZCByZW1pc3Npb24gYmVjYXVzZSBpbiBtYW55IGNhc2VzIHRoZSBkaXN0aW5jdGlvbiBpcyBub3QgY2xlYXIuIEFnZSBpcyBnZW5lcmFsbHkgdXNlZCB3aGVuIHRoZSBwYXRpZW50IHJlcG9ydHMgYW4gYWdlIGF0IHdoaWNoIHRoZSBDb25kaXRpb24gYWJhdGVkLiAgSWYgdGhlcmUgaXMgbm8gYWJhdGVtZW50IGVsZW1lbnQsIGl0IGlzIHVua25vd24gd2hldGhlciB0aGUgY29uZGl0aW9uIGhhcyByZXNvbHZlZCBvciBlbnRlcmVkIHJlbWlzc2lvbjsgYXBwbGljYXRpb25zIGFuZCB1c2VycyBzaG91bGQgZ2VuZXJhbGx5IGFzc3VtZSB0aGF0IHRoZSBjb25kaXRpb24gaXMgc3RpbGwgdmFsaWQuICBXaGVuIGFiYXRlbWVudFN0cmluZyBleGlzdHMsIGl0IGltcGxpZXMgdGhlIGNvbmRpdGlvbiBpcyBhYmF0ZWQuXHJcbiAgICovXHJcbiAgYWJhdGVtZW50UGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIGlzIG5vIGV4cGxpY2l0IGRpc3RpbmN0aW9uIGJldHdlZW4gcmVzb2x1dGlvbiBhbmQgcmVtaXNzaW9uIGJlY2F1c2UgaW4gbWFueSBjYXNlcyB0aGUgZGlzdGluY3Rpb24gaXMgbm90IGNsZWFyLiBBZ2UgaXMgZ2VuZXJhbGx5IHVzZWQgd2hlbiB0aGUgcGF0aWVudCByZXBvcnRzIGFuIGFnZSBhdCB3aGljaCB0aGUgQ29uZGl0aW9uIGFiYXRlZC4gIElmIHRoZXJlIGlzIG5vIGFiYXRlbWVudCBlbGVtZW50LCBpdCBpcyB1bmtub3duIHdoZXRoZXIgdGhlIGNvbmRpdGlvbiBoYXMgcmVzb2x2ZWQgb3IgZW50ZXJlZCByZW1pc3Npb247IGFwcGxpY2F0aW9ucyBhbmQgdXNlcnMgc2hvdWxkIGdlbmVyYWxseSBhc3N1bWUgdGhhdCB0aGUgY29uZGl0aW9uIGlzIHN0aWxsIHZhbGlkLiAgV2hlbiBhYmF0ZW1lbnRTdHJpbmcgZXhpc3RzLCBpdCBpbXBsaWVzIHRoZSBjb25kaXRpb24gaXMgYWJhdGVkLlxyXG4gICAqL1xyXG4gIGFiYXRlbWVudFJhbmdlPzogZmhpci5SYW5nZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgaXMgbm8gZXhwbGljaXQgZGlzdGluY3Rpb24gYmV0d2VlbiByZXNvbHV0aW9uIGFuZCByZW1pc3Npb24gYmVjYXVzZSBpbiBtYW55IGNhc2VzIHRoZSBkaXN0aW5jdGlvbiBpcyBub3QgY2xlYXIuIEFnZSBpcyBnZW5lcmFsbHkgdXNlZCB3aGVuIHRoZSBwYXRpZW50IHJlcG9ydHMgYW4gYWdlIGF0IHdoaWNoIHRoZSBDb25kaXRpb24gYWJhdGVkLiAgSWYgdGhlcmUgaXMgbm8gYWJhdGVtZW50IGVsZW1lbnQsIGl0IGlzIHVua25vd24gd2hldGhlciB0aGUgY29uZGl0aW9uIGhhcyByZXNvbHZlZCBvciBlbnRlcmVkIHJlbWlzc2lvbjsgYXBwbGljYXRpb25zIGFuZCB1c2VycyBzaG91bGQgZ2VuZXJhbGx5IGFzc3VtZSB0aGF0IHRoZSBjb25kaXRpb24gaXMgc3RpbGwgdmFsaWQuICBXaGVuIGFiYXRlbWVudFN0cmluZyBleGlzdHMsIGl0IGltcGxpZXMgdGhlIGNvbmRpdGlvbiBpcyBhYmF0ZWQuXHJcbiAgICovXHJcbiAgYWJhdGVtZW50U3RyaW5nPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29uZGl0aW9uLmFiYXRlbWVudFt4XVxyXG4gICAqL1xyXG4gIF9hYmF0ZW1lbnRTdHJpbmc/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFzc2VydGVkRGF0ZSByZXByZXNlbnRzIHRoZSBkYXRlIHdoZW4gdGhpcyBwYXJ0aWN1bGFyIENvbmRpdGlvbiByZWNvcmQgd2FzIGNyZWF0ZWQgaW4gdGhlIEVIUiwgbm90IHRoZSBkYXRlIG9mIHRoZSBtb3N0IHJlY2VudCB1cGRhdGUgaW4gdGVybXMgb2Ygd2hlbiBzZXZlcml0eSwgYWJhdGVtZW50LCBldGMuIHdlcmUgc3BlY2lmaWVkLiDCoFRoZSBkYXRlIG9mIHRoZSBsYXN0IHJlY29yZCBtb2RpZmljYXRpb24gY2FuIGJlIHJldHJpZXZlZCBmcm9tIHRoZSByZXNvdXJjZSBtZXRhZGF0YS5cclxuICAgKi9cclxuICBhc3NlcnRlZERhdGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb25kaXRpb24uYXNzZXJ0ZWREYXRlXHJcbiAgICovXHJcbiAgX2Fzc2VydGVkRGF0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJbmRpdmlkdWFsIHdobyBpcyBtYWtpbmcgdGhlIGNvbmRpdGlvbiBzdGF0ZW1lbnQuXHJcbiAgICovXHJcbiAgYXNzZXJ0ZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljYWwgc3RhZ2Ugb3IgZ3JhZGUgb2YgYSBjb25kaXRpb24uIE1heSBpbmNsdWRlIGZvcm1hbCBzZXZlcml0eSBhc3Nlc3NtZW50cy5cclxuICAgKi9cclxuICBzdGFnZT86IGZoaXIuQ29uZGl0aW9uU3RhZ2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBldmlkZW5jZSBtYXkgYmUgYSBzaW1wbGUgbGlzdCBvZiBjb2RlZCBzeW1wdG9tcy9tYW5pZmVzdGF0aW9ucywgb3IgcmVmZXJlbmNlcyB0byBvYnNlcnZhdGlvbnMgb3IgZm9ybWFsIGFzc2Vzc21lbnRzLCBvciBib3RoLlxyXG4gICAqL1xyXG4gIGV2aWRlbmNlPzogKGZoaXIuQ29uZGl0aW9uRXZpZGVuY2V8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgQ29uZGl0aW9uLiBUaGlzIGlzIGEgZ2VuZXJhbCBub3Rlcy9jb21tZW50cyBlbnRyeSAgZm9yIGRlc2NyaXB0aW9uIG9mIHRoZSBDb25kaXRpb24sIGl0cyBkaWFnbm9zaXMgYW5kIHByb2dub3Npcy5cclxuICAgKi9cclxuICBub3RlPzogKGZoaXIuQW5ub3RhdGlvbnxudWxsKVtdfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=