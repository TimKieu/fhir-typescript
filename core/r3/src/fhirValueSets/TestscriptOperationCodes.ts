// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/testscript-operation-codes|3.0.2

/**
 * This value set defines a set of codes that are used to indicate the supported operations of a testing engine or tool.
 */
export const TestscriptOperationCodes = {
  /**
   * apply: Realize a definition in a specific context
   */
  DollarApply: "apply",
  /**
   * batch: Update, create or delete a set of resources as independent actions.
   */
  Batch: "batch",
  /**
   * cancel: Cancel Task
   */
  DollarCancel: "cancel",
  /**
   * capabilities: Get a capability statement for the system.
   */
  Capabilities: "capabilities",
  /**
   * closure: Closure Table Maintenance
   */
  DollarClosure: "closure",
  /**
   * compose: Code Composition based on supplied properties
   */
  DollarCompose: "compose",
  /**
   * conforms: Test if a server implements a client's required operations
   */
  DollarConforms: "conforms",
  /**
   * create: Create a new resource with a server assigned id.
   */
  Create: "create",
  /**
   * data-requirements: Aggregates and return the parameters and data requirements as a single module definition library
   */
  DollarDataRequirements: "data-requirements",
  /**
   * delete: Delete a resource.
   */
  Delete: "delete",
  /**
   * deleteCondMultiple: Conditionally delete one or more resources based on search parameters.
   */
  ConditionalDeleteMultiple: "deleteCondMultiple",
  /**
   * deleteCondSingle: Conditionally delete a single resource based on search parameters.
   */
  ConditionalDeleteSingle: "deleteCondSingle",
  /**
   * document: Generate a Document
   */
  DollarDocument: "document",
  /**
   * evaluate: Evaluate DecisionSupportRule / DecisionSupportServiceModule
   */
  DollarEvaluate: "evaluate",
  /**
   * evaluate-measure: Evaluate Measure
   */
  DollarEvaluateMeasure: "evaluate-measure",
  /**
   * everything: Fetch Encounter/Patient Record
   */
  DollarEverything: "everything",
  /**
   * expand: Value Set Expansion
   */
  DollarExpand: "expand",
  /**
   * fail: Fail Task
   */
  DollarFail: "fail",
  /**
   * find: Find a functional list
   */
  DollarFind: "find",
  /**
   * finish: Finish Task
   */
  DollarFinish: "finish",
  /**
   * history: Retrieve the change history for a particular resource or resource type.
   */
  History: "history",
  /**
   * implements: Test if a server implements a client's required operations
   */
  DollarImplements: "implements",
  /**
   * lookup: Concept Look Up
   */
  DollarLookup: "lookup",
  /**
   * match: Find patient matches using MPI based logic
   */
  DollarMatch: "match",
  /**
   * meta: Access a list of profiles, tags, and security labels
   */
  DollarMeta: "meta",
  /**
   * meta-add: Add profiles, tags, and security labels to a resource
   */
  DollarMetaAdd: "meta-add",
  /**
   * meta-delete: Delete profiles, tags, and security labels for a resource
   */
  DollarMetaDelete: "meta-delete",
  /**
   * populate: Populate Questionnaire
   */
  DollarPopulate: "populate",
  /**
   * populatehtml: Generate HTML for Questionnaire
   */
  DollarPopulatehtml: "populatehtml",
  /**
   * populatelink: Generate a link to a Questionnaire completion webpage
   */
  DollarPopulatelink: "populatelink",
  /**
   * process-message: Process Message
   */
  DollarProcessMessage: "process-message",
  /**
   * questionnaire: Build Questionnaire
   */
  DollarQuestionnaire: "questionnaire",
  /**
   * read: Read the current state of the resource.
   */
  Read: "read",
  /**
   * release: Release Task
   */
  DollarRelease: "release",
  /**
   * reserve: Reserve Task
   */
  DollarReserve: "reserve",
  /**
   * resume: Resume Task
   */
  DollarResume: "resume",
  /**
   * search: Search based on some filter criteria.
   */
  Search: "search",
  /**
   * set-input: Set Task Input
   */
  DollarSetInput: "set-input",
  /**
   * set-output: Set Task Output
   */
  DollarSetOutput: "set-output",
  /**
   * start: Start Task
   */
  DollarStart: "start",
  /**
   * stats: Observation Statistics
   */
  DollarStats: "stats",
  /**
   * stop: Stop Task
   */
  DollarStop: "stop",
  /**
   * subset: Fetch a subset of the CapabilityStatement resource
   */
  DollarSubset: "subset",
  /**
   * subsumes: Determine if code A is subsumed by code B
   */
  DollarSubsumes: "subsumes",
  /**
   * suspend: Suspend Task
   */
  DollarSuspend: "suspend",
  /**
   * transaction: Update, create or delete a set of resources as a single transaction.
   */
  Transaction: "transaction",
  /**
   * transform: Model Instance Transformation
   */
  DollarTransform: "transform",
  /**
   * translate: Concept Translation
   */
  DollarTranslate: "translate",
  /**
   * update: Update an existing resource by its id.
   */
  Update: "update",
  /**
   * updateCreate: Update an existing resource by its id (or create it if it is new).
   */
  CreateUsingUpdate: "updateCreate",
  /**
   * validate: Validate a resource
   */
  DollarValidate: "validate",
  /**
   * validate-code: Value Set based Validation
   */
  DollarValidateCode: "validate-code",
  /**
   * vread: Read the state of a specific version of the resource.
   */
  VersionRead: "vread",
} as const;

/**
 * This value set defines a set of codes that are used to indicate the supported operations of a testing engine or tool.
 */
export type TestscriptOperationCodeType = typeof TestscriptOperationCodes[keyof typeof TestscriptOperationCodes];
