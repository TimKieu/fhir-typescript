// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/property-representation|3.0.2

import { CodingArgs } from '../fhir/Coding.js'

/**
 * How a property is represented when serialized.
 */
export type PropertyRepresentationCodingType = {
  /**
   * cdaText: Use CDA narrative instead of XHTML
   */
  CDATextFormat: CodingArgs;
  /**
   * typeAttr: The type of this element is indicated using xsi:type
   */
  TypeAttribute: CodingArgs;
  /**
   * xhtml: The property is represented using XHTML
   */
  XHTML: CodingArgs;
  /**
   * xmlAttr: In XML, this property is represented as an attribute not an element.
   */
  XMLAttribute: CodingArgs;
  /**
   * xmlText: This element is represented using the XML text attribute (primitives only)
   */
  XMLText: CodingArgs;
}

/**
 * How a property is represented when serialized.
 */
export const PropertyRepresentationCodings:PropertyRepresentationCodingType = {
  /**
   * cdaText: Use CDA narrative instead of XHTML
   */
  CDATextFormat: {
    display: "CDA Text Format",
    code: "cdaText",
    system: "http://hl7.org/fhir/property-representation",
  },
  /**
   * typeAttr: The type of this element is indicated using xsi:type
   */
  TypeAttribute: {
    display: "Type Attribute",
    code: "typeAttr",
    system: "http://hl7.org/fhir/property-representation",
  },
  /**
   * xhtml: The property is represented using XHTML
   */
  XHTML: {
    display: "XHTML",
    code: "xhtml",
    system: "http://hl7.org/fhir/property-representation",
  },
  /**
   * xmlAttr: In XML, this property is represented as an attribute not an element.
   */
  XMLAttribute: {
    display: "XML Attribute",
    code: "xmlAttr",
    system: "http://hl7.org/fhir/property-representation",
  },
  /**
   * xmlText: This element is represented using the XML text attribute (primitives only)
   */
  XMLText: {
    display: "XML Text",
    code: "xmlText",
    system: "http://hl7.org/fhir/property-representation",
  },
} as const;
