// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Attachment

import * as fhir from '../fhir.js';

// @ts-ignore
import { LanguagesCodes,  LanguagesCodeType } from '../fhirValueSets/LanguagesCodes.js';
// @ts-ignore
import { LanguagesVsValidation } from '../fhirValueSets/LanguagesVsValidation.js';
/**
 * Valid arguments for the Attachment type.
 */
export interface AttachmentArgs extends fhir.FhirElementArgs {
  /**
   * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
   */
  contentType?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.contentType
   */
  _contentType?:fhir.FhirElementArgs;
  /**
   * The human language of the content. The value can be any valid value according to BCP 47.
   */
  language?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.language
   */
  _language?:fhir.FhirElementArgs;
  /**
   * The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
   */
  data?: fhir.FhirBase64Binary|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.data
   */
  _data?:fhir.FhirElementArgs;
  /**
   * If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
   */
  size?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Attachment.size
   */
  _size?:fhir.FhirElementArgs;
  /**
   * The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded.
   */
  hash?: fhir.FhirBase64Binary|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.hash
   */
  _hash?:fhir.FhirElementArgs;
  /**
   * A label or set of text to display in place of the data.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * The date that the attachment was first created.
   */
  creation?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Attachment.creation
   */
  _creation?:fhir.FhirElementArgs;
}

/**
 * For referring to data content defined in other formats.
 */
export class Attachment extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Attachment';
  /**
   * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
   */
  public contentType?: fhir.FhirCode|undefined;
  /**
   * The human language of the content. The value can be any valid value according to BCP 47.
   */
  public language?: fhir.FhirCode|undefined;
  /**
   * The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
   */
  public data?: fhir.FhirBase64Binary|undefined;
  /**
   * If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
   */
  public size?: fhir.FhirUnsignedInt|undefined;
  /**
   * The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded.
   */
  public hash?: fhir.FhirBase64Binary|undefined;
  /**
   * A label or set of text to display in place of the data.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * The date that the attachment was first created.
   */
  public creation?: fhir.FhirDateTime|undefined;
  /**
   * Default constructor for Attachment - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AttachmentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['contentType'] !== undefined) { this.contentType = new fhir.FhirCode({value: source.contentType}, options); }
    if (source['_contentType']) {
      if (this.contentType) { this.contentType.addExtendedProperties(source._contentType!); }
      else { this.contentType = new fhir.FhirCode(source._contentType as Partial<fhir.FhirCodeArgs>, options); }
    }
    if (source['language'] !== undefined) { this.language = new fhir.FhirCode({value: source.language}, options); }
    if (source['_language']) {
      if (this.language) { this.language.addExtendedProperties(source._language!); }
      else { this.language = new fhir.FhirCode(source._language as Partial<fhir.FhirCodeArgs>, options); }
    }
    if (source['data'] !== undefined) { this.data = new fhir.FhirBase64Binary({value: source.data}, options); }
    if (source['_data']) {
      if (this.data) { this.data.addExtendedProperties(source._data!); }
      else { this.data = new fhir.FhirBase64Binary(source._data as Partial<fhir.FhirBase64BinaryArgs>, options); }
    }
    if (source['url'] !== undefined) { this.url = new fhir.FhirUri({value: source.url}, options); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>, options); }
    }
    if (source['size'] !== undefined) { this.size = new fhir.FhirUnsignedInt({value: source.size}, options); }
    if (source['_size']) {
      if (this.size) { this.size.addExtendedProperties(source._size!); }
      else { this.size = new fhir.FhirUnsignedInt(source._size as Partial<fhir.FhirUnsignedIntArgs>, options); }
    }
    if (source['hash'] !== undefined) { this.hash = new fhir.FhirBase64Binary({value: source.hash}, options); }
    if (source['_hash']) {
      if (this.hash) { this.hash.addExtendedProperties(source._hash!); }
      else { this.hash = new fhir.FhirBase64Binary(source._hash as Partial<fhir.FhirBase64BinaryArgs>, options); }
    }
    if (source['title'] !== undefined) { this.title = new fhir.FhirString({value: source.title}, options); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['creation'] !== undefined) { this.creation = new fhir.FhirDateTime({value: source.creation}, options); }
    if (source['_creation']) {
      if (this.creation) { this.creation.addExtendedProperties(source._creation!); }
      else { this.creation = new fhir.FhirDateTime(source._creation as Partial<fhir.FhirDateTimeArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Attachment' }
    iss.push(...this.vOS('contentType',exp));
    iss.push(...this.vOS('language',exp));
    iss.push(...this.vOS('data',exp));
    iss.push(...this.vOS('url',exp));
    iss.push(...this.vOS('size',exp));
    iss.push(...this.vOS('hash',exp));
    iss.push(...this.vOS('title',exp));
    iss.push(...this.vOS('creation',exp));
    return iss;
  }
}
