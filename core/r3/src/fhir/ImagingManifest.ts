// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingManifest

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the ImagingManifestStudySeriesInstance type.
 */
export interface ImagingManifestStudySeriesInstanceArgs extends fhir.BackboneElementArgs {
  /**
   * SOP class UID identifies the type of the selected instances, e.g. CT image, Gray scale softcopy presentation state, ECG waveform, etc.
   */
  sopClass: fhir.FhirOid|string|undefined;
  /**
   * Extended properties for primitive element: ImagingManifest.study.series.instance.sopClass
   */
  _sopClass?:fhir.FhirElementArgs;
  /**
   * SOP instance UID identifies the instance.
   */
  uid: fhir.FhirOid|string|undefined;
  /**
   * Extended properties for primitive element: ImagingManifest.study.series.instance.uid
   */
  _uid?:fhir.FhirElementArgs;
}

/**
 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
 */
export class ImagingManifestStudySeriesInstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImagingManifestStudySeriesInstance';
  /**
   * SOP class UID identifies the type of the selected instances, e.g. CT image, Gray scale softcopy presentation state, ECG waveform, etc.
   */
  public sopClass: fhir.FhirOid|null;
  /**
   * SOP instance UID identifies the instance.
   */
  public uid: fhir.FhirOid|null;
  /**
   * Default constructor for ImagingManifestStudySeriesInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImagingManifestStudySeriesInstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sopClass']) { this.sopClass = new fhir.FhirOid({value: source.sopClass}); }
    else { this.sopClass = null; }
    if (source['_sopClass']) {
      if (this.sopClass) { this.sopClass.addExtendedProperties(source._sopClass!); }
      else { this.sopClass = new fhir.FhirOid(source._sopClass as Partial<fhir.FhirOidArgs>); }
    }
    if (source['uid']) { this.uid = new fhir.FhirOid({value: source.uid}); }
    else { this.uid = null; }
    if (source['_uid']) {
      if (this.uid) { this.uid.addExtendedProperties(source._uid!); }
      else { this.uid = new fhir.FhirOid(source._uid as Partial<fhir.FhirOidArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImagingManifest.study.series.instance' }
    iss.push(...this.vRS('sopClass',exp));
    iss.push(...this.vRS('uid',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImagingManifestStudySeries type.
 */
export interface ImagingManifestStudySeriesArgs extends fhir.BackboneElementArgs {
  /**
   * Series instance UID of the SOP instances in the selection.
   */
  uid: fhir.FhirOid|string|undefined;
  /**
   * Extended properties for primitive element: ImagingManifest.study.series.uid
   */
  _uid?:fhir.FhirElementArgs;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type.
   */
  endpoint?: fhir.ReferenceArgs[]|undefined;
  /**
   * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
   */
  instance: fhir.ImagingManifestStudySeriesInstanceArgs[]|null;
}

/**
 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
 */
export class ImagingManifestStudySeries extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImagingManifestStudySeries';
  /**
   * Series instance UID of the SOP instances in the selection.
   */
  public uid: fhir.FhirOid|null;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type.
   */
  public endpoint: fhir.Reference[];
  /**
   * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
   */
  public instance: fhir.ImagingManifestStudySeriesInstance[];
  /**
   * Default constructor for ImagingManifestStudySeries - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImagingManifestStudySeriesArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['uid']) { this.uid = new fhir.FhirOid({value: source.uid}); }
    else { this.uid = null; }
    if (source['_uid']) {
      if (this.uid) { this.uid.addExtendedProperties(source._uid!); }
      else { this.uid = new fhir.FhirOid(source._uid as Partial<fhir.FhirOidArgs>); }
    }
    if (source['endpoint']) { this.endpoint = source.endpoint.map((x) => new fhir.Reference(x)); }
    else { this.endpoint = []; }
    if (source['instance']) { this.instance = source.instance.map((x) => new fhir.ImagingManifestStudySeriesInstance(x)); }
    else { this.instance = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImagingManifest.study.series' }
    iss.push(...this.vRS('uid',exp));
    iss.push(...this.vOA('endpoint',exp));
    iss.push(...this.vRA('instance',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImagingManifestStudy type.
 */
export interface ImagingManifestStudyArgs extends fhir.BackboneElementArgs {
  /**
   * Study instance UID of the SOP instances in the selection.
   */
  uid: fhir.FhirOid|string|undefined;
  /**
   * Extended properties for primitive element: ImagingManifest.study.uid
   */
  _uid?:fhir.FhirElementArgs;
  /**
   * Reference to the Imaging Study in FHIR form.
   */
  imagingStudy?: fhir.ReferenceArgs|undefined;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type.
   */
  endpoint?: fhir.ReferenceArgs[]|undefined;
  /**
   * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
   */
  series: fhir.ImagingManifestStudySeriesArgs[]|null;
}

/**
 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
 */
export class ImagingManifestStudy extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImagingManifestStudy';
  /**
   * Study instance UID of the SOP instances in the selection.
   */
  public uid: fhir.FhirOid|null;
  /**
   * Reference to the Imaging Study in FHIR form.
   */
  public imagingStudy?: fhir.Reference|undefined;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type.
   */
  public endpoint: fhir.Reference[];
  /**
   * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
   */
  public series: fhir.ImagingManifestStudySeries[];
  /**
   * Default constructor for ImagingManifestStudy - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImagingManifestStudyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['uid']) { this.uid = new fhir.FhirOid({value: source.uid}); }
    else { this.uid = null; }
    if (source['_uid']) {
      if (this.uid) { this.uid.addExtendedProperties(source._uid!); }
      else { this.uid = new fhir.FhirOid(source._uid as Partial<fhir.FhirOidArgs>); }
    }
    if (source['imagingStudy']) { this.imagingStudy = new fhir.Reference(source.imagingStudy); }
    if (source['endpoint']) { this.endpoint = source.endpoint.map((x) => new fhir.Reference(x)); }
    else { this.endpoint = []; }
    if (source['series']) { this.series = source.series.map((x) => new fhir.ImagingManifestStudySeries(x)); }
    else { this.series = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImagingManifest.study' }
    iss.push(...this.vRS('uid',exp));
    iss.push(...this.vOS('imagingStudy',exp));
    iss.push(...this.vOA('endpoint',exp));
    iss.push(...this.vRA('series',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImagingManifest type.
 */
export interface ImagingManifestArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ImagingManifest"|undefined;
  /**
   * Unique identifier of the DICOM Key Object Selection (KOS) that this resource represents.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * SOP instances selected in the ImagingManifest can be from different studies, but must be of the same patient.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
   */
  authoringTime?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ImagingManifest.authoringTime
   */
  _authoringTime?:fhir.FhirElementArgs;
  /**
   * Author of ImagingManifest. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
   */
  author?: fhir.ReferenceArgs|undefined;
  /**
   * Free text narrative description of the ImagingManifest.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImagingManifest.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
   */
  study: fhir.ImagingManifestStudyArgs[]|null;
}

/**
 * A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection.
 */
export class ImagingManifest extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImagingManifest';
  /**
   * Resource Type Name
   */
  public override resourceType: "ImagingManifest";
  /**
   * Unique identifier of the DICOM Key Object Selection (KOS) that this resource represents.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * SOP instances selected in the ImagingManifest can be from different studies, but must be of the same patient.
   */
  public patient: fhir.Reference|null;
  /**
   * Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
   */
  public authoringTime?: fhir.FhirDateTime|undefined;
  /**
   * Author of ImagingManifest. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Free text narrative description of the ImagingManifest.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
   */
  public study: fhir.ImagingManifestStudy[];
  /**
   * Default constructor for ImagingManifest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImagingManifestArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ImagingManifest';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['authoringTime']) { this.authoringTime = new fhir.FhirDateTime({value: source.authoringTime}); }
    if (source['_authoringTime']) {
      if (this.authoringTime) { this.authoringTime.addExtendedProperties(source._authoringTime!); }
      else { this.authoringTime = new fhir.FhirDateTime(source._authoringTime as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['author']) { this.author = new fhir.Reference(source.author); }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['study']) { this.study = source.study.map((x) => new fhir.ImagingManifestStudy(x)); }
    else { this.study = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImagingManifest' }
    iss.push(...this.vOS('identifier',exp));
    iss.push(...this.vRS('patient',exp));
    iss.push(...this.vOS('authoringTime',exp));
    iss.push(...this.vOS('author',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vRA('study',exp));
    return iss;
  }
}
