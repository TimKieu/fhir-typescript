// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: RelatedArtifact

import * as fhir from '../fhir.js';

// @ts-ignore
import { RelatedArtifactTypeCodes,  RelatedArtifactTypeCodeType } from '../fhirValueSets/RelatedArtifactTypeCodes.js';
// @ts-ignore
import { RelatedArtifactTypeVsValidation } from '../fhirValueSets/RelatedArtifactTypeVsValidation.js';
/**
 * Valid arguments for the RelatedArtifact type.
 */
export interface RelatedArtifactArgs extends fhir.FhirElementArgs {
  /**
   * The type of relationship to the related artifact.
   */
  type: fhir.FhirCode<RelatedArtifactTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  display?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.display
   */
  _display?:fhir.FhirElementArgs;
  /**
   * Additional structured information about citations should be captured as extensions.
   */
  citation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.citation
   */
  _citation?:fhir.FhirElementArgs;
  /**
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: RelatedArtifact.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  document?: fhir.AttachmentArgs|undefined;
  /**
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  resource?: fhir.ReferenceArgs|undefined;
}

/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export class RelatedArtifact extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'RelatedArtifact';
  /**
   * The type of relationship to the related artifact.
   */
  public type: fhir.FhirCode<RelatedArtifactTypeCodeType>|null;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  public display?: fhir.FhirString|undefined;
  /**
   * Additional structured information about citations should be captured as extensions.
   */
  public citation?: fhir.FhirString|undefined;
  /**
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  public document?: fhir.Attachment|undefined;
  /**
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  public resource?: fhir.Reference|undefined;
  /**
   * Default constructor for RelatedArtifact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RelatedArtifactArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type'] !== undefined) { this.type = new fhir.FhirCode<RelatedArtifactTypeCodeType>({value: source.type}, options); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<RelatedArtifactTypeCodeType>(source._type as Partial<fhir.FhirCode>, options); }
    }
    if (source['display'] !== undefined) { this.display = new fhir.FhirString({value: source.display}, options); }
    if (source['_display']) {
      if (this.display) { this.display.addExtendedProperties(source._display!); }
      else { this.display = new fhir.FhirString(source._display as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['citation'] !== undefined) { this.citation = new fhir.FhirString({value: source.citation}, options); }
    if (source['_citation']) {
      if (this.citation) { this.citation.addExtendedProperties(source._citation!); }
      else { this.citation = new fhir.FhirString(source._citation as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['url'] !== undefined) { this.url = new fhir.FhirUri({value: source.url}, options); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>, options); }
    }
    if (source['document']) { this.document = new fhir.Attachment(source.document, options); }
    if (source['resource']) { this.resource = new fhir.Reference(source.resource, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'RelatedArtifact' }
    iss.push(...this.vRSV('type',exp,'RelatedArtifactType',RelatedArtifactTypeVsValidation,'r'));
    iss.push(...this.vOS('display',exp));
    iss.push(...this.vOS('citation',exp));
    iss.push(...this.vOS('url',exp));
    iss.push(...this.vOS('document',exp));
    iss.push(...this.vOS('resource',exp));
    return iss;
  }
}
