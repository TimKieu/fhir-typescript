// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureMap

import * as fhir from '../fhir.js';

// @ts-ignore
import { MapModelModeCodes,  MapModelModeCodeType } from '../fhirValueSets/MapModelModeCodes.js';
// @ts-ignore
import { MapModelModeVsValidation } from '../fhirValueSets/MapModelModeVsValidation.js';
// @ts-ignore
import { MapInputModeCodes,  MapInputModeCodeType } from '../fhirValueSets/MapInputModeCodes.js';
// @ts-ignore
import { MapInputModeVsValidation } from '../fhirValueSets/MapInputModeVsValidation.js';
// @ts-ignore
import { MapSourceListModeCodes,  MapSourceListModeCodeType } from '../fhirValueSets/MapSourceListModeCodes.js';
// @ts-ignore
import { MapSourceListModeVsValidation } from '../fhirValueSets/MapSourceListModeVsValidation.js';
// @ts-ignore
import { MapContextTypeCodes,  MapContextTypeCodeType } from '../fhirValueSets/MapContextTypeCodes.js';
// @ts-ignore
import { MapContextTypeVsValidation } from '../fhirValueSets/MapContextTypeVsValidation.js';
// @ts-ignore
import { MapTargetListModeCodes,  MapTargetListModeCodeType } from '../fhirValueSets/MapTargetListModeCodes.js';
// @ts-ignore
import { MapTargetListModeVsValidation } from '../fhirValueSets/MapTargetListModeVsValidation.js';
// @ts-ignore
import { MapTransformCodes,  MapTransformCodeType } from '../fhirValueSets/MapTransformCodes.js';
// @ts-ignore
import { MapTransformVsValidation } from '../fhirValueSets/MapTransformVsValidation.js';
// @ts-ignore
import { MapGroupTypeModeCodes,  MapGroupTypeModeCodeType } from '../fhirValueSets/MapGroupTypeModeCodes.js';
// @ts-ignore
import { MapGroupTypeModeVsValidation } from '../fhirValueSets/MapGroupTypeModeVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { JurisdictionCodes,  JurisdictionCodeType } from '../fhirValueSets/JurisdictionCodes.js';
// @ts-ignore
import { JurisdictionVsValidation } from '../fhirValueSets/JurisdictionVsValidation.js';
/**
 * Valid arguments for the StructureMapStructure type.
 */
export interface StructureMapStructureArgs extends fhir.BackboneElementArgs {
  /**
   * The canonical URL that identifies the structure.
   */
  url: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.structure.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * How the referenced structure is used in this mapping.
   */
  mode: fhir.FhirCode<MapModelModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.structure.mode
   */
  _mode?:fhir.FhirElementArgs;
  /**
   * This is needed if both types have the same name (e.g. version conversion).
   */
  alias?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.structure.alias
   */
  _alias?:fhir.FhirElementArgs;
  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.structure.documentation
   */
  _documentation?:fhir.FhirElementArgs;
}

/**
 * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
 */
export class StructureMapStructure extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapStructure';
  /**
   * The canonical URL that identifies the structure.
   */
  public url: fhir.FhirUri|null;
  /**
   * How the referenced structure is used in this mapping.
   */
  public mode: fhir.FhirCode<MapModelModeCodeType>|null;
  /**
   * This is needed if both types have the same name (e.g. version conversion).
   */
  public alias?: fhir.FhirString|undefined;
  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapStructure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapStructureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    else { this.url = null; }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['mode']) { this.mode = new fhir.FhirCode<MapModelModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['_mode']) {
      if (this.mode) { this.mode.addExtendedProperties(source._mode!); }
      else { this.mode = new fhir.FhirCode<MapModelModeCodeType>(source._mode as Partial<fhir.FhirCode>); }
    }
    if (source['alias']) { this.alias = new fhir.FhirString({value: source.alias}); }
    if (source['_alias']) {
      if (this.alias) { this.alias.addExtendedProperties(source._alias!); }
      else { this.alias = new fhir.FhirString(source._alias as Partial<fhir.FhirStringArgs>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.structure' }
    this.vRS('url',exp)
    this.vRSV('mode',exp,'MapModelMode',MapModelModeVsValidation,'r')
    this.vOS('alias',exp)
    this.vOS('documentation',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroupInput type.
 */
export interface StructureMapGroupInputArgs extends fhir.BackboneElementArgs {
  /**
   * Name for this instance of data.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.input.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Type for this instance of data.
   */
  type?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.input.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * Mode for this instance of data.
   */
  mode: fhir.FhirCode<MapInputModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.input.mode
   */
  _mode?:fhir.FhirElementArgs;
  /**
   * Documentation for this instance of data.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.input.documentation
   */
  _documentation?:fhir.FhirElementArgs;
}

/**
 * If no inputs are named, then the entry mappings are type based.
 */
export class StructureMapGroupInput extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroupInput';
  /**
   * Name for this instance of data.
   */
  public name: fhir.FhirId|null;
  /**
   * Type for this instance of data.
   */
  public type?: fhir.FhirString|undefined;
  /**
   * Mode for this instance of data.
   */
  public mode: fhir.FhirCode<MapInputModeCodeType>|null;
  /**
   * Documentation for this instance of data.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapGroupInput - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupInputArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirId(source._name as Partial<fhir.FhirIdArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirString({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirString(source._type as Partial<fhir.FhirStringArgs>); }
    }
    if (source['mode']) { this.mode = new fhir.FhirCode<MapInputModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['_mode']) {
      if (this.mode) { this.mode.addExtendedProperties(source._mode!); }
      else { this.mode = new fhir.FhirCode<MapInputModeCodeType>(source._mode as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group.input' }
    this.vRS('name',exp)
    this.vOS('type',exp)
    this.vRSV('mode',exp,'MapInputMode',MapInputModeVsValidation,'r')
    this.vOS('documentation',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleSource type.
 */
export interface StructureMapGroupRuleSourceArgs extends fhir.BackboneElementArgs {
  /**
   * Type or variable this rule applies to.
   */
  context: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.context
   */
  _context?:fhir.FhirElementArgs;
  /**
   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
   */
  min?: fhir.FhirInteger|number|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.min
   */
  _min?:fhir.FhirElementArgs;
  /**
   * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
   */
  max?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.max
   */
  _max?:fhir.FhirElementArgs;
  /**
   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
   */
  type?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValue?: fhir.FhirBase64Binary|fhir.FhirBoolean|fhir.FhirCode|fhir.FhirDate|fhir.FhirDateTime|fhir.FhirDecimal|fhir.FhirId|fhir.FhirInstant|fhir.FhirInteger|fhir.FhirMarkdown|fhir.FhirOid|fhir.FhirPositiveInt|fhir.FhirString|fhir.FhirTime|fhir.FhirUnsignedInt|fhir.FhirUri|fhir.Address|fhir.Age|fhir.Annotation|fhir.Attachment|fhir.CodeableConcept|fhir.Coding|fhir.ContactPoint|fhir.Count|fhir.Distance|fhir.Duration|fhir.HumanName|fhir.Identifier|fhir.Money|fhir.Period|fhir.Quantity|fhir.Range|fhir.Ratio|fhir.Reference|fhir.SampledData|fhir.Signature|fhir.Timing|fhir.Meta|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueBase64Binary?: fhir.FhirBase64Binary|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCode?: fhir.FhirCode|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDate?: fhir.FhirDate|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDecimal?: fhir.FhirDecimal|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueId?: fhir.FhirId|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueInstant?: fhir.FhirInstant|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueInteger?: fhir.FhirInteger|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMarkdown?: fhir.FhirMarkdown|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueOid?: fhir.FhirOid|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValuePositiveInt?: fhir.FhirPositiveInt|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueString?: fhir.FhirString|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueTime?: fhir.FhirTime|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUnsignedInt?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueUri?: fhir.FhirUri|string|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAddress?: fhir.AddressArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAge?: fhir.AgeArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAnnotation?: fhir.AnnotationArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAttachment?: fhir.AttachmentArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCoding?: fhir.CodingArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueContactPoint?: fhir.ContactPointArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCount?: fhir.CountArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDistance?: fhir.DistanceArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDuration?: fhir.DurationArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueHumanName?: fhir.HumanNameArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueIdentifier?: fhir.IdentifierArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMoney?: fhir.MoneyArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValuePeriod?: fhir.PeriodArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRange?: fhir.RangeArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRatio?: fhir.RatioArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueReference?: fhir.ReferenceArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueSampledData?: fhir.SampledDataArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueSignature?: fhir.SignatureArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueTiming?: fhir.TimingArgs|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMeta?: fhir.MetaArgs|undefined;
  /**
   * Optional field for this source.
   */
  element?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.element
   */
  _element?:fhir.FhirElementArgs;
  /**
   * How to handle the list mode for this element.
   */
  listMode?: fhir.FhirCode<MapSourceListModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.listMode
   */
  _listMode?:fhir.FhirElementArgs;
  /**
   * Named context for field, if a field is specified.
   */
  variable?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.variable
   */
  _variable?:fhir.FhirElementArgs;
  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  condition?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.condition
   */
  _condition?:fhir.FhirElementArgs;
  /**
   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
   */
  check?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.source.check
   */
  _check?:fhir.FhirElementArgs;
}

/**
 * Source inputs to the mapping.
 */
export class StructureMapGroupRuleSource extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroupRuleSource';
  /**
   * Type or variable this rule applies to.
   */
  public context: fhir.FhirId|null;
  /**
   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
   */
  public min?: fhir.FhirInteger|undefined;
  /**
   * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
   */
  public max?: fhir.FhirString|undefined;
  /**
   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
   */
  public type?: fhir.FhirString|undefined;
  /**
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  public defaultValue?: (fhir.FhirBase64Binary|fhir.FhirBoolean|fhir.FhirCode|fhir.FhirDate|fhir.FhirDateTime|fhir.FhirDecimal|fhir.FhirId|fhir.FhirInstant|fhir.FhirInteger|fhir.FhirMarkdown|fhir.FhirOid|fhir.FhirPositiveInt|fhir.FhirString|fhir.FhirTime|fhir.FhirUnsignedInt|fhir.FhirUri|fhir.Address|fhir.Age|fhir.Annotation|fhir.Attachment|fhir.CodeableConcept|fhir.Coding|fhir.ContactPoint|fhir.Count|fhir.Distance|fhir.Duration|fhir.HumanName|fhir.Identifier|fhir.Money|fhir.Period|fhir.Quantity|fhir.Range|fhir.Ratio|fhir.Reference|fhir.SampledData|fhir.Signature|fhir.Timing|fhir.Meta)|undefined;
  /**
   * Internal flag to properly serialize choice-type element StructureMap.group.rule.source.defaultValue[x]
   */
  protected static readonly _fts_defaultValueIsChoice:true = true;
  /**
   * Optional field for this source.
   */
  public element?: fhir.FhirString|undefined;
  /**
   * How to handle the list mode for this element.
   */
  public listMode?: fhir.FhirCode<MapSourceListModeCodeType>|undefined;
  /**
   * Named context for field, if a field is specified.
   */
  public variable?: fhir.FhirId|undefined;
  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  public condition?: fhir.FhirString|undefined;
  /**
   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
   */
  public check?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapGroupRuleSource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleSourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['context']) { this.context = new fhir.FhirId({value: source.context}); }
    else { this.context = null; }
    if (source['_context']) {
      if (this.context) { this.context.addExtendedProperties(source._context!); }
      else { this.context = new fhir.FhirId(source._context as Partial<fhir.FhirIdArgs>); }
    }
    if (source['min']) { this.min = new fhir.FhirInteger({value: source.min}); }
    if (source['_min']) {
      if (this.min) { this.min.addExtendedProperties(source._min!); }
      else { this.min = new fhir.FhirInteger(source._min as Partial<fhir.FhirIntegerArgs>); }
    }
    if (source['max']) { this.max = new fhir.FhirString({value: source.max}); }
    if (source['_max']) {
      if (this.max) { this.max.addExtendedProperties(source._max!); }
      else { this.max = new fhir.FhirString(source._max as Partial<fhir.FhirStringArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirString({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirString(source._type as Partial<fhir.FhirStringArgs>); }
    }
    if (source['defaultValue']) { this.defaultValue = source.defaultValue; }
    else if (source['defaultValueBase64Binary']) { this.defaultValue = new fhir.FhirBase64Binary({value: source.defaultValueBase64Binary}); }
    else if (source['defaultValueBoolean']) { this.defaultValue = new fhir.FhirBoolean({value: source.defaultValueBoolean}); }
    else if (source['defaultValueCode']) { this.defaultValue = new fhir.FhirCode({value: source.defaultValueCode}); }
    else if (source['defaultValueDate']) { this.defaultValue = new fhir.FhirDate({value: source.defaultValueDate}); }
    else if (source['defaultValueDateTime']) { this.defaultValue = new fhir.FhirDateTime({value: source.defaultValueDateTime}); }
    else if (source['defaultValueDecimal']) { this.defaultValue = new fhir.FhirDecimal({value: source.defaultValueDecimal}); }
    else if (source['defaultValueId']) { this.defaultValue = new fhir.FhirId({value: source.defaultValueId}); }
    else if (source['defaultValueInstant']) { this.defaultValue = new fhir.FhirInstant({value: source.defaultValueInstant}); }
    else if (source['defaultValueInteger']) { this.defaultValue = new fhir.FhirInteger({value: source.defaultValueInteger}); }
    else if (source['defaultValueMarkdown']) { this.defaultValue = new fhir.FhirMarkdown({value: source.defaultValueMarkdown}); }
    else if (source['defaultValueOid']) { this.defaultValue = new fhir.FhirOid({value: source.defaultValueOid}); }
    else if (source['defaultValuePositiveInt']) { this.defaultValue = new fhir.FhirPositiveInt({value: source.defaultValuePositiveInt}); }
    else if (source['defaultValueString']) { this.defaultValue = new fhir.FhirString({value: source.defaultValueString}); }
    else if (source['defaultValueTime']) { this.defaultValue = new fhir.FhirTime({value: source.defaultValueTime}); }
    else if (source['defaultValueUnsignedInt']) { this.defaultValue = new fhir.FhirUnsignedInt({value: source.defaultValueUnsignedInt}); }
    else if (source['defaultValueUri']) { this.defaultValue = new fhir.FhirUri({value: source.defaultValueUri}); }
    else if (source['defaultValueAddress']) { this.defaultValue = new fhir.Address(source.defaultValueAddress); }
    else if (source['defaultValueAge']) { this.defaultValue = new fhir.Age(source.defaultValueAge); }
    else if (source['defaultValueAnnotation']) { this.defaultValue = new fhir.Annotation(source.defaultValueAnnotation); }
    else if (source['defaultValueAttachment']) { this.defaultValue = new fhir.Attachment(source.defaultValueAttachment); }
    else if (source['defaultValueCodeableConcept']) { this.defaultValue = new fhir.CodeableConcept(source.defaultValueCodeableConcept); }
    else if (source['defaultValueCoding']) { this.defaultValue = new fhir.Coding(source.defaultValueCoding); }
    else if (source['defaultValueContactPoint']) { this.defaultValue = new fhir.ContactPoint(source.defaultValueContactPoint); }
    else if (source['defaultValueCount']) { this.defaultValue = new fhir.Count(source.defaultValueCount); }
    else if (source['defaultValueDistance']) { this.defaultValue = new fhir.Distance(source.defaultValueDistance); }
    else if (source['defaultValueDuration']) { this.defaultValue = new fhir.Duration(source.defaultValueDuration); }
    else if (source['defaultValueHumanName']) { this.defaultValue = new fhir.HumanName(source.defaultValueHumanName); }
    else if (source['defaultValueIdentifier']) { this.defaultValue = new fhir.Identifier(source.defaultValueIdentifier); }
    else if (source['defaultValueMoney']) { this.defaultValue = new fhir.Money(source.defaultValueMoney); }
    else if (source['defaultValuePeriod']) { this.defaultValue = new fhir.Period(source.defaultValuePeriod); }
    else if (source['defaultValueQuantity']) { this.defaultValue = new fhir.Quantity(source.defaultValueQuantity); }
    else if (source['defaultValueRange']) { this.defaultValue = new fhir.Range(source.defaultValueRange); }
    else if (source['defaultValueRatio']) { this.defaultValue = new fhir.Ratio(source.defaultValueRatio); }
    else if (source['defaultValueReference']) { this.defaultValue = new fhir.Reference(source.defaultValueReference); }
    else if (source['defaultValueSampledData']) { this.defaultValue = new fhir.SampledData(source.defaultValueSampledData); }
    else if (source['defaultValueSignature']) { this.defaultValue = new fhir.Signature(source.defaultValueSignature); }
    else if (source['defaultValueTiming']) { this.defaultValue = new fhir.Timing(source.defaultValueTiming); }
    else if (source['defaultValueMeta']) { this.defaultValue = new fhir.Meta(source.defaultValueMeta); }
    if (source['element']) { this.element = new fhir.FhirString({value: source.element}); }
    if (source['_element']) {
      if (this.element) { this.element.addExtendedProperties(source._element!); }
      else { this.element = new fhir.FhirString(source._element as Partial<fhir.FhirStringArgs>); }
    }
    if (source['listMode']) { this.listMode = new fhir.FhirCode<MapSourceListModeCodeType>({value: source.listMode}); }
    if (source['_listMode']) {
      if (this.listMode) { this.listMode.addExtendedProperties(source._listMode!); }
      else { this.listMode = new fhir.FhirCode<MapSourceListModeCodeType>(source._listMode as Partial<fhir.FhirCode>); }
    }
    if (source['variable']) { this.variable = new fhir.FhirId({value: source.variable}); }
    if (source['_variable']) {
      if (this.variable) { this.variable.addExtendedProperties(source._variable!); }
      else { this.variable = new fhir.FhirId(source._variable as Partial<fhir.FhirIdArgs>); }
    }
    if (source['condition']) { this.condition = new fhir.FhirString({value: source.condition}); }
    if (source['_condition']) {
      if (this.condition) { this.condition.addExtendedProperties(source._condition!); }
      else { this.condition = new fhir.FhirString(source._condition as Partial<fhir.FhirStringArgs>); }
    }
    if (source['check']) { this.check = new fhir.FhirString({value: source.check}); }
    if (source['_check']) {
      if (this.check) { this.check.addExtendedProperties(source._check!); }
      else { this.check = new fhir.FhirString(source._check as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group.rule.source' }
    this.vRS('context',exp)
    this.vOS('min',exp)
    this.vOS('max',exp)
    this.vOS('type',exp)
    this.vOS('defaultValue',exp)
    this.vOS('element',exp)
    this.vOSV('listMode',exp,'MapSourceListMode',MapSourceListModeVsValidation,'r')
    this.vOS('variable',exp)
    this.vOS('condition',exp)
    this.vOS('check',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleTargetParameter type.
 */
export interface StructureMapGroupRuleTargetParameterArgs extends fhir.BackboneElementArgs {
  /**
   * Parameter value - variable or literal.
   */
  value?: fhir.FhirId|fhir.FhirString|fhir.FhirBoolean|fhir.FhirInteger|fhir.FhirDecimal|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueId?: fhir.FhirId|string|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueInteger?: fhir.FhirInteger|number|undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueDecimal?: fhir.FhirDecimal|number|undefined;
}

/**
 * Parameters to the transform.
 */
export class StructureMapGroupRuleTargetParameter extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroupRuleTargetParameter';
  /**
   * Parameter value - variable or literal.
   */
  public value: (fhir.FhirId|fhir.FhirString|fhir.FhirBoolean|fhir.FhirInteger|fhir.FhirDecimal)|null;
  /**
   * Internal flag to properly serialize choice-type element StructureMap.group.rule.target.parameter.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * Default constructor for StructureMapGroupRuleTargetParameter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleTargetParameterArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value']) { this.value = source.value; }
    else if (source['valueId']) { this.value = new fhir.FhirId({value: source.valueId}); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
    else if (source['valueInteger']) { this.value = new fhir.FhirInteger({value: source.valueInteger}); }
    else if (source['valueDecimal']) { this.value = new fhir.FhirDecimal({value: source.valueDecimal}); }
    else { this.value = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group.rule.target.parameter' }
    this.vRS('value',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleTarget type.
 */
export interface StructureMapGroupRuleTargetArgs extends fhir.BackboneElementArgs {
  /**
   * Type or variable this rule applies to.
   */
  context?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.context
   */
  _context?:fhir.FhirElementArgs;
  /**
   * How to interpret the context.
   */
  contextType?: fhir.FhirCode<MapContextTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.contextType
   */
  _contextType?:fhir.FhirElementArgs;
  /**
   * Field to create in the context.
   */
  element?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.element
   */
  _element?:fhir.FhirElementArgs;
  /**
   * Named context for field, if desired, and a field is specified.
   */
  variable?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.variable
   */
  _variable?:fhir.FhirElementArgs;
  /**
   * If field is a list, how to manage the list.
   */
  listMode?: fhir.FhirCode<MapTargetListModeCodeType>[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.listMode
   */
  _listMode?:(fhir.FhirElementArgs|null)[];
  /**
   * Internal rule reference for shared list items.
   */
  listRuleId?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.listRuleId
   */
  _listRuleId?:fhir.FhirElementArgs;
  /**
   * How the data is copied / created.
   */
  transform?: fhir.FhirCode<MapTransformCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.target.transform
   */
  _transform?:fhir.FhirElementArgs;
  /**
   * Parameters to the transform.
   */
  parameter?: fhir.StructureMapGroupRuleTargetParameterArgs[]|undefined;
}

/**
 * Content to create because of this mapping rule.
 */
export class StructureMapGroupRuleTarget extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroupRuleTarget';
  /**
   * Type or variable this rule applies to.
   */
  public context?: fhir.FhirId|undefined;
  /**
   * How to interpret the context.
   */
  public contextType?: fhir.FhirCode<MapContextTypeCodeType>|undefined;
  /**
   * Field to create in the context.
   */
  public element?: fhir.FhirString|undefined;
  /**
   * Named context for field, if desired, and a field is specified.
   */
  public variable?: fhir.FhirId|undefined;
  /**
   * If field is a list, how to manage the list.
   */
  public listMode: fhir.FhirCode<MapTargetListModeCodeType>[];
  /**
   * Internal rule reference for shared list items.
   */
  public listRuleId?: fhir.FhirId|undefined;
  /**
   * How the data is copied / created.
   */
  public transform?: fhir.FhirCode<MapTransformCodeType>|undefined;
  /**
   * Parameters to the transform.
   */
  public parameter: fhir.StructureMapGroupRuleTargetParameter[];
  /**
   * Default constructor for StructureMapGroupRuleTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleTargetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['context']) { this.context = new fhir.FhirId({value: source.context}); }
    if (source['_context']) {
      if (this.context) { this.context.addExtendedProperties(source._context!); }
      else { this.context = new fhir.FhirId(source._context as Partial<fhir.FhirIdArgs>); }
    }
    if (source['contextType']) { this.contextType = new fhir.FhirCode<MapContextTypeCodeType>({value: source.contextType}); }
    if (source['_contextType']) {
      if (this.contextType) { this.contextType.addExtendedProperties(source._contextType!); }
      else { this.contextType = new fhir.FhirCode<MapContextTypeCodeType>(source._contextType as Partial<fhir.FhirCode>); }
    }
    if (source['element']) { this.element = new fhir.FhirString({value: source.element}); }
    if (source['_element']) {
      if (this.element) { this.element.addExtendedProperties(source._element!); }
      else { this.element = new fhir.FhirString(source._element as Partial<fhir.FhirStringArgs>); }
    }
    if (source['variable']) { this.variable = new fhir.FhirId({value: source.variable}); }
    if (source['_variable']) {
      if (this.variable) { this.variable.addExtendedProperties(source._variable!); }
      else { this.variable = new fhir.FhirId(source._variable as Partial<fhir.FhirIdArgs>); }
    }
    if (source['listMode']) { this.listMode = source.listMode.map((x) => new fhir.FhirCode<MapTargetListModeCodeType>({value: x})); }
    else { this.listMode = []; }
    if (source['_listMode']) {
      source._listMode.forEach((x,i) => {
        if (this.listMode.length >= i) { if (x) { this.listMode[i].addExtendedProperties(x); } }
        else { if (x) { this.listMode.push(new fhir.FhirCode<MapTargetListModeCodeType>(x as Partial<fhir.FhirCode>)); } }
      });
    }
    if (source['listRuleId']) { this.listRuleId = new fhir.FhirId({value: source.listRuleId}); }
    if (source['_listRuleId']) {
      if (this.listRuleId) { this.listRuleId.addExtendedProperties(source._listRuleId!); }
      else { this.listRuleId = new fhir.FhirId(source._listRuleId as Partial<fhir.FhirIdArgs>); }
    }
    if (source['transform']) { this.transform = new fhir.FhirCode<MapTransformCodeType>({value: source.transform}); }
    if (source['_transform']) {
      if (this.transform) { this.transform.addExtendedProperties(source._transform!); }
      else { this.transform = new fhir.FhirCode<MapTransformCodeType>(source._transform as Partial<fhir.FhirCode>); }
    }
    if (source['parameter']) { this.parameter = source.parameter.map((x) => new fhir.StructureMapGroupRuleTargetParameter(x)); }
    else { this.parameter = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group.rule.target' }
    this.vOS('context',exp)
    this.vOSV('contextType',exp,'MapContextType',MapContextTypeVsValidation,'r')
    this.vOS('element',exp)
    this.vOS('variable',exp)
    this.vOAV('listMode',exp,'MapTargetListMode',MapTargetListModeVsValidation,'r')
    this.vOS('listRuleId',exp)
    this.vOSV('transform',exp,'MapTransform',MapTransformVsValidation,'r')
    this.vOA('parameter',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroupRuleDependent type.
 */
export interface StructureMapGroupRuleDependentArgs extends fhir.BackboneElementArgs {
  /**
   * Name of a rule or group to apply.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.dependent.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Variable to pass to the rule or group.
   */
  variable: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.dependent.variable
   */
  _variable?:(fhir.FhirElementArgs|null)[];
}

/**
 * Which other rules to apply in the context of this rule.
 */
export class StructureMapGroupRuleDependent extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroupRuleDependent';
  /**
   * Name of a rule or group to apply.
   */
  public name: fhir.FhirId|null;
  /**
   * Variable to pass to the rule or group.
   */
  public variable: fhir.FhirString[];
  /**
   * Default constructor for StructureMapGroupRuleDependent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleDependentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirId(source._name as Partial<fhir.FhirIdArgs>); }
    }
    if (source['variable']) { this.variable = source.variable.map((x) => new fhir.FhirString({value: x})); }
    else { this.variable = []; }
    if (source['_variable']) {
      source._variable.forEach((x,i) => {
        if (this.variable.length >= i) { if (x) { this.variable[i].addExtendedProperties(x); } }
        else { if (x) { this.variable.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group.rule.dependent' }
    this.vRS('name',exp)
    this.vRA('variable',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroupRule type.
 */
export interface StructureMapGroupRuleArgs extends fhir.BackboneElementArgs {
  /**
   * Name of the rule for internal references.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Source inputs to the mapping.
   */
  source: fhir.StructureMapGroupRuleSourceArgs[]|null;
  /**
   * Content to create because of this mapping rule.
   */
  target?: fhir.StructureMapGroupRuleTargetArgs[]|undefined;
  /**
   * Rules contained in this rule.
   */
  rule?: fhir.StructureMapGroupRuleArgs[]|undefined;
  /**
   * Which other rules to apply in the context of this rule.
   */
  dependent?: fhir.StructureMapGroupRuleDependentArgs[]|undefined;
  /**
   * Documentation for this instance of data.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.rule.documentation
   */
  _documentation?:fhir.FhirElementArgs;
}

/**
 * Transform Rule from source to target.
 */
export class StructureMapGroupRule extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroupRule';
  /**
   * Name of the rule for internal references.
   */
  public name: fhir.FhirId|null;
  /**
   * Source inputs to the mapping.
   */
  public source: fhir.StructureMapGroupRuleSource[];
  /**
   * Content to create because of this mapping rule.
   */
  public target: fhir.StructureMapGroupRuleTarget[];
  /**
   * Rules contained in this rule.
   */
  public rule: fhir.StructureMapGroupRule[];
  /**
   * Which other rules to apply in the context of this rule.
   */
  public dependent: fhir.StructureMapGroupRuleDependent[];
  /**
   * Documentation for this instance of data.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for StructureMapGroupRule - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupRuleArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirId(source._name as Partial<fhir.FhirIdArgs>); }
    }
    if (source['source']) { this.source = source.source.map((x) => new fhir.StructureMapGroupRuleSource(x)); }
    else { this.source = []; }
    if (source['target']) { this.target = source.target.map((x) => new fhir.StructureMapGroupRuleTarget(x)); }
    else { this.target = []; }
    if (source['rule']) { this.rule = source.rule.map((x) => new fhir.StructureMapGroupRule(x)); }
    else { this.rule = []; }
    if (source['dependent']) { this.dependent = source.dependent.map((x) => new fhir.StructureMapGroupRuleDependent(x)); }
    else { this.dependent = []; }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group.rule' }
    this.vRS('name',exp)
    this.vRA('source',exp)
    this.vOA('target',exp)
    this.vOA('rule',exp)
    this.vOA('dependent',exp)
    this.vOS('documentation',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMapGroup type.
 */
export interface StructureMapGroupArgs extends fhir.BackboneElementArgs {
  /**
   * A unique name for the group for the convenience of human readers.
   */
  name: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Another group that this group adds rules to.
   */
  extends?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.extends
   */
  _extends?:fhir.FhirElementArgs;
  /**
   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
   */
  typeMode: fhir.FhirCode<MapGroupTypeModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.typeMode
   */
  _typeMode?:fhir.FhirElementArgs;
  /**
   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.group.documentation
   */
  _documentation?:fhir.FhirElementArgs;
  /**
   * If no inputs are named, then the entry mappings are type based.
   */
  input: fhir.StructureMapGroupInputArgs[]|null;
  /**
   * Transform Rule from source to target.
   */
  rule: fhir.StructureMapGroupRuleArgs[]|null;
}

/**
 * Organizes the mapping into managable chunks for human review/ease of maintenance.
 */
export class StructureMapGroup extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMapGroup';
  /**
   * A unique name for the group for the convenience of human readers.
   */
  public name: fhir.FhirId|null;
  /**
   * Another group that this group adds rules to.
   */
  public extends?: fhir.FhirId|undefined;
  /**
   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
   */
  public typeMode: fhir.FhirCode<MapGroupTypeModeCodeType>|null;
  /**
   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * If no inputs are named, then the entry mappings are type based.
   */
  public input: fhir.StructureMapGroupInput[];
  /**
   * Transform Rule from source to target.
   */
  public rule: fhir.StructureMapGroupRule[];
  /**
   * Default constructor for StructureMapGroup - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapGroupArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirId(source._name as Partial<fhir.FhirIdArgs>); }
    }
    if (source['extends']) { this.extends = new fhir.FhirId({value: source.extends}); }
    if (source['_extends']) {
      if (this.extends) { this.extends.addExtendedProperties(source._extends!); }
      else { this.extends = new fhir.FhirId(source._extends as Partial<fhir.FhirIdArgs>); }
    }
    if (source['typeMode']) { this.typeMode = new fhir.FhirCode<MapGroupTypeModeCodeType>({value: source.typeMode}); }
    else { this.typeMode = null; }
    if (source['_typeMode']) {
      if (this.typeMode) { this.typeMode.addExtendedProperties(source._typeMode!); }
      else { this.typeMode = new fhir.FhirCode<MapGroupTypeModeCodeType>(source._typeMode as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['input']) { this.input = source.input.map((x) => new fhir.StructureMapGroupInput(x)); }
    else { this.input = []; }
    if (source['rule']) { this.rule = source.rule.map((x) => new fhir.StructureMapGroupRule(x)); }
    else { this.rule = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap.group' }
    this.vRS('name',exp)
    this.vOS('extends',exp)
    this.vRSV('typeMode',exp,'MapGroupTypeMode',MapGroupTypeModeVsValidation,'r')
    this.vOS('documentation',exp)
    this.vRA('input',exp)
    this.vRA('rule',exp)
    return issues;
  }
}
/**
 * Valid arguments for the StructureMap type.
 */
export interface StructureMapArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "StructureMap"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this structure map outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the structure map with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * Allows filtering of structure maps that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired structure map without due consideration.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows filtering of structure map that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental structure map in production.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: StructureMap.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Usually an organization, but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element does not describe the usage of the structure map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.purpose
   */
  _purpose?:fhir.FhirElementArgs;
  /**
   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: StructureMap.copyright
   */
  _copyright?:fhir.FhirElementArgs;
  /**
   * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
   */
  structure?: fhir.StructureMapStructureArgs[]|undefined;
  /**
   * Other maps used by this map (canonical URLs).
   */
  import?: fhir.FhirUri[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: StructureMap.import
   */
  _import?:(fhir.FhirElementArgs|null)[];
  /**
   * Organizes the mapping into managable chunks for human review/ease of maintenance.
   */
  group: fhir.StructureMapGroupArgs[]|null;
}

/**
 * A Map of relationships between 2 structures that can be used to transform data.
 */
export class StructureMap extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'StructureMap';
  /**
   * Resource Type Name
   */
  public override resourceType: "StructureMap";
  /**
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  public url: fhir.FhirUri|null;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this structure map outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier: fhir.Identifier[];
  /**
   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the structure map with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  public name: fhir.FhirString|null;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Allows filtering of structure maps that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired structure map without due consideration.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of structure map that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental structure map in production.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization, but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * This element does not describe the usage of the structure map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
   */
  public structure: fhir.StructureMapStructure[];
  /**
   * Other maps used by this map (canonical URLs).
   */
  public import: fhir.FhirUri[];
  /**
   * Organizes the mapping into managable chunks for human review/ease of maintenance.
   */
  public group: fhir.StructureMapGroup[];
  /**
   * Default constructor for StructureMap - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<StructureMapArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'StructureMap';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    else { this.url = null; }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['purpose']) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}); }
    if (source['_purpose']) {
      if (this.purpose) { this.purpose.addExtendedProperties(source._purpose!); }
      else { this.purpose = new fhir.FhirMarkdown(source._purpose as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['structure']) { this.structure = source.structure.map((x) => new fhir.StructureMapStructure(x)); }
    else { this.structure = []; }
    if (source['import']) { this.import = source.import.map((x) => new fhir.FhirUri({value: x})); }
    else { this.import = []; }
    if (source['_import']) {
      source._import.forEach((x,i) => {
        if (this.import.length >= i) { if (x) { this.import[i].addExtendedProperties(x); } }
        else { if (x) { this.import.push(new fhir.FhirUri(x as Partial<fhir.FhirUriArgs>)); } }
      });
    }
    if (source['group']) { this.group = source.group.map((x) => new fhir.StructureMapGroup(x)); }
    else { this.group = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'StructureMap' }
    this.vRS('resourceType',exp)
    this.vRS('url',exp)
    this.vOA('identifier',exp)
    this.vOS('version',exp)
    this.vRS('name',exp)
    this.vOS('title',exp)
    this.vRSV('status',exp,'PublicationStatus',PublicationStatusVsValidation,'r')
    this.vOS('experimental',exp)
    this.vOS('date',exp)
    this.vOS('publisher',exp)
    this.vOA('contact',exp)
    this.vOS('description',exp)
    this.vOA('useContext',exp)
    this.vOA('jurisdiction',exp)
    this.vOS('purpose',exp)
    this.vOS('copyright',exp)
    this.vOA('structure',exp)
    this.vOA('import',exp)
    this.vRA('group',exp)
    return issues;
  }
}
