// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide

import * as fhir from '../fhir.js';

// @ts-ignore
import { GuideDependencyTypeCodes,  GuideDependencyTypeCodeType } from '../fhirValueSets/GuideDependencyTypeCodes.js';
// @ts-ignore
import { GuideDependencyTypeVsValidation } from '../fhirValueSets/GuideDependencyTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesCodes,  ResourceTypesCodeType } from '../fhirValueSets/ResourceTypesCodes.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { GuidePageKindCodes,  GuidePageKindCodeType } from '../fhirValueSets/GuidePageKindCodes.js';
// @ts-ignore
import { GuidePageKindVsValidation } from '../fhirValueSets/GuidePageKindVsValidation.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { JurisdictionCodes,  JurisdictionCodeType } from '../fhirValueSets/JurisdictionCodes.js';
// @ts-ignore
import { JurisdictionVsValidation } from '../fhirValueSets/JurisdictionVsValidation.js';
/**
 * Valid arguments for the ImplementationGuideDependency type.
 */
export interface ImplementationGuideDependencyArgs extends fhir.BackboneElementArgs {
  /**
   * For information about processing included guides, see [Including Guides]{implementationguide.html#include}.
   */
  type: fhir.FhirCode<GuideDependencyTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.dependency.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * When a guide is published, and the type is 'include', this will be a relative reference within the guide.
   */
  uri: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.dependency.uri
   */
  _uri?:fhir.FhirElementArgs;
}

/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export class ImplementationGuideDependency extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImplementationGuideDependency';
  /**
   * For information about processing included guides, see [Including Guides]{implementationguide.html#include}.
   */
  public type: fhir.FhirCode<GuideDependencyTypeCodeType>|null;
  /**
   * When a guide is published, and the type is 'include', this will be a relative reference within the guide.
   */
  public uri: fhir.FhirUri|null;
  /**
   * Default constructor for ImplementationGuideDependency - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImplementationGuideDependencyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode<GuideDependencyTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<GuideDependencyTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['uri']) { this.uri = new fhir.FhirUri({value: source.uri}); }
    else { this.uri = null; }
    if (source['_uri']) {
      if (this.uri) { this.uri.addExtendedProperties(source._uri!); }
      else { this.uri = new fhir.FhirUri(source._uri as Partial<fhir.FhirUriArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImplementationGuide.dependency' }
    iss.push(...this.vRSV('type',exp,'GuideDependencyType',GuideDependencyTypeVsValidation,'r'));
    iss.push(...this.vRS('uri',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImplementationGuidePackageResource type.
 */
export interface ImplementationGuidePackageResourceArgs extends fhir.BackboneElementArgs {
  /**
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  example: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.package.resource.example
   */
  _example?:fhir.FhirElementArgs;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.package.resource.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.package.resource.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * This is used when generating schematrons from profiles, for example, but has other uses. Publishing tooling may autogenerate this value, but a human assigned value is more useful. This value must be unique within an implementation guide (across included guides as well).
   */
  acronym?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.package.resource.acronym
   */
  _acronym?:fhir.FhirElementArgs;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  source?: fhir.FhirUri|fhir.Reference|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  sourceUri?: fhir.FhirUri|string|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  sourceReference?: fhir.ReferenceArgs|undefined;
  /**
   * Examples:
   * * StructureDefinition -&gt; Any
   * * ValueSet -&gt; expansion
   * * OperationDefinition -&gt; Parameters
   * * Questionnaire -&gt; QuestionnaireResponse.
   */
  exampleFor?: fhir.ReferenceArgs|undefined;
}

/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuidePackageResource extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImplementationGuidePackageResource';
  /**
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  public example: fhir.FhirBoolean|null;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  public name?: fhir.FhirString|undefined;
  /**
   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
   */
  public description?: fhir.FhirString|undefined;
  /**
   * This is used when generating schematrons from profiles, for example, but has other uses. Publishing tooling may autogenerate this value, but a human assigned value is more useful. This value must be unique within an implementation guide (across included guides as well).
   */
  public acronym?: fhir.FhirString|undefined;
  /**
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  public source: (fhir.FhirUri|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element ImplementationGuide.package.resource.source[x]
   */
  protected static readonly _fts_sourceIsChoice:true = true;
  /**
   * Examples:
   * * StructureDefinition -&gt; Any
   * * ValueSet -&gt; expansion
   * * OperationDefinition -&gt; Parameters
   * * Questionnaire -&gt; QuestionnaireResponse.
   */
  public exampleFor?: fhir.Reference|undefined;
  /**
   * Default constructor for ImplementationGuidePackageResource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImplementationGuidePackageResourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['example']) { this.example = new fhir.FhirBoolean({value: source.example}); }
    else { this.example = null; }
    if (source['_example']) {
      if (this.example) { this.example.addExtendedProperties(source._example!); }
      else { this.example = new fhir.FhirBoolean(source._example as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['acronym']) { this.acronym = new fhir.FhirString({value: source.acronym}); }
    if (source['_acronym']) {
      if (this.acronym) { this.acronym.addExtendedProperties(source._acronym!); }
      else { this.acronym = new fhir.FhirString(source._acronym as Partial<fhir.FhirStringArgs>); }
    }
    if (source['source']) { this.source = source.source; }
    else if (source['sourceUri']) { this.source = new fhir.FhirUri({value: source.sourceUri}); }
    else if (source['sourceReference']) { this.source = new fhir.Reference(source.sourceReference); }
    else { this.source = null; }
    if (source['exampleFor']) { this.exampleFor = new fhir.Reference(source.exampleFor); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImplementationGuide.package.resource' }
    iss.push(...this.vRS('example',exp));
    iss.push(...this.vOS('name',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOS('acronym',exp));
    iss.push(...this.vRS('source',exp));
    iss.push(...this.vOS('exampleFor',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImplementationGuidePackage type.
 */
export interface ImplementationGuidePackageArgs extends fhir.BackboneElementArgs {
  /**
   * The name for the group, as used in page.package.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.package.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Human readable text describing the package.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.package.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource: fhir.ImplementationGuidePackageResourceArgs[]|null;
}

/**
 * A logical group of resources. Logical groups can be used when building pages.
 */
export class ImplementationGuidePackage extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImplementationGuidePackage';
  /**
   * The name for the group, as used in page.package.
   */
  public name: fhir.FhirString|null;
  /**
   * Human readable text describing the package.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  public resource: fhir.ImplementationGuidePackageResource[];
  /**
   * Default constructor for ImplementationGuidePackage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImplementationGuidePackageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['resource']) { this.resource = source.resource.map((x) => new fhir.ImplementationGuidePackageResource(x)); }
    else { this.resource = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImplementationGuide.package' }
    iss.push(...this.vRS('name',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vRA('resource',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImplementationGuideGlobal type.
 */
export interface ImplementationGuideGlobalArgs extends fhir.BackboneElementArgs {
  /**
   * The type must match that of the profile that is referred to, but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
   */
  type: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.global.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A reference to the profile that all instances must conform to.
   */
  profile: fhir.ReferenceArgs|null;
}

/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export class ImplementationGuideGlobal extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImplementationGuideGlobal';
  /**
   * The type must match that of the profile that is referred to, but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
   */
  public type: fhir.FhirCode|null;
  /**
   * A reference to the profile that all instances must conform to.
   */
  public profile: fhir.Reference|null;
  /**
   * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImplementationGuideGlobalArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode(source._type as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['profile']) { this.profile = new fhir.Reference(source.profile); }
    else { this.profile = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImplementationGuide.global' }
    iss.push(...this.vRSV('type',exp,'ResourceTypes',ResourceTypesVsValidation,'r'));
    iss.push(...this.vRS('profile',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImplementationGuidePage type.
 */
export interface ImplementationGuidePageArgs extends fhir.BackboneElementArgs {
  /**
   * The publishing tool will autogenerate source for list (source = n/a), and inject included implementations for include (source = uri of guide to include).
   */
  source: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.page.source
   */
  _source?:fhir.FhirElementArgs;
  /**
   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  title: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.page.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
   */
  kind: fhir.FhirCode<GuidePageKindCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.page.kind
   */
  _kind?:fhir.FhirElementArgs;
  /**
   * For constructed pages, what kind of resources to include in the list.
   */
  type?: fhir.FhirCode[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.page.type
   */
  _type?:(fhir.FhirElementArgs|null)[];
  /**
   * For constructed pages, a list of packages to include in the page (or else empty for everything).
   */
  package?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.page.package
   */
  _package?:(fhir.FhirElementArgs|null)[];
  /**
   * This is primarily for the publishing tool, that will convert all pages to html format. HTML pages are pre-processed, see xxxx.
   */
  format?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.page.format
   */
  _format?:fhir.FhirElementArgs;
  /**
   * The implementation guide breadcrumbs are generated from this structure.
   */
  page?: fhir.ImplementationGuidePageArgs[]|undefined;
}

/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export class ImplementationGuidePage extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImplementationGuidePage';
  /**
   * The publishing tool will autogenerate source for list (source = n/a), and inject included implementations for include (source = uri of guide to include).
   */
  public source: fhir.FhirUri|null;
  /**
   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  public title: fhir.FhirString|null;
  /**
   * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
   */
  public kind: fhir.FhirCode<GuidePageKindCodeType>|null;
  /**
   * For constructed pages, what kind of resources to include in the list.
   */
  public type: fhir.FhirCode[];
  /**
   * For constructed pages, a list of packages to include in the page (or else empty for everything).
   */
  public package: fhir.FhirString[];
  /**
   * This is primarily for the publishing tool, that will convert all pages to html format. HTML pages are pre-processed, see xxxx.
   */
  public format?: fhir.FhirCode|undefined;
  /**
   * The implementation guide breadcrumbs are generated from this structure.
   */
  public page: fhir.ImplementationGuidePage[];
  /**
   * Default constructor for ImplementationGuidePage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImplementationGuidePageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['source']) { this.source = new fhir.FhirUri({value: source.source}); }
    else { this.source = null; }
    if (source['_source']) {
      if (this.source) { this.source.addExtendedProperties(source._source!); }
      else { this.source = new fhir.FhirUri(source._source as Partial<fhir.FhirUriArgs>); }
    }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    else { this.title = null; }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['kind']) { this.kind = new fhir.FhirCode<GuidePageKindCodeType>({value: source.kind}); }
    else { this.kind = null; }
    if (source['_kind']) {
      if (this.kind) { this.kind.addExtendedProperties(source._kind!); }
      else { this.kind = new fhir.FhirCode<GuidePageKindCodeType>(source._kind as Partial<fhir.FhirCode>); }
    }
    if (source['type']) { this.type = source.type.map((x) => new fhir.FhirCode({value: x})); }
    else { this.type = []; }
    if (source['_type']) {
      source._type.forEach((x,i) => {
        if (this.type.length >= i) { if (x) { this.type[i].addExtendedProperties(x); } }
        else { if (x) { this.type.push(new fhir.FhirCode(x as Partial<fhir.FhirCodeArgs>)); } }
      });
    }
    if (source['package']) { this.package = source.package.map((x) => new fhir.FhirString({value: x})); }
    else { this.package = []; }
    if (source['_package']) {
      source._package.forEach((x,i) => {
        if (this.package.length >= i) { if (x) { this.package[i].addExtendedProperties(x); } }
        else { if (x) { this.package.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['format']) { this.format = new fhir.FhirCode({value: source.format}); }
    if (source['_format']) {
      if (this.format) { this.format.addExtendedProperties(source._format!); }
      else { this.format = new fhir.FhirCode(source._format as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['page']) { this.page = source.page.map((x) => new fhir.ImplementationGuidePage(x)); }
    else { this.page = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImplementationGuide.page' }
    iss.push(...this.vRS('source',exp));
    iss.push(...this.vRS('title',exp));
    iss.push(...this.vRSV('kind',exp,'GuidePageKind',GuidePageKindVsValidation,'r'));
    iss.push(...this.vOAV('type',exp,'ResourceTypes',ResourceTypesVsValidation,'r'));
    iss.push(...this.vOA('package',exp));
    iss.push(...this.vOS('format',exp));
    iss.push(...this.vOA('page',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImplementationGuide type.
 */
export interface ImplementationGuideArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ImplementationGuide"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the implementation guide with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Allows filtering of implementation guides that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired implementation guide without due consideration.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows filtering of implementation guide that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental implementation guide in production.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Usually an organization, but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.copyright
   */
  _copyright?:fhir.FhirElementArgs;
  /**
   * An Implementation Guide should specify the target it applies to, as ImplementationGuides are rarely valid across multiple versions of FHIR.
   */
  fhirVersion?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.fhirVersion
   */
  _fhirVersion?:fhir.FhirElementArgs;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  dependency?: fhir.ImplementationGuideDependencyArgs[]|undefined;
  /**
   * A logical group of resources. Logical groups can be used when building pages.
   */
  package?: fhir.ImplementationGuidePackageArgs[]|undefined;
  /**
   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
   */
  global?: fhir.ImplementationGuideGlobalArgs[]|undefined;
  /**
   * This is principally included for the FHIR publishing tool, but may be useful when extracting and reusing content from the implementation guide.
   */
  binary?: fhir.FhirUri[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ImplementationGuide.binary
   */
  _binary?:(fhir.FhirElementArgs|null)[];
  /**
   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
   */
  page?: fhir.ImplementationGuidePageArgs|undefined;
}

/**
 * A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export class ImplementationGuide extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImplementationGuide';
  /**
   * Resource Type Name
   */
  public override resourceType: "ImplementationGuide";
  /**
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  public url: fhir.FhirUri|null;
  /**
   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the implementation guide with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  public name: fhir.FhirString|null;
  /**
   * Allows filtering of implementation guides that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired implementation guide without due consideration.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of implementation guide that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental implementation guide in production.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization, but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * An Implementation Guide should specify the target it applies to, as ImplementationGuides are rarely valid across multiple versions of FHIR.
   */
  public fhirVersion?: fhir.FhirId|undefined;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  public dependency: fhir.ImplementationGuideDependency[];
  /**
   * A logical group of resources. Logical groups can be used when building pages.
   */
  public package: fhir.ImplementationGuidePackage[];
  /**
   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
   */
  public global: fhir.ImplementationGuideGlobal[];
  /**
   * This is principally included for the FHIR publishing tool, but may be useful when extracting and reusing content from the implementation guide.
   */
  public binary: fhir.FhirUri[];
  /**
   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
   */
  public page?: fhir.ImplementationGuidePage|undefined;
  /**
   * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImplementationGuideArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ImplementationGuide';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    else { this.url = null; }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['fhirVersion']) { this.fhirVersion = new fhir.FhirId({value: source.fhirVersion}); }
    if (source['_fhirVersion']) {
      if (this.fhirVersion) { this.fhirVersion.addExtendedProperties(source._fhirVersion!); }
      else { this.fhirVersion = new fhir.FhirId(source._fhirVersion as Partial<fhir.FhirIdArgs>); }
    }
    if (source['dependency']) { this.dependency = source.dependency.map((x) => new fhir.ImplementationGuideDependency(x)); }
    else { this.dependency = []; }
    if (source['package']) { this.package = source.package.map((x) => new fhir.ImplementationGuidePackage(x)); }
    else { this.package = []; }
    if (source['global']) { this.global = source.global.map((x) => new fhir.ImplementationGuideGlobal(x)); }
    else { this.global = []; }
    if (source['binary']) { this.binary = source.binary.map((x) => new fhir.FhirUri({value: x})); }
    else { this.binary = []; }
    if (source['_binary']) {
      source._binary.forEach((x,i) => {
        if (this.binary.length >= i) { if (x) { this.binary[i].addExtendedProperties(x); } }
        else { if (x) { this.binary.push(new fhir.FhirUri(x as Partial<fhir.FhirUriArgs>)); } }
      });
    }
    if (source['page']) { this.page = new fhir.ImplementationGuidePage(source.page); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImplementationGuide' }
    iss.push(...this.vRS('url',exp));
    iss.push(...this.vOS('version',exp));
    iss.push(...this.vRS('name',exp));
    iss.push(...this.vRSV('status',exp,'PublicationStatus',PublicationStatusVsValidation,'r'));
    iss.push(...this.vOS('experimental',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('publisher',exp));
    iss.push(...this.vOA('contact',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('useContext',exp));
    iss.push(...this.vOA('jurisdiction',exp));
    iss.push(...this.vOS('copyright',exp));
    iss.push(...this.vOS('fhirVersion',exp));
    iss.push(...this.vOA('dependency',exp));
    iss.push(...this.vOA('package',exp));
    iss.push(...this.vOA('global',exp));
    iss.push(...this.vOA('binary',exp));
    iss.push(...this.vOS('page',exp));
    return iss;
  }
}
