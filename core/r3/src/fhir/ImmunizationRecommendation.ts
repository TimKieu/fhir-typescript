// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImmunizationRecommendation

import * as fhir from '../fhir.js';

// @ts-ignore
import { ImmunizationRecommendationDateCriterionCodes,  ImmunizationRecommendationDateCriterionCodeType } from '../fhirValueSets/ImmunizationRecommendationDateCriterionCodes.js';
// @ts-ignore
import { ImmunizationRecommendationDateCriterionVsValidation } from '../fhirValueSets/ImmunizationRecommendationDateCriterionVsValidation.js';
// @ts-ignore
import { VaccineCodes,  VaccineCodeType } from '../fhirValueSets/VaccineCodes.js';
// @ts-ignore
import { VaccineVsValidation } from '../fhirValueSets/VaccineVsValidation.js';
// @ts-ignore
import { ImmunizationRecommendationTargetDiseaseCodes,  ImmunizationRecommendationTargetDiseaseCodeType } from '../fhirValueSets/ImmunizationRecommendationTargetDiseaseCodes.js';
// @ts-ignore
import { ImmunizationRecommendationTargetDiseaseVsValidation } from '../fhirValueSets/ImmunizationRecommendationTargetDiseaseVsValidation.js';
// @ts-ignore
import { ImmunizationRecommendationStatusCodes,  ImmunizationRecommendationStatusCodeType } from '../fhirValueSets/ImmunizationRecommendationStatusCodes.js';
// @ts-ignore
import { ImmunizationRecommendationStatusVsValidation } from '../fhirValueSets/ImmunizationRecommendationStatusVsValidation.js';
/**
 * Valid arguments for the ImmunizationRecommendationRecommendationDateCriterion type.
 */
export interface ImmunizationRecommendationRecommendationDateCriterionArgs extends fhir.BackboneElementArgs {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.dateCriterion.value
   */
  _value?:fhir.FhirElementArgs;
}

/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export class ImmunizationRecommendationRecommendationDateCriterion extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImmunizationRecommendationRecommendationDateCriterion';
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  public value: fhir.FhirDateTime|null;
  /**
   * Default constructor for ImmunizationRecommendationRecommendationDateCriterion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImmunizationRecommendationRecommendationDateCriterionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['value']) { this.value = new fhir.FhirDateTime({value: source.value}); }
    else { this.value = null; }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirDateTime(source._value as Partial<fhir.FhirDateTimeArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImmunizationRecommendation.recommendation.dateCriterion' }
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vRS('value',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImmunizationRecommendationRecommendationProtocol type.
 */
export interface ImmunizationRecommendationRecommendationProtocolArgs extends fhir.BackboneElementArgs {
  /**
   * Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
   */
  doseSequence?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.protocol.doseSequence
   */
  _doseSequence?:fhir.FhirElementArgs;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.protocol.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Indicates the authority who published the protocol.  For example, ACIP.
   */
  authority?: fhir.ReferenceArgs|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.protocol.series
   */
  _series?:fhir.FhirElementArgs;
}

/**
 * Contains information about the protocol under which the vaccine was administered.
 */
export class ImmunizationRecommendationRecommendationProtocol extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImmunizationRecommendationRecommendationProtocol';
  /**
   * Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
   */
  public doseSequence?: fhir.FhirPositiveInt|undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Indicates the authority who published the protocol.  For example, ACIP.
   */
  public authority?: fhir.Reference|undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  public series?: fhir.FhirString|undefined;
  /**
   * Default constructor for ImmunizationRecommendationRecommendationProtocol - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImmunizationRecommendationRecommendationProtocolArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['doseSequence']) { this.doseSequence = new fhir.FhirPositiveInt({value: source.doseSequence}); }
    if (source['_doseSequence']) {
      if (this.doseSequence) { this.doseSequence.addExtendedProperties(source._doseSequence!); }
      else { this.doseSequence = new fhir.FhirPositiveInt(source._doseSequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['authority']) { this.authority = new fhir.Reference(source.authority); }
    if (source['series']) { this.series = new fhir.FhirString({value: source.series}); }
    if (source['_series']) {
      if (this.series) { this.series.addExtendedProperties(source._series!); }
      else { this.series = new fhir.FhirString(source._series as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImmunizationRecommendation.recommendation.protocol' }
    iss.push(...this.vOS('doseSequence',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOS('authority',exp));
    iss.push(...this.vOS('series',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImmunizationRecommendationRecommendation type.
 */
export interface ImmunizationRecommendationRecommendationArgs extends fhir.BackboneElementArgs {
  /**
   * The date the immunization recommendation was created.
   */
  date: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Vaccine that pertains to the recommendation.
   */
  vaccineCode?: fhir.CodeableConceptArgs|undefined;
  /**
   * The targeted disease for the recommendation.
   */
  targetDisease?: fhir.CodeableConceptArgs|undefined;
  /**
   * May need other dose concepts such as administered vs. valid.
   */
  doseNumber?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: ImmunizationRecommendation.recommendation.doseNumber
   */
  _doseNumber?:fhir.FhirElementArgs;
  /**
   * Vaccine administration status.
   */
  forecastStatus: fhir.CodeableConceptArgs|null;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: fhir.ImmunizationRecommendationRecommendationDateCriterionArgs[]|undefined;
  /**
   * Contains information about the protocol under which the vaccine was administered.
   */
  protocol?: fhir.ImmunizationRecommendationRecommendationProtocolArgs|undefined;
  /**
   * Immunization event history that supports the status and recommendation.
   */
  supportingImmunization?: fhir.ReferenceArgs[]|undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Vaccine administration recommendations.
 */
export class ImmunizationRecommendationRecommendation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImmunizationRecommendationRecommendation';
  /**
   * The date the immunization recommendation was created.
   */
  public date: fhir.FhirDateTime|null;
  /**
   * Vaccine that pertains to the recommendation.
   */
  public vaccineCode?: fhir.CodeableConcept|undefined;
  /**
   * The targeted disease for the recommendation.
   */
  public targetDisease?: fhir.CodeableConcept|undefined;
  /**
   * May need other dose concepts such as administered vs. valid.
   */
  public doseNumber?: fhir.FhirPositiveInt|undefined;
  /**
   * Vaccine administration status.
   */
  public forecastStatus: fhir.CodeableConcept|null;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  public dateCriterion: fhir.ImmunizationRecommendationRecommendationDateCriterion[];
  /**
   * Contains information about the protocol under which the vaccine was administered.
   */
  public protocol?: fhir.ImmunizationRecommendationRecommendationProtocol|undefined;
  /**
   * Immunization event history that supports the status and recommendation.
   */
  public supportingImmunization: fhir.Reference[];
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  public supportingPatientInformation: fhir.Reference[];
  /**
   * Default constructor for ImmunizationRecommendationRecommendation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImmunizationRecommendationRecommendationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    else { this.date = null; }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['vaccineCode']) { this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode); }
    if (source['targetDisease']) { this.targetDisease = new fhir.CodeableConcept(source.targetDisease); }
    if (source['doseNumber']) { this.doseNumber = new fhir.FhirPositiveInt({value: source.doseNumber}); }
    if (source['_doseNumber']) {
      if (this.doseNumber) { this.doseNumber.addExtendedProperties(source._doseNumber!); }
      else { this.doseNumber = new fhir.FhirPositiveInt(source._doseNumber as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['forecastStatus']) { this.forecastStatus = new fhir.CodeableConcept(source.forecastStatus); }
    else { this.forecastStatus = null; }
    if (source['dateCriterion']) { this.dateCriterion = source.dateCriterion.map((x) => new fhir.ImmunizationRecommendationRecommendationDateCriterion(x)); }
    else { this.dateCriterion = []; }
    if (source['protocol']) { this.protocol = new fhir.ImmunizationRecommendationRecommendationProtocol(source.protocol); }
    if (source['supportingImmunization']) { this.supportingImmunization = source.supportingImmunization.map((x) => new fhir.Reference(x)); }
    else { this.supportingImmunization = []; }
    if (source['supportingPatientInformation']) { this.supportingPatientInformation = source.supportingPatientInformation.map((x) => new fhir.Reference(x)); }
    else { this.supportingPatientInformation = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImmunizationRecommendation.recommendation' }
    iss.push(...this.vRS('date',exp));
    iss.push(...this.vOS('vaccineCode',exp));
    iss.push(...this.vOS('targetDisease',exp));
    iss.push(...this.vOS('doseNumber',exp));
    iss.push(...this.vRS('forecastStatus',exp));
    iss.push(...this.vOA('dateCriterion',exp));
    iss.push(...this.vOS('protocol',exp));
    iss.push(...this.vOA('supportingImmunization',exp));
    iss.push(...this.vOA('supportingPatientInformation',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ImmunizationRecommendation type.
 */
export interface ImmunizationRecommendationArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ImmunizationRecommendation"|undefined;
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The patient the recommendations are for.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: fhir.ImmunizationRecommendationRecommendationArgs[]|null;
}

/**
 * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
 */
export class ImmunizationRecommendation extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ImmunizationRecommendation';
  /**
   * Resource Type Name
   */
  public override resourceType: "ImmunizationRecommendation";
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  public identifier: fhir.Identifier[];
  /**
   * The patient the recommendations are for.
   */
  public patient: fhir.Reference|null;
  /**
   * Vaccine administration recommendations.
   */
  public recommendation: fhir.ImmunizationRecommendationRecommendation[];
  /**
   * Default constructor for ImmunizationRecommendation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ImmunizationRecommendationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ImmunizationRecommendation';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['recommendation']) { this.recommendation = source.recommendation.map((x) => new fhir.ImmunizationRecommendationRecommendation(x)); }
    else { this.recommendation = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ImmunizationRecommendation' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vRS('patient',exp));
    iss.push(...this.vRA('recommendation',exp));
    return iss;
  }
}
