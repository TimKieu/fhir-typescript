// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ParameterDefinition

import * as fhir from '../fhir.js';

// @ts-ignore
import { OperationParameterUseCodes,  OperationParameterUseCodeType } from '../fhirValueSets/OperationParameterUseCodes.js';
// @ts-ignore
import { OperationParameterUseVsValidation } from '../fhirValueSets/OperationParameterUseVsValidation.js';
// @ts-ignore
import { AllTypesCodes,  AllTypesCodeType } from '../fhirValueSets/AllTypesCodes.js';
// @ts-ignore
import { AllTypesVsValidation } from '../fhirValueSets/AllTypesVsValidation.js';
/**
 * Valid arguments for the ParameterDefinition type.
 */
export interface ParameterDefinitionArgs extends fhir.FhirElementArgs {
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  name?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: ParameterDefinition.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Whether the parameter is input or output for the module.
   */
  use: fhir.FhirCode<OperationParameterUseCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ParameterDefinition.use
   */
  _use?:fhir.FhirElementArgs;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min?: fhir.FhirInteger|number|undefined;
  /**
   * Extended properties for primitive element: ParameterDefinition.min
   */
  _min?:fhir.FhirElementArgs;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ParameterDefinition.max
   */
  _max?:fhir.FhirElementArgs;
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ParameterDefinition.documentation
   */
  _documentation?:fhir.FhirElementArgs;
  /**
   * The type of the parameter.
   */
  type: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: ParameterDefinition.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  profile?: fhir.ReferenceArgs|undefined;
}

/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ParameterDefinition';
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  public name?: fhir.FhirCode|undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  public use: fhir.FhirCode<OperationParameterUseCodeType>|null;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  public min?: fhir.FhirInteger|undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  public max?: fhir.FhirString|undefined;
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * The type of the parameter.
   */
  public type: fhir.FhirCode|null;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  public profile?: fhir.Reference|undefined;
  /**
   * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ParameterDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirCode({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirCode(source._name as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['use']) { this.use = new fhir.FhirCode<OperationParameterUseCodeType>({value: source.use}); }
    else { this.use = null; }
    if (source['_use']) {
      if (this.use) { this.use.addExtendedProperties(source._use!); }
      else { this.use = new fhir.FhirCode<OperationParameterUseCodeType>(source._use as Partial<fhir.FhirCode>); }
    }
    if (source['min']) { this.min = new fhir.FhirInteger({value: source.min}); }
    if (source['_min']) {
      if (this.min) { this.min.addExtendedProperties(source._min!); }
      else { this.min = new fhir.FhirInteger(source._min as Partial<fhir.FhirIntegerArgs>); }
    }
    if (source['max']) { this.max = new fhir.FhirString({value: source.max}); }
    if (source['_max']) {
      if (this.max) { this.max.addExtendedProperties(source._max!); }
      else { this.max = new fhir.FhirString(source._max as Partial<fhir.FhirStringArgs>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirCode({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode(source._type as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['profile']) { this.profile = new fhir.Reference(source.profile); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ParameterDefinition' }
    this.vOS('name',exp)
    this.vRSV('use',exp,'OperationParameterUse',OperationParameterUseVsValidation,'r')
    this.vOS('min',exp)
    this.vOS('max',exp)
    this.vOS('documentation',exp)
    this.vRSV('type',exp,'AllTypes',AllTypesVsValidation,'r')
    this.vOS('profile',exp)
    return issues;
  }
}
