// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentNotice

import * as fhir from '../fhir.js';

// @ts-ignore
import { FmStatusCodes,  FmStatusCodeType } from '../fhirValueSets/FmStatusCodes.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { PaymentStatusCodes,  PaymentStatusCodeType } from '../fhirValueSets/PaymentStatusCodes.js';
// @ts-ignore
import { PaymentStatusVsValidation } from '../fhirValueSets/PaymentStatusVsValidation.js';
/**
 * Valid arguments for the PaymentNotice type.
 */
export interface PaymentNoticeArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "PaymentNotice"|undefined;
  /**
   * The notice business identifier.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: fhir.FhirCode<FmStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: PaymentNotice.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: fhir.ReferenceArgs|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: fhir.ReferenceArgs|undefined;
  /**
   * The date when the above payment action occurrred.
   */
  statusDate?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: PaymentNotice.statusDate
   */
  _statusDate?:fhir.FhirElementArgs;
  /**
   * The date when this resource was created.
   */
  created?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: PaymentNotice.created
   */
  _created?:fhir.FhirElementArgs;
  /**
   * The Insurer who is target  of the request.
   */
  target?: fhir.ReferenceArgs|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: fhir.ReferenceArgs|undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: fhir.ReferenceArgs|undefined;
  /**
   * The payment status, typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: fhir.CodeableConceptArgs|undefined;
}

/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export class PaymentNotice extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'PaymentNotice';
  /**
   * Resource Type Name
   */
  public override resourceType: "PaymentNotice";
  /**
   * The notice business identifier.
   */
  public identifier: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status?: fhir.FhirCode<FmStatusCodeType>|undefined;
  /**
   * Reference of resource for which payment is being made.
   */
  public request?: fhir.Reference|undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  public response?: fhir.Reference|undefined;
  /**
   * The date when the above payment action occurrred.
   */
  public statusDate?: fhir.FhirDate|undefined;
  /**
   * The date when this resource was created.
   */
  public created?: fhir.FhirDateTime|undefined;
  /**
   * The Insurer who is target  of the request.
   */
  public target?: fhir.Reference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public provider?: fhir.Reference|undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  public organization?: fhir.Reference|undefined;
  /**
   * The payment status, typically paid: payment sent, cleared: payment received.
   */
  public paymentStatus?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<PaymentNoticeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'PaymentNotice';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['status']) { this.status = new fhir.FhirCode<FmStatusCodeType>({value: source.status}); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<FmStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['request']) { this.request = new fhir.Reference(source.request); }
    if (source['response']) { this.response = new fhir.Reference(source.response); }
    if (source['statusDate']) { this.statusDate = new fhir.FhirDate({value: source.statusDate}); }
    if (source['_statusDate']) {
      if (this.statusDate) { this.statusDate.addExtendedProperties(source._statusDate!); }
      else { this.statusDate = new fhir.FhirDate(source._statusDate as Partial<fhir.FhirDateArgs>); }
    }
    if (source['created']) { this.created = new fhir.FhirDateTime({value: source.created}); }
    if (source['_created']) {
      if (this.created) { this.created.addExtendedProperties(source._created!); }
      else { this.created = new fhir.FhirDateTime(source._created as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['target']) { this.target = new fhir.Reference(source.target); }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider); }
    if (source['organization']) { this.organization = new fhir.Reference(source.organization); }
    if (source['paymentStatus']) { this.paymentStatus = new fhir.CodeableConcept(source.paymentStatus); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'PaymentNotice' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOSV('status',exp,'FmStatus',FmStatusVsValidation,'r'));
    iss.push(...this.vOS('request',exp));
    iss.push(...this.vOS('response',exp));
    iss.push(...this.vOS('statusDate',exp));
    iss.push(...this.vOS('created',exp));
    iss.push(...this.vOS('target',exp));
    iss.push(...this.vOS('provider',exp));
    iss.push(...this.vOS('organization',exp));
    iss.push(...this.vOS('paymentStatus',exp));
    return iss;
  }
}
