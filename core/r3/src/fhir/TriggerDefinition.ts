// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: TriggerDefinition

import * as fhir from '../fhir.js';

// @ts-ignore
import { TriggerTypeCodes,  TriggerTypeCodeType } from '../fhirValueSets/TriggerTypeCodes.js';
// @ts-ignore
import { TriggerTypeVsValidation } from '../fhirValueSets/TriggerTypeVsValidation.js';
/**
 * Valid arguments for the TriggerDefinition type.
 */
export interface TriggerDefinitionArgs extends fhir.FhirElementArgs {
  /**
   * The type of triggering event.
   */
  type: fhir.FhirCode<TriggerTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: TriggerDefinition.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * The name of the event (if this is a named-event trigger).
   */
  eventName?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: TriggerDefinition.eventName
   */
  _eventName?:fhir.FhirElementArgs;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTiming?: fhir.Timing|fhir.Reference|fhir.FhirDate|fhir.FhirDateTime|undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingTiming?: fhir.TimingArgs|undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingReference?: fhir.ReferenceArgs|undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingDate?: fhir.FhirDate|string|undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * The triggering data of the event (if this is a data trigger).
   */
  eventData?: fhir.DataRequirementArgs|undefined;
}

/**
 * A description of a triggering event.
 */
export class TriggerDefinition extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'TriggerDefinition';
  /**
   * The type of triggering event.
   */
  public type: fhir.FhirCode<TriggerTypeCodeType>|null;
  /**
   * The name of the event (if this is a named-event trigger).
   */
  public eventName?: fhir.FhirString|undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  public eventTiming?: (fhir.Timing|fhir.Reference|fhir.FhirDate|fhir.FhirDateTime)|undefined;
  /**
   * Internal flag to properly serialize choice-type element TriggerDefinition.eventTiming[x]
   */
  protected static readonly _fts_eventTimingIsChoice:true = true;
  /**
   * The triggering data of the event (if this is a data trigger).
   */
  public eventData?: fhir.DataRequirement|undefined;
  /**
   * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<TriggerDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode<TriggerTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<TriggerTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['eventName']) { this.eventName = new fhir.FhirString({value: source.eventName}); }
    if (source['_eventName']) {
      if (this.eventName) { this.eventName.addExtendedProperties(source._eventName!); }
      else { this.eventName = new fhir.FhirString(source._eventName as Partial<fhir.FhirStringArgs>); }
    }
    if (source['eventTiming']) { this.eventTiming = source.eventTiming; }
    else if (source['eventTimingTiming']) { this.eventTiming = new fhir.Timing(source.eventTimingTiming); }
    else if (source['eventTimingReference']) { this.eventTiming = new fhir.Reference(source.eventTimingReference); }
    else if (source['eventTimingDate']) { this.eventTiming = new fhir.FhirDate({value: source.eventTimingDate}); }
    else if (source['eventTimingDateTime']) { this.eventTiming = new fhir.FhirDateTime({value: source.eventTimingDateTime}); }
    if (source['eventData']) { this.eventData = new fhir.DataRequirement(source.eventData); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'TriggerDefinition' }
    this.vRSV('type',exp,'TriggerType',TriggerTypeVsValidation,'r')
    this.vOS('eventName',exp)
    this.vOS('eventTiming',exp)
    this.vOS('eventData',exp)
    return issues;
  }
}
