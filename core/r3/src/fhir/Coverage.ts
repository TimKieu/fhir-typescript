// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage

import * as fhir from '../fhir.js';

// @ts-ignore
import { FmStatusCodes,  FmStatusCodeType } from '../fhirValueSets/FmStatusCodes.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { CoverageTypeCodes,  CoverageTypeCodeType } from '../fhirValueSets/CoverageTypeCodes.js';
// @ts-ignore
import { CoverageTypeVsValidation } from '../fhirValueSets/CoverageTypeVsValidation.js';
// @ts-ignore
import { PolicyholderRelationshipCodes,  PolicyholderRelationshipCodeType } from '../fhirValueSets/PolicyholderRelationshipCodes.js';
// @ts-ignore
import { PolicyholderRelationshipVsValidation } from '../fhirValueSets/PolicyholderRelationshipVsValidation.js';
/**
 * Valid arguments for the CoverageGrouping type.
 */
export interface CoverageGroupingArgs extends fhir.BackboneElementArgs {
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify an employer group. May also be referred to as a Policy or Group ID.
   */
  group?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.group
   */
  _group?:fhir.FhirElementArgs;
  /**
   * A short description for the group.
   */
  groupDisplay?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.groupDisplay
   */
  _groupDisplay?:fhir.FhirElementArgs;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a subset of an employer group.
   */
  subGroup?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.subGroup
   */
  _subGroup?:fhir.FhirElementArgs;
  /**
   * A short description for the subgroup.
   */
  subGroupDisplay?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.subGroupDisplay
   */
  _subGroupDisplay?:fhir.FhirElementArgs;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a collection of benefits provided to employees. May be referred to as a Section or Division ID.
   */
  plan?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.plan
   */
  _plan?:fhir.FhirElementArgs;
  /**
   * A short description for the plan.
   */
  planDisplay?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.planDisplay
   */
  _planDisplay?:fhir.FhirElementArgs;
  /**
   * Identifies a sub-style or sub-collective of coverage issued by the underwriter, for example may be used to identify a subset of a collection of benefits provided to employees.
   */
  subPlan?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.subPlan
   */
  _subPlan?:fhir.FhirElementArgs;
  /**
   * A short description for the subplan.
   */
  subPlanDisplay?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.subPlanDisplay
   */
  _subPlanDisplay?:fhir.FhirElementArgs;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage such as a level of deductables or co-payment.
   */
  class?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.class
   */
  _class?:fhir.FhirElementArgs;
  /**
   * A short description for the class.
   */
  classDisplay?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.classDisplay
   */
  _classDisplay?:fhir.FhirElementArgs;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a subclass of coverage such as a sub-level of deductables or co-payment.
   */
  subClass?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.subClass
   */
  _subClass?:fhir.FhirElementArgs;
  /**
   * A short description for the subclass.
   */
  subClassDisplay?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.grouping.subClassDisplay
   */
  _subClassDisplay?:fhir.FhirElementArgs;
}

/**
 * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageGrouping extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CoverageGrouping';
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify an employer group. May also be referred to as a Policy or Group ID.
   */
  public group?: fhir.FhirString|undefined;
  /**
   * A short description for the group.
   */
  public groupDisplay?: fhir.FhirString|undefined;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a subset of an employer group.
   */
  public subGroup?: fhir.FhirString|undefined;
  /**
   * A short description for the subgroup.
   */
  public subGroupDisplay?: fhir.FhirString|undefined;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a collection of benefits provided to employees. May be referred to as a Section or Division ID.
   */
  public plan?: fhir.FhirString|undefined;
  /**
   * A short description for the plan.
   */
  public planDisplay?: fhir.FhirString|undefined;
  /**
   * Identifies a sub-style or sub-collective of coverage issued by the underwriter, for example may be used to identify a subset of a collection of benefits provided to employees.
   */
  public subPlan?: fhir.FhirString|undefined;
  /**
   * A short description for the subplan.
   */
  public subPlanDisplay?: fhir.FhirString|undefined;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage such as a level of deductables or co-payment.
   */
  public class?: fhir.FhirString|undefined;
  /**
   * A short description for the class.
   */
  public classDisplay?: fhir.FhirString|undefined;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a subclass of coverage such as a sub-level of deductables or co-payment.
   */
  public subClass?: fhir.FhirString|undefined;
  /**
   * A short description for the subclass.
   */
  public subClassDisplay?: fhir.FhirString|undefined;
  /**
   * Default constructor for CoverageGrouping - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CoverageGroupingArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['group']) { this.group = new fhir.FhirString({value: source.group}); }
    if (source['_group']) {
      if (this.group) { this.group.addExtendedProperties(source._group!); }
      else { this.group = new fhir.FhirString(source._group as Partial<fhir.FhirStringArgs>); }
    }
    if (source['groupDisplay']) { this.groupDisplay = new fhir.FhirString({value: source.groupDisplay}); }
    if (source['_groupDisplay']) {
      if (this.groupDisplay) { this.groupDisplay.addExtendedProperties(source._groupDisplay!); }
      else { this.groupDisplay = new fhir.FhirString(source._groupDisplay as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subGroup']) { this.subGroup = new fhir.FhirString({value: source.subGroup}); }
    if (source['_subGroup']) {
      if (this.subGroup) { this.subGroup.addExtendedProperties(source._subGroup!); }
      else { this.subGroup = new fhir.FhirString(source._subGroup as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subGroupDisplay']) { this.subGroupDisplay = new fhir.FhirString({value: source.subGroupDisplay}); }
    if (source['_subGroupDisplay']) {
      if (this.subGroupDisplay) { this.subGroupDisplay.addExtendedProperties(source._subGroupDisplay!); }
      else { this.subGroupDisplay = new fhir.FhirString(source._subGroupDisplay as Partial<fhir.FhirStringArgs>); }
    }
    if (source['plan']) { this.plan = new fhir.FhirString({value: source.plan}); }
    if (source['_plan']) {
      if (this.plan) { this.plan.addExtendedProperties(source._plan!); }
      else { this.plan = new fhir.FhirString(source._plan as Partial<fhir.FhirStringArgs>); }
    }
    if (source['planDisplay']) { this.planDisplay = new fhir.FhirString({value: source.planDisplay}); }
    if (source['_planDisplay']) {
      if (this.planDisplay) { this.planDisplay.addExtendedProperties(source._planDisplay!); }
      else { this.planDisplay = new fhir.FhirString(source._planDisplay as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subPlan']) { this.subPlan = new fhir.FhirString({value: source.subPlan}); }
    if (source['_subPlan']) {
      if (this.subPlan) { this.subPlan.addExtendedProperties(source._subPlan!); }
      else { this.subPlan = new fhir.FhirString(source._subPlan as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subPlanDisplay']) { this.subPlanDisplay = new fhir.FhirString({value: source.subPlanDisplay}); }
    if (source['_subPlanDisplay']) {
      if (this.subPlanDisplay) { this.subPlanDisplay.addExtendedProperties(source._subPlanDisplay!); }
      else { this.subPlanDisplay = new fhir.FhirString(source._subPlanDisplay as Partial<fhir.FhirStringArgs>); }
    }
    if (source['class']) { this.class = new fhir.FhirString({value: source.class}); }
    if (source['_class']) {
      if (this.class) { this.class.addExtendedProperties(source._class!); }
      else { this.class = new fhir.FhirString(source._class as Partial<fhir.FhirStringArgs>); }
    }
    if (source['classDisplay']) { this.classDisplay = new fhir.FhirString({value: source.classDisplay}); }
    if (source['_classDisplay']) {
      if (this.classDisplay) { this.classDisplay.addExtendedProperties(source._classDisplay!); }
      else { this.classDisplay = new fhir.FhirString(source._classDisplay as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subClass']) { this.subClass = new fhir.FhirString({value: source.subClass}); }
    if (source['_subClass']) {
      if (this.subClass) { this.subClass.addExtendedProperties(source._subClass!); }
      else { this.subClass = new fhir.FhirString(source._subClass as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subClassDisplay']) { this.subClassDisplay = new fhir.FhirString({value: source.subClassDisplay}); }
    if (source['_subClassDisplay']) {
      if (this.subClassDisplay) { this.subClassDisplay.addExtendedProperties(source._subClassDisplay!); }
      else { this.subClassDisplay = new fhir.FhirString(source._subClassDisplay as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Coverage.grouping' }
    this.vOS('group',exp)
    this.vOS('groupDisplay',exp)
    this.vOS('subGroup',exp)
    this.vOS('subGroupDisplay',exp)
    this.vOS('plan',exp)
    this.vOS('planDisplay',exp)
    this.vOS('subPlan',exp)
    this.vOS('subPlanDisplay',exp)
    this.vOS('class',exp)
    this.vOS('classDisplay',exp)
    this.vOS('subClass',exp)
    this.vOS('subClassDisplay',exp)
    return issues;
  }
}
/**
 * Valid arguments for the Coverage type.
 */
export interface CoverageArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Coverage"|undefined;
  /**
   * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatination of the Coverage.SubscriberID and the Coverage.dependant.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
   */
  status?: fhir.FhirCode<FmStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The party who 'owns' the insurance policy,  may be an individual, corporation or the subscriber's employer.
   */
  policyHolder?: fhir.ReferenceArgs|undefined;
  /**
   * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
   */
  subscriber?: fhir.ReferenceArgs|undefined;
  /**
   * The insurer assigned ID for the Subscriber.
   */
  subscriberId?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.subscriberId
   */
  _subscriberId?:fhir.FhirElementArgs;
  /**
   * The party who benefits from the insurance coverage., the patient when services are provided.
   */
  beneficiary?: fhir.ReferenceArgs|undefined;
  /**
   * The relationship of beneficiary (patient) to the subscriber.
   */
  relationship?: fhir.CodeableConceptArgs|undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  period?: fhir.PeriodArgs|undefined;
  /**
   * The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements. May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
   */
  payor?: fhir.ReferenceArgs[]|undefined;
  /**
   * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
   */
  grouping?: fhir.CoverageGroupingArgs|undefined;
  /**
   * A unique identifier for a dependent under the coverage.
   */
  dependent?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.dependent
   */
  _dependent?:fhir.FhirElementArgs;
  /**
   * An optional counter for a particular instance of the identified coverage which increments upon each renewal.
   */
  sequence?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The order of applicability of this coverage relative to other coverages which are currently inforce. Note, there may be gaps in the numbering and this does not imply primary, secondard etc. as the specific positioning of coverages depends upon the episode of care.
   */
  order?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Coverage.order
   */
  _order?:fhir.FhirElementArgs;
  /**
   * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
   */
  network?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.network
   */
  _network?:fhir.FhirElementArgs;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  contract?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Financial instrument which may be used to reimburse or pay for health care products and services.
 */
export class Coverage extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Coverage';
  /**
   * Resource Type Name
   */
  public override resourceType: "Coverage";
  /**
   * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatination of the Coverage.SubscriberID and the Coverage.dependant.
   */
  public identifier: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
   */
  public status?: fhir.FhirCode<FmStatusCodeType>|undefined;
  /**
   * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The party who 'owns' the insurance policy,  may be an individual, corporation or the subscriber's employer.
   */
  public policyHolder?: fhir.Reference|undefined;
  /**
   * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
   */
  public subscriber?: fhir.Reference|undefined;
  /**
   * The insurer assigned ID for the Subscriber.
   */
  public subscriberId?: fhir.FhirString|undefined;
  /**
   * The party who benefits from the insurance coverage., the patient when services are provided.
   */
  public beneficiary?: fhir.Reference|undefined;
  /**
   * The relationship of beneficiary (patient) to the subscriber.
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  public period?: fhir.Period|undefined;
  /**
   * The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements. May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
   */
  public payor: fhir.Reference[];
  /**
   * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
   */
  public grouping?: fhir.CoverageGrouping|undefined;
  /**
   * A unique identifier for a dependent under the coverage.
   */
  public dependent?: fhir.FhirString|undefined;
  /**
   * An optional counter for a particular instance of the identified coverage which increments upon each renewal.
   */
  public sequence?: fhir.FhirString|undefined;
  /**
   * The order of applicability of this coverage relative to other coverages which are currently inforce. Note, there may be gaps in the numbering and this does not imply primary, secondard etc. as the specific positioning of coverages depends upon the episode of care.
   */
  public order?: fhir.FhirPositiveInt|undefined;
  /**
   * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
   */
  public network?: fhir.FhirString|undefined;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  public contract: fhir.Reference[];
  /**
   * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CoverageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Coverage';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['status']) { this.status = new fhir.FhirCode<FmStatusCodeType>({value: source.status}); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<FmStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['policyHolder']) { this.policyHolder = new fhir.Reference(source.policyHolder); }
    if (source['subscriber']) { this.subscriber = new fhir.Reference(source.subscriber); }
    if (source['subscriberId']) { this.subscriberId = new fhir.FhirString({value: source.subscriberId}); }
    if (source['_subscriberId']) {
      if (this.subscriberId) { this.subscriberId.addExtendedProperties(source._subscriberId!); }
      else { this.subscriberId = new fhir.FhirString(source._subscriberId as Partial<fhir.FhirStringArgs>); }
    }
    if (source['beneficiary']) { this.beneficiary = new fhir.Reference(source.beneficiary); }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship); }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    if (source['payor']) { this.payor = source.payor.map((x) => new fhir.Reference(x)); }
    else { this.payor = []; }
    if (source['grouping']) { this.grouping = new fhir.CoverageGrouping(source.grouping); }
    if (source['dependent']) { this.dependent = new fhir.FhirString({value: source.dependent}); }
    if (source['_dependent']) {
      if (this.dependent) { this.dependent.addExtendedProperties(source._dependent!); }
      else { this.dependent = new fhir.FhirString(source._dependent as Partial<fhir.FhirStringArgs>); }
    }
    if (source['sequence']) { this.sequence = new fhir.FhirString({value: source.sequence}); }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirString(source._sequence as Partial<fhir.FhirStringArgs>); }
    }
    if (source['order']) { this.order = new fhir.FhirPositiveInt({value: source.order}); }
    if (source['_order']) {
      if (this.order) { this.order.addExtendedProperties(source._order!); }
      else { this.order = new fhir.FhirPositiveInt(source._order as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['network']) { this.network = new fhir.FhirString({value: source.network}); }
    if (source['_network']) {
      if (this.network) { this.network.addExtendedProperties(source._network!); }
      else { this.network = new fhir.FhirString(source._network as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contract']) { this.contract = source.contract.map((x) => new fhir.Reference(x)); }
    else { this.contract = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Coverage' }
    this.vRS('resourceType',exp)
    this.vOA('identifier',exp)
    this.vOSV('status',exp,'FmStatus',FmStatusVsValidation,'r')
    this.vOS('type',exp)
    this.vOS('policyHolder',exp)
    this.vOS('subscriber',exp)
    this.vOS('subscriberId',exp)
    this.vOS('beneficiary',exp)
    this.vOS('relationship',exp)
    this.vOS('period',exp)
    this.vOA('payor',exp)
    this.vOS('grouping',exp)
    this.vOS('dependent',exp)
    this.vOS('sequence',exp)
    this.vOS('order',exp)
    this.vOS('network',exp)
    this.vOA('contract',exp)
    return issues;
  }
}
