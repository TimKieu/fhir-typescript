// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Binary

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the Binary type.
 */
export interface BinaryArgs extends fhir.ResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Binary"|undefined;
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  contentType: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Binary.contentType
   */
  _contentType?:fhir.FhirElementArgs;
  /**
   * Treat this binary as if it was this other resource for access control purposes.
   */
  securityContext?: fhir.ReferenceArgs|undefined;
  /**
   * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
   */
  content: fhir.FhirBase64Binary|string|undefined;
  /**
   * Extended properties for primitive element: Binary.content
   */
  _content?:fhir.FhirElementArgs;
}

/**
 * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export class Binary extends fhir.Resource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Binary';
  /**
   * Resource Type Name
   */
  public override resourceType: "Binary";
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  public contentType: fhir.FhirCode|null;
  /**
   * Treat this binary as if it was this other resource for access control purposes.
   */
  public securityContext?: fhir.Reference|undefined;
  /**
   * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
   */
  public content: fhir.FhirBase64Binary|null;
  /**
   * Default constructor for Binary - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<BinaryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Binary';
    if (source['contentType']) { this.contentType = new fhir.FhirCode({value: source.contentType}); }
    else { this.contentType = null; }
    if (source['_contentType']) {
      if (this.contentType) { this.contentType.addExtendedProperties(source._contentType!); }
      else { this.contentType = new fhir.FhirCode(source._contentType as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['securityContext']) { this.securityContext = new fhir.Reference(source.securityContext); }
    if (source['content']) { this.content = new fhir.FhirBase64Binary({value: source.content}); }
    else { this.content = null; }
    if (source['_content']) {
      if (this.content) { this.content.addExtendedProperties(source._content!); }
      else { this.content = new fhir.FhirBase64Binary(source._content as Partial<fhir.FhirBase64BinaryArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Binary' }
    this.vRS('resourceType',exp)
    this.vRS('contentType',exp)
    this.vOS('securityContext',exp)
    this.vRS('content',exp)
    return issues;
  }
}
