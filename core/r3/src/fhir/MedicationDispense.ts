// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense

import * as fhir from '../fhir.js';

// @ts-ignore
import { V3ActSubstanceAdminSubstitutionCodes,  V3ActSubstanceAdminSubstitutionCodeType } from '../fhirValueSets/V3ActSubstanceAdminSubstitutionCodes.js';
// @ts-ignore
import { V3ActSubstanceAdminSubstitutionVsValidation } from '../fhirValueSets/V3ActSubstanceAdminSubstitutionVsValidation.js';
// @ts-ignore
import { V3SubstanceAdminSubstitutionReasonCodes,  V3SubstanceAdminSubstitutionReasonCodeType } from '../fhirValueSets/V3SubstanceAdminSubstitutionReasonCodes.js';
// @ts-ignore
import { V3SubstanceAdminSubstitutionReasonVsValidation } from '../fhirValueSets/V3SubstanceAdminSubstitutionReasonVsValidation.js';
// @ts-ignore
import { MedicationDispenseStatusCodes,  MedicationDispenseStatusCodeType } from '../fhirValueSets/MedicationDispenseStatusCodes.js';
// @ts-ignore
import { MedicationDispenseStatusVsValidation } from '../fhirValueSets/MedicationDispenseStatusVsValidation.js';
// @ts-ignore
import { MedicationDispenseCategoryCodes,  MedicationDispenseCategoryCodeType } from '../fhirValueSets/MedicationDispenseCategoryCodes.js';
// @ts-ignore
import { MedicationDispenseCategoryVsValidation } from '../fhirValueSets/MedicationDispenseCategoryVsValidation.js';
// @ts-ignore
import { V3ActPharmacySupplyTypeCodes,  V3ActPharmacySupplyTypeCodeType } from '../fhirValueSets/V3ActPharmacySupplyTypeCodes.js';
// @ts-ignore
import { V3ActPharmacySupplyTypeVsValidation } from '../fhirValueSets/V3ActPharmacySupplyTypeVsValidation.js';
/**
 * Valid arguments for the MedicationDispensePerformer type.
 */
export interface MedicationDispensePerformerArgs extends fhir.BackboneElementArgs {
  /**
   * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
   */
  actor: fhir.ReferenceArgs|null;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: fhir.ReferenceArgs|undefined;
}

/**
 * The performer will be reviewed as part of STU4.
 */
export class MedicationDispensePerformer extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationDispensePerformer';
  /**
   * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
   */
  public actor: fhir.Reference|null;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  public onBehalfOf?: fhir.Reference|undefined;
  /**
   * Default constructor for MedicationDispensePerformer - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationDispensePerformerArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['actor']) { this.actor = new fhir.Reference(source.actor); }
    else { this.actor = null; }
    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicationDispense.performer' }
    iss.push(...this.vRS('actor',exp));
    iss.push(...this.vOS('onBehalfOf',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicationDispenseSubstitution type.
 */
export interface MedicationDispenseSubstitutionArgs extends fhir.BackboneElementArgs {
  /**
   * True if the dispenser dispensed a different drug or product from what was prescribed.
   */
  wasSubstituted: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: MedicationDispense.substitution.wasSubstituted
   */
  _wasSubstituted?:fhir.FhirElementArgs;
  /**
   * A code signifying whether a different drug was dispensed from what was prescribed.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
   */
  reason?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The person or organization that has primary responsibility for the substitution.
   */
  responsibleParty?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationDispenseSubstitution';
  /**
   * True if the dispenser dispensed a different drug or product from what was prescribed.
   */
  public wasSubstituted: fhir.FhirBoolean|null;
  /**
   * A code signifying whether a different drug was dispensed from what was prescribed.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
   */
  public reason: fhir.CodeableConcept[];
  /**
   * The person or organization that has primary responsibility for the substitution.
   */
  public responsibleParty: fhir.Reference[];
  /**
   * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationDispenseSubstitutionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['wasSubstituted']) { this.wasSubstituted = new fhir.FhirBoolean({value: source.wasSubstituted}); }
    else { this.wasSubstituted = null; }
    if (source['_wasSubstituted']) {
      if (this.wasSubstituted) { this.wasSubstituted.addExtendedProperties(source._wasSubstituted!); }
      else { this.wasSubstituted = new fhir.FhirBoolean(source._wasSubstituted as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['reason']) { this.reason = source.reason.map((x) => new fhir.CodeableConcept(x)); }
    else { this.reason = []; }
    if (source['responsibleParty']) { this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x)); }
    else { this.responsibleParty = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicationDispense.substitution' }
    iss.push(...this.vRS('wasSubstituted',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOA('reason',exp));
    iss.push(...this.vOA('responsibleParty',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicationDispense type.
 */
export interface MedicationDispenseArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MedicationDispense"|undefined;
  /**
   * Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The procedure that the dispense is done because of.
   */
  partOf?: fhir.ReferenceArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: fhir.FhirCode<MedicationDispenseStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: MedicationDispense.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Indicates type of medication dispense and where the medication is expected to be consumed or administered.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medication?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationReference?: fhir.ReferenceArgs|undefined;
  /**
   * SubstanceAdministration-&gt;subject-&gt;Patient.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * The encounter or episode of care that establishes the context for this event.
   */
  context?: fhir.ReferenceArgs|undefined;
  /**
   * Additional information that supports the medication being dispensed.
   */
  supportingInformation?: fhir.ReferenceArgs[]|undefined;
  /**
   * The performer will be reviewed as part of STU4.
   */
  performer?: fhir.MedicationDispensePerformerArgs[]|undefined;
  /**
   * Maps to basedOn in Event logical model.
   */
  authorizingPrescription?: fhir.ReferenceArgs[]|undefined;
  /**
   * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The amount of medication that has been dispensed. Includes unit of measure.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * The amount of medication expressed as a timing amount.
   */
  daysSupply?: fhir.QuantityArgs|undefined;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  whenPrepared?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: MedicationDispense.whenPrepared
   */
  _whenPrepared?:fhir.FhirElementArgs;
  /**
   * The time the dispensed product was provided to the patient or their representative.
   */
  whenHandedOver?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: MedicationDispense.whenHandedOver
   */
  _whenHandedOver?:fhir.FhirElementArgs;
  /**
   * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
   */
  destination?: fhir.ReferenceArgs|undefined;
  /**
   * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
   */
  receiver?: fhir.ReferenceArgs[]|undefined;
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
   * The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
   */
  dosageInstruction?: fhir.DosageArgs[]|undefined;
  /**
   * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
   */
  substitution?: fhir.MedicationDispenseSubstitutionArgs|undefined;
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
   */
  detectedIssue?: fhir.ReferenceArgs[]|undefined;
  /**
   * True if the dispense was not performed for some reason.
   */
  notDone?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: MedicationDispense.notDone
   */
  _notDone?:fhir.FhirElementArgs;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  notDoneReason?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  notDoneReasonCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  notDoneReasonReference?: fhir.ReferenceArgs|undefined;
  /**
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  eventHistory?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationDispense';
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicationDispense";
  /**
   * Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
   */
  public identifier: fhir.Identifier[];
  /**
   * The procedure that the dispense is done because of.
   */
  public partOf: fhir.Reference[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status?: fhir.FhirCode<MedicationDispenseStatusCodeType>|undefined;
  /**
   * Indicates type of medication dispense and where the medication is expected to be consumed or administered.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  public medication: (fhir.CodeableConcept|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element MedicationDispense.medication[x]
   */
  protected static readonly _fts_medicationIsChoice:true = true;
  /**
   * SubstanceAdministration-&gt;subject-&gt;Patient.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * The encounter or episode of care that establishes the context for this event.
   */
  public context?: fhir.Reference|undefined;
  /**
   * Additional information that supports the medication being dispensed.
   */
  public supportingInformation: fhir.Reference[];
  /**
   * The performer will be reviewed as part of STU4.
   */
  public performer: fhir.MedicationDispensePerformer[];
  /**
   * Maps to basedOn in Event logical model.
   */
  public authorizingPrescription: fhir.Reference[];
  /**
   * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The amount of medication that has been dispensed. Includes unit of measure.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * The amount of medication expressed as a timing amount.
   */
  public daysSupply?: fhir.Quantity|undefined;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  public whenPrepared?: fhir.FhirDateTime|undefined;
  /**
   * The time the dispensed product was provided to the patient or their representative.
   */
  public whenHandedOver?: fhir.FhirDateTime|undefined;
  /**
   * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
   */
  public destination?: fhir.Reference|undefined;
  /**
   * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
   */
  public receiver: fhir.Reference[];
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  public note: fhir.Annotation[];
  /**
   * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
   * The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
   */
  public dosageInstruction: fhir.Dosage[];
  /**
   * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
   */
  public substitution?: fhir.MedicationDispenseSubstitution|undefined;
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
   */
  public detectedIssue: fhir.Reference[];
  /**
   * True if the dispense was not performed for some reason.
   */
  public notDone?: fhir.FhirBoolean|undefined;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  public notDoneReason?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element MedicationDispense.notDoneReason[x]
   */
  protected static readonly _fts_notDoneReasonIsChoice:true = true;
  /**
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  public eventHistory: fhir.Reference[];
  /**
   * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationDispenseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MedicationDispense';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['partOf']) { this.partOf = source.partOf.map((x) => new fhir.Reference(x)); }
    else { this.partOf = []; }
    if (source['status']) { this.status = new fhir.FhirCode<MedicationDispenseStatusCodeType>({value: source.status}); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<MedicationDispenseStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['medication']) { this.medication = source.medication; }
    else if (source['medicationCodeableConcept']) { this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept); }
    else if (source['medicationReference']) { this.medication = new fhir.Reference(source.medicationReference); }
    else { this.medication = null; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    if (source['context']) { this.context = new fhir.Reference(source.context); }
    if (source['supportingInformation']) { this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x)); }
    else { this.supportingInformation = []; }
    if (source['performer']) { this.performer = source.performer.map((x) => new fhir.MedicationDispensePerformer(x)); }
    else { this.performer = []; }
    if (source['authorizingPrescription']) { this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x)); }
    else { this.authorizingPrescription = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['daysSupply']) { this.daysSupply = new fhir.Quantity(source.daysSupply); }
    if (source['whenPrepared']) { this.whenPrepared = new fhir.FhirDateTime({value: source.whenPrepared}); }
    if (source['_whenPrepared']) {
      if (this.whenPrepared) { this.whenPrepared.addExtendedProperties(source._whenPrepared!); }
      else { this.whenPrepared = new fhir.FhirDateTime(source._whenPrepared as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['whenHandedOver']) { this.whenHandedOver = new fhir.FhirDateTime({value: source.whenHandedOver}); }
    if (source['_whenHandedOver']) {
      if (this.whenHandedOver) { this.whenHandedOver.addExtendedProperties(source._whenHandedOver!); }
      else { this.whenHandedOver = new fhir.FhirDateTime(source._whenHandedOver as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['destination']) { this.destination = new fhir.Reference(source.destination); }
    if (source['receiver']) { this.receiver = source.receiver.map((x) => new fhir.Reference(x)); }
    else { this.receiver = []; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['dosageInstruction']) { this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x)); }
    else { this.dosageInstruction = []; }
    if (source['substitution']) { this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution); }
    if (source['detectedIssue']) { this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x)); }
    else { this.detectedIssue = []; }
    if (source['notDone']) { this.notDone = new fhir.FhirBoolean({value: source.notDone}); }
    if (source['_notDone']) {
      if (this.notDone) { this.notDone.addExtendedProperties(source._notDone!); }
      else { this.notDone = new fhir.FhirBoolean(source._notDone as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['notDoneReason']) { this.notDoneReason = source.notDoneReason; }
    else if (source['notDoneReasonCodeableConcept']) { this.notDoneReason = new fhir.CodeableConcept(source.notDoneReasonCodeableConcept); }
    else if (source['notDoneReasonReference']) { this.notDoneReason = new fhir.Reference(source.notDoneReasonReference); }
    if (source['eventHistory']) { this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x)); }
    else { this.eventHistory = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicationDispense' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOA('partOf',exp));
    iss.push(...this.vOSV('status',exp,'MedicationDispenseStatus',MedicationDispenseStatusVsValidation,'r'));
    iss.push(...this.vOS('category',exp));
    iss.push(...this.vRS('medication',exp));
    iss.push(...this.vOS('subject',exp));
    iss.push(...this.vOS('context',exp));
    iss.push(...this.vOA('supportingInformation',exp));
    iss.push(...this.vOA('performer',exp));
    iss.push(...this.vOA('authorizingPrescription',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('quantity',exp));
    iss.push(...this.vOS('daysSupply',exp));
    iss.push(...this.vOS('whenPrepared',exp));
    iss.push(...this.vOS('whenHandedOver',exp));
    iss.push(...this.vOS('destination',exp));
    iss.push(...this.vOA('receiver',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOA('dosageInstruction',exp));
    iss.push(...this.vOS('substitution',exp));
    iss.push(...this.vOA('detectedIssue',exp));
    iss.push(...this.vOS('notDone',exp));
    iss.push(...this.vOS('notDoneReason',exp));
    iss.push(...this.vOA('eventHistory',exp));
    return iss;
  }
}
