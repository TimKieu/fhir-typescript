// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Practitioner
import * as fhir from '../fhir.js';
// @ts-ignore
import { AdministrativeGenderVsValidation } from '../fhirValueSets/AdministrativeGenderVsValidation.js';
/**
 * The list of roles/organizations that the practitioner is associated with.
 */
export class PractitionerPractitionerRole extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerPractitionerRole - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x));
        }
        else {
            this.location = [];
        }
        if (source['healthcareService']) {
            this.healthcareService = source.healthcareService.map((x) => new fhir.Reference(x));
        }
        else {
            this.healthcareService = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Practitioner.practitionerRole';
        }
        iss.push(...this.vOS('managingOrganization', exp));
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOA('specialty', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOA('location', exp));
        iss.push(...this.vOA('healthcareService', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PractitionerPractitionerRole._fts_dataType = 'PractitionerPractitionerRole';
/**
 * Qualifications obtained by training and certification.
 */
export class PractitionerQualification extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerQualification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['issuer']) {
            this.issuer = new fhir.Reference(source.issuer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Practitioner.qualification';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('issuer', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PractitionerQualification._fts_dataType = 'PractitionerQualification';
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
export class Practitioner extends fhir.DomainResource {
    /**
     * Default constructor for Practitioner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Practitioner';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['_birthDate']) {
            if (this.birthDate) {
                this.birthDate.addExtendedProperties(source._birthDate);
            }
            else {
                this.birthDate = new fhir.FhirDate(source._birthDate);
            }
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        else {
            this.photo = [];
        }
        if (source['practitionerRole']) {
            this.practitionerRole = source.practitionerRole.map((x) => new fhir.PractitionerPractitionerRole(x));
        }
        else {
            this.practitionerRole = [];
        }
        if (source['qualification']) {
            this.qualification = source.qualification.map((x) => new fhir.PractitionerQualification(x));
        }
        else {
            this.qualification = [];
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.communication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Practitioner';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('active', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOA('address', exp));
        iss.push(...this.vOSV('gender', exp, 'AdministrativeGender', AdministrativeGenderVsValidation, 'r'));
        iss.push(...this.vOS('birthDate', exp));
        iss.push(...this.vOA('photo', exp));
        iss.push(...this.vOA('practitionerRole', exp));
        iss.push(...this.vOA('qualification', exp));
        iss.push(...this.vOA('communication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Practitioner._fts_dataType = 'Practitioner';
//# sourceMappingURL=data:application/json;base64,