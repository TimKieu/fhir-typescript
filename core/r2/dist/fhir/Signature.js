// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Signature
import * as fhir from '../fhir.js';
/**
 * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
 */
export class Signature extends fhir.FhirElement {
    /**
     * Default constructor for Signature - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.type = [];
        }
        if (source['when'] !== undefined) {
            this.when = new fhir.FhirInstant({ value: source.when }, options);
        }
        else {
            this.when = null;
        }
        if (source['_when']) {
            if (this.when) {
                this.when.addExtendedProperties(source._when);
            }
            else {
                this.when = new fhir.FhirInstant(source._when, options);
            }
        }
        if (source['who']) {
            this.who = source.who;
        }
        else if (source['whoUri'] !== undefined) {
            this.who = new fhir.FhirUri({ value: source.whoUri }, options);
        }
        else if (source['whoReference']) {
            this.who = new fhir.Reference(source.whoReference, options);
        }
        else {
            this.who = null;
        }
        if (source['contentType'] !== undefined) {
            this.contentType = new fhir.FhirCode({ value: source.contentType }, options);
        }
        else {
            this.contentType = null;
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType, options);
            }
        }
        if (source['blob'] !== undefined) {
            this.blob = new fhir.FhirBase64Binary({ value: source.blob }, options);
        }
        else {
            this.blob = null;
        }
        if (source['_blob']) {
            if (this.blob) {
                this.blob.addExtendedProperties(source._blob);
            }
            else {
                this.blob = new fhir.FhirBase64Binary(source._blob, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Signature';
        }
        iss.push(...this.vRA('type', exp));
        iss.push(...this.vRS('when', exp));
        iss.push(...this.vRS('who', exp));
        iss.push(...this.vRS('contentType', exp));
        iss.push(...this.vRS('blob', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Signature._fts_dataType = 'Signature';
/**
 * Internal flag to properly serialize choice-type element Signature.who[x]
 */
Signature._fts_whoIsChoice = true;
//# sourceMappingURL=data:application/json;base64,