// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DataElement
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
// @ts-ignore
import { DataelementStringencyVsValidation } from '../fhirValueSets/DataelementStringencyVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class DataElementContact extends fhir.BackboneElement {
    /**
     * Default constructor for DataElementContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataElement.contact';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataElementContact._fts_dataType = 'DataElementContact';
/**
 * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
 */
export class DataElementMapping extends fhir.BackboneElement {
    /**
     * Default constructor for DataElementMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity'] !== undefined) {
            this.identity = new fhir.FhirId({ value: source.identity }, options);
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity, options);
            }
        }
        if (source['uri'] !== undefined) {
            this.uri = new fhir.FhirUri({ value: source.uri }, options);
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['comments'] !== undefined) {
            this.comments = new fhir.FhirString({ value: source.comments }, options);
        }
        if (source['_comments']) {
            if (this.comments) {
                this.comments.addExtendedProperties(source._comments);
            }
            else {
                this.comments = new fhir.FhirString(source._comments, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataElement.mapping';
        }
        iss.push(...this.vRS('identity', exp));
        iss.push(...this.vOS('uri', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('comments', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataElementMapping._fts_dataType = 'DataElementMapping';
/**
 * The formal description of a single piece of information that can be gathered and reported.
 */
export class DataElement extends fhir.DomainResource {
    /**
     * Default constructor for DataElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DataElement';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.DataElementContact(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirString({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright, options);
            }
        }
        if (source['stringency'] !== undefined) {
            this.stringency = new fhir.FhirCode({ value: source.stringency }, options);
        }
        if (source['_stringency']) {
            if (this.stringency) {
                this.stringency.addExtendedProperties(source._stringency);
            }
            else {
                this.stringency = new fhir.FhirCode(source._stringency, options);
            }
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.DataElementMapping(x, options));
        }
        else {
            this.mapping = [];
        }
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x, options));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataElement';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOSV('stringency', exp, 'DataelementStringency', DataelementStringencyVsValidation, 'r'));
        iss.push(...this.vOA('mapping', exp));
        iss.push(...this.vRA('element', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataElement._fts_dataType = 'DataElement';
//# sourceMappingURL=data:application/json;base64,