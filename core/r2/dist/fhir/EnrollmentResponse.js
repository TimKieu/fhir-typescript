// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: EnrollmentResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * This resource provides enrollment and plan details from the processing of an Enrollment resource.
 */
export class EnrollmentResponse extends fhir.DomainResource {
    /**
     * Default constructor for EnrollmentResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EnrollmentResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request, options);
        }
        if (source['outcome'] !== undefined) {
            this.outcome = new fhir.FhirCode({ value: source.outcome }, options);
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome, options);
            }
        }
        if (source['disposition'] !== undefined) {
            this.disposition = new fhir.FhirString({ value: source.disposition }, options);
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition, options);
            }
        }
        if (source['ruleset']) {
            this.ruleset = new fhir.Coding(source.ruleset, options);
        }
        if (source['originalRuleset']) {
            this.originalRuleset = new fhir.Coding(source.originalRuleset, options);
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization, options);
        }
        if (source['requestProvider']) {
            this.requestProvider = new fhir.Reference(source.requestProvider, options);
        }
        if (source['requestOrganization']) {
            this.requestOrganization = new fhir.Reference(source.requestOrganization, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EnrollmentResponse';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOSV('outcome', exp, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r'));
        iss.push(...this.vOS('disposition', exp));
        iss.push(...this.vOS('ruleset', exp));
        iss.push(...this.vOS('originalRuleset', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('organization', exp));
        iss.push(...this.vOS('requestProvider', exp));
        iss.push(...this.vOS('requestOrganization', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EnrollmentResponse._fts_dataType = 'EnrollmentResponse';
//# sourceMappingURL=data:application/json;base64,