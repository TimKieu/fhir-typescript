// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: List
import * as fhir from '../fhir.js';
// @ts-ignore
import { ListStatusVsValidation } from '../fhirValueSets/ListStatusVsValidation.js';
// @ts-ignore
import { ListModeVsValidation } from '../fhirValueSets/ListModeVsValidation.js';
/**
 * Entries in this list.
 */
export class ListEntry extends fhir.BackboneElement {
    /**
     * Default constructor for ListEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['flag']) {
            this.flag = new fhir.CodeableConcept(source.flag, options);
        }
        if (source['deleted'] !== undefined) {
            this.deleted = new fhir.FhirBoolean({ value: source.deleted }, options);
        }
        if (source['_deleted']) {
            if (this.deleted) {
                this.deleted.addExtendedProperties(source._deleted);
            }
            else {
                this.deleted = new fhir.FhirBoolean(source._deleted, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item, options);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'List.entry';
        }
        iss.push(...this.vOS('flag', exp));
        iss.push(...this.vOS('deleted', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vRS('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ListEntry._fts_dataType = 'ListEntry';
/**
 * A set of information summarized from a list of other resources.
 */
export class List extends fhir.DomainResource {
    /**
     * Default constructor for List - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'List';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['orderedBy']) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy, options);
        }
        if (source['mode'] !== undefined) {
            this.mode = new fhir.FhirCode({ value: source.mode }, options);
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode, options);
            }
        }
        if (source['note'] !== undefined) {
            this.note = new fhir.FhirString({ value: source.note }, options);
        }
        if (source['_note']) {
            if (this.note) {
                this.note.addExtendedProperties(source._note);
            }
            else {
                this.note = new fhir.FhirString(source._note, options);
            }
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.ListEntry(x, options));
        }
        else {
            this.entry = [];
        }
        if (source['emptyReason']) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'List';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vRSV('status', exp, 'ListStatus', ListStatusVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('orderedBy', exp));
        iss.push(...this.vRSV('mode', exp, 'ListMode', ListModeVsValidation, 'r'));
        iss.push(...this.vOS('note', exp));
        iss.push(...this.vOA('entry', exp));
        iss.push(...this.vOS('emptyReason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
List._fts_dataType = 'List';
//# sourceMappingURL=data:application/json;base64,