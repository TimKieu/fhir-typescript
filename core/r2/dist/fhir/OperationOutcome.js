// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationOutcome
import * as fhir from '../fhir.js';
// @ts-ignore
import { IssueSeverityVsValidation } from '../fhirValueSets/IssueSeverityVsValidation.js';
// @ts-ignore
import { IssueTypeVsValidation } from '../fhirValueSets/IssueTypeVsValidation.js';
/**
 * An error, warning or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['details']) {
            this.details = new fhir.CodeableConcept(source.details);
        }
        if (source['diagnostics']) {
            this.diagnostics = new fhir.FhirString({ value: source.diagnostics });
        }
        if (source['_diagnostics']) {
            if (this.diagnostics) {
                this.diagnostics.addExtendedProperties(source._diagnostics);
            }
            else {
                this.diagnostics = new fhir.FhirString(source._diagnostics);
            }
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.location = [];
        }
        if (source['_location']) {
            source._location.forEach((x, i) => {
                if (this.location.length >= i) {
                    if (x) {
                        this.location[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.location.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationOutcome.issue';
        }
        this.vRSV('severity', exp, 'IssueSeverity', IssueSeverityVsValidation, 'r');
        this.vRSV('code', exp, 'IssueType', IssueTypeVsValidation, 'r');
        this.vOS('details', exp);
        this.vOS('diagnostics', exp);
        this.vOA('location', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcomeIssue._fts_dataType = 'OperationOutcomeIssue';
/**
 * A collection of error, warning or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationOutcome';
        if (source['issue']) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x));
        }
        else {
            this.issue = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationOutcome';
        }
        this.vRS('resourceType', exp);
        this.vRA('issue', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcome._fts_dataType = 'OperationOutcome';
//# sourceMappingURL=data:application/json;base64,