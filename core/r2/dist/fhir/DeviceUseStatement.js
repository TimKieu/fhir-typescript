// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceUseStatement
import * as fhir from '../fhir.js';
/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
export class DeviceUseStatement extends fhir.DomainResource {
    /**
     * Default constructor for DeviceUseStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceUseStatement';
        if (source['bodySite']) {
            this.bodySite = source.bodySite;
        }
        else if (source['bodySiteCodeableConcept']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySiteCodeableConcept);
        }
        else if (source['bodySiteReference']) {
            this.bodySite = new fhir.Reference(source.bodySiteReference);
        }
        if (source['whenUsed']) {
            this.whenUsed = new fhir.Period(source.whenUsed);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        else {
            this.device = null;
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['indication']) {
            this.indication = source.indication.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.indication = [];
        }
        if (source['notes']) {
            this.notes = source.notes.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.notes = [];
        }
        if (source['_notes']) {
            source._notes.forEach((x, i) => {
                if (this.notes.length >= i) {
                    if (x) {
                        this.notes[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.notes.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['recordedOn']) {
            this.recordedOn = new fhir.FhirDateTime({ value: source.recordedOn });
        }
        if (source['_recordedOn']) {
            if (this.recordedOn) {
                this.recordedOn.addExtendedProperties(source._recordedOn);
            }
            else {
                this.recordedOn = new fhir.FhirDateTime(source._recordedOn);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceUseStatement';
        }
        this.vRS('resourceType', exp);
        this.vOS('bodySite', exp);
        this.vOS('whenUsed', exp);
        this.vRS('device', exp);
        this.vOA('identifier', exp);
        this.vOA('indication', exp);
        this.vOA('notes', exp);
        this.vOS('recordedOn', exp);
        this.vRS('subject', exp);
        this.vOS('timing', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceUseStatement._fts_dataType = 'DeviceUseStatement';
/**
 * Internal flag to properly serialize choice-type element DeviceUseStatement.bodySite[x]
 */
DeviceUseStatement._fts_bodySiteIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element DeviceUseStatement.timing[x]
 */
DeviceUseStatement._fts_timingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,