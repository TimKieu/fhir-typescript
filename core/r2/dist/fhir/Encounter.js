// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Encounter
import * as fhir from '../fhir.js';
// @ts-ignore
import { EncounterStateVsValidation } from '../fhirValueSets/EncounterStateVsValidation.js';
// @ts-ignore
import { EncounterLocationStatusVsValidation } from '../fhirValueSets/EncounterLocationStatusVsValidation.js';
// @ts-ignore
import { EncounterClassVsValidation } from '../fhirValueSets/EncounterClassVsValidation.js';
/**
 * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
 */
export class EncounterStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.statusHistory';
        }
        this.vRSV('status', exp, 'EncounterState', EncounterStateVsValidation, 'r');
        this.vRS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterStatusHistory._fts_dataType = 'EncounterStatusHistory';
/**
 * The list of people responsible for providing the service.
 */
export class EncounterParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.participant';
        }
        this.vOA('type', exp);
        this.vOS('period', exp);
        this.vOS('individual', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterParticipant._fts_dataType = 'EncounterParticipant';
/**
 * Details about the admission to a healthcare service.
 */
export class EncounterHospitalization extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterHospitalization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['preAdmissionIdentifier']) {
            this.preAdmissionIdentifier = new fhir.Identifier(source.preAdmissionIdentifier);
        }
        if (source['origin']) {
            this.origin = new fhir.Reference(source.origin);
        }
        if (source['admitSource']) {
            this.admitSource = new fhir.CodeableConcept(source.admitSource);
        }
        if (source['admittingDiagnosis']) {
            this.admittingDiagnosis = source.admittingDiagnosis.map((x) => new fhir.Reference(x));
        }
        else {
            this.admittingDiagnosis = [];
        }
        if (source['reAdmission']) {
            this.reAdmission = new fhir.CodeableConcept(source.reAdmission);
        }
        if (source['dietPreference']) {
            this.dietPreference = source.dietPreference.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.dietPreference = [];
        }
        if (source['specialCourtesy']) {
            this.specialCourtesy = source.specialCourtesy.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialCourtesy = [];
        }
        if (source['specialArrangement']) {
            this.specialArrangement = source.specialArrangement.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialArrangement = [];
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['dischargeDisposition']) {
            this.dischargeDisposition = new fhir.CodeableConcept(source.dischargeDisposition);
        }
        if (source['dischargeDiagnosis']) {
            this.dischargeDiagnosis = source.dischargeDiagnosis.map((x) => new fhir.Reference(x));
        }
        else {
            this.dischargeDiagnosis = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.hospitalization';
        }
        this.vOS('preAdmissionIdentifier', exp);
        this.vOS('origin', exp);
        this.vOS('admitSource', exp);
        this.vOA('admittingDiagnosis', exp);
        this.vOS('reAdmission', exp);
        this.vOA('dietPreference', exp);
        this.vOA('specialCourtesy', exp);
        this.vOA('specialArrangement', exp);
        this.vOS('destination', exp);
        this.vOS('dischargeDisposition', exp);
        this.vOA('dischargeDiagnosis', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterHospitalization._fts_dataType = 'EncounterHospitalization';
/**
 * List of locations where  the patient has been during this encounter.
 */
export class EncounterLocation extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        else {
            this.location = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.location';
        }
        this.vRS('location', exp);
        this.vOSV('status', exp, 'EncounterLocationStatus', EncounterLocationStatusVsValidation, 'r');
        this.vOS('period', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterLocation._fts_dataType = 'EncounterLocation';
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export class Encounter extends fhir.DomainResource {
    /**
     * Default constructor for Encounter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Encounter';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EncounterStatusHistory(x));
        }
        else {
            this.statusHistory = [];
        }
        if (source['class']) {
            this.class = new fhir.FhirCode({ value: source.class });
        }
        if (source['_class']) {
            if (this.class) {
                this.class.addExtendedProperties(source._class);
            }
            else {
                this.class = new fhir.FhirCode(source._class);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['episodeOfCare']) {
            this.episodeOfCare = source.episodeOfCare.map((x) => new fhir.Reference(x));
        }
        else {
            this.episodeOfCare = [];
        }
        if (source['incomingReferral']) {
            this.incomingReferral = source.incomingReferral.map((x) => new fhir.Reference(x));
        }
        else {
            this.incomingReferral = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.EncounterParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['appointment']) {
            this.appointment = new fhir.Reference(source.appointment);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['length']) {
            this.length = new fhir.Quantity(source.length);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['indication']) {
            this.indication = source.indication.map((x) => new fhir.Reference(x));
        }
        else {
            this.indication = [];
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.EncounterHospitalization(source.hospitalization);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.EncounterLocation(x));
        }
        else {
            this.location = [];
        }
        if (source['serviceProvider']) {
            this.serviceProvider = new fhir.Reference(source.serviceProvider);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'EncounterState', EncounterStateVsValidation, 'r');
        this.vOA('statusHistory', exp);
        this.vOSV('class', exp, 'EncounterClass', EncounterClassVsValidation, 'r');
        this.vOA('type', exp);
        this.vOS('priority', exp);
        this.vOS('patient', exp);
        this.vOA('episodeOfCare', exp);
        this.vOA('incomingReferral', exp);
        this.vOA('participant', exp);
        this.vOS('appointment', exp);
        this.vOS('period', exp);
        this.vOS('length', exp);
        this.vOA('reason', exp);
        this.vOA('indication', exp);
        this.vOS('hospitalization', exp);
        this.vOA('location', exp);
        this.vOS('serviceProvider', exp);
        this.vOS('partOf', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Encounter._fts_dataType = 'Encounter';
//# sourceMappingURL=data:application/json;base64,