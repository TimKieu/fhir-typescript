// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { BindingStrengthVsValidation } from '../fhirValueSets/BindingStrengthVsValidation.js';
// @ts-ignore
import { OperationParameterUseVsValidation } from '../fhirValueSets/OperationParameterUseVsValidation.js';
// @ts-ignore
import { OperationParameterTypeVsValidation } from '../fhirValueSets/OperationParameterTypeVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
// @ts-ignore
import { OperationKindVsValidation } from '../fhirValueSets/OperationKindVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class OperationDefinitionContact extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.contact';
        }
        this.vOS('name', exp);
        this.vOA('telecom', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionContact._fts_dataType = 'OperationDefinitionContact';
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export class OperationDefinitionParameterBinding extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['strength']) {
            this.strength = new fhir.FhirCode({ value: source.strength });
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            if (this.strength) {
                this.strength.addExtendedProperties(source._strength);
            }
            else {
                this.strength = new fhir.FhirCode(source._strength);
            }
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        else if (source['valueSetUri']) {
            this.valueSet = new fhir.FhirUri({ value: source.valueSetUri });
        }
        else if (source['valueSetReference']) {
            this.valueSet = new fhir.Reference(source.valueSetReference);
        }
        else {
            this.valueSet = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.parameter.binding';
        }
        this.vRSV('strength', exp, 'BindingStrength', BindingStrengthVsValidation, 'r');
        this.vRS('valueSet', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameterBinding._fts_dataType = 'OperationDefinitionParameterBinding';
/**
 * Internal flag to properly serialize choice-type element OperationDefinition.parameter.binding.valueSet[x]
 */
OperationDefinitionParameterBinding._fts_valueSetIsChoice = true;
/**
 * The parameters for the operation/query.
 */
export class OperationDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirCode({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirCode(source._name);
            }
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['min']) {
            this.min = new fhir.FhirInteger({ value: source.min });
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirInteger(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile);
        }
        if (source['binding']) {
            this.binding = new fhir.OperationDefinitionParameterBinding(source.binding);
        }
        if (source['part']) {
            this.part = source.part.map((x) => new fhir.OperationDefinitionParameter(x));
        }
        else {
            this.part = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition.parameter';
        }
        this.vRS('name', exp);
        this.vRSV('use', exp, 'OperationParameterUse', OperationParameterUseVsValidation, 'r');
        this.vRS('min', exp);
        this.vRS('max', exp);
        this.vOS('documentation', exp);
        this.vOSV('type', exp, 'OperationParameterType', OperationParameterTypeVsValidation, 'r');
        this.vOS('profile', exp);
        this.vOS('binding', exp);
        this.vOA('part', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameter._fts_dataType = 'OperationDefinitionParameter';
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export class OperationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for OperationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.OperationDefinitionContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['idempotent']) {
            this.idempotent = new fhir.FhirBoolean({ value: source.idempotent });
        }
        if (source['_idempotent']) {
            if (this.idempotent) {
                this.idempotent.addExtendedProperties(source._idempotent);
            }
            else {
                this.idempotent = new fhir.FhirBoolean(source._idempotent);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['notes']) {
            this.notes = new fhir.FhirString({ value: source.notes });
        }
        if (source['_notes']) {
            if (this.notes) {
                this.notes.addExtendedProperties(source._notes);
            }
            else {
                this.notes = new fhir.FhirString(source._notes);
            }
        }
        if (source['base']) {
            this.base = new fhir.Reference(source.base);
        }
        if (source['system']) {
            this.system = new fhir.FhirBoolean({ value: source.system });
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirBoolean(source._system);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.type = [];
        }
        if (source['_type']) {
            source._type.forEach((x, i) => {
                if (this.type.length >= i) {
                    if (x) {
                        this.type[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.type.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['instance']) {
            this.instance = new fhir.FhirBoolean({ value: source.instance });
        }
        else {
            this.instance = null;
        }
        if (source['_instance']) {
            if (this.instance) {
                this.instance.addExtendedProperties(source._instance);
            }
            else {
                this.instance = new fhir.FhirBoolean(source._instance);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.OperationDefinitionParameter(x));
        }
        else {
            this.parameter = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OperationDefinition';
        }
        this.vRS('resourceType', exp);
        this.vOS('url', exp);
        this.vOS('version', exp);
        this.vRS('name', exp);
        this.vRSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r');
        this.vRSV('kind', exp, 'OperationKind', OperationKindVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('date', exp);
        this.vOS('description', exp);
        this.vOS('requirements', exp);
        this.vOS('idempotent', exp);
        this.vRS('code', exp);
        this.vOS('notes', exp);
        this.vOS('base', exp);
        this.vRS('system', exp);
        this.vOAV('type', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r');
        this.vRS('instance', exp);
        this.vOA('parameter', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinition._fts_dataType = 'OperationDefinition';
//# sourceMappingURL=data:application/json;base64,