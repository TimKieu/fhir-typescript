// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiagnosticReportStatusVsValidation } from '../fhirValueSets/DiagnosticReportStatusVsValidation.js';
/**
 * Many diagnostic services include images in the report as part of their service.
 */
export class DiagnosticReportImage extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportImage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['link']) {
            this.link = new fhir.Reference(source.link);
        }
        else {
            this.link = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticReport.image';
        }
        this.vOS('comment', exp);
        this.vRS('link', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReportImage._fts_dataType = 'DiagnosticReportImage';
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export class DiagnosticReport extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DiagnosticReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        else {
            this.effective = null;
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        else {
            this.issued = null;
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirInstant(source._issued);
            }
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        else {
            this.performer = null;
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        else {
            this.request = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['result']) {
            this.result = source.result.map((x) => new fhir.Reference(x));
        }
        else {
            this.result = [];
        }
        if (source['imagingStudy']) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhir.Reference(x));
        }
        else {
            this.imagingStudy = [];
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.DiagnosticReportImage(x));
        }
        else {
            this.image = [];
        }
        if (source['conclusion']) {
            this.conclusion = new fhir.FhirString({ value: source.conclusion });
        }
        if (source['_conclusion']) {
            if (this.conclusion) {
                this.conclusion.addExtendedProperties(source._conclusion);
            }
            else {
                this.conclusion = new fhir.FhirString(source._conclusion);
            }
        }
        if (source['codedDiagnosis']) {
            this.codedDiagnosis = source.codedDiagnosis.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.codedDiagnosis = [];
        }
        if (source['presentedForm']) {
            this.presentedForm = source.presentedForm.map((x) => new fhir.Attachment(x));
        }
        else {
            this.presentedForm = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticReport';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'DiagnosticReportStatus', DiagnosticReportStatusVsValidation, 'r');
        this.vOS('category', exp);
        this.vRS('code', exp);
        this.vRS('subject', exp);
        this.vOS('encounter', exp);
        this.vRS('effective', exp);
        this.vRS('issued', exp);
        this.vRS('performer', exp);
        this.vOA('request', exp);
        this.vOA('specimen', exp);
        this.vOA('result', exp);
        this.vOA('imagingStudy', exp);
        this.vOA('image', exp);
        this.vOS('conclusion', exp);
        this.vOA('codedDiagnosis', exp);
        this.vOA('presentedForm', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReport._fts_dataType = 'DiagnosticReport';
/**
 * Internal flag to properly serialize choice-type element DiagnosticReport.effective[x]
 */
DiagnosticReport._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,