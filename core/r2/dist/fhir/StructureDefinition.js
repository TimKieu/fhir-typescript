// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
// @ts-ignore
import { StructureDefinitionKindVsValidation } from '../fhirValueSets/StructureDefinitionKindVsValidation.js';
// @ts-ignore
import { DefinedTypesVsValidation } from '../fhirValueSets/DefinedTypesVsValidation.js';
// @ts-ignore
import { ExtensionContextVsValidation } from '../fhirValueSets/ExtensionContextVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class StructureDefinitionContact extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.contact';
        }
        this.vOS('name', exp);
        this.vOA('telecom', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionContact._fts_dataType = 'StructureDefinitionContact';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['comments']) {
            this.comments = new fhir.FhirString({ value: source.comments });
        }
        if (source['_comments']) {
            if (this.comments) {
                this.comments.addExtendedProperties(source._comments);
            }
            else {
                this.comments = new fhir.FhirString(source._comments);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.mapping';
        }
        this.vRS('identity', exp);
        this.vOS('uri', exp);
        this.vOS('name', exp);
        this.vOS('comments', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionMapping._fts_dataType = 'StructureDefinitionMapping';
/**
 * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.snapshot';
        }
        this.vRA('element', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionSnapshot._fts_dataType = 'StructureDefinitionSnapshot';
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition.differential';
        }
        this.vRA('element', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionDifferential._fts_dataType = 'StructureDefinitionDifferential';
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'StructureDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.StructureDefinitionContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.useContext = [];
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirString({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirId({ value: source.fhirVersion });
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirId(source._fhirVersion);
            }
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['constrainedType']) {
            this.constrainedType = new fhir.FhirCode({ value: source.constrainedType });
        }
        if (source['_constrainedType']) {
            if (this.constrainedType) {
                this.constrainedType.addExtendedProperties(source._constrainedType);
            }
            else {
                this.constrainedType = new fhir.FhirCode(source._constrainedType);
            }
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        else {
            this.abstract = null;
        }
        if (source['_abstract']) {
            if (this.abstract) {
                this.abstract.addExtendedProperties(source._abstract);
            }
            else {
                this.abstract = new fhir.FhirBoolean(source._abstract);
            }
        }
        if (source['contextType']) {
            this.contextType = new fhir.FhirCode({ value: source.contextType });
        }
        if (source['_contextType']) {
            if (this.contextType) {
                this.contextType.addExtendedProperties(source._contextType);
            }
            else {
                this.contextType = new fhir.FhirCode(source._contextType);
            }
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.context = [];
        }
        if (source['_context']) {
            source._context.forEach((x, i) => {
                if (this.context.length >= i) {
                    if (x) {
                        this.context[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.context.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['base']) {
            this.base = new fhir.FhirUri({ value: source.base });
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirUri(source._base);
            }
        }
        if (source['snapshot']) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'StructureDefinition';
        }
        this.vRS('resourceType', exp);
        this.vRS('url', exp);
        this.vOA('identifier', exp);
        this.vOS('version', exp);
        this.vRS('name', exp);
        this.vOS('display', exp);
        this.vRSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('date', exp);
        this.vOS('description', exp);
        this.vOA('useContext', exp);
        this.vOS('requirements', exp);
        this.vOS('copyright', exp);
        this.vOA('code', exp);
        this.vOS('fhirVersion', exp);
        this.vOA('mapping', exp);
        this.vRSV('kind', exp, 'StructureDefinitionKind', StructureDefinitionKindVsValidation, 'r');
        this.vOSV('constrainedType', exp, 'DefinedTypes', DefinedTypesVsValidation, 'r');
        this.vRS('abstract', exp);
        this.vOSV('contextType', exp, 'ExtensionContext', ExtensionContextVsValidation, 'r');
        this.vOA('context', exp);
        this.vOS('base', exp);
        this.vOS('snapshot', exp);
        this.vOS('differential', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinition._fts_dataType = 'StructureDefinition';
//# sourceMappingURL=data:application/json;base64,