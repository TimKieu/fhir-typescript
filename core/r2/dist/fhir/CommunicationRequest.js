// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: CommunicationRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { CommunicationRequestStatusVsValidation } from '../fhirValueSets/CommunicationRequestStatusVsValidation.js';
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export class CommunicationRequestPayload extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationRequestPayload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentString']) {
            this.content = new fhir.FhirString({ value: source.contentString });
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest.payload';
        }
        iss.push(...this.vRS('content', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequestPayload._fts_dataType = 'CommunicationRequestPayload';
/**
 * Internal flag to properly serialize choice-type element CommunicationRequest.payload.content[x]
 */
CommunicationRequestPayload._fts_contentIsChoice = true;
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export class CommunicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for CommunicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CommunicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
        if (source['payload']) {
            this.payload = source.payload.map((x) => new fhir.CommunicationRequestPayload(x));
        }
        else {
            this.payload = [];
        }
        if (source['medium']) {
            this.medium = source.medium.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.medium = [];
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['scheduled']) {
            this.scheduled = source.scheduled;
        }
        else if (source['scheduledDateTime']) {
            this.scheduled = new fhir.FhirDateTime({ value: source.scheduledDateTime });
        }
        else if (source['scheduledPeriod']) {
            this.scheduled = new fhir.Period(source.scheduledPeriod);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['requestedOn']) {
            this.requestedOn = new fhir.FhirDateTime({ value: source.requestedOn });
        }
        if (source['_requestedOn']) {
            if (this.requestedOn) {
                this.requestedOn.addExtendedProperties(source._requestedOn);
            }
            else {
                this.requestedOn = new fhir.FhirDateTime(source._requestedOn);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('sender', exp));
        iss.push(...this.vOA('recipient', exp));
        iss.push(...this.vOA('payload', exp));
        iss.push(...this.vOA('medium', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOSV('status', exp, 'CommunicationRequestStatus', CommunicationRequestStatusVsValidation, 'r'));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('scheduled', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOS('requestedOn', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('priority', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequest._fts_dataType = 'CommunicationRequest';
/**
 * Internal flag to properly serialize choice-type element CommunicationRequest.scheduled[x]
 */
CommunicationRequest._fts_scheduledIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbXVuaWNhdGlvblJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL0NvbW11bmljYXRpb25SZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHNDQUFzQztBQUV0QyxPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQUluQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sNERBQTRELENBQUM7QUEyQnBIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUE0QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBYW5FOztPQUVHO0lBQ0gsWUFBWSxTQUFrRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN4RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQUU7YUFDcEQsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ25HLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUFFO2FBQ2xHLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUFFO2FBQy9GO1lBQUUsSUFBSSxD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QUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBQyxHQUFHLEVBQUMsNEJBQTRCLEVBQUMsc0NBQXNDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3RyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0FBN0hEOztHQUVHO0FBQzZCLGtDQUFhLEdBQVUsc0JBQXNCLENBQUM7QUE2QzlFOztHQUVHO0FBQ3VCLDJDQUFzQixHQUFRLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogQ29tbXVuaWNhdGlvblJlcXVlc3RcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzQ29kZXMsICBDb21tdW5pY2F0aW9uUmVxdWVzdFN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db21tdW5pY2F0aW9uUmVxdWVzdFN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb21tdW5pY2F0aW9uUmVxdWVzdFN0YXR1c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29tbXVuaWNhdGlvblJlcXVlc3RTdGF0dXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERpYWdub3N0aWNPcmRlclByaW9yaXR5Q29kZXMsICBEaWFnbm9zdGljT3JkZXJQcmlvcml0eUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EaWFnbm9zdGljT3JkZXJQcmlvcml0eUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEaWFnbm9zdGljT3JkZXJQcmlvcml0eVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRGlhZ25vc3RpY09yZGVyUHJpb3JpdHlWc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ29tbXVuaWNhdGlvblJlcXVlc3RQYXlsb2FkIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbW11bmljYXRpb25SZXF1ZXN0UGF5bG9hZEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb21tdW5pY2F0ZWQgY29udGVudCAob3IgZm9yIG11bHRpLXBhcnQgY29tbXVuaWNhdGlvbnMsIG9uZSBwb3J0aW9uIG9mIHRoZSBjb21tdW5pY2F0aW9uKS5cclxuICAgKi9cclxuICBjb250ZW50PzogZmhpci5GaGlyU3RyaW5nfGZoaXIuQXR0YWNobWVudHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbW11bmljYXRlZCBjb250ZW50IChvciBmb3IgbXVsdGktcGFydCBjb21tdW5pY2F0aW9ucywgb25lIHBvcnRpb24gb2YgdGhlIGNvbW11bmljYXRpb24pLlxyXG4gICAqL1xyXG4gIGNvbnRlbnRTdHJpbmc/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29tbXVuaWNhdGVkIGNvbnRlbnQgKG9yIGZvciBtdWx0aS1wYXJ0IGNvbW11bmljYXRpb25zLCBvbmUgcG9ydGlvbiBvZiB0aGUgY29tbXVuaWNhdGlvbikuXHJcbiAgICovXHJcbiAgY29udGVudEF0dGFjaG1lbnQ/OiBmaGlyLkF0dGFjaG1lbnRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29tbXVuaWNhdGVkIGNvbnRlbnQgKG9yIGZvciBtdWx0aS1wYXJ0IGNvbW11bmljYXRpb25zLCBvbmUgcG9ydGlvbiBvZiB0aGUgY29tbXVuaWNhdGlvbikuXHJcbiAgICovXHJcbiAgY29udGVudFJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXh0LCBhdHRhY2htZW50KHMpLCBvciByZXNvdXJjZShzKSB0byBiZSBjb21tdW5pY2F0ZWQgdG8gdGhlIHJlY2lwaWVudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb21tdW5pY2F0aW9uUmVxdWVzdFBheWxvYWQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDb21tdW5pY2F0aW9uUmVxdWVzdFBheWxvYWQnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb21tdW5pY2F0ZWQgY29udGVudCAob3IgZm9yIG11bHRpLXBhcnQgY29tbXVuaWNhdGlvbnMsIG9uZSBwb3J0aW9uIG9mIHRoZSBjb21tdW5pY2F0aW9uKS5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGVudDogKGZoaXIuRmhpclN0cmluZ3xmaGlyLkF0dGFjaG1lbnR8Zmhpci5SZWZlcmVuY2UpfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBDb21tdW5pY2F0aW9uUmVxdWVzdC5wYXlsb2FkLmNvbnRlbnRbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfY29udGVudElzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENvbW11bmljYXRpb25SZXF1ZXN0UGF5bG9hZCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENvbW11bmljYXRpb25SZXF1ZXN0UGF5bG9hZEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydjb250ZW50J10pIHsgdGhpcy5jb250ZW50ID0gc291cmNlLmNvbnRlbnQ7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnY29udGVudFN0cmluZyddKSB7IHRoaXMuY29udGVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuY29udGVudFN0cmluZ30pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ2NvbnRlbnRBdHRhY2htZW50J10pIHsgdGhpcy5jb250ZW50ID0gbmV3IGZoaXIuQXR0YWNobWVudChzb3VyY2UuY29udGVudEF0dGFjaG1lbnQpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ2NvbnRlbnRSZWZlcmVuY2UnXSkgeyB0aGlzLmNvbnRlbnQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmNvbnRlbnRSZWZlcmVuY2UpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250ZW50ID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0NvbW11bmljYXRpb25SZXF1ZXN0LnBheWxvYWQnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdjb250ZW50JyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDb21tdW5pY2F0aW9uUmVxdWVzdCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb21tdW5pY2F0aW9uUmVxdWVzdEFyZ3MgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIkNvbW11bmljYXRpb25SZXF1ZXN0XCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgdW5pcXVlIElEIG9mIHRoaXMgcmVxdWVzdCBmb3IgcmVmZXJlbmNlIHB1cnBvc2VzLiBJdCBtdXN0IGJlIHByb3ZpZGVkIGlmIHVzZXIgd2FudHMgaXQgcmV0dXJuZWQgYXMgcGFydCBvZiBhbnkgb3V0cHV0LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdXRvZ2VuZXJhdGVkLCBpZiBuZWVkZWQsIGJ5IENEUyBzeXN0ZW0uIERvZXMgbm90IG5lZWQgdG8gYmUgdGhlIGFjdHVhbCBJRCBvZiB0aGUgc291cmNlIHN5c3RlbS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBtZXNzYWdlIHRvIGJlIHNlbnQgc3VjaCBhcyBhbGVydCwgbm90aWZpY2F0aW9uLCByZW1pbmRlciwgaW5zdHJ1Y3Rpb24sIGV0Yy5cclxuICAgKi9cclxuICBjYXRlZ29yeT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVudGl0eSAoZS5nLiBwZXJzb24sIG9yZ2FuaXphdGlvbiwgY2xpbmljYWwgaW5mb3JtYXRpb24gc3lzdGVtLCBvciBkZXZpY2UpIHdoaWNoIGlzIHRvIGJlIHRoZSBzb3VyY2Ugb2YgdGhlIGNvbW11bmljYXRpb24uXHJcbiAgICovXHJcbiAgc2VuZGVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZW50aXR5IChlLmcuIHBlcnNvbiwgb3JnYW5pemF0aW9uLCBjbGluaWNhbCBpbmZvcm1hdGlvbiBzeXN0ZW0sIG9yIGRldmljZSkgd2hpY2ggaXMgdGhlIGludGVuZGVkIHRhcmdldCBvZiB0aGUgY29tbXVuaWNhdGlvbi5cclxuICAgKi9cclxuICByZWNpcGllbnQ/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGV4dCwgYXR0YWNobWVudChzKSwgb3IgcmVzb3VyY2UocykgdG8gYmUgY29tbXVuaWNhdGVkIHRvIHRoZSByZWNpcGllbnQuXHJcbiAgICovXHJcbiAgcGF5bG9hZD86IGZoaXIuQ29tbXVuaWNhdGlvblJlcXVlc3RQYXlsb2FkQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGNoYW5uZWwgdGhhdCB3YXMgdXNlZCBmb3IgdGhpcyBjb21tdW5pY2F0aW9uIChlLmcuIGVtYWlsLCBmYXgpLlxyXG4gICAqL1xyXG4gIG1lZGl1bT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcmVzcG9uc2libGUgcGVyc29uIHdobyBhdXRob3JpemVzIHRoaXMgb3JkZXIsIGUuZy4gcGh5c2ljaWFuLiBUaGlzIG1heSBiZSBkaWZmZXJlbnQgdGhhbiB0aGUgYXV0aG9yIG9mIHRoZSBvcmRlciBzdGF0ZW1lbnQsIGUuZy4gY2xlcmssIHdobyBtYXkgaGF2ZSBlbnRlcmVkIHRoZSBzdGF0ZW1lbnQgaW50byB0aGUgb3JkZXIgZW50cnkgYXBwbGljYXRpb24uXHJcbiAgICovXHJcbiAgcmVxdWVzdGVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBwcm9wb3NhbCBvciBvcmRlci5cclxuICAgKi9cclxuICBzdGF0dXM/OiBmaGlyLkZoaXJDb2RlPENvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbW11bmljYXRpb25SZXF1ZXN0LnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbmNvdW50ZXIgd2l0aGluIHdoaWNoIHRoZSBjb21tdW5pY2F0aW9uIHJlcXVlc3Qgd2FzIGNyZWF0ZWQuXHJcbiAgICovXHJcbiAgZW5jb3VudGVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGltZSB3aGVuIHRoaXMgY29tbXVuaWNhdGlvbiBpcyB0byBvY2N1ci5cclxuICAgKi9cclxuICBzY2hlZHVsZWQ/OiBmaGlyLkZoaXJEYXRlVGltZXxmaGlyLlBlcmlvZHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgd2hlbiB0aGlzIGNvbW11bmljYXRpb24gaXMgdG8gb2NjdXIuXHJcbiAgICovXHJcbiAgc2NoZWR1bGVkRGF0ZVRpbWU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHdoZW4gdGhpcyBjb21tdW5pY2F0aW9uIGlzIHRvIG9jY3VyLlxyXG4gICAqL1xyXG4gIHNjaGVkdWxlZFBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlYXNvbiBvciBqdXN0aWZpY2F0aW9uIGZvciB0aGUgY29tbXVuaWNhdGlvbiByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIHJlYXNvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGltZSB3aGVuIHRoZSByZXF1ZXN0IHdhcyBtYWRlLlxyXG4gICAqL1xyXG4gIHJlcXVlc3RlZE9uPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29tbXVuaWNhdGlvblJlcXVlc3QucmVxdWVzdGVkT25cclxuICAgKi9cclxuICBfcmVxdWVzdGVkT24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwYXRpZW50IHdobyBpcyB0aGUgZm9jdXMgb2YgdGhpcyBjb21tdW5pY2F0aW9uIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgc3ViamVjdD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2hhcmFjdGVyaXplcyBob3cgcXVpY2tseSB0aGUgcHJvcG9zZWQgYWN0IG11c3QgYmUgaW5pdGlhdGVkLiBJbmNsdWRlcyBjb25jZXB0cyBzdWNoIGFzIHN0YXQsIHVyZ2VudCwgcm91dGluZS5cclxuICAgKi9cclxuICBwcmlvcml0eT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gY29udmV5IGluZm9ybWF0aW9uOyBlLmcuIHRoZSBDRFMgc3lzdGVtIHByb3Bvc2VzIHRoYXQgYW4gYWxlcnQgYmUgc2VudCB0byBhIHJlc3BvbnNpYmxlIHByb3ZpZGVyLCB0aGUgQ0RTIHN5c3RlbSBwcm9wb3NlcyB0aGF0IHRoZSBwdWJsaWMgaGVhbHRoIGFnZW5jeSBiZSBub3RpZmllZCBhYm91dCBhIHJlcG9ydGFibGUgY29uZGl0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbW11bmljYXRpb25SZXF1ZXN0IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDb21tdW5pY2F0aW9uUmVxdWVzdCc7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJDb21tdW5pY2F0aW9uUmVxdWVzdFwiO1xyXG4gIC8qKlxyXG4gICAqIEEgdW5pcXVlIElEIG9mIHRoaXMgcmVxdWVzdCBmb3IgcmVmZXJlbmNlIHB1cnBvc2VzLiBJdCBtdXN0IGJlIHByb3ZpZGVkIGlmIHVzZXIgd2FudHMgaXQgcmV0dXJuZWQgYXMgcGFydCBvZiBhbnkgb3V0cHV0LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdXRvZ2VuZXJhdGVkLCBpZiBuZWVkZWQsIGJ5IENEUyBzeXN0ZW0uIERvZXMgbm90IG5lZWQgdG8gYmUgdGhlIGFjdHVhbCBJRCBvZiB0aGUgc291cmNlIHN5c3RlbS5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgbWVzc2FnZSB0byBiZSBzZW50IHN1Y2ggYXMgYWxlcnQsIG5vdGlmaWNhdGlvbiwgcmVtaW5kZXIsIGluc3RydWN0aW9uLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIGNhdGVnb3J5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbnRpdHkgKGUuZy4gcGVyc29uLCBvcmdhbml6YXRpb24sIGNsaW5pY2FsIGluZm9ybWF0aW9uIHN5c3RlbSwgb3IgZGV2aWNlKSB3aGljaCBpcyB0byBiZSB0aGUgc291cmNlIG9mIHRoZSBjb21tdW5pY2F0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZW5kZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVudGl0eSAoZS5nLiBwZXJzb24sIG9yZ2FuaXphdGlvbiwgY2xpbmljYWwgaW5mb3JtYXRpb24gc3lzdGVtLCBvciBkZXZpY2UpIHdoaWNoIGlzIHRoZSBpbnRlbmRlZCB0YXJnZXQgb2YgdGhlIGNvbW11bmljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlY2lwaWVudDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBUZXh0LCBhdHRhY2htZW50KHMpLCBvciByZXNvdXJjZShzKSB0byBiZSBjb21tdW5pY2F0ZWQgdG8gdGhlIHJlY2lwaWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgcGF5bG9hZDogZmhpci5Db21tdW5pY2F0aW9uUmVxdWVzdFBheWxvYWRbXTtcclxuICAvKipcclxuICAgKiBBIGNoYW5uZWwgdGhhdCB3YXMgdXNlZCBmb3IgdGhpcyBjb21tdW5pY2F0aW9uIChlLmcuIGVtYWlsLCBmYXgpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZWRpdW06IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlc3BvbnNpYmxlIHBlcnNvbiB3aG8gYXV0aG9yaXplcyB0aGlzIG9yZGVyLCBlLmcuIHBoeXNpY2lhbi4gVGhpcyBtYXkgYmUgZGlmZmVyZW50IHRoYW4gdGhlIGF1dGhvciBvZiB0aGUgb3JkZXIgc3RhdGVtZW50LCBlLmcuIGNsZXJrLCB3aG8gbWF5IGhhdmUgZW50ZXJlZCB0aGUgc3RhdGVtZW50IGludG8gdGhlIG9yZGVyIGVudHJ5IGFwcGxpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXF1ZXN0ZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgcHJvcG9zYWwgb3Igb3JkZXIuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1cz86IGZoaXIuRmhpckNvZGU8Q29tbXVuaWNhdGlvblJlcXVlc3RTdGF0dXNDb2RlVHlwZT58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbmNvdW50ZXIgd2l0aGluIHdoaWNoIHRoZSBjb21tdW5pY2F0aW9uIHJlcXVlc3Qgd2FzIGNyZWF0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGVuY291bnRlcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGltZSB3aGVuIHRoaXMgY29tbXVuaWNhdGlvbiBpcyB0byBvY2N1ci5cclxuICAgKi9cclxuICBwdWJsaWMgc2NoZWR1bGVkPzogKGZoaXIuRmhpckRhdGVUaW1lfGZoaXIuUGVyaW9kKXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBDb21tdW5pY2F0aW9uUmVxdWVzdC5zY2hlZHVsZWRbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfc2NoZWR1bGVkSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlYXNvbiBvciBqdXN0aWZpY2F0aW9uIGZvciB0aGUgY29tbXVuaWNhdGlvbiByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWFzb246IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgd2hlbiB0aGUgcmVxdWVzdCB3YXMgbWFkZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdGVkT24/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhdGllbnQgd2hvIGlzIHRoZSBmb2N1cyBvZiB0aGlzIGNvbW11bmljYXRpb24gcmVxdWVzdC5cclxuICAgKi9cclxuICBwdWJsaWMgc3ViamVjdD86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDaGFyYWN0ZXJpemVzIGhvdyBxdWlja2x5IHRoZSBwcm9wb3NlZCBhY3QgbXVzdCBiZSBpbml0aWF0ZWQuIEluY2x1ZGVzIGNvbmNlcHRzIHN1Y2ggYXMgc3RhdCwgdXJnZW50LCByb3V0aW5lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmlvcml0eT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDb21tdW5pY2F0aW9uUmVxdWVzdCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENvbW11bmljYXRpb25SZXF1ZXN0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ0NvbW11bmljYXRpb25SZXF1ZXN0JztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NhdGVnb3J5J10pIHsgdGhpcy5jYXRlZ29yeSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY2F0ZWdvcnkpOyB9XHJcbiAgICBpZiAoc291cmNlWydzZW5kZXInXSkgeyB0aGlzLnNlbmRlciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uuc2VuZGVyKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVjaXBpZW50J10pIHsgdGhpcy5yZWNpcGllbnQgPSBzb3VyY2UucmVjaXBpZW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVjaXBpZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3BheWxvYWQnXSkgeyB0aGlzLnBheWxvYWQgPSBzb3VyY2UucGF5bG9hZC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbW11bmljYXRpb25SZXF1ZXN0UGF5bG9hZCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnBheWxvYWQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWVkaXVtJ10pIHsgdGhpcy5tZWRpdW0gPSBzb3VyY2UubWVkaXVtLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWVkaXVtID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcXVlc3RlciddKSB7IHRoaXMucmVxdWVzdGVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZXF1ZXN0ZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPENvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnN0YXR1c30pOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3RhdHVzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc3RhdHVzKSB7IHRoaXMuc3RhdHVzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3N0YXR1cyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPENvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzQ29kZVR5cGU+KHNvdXJjZS5fc3RhdHVzIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydlbmNvdW50ZXInXSkgeyB0aGlzLmVuY291bnRlciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuZW5jb3VudGVyKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2NoZWR1bGVkJ10pIHsgdGhpcy5zY2hlZHVsZWQgPSBzb3VyY2Uuc2NoZWR1bGVkOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3NjaGVkdWxlZERhdGVUaW1lJ10pIHsgdGhpcy5zY2hlZHVsZWQgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2Uuc2NoZWR1bGVkRGF0ZVRpbWV9KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydzY2hlZHVsZWRQZXJpb2QnXSkgeyB0aGlzLnNjaGVkdWxlZCA9IG5ldyBmaGlyLlBlcmlvZChzb3VyY2Uuc2NoZWR1bGVkUGVyaW9kKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVhc29uJ10pIHsgdGhpcy5yZWFzb24gPSBzb3VyY2UucmVhc29uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVhc29uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcXVlc3RlZE9uJ10pIHsgdGhpcy5yZXF1ZXN0ZWRPbiA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5yZXF1ZXN0ZWRPbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVxdWVzdGVkT24nXSkge1xyXG4gICAgICBpZiAodGhpcy5yZXF1ZXN0ZWRPbikgeyB0aGlzLnJlcXVlc3RlZE9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JlcXVlc3RlZE9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucmVxdWVzdGVkT24gPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl9yZXF1ZXN0ZWRPbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzdWJqZWN0J10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJqZWN0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJpb3JpdHknXSkgeyB0aGlzLnByaW9yaXR5ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5wcmlvcml0eSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdDb21tdW5pY2F0aW9uUmVxdWVzdCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2lkZW50aWZpZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NhdGVnb3J5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzZW5kZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3JlY2lwaWVudCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncGF5bG9hZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbWVkaXVtJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZXF1ZXN0ZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1NWKCdzdGF0dXMnLGV4cCwnQ29tbXVuaWNhdGlvblJlcXVlc3RTdGF0dXMnLENvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2VuY291bnRlcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc2NoZWR1bGVkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdyZWFzb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JlcXVlc3RlZE9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzdWJqZWN0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwcmlvcml0eScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=