// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Reference
import * as fhir from '../fhir.js';
/**
 * A reference from one resource to another.
 */
export class Reference extends fhir.FhirElement {
    /**
     * Default constructor for Reference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.FhirString({ value: source.reference });
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirString(source._reference);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Reference';
        }
        this.vOS('reference', exp);
        this.vOS('display', exp);
        return issues;
    }
    /**
     * Create a reference from an existing resource
     */
    static fromResource(source, baseUrl = '') {
        if (baseUrl.endsWith('/')) {
            return new Reference({
                reference: baseUrl + source.resourceType + '/' + source.id,
            });
        }
        return new Reference({
            reference: ((baseUrl.length > 0) ? (baseUrl + '/') : '') + source.resourceType + '/' + source.id,
        });
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Reference._fts_dataType = 'Reference';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9SZWZlcmVuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBd0JuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxTQUFVLFNBQVEsSUFBSSxDQUFDLFdBQVc7SUFhN0M7O09BRUc7SUFDSCxZQUFZLFNBQWdDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3RGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzdGLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxVQUFXLENBQUMsQ0FBQzthQUFFO2lCQUM1RTtnQkFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBMEMsQ0FBQyxDQUFDO2FBQUU7U0FDbEc7UUFDRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDdkYsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUFFLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQyxDQUFDO2FBQUU7aUJBQ3RFO2dCQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUF3QyxDQUFDLENBQUM7YUFBRTtTQUM5RjtJQUNILENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQixDQUFDLE1BQWEsRUFBRTtRQUMvQyxJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFELElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtZQUFFLEdBQUcsR0FBRyxXQUFXLENBQUE7U0FBRTtRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDRixNQUFNLENBQUMsWUFBWSxDQUFDLE1BQXdCLEVBQUUsVUFBZSxFQUFFO1FBQzlELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QixPQUFPLElBQUksU0FBUyxDQUFDO2dCQUNuQixTQUFTLEVBQUUsT0FBTyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFO2FBQzNELENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLFNBQVMsQ0FBQztZQUNuQixTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRTtTQUNqRyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQXBERDs7R0FFRztBQUM2Qix1QkFBYSxHQUFVLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBDb21wbGV4VHlwZTogUmVmZXJlbmNlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFJlZmVyZW5jZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZWZlcmVuY2VBcmdzIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgcmVmZXJlbmNlIHRvIGEgbG9jYXRpb24gYXQgd2hpY2ggdGhlIG90aGVyIHJlc291cmNlIGlzIGZvdW5kLiBUaGUgcmVmZXJlbmNlIG1heSBiZSBhIHJlbGF0aXZlIHJlZmVyZW5jZSwgaW4gd2hpY2ggY2FzZSBpdCBpcyByZWxhdGl2ZSB0byB0aGUgc2VydmljZSBiYXNlIFVSTCwgb3IgYW4gYWJzb2x1dGUgVVJMIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSByZXNvdXJjZSBpcyBmb3VuZC4gVGhlIHJlZmVyZW5jZSBtYXkgYmUgdmVyc2lvbiBzcGVjaWZpYyBvciBub3QuIElmIHRoZSByZWZlcmVuY2UgaXMgbm90IHRvIGEgRkhJUiBSRVNUZnVsIHNlcnZlciwgdGhlbiBpdCBzaG91bGQgYmUgYXNzdW1lZCB0byBiZSB2ZXJzaW9uIHNwZWNpZmljLiBJbnRlcm5hbCBmcmFnbWVudCByZWZlcmVuY2VzIChzdGFydCB3aXRoICcjJykgcmVmZXIgdG8gY29udGFpbmVkIHJlc291cmNlcy5cclxuICAgKi9cclxuICByZWZlcmVuY2U/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUmVmZXJlbmNlLnJlZmVyZW5jZVxyXG4gICAqL1xyXG4gIF9yZWZlcmVuY2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFBsYWluIHRleHQgbmFycmF0aXZlIHRoYXQgaWRlbnRpZmllcyB0aGUgcmVzb3VyY2UgaW4gYWRkaXRpb24gdG8gdGhlIHJlc291cmNlIHJlZmVyZW5jZS5cclxuICAgKi9cclxuICBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlZmVyZW5jZS5kaXNwbGF5XHJcbiAgICovXHJcbiAgX2Rpc3BsYXk/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSByZWZlcmVuY2UgZnJvbSBvbmUgcmVzb3VyY2UgdG8gYW5vdGhlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWZlcmVuY2UgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1JlZmVyZW5jZSc7XHJcbiAgLyoqXHJcbiAgICogQSByZWZlcmVuY2UgdG8gYSBsb2NhdGlvbiBhdCB3aGljaCB0aGUgb3RoZXIgcmVzb3VyY2UgaXMgZm91bmQuIFRoZSByZWZlcmVuY2UgbWF5IGJlIGEgcmVsYXRpdmUgcmVmZXJlbmNlLCBpbiB3aGljaCBjYXNlIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBzZXJ2aWNlIGJhc2UgVVJMLCBvciBhbiBhYnNvbHV0ZSBVUkwgdGhhdCByZXNvbHZlcyB0byB0aGUgbG9jYXRpb24gd2hlcmUgdGhlIHJlc291cmNlIGlzIGZvdW5kLiBUaGUgcmVmZXJlbmNlIG1heSBiZSB2ZXJzaW9uIHNwZWNpZmljIG9yIG5vdC4gSWYgdGhlIHJlZmVyZW5jZSBpcyBub3QgdG8gYSBGSElSIFJFU1RmdWwgc2VydmVyLCB0aGVuIGl0IHNob3VsZCBiZSBhc3N1bWVkIHRvIGJlIHZlcnNpb24gc3BlY2lmaWMuIEludGVybmFsIGZyYWdtZW50IHJlZmVyZW5jZXMgKHN0YXJ0IHdpdGggJyMnKSByZWZlciB0byBjb250YWluZWQgcmVzb3VyY2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWZlcmVuY2U/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBsYWluIHRleHQgbmFycmF0aXZlIHRoYXQgaWRlbnRpZmllcyB0aGUgcmVzb3VyY2UgaW4gYWRkaXRpb24gdG8gdGhlIHJlc291cmNlIHJlZmVyZW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGlzcGxheT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgUmVmZXJlbmNlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UmVmZXJlbmNlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3JlZmVyZW5jZSddKSB7IHRoaXMucmVmZXJlbmNlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5yZWZlcmVuY2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3JlZmVyZW5jZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlZmVyZW5jZSkgeyB0aGlzLnJlZmVyZW5jZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZWZlcmVuY2UhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZWZlcmVuY2UgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fcmVmZXJlbmNlIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkaXNwbGF5J10pIHsgdGhpcy5kaXNwbGF5ID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kaXNwbGF5fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kaXNwbGF5J10pIHtcclxuICAgICAgaWYgKHRoaXMuZGlzcGxheSkgeyB0aGlzLmRpc3BsYXkuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGlzcGxheSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRpc3BsYXkgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fZGlzcGxheSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1JlZmVyZW5jZScgfVxyXG4gICAgdGhpcy52T1MoJ3JlZmVyZW5jZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2Rpc3BsYXknLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSByZWZlcmVuY2UgZnJvbSBhbiBleGlzdGluZyByZXNvdXJjZVxyXG4gICAqL1xyXG4gICBzdGF0aWMgZnJvbVJlc291cmNlKHNvdXJjZTpmaGlyLkZoaXJSZXNvdXJjZSwgYmFzZVVybDpzdHJpbmc9JycpOlJlZmVyZW5jZSB7XHJcbiAgICBpZiAoYmFzZVVybC5lbmRzV2l0aCgnLycpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgUmVmZXJlbmNlKHtcclxuICAgICAgICByZWZlcmVuY2U6IGJhc2VVcmwgKyBzb3VyY2UucmVzb3VyY2VUeXBlICsgJy8nICsgc291cmNlLmlkLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFJlZmVyZW5jZSh7XHJcbiAgICAgIHJlZmVyZW5jZTogKChiYXNlVXJsLmxlbmd0aCA+IDApID8gKGJhc2VVcmwgKyAnLycpIDogJycpICsgc291cmNlLnJlc291cmNlVHlwZSArICcvJyArIHNvdXJjZS5pZCxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=