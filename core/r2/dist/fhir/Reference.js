// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Reference
import * as fhir from '../fhir.js';
/**
 * A reference from one resource to another.
 */
export class Reference extends fhir.FhirElement {
    /**
     * Default constructor for Reference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.FhirString({ value: source.reference });
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirString(source._reference);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Reference';
        }
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOS('display', exp));
        return iss;
    }
    /**
     * Create a reference from an existing resource
     */
    static fromResource(source, baseUrl = '') {
        if (baseUrl.endsWith('/')) {
            return new Reference({
                reference: baseUrl + source.resourceType + '/' + source.id,
            });
        }
        return new Reference({
            reference: ((baseUrl.length > 0) ? (baseUrl + '/') : '') + source.resourceType + '/' + source.id,
        });
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Reference._fts_dataType = 'Reference';
//# sourceMappingURL=data:application/json;base64,