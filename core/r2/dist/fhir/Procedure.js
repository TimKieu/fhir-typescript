// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Procedure
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProcedureStatusVsValidation } from '../fhirValueSets/ProcedureStatusVsValidation.js';
/**
 * Limited to 'real' people rather than equipment.
 */
export class ProcedurePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure.performer';
        }
        iss.push(...this.vOS('actor', exp));
        iss.push(...this.vOS('role', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedurePerformer._fts_dataType = 'ProcedurePerformer';
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export class ProcedureFocalDevice extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        if (source['manipulated']) {
            this.manipulated = new fhir.Reference(source.manipulated);
        }
        else {
            this.manipulated = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure.focalDevice';
        }
        iss.push(...this.vOS('action', exp));
        iss.push(...this.vRS('manipulated', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedureFocalDevice._fts_dataType = 'ProcedureFocalDevice';
/**
 * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
 */
export class Procedure extends fhir.DomainResource {
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Procedure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['notPerformed']) {
            this.notPerformed = new fhir.FhirBoolean({ value: source.notPerformed });
        }
        if (source['_notPerformed']) {
            if (this.notPerformed) {
                this.notPerformed.addExtendedProperties(source._notPerformed);
            }
            else {
                this.notPerformed = new fhir.FhirBoolean(source._notPerformed);
            }
        }
        if (source['reasonNotPerformed']) {
            this.reasonNotPerformed = source.reasonNotPerformed.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonNotPerformed = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodySite = [];
        }
        if (source['reason']) {
            this.reason = source.reason;
        }
        else if (source['reasonCodeableConcept']) {
            this.reason = new fhir.CodeableConcept(source.reasonCodeableConcept);
        }
        else if (source['reasonReference']) {
            this.reason = new fhir.Reference(source.reasonReference);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ProcedurePerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['performed']) {
            this.performed = source.performed;
        }
        else if (source['performedDateTime']) {
            this.performed = new fhir.FhirDateTime({ value: source.performedDateTime });
        }
        else if (source['performedPeriod']) {
            this.performed = new fhir.Period(source.performedPeriod);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['report']) {
            this.report = source.report.map((x) => new fhir.Reference(x));
        }
        else {
            this.report = [];
        }
        if (source['complication']) {
            this.complication = source.complication.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.complication = [];
        }
        if (source['followUp']) {
            this.followUp = source.followUp.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.followUp = [];
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['notes']) {
            this.notes = source.notes.map((x) => new fhir.Annotation(x));
        }
        else {
            this.notes = [];
        }
        if (source['focalDevice']) {
            this.focalDevice = source.focalDevice.map((x) => new fhir.ProcedureFocalDevice(x));
        }
        else {
            this.focalDevice = [];
        }
        if (source['used']) {
            this.used = source.used.map((x) => new fhir.Reference(x));
        }
        else {
            this.used = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vRSV('status', exp, 'ProcedureStatus', ProcedureStatusVsValidation, 'r'));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('notPerformed', exp));
        iss.push(...this.vOA('reasonNotPerformed', exp));
        iss.push(...this.vOA('bodySite', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('performed', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('outcome', exp));
        iss.push(...this.vOA('report', exp));
        iss.push(...this.vOA('complication', exp));
        iss.push(...this.vOA('followUp', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOA('notes', exp));
        iss.push(...this.vOA('focalDevice', exp));
        iss.push(...this.vOA('used', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Procedure._fts_dataType = 'Procedure';
/**
 * Internal flag to properly serialize choice-type element Procedure.reason[x]
 */
Procedure._fts_reasonIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Procedure.performed[x]
 */
Procedure._fts_performedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,