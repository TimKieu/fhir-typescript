// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingObjectSelection
import * as fhir from '../fhir.js';
/**
 * The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
 */
export class ImagingObjectSelectionStudySeriesInstanceFrames extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudySeriesInstanceFrames - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['frameNumbers'] !== undefined) {
            this.frameNumbers = source.frameNumbers.map((x) => new fhir.FhirUnsignedInt({ value: x }, options));
        }
        else {
            this.frameNumbers = [];
        }
        if (source['_frameNumbers']) {
            source._frameNumbers.forEach((x, i) => {
                if (this.frameNumbers.length >= i) {
                    if (x) {
                        this.frameNumbers[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.frameNumbers.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study.series.instance.frames';
        }
        iss.push(...this.vRA('frameNumbers', exp));
        iss.push(...this.vRS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudySeriesInstanceFrames._fts_dataType = 'ImagingObjectSelectionStudySeriesInstanceFrames';
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
 */
export class ImagingObjectSelectionStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sopClass'] !== undefined) {
            this.sopClass = new fhir.FhirOid({ value: source.sopClass }, options);
        }
        else {
            this.sopClass = null;
        }
        if (source['_sopClass']) {
            if (this.sopClass) {
                this.sopClass.addExtendedProperties(source._sopClass);
            }
            else {
                this.sopClass = new fhir.FhirOid(source._sopClass, options);
            }
        }
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['frames']) {
            this.frames = source.frames.map((x) => new fhir.ImagingObjectSelectionStudySeriesInstanceFrames(x, options));
        }
        else {
            this.frames = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study.series.instance';
        }
        iss.push(...this.vRS('sopClass', exp));
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOA('frames', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudySeriesInstance._fts_dataType = 'ImagingObjectSelectionStudySeriesInstance';
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
 */
export class ImagingObjectSelectionStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingObjectSelectionStudySeriesInstance(x, options));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study.series';
        }
        iss.push(...this.vOS('uid', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vRA('instance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudySeries._fts_dataType = 'ImagingObjectSelectionStudySeries';
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
 */
export class ImagingObjectSelectionStudy extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['imagingStudy']) {
            this.imagingStudy = new fhir.Reference(source.imagingStudy, options);
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingObjectSelectionStudySeries(x, options));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('imagingStudy', exp));
        iss.push(...this.vRA('series', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudy._fts_dataType = 'ImagingObjectSelectionStudy';
/**
 * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
 */
export class ImagingObjectSelection extends fhir.DomainResource {
    /**
     * Default constructor for ImagingObjectSelection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingObjectSelection';
        if (source['uid'] !== undefined) {
            this.uid = new fhir.FhirOid({ value: source.uid }, options);
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid, options);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['title']) {
            this.title = new fhir.CodeableConcept(source.title, options);
        }
        else {
            this.title = null;
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['authoringTime'] !== undefined) {
            this.authoringTime = new fhir.FhirDateTime({ value: source.authoringTime }, options);
        }
        if (source['_authoringTime']) {
            if (this.authoringTime) {
                this.authoringTime.addExtendedProperties(source._authoringTime);
            }
            else {
                this.authoringTime = new fhir.FhirDateTime(source._authoringTime, options);
            }
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.ImagingObjectSelectionStudy(x, options));
        }
        else {
            this.study = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection';
        }
        iss.push(...this.vRS('uid', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vRS('title', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOS('authoringTime', exp));
        iss.push(...this.vRA('study', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelection._fts_dataType = 'ImagingObjectSelection';
//# sourceMappingURL=data:application/json;base64,