// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingObjectSelection
import * as fhir from '../fhir.js';
/**
 * The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
 */
export class ImagingObjectSelectionStudySeriesInstanceFrames extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudySeriesInstanceFrames - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['frameNumbers']) {
            this.frameNumbers = source.frameNumbers.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.frameNumbers = [];
        }
        if (source['_frameNumbers']) {
            source._frameNumbers.forEach((x, i) => {
                if (this.frameNumbers.length >= i) {
                    if (x) {
                        this.frameNumbers[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.frameNumbers.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study.series.instance.frames';
        }
        this.vRA('frameNumbers', exp);
        this.vRS('url', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudySeriesInstanceFrames._fts_dataType = 'ImagingObjectSelectionStudySeriesInstanceFrames';
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
 */
export class ImagingObjectSelectionStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sopClass']) {
            this.sopClass = new fhir.FhirOid({ value: source.sopClass });
        }
        else {
            this.sopClass = null;
        }
        if (source['_sopClass']) {
            if (this.sopClass) {
                this.sopClass.addExtendedProperties(source._sopClass);
            }
            else {
                this.sopClass = new fhir.FhirOid(source._sopClass);
            }
        }
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['frames']) {
            this.frames = source.frames.map((x) => new fhir.ImagingObjectSelectionStudySeriesInstanceFrames(x));
        }
        else {
            this.frames = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study.series.instance';
        }
        this.vRS('sopClass', exp);
        this.vRS('uid', exp);
        this.vRS('url', exp);
        this.vOA('frames', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudySeriesInstance._fts_dataType = 'ImagingObjectSelectionStudySeriesInstance';
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
 */
export class ImagingObjectSelectionStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingObjectSelectionStudySeriesInstance(x));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study.series';
        }
        this.vOS('uid', exp);
        this.vOS('url', exp);
        this.vRA('instance', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudySeries._fts_dataType = 'ImagingObjectSelectionStudySeries';
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
 */
export class ImagingObjectSelectionStudy extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingObjectSelectionStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['imagingStudy']) {
            this.imagingStudy = new fhir.Reference(source.imagingStudy);
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingObjectSelectionStudySeries(x));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection.study';
        }
        this.vRS('uid', exp);
        this.vOS('url', exp);
        this.vOS('imagingStudy', exp);
        this.vRA('series', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelectionStudy._fts_dataType = 'ImagingObjectSelectionStudy';
/**
 * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
 */
export class ImagingObjectSelection extends fhir.DomainResource {
    /**
     * Default constructor for ImagingObjectSelection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingObjectSelection';
        if (source['uid']) {
            this.uid = new fhir.FhirOid({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['_uid']) {
            if (this.uid) {
                this.uid.addExtendedProperties(source._uid);
            }
            else {
                this.uid = new fhir.FhirOid(source._uid);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['title']) {
            this.title = new fhir.CodeableConcept(source.title);
        }
        else {
            this.title = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['authoringTime']) {
            this.authoringTime = new fhir.FhirDateTime({ value: source.authoringTime });
        }
        if (source['_authoringTime']) {
            if (this.authoringTime) {
                this.authoringTime.addExtendedProperties(source._authoringTime);
            }
            else {
                this.authoringTime = new fhir.FhirDateTime(source._authoringTime);
            }
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.ImagingObjectSelectionStudy(x));
        }
        else {
            this.study = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImagingObjectSelection';
        }
        this.vRS('resourceType', exp);
        this.vRS('uid', exp);
        this.vRS('patient', exp);
        this.vRS('title', exp);
        this.vOS('description', exp);
        this.vOS('author', exp);
        this.vOS('authoringTime', exp);
        this.vRA('study', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingObjectSelection._fts_dataType = 'ImagingObjectSelection';
//# sourceMappingURL=data:application/json;base64,