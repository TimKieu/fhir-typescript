// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Goal
import * as fhir from '../fhir.js';
// @ts-ignore
import { GoalStatusVsValidation } from '../fhirValueSets/GoalStatusVsValidation.js';
/**
 * Outcome tracking is a key aspect of care planning.
 */
export class GoalOutcome extends fhir.BackboneElement {
    /**
     * Default constructor for GoalOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['result']) {
            this.result = source.result;
        }
        else if (source['resultCodeableConcept']) {
            this.result = new fhir.CodeableConcept(source.resultCodeableConcept, options);
        }
        else if (source['resultReference']) {
            this.result = new fhir.Reference(source.resultReference, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Goal.outcome';
        }
        iss.push(...this.vOS('result', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GoalOutcome._fts_dataType = 'GoalOutcome';
/**
 * Internal flag to properly serialize choice-type element Goal.outcome.result[x]
 */
GoalOutcome._fts_resultIsChoice = true;
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
    /**
     * Default constructor for Goal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Goal';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['start']) {
            this.start = source.start;
        }
        else if (source['startDate'] !== undefined) {
            this.start = new fhir.FhirDate({ value: source.startDate }, options);
        }
        else if (source['startCodeableConcept']) {
            this.start = new fhir.CodeableConcept(source.startCodeableConcept, options);
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetDate'] !== undefined) {
            this.target = new fhir.FhirDate({ value: source.targetDate }, options);
        }
        else if (source['targetQuantity']) {
            this.target = new fhir.Quantity(source.targetQuantity, options);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.category = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusDate'] !== undefined) {
            this.statusDate = new fhir.FhirDate({ value: source.statusDate }, options);
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDate(source._statusDate, options);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason, options);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority, options);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.addresses = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['outcome']) {
            this.outcome = source.outcome.map((x) => new fhir.GoalOutcome(x, options));
        }
        else {
            this.outcome = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Goal';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vRSV('status', exp, 'GoalStatus', GoalStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusDate', exp));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOA('addresses', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('outcome', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Goal._fts_dataType = 'Goal';
/**
 * Internal flag to properly serialize choice-type element Goal.start[x]
 */
Goal._fts_startIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Goal.target[x]
 */
Goal._fts_targetIsChoice = true;
//# sourceMappingURL=data:application/json;base64,