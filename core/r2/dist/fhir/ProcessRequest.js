// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ProcessRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { ActionlistVsValidation } from '../fhirValueSets/ActionlistVsValidation.js';
/**
 * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
 */
export class ProcessRequestItem extends fhir.BackboneElement {
    /**
     * Default constructor for ProcessRequestItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequenceLinkId'] !== undefined) {
            this.sequenceLinkId = new fhir.FhirInteger({ value: source.sequenceLinkId }, options);
        }
        else {
            this.sequenceLinkId = null;
        }
        if (source['_sequenceLinkId']) {
            if (this.sequenceLinkId) {
                this.sequenceLinkId.addExtendedProperties(source._sequenceLinkId);
            }
            else {
                this.sequenceLinkId = new fhir.FhirInteger(source._sequenceLinkId, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ProcessRequest.item';
        }
        iss.push(...this.vRS('sequenceLinkId', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcessRequestItem._fts_dataType = 'ProcessRequestItem';
/**
 * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
 */
export class ProcessRequest extends fhir.DomainResource {
    /**
     * Default constructor for ProcessRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ProcessRequest';
        if (source['action'] !== undefined) {
            this.action = new fhir.FhirCode({ value: source.action }, options);
        }
        else {
            this.action = null;
        }
        if (source['_action']) {
            if (this.action) {
                this.action.addExtendedProperties(source._action);
            }
            else {
                this.action = new fhir.FhirCode(source._action, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['ruleset']) {
            this.ruleset = new fhir.Coding(source.ruleset, options);
        }
        if (source['originalRuleset']) {
            this.originalRuleset = new fhir.Coding(source.originalRuleset, options);
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target, options);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider, options);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization, options);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request, options);
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response, options);
        }
        if (source['nullify'] !== undefined) {
            this.nullify = new fhir.FhirBoolean({ value: source.nullify }, options);
        }
        if (source['_nullify']) {
            if (this.nullify) {
                this.nullify.addExtendedProperties(source._nullify);
            }
            else {
                this.nullify = new fhir.FhirBoolean(source._nullify, options);
            }
        }
        if (source['reference'] !== undefined) {
            this.reference = new fhir.FhirString({ value: source.reference }, options);
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirString(source._reference, options);
            }
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ProcessRequestItem(x, options));
        }
        else {
            this.item = [];
        }
        if (source['include'] !== undefined) {
            this.include = source.include.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.include = [];
        }
        if (source['_include']) {
            source._include.forEach((x, i) => {
                if (this.include.length >= i) {
                    if (x) {
                        this.include[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.include.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['exclude'] !== undefined) {
            this.exclude = source.exclude.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.exclude = [];
        }
        if (source['_exclude']) {
            source._exclude.forEach((x, i) => {
                if (this.exclude.length >= i) {
                    if (x) {
                        this.exclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.exclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ProcessRequest';
        }
        iss.push(...this.vRSV('action', exp, 'Actionlist', ActionlistVsValidation, 'r'));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('ruleset', exp));
        iss.push(...this.vOS('originalRuleset', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vOS('organization', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOS('response', exp));
        iss.push(...this.vOS('nullify', exp));
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOA('item', exp));
        iss.push(...this.vOA('include', exp));
        iss.push(...this.vOA('exclude', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcessRequest._fts_dataType = 'ProcessRequest';
//# sourceMappingURL=data:application/json;base64,