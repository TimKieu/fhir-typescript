// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: HealthcareService
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekVsValidation } from '../fhirValueSets/DaysOfWeekVsValidation.js';
/**
 * A specific type of service that may be delivered or performed.
 */
export class HealthcareServiceServiceType extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceServiceType - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService.serviceType';
        }
        this.vRS('type', exp);
        this.vOA('specialty', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceServiceType._fts_dataType = 'HealthcareServiceServiceType';
/**
 * A collection of times that the Service Site is available.
 */
export class HealthcareServiceAvailableTime extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceAvailableTime - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['_daysOfWeek']) {
            source._daysOfWeek.forEach((x, i) => {
                if (this.daysOfWeek.length >= i) {
                    if (x) {
                        this.daysOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.daysOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['allDay']) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay });
        }
        if (source['_allDay']) {
            if (this.allDay) {
                this.allDay.addExtendedProperties(source._allDay);
            }
            else {
                this.allDay = new fhir.FhirBoolean(source._allDay);
            }
        }
        if (source['availableStartTime']) {
            this.availableStartTime = new fhir.FhirTime({ value: source.availableStartTime });
        }
        if (source['_availableStartTime']) {
            if (this.availableStartTime) {
                this.availableStartTime.addExtendedProperties(source._availableStartTime);
            }
            else {
                this.availableStartTime = new fhir.FhirTime(source._availableStartTime);
            }
        }
        if (source['availableEndTime']) {
            this.availableEndTime = new fhir.FhirTime({ value: source.availableEndTime });
        }
        if (source['_availableEndTime']) {
            if (this.availableEndTime) {
                this.availableEndTime.addExtendedProperties(source._availableEndTime);
            }
            else {
                this.availableEndTime = new fhir.FhirTime(source._availableEndTime);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService.availableTime';
        }
        this.vOAV('daysOfWeek', exp, 'DaysOfWeek', DaysOfWeekVsValidation, 'r');
        this.vOS('allDay', exp);
        this.vOS('availableStartTime', exp);
        this.vOS('availableEndTime', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceAvailableTime._fts_dataType = 'HealthcareServiceAvailableTime';
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export class HealthcareServiceNotAvailable extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceNotAvailable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['during']) {
            this.during = new fhir.Period(source.during);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService.notAvailable';
        }
        this.vRS('description', exp);
        this.vOS('during', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceNotAvailable._fts_dataType = 'HealthcareServiceNotAvailable';
/**
 * The details of a healthcare service available at a location.
 */
export class HealthcareService extends fhir.DomainResource {
    /**
     * Default constructor for HealthcareService - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'HealthcareService';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['providedBy']) {
            this.providedBy = new fhir.Reference(source.providedBy);
        }
        if (source['serviceCategory']) {
            this.serviceCategory = new fhir.CodeableConcept(source.serviceCategory);
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.HealthcareServiceServiceType(x));
        }
        else {
            this.serviceType = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        else {
            this.location = null;
        }
        if (source['serviceName']) {
            this.serviceName = new fhir.FhirString({ value: source.serviceName });
        }
        if (source['_serviceName']) {
            if (this.serviceName) {
                this.serviceName.addExtendedProperties(source._serviceName);
            }
            else {
                this.serviceName = new fhir.FhirString(source._serviceName);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['extraDetails']) {
            this.extraDetails = new fhir.FhirString({ value: source.extraDetails });
        }
        if (source['_extraDetails']) {
            if (this.extraDetails) {
                this.extraDetails.addExtendedProperties(source._extraDetails);
            }
            else {
                this.extraDetails = new fhir.FhirString(source._extraDetails);
            }
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        else {
            this.coverageArea = [];
        }
        if (source['serviceProvisionCode']) {
            this.serviceProvisionCode = source.serviceProvisionCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceProvisionCode = [];
        }
        if (source['eligibility']) {
            this.eligibility = new fhir.CodeableConcept(source.eligibility);
        }
        if (source['eligibilityNote']) {
            this.eligibilityNote = new fhir.FhirString({ value: source.eligibilityNote });
        }
        if (source['_eligibilityNote']) {
            if (this.eligibilityNote) {
                this.eligibilityNote.addExtendedProperties(source._eligibilityNote);
            }
            else {
                this.eligibilityNote = new fhir.FhirString(source._eligibilityNote);
            }
        }
        if (source['programName']) {
            this.programName = source.programName.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.programName = [];
        }
        if (source['_programName']) {
            source._programName.forEach((x, i) => {
                if (this.programName.length >= i) {
                    if (x) {
                        this.programName[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.programName.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.characteristic = [];
        }
        if (source['referralMethod']) {
            this.referralMethod = source.referralMethod.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.referralMethod = [];
        }
        if (source['publicKey']) {
            this.publicKey = new fhir.FhirString({ value: source.publicKey });
        }
        if (source['_publicKey']) {
            if (this.publicKey) {
                this.publicKey.addExtendedProperties(source._publicKey);
            }
            else {
                this.publicKey = new fhir.FhirString(source._publicKey);
            }
        }
        if (source['appointmentRequired']) {
            this.appointmentRequired = new fhir.FhirBoolean({ value: source.appointmentRequired });
        }
        if (source['_appointmentRequired']) {
            if (this.appointmentRequired) {
                this.appointmentRequired.addExtendedProperties(source._appointmentRequired);
            }
            else {
                this.appointmentRequired = new fhir.FhirBoolean(source._appointmentRequired);
            }
        }
        if (source['availableTime']) {
            this.availableTime = source.availableTime.map((x) => new fhir.HealthcareServiceAvailableTime(x));
        }
        else {
            this.availableTime = [];
        }
        if (source['notAvailable']) {
            this.notAvailable = source.notAvailable.map((x) => new fhir.HealthcareServiceNotAvailable(x));
        }
        else {
            this.notAvailable = [];
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions });
        }
        if (source['_availabilityExceptions']) {
            if (this.availabilityExceptions) {
                this.availabilityExceptions.addExtendedProperties(source._availabilityExceptions);
            }
            else {
                this.availabilityExceptions = new fhir.FhirString(source._availabilityExceptions);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'HealthcareService';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('providedBy', exp);
        this.vOS('serviceCategory', exp);
        this.vOA('serviceType', exp);
        this.vRS('location', exp);
        this.vOS('serviceName', exp);
        this.vOS('comment', exp);
        this.vOS('extraDetails', exp);
        this.vOS('photo', exp);
        this.vOA('telecom', exp);
        this.vOA('coverageArea', exp);
        this.vOA('serviceProvisionCode', exp);
        this.vOS('eligibility', exp);
        this.vOS('eligibilityNote', exp);
        this.vOA('programName', exp);
        this.vOA('characteristic', exp);
        this.vOA('referralMethod', exp);
        this.vOS('publicKey', exp);
        this.vOS('appointmentRequired', exp);
        this.vOA('availableTime', exp);
        this.vOA('notAvailable', exp);
        this.vOS('availabilityExceptions', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareService._fts_dataType = 'HealthcareService';
//# sourceMappingURL=data:application/json;base64,