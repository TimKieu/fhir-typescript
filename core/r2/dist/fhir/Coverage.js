// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
/**
 * Financial instrument which may be used to pay for or reimburse health care products and services.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Coverage';
        if (source['issuer']) {
            this.issuer = new fhir.Reference(source.issuer, options);
        }
        if (source['bin']) {
            this.bin = new fhir.Identifier(source.bin, options);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type, options);
        }
        if (source['subscriberId']) {
            this.subscriberId = new fhir.Identifier(source.subscriberId, options);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['group'] !== undefined) {
            this.group = new fhir.FhirString({ value: source.group }, options);
        }
        if (source['_group']) {
            if (this.group) {
                this.group.addExtendedProperties(source._group);
            }
            else {
                this.group = new fhir.FhirString(source._group, options);
            }
        }
        if (source['plan'] !== undefined) {
            this.plan = new fhir.FhirString({ value: source.plan }, options);
        }
        if (source['_plan']) {
            if (this.plan) {
                this.plan.addExtendedProperties(source._plan);
            }
            else {
                this.plan = new fhir.FhirString(source._plan, options);
            }
        }
        if (source['subPlan'] !== undefined) {
            this.subPlan = new fhir.FhirString({ value: source.subPlan }, options);
        }
        if (source['_subPlan']) {
            if (this.subPlan) {
                this.subPlan.addExtendedProperties(source._subPlan);
            }
            else {
                this.subPlan = new fhir.FhirString(source._subPlan, options);
            }
        }
        if (source['dependent'] !== undefined) {
            this.dependent = new fhir.FhirPositiveInt({ value: source.dependent }, options);
        }
        if (source['_dependent']) {
            if (this.dependent) {
                this.dependent.addExtendedProperties(source._dependent);
            }
            else {
                this.dependent = new fhir.FhirPositiveInt(source._dependent, options);
            }
        }
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber, options);
        }
        if (source['network']) {
            this.network = new fhir.Identifier(source.network, options);
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.contract = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage';
        }
        iss.push(...this.vOS('issuer', exp));
        iss.push(...this.vOS('bin', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('subscriberId', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('group', exp));
        iss.push(...this.vOS('plan', exp));
        iss.push(...this.vOS('subPlan', exp));
        iss.push(...this.vOS('dependent', exp));
        iss.push(...this.vOS('sequence', exp));
        iss.push(...this.vOS('subscriber', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOA('contract', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Coverage._fts_dataType = 'Coverage';
//# sourceMappingURL=data:application/json;base64,