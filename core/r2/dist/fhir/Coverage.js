// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
/**
 * Financial instrument which may be used to pay for or reimburse health care products and services.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Coverage';
        if (source['issuer']) {
            this.issuer = new fhir.Reference(source.issuer);
        }
        if (source['bin']) {
            this.bin = new fhir.Identifier(source.bin);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['subscriberId']) {
            this.subscriberId = new fhir.Identifier(source.subscriberId);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['group']) {
            this.group = new fhir.FhirString({ value: source.group });
        }
        if (source['_group']) {
            if (this.group) {
                this.group.addExtendedProperties(source._group);
            }
            else {
                this.group = new fhir.FhirString(source._group);
            }
        }
        if (source['plan']) {
            this.plan = new fhir.FhirString({ value: source.plan });
        }
        if (source['_plan']) {
            if (this.plan) {
                this.plan.addExtendedProperties(source._plan);
            }
            else {
                this.plan = new fhir.FhirString(source._plan);
            }
        }
        if (source['subPlan']) {
            this.subPlan = new fhir.FhirString({ value: source.subPlan });
        }
        if (source['_subPlan']) {
            if (this.subPlan) {
                this.subPlan.addExtendedProperties(source._subPlan);
            }
            else {
                this.subPlan = new fhir.FhirString(source._subPlan);
            }
        }
        if (source['dependent']) {
            this.dependent = new fhir.FhirPositiveInt({ value: source.dependent });
        }
        if (source['_dependent']) {
            if (this.dependent) {
                this.dependent.addExtendedProperties(source._dependent);
            }
            else {
                this.dependent = new fhir.FhirPositiveInt(source._dependent);
            }
        }
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber);
        }
        if (source['network']) {
            this.network = new fhir.Identifier(source.network);
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x));
        }
        else {
            this.contract = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage';
        }
        this.vRS('resourceType', exp);
        this.vOS('issuer', exp);
        this.vOS('bin', exp);
        this.vOS('period', exp);
        this.vOS('type', exp);
        this.vOS('subscriberId', exp);
        this.vOA('identifier', exp);
        this.vOS('group', exp);
        this.vOS('plan', exp);
        this.vOS('subPlan', exp);
        this.vOS('dependent', exp);
        this.vOS('sequence', exp);
        this.vOS('subscriber', exp);
        this.vOS('network', exp);
        this.vOA('contract', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Coverage._fts_dataType = 'Coverage';
//# sourceMappingURL=data:application/json;base64,