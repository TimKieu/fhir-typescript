// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProvenanceEntityRoleVsValidation } from '../fhirValueSets/ProvenanceEntityRoleVsValidation.js';
/**
 * A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
 */
export class ProvenanceAgentRelatedAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgentRelatedAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['target']) {
            this.target = new fhir.FhirUri({ value: source.target });
        }
        else {
            this.target = null;
        }
        if (source['_target']) {
            if (this.target) {
                this.target.addExtendedProperties(source._target);
            }
            else {
                this.target = new fhir.FhirUri(source._target);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.agent.relatedAgent';
        }
        this.vRS('type', exp);
        this.vRS('target', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgentRelatedAgent._fts_dataType = 'ProvenanceAgentRelatedAgent';
/**
 * An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.Coding(source.role);
        }
        else {
            this.role = null;
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['userId']) {
            this.userId = new fhir.Identifier(source.userId);
        }
        if (source['relatedAgent']) {
            this.relatedAgent = source.relatedAgent.map((x) => new fhir.ProvenanceAgentRelatedAgent(x));
        }
        else {
            this.relatedAgent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.agent';
        }
        this.vRS('role', exp);
        this.vOS('actor', exp);
        this.vOS('userId', exp);
        this.vOA('relatedAgent', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.FhirCode({ value: source.role });
        }
        else {
            this.role = null;
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirCode(source._role);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['reference']) {
            this.reference = new fhir.FhirUri({ value: source.reference });
        }
        else {
            this.reference = null;
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirUri(source._reference);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['agent']) {
            this.agent = new fhir.ProvenanceAgent(source.agent);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.entity';
        }
        this.vRSV('role', exp, 'ProvenanceEntityRole', ProvenanceEntityRoleVsValidation, 'r');
        this.vRS('type', exp);
        this.vRS('reference', exp);
        this.vOS('display', exp);
        this.vOS('agent', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirInstant(source._recorded);
            }
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.policy = [];
        }
        if (source['_policy']) {
            source._policy.forEach((x, i) => {
                if (this.policy.length >= i) {
                    if (x) {
                        this.policy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.policy.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        else {
            this.entity = [];
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance';
        }
        this.vRS('resourceType', exp);
        this.vRA('target', exp);
        this.vOS('period', exp);
        this.vRS('recorded', exp);
        this.vOA('reason', exp);
        this.vOS('activity', exp);
        this.vOS('location', exp);
        this.vOA('policy', exp);
        this.vOA('agent', exp);
        this.vOA('entity', exp);
        this.vOA('signature', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Provenance._fts_dataType = 'Provenance';
//# sourceMappingURL=data:application/json;base64,