// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProvenanceEntityRoleVsValidation } from '../fhirValueSets/ProvenanceEntityRoleVsValidation.js';
/**
 * A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
 */
export class ProvenanceAgentRelatedAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgentRelatedAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['target'] !== undefined) {
            this.target = new fhir.FhirUri({ value: source.target }, options);
        }
        else {
            this.target = null;
        }
        if (source['_target']) {
            if (this.target) {
                this.target.addExtendedProperties(source._target);
            }
            else {
                this.target = new fhir.FhirUri(source._target, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.agent.relatedAgent';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgentRelatedAgent._fts_dataType = 'ProvenanceAgentRelatedAgent';
/**
 * An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.Coding(source.role, options);
        }
        else {
            this.role = null;
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        if (source['userId']) {
            this.userId = new fhir.Identifier(source.userId, options);
        }
        if (source['relatedAgent']) {
            this.relatedAgent = source.relatedAgent.map((x) => new fhir.ProvenanceAgentRelatedAgent(x, options));
        }
        else {
            this.relatedAgent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.agent';
        }
        iss.push(...this.vRS('role', exp));
        iss.push(...this.vOS('actor', exp));
        iss.push(...this.vOS('userId', exp));
        iss.push(...this.vOA('relatedAgent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role'] !== undefined) {
            this.role = new fhir.FhirCode({ value: source.role }, options);
        }
        else {
            this.role = null;
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirCode(source._role, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['reference'] !== undefined) {
            this.reference = new fhir.FhirUri({ value: source.reference }, options);
        }
        else {
            this.reference = null;
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirUri(source._reference, options);
            }
        }
        if (source['display'] !== undefined) {
            this.display = new fhir.FhirString({ value: source.display }, options);
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display, options);
            }
        }
        if (source['agent']) {
            this.agent = new fhir.ProvenanceAgent(source.agent, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance.entity';
        }
        iss.push(...this.vRSV('role', exp, 'ProvenanceEntityRole', ProvenanceEntityRoleVsValidation, 'r'));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('reference', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOS('agent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.target = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['recorded'] !== undefined) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded }, options);
        }
        else {
            this.recorded = null;
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirInstant(source._recorded, options);
            }
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity, options);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['policy'] !== undefined) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.policy = [];
        }
        if (source['_policy']) {
            source._policy.forEach((x, i) => {
                if (this.policy.length >= i) {
                    if (x) {
                        this.policy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.policy.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x, options));
        }
        else {
            this.agent = [];
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x, options));
        }
        else {
            this.entity = [];
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x, options));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Provenance';
        }
        iss.push(...this.vRA('target', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRS('recorded', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOS('activity', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('policy', exp));
        iss.push(...this.vOA('agent', exp));
        iss.push(...this.vOA('entity', exp));
        iss.push(...this.vOA('signature', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Provenance._fts_dataType = 'Provenance';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmVuYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvUHJvdmVuYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0QkFBNEI7QUFFNUIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFJbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBdUJ4Rzs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBNEIsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWFuRTs7T0FFRztJQUNILFlBQVksU0FBa0QsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDeEcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FBRTthQUM5RTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7YUFDbkc7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFRLENBQUMsQ0FBQzthQUFFO2lCQUNuRTtnQkFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBb0MsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUFFO1NBQy9GO0lBQ0gsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsTUFBYSxFQUFFO1FBQy9DLElBQUksR0FBRyxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQUUsR0FBRyxHQUFHLCtCQUErQixDQUFBO1NBQUU7UUFDekQsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQW5DRDs7R0FFRztBQUM2Qix5Q0FBYSxHQUFVLDZCQUE2QixDQUFDO0FBd0R2Rjs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFnQixTQUFRLElBQUksQ0FBQyxlQUFlO0lBcUJ2RDs7T0FFRztJQUNILFlBQVksU0FBc0MsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDNUYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FBRTthQUNyRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDaEYsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDcEYsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2hJO1lBQUUsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7U0FBRTtJQUNsQyxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxNQUFhLEVBQUU7UUFDL0MsSUFBSSxHQUFHLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RCxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQUU7WUFBRSxHQUFHLEdBQUcsa0JBQWtCLENBQUE7U0FBRTtRQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0FBM0NEOztHQUVHO0FBQzZCLDZCQUFhLEdBQVUsaUJBQWlCLENBQUM7QUFnRjNFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGdCQUFpQixTQUFRLElBQUksQ0FBQyxlQUFlO0lBeUJ4RDs7T0FFRztJQUNILFlBQVksU0FBdUMsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDN0YsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBK0IsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7YUFDNUg7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzFCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25CLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxLQUFNLENBQUMsQ0FBQzthQUFFO2lCQUM3RDtnQkFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBK0IsTUFBTSxDQUFDLEtBQStCLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFBRTtTQUN2SDtRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztTQUFFO2FBQ3JFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FBRTthQUM1RztZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDL0IsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDeEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUFFLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLFVBQVcsQ0FBQyxDQUFDO2FBQUU7aUJBQzVFO2dCQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUF1QyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQUU7U0FDckc7UUFDRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FBRTtRQUM5RyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFDLENBQUM7YUFBRTtpQkFDdEU7Z0JBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQXdDLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFBRTtTQUN2RztRQUNELElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztTQUFFO0lBQ3hGLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQixDQUFDLE1BQWEsRUFBRTtRQUMvQyxJQUFJLEdBQUcsR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtZQUFFLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQTtTQUFFO1FBQzdDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQyxHQUFHLEVBQUMsc0JBQXNCLEVBQUMsZ0NBQWdDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvRixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0FBOUREOztHQUVHO0FBQzZCLDhCQUFhLEdBQVUsa0JBQWtCLENBQUM7QUF1SDVFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVcsU0FBUSxJQUFJLENBQUMsY0FBYztJQWlEakQ7O09BRUc7SUFDSCxZQUFZLFNBQWlDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3ZGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FBRTthQUM1RjtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDaEYsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7YUFDN0c7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzlCLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxTQUFVLENBQUMsQ0FBQzthQUFFO2lCQUN6RTtnQkFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsU0FBMEMsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUFFO1NBQzNHO1FBQ0QsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNsRztZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDL0YsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDekYsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNqSDtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDckIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO29CQUFFLElBQUksQ0FBQyxFQUFFO3dCQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQUU7aUJBQUU7cUJBQy9FO29CQUFFLElBQUksQ0FBQyxFQUFFO3dCQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUE4QixDQUFDLENBQUMsQ0FBQztxQkFBRTtpQkFBRTtZQUN6RixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FBRTthQUMvRjtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDekIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ25HO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3JHO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7U0FBRTtJQUMvQixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxNQUFhLEVBQUU7UUFDL0MsSUFBSSxHQUFHLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RCxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQUU7WUFBRSxHQUFHLEdBQUcsWUFBWSxDQUFBO1NBQUU7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQW5HRDs7R0FFRztBQUM2Qix3QkFBYSxHQUFVLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogUHJvdmVuYW5jZVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHJvdmVuYW5jZUVudGl0eVJvbGVDb2RlcywgIFByb3ZlbmFuY2VFbnRpdHlSb2xlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1Byb3ZlbmFuY2VFbnRpdHlSb2xlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFByb3ZlbmFuY2VFbnRpdHlSb2xlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Qcm92ZW5hbmNlRW50aXR5Um9sZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlc0NvZGVzLCAgUmVzb3VyY2VUeXBlc0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9SZXNvdXJjZVR5cGVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJlc291cmNlVHlwZXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1Jlc291cmNlVHlwZXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgUHJvdmVuYW5jZUFnZW50UmVsYXRlZEFnZW50IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFByb3ZlbmFuY2VBZ2VudFJlbGF0ZWRBZ2VudEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGFnZW50cy5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBBbiBpbnRlcm5hbCByZWZlcmVuY2UgdG8gYW5vdGhlciBhZ2VudCBsaXN0ZWQgaW4gdGhpcyBwcm92ZW5hbmNlIGJ5IGl0cyBpZGVudGlmaWVyLlxyXG4gICAqL1xyXG4gIHRhcmdldDogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFByb3ZlbmFuY2UuYWdlbnQucmVsYXRlZEFnZW50LnRhcmdldFxyXG4gICAqL1xyXG4gIF90YXJnZXQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0d28gdGhlIGFnZW50cyByZWZlcmVuY2VkIGluIHRoaXMgcmVzb3VyY2UuIFRoaXMgaXMgZGVmaW5lZCB0byBhbGxvdyBmb3IgZXhwbGljaXQgZGVzY3JpcHRpb24gb2YgdGhlIGRlbGVnYXRpb24gYmV0d2VlbiBhZ2VudHMuICBGb3IgZXhhbXBsZSwgdGhpcyBodW1hbiBhdXRob3IgdXNlZCB0aGlzIGRldmljZSwgb3Igb25lIHBlcnNvbiBhY3RlZCBvbiBhbm90aGVyJ3MgYmVoZXN0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFByb3ZlbmFuY2VBZ2VudFJlbGF0ZWRBZ2VudCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Byb3ZlbmFuY2VBZ2VudFJlbGF0ZWRBZ2VudCc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgcmVsYXRpb25zaGlwIGJldHdlZW4gYWdlbnRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFuIGludGVybmFsIHJlZmVyZW5jZSB0byBhbm90aGVyIGFnZW50IGxpc3RlZCBpbiB0aGlzIHByb3ZlbmFuY2UgYnkgaXRzIGlkZW50aWZpZXIuXHJcbiAgICovXHJcbiAgcHVibGljIHRhcmdldDogZmhpci5GaGlyVXJpfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgUHJvdmVuYW5jZUFnZW50UmVsYXRlZEFnZW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UHJvdmVuYW5jZUFnZW50UmVsYXRlZEFnZW50QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGFyZ2V0J10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnRhcmdldCA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudGFyZ2V0fSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRhcmdldCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ190YXJnZXQnXSkge1xyXG4gICAgICBpZiAodGhpcy50YXJnZXQpIHsgdGhpcy50YXJnZXQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdGFyZ2V0ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudGFyZ2V0ID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX3RhcmdldCBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Byb3ZlbmFuY2UuYWdlbnQucmVsYXRlZEFnZW50JyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygndHlwZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygndGFyZ2V0JyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBQcm92ZW5hbmNlQWdlbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmVuYW5jZUFnZW50QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZ1bmN0aW9uIG9mIHRoZSBhZ2VudCB3aXRoIHJlc3BlY3QgdG8gdGhlIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIHJvbGU6IGZoaXIuQ29kaW5nQXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbmRpdmlkdWFsLCBkZXZpY2Ugb3Igb3JnYW5pemF0aW9uIHRoYXQgcGFydGljaXBhdGVkIGluIHRoZSBldmVudC5cclxuICAgKi9cclxuICBhY3Rvcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGlkZW50aXR5IG9mIHRoZSBhZ2VudCBhcyBrbm93biBieSB0aGUgYXV0aG9yaXphdGlvbiBzeXN0ZW0uXHJcbiAgICovXHJcbiAgdXNlcklkPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0d28gdGhlIGFnZW50cyByZWZlcmVuY2VkIGluIHRoaXMgcmVzb3VyY2UuIFRoaXMgaXMgZGVmaW5lZCB0byBhbGxvdyBmb3IgZXhwbGljaXQgZGVzY3JpcHRpb24gb2YgdGhlIGRlbGVnYXRpb24gYmV0d2VlbiBhZ2VudHMuICBGb3IgZXhhbXBsZSwgdGhpcyBodW1hbiBhdXRob3IgdXNlZCB0aGlzIGRldmljZSwgb3Igb25lIHBlcnNvbiBhY3RlZCBvbiBhbm90aGVyJ3MgYmVoZXN0LlxyXG4gICAqL1xyXG4gIHJlbGF0ZWRBZ2VudD86IGZoaXIuUHJvdmVuYW5jZUFnZW50UmVsYXRlZEFnZW50QXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFnZW50IHRha2VzIGEgcm9sZSBpbiBhbiBhY3Rpdml0eSBzdWNoIHRoYXQgdGhlIGFnZW50IGNhbiBiZSBhc3NpZ25lZCBzb21lIGRlZ3JlZSBvZiByZXNwb25zaWJpbGl0eSBmb3IgdGhlIGFjdGl2aXR5IHRha2luZyBwbGFjZS4gQW4gYWdlbnQgY2FuIGJlIGEgcGVyc29uLCBhbiBvcmdhbml6YXRpb24sIHNvZnR3YXJlLCBvciBvdGhlciBlbnRpdGllcyB0aGF0IG1heSBiZSBhc2NyaWJlZCByZXNwb25zaWJpbGl0eS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm92ZW5hbmNlQWdlbnQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdQcm92ZW5hbmNlQWdlbnQnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmdW5jdGlvbiBvZiB0aGUgYWdlbnQgd2l0aCByZXNwZWN0IHRvIHRoZSBhY3Rpdml0eS5cclxuICAgKi9cclxuICBwdWJsaWMgcm9sZTogZmhpci5Db2Rpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgaW5kaXZpZHVhbCwgZGV2aWNlIG9yIG9yZ2FuaXphdGlvbiB0aGF0IHBhcnRpY2lwYXRlZCBpbiB0aGUgZXZlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGFjdG9yPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpZGVudGl0eSBvZiB0aGUgYWdlbnQgYXMga25vd24gYnkgdGhlIGF1dGhvcml6YXRpb24gc3lzdGVtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1c2VySWQ/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgcmVsYXRpb25zaGlwIGJldHdlZW4gdHdvIHRoZSBhZ2VudHMgcmVmZXJlbmNlZCBpbiB0aGlzIHJlc291cmNlLiBUaGlzIGlzIGRlZmluZWQgdG8gYWxsb3cgZm9yIGV4cGxpY2l0IGRlc2NyaXB0aW9uIG9mIHRoZSBkZWxlZ2F0aW9uIGJldHdlZW4gYWdlbnRzLiAgRm9yIGV4YW1wbGUsIHRoaXMgaHVtYW4gYXV0aG9yIHVzZWQgdGhpcyBkZXZpY2UsIG9yIG9uZSBwZXJzb24gYWN0ZWQgb24gYW5vdGhlcidzIGJlaGVzdC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVsYXRlZEFnZW50OiBmaGlyLlByb3ZlbmFuY2VBZ2VudFJlbGF0ZWRBZ2VudFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFByb3ZlbmFuY2VBZ2VudCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFByb3ZlbmFuY2VBZ2VudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyb2xlJ10pIHsgdGhpcy5yb2xlID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS5yb2xlLCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucm9sZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2FjdG9yJ10pIHsgdGhpcy5hY3RvciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuYWN0b3IsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWyd1c2VySWQnXSkgeyB0aGlzLnVzZXJJZCA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLnVzZXJJZCwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlbGF0ZWRBZ2VudCddKSB7IHRoaXMucmVsYXRlZEFnZW50ID0gc291cmNlLnJlbGF0ZWRBZ2VudC5tYXAoKHgpID0+IG5ldyBmaGlyLlByb3ZlbmFuY2VBZ2VudFJlbGF0ZWRBZ2VudCh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlbGF0ZWRBZ2VudCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnUHJvdmVuYW5jZS5hZ2VudCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3JvbGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2FjdG9yJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd1c2VySWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3JlbGF0ZWRBZ2VudCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgUHJvdmVuYW5jZUVudGl0eSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm92ZW5hbmNlRW50aXR5QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogSG93IHRoZSBlbnRpdHkgd2FzIHVzZWQgZHVyaW5nIHRoZSBhY3Rpdml0eS5cclxuICAgKi9cclxuICByb2xlOiBmaGlyLkZoaXJDb2RlPFByb3ZlbmFuY2VFbnRpdHlSb2xlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFByb3ZlbmFuY2UuZW50aXR5LnJvbGVcclxuICAgKi9cclxuICBfcm9sZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIHR5cGUgaXMgXCJyZXNvdXJjZVwiIHRoZW4gdGhlIHJlc291cmNlIGl0c2VsZiB3YXMgdGhlIHBhcnRpY2lwYW50LiBJZiB0aGUgdHlwZSBpcyBhIHR5cGUgb2YgcmVzb3VyY2UsIHRoZW4gdGhlIGVudGl0eSBpZGVudGlmaWVkIGJ5IHRoZSByZXNvdXJjZSBpcyB0aGUgcGFydGljaXBhbnQuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5Db2RpbmdBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpdHkgb2YgdGhlICBFbnRpdHkgdXNlZC4gTWF5IGJlIGEgbG9naWNhbCBvciBwaHlzaWNhbCB1cmkgYW5kIG1heWJlIGFic29sdXRlIG9yIHJlbGF0aXZlLlxyXG4gICAqL1xyXG4gIHJlZmVyZW5jZTogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFByb3ZlbmFuY2UuZW50aXR5LnJlZmVyZW5jZVxyXG4gICAqL1xyXG4gIF9yZWZlcmVuY2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlbnRpdHkuXHJcbiAgICovXHJcbiAgZGlzcGxheT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQcm92ZW5hbmNlLmVudGl0eS5kaXNwbGF5XHJcbiAgICovXHJcbiAgX2Rpc3BsYXk/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbnRpdHkgaXMgYXR0cmlidXRlZCB0byBhbiBhZ2VudCB0byBleHByZXNzIHRoZSBhZ2VudCdzIHJlc3BvbnNpYmlsaXR5IGZvciB0aGF0IGVudGl0eSwgcG9zc2libHkgYWxvbmcgd2l0aCBvdGhlciBhZ2VudHMuIFRoaXMgZGVzY3JpcHRpb24gY2FuIGJlIHVuZGVyc3Rvb2QgYXMgc2hvcnRoYW5kIGZvciBzYXlpbmcgdGhhdCB0aGUgYWdlbnQgd2FzIHJlc3BvbnNpYmxlIGZvciB0aGUgYWN0aXZpdHkgd2hpY2ggZ2VuZXJhdGVkIHRoZSBlbnRpdHkuXHJcbiAgICovXHJcbiAgYWdlbnQ/OiBmaGlyLlByb3ZlbmFuY2VBZ2VudEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZW50aXR5IHVzZWQgaW4gdGhpcyBhY3Rpdml0eS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm92ZW5hbmNlRW50aXR5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnUHJvdmVuYW5jZUVudGl0eSc7XHJcbiAgLyoqXHJcbiAgICogSG93IHRoZSBlbnRpdHkgd2FzIHVzZWQgZHVyaW5nIHRoZSBhY3Rpdml0eS5cclxuICAgKi9cclxuICBwdWJsaWMgcm9sZTogZmhpci5GaGlyQ29kZTxQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSB0eXBlIGlzIFwicmVzb3VyY2VcIiB0aGVuIHRoZSByZXNvdXJjZSBpdHNlbGYgd2FzIHRoZSBwYXJ0aWNpcGFudC4gSWYgdGhlIHR5cGUgaXMgYSB0eXBlIG9mIHJlc291cmNlLCB0aGVuIHRoZSBlbnRpdHkgaWRlbnRpZmllZCBieSB0aGUgcmVzb3VyY2UgaXMgdGhlIHBhcnRpY2lwYW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aXR5IG9mIHRoZSAgRW50aXR5IHVzZWQuIE1heSBiZSBhIGxvZ2ljYWwgb3IgcGh5c2ljYWwgdXJpIGFuZCBtYXliZSBhYnNvbHV0ZSBvciByZWxhdGl2ZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVmZXJlbmNlOiBmaGlyLkZoaXJVcml8bnVsbDtcclxuICAvKipcclxuICAgKiBIdW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZW50aXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZW50aXR5IGlzIGF0dHJpYnV0ZWQgdG8gYW4gYWdlbnQgdG8gZXhwcmVzcyB0aGUgYWdlbnQncyByZXNwb25zaWJpbGl0eSBmb3IgdGhhdCBlbnRpdHksIHBvc3NpYmx5IGFsb25nIHdpdGggb3RoZXIgYWdlbnRzLiBUaGlzIGRlc2NyaXB0aW9uIGNhbiBiZSB1bmRlcnN0b29kIGFzIHNob3J0aGFuZCBmb3Igc2F5aW5nIHRoYXQgdGhlIGFnZW50IHdhcyByZXNwb25zaWJsZSBmb3IgdGhlIGFjdGl2aXR5IHdoaWNoIGdlbmVyYXRlZCB0aGUgZW50aXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZ2VudD86IGZoaXIuUHJvdmVuYW5jZUFnZW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBQcm92ZW5hbmNlRW50aXR5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UHJvdmVuYW5jZUVudGl0eUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyb2xlJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnJvbGUgPSBuZXcgZmhpci5GaGlyQ29kZTxQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5yb2xlfSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJvbGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfcm9sZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJvbGUpIHsgdGhpcy5yb2xlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JvbGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yb2xlID0gbmV3IGZoaXIuRmhpckNvZGU8UHJvdmVuYW5jZUVudGl0eVJvbGVDb2RlVHlwZT4oc291cmNlLl9yb2xlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS50eXBlLCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlZmVyZW5jZSddICE9PSB1bmRlZmluZWQpIHsgdGhpcy5yZWZlcmVuY2UgPSBuZXcgZmhpci5GaGlyVXJpKHt2YWx1ZTogc291cmNlLnJlZmVyZW5jZX0sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWZlcmVuY2UgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVmZXJlbmNlJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVmZXJlbmNlKSB7IHRoaXMucmVmZXJlbmNlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JlZmVyZW5jZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlZmVyZW5jZSA9IG5ldyBmaGlyLkZoaXJVcmkoc291cmNlLl9yZWZlcmVuY2UgYXMgUGFydGlhbDxmaGlyLkZoaXJVcmlBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2Rpc3BsYXknXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZGlzcGxheSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGlzcGxheX0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGlzcGxheSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRpc3BsYXkpIHsgdGhpcy5kaXNwbGF5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rpc3BsYXkhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kaXNwbGF5ID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rpc3BsYXkgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2FnZW50J10pIHsgdGhpcy5hZ2VudCA9IG5ldyBmaGlyLlByb3ZlbmFuY2VBZ2VudChzb3VyY2UuYWdlbnQsIG9wdGlvbnMpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnUHJvdmVuYW5jZS5lbnRpdHknIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTVigncm9sZScsZXhwLCdQcm92ZW5hbmNlRW50aXR5Um9sZScsUHJvdmVuYW5jZUVudGl0eVJvbGVWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygndHlwZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygncmVmZXJlbmNlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkaXNwbGF5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhZ2VudCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgUHJvdmVuYW5jZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm92ZW5hbmNlQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiUHJvdmVuYW5jZVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgUmVmZXJlbmNlKHMpIHRoYXQgd2VyZSBnZW5lcmF0ZWQgb3IgdXBkYXRlZCBieSAgdGhlIGFjdGl2aXR5IGRlc2NyaWJlZCBpbiB0aGlzIHJlc291cmNlLiBBIHByb3ZlbmFuY2UgY2FuIHBvaW50IHRvIG1vcmUgdGhhbiBvbmUgdGFyZ2V0IGlmIG11bHRpcGxlIHJlc291cmNlcyB3ZXJlIGNyZWF0ZWQvdXBkYXRlZCBieSB0aGUgc2FtZSBhY3Rpdml0eS5cclxuICAgKi9cclxuICB0YXJnZXQ6IGZoaXIuUmVmZXJlbmNlQXJnc1tdfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBkdXJpbmcgd2hpY2ggdGhlIGFjdGl2aXR5IG9jY3VycmVkLlxyXG4gICAqL1xyXG4gIHBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluc3RhbnQgb2YgdGltZSBhdCB3aGljaCB0aGUgYWN0aXZpdHkgd2FzIHJlY29yZGVkLlxyXG4gICAqL1xyXG4gIHJlY29yZGVkOiBmaGlyLkZoaXJJbnN0YW50fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFByb3ZlbmFuY2UucmVjb3JkZWRcclxuICAgKi9cclxuICBfcmVjb3JkZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZWFzb24gdGhhdCB0aGUgYWN0aXZpdHkgd2FzIHRha2luZyBwbGFjZS5cclxuICAgKi9cclxuICByZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW4gYWN0aXZpdHkgaXMgc29tZXRoaW5nIHRoYXQgb2NjdXJzIG92ZXIgYSBwZXJpb2Qgb2YgdGltZSBhbmQgYWN0cyB1cG9uIG9yIHdpdGggZW50aXRpZXM7IGl0IG1heSBpbmNsdWRlIGNvbnN1bWluZywgcHJvY2Vzc2luZywgdHJhbnNmb3JtaW5nLCBtb2RpZnlpbmcsIHJlbG9jYXRpbmcsIHVzaW5nLCBvciBnZW5lcmF0aW5nIGVudGl0aWVzLlxyXG4gICAqL1xyXG4gIGFjdGl2aXR5PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVyZSB0aGUgYWN0aXZpdHkgb2NjdXJyZWQsIGlmIHJlbGV2YW50LlxyXG4gICAqL1xyXG4gIGxvY2F0aW9uPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQb2xpY3kgb3IgcGxhbiB0aGUgYWN0aXZpdHkgd2FzIGRlZmluZWQgYnkuIFR5cGljYWxseSwgYSBzaW5nbGUgYWN0aXZpdHkgbWF5IGhhdmUgbXVsdGlwbGUgYXBwbGljYWJsZSBwb2xpY3kgZG9jdW1lbnRzLCBzdWNoIGFzIHBhdGllbnQgY29uc2VudCwgZ3VhcmFudG9yIGZ1bmRpbmcsIGV0Yy5cclxuICAgKi9cclxuICBwb2xpY3k/OiBmaGlyLkZoaXJVcmlbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQcm92ZW5hbmNlLnBvbGljeVxyXG4gICAqL1xyXG4gIF9wb2xpY3k/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIEFuIGFnZW50IHRha2VzIGEgcm9sZSBpbiBhbiBhY3Rpdml0eSBzdWNoIHRoYXQgdGhlIGFnZW50IGNhbiBiZSBhc3NpZ25lZCBzb21lIGRlZ3JlZSBvZiByZXNwb25zaWJpbGl0eSBmb3IgdGhlIGFjdGl2aXR5IHRha2luZyBwbGFjZS4gQW4gYWdlbnQgY2FuIGJlIGEgcGVyc29uLCBhbiBvcmdhbml6YXRpb24sIHNvZnR3YXJlLCBvciBvdGhlciBlbnRpdGllcyB0aGF0IG1heSBiZSBhc2NyaWJlZCByZXNwb25zaWJpbGl0eS5cclxuICAgKi9cclxuICBhZ2VudD86IGZoaXIuUHJvdmVuYW5jZUFnZW50QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBlbnRpdHkgdXNlZCBpbiB0aGlzIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIGVudGl0eT86IGZoaXIuUHJvdmVuYW5jZUVudGl0eUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBkaWdpdGFsIHNpZ25hdHVyZSBvbiB0aGUgdGFyZ2V0IFJlZmVyZW5jZShzKS4gVGhlIHNpZ25lciBzaG91bGQgbWF0Y2ggYSBQcm92ZW5hbmNlLmFnZW50LiBUaGUgcHVycG9zZSBvZiB0aGUgc2lnbmF0dXJlIGlzIGluZGljYXRlZC5cclxuICAgKi9cclxuICBzaWduYXR1cmU/OiBmaGlyLlNpZ25hdHVyZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcm92ZW5hbmNlIG9mIGEgcmVzb3VyY2UgaXMgYSByZWNvcmQgdGhhdCBkZXNjcmliZXMgZW50aXRpZXMgYW5kIHByb2Nlc3NlcyBpbnZvbHZlZCBpbiBwcm9kdWNpbmcgYW5kIGRlbGl2ZXJpbmcgb3Igb3RoZXJ3aXNlIGluZmx1ZW5jaW5nIHRoYXQgcmVzb3VyY2UuIFByb3ZlbmFuY2UgcHJvdmlkZXMgYSBjcml0aWNhbCBmb3VuZGF0aW9uIGZvciBhc3Nlc3NpbmcgYXV0aGVudGljaXR5LCBlbmFibGluZyB0cnVzdCwgYW5kIGFsbG93aW5nIHJlcHJvZHVjaWJpbGl0eS4gUHJvdmVuYW5jZSBhc3NlcnRpb25zIGFyZSBhIGZvcm0gb2YgY29udGV4dHVhbCBtZXRhZGF0YSBhbmQgY2FuIHRoZW1zZWx2ZXMgYmVjb21lIGltcG9ydGFudCByZWNvcmRzIHdpdGggdGhlaXIgb3duIHByb3ZlbmFuY2UuIFByb3ZlbmFuY2Ugc3RhdGVtZW50IGluZGljYXRlcyBjbGluaWNhbCBzaWduaWZpY2FuY2UgaW4gdGVybXMgb2YgY29uZmlkZW5jZSBpbiBhdXRoZW50aWNpdHksIHJlbGlhYmlsaXR5LCBhbmQgdHJ1c3R3b3J0aGluZXNzLCBpbnRlZ3JpdHksIGFuZCBzdGFnZSBpbiBsaWZlY3ljbGUgKGUuZy4gRG9jdW1lbnQgQ29tcGxldGlvbiAtIGhhcyB0aGUgYXJ0aWZhY3QgYmVlbiBsZWdhbGx5IGF1dGhlbnRpY2F0ZWQpLCBhbGwgb2Ygd2hpY2ggbWF5IGltcGFjdCBzZWN1cml0eSwgcHJpdmFjeSwgYW5kIHRydXN0IHBvbGljaWVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFByb3ZlbmFuY2UgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Byb3ZlbmFuY2UnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiUHJvdmVuYW5jZVwiO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBSZWZlcmVuY2UocykgdGhhdCB3ZXJlIGdlbmVyYXRlZCBvciB1cGRhdGVkIGJ5ICB0aGUgYWN0aXZpdHkgZGVzY3JpYmVkIGluIHRoaXMgcmVzb3VyY2UuIEEgcHJvdmVuYW5jZSBjYW4gcG9pbnQgdG8gbW9yZSB0aGFuIG9uZSB0YXJnZXQgaWYgbXVsdGlwbGUgcmVzb3VyY2VzIHdlcmUgY3JlYXRlZC91cGRhdGVkIGJ5IHRoZSBzYW1lIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0YXJnZXQ6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBkdXJpbmcgd2hpY2ggdGhlIGFjdGl2aXR5IG9jY3VycmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwZXJpb2Q/OiBmaGlyLlBlcmlvZHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluc3RhbnQgb2YgdGltZSBhdCB3aGljaCB0aGUgYWN0aXZpdHkgd2FzIHJlY29yZGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWNvcmRlZDogZmhpci5GaGlySW5zdGFudHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZWFzb24gdGhhdCB0aGUgYWN0aXZpdHkgd2FzIHRha2luZyBwbGFjZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIEFuIGFjdGl2aXR5IGlzIHNvbWV0aGluZyB0aGF0IG9jY3VycyBvdmVyIGEgcGVyaW9kIG9mIHRpbWUgYW5kIGFjdHMgdXBvbiBvciB3aXRoIGVudGl0aWVzOyBpdCBtYXkgaW5jbHVkZSBjb25zdW1pbmcsIHByb2Nlc3NpbmcsIHRyYW5zZm9ybWluZywgbW9kaWZ5aW5nLCByZWxvY2F0aW5nLCB1c2luZywgb3IgZ2VuZXJhdGluZyBlbnRpdGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgYWN0aXZpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlcmUgdGhlIGFjdGl2aXR5IG9jY3VycmVkLCBpZiByZWxldmFudC5cclxuICAgKi9cclxuICBwdWJsaWMgbG9jYXRpb24/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUG9saWN5IG9yIHBsYW4gdGhlIGFjdGl2aXR5IHdhcyBkZWZpbmVkIGJ5LiBUeXBpY2FsbHksIGEgc2luZ2xlIGFjdGl2aXR5IG1heSBoYXZlIG11bHRpcGxlIGFwcGxpY2FibGUgcG9saWN5IGRvY3VtZW50cywgc3VjaCBhcyBwYXRpZW50IGNvbnNlbnQsIGd1YXJhbnRvciBmdW5kaW5nLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIHBvbGljeTogZmhpci5GaGlyVXJpW107XHJcbiAgLyoqXHJcbiAgICogQW4gYWdlbnQgdGFrZXMgYSByb2xlIGluIGFuIGFjdGl2aXR5IHN1Y2ggdGhhdCB0aGUgYWdlbnQgY2FuIGJlIGFzc2lnbmVkIHNvbWUgZGVncmVlIG9mIHJlc3BvbnNpYmlsaXR5IGZvciB0aGUgYWN0aXZpdHkgdGFraW5nIHBsYWNlLiBBbiBhZ2VudCBjYW4gYmUgYSBwZXJzb24sIGFuIG9yZ2FuaXphdGlvbiwgc29mdHdhcmUsIG9yIG90aGVyIGVudGl0aWVzIHRoYXQgbWF5IGJlIGFzY3JpYmVkIHJlc3BvbnNpYmlsaXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZ2VudDogZmhpci5Qcm92ZW5hbmNlQWdlbnRbXTtcclxuICAvKipcclxuICAgKiBBbiBlbnRpdHkgdXNlZCBpbiB0aGlzIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbnRpdHk6IGZoaXIuUHJvdmVuYW5jZUVudGl0eVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgZGlnaXRhbCBzaWduYXR1cmUgb24gdGhlIHRhcmdldCBSZWZlcmVuY2UocykuIFRoZSBzaWduZXIgc2hvdWxkIG1hdGNoIGEgUHJvdmVuYW5jZS5hZ2VudC4gVGhlIHB1cnBvc2Ugb2YgdGhlIHNpZ25hdHVyZSBpcyBpbmRpY2F0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNpZ25hdHVyZTogZmhpci5TaWduYXR1cmVbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBQcm92ZW5hbmNlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UHJvdmVuYW5jZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdQcm92ZW5hbmNlJztcclxuICAgIGlmIChzb3VyY2VbJ3RhcmdldCddKSB7IHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRhcmdldCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwZXJpb2QnXSkgeyB0aGlzLnBlcmlvZCA9IG5ldyBmaGlyLlBlcmlvZChzb3VyY2UucGVyaW9kLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVjb3JkZWQnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMucmVjb3JkZWQgPSBuZXcgZmhpci5GaGlySW5zdGFudCh7dmFsdWU6IHNvdXJjZS5yZWNvcmRlZH0sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWNvcmRlZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZWNvcmRlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlY29yZGVkKSB7IHRoaXMucmVjb3JkZWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVjb3JkZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZWNvcmRlZCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHNvdXJjZS5fcmVjb3JkZWQgYXMgUGFydGlhbDxmaGlyLkZoaXJJbnN0YW50QXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZWFzb24nXSkgeyB0aGlzLnJlYXNvbiA9IHNvdXJjZS5yZWFzb24ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWFzb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWN0aXZpdHknXSkgeyB0aGlzLmFjdGl2aXR5ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5hY3Rpdml0eSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2xvY2F0aW9uJ10pIHsgdGhpcy5sb2NhdGlvbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UubG9jYXRpb24sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydwb2xpY3knXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMucG9saWN5ID0gc291cmNlLnBvbGljeS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiB4fSwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wb2xpY3kgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3BvbGljeSddKSB7XHJcbiAgICAgIHNvdXJjZS5fcG9saWN5LmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnBvbGljeS5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLnBvbGljeVtpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLnBvbGljeS5wdXNoKG5ldyBmaGlyLkZoaXJVcmkoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2FnZW50J10pIHsgdGhpcy5hZ2VudCA9IHNvdXJjZS5hZ2VudC5tYXAoKHgpID0+IG5ldyBmaGlyLlByb3ZlbmFuY2VBZ2VudCh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFnZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2VudGl0eSddKSB7IHRoaXMuZW50aXR5ID0gc291cmNlLmVudGl0eS5tYXAoKHgpID0+IG5ldyBmaGlyLlByb3ZlbmFuY2VFbnRpdHkoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5lbnRpdHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2lnbmF0dXJlJ10pIHsgdGhpcy5zaWduYXR1cmUgPSBzb3VyY2Uuc2lnbmF0dXJlLm1hcCgoeCkgPT4gbmV3IGZoaXIuU2lnbmF0dXJlKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2lnbmF0dXJlID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdQcm92ZW5hbmNlJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSQSgndGFyZ2V0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwZXJpb2QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3JlY29yZGVkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdyZWFzb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2FjdGl2aXR5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdsb2NhdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncG9saWN5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdhZ2VudCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnZW50aXR5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdzaWduYXR1cmUnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuIl19