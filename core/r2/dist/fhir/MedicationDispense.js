// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationDispenseStatusVsValidation } from '../fhirValueSets/MedicationDispenseStatusVsValidation.js';
/**
 * Indicates how the medication is to be used by the patient.
 */
export class MedicationDispenseDosageInstruction extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseDosageInstruction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
        if (source['additionalInstructions']) {
            this.additionalInstructions = new fhir.CodeableConcept(source.additionalInstructions, options);
        }
        if (source['timing']) {
            this.timing = new fhir.Timing(source.timing, options);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean'] !== undefined) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean }, options);
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept, options);
        }
        if (source['site']) {
            this.site = source.site;
        }
        else if (source['siteCodeableConcept']) {
            this.site = new fhir.CodeableConcept(source.siteCodeableConcept, options);
        }
        else if (source['siteReference']) {
            this.site = new fhir.Reference(source.siteReference, options);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route, options);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method, options);
        }
        if (source['dose']) {
            this.dose = source.dose;
        }
        else if (source['doseRange']) {
            this.dose = new fhir.Range(source.doseRange, options);
        }
        else if (source['doseQuantity']) {
            this.dose = new fhir.Quantity(source.doseQuantity, options);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio, options);
        }
        else if (source['rateRange']) {
            this.rate = new fhir.Range(source.rateRange, options);
        }
        if (source['maxDosePerPeriod']) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense.dosageInstruction';
        }
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOS('additionalInstructions', exp));
        iss.push(...this.vOS('timing', exp));
        iss.push(...this.vOS('asNeeded', exp));
        iss.push(...this.vOS('site', exp));
        iss.push(...this.vOS('route', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('dose', exp));
        iss.push(...this.vOS('rate', exp));
        iss.push(...this.vOS('maxDosePerPeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispenseDosageInstruction._fts_dataType = 'MedicationDispenseDosageInstruction';
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.dosageInstruction.asNeeded[x]
 */
MedicationDispenseDosageInstruction._fts_asNeededIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.dosageInstruction.site[x]
 */
MedicationDispenseDosageInstruction._fts_siteIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.dosageInstruction.dose[x]
 */
MedicationDispenseDosageInstruction._fts_doseIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.dosageInstruction.rate[x]
 */
MedicationDispenseDosageInstruction._fts_rateIsChoice = true;
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['responsibleParty']) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.responsibleParty = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense.substitution';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('responsibleParty', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispenseSubstitution._fts_dataType = 'MedicationDispenseSubstitution';
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
    /**
     * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationDispense';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        if (source['dispenser']) {
            this.dispenser = new fhir.Reference(source.dispenser, options);
        }
        if (source['authorizingPrescription']) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.authorizingPrescription = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['daysSupply']) {
            this.daysSupply = new fhir.Quantity(source.daysSupply, options);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept, options);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference, options);
        }
        else {
            this.medication = null;
        }
        if (source['whenPrepared'] !== undefined) {
            this.whenPrepared = new fhir.FhirDateTime({ value: source.whenPrepared }, options);
        }
        if (source['_whenPrepared']) {
            if (this.whenPrepared) {
                this.whenPrepared.addExtendedProperties(source._whenPrepared);
            }
            else {
                this.whenPrepared = new fhir.FhirDateTime(source._whenPrepared, options);
            }
        }
        if (source['whenHandedOver'] !== undefined) {
            this.whenHandedOver = new fhir.FhirDateTime({ value: source.whenHandedOver }, options);
        }
        if (source['_whenHandedOver']) {
            if (this.whenHandedOver) {
                this.whenHandedOver.addExtendedProperties(source._whenHandedOver);
            }
            else {
                this.whenHandedOver = new fhir.FhirDateTime(source._whenHandedOver, options);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination, options);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.receiver = [];
        }
        if (source['note'] !== undefined) {
            this.note = new fhir.FhirString({ value: source.note }, options);
        }
        if (source['_note']) {
            if (this.note) {
                this.note.addExtendedProperties(source._note);
            }
            else {
                this.note = new fhir.FhirString(source._note, options);
            }
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.MedicationDispenseDosageInstruction(x, options));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'MedicationDispenseStatus', MedicationDispenseStatusVsValidation, 'r'));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('dispenser', exp));
        iss.push(...this.vOA('authorizingPrescription', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('daysSupply', exp));
        iss.push(...this.vRS('medication', exp));
        iss.push(...this.vOS('whenPrepared', exp));
        iss.push(...this.vOS('whenHandedOver', exp));
        iss.push(...this.vOS('destination', exp));
        iss.push(...this.vOA('receiver', exp));
        iss.push(...this.vOS('note', exp));
        iss.push(...this.vOA('dosageInstruction', exp));
        iss.push(...this.vOS('substitution', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispense._fts_dataType = 'MedicationDispense';
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.medication[x]
 */
MedicationDispense._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,