// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ValueSet
import * as fhir from '../fhir.js';
// @ts-ignore
import { FilterOperatorVsValidation } from '../fhirValueSets/FilterOperatorVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class ValueSetContact extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.contact';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetContact._fts_dataType = 'ValueSetContact';
/**
 * Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
 */
export class ValueSetCodeSystemConceptDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetCodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.codeSystem.concept.designation';
        }
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vOS('use', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetCodeSystemConceptDesignation._fts_dataType = 'ValueSetCodeSystemConceptDesignation';
/**
 * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
 */
export class ValueSetCodeSystemConcept extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetCodeSystemConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        if (source['_abstract']) {
            if (this.abstract) {
                this.abstract.addExtendedProperties(source._abstract);
            }
            else {
                this.abstract = new fhir.FhirBoolean(source._abstract);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirString({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirString(source._definition);
            }
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ValueSetCodeSystemConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.ValueSetCodeSystemConcept(x));
        }
        else {
            this.concept = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.codeSystem.concept';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('abstract', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vOA('designation', exp));
        iss.push(...this.vOA('concept', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetCodeSystemConcept._fts_dataType = 'ValueSetCodeSystemConcept';
/**
 * A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
 */
export class ValueSetCodeSystem extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetCodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['caseSensitive']) {
            this.caseSensitive = new fhir.FhirBoolean({ value: source.caseSensitive });
        }
        if (source['_caseSensitive']) {
            if (this.caseSensitive) {
                this.caseSensitive.addExtendedProperties(source._caseSensitive);
            }
            else {
                this.caseSensitive = new fhir.FhirBoolean(source._caseSensitive);
            }
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.ValueSetCodeSystemConcept(x));
        }
        else {
            this.concept = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.codeSystem';
        }
        iss.push(...this.vRS('system', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('caseSensitive', exp));
        iss.push(...this.vRA('concept', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetCodeSystem._fts_dataType = 'ValueSetCodeSystem';
/**
 * Specifies a concept to be included or excluded.
 */
export class ValueSetComposeIncludeConcept extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ValueSetCodeSystemConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.compose.include.concept';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOA('designation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeConcept._fts_dataType = 'ValueSetComposeIncludeConcept';
/**
 * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
 */
export class ValueSetComposeIncludeFilter extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['property']) {
            this.property = new fhir.FhirCode({ value: source.property });
        }
        else {
            this.property = null;
        }
        if (source['_property']) {
            if (this.property) {
                this.property.addExtendedProperties(source._property);
            }
            else {
                this.property = new fhir.FhirCode(source._property);
            }
        }
        if (source['op']) {
            this.op = new fhir.FhirCode({ value: source.op });
        }
        else {
            this.op = null;
        }
        if (source['_op']) {
            if (this.op) {
                this.op.addExtendedProperties(source._op);
            }
            else {
                this.op = new fhir.FhirCode(source._op);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirCode({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirCode(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.compose.include.filter';
        }
        iss.push(...this.vRS('property', exp));
        iss.push(...this.vRSV('op', exp, 'FilterOperator', FilterOperatorVsValidation, 'r'));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeFilter._fts_dataType = 'ValueSetComposeIncludeFilter';
/**
 * Include one or more codes from a code system.
 */
export class ValueSetComposeInclude extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeInclude - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.ValueSetComposeIncludeConcept(x));
        }
        else {
            this.concept = [];
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.ValueSetComposeIncludeFilter(x));
        }
        else {
            this.filter = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.compose.include';
        }
        iss.push(...this.vRS('system', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOA('concept', exp));
        iss.push(...this.vOA('filter', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeInclude._fts_dataType = 'ValueSetComposeInclude';
/**
 * A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
 */
export class ValueSetCompose extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetCompose - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['import']) {
            this.import = source.import.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.import = [];
        }
        if (source['_import']) {
            source._import.forEach((x, i) => {
                if (this.import.length >= i) {
                    if (x) {
                        this.import[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.import.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['include']) {
            this.include = source.include.map((x) => new fhir.ValueSetComposeInclude(x));
        }
        else {
            this.include = [];
        }
        if (source['exclude']) {
            this.exclude = source.exclude.map((x) => new fhir.ValueSetComposeInclude(x));
        }
        else {
            this.exclude = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.compose';
        }
        iss.push(...this.vOA('import', exp));
        iss.push(...this.vOA('include', exp));
        iss.push(...this.vOA('exclude', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetCompose._fts_dataType = 'ValueSetCompose';
/**
 * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
 */
export class ValueSetExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.expansion.parameter';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansionParameter._fts_dataType = 'ValueSetExpansionParameter';
/**
 * Internal flag to properly serialize choice-type element ValueSet.expansion.parameter.value[x]
 */
ValueSetExpansionParameter._fts_valueIsChoice = true;
/**
 * The codes that are contained in the value set expansion.
 */
export class ValueSetExpansionContains extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansionContains - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        if (source['_abstract']) {
            if (this.abstract) {
                this.abstract.addExtendedProperties(source._abstract);
            }
            else {
                this.abstract = new fhir.FhirBoolean(source._abstract);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['contains']) {
            this.contains = source.contains.map((x) => new fhir.ValueSetExpansionContains(x));
        }
        else {
            this.contains = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.expansion.contains';
        }
        iss.push(...this.vOS('system', exp));
        iss.push(...this.vOS('abstract', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOA('contains', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansionContains._fts_dataType = 'ValueSetExpansionContains';
/**
 * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
 */
export class ValueSetExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.FhirUri({ value: source.identifier });
        }
        else {
            this.identifier = null;
        }
        if (source['_identifier']) {
            if (this.identifier) {
                this.identifier.addExtendedProperties(source._identifier);
            }
            else {
                this.identifier = new fhir.FhirUri(source._identifier);
            }
        }
        if (source['timestamp']) {
            this.timestamp = new fhir.FhirDateTime({ value: source.timestamp });
        }
        else {
            this.timestamp = null;
        }
        if (source['_timestamp']) {
            if (this.timestamp) {
                this.timestamp.addExtendedProperties(source._timestamp);
            }
            else {
                this.timestamp = new fhir.FhirDateTime(source._timestamp);
            }
        }
        if (source['total']) {
            this.total = new fhir.FhirInteger({ value: source.total });
        }
        if (source['_total']) {
            if (this.total) {
                this.total.addExtendedProperties(source._total);
            }
            else {
                this.total = new fhir.FhirInteger(source._total);
            }
        }
        if (source['offset']) {
            this.offset = new fhir.FhirInteger({ value: source.offset });
        }
        if (source['_offset']) {
            if (this.offset) {
                this.offset.addExtendedProperties(source._offset);
            }
            else {
                this.offset = new fhir.FhirInteger(source._offset);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.ValueSetExpansionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['contains']) {
            this.contains = source.contains.map((x) => new fhir.ValueSetExpansionContains(x));
        }
        else {
            this.contains = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet.expansion';
        }
        iss.push(...this.vRS('identifier', exp));
        iss.push(...this.vRS('timestamp', exp));
        iss.push(...this.vOS('total', exp));
        iss.push(...this.vOS('offset', exp));
        iss.push(...this.vOA('parameter', exp));
        iss.push(...this.vOA('contains', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansion._fts_dataType = 'ValueSetExpansion';
/**
 * A value set specifies a set of codes drawn from one or more code systems.
 */
export class ValueSet extends fhir.DomainResource {
    /**
     * Default constructor for ValueSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ValueSet';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ValueSetContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['lockedDate']) {
            this.lockedDate = new fhir.FhirDate({ value: source.lockedDate });
        }
        if (source['_lockedDate']) {
            if (this.lockedDate) {
                this.lockedDate.addExtendedProperties(source._lockedDate);
            }
            else {
                this.lockedDate = new fhir.FhirDate(source._lockedDate);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.useContext = [];
        }
        if (source['immutable']) {
            this.immutable = new fhir.FhirBoolean({ value: source.immutable });
        }
        if (source['_immutable']) {
            if (this.immutable) {
                this.immutable.addExtendedProperties(source._immutable);
            }
            else {
                this.immutable = new fhir.FhirBoolean(source._immutable);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirString({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright);
            }
        }
        if (source['extensible']) {
            this.extensible = new fhir.FhirBoolean({ value: source.extensible });
        }
        if (source['_extensible']) {
            if (this.extensible) {
                this.extensible.addExtendedProperties(source._extensible);
            }
            else {
                this.extensible = new fhir.FhirBoolean(source._extensible);
            }
        }
        if (source['codeSystem']) {
            this.codeSystem = new fhir.ValueSetCodeSystem(source.codeSystem);
        }
        if (source['compose']) {
            this.compose = new fhir.ValueSetCompose(source.compose);
        }
        if (source['expansion']) {
            this.expansion = new fhir.ValueSetExpansion(source.expansion);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ValueSet';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('lockedDate', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOS('immutable', exp));
        iss.push(...this.vOS('requirements', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('extensible', exp));
        iss.push(...this.vOS('codeSystem', exp));
        iss.push(...this.vOS('compose', exp));
        iss.push(...this.vOS('expansion', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSet._fts_dataType = 'ValueSet';
//# sourceMappingURL=data:application/json;base64,