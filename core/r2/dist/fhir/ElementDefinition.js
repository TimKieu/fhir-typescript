// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ElementDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResourceSlicingRulesVsValidation } from '../fhirValueSets/ResourceSlicingRulesVsValidation.js';
// @ts-ignore
import { DefinedTypesVsValidation } from '../fhirValueSets/DefinedTypesVsValidation.js';
// @ts-ignore
import { ResourceAggregationModeVsValidation } from '../fhirValueSets/ResourceAggregationModeVsValidation.js';
// @ts-ignore
import { ConstraintSeverityVsValidation } from '../fhirValueSets/ConstraintSeverityVsValidation.js';
// @ts-ignore
import { BindingStrengthVsValidation } from '../fhirValueSets/BindingStrengthVsValidation.js';
// @ts-ignore
import { PropertyRepresentationVsValidation } from '../fhirValueSets/PropertyRepresentationVsValidation.js';
/**
 * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
 */
export class ElementDefinitionSlicing extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['discriminator']) {
            this.discriminator = source.discriminator.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.discriminator = [];
        }
        if (source['_discriminator']) {
            source._discriminator.forEach((x, i) => {
                if (this.discriminator.length >= i) {
                    if (x) {
                        this.discriminator[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.discriminator.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['ordered']) {
            this.ordered = new fhir.FhirBoolean({ value: source.ordered });
        }
        if (source['_ordered']) {
            if (this.ordered) {
                this.ordered.addExtendedProperties(source._ordered);
            }
            else {
                this.ordered = new fhir.FhirBoolean(source._ordered);
            }
        }
        if (source['rules']) {
            this.rules = new fhir.FhirCode({ value: source.rules });
        }
        else {
            this.rules = null;
        }
        if (source['_rules']) {
            if (this.rules) {
                this.rules.addExtendedProperties(source._rules);
            }
            else {
                this.rules = new fhir.FhirCode(source._rules);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.slicing';
        }
        this.vOA('discriminator', exp);
        this.vOS('description', exp);
        this.vOS('ordered', exp);
        this.vRSV('rules', exp, 'ResourceSlicingRules', ResourceSlicingRulesVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionSlicing._fts_dataType = 'ElementDefinitionSlicing';
/**
 * Information about the base definition of the element, provided to make it unncessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
 */
export class ElementDefinitionBase extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBase - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['min']) {
            this.min = new fhir.FhirInteger({ value: source.min });
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirInteger(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.base';
        }
        this.vRS('path', exp);
        this.vRS('min', exp);
        this.vRS('max', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionBase._fts_dataType = 'ElementDefinitionBase';
/**
 * The data type or resource that the value of this element is permitted to be.
 */
export class ElementDefinitionType extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionType - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.profile = [];
        }
        if (source['_profile']) {
            source._profile.forEach((x, i) => {
                if (this.profile.length >= i) {
                    if (x) {
                        this.profile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.profile.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['aggregation']) {
            this.aggregation = source.aggregation.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.aggregation = [];
        }
        if (source['_aggregation']) {
            source._aggregation.forEach((x, i) => {
                if (this.aggregation.length >= i) {
                    if (x) {
                        this.aggregation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.aggregation.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.type';
        }
        this.vRSV('code', exp, 'DefinedTypes', DefinedTypesVsValidation, 'r');
        this.vOA('profile', exp);
        this.vOAV('aggregation', exp, 'ResourceAggregationMode', ResourceAggregationModeVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionType._fts_dataType = 'ElementDefinitionType';
/**
 * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
 */
export class ElementDefinitionConstraint extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionConstraint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['key']) {
            this.key = new fhir.FhirId({ value: source.key });
        }
        else {
            this.key = null;
        }
        if (source['_key']) {
            if (this.key) {
                this.key.addExtendedProperties(source._key);
            }
            else {
                this.key = new fhir.FhirId(source._key);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['human']) {
            this.human = new fhir.FhirString({ value: source.human });
        }
        else {
            this.human = null;
        }
        if (source['_human']) {
            if (this.human) {
                this.human.addExtendedProperties(source._human);
            }
            else {
                this.human = new fhir.FhirString(source._human);
            }
        }
        if (source['xpath']) {
            this.xpath = new fhir.FhirString({ value: source.xpath });
        }
        else {
            this.xpath = null;
        }
        if (source['_xpath']) {
            if (this.xpath) {
                this.xpath.addExtendedProperties(source._xpath);
            }
            else {
                this.xpath = new fhir.FhirString(source._xpath);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.constraint';
        }
        this.vRS('key', exp);
        this.vOS('requirements', exp);
        this.vRSV('severity', exp, 'ConstraintSeverity', ConstraintSeverityVsValidation, 'r');
        this.vRS('human', exp);
        this.vRS('xpath', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionConstraint._fts_dataType = 'ElementDefinitionConstraint';
/**
 * Binds to a value set if this element is coded (code, Coding, CodeableConcept).
 */
export class ElementDefinitionBinding extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['strength']) {
            this.strength = new fhir.FhirCode({ value: source.strength });
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            if (this.strength) {
                this.strength.addExtendedProperties(source._strength);
            }
            else {
                this.strength = new fhir.FhirCode(source._strength);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet;
        }
        else if (source['valueSetUri']) {
            this.valueSet = new fhir.FhirUri({ value: source.valueSetUri });
        }
        else if (source['valueSetReference']) {
            this.valueSet = new fhir.Reference(source.valueSetReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.binding';
        }
        this.vRSV('strength', exp, 'BindingStrength', BindingStrengthVsValidation, 'r');
        this.vOS('description', exp);
        this.vOS('valueSet', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionBinding._fts_dataType = 'ElementDefinitionBinding';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.binding.valueSet[x]
 */
ElementDefinitionBinding._fts_valueSetIsChoice = true;
/**
 * Provides guidance to implementers familiar with or converting content from other specifications.
 */
export class ElementDefinitionMapping extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity);
            }
        }
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['map']) {
            this.map = new fhir.FhirString({ value: source.map });
        }
        else {
            this.map = null;
        }
        if (source['_map']) {
            if (this.map) {
                this.map.addExtendedProperties(source._map);
            }
            else {
                this.map = new fhir.FhirString(source._map);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition.mapping';
        }
        this.vRS('identity', exp);
        this.vOS('language', exp);
        this.vRS('map', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionMapping._fts_dataType = 'ElementDefinitionMapping';
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
export class ElementDefinition extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.representation = [];
        }
        if (source['_representation']) {
            source._representation.forEach((x, i) => {
                if (this.representation.length >= i) {
                    if (x) {
                        this.representation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.representation.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['slicing']) {
            this.slicing = new fhir.ElementDefinitionSlicing(source.slicing);
        }
        if (source['short']) {
            this.short = new fhir.FhirString({ value: source.short });
        }
        if (source['_short']) {
            if (this.short) {
                this.short.addExtendedProperties(source._short);
            }
            else {
                this.short = new fhir.FhirString(source._short);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirMarkdown({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirMarkdown(source._definition);
            }
        }
        if (source['comments']) {
            this.comments = new fhir.FhirMarkdown({ value: source.comments });
        }
        if (source['_comments']) {
            if (this.comments) {
                this.comments.addExtendedProperties(source._comments);
            }
            else {
                this.comments = new fhir.FhirMarkdown(source._comments);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirMarkdown({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirMarkdown(source._requirements);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['min']) {
            this.min = new fhir.FhirInteger({ value: source.min });
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirInteger(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
        if (source['base']) {
            this.base = new fhir.ElementDefinitionBase(source.base);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.ElementDefinitionType(x));
        }
        else {
            this.type = [];
        }
        if (source['nameReference']) {
            this.nameReference = new fhir.FhirString({ value: source.nameReference });
        }
        if (source['_nameReference']) {
            if (this.nameReference) {
                this.nameReference.addExtendedProperties(source._nameReference);
            }
            else {
                this.nameReference = new fhir.FhirString(source._nameReference);
            }
        }
        if (source['defaultValue']) {
            this.defaultValue = source.defaultValue;
        }
        else if (source['defaultValueBoolean']) {
            this.defaultValue = new fhir.FhirBoolean({ value: source.defaultValueBoolean });
        }
        else if (source['defaultValueInteger']) {
            this.defaultValue = new fhir.FhirInteger({ value: source.defaultValueInteger });
        }
        else if (source['defaultValueDecimal']) {
            this.defaultValue = new fhir.FhirDecimal({ value: source.defaultValueDecimal });
        }
        else if (source['defaultValueBase64Binary']) {
            this.defaultValue = new fhir.FhirBase64Binary({ value: source.defaultValueBase64Binary });
        }
        else if (source['defaultValueInstant']) {
            this.defaultValue = new fhir.FhirInstant({ value: source.defaultValueInstant });
        }
        else if (source['defaultValueString']) {
            this.defaultValue = new fhir.FhirString({ value: source.defaultValueString });
        }
        else if (source['defaultValueUri']) {
            this.defaultValue = new fhir.FhirUri({ value: source.defaultValueUri });
        }
        else if (source['defaultValueDate']) {
            this.defaultValue = new fhir.FhirDate({ value: source.defaultValueDate });
        }
        else if (source['defaultValueDateTime']) {
            this.defaultValue = new fhir.FhirDateTime({ value: source.defaultValueDateTime });
        }
        else if (source['defaultValueTime']) {
            this.defaultValue = new fhir.FhirTime({ value: source.defaultValueTime });
        }
        else if (source['defaultValueCode']) {
            this.defaultValue = new fhir.FhirCode({ value: source.defaultValueCode });
        }
        else if (source['defaultValueOid']) {
            this.defaultValue = new fhir.FhirOid({ value: source.defaultValueOid });
        }
        else if (source['defaultValueId']) {
            this.defaultValue = new fhir.FhirId({ value: source.defaultValueId });
        }
        else if (source['defaultValueUnsignedInt']) {
            this.defaultValue = new fhir.FhirUnsignedInt({ value: source.defaultValueUnsignedInt });
        }
        else if (source['defaultValuePositiveInt']) {
            this.defaultValue = new fhir.FhirPositiveInt({ value: source.defaultValuePositiveInt });
        }
        else if (source['defaultValueMarkdown']) {
            this.defaultValue = new fhir.FhirMarkdown({ value: source.defaultValueMarkdown });
        }
        else if (source['defaultValueAnnotation']) {
            this.defaultValue = new fhir.Annotation(source.defaultValueAnnotation);
        }
        else if (source['defaultValueAttachment']) {
            this.defaultValue = new fhir.Attachment(source.defaultValueAttachment);
        }
        else if (source['defaultValueIdentifier']) {
            this.defaultValue = new fhir.Identifier(source.defaultValueIdentifier);
        }
        else if (source['defaultValueCodeableConcept']) {
            this.defaultValue = new fhir.CodeableConcept(source.defaultValueCodeableConcept);
        }
        else if (source['defaultValueCoding']) {
            this.defaultValue = new fhir.Coding(source.defaultValueCoding);
        }
        else if (source['defaultValueQuantity']) {
            this.defaultValue = new fhir.Quantity(source.defaultValueQuantity);
        }
        else if (source['defaultValueRange']) {
            this.defaultValue = new fhir.Range(source.defaultValueRange);
        }
        else if (source['defaultValuePeriod']) {
            this.defaultValue = new fhir.Period(source.defaultValuePeriod);
        }
        else if (source['defaultValueRatio']) {
            this.defaultValue = new fhir.Ratio(source.defaultValueRatio);
        }
        else if (source['defaultValueSampledData']) {
            this.defaultValue = new fhir.SampledData(source.defaultValueSampledData);
        }
        else if (source['defaultValueSignature']) {
            this.defaultValue = new fhir.Signature(source.defaultValueSignature);
        }
        else if (source['defaultValueHumanName']) {
            this.defaultValue = new fhir.HumanName(source.defaultValueHumanName);
        }
        else if (source['defaultValueAddress']) {
            this.defaultValue = new fhir.Address(source.defaultValueAddress);
        }
        else if (source['defaultValueContactPoint']) {
            this.defaultValue = new fhir.ContactPoint(source.defaultValueContactPoint);
        }
        else if (source['defaultValueTiming']) {
            this.defaultValue = new fhir.Timing(source.defaultValueTiming);
        }
        else if (source['defaultValueReference']) {
            this.defaultValue = new fhir.Reference(source.defaultValueReference);
        }
        else if (source['defaultValueMeta']) {
            this.defaultValue = new fhir.Meta(source.defaultValueMeta);
        }
        if (source['meaningWhenMissing']) {
            this.meaningWhenMissing = new fhir.FhirMarkdown({ value: source.meaningWhenMissing });
        }
        if (source['_meaningWhenMissing']) {
            if (this.meaningWhenMissing) {
                this.meaningWhenMissing.addExtendedProperties(source._meaningWhenMissing);
            }
            else {
                this.meaningWhenMissing = new fhir.FhirMarkdown(source._meaningWhenMissing);
            }
        }
        if (source['fixed']) {
            this.fixed = source.fixed;
        }
        else if (source['fixedBoolean']) {
            this.fixed = new fhir.FhirBoolean({ value: source.fixedBoolean });
        }
        else if (source['fixedInteger']) {
            this.fixed = new fhir.FhirInteger({ value: source.fixedInteger });
        }
        else if (source['fixedDecimal']) {
            this.fixed = new fhir.FhirDecimal({ value: source.fixedDecimal });
        }
        else if (source['fixedBase64Binary']) {
            this.fixed = new fhir.FhirBase64Binary({ value: source.fixedBase64Binary });
        }
        else if (source['fixedInstant']) {
            this.fixed = new fhir.FhirInstant({ value: source.fixedInstant });
        }
        else if (source['fixedString']) {
            this.fixed = new fhir.FhirString({ value: source.fixedString });
        }
        else if (source['fixedUri']) {
            this.fixed = new fhir.FhirUri({ value: source.fixedUri });
        }
        else if (source['fixedDate']) {
            this.fixed = new fhir.FhirDate({ value: source.fixedDate });
        }
        else if (source['fixedDateTime']) {
            this.fixed = new fhir.FhirDateTime({ value: source.fixedDateTime });
        }
        else if (source['fixedTime']) {
            this.fixed = new fhir.FhirTime({ value: source.fixedTime });
        }
        else if (source['fixedCode']) {
            this.fixed = new fhir.FhirCode({ value: source.fixedCode });
        }
        else if (source['fixedOid']) {
            this.fixed = new fhir.FhirOid({ value: source.fixedOid });
        }
        else if (source['fixedId']) {
            this.fixed = new fhir.FhirId({ value: source.fixedId });
        }
        else if (source['fixedUnsignedInt']) {
            this.fixed = new fhir.FhirUnsignedInt({ value: source.fixedUnsignedInt });
        }
        else if (source['fixedPositiveInt']) {
            this.fixed = new fhir.FhirPositiveInt({ value: source.fixedPositiveInt });
        }
        else if (source['fixedMarkdown']) {
            this.fixed = new fhir.FhirMarkdown({ value: source.fixedMarkdown });
        }
        else if (source['fixedAnnotation']) {
            this.fixed = new fhir.Annotation(source.fixedAnnotation);
        }
        else if (source['fixedAttachment']) {
            this.fixed = new fhir.Attachment(source.fixedAttachment);
        }
        else if (source['fixedIdentifier']) {
            this.fixed = new fhir.Identifier(source.fixedIdentifier);
        }
        else if (source['fixedCodeableConcept']) {
            this.fixed = new fhir.CodeableConcept(source.fixedCodeableConcept);
        }
        else if (source['fixedCoding']) {
            this.fixed = new fhir.Coding(source.fixedCoding);
        }
        else if (source['fixedQuantity']) {
            this.fixed = new fhir.Quantity(source.fixedQuantity);
        }
        else if (source['fixedRange']) {
            this.fixed = new fhir.Range(source.fixedRange);
        }
        else if (source['fixedPeriod']) {
            this.fixed = new fhir.Period(source.fixedPeriod);
        }
        else if (source['fixedRatio']) {
            this.fixed = new fhir.Ratio(source.fixedRatio);
        }
        else if (source['fixedSampledData']) {
            this.fixed = new fhir.SampledData(source.fixedSampledData);
        }
        else if (source['fixedSignature']) {
            this.fixed = new fhir.Signature(source.fixedSignature);
        }
        else if (source['fixedHumanName']) {
            this.fixed = new fhir.HumanName(source.fixedHumanName);
        }
        else if (source['fixedAddress']) {
            this.fixed = new fhir.Address(source.fixedAddress);
        }
        else if (source['fixedContactPoint']) {
            this.fixed = new fhir.ContactPoint(source.fixedContactPoint);
        }
        else if (source['fixedTiming']) {
            this.fixed = new fhir.Timing(source.fixedTiming);
        }
        else if (source['fixedReference']) {
            this.fixed = new fhir.Reference(source.fixedReference);
        }
        else if (source['fixedMeta']) {
            this.fixed = new fhir.Meta(source.fixedMeta);
        }
        if (source['pattern']) {
            this.pattern = source.pattern;
        }
        else if (source['patternBoolean']) {
            this.pattern = new fhir.FhirBoolean({ value: source.patternBoolean });
        }
        else if (source['patternInteger']) {
            this.pattern = new fhir.FhirInteger({ value: source.patternInteger });
        }
        else if (source['patternDecimal']) {
            this.pattern = new fhir.FhirDecimal({ value: source.patternDecimal });
        }
        else if (source['patternBase64Binary']) {
            this.pattern = new fhir.FhirBase64Binary({ value: source.patternBase64Binary });
        }
        else if (source['patternInstant']) {
            this.pattern = new fhir.FhirInstant({ value: source.patternInstant });
        }
        else if (source['patternString']) {
            this.pattern = new fhir.FhirString({ value: source.patternString });
        }
        else if (source['patternUri']) {
            this.pattern = new fhir.FhirUri({ value: source.patternUri });
        }
        else if (source['patternDate']) {
            this.pattern = new fhir.FhirDate({ value: source.patternDate });
        }
        else if (source['patternDateTime']) {
            this.pattern = new fhir.FhirDateTime({ value: source.patternDateTime });
        }
        else if (source['patternTime']) {
            this.pattern = new fhir.FhirTime({ value: source.patternTime });
        }
        else if (source['patternCode']) {
            this.pattern = new fhir.FhirCode({ value: source.patternCode });
        }
        else if (source['patternOid']) {
            this.pattern = new fhir.FhirOid({ value: source.patternOid });
        }
        else if (source['patternId']) {
            this.pattern = new fhir.FhirId({ value: source.patternId });
        }
        else if (source['patternUnsignedInt']) {
            this.pattern = new fhir.FhirUnsignedInt({ value: source.patternUnsignedInt });
        }
        else if (source['patternPositiveInt']) {
            this.pattern = new fhir.FhirPositiveInt({ value: source.patternPositiveInt });
        }
        else if (source['patternMarkdown']) {
            this.pattern = new fhir.FhirMarkdown({ value: source.patternMarkdown });
        }
        else if (source['patternAnnotation']) {
            this.pattern = new fhir.Annotation(source.patternAnnotation);
        }
        else if (source['patternAttachment']) {
            this.pattern = new fhir.Attachment(source.patternAttachment);
        }
        else if (source['patternIdentifier']) {
            this.pattern = new fhir.Identifier(source.patternIdentifier);
        }
        else if (source['patternCodeableConcept']) {
            this.pattern = new fhir.CodeableConcept(source.patternCodeableConcept);
        }
        else if (source['patternCoding']) {
            this.pattern = new fhir.Coding(source.patternCoding);
        }
        else if (source['patternQuantity']) {
            this.pattern = new fhir.Quantity(source.patternQuantity);
        }
        else if (source['patternRange']) {
            this.pattern = new fhir.Range(source.patternRange);
        }
        else if (source['patternPeriod']) {
            this.pattern = new fhir.Period(source.patternPeriod);
        }
        else if (source['patternRatio']) {
            this.pattern = new fhir.Ratio(source.patternRatio);
        }
        else if (source['patternSampledData']) {
            this.pattern = new fhir.SampledData(source.patternSampledData);
        }
        else if (source['patternSignature']) {
            this.pattern = new fhir.Signature(source.patternSignature);
        }
        else if (source['patternHumanName']) {
            this.pattern = new fhir.HumanName(source.patternHumanName);
        }
        else if (source['patternAddress']) {
            this.pattern = new fhir.Address(source.patternAddress);
        }
        else if (source['patternContactPoint']) {
            this.pattern = new fhir.ContactPoint(source.patternContactPoint);
        }
        else if (source['patternTiming']) {
            this.pattern = new fhir.Timing(source.patternTiming);
        }
        else if (source['patternReference']) {
            this.pattern = new fhir.Reference(source.patternReference);
        }
        else if (source['patternMeta']) {
            this.pattern = new fhir.Meta(source.patternMeta);
        }
        if (source['example']) {
            this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            this.example = new fhir.FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleInteger']) {
            this.example = new fhir.FhirInteger({ value: source.exampleInteger });
        }
        else if (source['exampleDecimal']) {
            this.example = new fhir.FhirDecimal({ value: source.exampleDecimal });
        }
        else if (source['exampleBase64Binary']) {
            this.example = new fhir.FhirBase64Binary({ value: source.exampleBase64Binary });
        }
        else if (source['exampleInstant']) {
            this.example = new fhir.FhirInstant({ value: source.exampleInstant });
        }
        else if (source['exampleString']) {
            this.example = new fhir.FhirString({ value: source.exampleString });
        }
        else if (source['exampleUri']) {
            this.example = new fhir.FhirUri({ value: source.exampleUri });
        }
        else if (source['exampleDate']) {
            this.example = new fhir.FhirDate({ value: source.exampleDate });
        }
        else if (source['exampleDateTime']) {
            this.example = new fhir.FhirDateTime({ value: source.exampleDateTime });
        }
        else if (source['exampleTime']) {
            this.example = new fhir.FhirTime({ value: source.exampleTime });
        }
        else if (source['exampleCode']) {
            this.example = new fhir.FhirCode({ value: source.exampleCode });
        }
        else if (source['exampleOid']) {
            this.example = new fhir.FhirOid({ value: source.exampleOid });
        }
        else if (source['exampleId']) {
            this.example = new fhir.FhirId({ value: source.exampleId });
        }
        else if (source['exampleUnsignedInt']) {
            this.example = new fhir.FhirUnsignedInt({ value: source.exampleUnsignedInt });
        }
        else if (source['examplePositiveInt']) {
            this.example = new fhir.FhirPositiveInt({ value: source.examplePositiveInt });
        }
        else if (source['exampleMarkdown']) {
            this.example = new fhir.FhirMarkdown({ value: source.exampleMarkdown });
        }
        else if (source['exampleAnnotation']) {
            this.example = new fhir.Annotation(source.exampleAnnotation);
        }
        else if (source['exampleAttachment']) {
            this.example = new fhir.Attachment(source.exampleAttachment);
        }
        else if (source['exampleIdentifier']) {
            this.example = new fhir.Identifier(source.exampleIdentifier);
        }
        else if (source['exampleCodeableConcept']) {
            this.example = new fhir.CodeableConcept(source.exampleCodeableConcept);
        }
        else if (source['exampleCoding']) {
            this.example = new fhir.Coding(source.exampleCoding);
        }
        else if (source['exampleQuantity']) {
            this.example = new fhir.Quantity(source.exampleQuantity);
        }
        else if (source['exampleRange']) {
            this.example = new fhir.Range(source.exampleRange);
        }
        else if (source['examplePeriod']) {
            this.example = new fhir.Period(source.examplePeriod);
        }
        else if (source['exampleRatio']) {
            this.example = new fhir.Ratio(source.exampleRatio);
        }
        else if (source['exampleSampledData']) {
            this.example = new fhir.SampledData(source.exampleSampledData);
        }
        else if (source['exampleSignature']) {
            this.example = new fhir.Signature(source.exampleSignature);
        }
        else if (source['exampleHumanName']) {
            this.example = new fhir.HumanName(source.exampleHumanName);
        }
        else if (source['exampleAddress']) {
            this.example = new fhir.Address(source.exampleAddress);
        }
        else if (source['exampleContactPoint']) {
            this.example = new fhir.ContactPoint(source.exampleContactPoint);
        }
        else if (source['exampleTiming']) {
            this.example = new fhir.Timing(source.exampleTiming);
        }
        else if (source['exampleReference']) {
            this.example = new fhir.Reference(source.exampleReference);
        }
        else if (source['exampleMeta']) {
            this.example = new fhir.Meta(source.exampleMeta);
        }
        if (source['minValue']) {
            this.minValue = source.minValue;
        }
        else if (source['minValueBoolean']) {
            this.minValue = new fhir.FhirBoolean({ value: source.minValueBoolean });
        }
        else if (source['minValueInteger']) {
            this.minValue = new fhir.FhirInteger({ value: source.minValueInteger });
        }
        else if (source['minValueDecimal']) {
            this.minValue = new fhir.FhirDecimal({ value: source.minValueDecimal });
        }
        else if (source['minValueBase64Binary']) {
            this.minValue = new fhir.FhirBase64Binary({ value: source.minValueBase64Binary });
        }
        else if (source['minValueInstant']) {
            this.minValue = new fhir.FhirInstant({ value: source.minValueInstant });
        }
        else if (source['minValueString']) {
            this.minValue = new fhir.FhirString({ value: source.minValueString });
        }
        else if (source['minValueUri']) {
            this.minValue = new fhir.FhirUri({ value: source.minValueUri });
        }
        else if (source['minValueDate']) {
            this.minValue = new fhir.FhirDate({ value: source.minValueDate });
        }
        else if (source['minValueDateTime']) {
            this.minValue = new fhir.FhirDateTime({ value: source.minValueDateTime });
        }
        else if (source['minValueTime']) {
            this.minValue = new fhir.FhirTime({ value: source.minValueTime });
        }
        else if (source['minValueCode']) {
            this.minValue = new fhir.FhirCode({ value: source.minValueCode });
        }
        else if (source['minValueOid']) {
            this.minValue = new fhir.FhirOid({ value: source.minValueOid });
        }
        else if (source['minValueId']) {
            this.minValue = new fhir.FhirId({ value: source.minValueId });
        }
        else if (source['minValueUnsignedInt']) {
            this.minValue = new fhir.FhirUnsignedInt({ value: source.minValueUnsignedInt });
        }
        else if (source['minValuePositiveInt']) {
            this.minValue = new fhir.FhirPositiveInt({ value: source.minValuePositiveInt });
        }
        else if (source['minValueMarkdown']) {
            this.minValue = new fhir.FhirMarkdown({ value: source.minValueMarkdown });
        }
        else if (source['minValueAnnotation']) {
            this.minValue = new fhir.Annotation(source.minValueAnnotation);
        }
        else if (source['minValueAttachment']) {
            this.minValue = new fhir.Attachment(source.minValueAttachment);
        }
        else if (source['minValueIdentifier']) {
            this.minValue = new fhir.Identifier(source.minValueIdentifier);
        }
        else if (source['minValueCodeableConcept']) {
            this.minValue = new fhir.CodeableConcept(source.minValueCodeableConcept);
        }
        else if (source['minValueCoding']) {
            this.minValue = new fhir.Coding(source.minValueCoding);
        }
        else if (source['minValueQuantity']) {
            this.minValue = new fhir.Quantity(source.minValueQuantity);
        }
        else if (source['minValueRange']) {
            this.minValue = new fhir.Range(source.minValueRange);
        }
        else if (source['minValuePeriod']) {
            this.minValue = new fhir.Period(source.minValuePeriod);
        }
        else if (source['minValueRatio']) {
            this.minValue = new fhir.Ratio(source.minValueRatio);
        }
        else if (source['minValueSampledData']) {
            this.minValue = new fhir.SampledData(source.minValueSampledData);
        }
        else if (source['minValueSignature']) {
            this.minValue = new fhir.Signature(source.minValueSignature);
        }
        else if (source['minValueHumanName']) {
            this.minValue = new fhir.HumanName(source.minValueHumanName);
        }
        else if (source['minValueAddress']) {
            this.minValue = new fhir.Address(source.minValueAddress);
        }
        else if (source['minValueContactPoint']) {
            this.minValue = new fhir.ContactPoint(source.minValueContactPoint);
        }
        else if (source['minValueTiming']) {
            this.minValue = new fhir.Timing(source.minValueTiming);
        }
        else if (source['minValueReference']) {
            this.minValue = new fhir.Reference(source.minValueReference);
        }
        else if (source['minValueMeta']) {
            this.minValue = new fhir.Meta(source.minValueMeta);
        }
        if (source['maxValue']) {
            this.maxValue = source.maxValue;
        }
        else if (source['maxValueBoolean']) {
            this.maxValue = new fhir.FhirBoolean({ value: source.maxValueBoolean });
        }
        else if (source['maxValueInteger']) {
            this.maxValue = new fhir.FhirInteger({ value: source.maxValueInteger });
        }
        else if (source['maxValueDecimal']) {
            this.maxValue = new fhir.FhirDecimal({ value: source.maxValueDecimal });
        }
        else if (source['maxValueBase64Binary']) {
            this.maxValue = new fhir.FhirBase64Binary({ value: source.maxValueBase64Binary });
        }
        else if (source['maxValueInstant']) {
            this.maxValue = new fhir.FhirInstant({ value: source.maxValueInstant });
        }
        else if (source['maxValueString']) {
            this.maxValue = new fhir.FhirString({ value: source.maxValueString });
        }
        else if (source['maxValueUri']) {
            this.maxValue = new fhir.FhirUri({ value: source.maxValueUri });
        }
        else if (source['maxValueDate']) {
            this.maxValue = new fhir.FhirDate({ value: source.maxValueDate });
        }
        else if (source['maxValueDateTime']) {
            this.maxValue = new fhir.FhirDateTime({ value: source.maxValueDateTime });
        }
        else if (source['maxValueTime']) {
            this.maxValue = new fhir.FhirTime({ value: source.maxValueTime });
        }
        else if (source['maxValueCode']) {
            this.maxValue = new fhir.FhirCode({ value: source.maxValueCode });
        }
        else if (source['maxValueOid']) {
            this.maxValue = new fhir.FhirOid({ value: source.maxValueOid });
        }
        else if (source['maxValueId']) {
            this.maxValue = new fhir.FhirId({ value: source.maxValueId });
        }
        else if (source['maxValueUnsignedInt']) {
            this.maxValue = new fhir.FhirUnsignedInt({ value: source.maxValueUnsignedInt });
        }
        else if (source['maxValuePositiveInt']) {
            this.maxValue = new fhir.FhirPositiveInt({ value: source.maxValuePositiveInt });
        }
        else if (source['maxValueMarkdown']) {
            this.maxValue = new fhir.FhirMarkdown({ value: source.maxValueMarkdown });
        }
        else if (source['maxValueAnnotation']) {
            this.maxValue = new fhir.Annotation(source.maxValueAnnotation);
        }
        else if (source['maxValueAttachment']) {
            this.maxValue = new fhir.Attachment(source.maxValueAttachment);
        }
        else if (source['maxValueIdentifier']) {
            this.maxValue = new fhir.Identifier(source.maxValueIdentifier);
        }
        else if (source['maxValueCodeableConcept']) {
            this.maxValue = new fhir.CodeableConcept(source.maxValueCodeableConcept);
        }
        else if (source['maxValueCoding']) {
            this.maxValue = new fhir.Coding(source.maxValueCoding);
        }
        else if (source['maxValueQuantity']) {
            this.maxValue = new fhir.Quantity(source.maxValueQuantity);
        }
        else if (source['maxValueRange']) {
            this.maxValue = new fhir.Range(source.maxValueRange);
        }
        else if (source['maxValuePeriod']) {
            this.maxValue = new fhir.Period(source.maxValuePeriod);
        }
        else if (source['maxValueRatio']) {
            this.maxValue = new fhir.Ratio(source.maxValueRatio);
        }
        else if (source['maxValueSampledData']) {
            this.maxValue = new fhir.SampledData(source.maxValueSampledData);
        }
        else if (source['maxValueSignature']) {
            this.maxValue = new fhir.Signature(source.maxValueSignature);
        }
        else if (source['maxValueHumanName']) {
            this.maxValue = new fhir.HumanName(source.maxValueHumanName);
        }
        else if (source['maxValueAddress']) {
            this.maxValue = new fhir.Address(source.maxValueAddress);
        }
        else if (source['maxValueContactPoint']) {
            this.maxValue = new fhir.ContactPoint(source.maxValueContactPoint);
        }
        else if (source['maxValueTiming']) {
            this.maxValue = new fhir.Timing(source.maxValueTiming);
        }
        else if (source['maxValueReference']) {
            this.maxValue = new fhir.Reference(source.maxValueReference);
        }
        else if (source['maxValueMeta']) {
            this.maxValue = new fhir.Meta(source.maxValueMeta);
        }
        if (source['maxLength']) {
            this.maxLength = new fhir.FhirInteger({ value: source.maxLength });
        }
        if (source['_maxLength']) {
            if (this.maxLength) {
                this.maxLength.addExtendedProperties(source._maxLength);
            }
            else {
                this.maxLength = new fhir.FhirInteger(source._maxLength);
            }
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.FhirId({ value: x }));
        }
        else {
            this.condition = [];
        }
        if (source['_condition']) {
            source._condition.forEach((x, i) => {
                if (this.condition.length >= i) {
                    if (x) {
                        this.condition[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.condition.push(new fhir.FhirId(x));
                    }
                }
            });
        }
        if (source['constraint']) {
            this.constraint = source.constraint.map((x) => new fhir.ElementDefinitionConstraint(x));
        }
        else {
            this.constraint = [];
        }
        if (source['mustSupport']) {
            this.mustSupport = new fhir.FhirBoolean({ value: source.mustSupport });
        }
        if (source['_mustSupport']) {
            if (this.mustSupport) {
                this.mustSupport.addExtendedProperties(source._mustSupport);
            }
            else {
                this.mustSupport = new fhir.FhirBoolean(source._mustSupport);
            }
        }
        if (source['isModifier']) {
            this.isModifier = new fhir.FhirBoolean({ value: source.isModifier });
        }
        if (source['_isModifier']) {
            if (this.isModifier) {
                this.isModifier.addExtendedProperties(source._isModifier);
            }
            else {
                this.isModifier = new fhir.FhirBoolean(source._isModifier);
            }
        }
        if (source['isSummary']) {
            this.isSummary = new fhir.FhirBoolean({ value: source.isSummary });
        }
        if (source['_isSummary']) {
            if (this.isSummary) {
                this.isSummary.addExtendedProperties(source._isSummary);
            }
            else {
                this.isSummary = new fhir.FhirBoolean(source._isSummary);
            }
        }
        if (source['binding']) {
            this.binding = new fhir.ElementDefinitionBinding(source.binding);
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.ElementDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ElementDefinition';
        }
        this.vRS('path', exp);
        this.vOAV('representation', exp, 'PropertyRepresentation', PropertyRepresentationVsValidation, 'r');
        this.vOS('name', exp);
        this.vOS('label', exp);
        this.vOA('code', exp);
        this.vOS('slicing', exp);
        this.vOS('short', exp);
        this.vOS('definition', exp);
        this.vOS('comments', exp);
        this.vOS('requirements', exp);
        this.vOA('alias', exp);
        this.vOS('min', exp);
        this.vOS('max', exp);
        this.vOS('base', exp);
        this.vOA('type', exp);
        this.vOS('nameReference', exp);
        this.vOS('defaultValue', exp);
        this.vOS('meaningWhenMissing', exp);
        this.vOS('fixed', exp);
        this.vOS('pattern', exp);
        this.vOS('example', exp);
        this.vOS('minValue', exp);
        this.vOS('maxValue', exp);
        this.vOS('maxLength', exp);
        this.vOA('condition', exp);
        this.vOA('constraint', exp);
        this.vOS('mustSupport', exp);
        this.vOS('isModifier', exp);
        this.vOS('isSummary', exp);
        this.vOS('binding', exp);
        this.vOA('mapping', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinition._fts_dataType = 'ElementDefinition';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.defaultValue[x]
 */
ElementDefinition._fts_defaultValueIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.fixed[x]
 */
ElementDefinition._fts_fixedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.pattern[x]
 */
ElementDefinition._fts_patternIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.example[x]
 */
ElementDefinition._fts_exampleIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.minValue[x]
 */
ElementDefinition._fts_minValueIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.maxValue[x]
 */
ElementDefinition._fts_maxValueIsChoice = true;
//# sourceMappingURL=data:application/json;base64,