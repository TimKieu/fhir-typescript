// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestScript
import * as fhir from '../fhir.js';
// @ts-ignore
import { DefinedTypesVsValidation } from '../fhirValueSets/DefinedTypesVsValidation.js';
// @ts-ignore
import { ContentTypeVsValidation } from '../fhirValueSets/ContentTypeVsValidation.js';
// @ts-ignore
import { AssertDirectionVsValidation } from '../fhirValueSets/AssertDirectionVsValidation.js';
// @ts-ignore
import { AssertOperatorVsValidation } from '../fhirValueSets/AssertOperatorVsValidation.js';
// @ts-ignore
import { AssertResponseCodeTypesVsValidation } from '../fhirValueSets/AssertResponseCodeTypesVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class TestScriptContact extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.contact';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptContact._fts_dataType = 'TestScriptContact';
/**
 * A link to the FHIR specification that this test is covering.
 */
export class TestScriptMetadataLink extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.metadata.link';
        }
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOS('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataLink._fts_dataType = 'TestScriptMetadataLink';
/**
 * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
 */
export class TestScriptMetadataCapability extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['required']) {
            this.required = new fhir.FhirBoolean({ value: source.required });
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required);
            }
        }
        if (source['validated']) {
            this.validated = new fhir.FhirBoolean({ value: source.validated });
        }
        if (source['_validated']) {
            if (this.validated) {
                this.validated.addExtendedProperties(source._validated);
            }
            else {
                this.validated = new fhir.FhirBoolean(source._validated);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['_destination']) {
            if (this.destination) {
                this.destination.addExtendedProperties(source._destination);
            }
            else {
                this.destination = new fhir.FhirInteger(source._destination);
            }
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.link = [];
        }
        if (source['_link']) {
            source._link.forEach((x, i) => {
                if (this.link.length >= i) {
                    if (x) {
                        this.link[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.link.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['conformance']) {
            this.conformance = new fhir.Reference(source.conformance);
        }
        else {
            this.conformance = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.metadata.capability';
        }
        iss.push(...this.vOS('required', exp));
        iss.push(...this.vOS('validated', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('destination', exp));
        iss.push(...this.vOA('link', exp));
        iss.push(...this.vRS('conformance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataCapability._fts_dataType = 'TestScriptMetadataCapability';
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export class TestScriptMetadata extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadata - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.TestScriptMetadataLink(x));
        }
        else {
            this.link = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.TestScriptMetadataCapability(x));
        }
        else {
            this.capability = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.metadata';
        }
        iss.push(...this.vOA('link', exp));
        iss.push(...this.vRA('capability', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadata._fts_dataType = 'TestScriptMetadata';
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export class TestScriptFixture extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptFixture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['autocreate']) {
            this.autocreate = new fhir.FhirBoolean({ value: source.autocreate });
        }
        if (source['_autocreate']) {
            if (this.autocreate) {
                this.autocreate.addExtendedProperties(source._autocreate);
            }
            else {
                this.autocreate = new fhir.FhirBoolean(source._autocreate);
            }
        }
        if (source['autodelete']) {
            this.autodelete = new fhir.FhirBoolean({ value: source.autodelete });
        }
        if (source['_autodelete']) {
            if (this.autodelete) {
                this.autodelete.addExtendedProperties(source._autodelete);
            }
            else {
                this.autodelete = new fhir.FhirBoolean(source._autodelete);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.fixture';
        }
        iss.push(...this.vOS('autocreate', exp));
        iss.push(...this.vOS('autodelete', exp));
        iss.push(...this.vOS('resource', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptFixture._fts_dataType = 'TestScriptFixture';
/**
 * Variable is set based either on element value in response body or on header field value in the response headers.
 */
export class TestScriptVariable extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['_headerField']) {
            if (this.headerField) {
                this.headerField.addExtendedProperties(source._headerField);
            }
            else {
                this.headerField = new fhir.FhirString(source._headerField);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.variable';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('headerField', exp));
        iss.push(...this.vOS('path', exp));
        iss.push(...this.vOS('sourceId', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptVariable._fts_dataType = 'TestScriptVariable';
/**
 * Header elements would be used to set HTTP headers.
 */
export class TestScriptSetupActionOperationRequestHeader extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperationRequestHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['field']) {
            this.field = new fhir.FhirString({ value: source.field });
        }
        else {
            this.field = null;
        }
        if (source['_field']) {
            if (this.field) {
                this.field.addExtendedProperties(source._field);
            }
            else {
                this.field = new fhir.FhirString(source._field);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.operation.requestHeader';
        }
        iss.push(...this.vRS('field', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperationRequestHeader._fts_dataType = 'TestScriptSetupActionOperationRequestHeader';
/**
 * The operation to perform.
 */
export class TestScriptSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCode(source._resource);
            }
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['accept']) {
            this.accept = new fhir.FhirCode({ value: source.accept });
        }
        if (source['_accept']) {
            if (this.accept) {
                this.accept.addExtendedProperties(source._accept);
            }
            else {
                this.accept = new fhir.FhirCode(source._accept);
            }
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['_destination']) {
            if (this.destination) {
                this.destination.addExtendedProperties(source._destination);
            }
            else {
                this.destination = new fhir.FhirInteger(source._destination);
            }
        }
        if (source['encodeRequestUrl']) {
            this.encodeRequestUrl = new fhir.FhirBoolean({ value: source.encodeRequestUrl });
        }
        if (source['_encodeRequestUrl']) {
            if (this.encodeRequestUrl) {
                this.encodeRequestUrl.addExtendedProperties(source._encodeRequestUrl);
            }
            else {
                this.encodeRequestUrl = new fhir.FhirBoolean(source._encodeRequestUrl);
            }
        }
        if (source['params']) {
            this.params = new fhir.FhirString({ value: source.params });
        }
        if (source['_params']) {
            if (this.params) {
                this.params.addExtendedProperties(source._params);
            }
            else {
                this.params = new fhir.FhirString(source._params);
            }
        }
        if (source['requestHeader']) {
            this.requestHeader = source.requestHeader.map((x) => new fhir.TestScriptSetupActionOperationRequestHeader(x));
        }
        else {
            this.requestHeader = [];
        }
        if (source['responseId']) {
            this.responseId = new fhir.FhirId({ value: source.responseId });
        }
        if (source['_responseId']) {
            if (this.responseId) {
                this.responseId.addExtendedProperties(source._responseId);
            }
            else {
                this.responseId = new fhir.FhirId(source._responseId);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
        if (source['targetId']) {
            this.targetId = new fhir.FhirId({ value: source.targetId });
        }
        if (source['_targetId']) {
            if (this.targetId) {
                this.targetId.addExtendedProperties(source._targetId);
            }
            else {
                this.targetId = new fhir.FhirId(source._targetId);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirString({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirString(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.operation';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOSV('resource', exp, 'DefinedTypes', DefinedTypesVsValidation, 'r'));
        iss.push(...this.vOS('label', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOSV('accept', exp, 'ContentType', ContentTypeVsValidation, 'r'));
        iss.push(...this.vOSV('contentType', exp, 'ContentType', ContentTypeVsValidation, 'r'));
        iss.push(...this.vOS('destination', exp));
        iss.push(...this.vOS('encodeRequestUrl', exp));
        iss.push(...this.vOS('params', exp));
        iss.push(...this.vOA('requestHeader', exp));
        iss.push(...this.vOS('responseId', exp));
        iss.push(...this.vOS('sourceId', exp));
        iss.push(...this.vOS('targetId', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperation._fts_dataType = 'TestScriptSetupActionOperation';
/**
 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
 */
export class TestScriptSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['direction']) {
            this.direction = new fhir.FhirCode({ value: source.direction });
        }
        if (source['_direction']) {
            if (this.direction) {
                this.direction.addExtendedProperties(source._direction);
            }
            else {
                this.direction = new fhir.FhirCode(source._direction);
            }
        }
        if (source['compareToSourceId']) {
            this.compareToSourceId = new fhir.FhirString({ value: source.compareToSourceId });
        }
        if (source['_compareToSourceId']) {
            if (this.compareToSourceId) {
                this.compareToSourceId.addExtendedProperties(source._compareToSourceId);
            }
            else {
                this.compareToSourceId = new fhir.FhirString(source._compareToSourceId);
            }
        }
        if (source['compareToSourcePath']) {
            this.compareToSourcePath = new fhir.FhirString({ value: source.compareToSourcePath });
        }
        if (source['_compareToSourcePath']) {
            if (this.compareToSourcePath) {
                this.compareToSourcePath.addExtendedProperties(source._compareToSourcePath);
            }
            else {
                this.compareToSourcePath = new fhir.FhirString(source._compareToSourcePath);
            }
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['_headerField']) {
            if (this.headerField) {
                this.headerField.addExtendedProperties(source._headerField);
            }
            else {
                this.headerField = new fhir.FhirString(source._headerField);
            }
        }
        if (source['minimumId']) {
            this.minimumId = new fhir.FhirString({ value: source.minimumId });
        }
        if (source['_minimumId']) {
            if (this.minimumId) {
                this.minimumId.addExtendedProperties(source._minimumId);
            }
            else {
                this.minimumId = new fhir.FhirString(source._minimumId);
            }
        }
        if (source['navigationLinks']) {
            this.navigationLinks = new fhir.FhirBoolean({ value: source.navigationLinks });
        }
        if (source['_navigationLinks']) {
            if (this.navigationLinks) {
                this.navigationLinks.addExtendedProperties(source._navigationLinks);
            }
            else {
                this.navigationLinks = new fhir.FhirBoolean(source._navigationLinks);
            }
        }
        if (source['operator']) {
            this.operator = new fhir.FhirCode({ value: source.operator });
        }
        if (source['_operator']) {
            if (this.operator) {
                this.operator.addExtendedProperties(source._operator);
            }
            else {
                this.operator = new fhir.FhirCode(source._operator);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCode(source._resource);
            }
        }
        if (source['response']) {
            this.response = new fhir.FhirCode({ value: source.response });
        }
        if (source['_response']) {
            if (this.response) {
                this.response.addExtendedProperties(source._response);
            }
            else {
                this.response = new fhir.FhirCode(source._response);
            }
        }
        if (source['responseCode']) {
            this.responseCode = new fhir.FhirString({ value: source.responseCode });
        }
        if (source['_responseCode']) {
            if (this.responseCode) {
                this.responseCode.addExtendedProperties(source._responseCode);
            }
            else {
                this.responseCode = new fhir.FhirString(source._responseCode);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
        if (source['validateProfileId']) {
            this.validateProfileId = new fhir.FhirId({ value: source.validateProfileId });
        }
        if (source['_validateProfileId']) {
            if (this.validateProfileId) {
                this.validateProfileId.addExtendedProperties(source._validateProfileId);
            }
            else {
                this.validateProfileId = new fhir.FhirId(source._validateProfileId);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['warningOnly']) {
            this.warningOnly = new fhir.FhirBoolean({ value: source.warningOnly });
        }
        if (source['_warningOnly']) {
            if (this.warningOnly) {
                this.warningOnly.addExtendedProperties(source._warningOnly);
            }
            else {
                this.warningOnly = new fhir.FhirBoolean(source._warningOnly);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action.assert';
        }
        iss.push(...this.vOS('label', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOSV('direction', exp, 'AssertDirection', AssertDirectionVsValidation, 'r'));
        iss.push(...this.vOS('compareToSourceId', exp));
        iss.push(...this.vOS('compareToSourcePath', exp));
        iss.push(...this.vOSV('contentType', exp, 'ContentType', ContentTypeVsValidation, 'r'));
        iss.push(...this.vOS('headerField', exp));
        iss.push(...this.vOS('minimumId', exp));
        iss.push(...this.vOS('navigationLinks', exp));
        iss.push(...this.vOSV('operator', exp, 'AssertOperator', AssertOperatorVsValidation, 'r'));
        iss.push(...this.vOS('path', exp));
        iss.push(...this.vOSV('resource', exp, 'DefinedTypes', DefinedTypesVsValidation, 'r'));
        iss.push(...this.vOSV('response', exp, 'AssertResponseCodeTypes', AssertResponseCodeTypesVsValidation, 'r'));
        iss.push(...this.vOS('responseCode', exp));
        iss.push(...this.vOS('sourceId', exp));
        iss.push(...this.vOS('validateProfileId', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOS('warningOnly', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssert._fts_dataType = 'TestScriptSetupActionAssert';
/**
 * Action would contain either an operation or an assertion.
 */
export class TestScriptSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup.action';
        }
        iss.push(...this.vOS('operation', exp));
        iss.push(...this.vOS('assert', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupAction._fts_dataType = 'TestScriptSetupAction';
/**
 * A series of required setup operations before tests are executed.
 */
export class TestScriptSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['metadata']) {
            this.metadata = new fhir.TestScriptMetadata(source.metadata);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptSetupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.setup';
        }
        iss.push(...this.vOS('metadata', exp));
        iss.push(...this.vRA('action', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetup._fts_dataType = 'TestScriptSetup';
/**
 * Action would contain either an operation or an assertion.
 */
export class TestScriptTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.test.action';
        }
        iss.push(...this.vOS('operation', exp));
        iss.push(...this.vOS('assert', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTestAction._fts_dataType = 'TestScriptTestAction';
/**
 * A test in this script.
 */
export class TestScriptTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['metadata']) {
            this.metadata = new fhir.TestScriptMetadata(source.metadata);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTestAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.test';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('metadata', exp));
        iss.push(...this.vRA('action', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTest._fts_dataType = 'TestScriptTest';
/**
 * The teardown action will only contain an operation.
 */
export class TestScriptTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.teardown.action';
        }
        iss.push(...this.vOS('operation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardownAction._fts_dataType = 'TestScriptTeardownAction';
/**
 * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
 */
export class TestScriptTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTeardownAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript.teardown';
        }
        iss.push(...this.vRA('action', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardown._fts_dataType = 'TestScriptTeardown';
/**
 * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
 */
export class TestScript extends fhir.DomainResource {
    /**
     * Default constructor for TestScript - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TestScript';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.TestScriptContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.useContext = [];
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirString({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright);
            }
        }
        if (source['metadata']) {
            this.metadata = new fhir.TestScriptMetadata(source.metadata);
        }
        if (source['multiserver']) {
            this.multiserver = new fhir.FhirBoolean({ value: source.multiserver });
        }
        if (source['_multiserver']) {
            if (this.multiserver) {
                this.multiserver.addExtendedProperties(source._multiserver);
            }
            else {
                this.multiserver = new fhir.FhirBoolean(source._multiserver);
            }
        }
        if (source['fixture']) {
            this.fixture = source.fixture.map((x) => new fhir.TestScriptFixture(x));
        }
        else {
            this.fixture = [];
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x));
        }
        else {
            this.profile = [];
        }
        if (source['variable']) {
            this.variable = source.variable.map((x) => new fhir.TestScriptVariable(x));
        }
        else {
            this.variable = [];
        }
        if (source['setup']) {
            this.setup = new fhir.TestScriptSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestScriptTest(x));
        }
        else {
            this.test = [];
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestScriptTeardown(source.teardown);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TestScript';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r'));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOS('requirements', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('metadata', exp));
        iss.push(...this.vOS('multiserver', exp));
        iss.push(...this.vOA('fixture', exp));
        iss.push(...this.vOA('profile', exp));
        iss.push(...this.vOA('variable', exp));
        iss.push(...this.vOS('setup', exp));
        iss.push(...this.vOA('test', exp));
        iss.push(...this.vOS('teardown', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScript._fts_dataType = 'TestScript';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvVGVzdFNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0QkFBNEI7QUFFNUIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFJbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBR3hGLGFBQWE7QUFDYixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUd0RixhQUFhO0FBQ2IsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFHOUYsYUFBYTtBQUNiLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRzVGLGFBQWE7QUFDYixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUc5RyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFtQmxIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFrQixTQUFRLElBQUksQ0FBQyxlQUFlO0lBYXpEOztPQUVHO0lBQ0gsWUFBWSxTQUF3QyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUM5RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7U0FBRTtRQUM5RSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLElBQUks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QUFDLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0FBMU1EOztHQUVHO0FBQzZCLHdCQUFhLEdBQVUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBUZXN0U2NyaXB0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbmVkVHlwZXNDb2RlcywgIERlZmluZWRUeXBlc0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZWZpbmVkVHlwZXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRGVmaW5lZFR5cGVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZWZpbmVkVHlwZXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbnRlbnRUeXBlQ29kZXMsICBDb250ZW50VHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db250ZW50VHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb250ZW50VHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29udGVudFR5cGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEFzc2VydERpcmVjdGlvbkNvZGVzLCAgQXNzZXJ0RGlyZWN0aW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Fzc2VydERpcmVjdGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBc3NlcnREaXJlY3Rpb25Wc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Fzc2VydERpcmVjdGlvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQXNzZXJ0T3BlcmF0b3JDb2RlcywgIEFzc2VydE9wZXJhdG9yQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Fzc2VydE9wZXJhdG9yQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEFzc2VydE9wZXJhdG9yVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Bc3NlcnRPcGVyYXRvclZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RlcywgIEFzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Fzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEFzc2VydFJlc3BvbnNlQ29kZVR5cGVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Bc3NlcnRSZXNwb25zZUNvZGVUeXBlc1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ29uZm9ybWFuY2VSZXNvdXJjZVN0YXR1c0NvZGVzLCAgQ29uZm9ybWFuY2VSZXNvdXJjZVN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db25mb3JtYW5jZVJlc291cmNlU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbmZvcm1hbmNlUmVzb3VyY2VTdGF0dXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NvbmZvcm1hbmNlUmVzb3VyY2VTdGF0dXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVGVzdFNjcmlwdENvbnRhY3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFNjcmlwdENvbnRhY3RBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBvZiBhbiBpbmRpdmlkdWFsIHRvIGNvbnRhY3QgcmVnYXJkaW5nIHRoZSBUZXN0IFNjcmlwdC5cclxuICAgKi9cclxuICBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuY29udGFjdC5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvbnRhY3QgZGV0YWlscyBmb3IgaW5kaXZpZHVhbCAoaWYgYSBuYW1lIHdhcyBwcm92aWRlZCkgb3IgdGhlIHB1Ymxpc2hlci5cclxuICAgKi9cclxuICB0ZWxlY29tPzogZmhpci5Db250YWN0UG9pbnRBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udGFjdHMgdG8gYXNzaXN0IGEgdXNlciBpbiBmaW5kaW5nIGFuZCBjb21tdW5pY2F0aW5nIHdpdGggdGhlIHB1Ymxpc2hlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXN0U2NyaXB0Q29udGFjdCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHRDb250YWN0JztcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBvZiBhbiBpbmRpdmlkdWFsIHRvIGNvbnRhY3QgcmVnYXJkaW5nIHRoZSBUZXN0IFNjcmlwdC5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29udGFjdCBkZXRhaWxzIGZvciBpbmRpdmlkdWFsIChpZiBhIG5hbWUgd2FzIHByb3ZpZGVkKSBvciB0aGUgcHVibGlzaGVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZWxlY29tOiBmaGlyLkNvbnRhY3RQb2ludFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFRlc3RTY3JpcHRDb250YWN0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGVzdFNjcmlwdENvbnRhY3RBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbmFtZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLm5hbWUpIHsgdGhpcy5uYW1lLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX25hbWUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX25hbWUgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3RlbGVjb20nXSkgeyB0aGlzLnRlbGVjb20gPSBzb3VyY2UudGVsZWNvbS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3RQb2ludCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRlbGVjb20gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQuY29udGFjdCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ25hbWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3RlbGVjb20nLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFRlc3RTY3JpcHRNZXRhZGF0YUxpbmsgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFNjcmlwdE1ldGFkYXRhTGlua0FyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFVSTCB0byBhIHBhcnRpY3VsYXIgcmVxdWlyZW1lbnQgb3IgZmVhdHVyZSB3aXRoaW4gdGhlIEZISVIgc3BlY2lmaWNhdGlvbi5cclxuICAgKi9cclxuICB1cmw6IGZoaXIuRmhpclVyaXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0Lm1ldGFkYXRhLmxpbmsudXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogU2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGxpbmsuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5tZXRhZGF0YS5saW5rLmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgbGluayB0byB0aGUgRkhJUiBzcGVjaWZpY2F0aW9uIHRoYXQgdGhpcyB0ZXN0IGlzIGNvdmVyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRNZXRhZGF0YUxpbmsgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdUZXN0U2NyaXB0TWV0YWRhdGFMaW5rJztcclxuICAvKipcclxuICAgKiBVUkwgdG8gYSBwYXJ0aWN1bGFyIHJlcXVpcmVtZW50IG9yIGZlYXR1cmUgd2l0aGluIHRoZSBGSElSIHNwZWNpZmljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHVybDogZmhpci5GaGlyVXJpfG51bGw7XHJcbiAgLyoqXHJcbiAgICogU2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGxpbmsuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0TWV0YWRhdGFMaW5rIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGVzdFNjcmlwdE1ldGFkYXRhTGlua0FyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd1cmwnXSkgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudXJsfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVybCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ191cmwnXSkge1xyXG4gICAgICBpZiAodGhpcy51cmwpIHsgdGhpcy51cmwuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdXJsISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudXJsID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX3VybCBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fZGVzY3JpcHRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdUZXN0U2NyaXB0Lm1ldGFkYXRhLmxpbmsnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCd1cmwnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rlc2NyaXB0aW9uJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0TWV0YWRhdGFDYXBhYmlsaXR5IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RTY3JpcHRNZXRhZGF0YUNhcGFiaWxpdHlBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgdGVzdCBleGVjdXRpb24gd2lsbCByZXF1aXJlIHRoZSBnaXZlbiBjYXBhYmlsaXRpZXMgb2YgdGhlIHNlcnZlciBpbiBvcmRlciBmb3IgdGhpcyB0ZXN0IHNjcmlwdCB0byBleGVjdXRlLlxyXG4gICAqL1xyXG4gIHJlcXVpcmVkPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5tZXRhZGF0YS5jYXBhYmlsaXR5LnJlcXVpcmVkXHJcbiAgICovXHJcbiAgX3JlcXVpcmVkPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgdGVzdCBleGVjdXRpb24gd2lsbCB2YWxpZGF0ZSB0aGUgZ2l2ZW4gY2FwYWJpbGl0aWVzIG9mIHRoZSBzZXJ2ZXIgaW4gb3JkZXIgZm9yIHRoaXMgdGVzdCBzY3JpcHQgdG8gZXhlY3V0ZS5cclxuICAgKi9cclxuICB2YWxpZGF0ZWQ/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0Lm1ldGFkYXRhLmNhcGFiaWxpdHkudmFsaWRhdGVkXHJcbiAgICovXHJcbiAgX3ZhbGlkYXRlZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpcHRpb24gb2YgdGhlIGNhcGFiaWxpdGllcyB0aGF0IHRoaXMgdGVzdCBzY3JpcHQgaXMgcmVxdWlyaW5nIHRoZSBzZXJ2ZXIgdG8gc3VwcG9ydC5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0Lm1ldGFkYXRhLmNhcGFiaWxpdHkuZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBfZGVzY3JpcHRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoaWNoIHNlcnZlciB0aGVzZSByZXF1aXJlbWVudHMgYXBwbHkgdG8uXHJcbiAgICovXHJcbiAgZGVzdGluYXRpb24/OiBmaGlyLkZoaXJJbnRlZ2VyfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQubWV0YWRhdGEuY2FwYWJpbGl0eS5kZXN0aW5hdGlvblxyXG4gICAqL1xyXG4gIF9kZXN0aW5hdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogTGlua3MgdG8gdGhlIEZISVIgc3BlY2lmaWNhdGlvbiB0aGF0IGRlc2NyaWJlcyB0aGlzIGludGVyYWN0aW9uIGFuZCB0aGUgcmVzb3VyY2VzIGludm9sdmVkIGluIG1vcmUgZGV0YWlsLlxyXG4gICAqL1xyXG4gIGxpbms/OiBmaGlyLkZoaXJVcmlbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0Lm1ldGFkYXRhLmNhcGFiaWxpdHkubGlua1xyXG4gICAqL1xyXG4gIF9saW5rPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBNaW5pbXVtIGNvbmZvcm1hbmNlIHJlcXVpcmVkIG9mIHNlcnZlciBmb3IgdGVzdCBzY3JpcHQgdG8gZXhlY3V0ZSBzdWNjZXNzZnVsbHkuICAgSWYgc2VydmVyIGRvZXMgbm90IG1lZXQgYXQgYSBtaW5pbXVtIHRoZSByZWZlcmVuY2UgY29uZm9ybWFuY2UgZGVmaW5pdGlvbiwgdGhlbiBhbGwgdGVzdHMgaW4gdGhpcyBzY3JpcHQgYXJlIHNraXBwZWQuXHJcbiAgICovXHJcbiAgY29uZm9ybWFuY2U6IGZoaXIuUmVmZXJlbmNlQXJnc3xudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FwYWJpbGl0aWVzIHRoYXQgbXVzdCBleGlzdCBhbmQgYXJlIGFzc3VtZWQgdG8gZnVuY3Rpb24gY29ycmVjdGx5IG9uIHRoZSBGSElSIHNlcnZlciBiZWluZyB0ZXN0ZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGVzdFNjcmlwdE1ldGFkYXRhQ2FwYWJpbGl0eSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHRNZXRhZGF0YUNhcGFiaWxpdHknO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSB0ZXN0IGV4ZWN1dGlvbiB3aWxsIHJlcXVpcmUgdGhlIGdpdmVuIGNhcGFiaWxpdGllcyBvZiB0aGUgc2VydmVyIGluIG9yZGVyIGZvciB0aGlzIHRlc3Qgc2NyaXB0IHRvIGV4ZWN1dGUuXHJcbiAgICovXHJcbiAgcHVibGljIHJlcXVpcmVkPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBvciBub3QgdGhlIHRlc3QgZXhlY3V0aW9uIHdpbGwgdmFsaWRhdGUgdGhlIGdpdmVuIGNhcGFiaWxpdGllcyBvZiB0aGUgc2VydmVyIGluIG9yZGVyIGZvciB0aGlzIHRlc3Qgc2NyaXB0IHRvIGV4ZWN1dGUuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbGlkYXRlZD86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlc2NyaXB0aW9uIG9mIHRoZSBjYXBhYmlsaXRpZXMgdGhhdCB0aGlzIHRlc3Qgc2NyaXB0IGlzIHJlcXVpcmluZyB0aGUgc2VydmVyIHRvIHN1cHBvcnQuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGljaCBzZXJ2ZXIgdGhlc2UgcmVxdWlyZW1lbnRzIGFwcGx5IHRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXN0aW5hdGlvbj86IGZoaXIuRmhpckludGVnZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExpbmtzIHRvIHRoZSBGSElSIHNwZWNpZmljYXRpb24gdGhhdCBkZXNjcmliZXMgdGhpcyBpbnRlcmFjdGlvbiBhbmQgdGhlIHJlc291cmNlcyBpbnZvbHZlZCBpbiBtb3JlIGRldGFpbC5cclxuICAgKi9cclxuICBwdWJsaWMgbGluazogZmhpci5GaGlyVXJpW107XHJcbiAgLyoqXHJcbiAgICogTWluaW11bSBjb25mb3JtYW5jZSByZXF1aXJlZCBvZiBzZXJ2ZXIgZm9yIHRlc3Qgc2NyaXB0IHRvIGV4ZWN1dGUgc3VjY2Vzc2Z1bGx5LiAgIElmIHNlcnZlciBkb2VzIG5vdCBtZWV0IGF0IGEgbWluaW11bSB0aGUgcmVmZXJlbmNlIGNvbmZvcm1hbmNlIGRlZmluaXRpb24sIHRoZW4gYWxsIHRlc3RzIGluIHRoaXMgc2NyaXB0IGFyZSBza2lwcGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25mb3JtYW5jZTogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0TWV0YWRhdGFDYXBhYmlsaXR5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGVzdFNjcmlwdE1ldGFkYXRhQ2FwYWJpbGl0eUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyZXF1aXJlZCddKSB7IHRoaXMucmVxdWlyZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5yZXF1aXJlZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVxdWlyZWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5yZXF1aXJlZCkgeyB0aGlzLnJlcXVpcmVkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JlcXVpcmVkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucmVxdWlyZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3JlcXVpcmVkIGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmFsaWRhdGVkJ10pIHsgdGhpcy52YWxpZGF0ZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS52YWxpZGF0ZWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ZhbGlkYXRlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRlZCkgeyB0aGlzLnZhbGlkYXRlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl92YWxpZGF0ZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52YWxpZGF0ZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3ZhbGlkYXRlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGVzY3JpcHRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2Rlc2NyaXB0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24pIHsgdGhpcy5kZXNjcmlwdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kZXNjcmlwdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rlc2NyaXB0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkZXN0aW5hdGlvbiddKSB7IHRoaXMuZGVzdGluYXRpb24gPSBuZXcgZmhpci5GaGlySW50ZWdlcih7dmFsdWU6IHNvdXJjZS5kZXN0aW5hdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzdGluYXRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbikgeyB0aGlzLmRlc3RpbmF0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc3RpbmF0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzdGluYXRpb24gPSBuZXcgZmhpci5GaGlySW50ZWdlcihzb3VyY2UuX2Rlc3RpbmF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlySW50ZWdlckFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbGluayddKSB7IHRoaXMubGluayA9IHNvdXJjZS5saW5rLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxpbmsgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2xpbmsnXSkge1xyXG4gICAgICBzb3VyY2UuX2xpbmsuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMubGluay5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLmxpbmtbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5saW5rLnB1c2gobmV3IGZoaXIuRmhpclVyaSh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29uZm9ybWFuY2UnXSkgeyB0aGlzLmNvbmZvcm1hbmNlID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5jb25mb3JtYW5jZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbmZvcm1hbmNlID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQubWV0YWRhdGEuY2FwYWJpbGl0eScgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JlcXVpcmVkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd2YWxpZGF0ZWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rlc2NyaXB0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkZXN0aW5hdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbGluaycsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygnY29uZm9ybWFuY2UnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFRlc3RTY3JpcHRNZXRhZGF0YSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0U2NyaXB0TWV0YWRhdGFBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBBIGxpbmsgdG8gdGhlIEZISVIgc3BlY2lmaWNhdGlvbiB0aGF0IHRoaXMgdGVzdCBpcyBjb3ZlcmluZy5cclxuICAgKi9cclxuICBsaW5rPzogZmhpci5UZXN0U2NyaXB0TWV0YWRhdGFMaW5rQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDYXBhYmlsaXRpZXMgdGhhdCBtdXN0IGV4aXN0IGFuZCBhcmUgYXNzdW1lZCB0byBmdW5jdGlvbiBjb3JyZWN0bHkgb24gdGhlIEZISVIgc2VydmVyIGJlaW5nIHRlc3RlZC5cclxuICAgKi9cclxuICBjYXBhYmlsaXR5OiBmaGlyLlRlc3RTY3JpcHRNZXRhZGF0YUNhcGFiaWxpdHlBcmdzW118bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSByZXF1aXJlZCBjYXBhYmlsaXR5IG11c3QgZXhpc3QgYW5kIGFyZSBhc3N1bWVkIHRvIGZ1bmN0aW9uIGNvcnJlY3RseSBvbiB0aGUgRkhJUiBzZXJ2ZXIgYmVpbmcgdGVzdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRNZXRhZGF0YSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHRNZXRhZGF0YSc7XHJcbiAgLyoqXHJcbiAgICogQSBsaW5rIHRvIHRoZSBGSElSIHNwZWNpZmljYXRpb24gdGhhdCB0aGlzIHRlc3QgaXMgY292ZXJpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGxpbms6IGZoaXIuVGVzdFNjcmlwdE1ldGFkYXRhTGlua1tdO1xyXG4gIC8qKlxyXG4gICAqIENhcGFiaWxpdGllcyB0aGF0IG11c3QgZXhpc3QgYW5kIGFyZSBhc3N1bWVkIHRvIGZ1bmN0aW9uIGNvcnJlY3RseSBvbiB0aGUgRkhJUiBzZXJ2ZXIgYmVpbmcgdGVzdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYXBhYmlsaXR5OiBmaGlyLlRlc3RTY3JpcHRNZXRhZGF0YUNhcGFiaWxpdHlbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0TWV0YWRhdGEgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxUZXN0U2NyaXB0TWV0YWRhdGFBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbGluayddKSB7IHRoaXMubGluayA9IHNvdXJjZS5saW5rLm1hcCgoeCkgPT4gbmV3IGZoaXIuVGVzdFNjcmlwdE1ldGFkYXRhTGluayh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxpbmsgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2FwYWJpbGl0eSddKSB7IHRoaXMuY2FwYWJpbGl0eSA9IHNvdXJjZS5jYXBhYmlsaXR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuVGVzdFNjcmlwdE1ldGFkYXRhQ2FwYWJpbGl0eSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNhcGFiaWxpdHkgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQubWV0YWRhdGEnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdsaW5rJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJBKCdjYXBhYmlsaXR5JyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0Rml4dHVyZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0U2NyaXB0Rml4dHVyZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRvIGltcGxpY2l0bHkgY3JlYXRlIHRoZSBmaXh0dXJlIGR1cmluZyBzZXR1cC4gSWYgdHJ1ZSwgdGhlIGZpeHR1cmUgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIG9uIGVhY2ggc2VydmVyIGJlaW5nIHRlc3RlZCBkdXJpbmcgc2V0dXAsIHRoZXJlZm9yZSBubyBjcmVhdGUgb3BlcmF0aW9uIGlzIHJlcXVpcmVkIGZvciB0aGlzIGZpeHR1cmUgaW4gdGhlIFRlc3RTY3JpcHQuc2V0dXAgc2VjdGlvbi5cclxuICAgKi9cclxuICBhdXRvY3JlYXRlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5maXh0dXJlLmF1dG9jcmVhdGVcclxuICAgKi9cclxuICBfYXV0b2NyZWF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBvciBub3QgdG8gaW1wbGljaXRseSBkZWxldGUgdGhlIGZpeHR1cmUgZHVyaW5nIHRlYXJkb3duIElmIHRydWUsIHRoZSBmaXh0dXJlIGlzIGF1dG9tYXRpY2FsbHkgZGVsZXRlZCBvbiBlYWNoIHNlcnZlciBiZWluZyB0ZXN0ZWQgZHVyaW5nIHRlYXJkb3duLCB0aGVyZWZvcmUgbm8gZGVsZXRlIG9wZXJhdGlvbiBpcyByZXF1aXJlZCBmb3IgdGhpcyBmaXh0dXJlIGluIHRoZSBUZXN0U2NyaXB0LnRlYXJkb3duIHNlY3Rpb24uXHJcbiAgICovXHJcbiAgYXV0b2RlbGV0ZT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuZml4dHVyZS5hdXRvZGVsZXRlXHJcbiAgICovXHJcbiAgX2F1dG9kZWxldGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZSB0byB0aGUgcmVzb3VyY2UgKGNvbnRhaW5pbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSByZXNvdXJjZSBuZWVkZWQgZm9yIG9wZXJhdGlvbnMpLlxyXG4gICAqL1xyXG4gIHJlc291cmNlPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpeHR1cmUgaW4gdGhlIHRlc3Qgc2NyaXB0IC0gYnkgcmVmZXJlbmNlICh1cmkpLiBBbGwgZml4dHVyZXMgYXJlIHJlcXVpcmVkIGZvciB0aGUgdGVzdCBzY3JpcHQgdG8gZXhlY3V0ZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXN0U2NyaXB0Rml4dHVyZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHRGaXh0dXJlJztcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byBpbXBsaWNpdGx5IGNyZWF0ZSB0aGUgZml4dHVyZSBkdXJpbmcgc2V0dXAuIElmIHRydWUsIHRoZSBmaXh0dXJlIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBvbiBlYWNoIHNlcnZlciBiZWluZyB0ZXN0ZWQgZHVyaW5nIHNldHVwLCB0aGVyZWZvcmUgbm8gY3JlYXRlIG9wZXJhdGlvbiBpcyByZXF1aXJlZCBmb3IgdGhpcyBmaXh0dXJlIGluIHRoZSBUZXN0U2NyaXB0LnNldHVwIHNlY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGF1dG9jcmVhdGU/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byBpbXBsaWNpdGx5IGRlbGV0ZSB0aGUgZml4dHVyZSBkdXJpbmcgdGVhcmRvd24gSWYgdHJ1ZSwgdGhlIGZpeHR1cmUgaXMgYXV0b21hdGljYWxseSBkZWxldGVkIG9uIGVhY2ggc2VydmVyIGJlaW5nIHRlc3RlZCBkdXJpbmcgdGVhcmRvd24sIHRoZXJlZm9yZSBubyBkZWxldGUgb3BlcmF0aW9uIGlzIHJlcXVpcmVkIGZvciB0aGlzIGZpeHR1cmUgaW4gdGhlIFRlc3RTY3JpcHQudGVhcmRvd24gc2VjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYXV0b2RlbGV0ZT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZSB0byB0aGUgcmVzb3VyY2UgKGNvbnRhaW5pbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSByZXNvdXJjZSBuZWVkZWQgZm9yIG9wZXJhdGlvbnMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNvdXJjZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0Rml4dHVyZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRlc3RTY3JpcHRGaXh0dXJlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2F1dG9jcmVhdGUnXSkgeyB0aGlzLmF1dG9jcmVhdGUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5hdXRvY3JlYXRlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19hdXRvY3JlYXRlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuYXV0b2NyZWF0ZSkgeyB0aGlzLmF1dG9jcmVhdGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fYXV0b2NyZWF0ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmF1dG9jcmVhdGUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2F1dG9jcmVhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhdXRvZGVsZXRlJ10pIHsgdGhpcy5hdXRvZGVsZXRlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuYXV0b2RlbGV0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfYXV0b2RlbGV0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmF1dG9kZWxldGUpIHsgdGhpcy5hdXRvZGVsZXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2F1dG9kZWxldGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5hdXRvZGVsZXRlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9hdXRvZGVsZXRlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzb3VyY2UnXSkgeyB0aGlzLnJlc291cmNlID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZXNvdXJjZSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdUZXN0U2NyaXB0LmZpeHR1cmUnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhdXRvY3JlYXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhdXRvZGVsZXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZXNvdXJjZScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVGVzdFNjcmlwdFZhcmlhYmxlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RTY3JpcHRWYXJpYWJsZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIERlc2NyaXB0aXZlIG5hbWUgZm9yIHRoaXMgdmFyaWFibGUuXHJcbiAgICovXHJcbiAgbmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQudmFyaWFibGUubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBXaWxsIGJlIHVzZWQgdG8gZ3JhYiB0aGUgSFRUUCBoZWFkZXIgZmllbGQgdmFsdWUgZnJvbSB0aGUgaGVhZGVycyB0aGF0IHNvdXJjZUlkIGlzIHBvaW50aW5nIHRvLlxyXG4gICAqL1xyXG4gIGhlYWRlckZpZWxkPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQudmFyaWFibGUuaGVhZGVyRmllbGRcclxuICAgKi9cclxuICBfaGVhZGVyRmllbGQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFhQYXRoIG9yIEpTT05QYXRoIGFnYWluc3QgdGhlIGZpeHR1cmUgYm9keS4gIFdoZW4gdmFyaWFibGVzIGFyZSBkZWZpbmVkLCBlaXRoZXIgaGVhZGVyRmllbGQgbXVzdCBiZSBzcGVjaWZpZWQgb3IgcGF0aCwgYnV0IG5vdCBib3RoLlxyXG4gICAqL1xyXG4gIHBhdGg/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC52YXJpYWJsZS5wYXRoXHJcbiAgICovXHJcbiAgX3BhdGg/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEZpeHR1cmUgdG8gZXZhbHVhdGUgdGhlIFhQYXRoL0pTT05QYXRoIGV4cHJlc3Npb24gb3IgdGhlIGhlYWRlckZpZWxkICBhZ2FpbnN0IHdpdGhpbiB0aGlzIHZhcmlhYmxlLlxyXG4gICAqL1xyXG4gIHNvdXJjZUlkPzogZmhpci5GaGlySWR8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC52YXJpYWJsZS5zb3VyY2VJZFxyXG4gICAqL1xyXG4gIF9zb3VyY2VJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYXJpYWJsZSBpcyBzZXQgYmFzZWQgZWl0aGVyIG9uIGVsZW1lbnQgdmFsdWUgaW4gcmVzcG9uc2UgYm9keSBvciBvbiBoZWFkZXIgZmllbGQgdmFsdWUgaW4gdGhlIHJlc3BvbnNlIGhlYWRlcnMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGVzdFNjcmlwdFZhcmlhYmxlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVGVzdFNjcmlwdFZhcmlhYmxlJztcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGl2ZSBuYW1lIGZvciB0aGlzIHZhcmlhYmxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBXaWxsIGJlIHVzZWQgdG8gZ3JhYiB0aGUgSFRUUCBoZWFkZXIgZmllbGQgdmFsdWUgZnJvbSB0aGUgaGVhZGVycyB0aGF0IHNvdXJjZUlkIGlzIHBvaW50aW5nIHRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoZWFkZXJGaWVsZD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogWFBhdGggb3IgSlNPTlBhdGggYWdhaW5zdCB0aGUgZml4dHVyZSBib2R5LiAgV2hlbiB2YXJpYWJsZXMgYXJlIGRlZmluZWQsIGVpdGhlciBoZWFkZXJGaWVsZCBtdXN0IGJlIHNwZWNpZmllZCBvciBwYXRoLCBidXQgbm90IGJvdGguXHJcbiAgICovXHJcbiAgcHVibGljIHBhdGg/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZpeHR1cmUgdG8gZXZhbHVhdGUgdGhlIFhQYXRoL0pTT05QYXRoIGV4cHJlc3Npb24gb3IgdGhlIGhlYWRlckZpZWxkICBhZ2FpbnN0IHdpdGhpbiB0aGlzIHZhcmlhYmxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb3VyY2VJZD86IGZoaXIuRmhpcklkfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0VmFyaWFibGUgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxUZXN0U2NyaXB0VmFyaWFibGVBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydoZWFkZXJGaWVsZCddKSB7IHRoaXMuaGVhZGVyRmllbGQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmhlYWRlckZpZWxkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19oZWFkZXJGaWVsZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmhlYWRlckZpZWxkKSB7IHRoaXMuaGVhZGVyRmllbGQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5faGVhZGVyRmllbGQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5oZWFkZXJGaWVsZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9oZWFkZXJGaWVsZCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncGF0aCddKSB7IHRoaXMucGF0aCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGF0aH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcGF0aCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhdGgpIHsgdGhpcy5wYXRoLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3BhdGghKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wYXRoID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3BhdGggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZUlkJ10pIHsgdGhpcy5zb3VyY2VJZCA9IG5ldyBmaGlyLkZoaXJJZCh7dmFsdWU6IHNvdXJjZS5zb3VyY2VJZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfc291cmNlSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5zb3VyY2VJZCkgeyB0aGlzLnNvdXJjZUlkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NvdXJjZUlkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc291cmNlSWQgPSBuZXcgZmhpci5GaGlySWQoc291cmNlLl9zb3VyY2VJZCBhcyBQYXJ0aWFsPGZoaXIuRmhpcklkQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnVGVzdFNjcmlwdC52YXJpYWJsZScgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ25hbWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2hlYWRlckZpZWxkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwYXRoJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzb3VyY2VJZCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uUmVxdWVzdEhlYWRlciB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb25SZXF1ZXN0SGVhZGVyQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIEhUVFAgaGVhZGVyIGZpZWxkIGUuZy4gXCJBY2NlcHRcIi5cclxuICAgKi9cclxuICBmaWVsZDogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5yZXF1ZXN0SGVhZGVyLmZpZWxkXHJcbiAgICovXHJcbiAgX2ZpZWxkPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGhlYWRlciBlLmcuIFwiYXBwbGljYXRpb24veG1sXCIuXHJcbiAgICovXHJcbiAgdmFsdWU6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5vcGVyYXRpb24ucmVxdWVzdEhlYWRlci52YWx1ZVxyXG4gICAqL1xyXG4gIF92YWx1ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIZWFkZXIgZWxlbWVudHMgd291bGQgYmUgdXNlZCB0byBzZXQgSFRUUCBoZWFkZXJzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvblJlcXVlc3RIZWFkZXIgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdUZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb25SZXF1ZXN0SGVhZGVyJztcclxuICAvKipcclxuICAgKiBUaGUgSFRUUCBoZWFkZXIgZmllbGQgZS5nLiBcIkFjY2VwdFwiLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaWVsZDogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBoZWFkZXIgZS5nLiBcImFwcGxpY2F0aW9uL3htbFwiLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2YWx1ZTogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uUmVxdWVzdEhlYWRlciAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvblJlcXVlc3RIZWFkZXJBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZmllbGQnXSkgeyB0aGlzLmZpZWxkID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5maWVsZH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5maWVsZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19maWVsZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmZpZWxkKSB7IHRoaXMuZmllbGQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZmllbGQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5maWVsZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9maWVsZCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmFsdWUnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS52YWx1ZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy52YWx1ZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ192YWx1ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZhbHVlKSB7IHRoaXMudmFsdWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdmFsdWUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl92YWx1ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5yZXF1ZXN0SGVhZGVyJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygnZmllbGQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3ZhbHVlJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogU2VydmVyIGludGVyYWN0aW9uIG9yIG9wZXJhdGlvbiB0eXBlLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGluZ0FyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoZSByZXNvdXJjZS4gIFNlZSBodHRwOi8vaGw3LWZoaXIuZ2l0aHViLmlvL3Jlc291cmNlbGlzdC5odG1sLlxyXG4gICAqL1xyXG4gIHJlc291cmNlPzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5vcGVyYXRpb24ucmVzb3VyY2VcclxuICAgKi9cclxuICBfcmVzb3VyY2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsYWJlbCB3b3VsZCBiZSB1c2VkIGZvciB0cmFja2luZy9sb2dnaW5nIHB1cnBvc2VzIGJ5IHRlc3QgZW5naW5lcy5cclxuICAgKi9cclxuICBsYWJlbD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5vcGVyYXRpb24ubGFiZWxcclxuICAgKi9cclxuICBfbGFiZWw/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNjcmlwdGlvbiB3b3VsZCBiZSB1c2VkIGJ5IHRlc3QgZW5naW5lcyBmb3IgdHJhY2tpbmcgYW5kIHJlcG9ydGluZyBwdXJwb3Nlcy5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5vcGVyYXRpb24uZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBfZGVzY3JpcHRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb250ZW50LXR5cGUgb3IgbWltZS10eXBlIHRvIHVzZSBmb3IgUkVTVGZ1bCBvcGVyYXRpb24gaW4gdGhlICdBY2NlcHQnIGhlYWRlci5cclxuICAgKi9cclxuICBhY2NlcHQ/OiBmaGlyLkZoaXJDb2RlPENvbnRlbnRUeXBlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5hY2NlcHRcclxuICAgKi9cclxuICBfYWNjZXB0PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgY29udGVudC10eXBlIG9yIG1pbWUtdHlwZSB0byB1c2UgZm9yIFJFU1RmdWwgb3BlcmF0aW9uIGluIHRoZSAnQ29udGVudC1UeXBlJyBoZWFkZXIuXHJcbiAgICovXHJcbiAgY29udGVudFR5cGU/OiBmaGlyLkZoaXJDb2RlPENvbnRlbnRUeXBlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5jb250ZW50VHlwZVxyXG4gICAqL1xyXG4gIF9jb250ZW50VHlwZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogV2hpY2ggc2VydmVyIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBvbi5cclxuICAgKi9cclxuICBkZXN0aW5hdGlvbj86IGZoaXIuRmhpckludGVnZXJ8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24ub3BlcmF0aW9uLmRlc3RpbmF0aW9uXHJcbiAgICovXHJcbiAgX2Rlc3RpbmF0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byBpbXBsaWNpdGx5IHNlbmQgdGhlIHJlcXVlc3QgdXJsIGluIGVuY29kZWQgZm9ybWF0LiBUaGUgZGVmYXVsdCBpcyB0cnVlIHRvIG1hdGNoIHRoZSBzdGFuZGFyZCBSRVNUZnVsIGNsaWVudCBiZWhhdmlvci4gU2V0IHRvIGZhbHNlIHdoZW4gY29tbXVuaWNhdGluZyB3aXRoIGEgc2VydmVyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCBlbmNvZGVkIHVybCBwYXRocy5cclxuICAgKi9cclxuICBlbmNvZGVSZXF1ZXN0VXJsPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24ub3BlcmF0aW9uLmVuY29kZVJlcXVlc3RVcmxcclxuICAgKi9cclxuICBfZW5jb2RlUmVxdWVzdFVybD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGF0aCBwbHVzIHBhcmFtZXRlcnMgYWZ0ZXIgW3R5cGVdLiAgVXNlZCB0byBzZXQgcGFydHMgb2YgdGhlIHJlcXVlc3QgVVJMIGV4cGxpY2l0bHkuXHJcbiAgICovXHJcbiAgcGFyYW1zPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5wYXJhbXNcclxuICAgKi9cclxuICBfcGFyYW1zPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBIZWFkZXIgZWxlbWVudHMgd291bGQgYmUgdXNlZCB0byBzZXQgSFRUUCBoZWFkZXJzLlxyXG4gICAqL1xyXG4gIHJlcXVlc3RIZWFkZXI/OiBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvblJlcXVlc3RIZWFkZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmaXh0dXJlIGlkIChtYXliZSBuZXcpIHRvIG1hcCB0byB0aGUgcmVzcG9uc2UuXHJcbiAgICovXHJcbiAgcmVzcG9uc2VJZD86IGZoaXIuRmhpcklkfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5yZXNwb25zZUlkXHJcbiAgICovXHJcbiAgX3Jlc3BvbnNlSWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpZCBvZiB0aGUgZml4dHVyZSB1c2VkIGFzIHRoZSBib2R5IG9mIGEgUFVUIG9yIFBPU1QgcmVxdWVzdC5cclxuICAgKi9cclxuICBzb3VyY2VJZD86IGZoaXIuRmhpcklkfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi5zb3VyY2VJZFxyXG4gICAqL1xyXG4gIF9zb3VyY2VJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWQgb2YgZml4dHVyZSB1c2VkIGZvciBleHRyYWN0aW5nIHRoZSBbaWRdLCAgW3R5cGVdLCBhbmQgW3ZpZF0gZm9yIEdFVCByZXF1ZXN0cy5cclxuICAgKi9cclxuICB0YXJnZXRJZD86IGZoaXIuRmhpcklkfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi50YXJnZXRJZFxyXG4gICAqL1xyXG4gIF90YXJnZXRJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29tcGxldGUgcmVxdWVzdCBVUkwuXHJcbiAgICovXHJcbiAgdXJsPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLm9wZXJhdGlvbi51cmxcclxuICAgKi9cclxuICBfdXJsPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBvcGVyYXRpb24gdG8gcGVyZm9ybS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdUZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFNlcnZlciBpbnRlcmFjdGlvbiBvciBvcGVyYXRpb24gdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiB0aGUgcmVzb3VyY2UuICBTZWUgaHR0cDovL2hsNy1maGlyLmdpdGh1Yi5pby9yZXNvdXJjZWxpc3QuaHRtbC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzb3VyY2U/OiBmaGlyLkZoaXJDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGFiZWwgd291bGQgYmUgdXNlZCBmb3IgdHJhY2tpbmcvbG9nZ2luZyBwdXJwb3NlcyBieSB0ZXN0IGVuZ2luZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGxhYmVsPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGVzY3JpcHRpb24gd291bGQgYmUgdXNlZCBieSB0ZXN0IGVuZ2luZXMgZm9yIHRyYWNraW5nIGFuZCByZXBvcnRpbmcgcHVycG9zZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29udGVudC10eXBlIG9yIG1pbWUtdHlwZSB0byB1c2UgZm9yIFJFU1RmdWwgb3BlcmF0aW9uIGluIHRoZSAnQWNjZXB0JyBoZWFkZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGFjY2VwdD86IGZoaXIuRmhpckNvZGU8Q29udGVudFR5cGVDb2RlVHlwZT58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb250ZW50LXR5cGUgb3IgbWltZS10eXBlIHRvIHVzZSBmb3IgUkVTVGZ1bCBvcGVyYXRpb24gaW4gdGhlICdDb250ZW50LVR5cGUnIGhlYWRlci5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGVudFR5cGU/OiBmaGlyLkZoaXJDb2RlPENvbnRlbnRUeXBlQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGljaCBzZXJ2ZXIgdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uIG9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXN0aW5hdGlvbj86IGZoaXIuRmhpckludGVnZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRvIGltcGxpY2l0bHkgc2VuZCB0aGUgcmVxdWVzdCB1cmwgaW4gZW5jb2RlZCBmb3JtYXQuIFRoZSBkZWZhdWx0IGlzIHRydWUgdG8gbWF0Y2ggdGhlIHN0YW5kYXJkIFJFU1RmdWwgY2xpZW50IGJlaGF2aW9yLiBTZXQgdG8gZmFsc2Ugd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggYSBzZXJ2ZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IGVuY29kZWQgdXJsIHBhdGhzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmNvZGVSZXF1ZXN0VXJsPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGF0aCBwbHVzIHBhcmFtZXRlcnMgYWZ0ZXIgW3R5cGVdLiAgVXNlZCB0byBzZXQgcGFydHMgb2YgdGhlIHJlcXVlc3QgVVJMIGV4cGxpY2l0bHkuXHJcbiAgICovXHJcbiAgcHVibGljIHBhcmFtcz86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSGVhZGVyIGVsZW1lbnRzIHdvdWxkIGJlIHVzZWQgdG8gc2V0IEhUVFAgaGVhZGVycy5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdEhlYWRlcjogZmhpci5UZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb25SZXF1ZXN0SGVhZGVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlIGZpeHR1cmUgaWQgKG1heWJlIG5ldykgdG8gbWFwIHRvIHRoZSByZXNwb25zZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzcG9uc2VJZD86IGZoaXIuRmhpcklkfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgaWQgb2YgdGhlIGZpeHR1cmUgdXNlZCBhcyB0aGUgYm9keSBvZiBhIFBVVCBvciBQT1NUIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgcHVibGljIHNvdXJjZUlkPzogZmhpci5GaGlySWR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkIG9mIGZpeHR1cmUgdXNlZCBmb3IgZXh0cmFjdGluZyB0aGUgW2lkXSwgIFt0eXBlXSwgYW5kIFt2aWRdIGZvciBHRVQgcmVxdWVzdHMuXHJcbiAgICovXHJcbiAgcHVibGljIHRhcmdldElkPzogZmhpci5GaGlySWR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbXBsZXRlIHJlcXVlc3QgVVJMLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cmw/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS50eXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzb3VyY2UnXSkgeyB0aGlzLnJlc291cmNlID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UucmVzb3VyY2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3Jlc291cmNlJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVzb3VyY2UpIHsgdGhpcy5yZXNvdXJjZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZXNvdXJjZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlc291cmNlID0gbmV3IGZoaXIuRmhpckNvZGUoc291cmNlLl9yZXNvdXJjZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2xhYmVsJ10pIHsgdGhpcy5sYWJlbCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubGFiZWx9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2xhYmVsJ10pIHtcclxuICAgICAgaWYgKHRoaXMubGFiZWwpIHsgdGhpcy5sYWJlbC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9sYWJlbCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmxhYmVsID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2xhYmVsIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkZXNjcmlwdGlvbiddKSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZXNjcmlwdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uKSB7IHRoaXMuZGVzY3JpcHRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVzY3JpcHRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9kZXNjcmlwdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWNjZXB0J10pIHsgdGhpcy5hY2NlcHQgPSBuZXcgZmhpci5GaGlyQ29kZTxDb250ZW50VHlwZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5hY2NlcHR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2FjY2VwdCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmFjY2VwdCkgeyB0aGlzLmFjY2VwdC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9hY2NlcHQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5hY2NlcHQgPSBuZXcgZmhpci5GaGlyQ29kZTxDb250ZW50VHlwZUNvZGVUeXBlPihzb3VyY2UuX2FjY2VwdCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGVudFR5cGUnXSkgeyB0aGlzLmNvbnRlbnRUeXBlID0gbmV3IGZoaXIuRmhpckNvZGU8Q29udGVudFR5cGVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UuY29udGVudFR5cGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvbnRlbnRUeXBlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuY29udGVudFR5cGUpIHsgdGhpcy5jb250ZW50VHlwZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb250ZW50VHlwZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmNvbnRlbnRUeXBlID0gbmV3IGZoaXIuRmhpckNvZGU8Q29udGVudFR5cGVDb2RlVHlwZT4oc291cmNlLl9jb250ZW50VHlwZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzdGluYXRpb24nXSkgeyB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IGZoaXIuRmhpckludGVnZXIoe3ZhbHVlOiBzb3VyY2UuZGVzdGluYXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2Rlc3RpbmF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb24pIHsgdGhpcy5kZXN0aW5hdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kZXN0aW5hdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IGZoaXIuRmhpckludGVnZXIoc291cmNlLl9kZXN0aW5hdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckludGVnZXJBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2VuY29kZVJlcXVlc3RVcmwnXSkgeyB0aGlzLmVuY29kZVJlcXVlc3RVcmwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5lbmNvZGVSZXF1ZXN0VXJsfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19lbmNvZGVSZXF1ZXN0VXJsJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZW5jb2RlUmVxdWVzdFVybCkgeyB0aGlzLmVuY29kZVJlcXVlc3RVcmwuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZW5jb2RlUmVxdWVzdFVybCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmVuY29kZVJlcXVlc3RVcmwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2VuY29kZVJlcXVlc3RVcmwgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwYXJhbXMnXSkgeyB0aGlzLnBhcmFtcyA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGFyYW1zfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wYXJhbXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5wYXJhbXMpIHsgdGhpcy5wYXJhbXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcGFyYW1zISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucGFyYW1zID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3BhcmFtcyBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVxdWVzdEhlYWRlciddKSB7IHRoaXMucmVxdWVzdEhlYWRlciA9IHNvdXJjZS5yZXF1ZXN0SGVhZGVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uUmVxdWVzdEhlYWRlcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlcXVlc3RIZWFkZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzcG9uc2VJZCddKSB7IHRoaXMucmVzcG9uc2VJZCA9IG5ldyBmaGlyLkZoaXJJZCh7dmFsdWU6IHNvdXJjZS5yZXNwb25zZUlkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZXNwb25zZUlkJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVzcG9uc2VJZCkgeyB0aGlzLnJlc3BvbnNlSWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVzcG9uc2VJZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlc3BvbnNlSWQgPSBuZXcgZmhpci5GaGlySWQoc291cmNlLl9yZXNwb25zZUlkIGFzIFBhcnRpYWw8Zmhpci5GaGlySWRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZUlkJ10pIHsgdGhpcy5zb3VyY2VJZCA9IG5ldyBmaGlyLkZoaXJJZCh7dmFsdWU6IHNvdXJjZS5zb3VyY2VJZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfc291cmNlSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5zb3VyY2VJZCkgeyB0aGlzLnNvdXJjZUlkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NvdXJjZUlkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc291cmNlSWQgPSBuZXcgZmhpci5GaGlySWQoc291cmNlLl9zb3VyY2VJZCBhcyBQYXJ0aWFsPGZoaXIuRmhpcklkQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0YXJnZXRJZCddKSB7IHRoaXMudGFyZ2V0SWQgPSBuZXcgZmhpci5GaGlySWQoe3ZhbHVlOiBzb3VyY2UudGFyZ2V0SWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3RhcmdldElkJ10pIHtcclxuICAgICAgaWYgKHRoaXMudGFyZ2V0SWQpIHsgdGhpcy50YXJnZXRJZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl90YXJnZXRJZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnRhcmdldElkID0gbmV3IGZoaXIuRmhpcklkKHNvdXJjZS5fdGFyZ2V0SWQgYXMgUGFydGlhbDxmaGlyLkZoaXJJZEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndXJsJ10pIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnVybH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdXJsJ10pIHtcclxuICAgICAgaWYgKHRoaXMudXJsKSB7IHRoaXMudXJsLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3VybCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl91cmwgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5vcGVyYXRpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0eXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TVigncmVzb3VyY2UnLGV4cCwnRGVmaW5lZFR5cGVzJyxEZWZpbmVkVHlwZXNWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbGFiZWwnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rlc2NyaXB0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TVignYWNjZXB0JyxleHAsJ0NvbnRlbnRUeXBlJyxDb250ZW50VHlwZVZzVmFsaWRhdGlvbiwncicpKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TVignY29udGVudFR5cGUnLGV4cCwnQ29udGVudFR5cGUnLENvbnRlbnRUeXBlVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rlc3RpbmF0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdlbmNvZGVSZXF1ZXN0VXJsJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwYXJhbXMnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3JlcXVlc3RIZWFkZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3Jlc3BvbnNlSWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3NvdXJjZUlkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0YXJnZXRJZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygndXJsJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0U2V0dXBBY3Rpb25Bc3NlcnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFNjcmlwdFNldHVwQWN0aW9uQXNzZXJ0QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxhYmVsIHdvdWxkIGJlIHVzZWQgZm9yIHRyYWNraW5nL2xvZ2dpbmcgcHVycG9zZXMgYnkgdGVzdCBlbmdpbmVzLlxyXG4gICAqL1xyXG4gIGxhYmVsPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC5sYWJlbFxyXG4gICAqL1xyXG4gIF9sYWJlbD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRlc2NyaXB0aW9uIHdvdWxkIGJlIHVzZWQgYnkgdGVzdCBlbmdpbmVzIGZvciB0cmFja2luZyBhbmQgcmVwb3J0aW5nIHB1cnBvc2VzLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRpcmVjdGlvbiB0byB1c2UgZm9yIHRoZSBhc3NlcnRpb24uXHJcbiAgICovXHJcbiAgZGlyZWN0aW9uPzogZmhpci5GaGlyQ29kZTxBc3NlcnREaXJlY3Rpb25Db2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24uYXNzZXJ0LmRpcmVjdGlvblxyXG4gICAqL1xyXG4gIF9kaXJlY3Rpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElkIG9mIGZpeHR1cmUgdXNlZCB0byBjb21wYXJlIHRoZSBcInNvdXJjZUlkL3BhdGhcIiBldmFsdWF0aW9ucyB0by5cclxuICAgKi9cclxuICBjb21wYXJlVG9Tb3VyY2VJZD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5hc3NlcnQuY29tcGFyZVRvU291cmNlSWRcclxuICAgKi9cclxuICBfY29tcGFyZVRvU291cmNlSWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFhQYXRoIG9yIEpTT05QYXRoIGV4cHJlc3Npb24gYWdhaW5zdCBmaXh0dXJlIHVzZWQgdG8gY29tcGFyZSB0aGUgXCJzb3VyY2VJZC9wYXRoXCIgZXZhbHVhdGlvbnMgdG8uXHJcbiAgICovXHJcbiAgY29tcGFyZVRvU291cmNlUGF0aD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5hc3NlcnQuY29tcGFyZVRvU291cmNlUGF0aFxyXG4gICAqL1xyXG4gIF9jb21wYXJlVG9Tb3VyY2VQYXRoPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgY29udGVudC10eXBlIG9yIG1pbWUtdHlwZSB0byB1c2UgZm9yIFJFU1RmdWwgb3BlcmF0aW9uIGluIHRoZSAnQ29udGVudC1UeXBlJyBoZWFkZXIuXHJcbiAgICovXHJcbiAgY29udGVudFR5cGU/OiBmaGlyLkZoaXJDb2RlPENvbnRlbnRUeXBlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC5jb250ZW50VHlwZVxyXG4gICAqL1xyXG4gIF9jb250ZW50VHlwZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIEhUVFAgaGVhZGVyIGZpZWxkIG5hbWUgZS5nLiAnTG9jYXRpb24nLlxyXG4gICAqL1xyXG4gIGhlYWRlckZpZWxkPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC5oZWFkZXJGaWVsZFxyXG4gICAqL1xyXG4gIF9oZWFkZXJGaWVsZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIElEIG9mIGEgZml4dHVyZS4gIEFzc2VydHMgdGhhdCB0aGUgcmVzcG9uc2UgY29udGFpbnMgYXQgYSBtaW5pbXVtSWQgdGhlIGZpeHR1cmUgc3BlY2lmaWVkIGJ5IG1pbmltdW1JZC5cclxuICAgKi9cclxuICBtaW5pbXVtSWQ/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24uYXNzZXJ0Lm1pbmltdW1JZFxyXG4gICAqL1xyXG4gIF9taW5pbXVtSWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSB0ZXN0IGV4ZWN1dGlvbiBwZXJmb3JtcyB2YWxpZGF0aW9uIG9uIHRoZSBidW5kbGUgbmF2aWdhdGlvbiBsaW5rcy5cclxuICAgKi9cclxuICBuYXZpZ2F0aW9uTGlua3M/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5hc3NlcnQubmF2aWdhdGlvbkxpbmtzXHJcbiAgICovXHJcbiAgX25hdmlnYXRpb25MaW5rcz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIG9wZXJhdG9yIHR5cGUuXHJcbiAgICovXHJcbiAgb3BlcmF0b3I/OiBmaGlyLkZoaXJDb2RlPEFzc2VydE9wZXJhdG9yQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC5vcGVyYXRvclxyXG4gICAqL1xyXG4gIF9vcGVyYXRvcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIFhQYXRoIG9yIEpTT05QYXRoIGV4cHJlc3Npb24gdG8gYmUgZXZhbHVhdGVkIGFnYWluc3QgdGhlIGZpeHR1cmUgcmVwcmVzZW50aW5nIHRoZSByZXNwb25zZSByZWNlaXZlZCBmcm9tIHNlcnZlci5cclxuICAgKi9cclxuICBwYXRoPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC5wYXRoXHJcbiAgICovXHJcbiAgX3BhdGg/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoZSByZXNvdXJjZS4gIFNlZSBodHRwOi8vaGw3LWZoaXIuZ2l0aHViLmlvL3Jlc291cmNlbGlzdC5odG1sLlxyXG4gICAqL1xyXG4gIHJlc291cmNlPzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5hc3NlcnQucmVzb3VyY2VcclxuICAgKi9cclxuICBfcmVzb3VyY2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9rYXkgfCBjcmVhdGVkIHwgbm9Db250ZW50IHwgbm90TW9kaWZpZWQgfCBiYWQgfCBmb3JiaWRkZW4gfCBub3RGb3VuZCB8IG1ldGhvZE5vdEFsbG93ZWQgfCBjb25mbGljdCB8IGdvbmUgfCBwcmVjb25kaXRpb25GYWlsZWQgfCB1bnByb2Nlc3NhYmxlLlxyXG4gICAqL1xyXG4gIHJlc3BvbnNlPzogZmhpci5GaGlyQ29kZTxBc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnNldHVwLmFjdGlvbi5hc3NlcnQucmVzcG9uc2VcclxuICAgKi9cclxuICBfcmVzcG9uc2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgSFRUUCByZXNwb25zZSBjb2RlIHRvIGJlIHRlc3RlZC5cclxuICAgKi9cclxuICByZXNwb25zZUNvZGU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24uYXNzZXJ0LnJlc3BvbnNlQ29kZVxyXG4gICAqL1xyXG4gIF9yZXNwb25zZUNvZGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEZpeHR1cmUgdG8gZXZhbHVhdGUgdGhlIFhQYXRoL0pTT05QYXRoIGV4cHJlc3Npb24gb3IgdGhlIGhlYWRlckZpZWxkICBhZ2FpbnN0LlxyXG4gICAqL1xyXG4gIHNvdXJjZUlkPzogZmhpci5GaGlySWR8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24uYXNzZXJ0LnNvdXJjZUlkXHJcbiAgICovXHJcbiAgX3NvdXJjZUlkPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgSUQgb2YgdGhlIFByb2ZpbGUgdG8gdmFsaWRhdGUgYWdhaW5zdC5cclxuICAgKi9cclxuICB2YWxpZGF0ZVByb2ZpbGVJZD86IGZoaXIuRmhpcklkfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC52YWxpZGF0ZVByb2ZpbGVJZFxyXG4gICAqL1xyXG4gIF92YWxpZGF0ZVByb2ZpbGVJZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIHRvIGNvbXBhcmUgdG8uXHJcbiAgICovXHJcbiAgdmFsdWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5zZXR1cC5hY3Rpb24uYXNzZXJ0LnZhbHVlXHJcbiAgICovXHJcbiAgX3ZhbHVlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgdGVzdCBleGVjdXRpb24gd2lsbCBwcm9kdWNlIGEgd2FybmluZyBvbmx5IG9uIGVycm9yIGZvciB0aGlzIGFzc2VydC5cclxuICAgKi9cclxuICB3YXJuaW5nT25seT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydC53YXJuaW5nT25seVxyXG4gICAqL1xyXG4gIF93YXJuaW5nT25seT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFdmFsdWF0ZXMgdGhlIHJlc3VsdHMgb2YgcHJldmlvdXMgb3BlcmF0aW9ucyB0byBkZXRlcm1pbmUgaWYgdGhlIHNlcnZlciB1bmRlciB0ZXN0IGJlaGF2ZXMgYXBwcm9wcmlhdGVseS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXN0U2NyaXB0U2V0dXBBY3Rpb25Bc3NlcnQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdUZXN0U2NyaXB0U2V0dXBBY3Rpb25Bc3NlcnQnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsYWJlbCB3b3VsZCBiZSB1c2VkIGZvciB0cmFja2luZy9sb2dnaW5nIHB1cnBvc2VzIGJ5IHRlc3QgZW5naW5lcy5cclxuICAgKi9cclxuICBwdWJsaWMgbGFiZWw/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNjcmlwdGlvbiB3b3VsZCBiZSB1c2VkIGJ5IHRlc3QgZW5naW5lcyBmb3IgdHJhY2tpbmcgYW5kIHJlcG9ydGluZyBwdXJwb3Nlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkaXJlY3Rpb24gdG8gdXNlIGZvciB0aGUgYXNzZXJ0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXJlY3Rpb24/OiBmaGlyLkZoaXJDb2RlPEFzc2VydERpcmVjdGlvbkNvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWQgb2YgZml4dHVyZSB1c2VkIHRvIGNvbXBhcmUgdGhlIFwic291cmNlSWQvcGF0aFwiIGV2YWx1YXRpb25zIHRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wYXJlVG9Tb3VyY2VJZD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogWFBhdGggb3IgSlNPTlBhdGggZXhwcmVzc2lvbiBhZ2FpbnN0IGZpeHR1cmUgdXNlZCB0byBjb21wYXJlIHRoZSBcInNvdXJjZUlkL3BhdGhcIiBldmFsdWF0aW9ucyB0by5cclxuICAgKi9cclxuICBwdWJsaWMgY29tcGFyZVRvU291cmNlUGF0aD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbnRlbnQtdHlwZSBvciBtaW1lLXR5cGUgdG8gdXNlIGZvciBSRVNUZnVsIG9wZXJhdGlvbiBpbiB0aGUgJ0NvbnRlbnQtVHlwZScgaGVhZGVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250ZW50VHlwZT86IGZoaXIuRmhpckNvZGU8Q29udGVudFR5cGVDb2RlVHlwZT58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBIVFRQIGhlYWRlciBmaWVsZCBuYW1lIGUuZy4gJ0xvY2F0aW9uJy5cclxuICAgKi9cclxuICBwdWJsaWMgaGVhZGVyRmllbGQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJRCBvZiBhIGZpeHR1cmUuICBBc3NlcnRzIHRoYXQgdGhlIHJlc3BvbnNlIGNvbnRhaW5zIGF0IGEgbWluaW11bUlkIHRoZSBmaXh0dXJlIHNwZWNpZmllZCBieSBtaW5pbXVtSWQuXHJcbiAgICovXHJcbiAgcHVibGljIG1pbmltdW1JZD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBvciBub3QgdGhlIHRlc3QgZXhlY3V0aW9uIHBlcmZvcm1zIHZhbGlkYXRpb24gb24gdGhlIGJ1bmRsZSBuYXZpZ2F0aW9uIGxpbmtzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYXZpZ2F0aW9uTGlua3M/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgb3BlcmF0b3IgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgb3BlcmF0b3I/OiBmaGlyLkZoaXJDb2RlPEFzc2VydE9wZXJhdG9yQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgWFBhdGggb3IgSlNPTlBhdGggZXhwcmVzc2lvbiB0byBiZSBldmFsdWF0ZWQgYWdhaW5zdCB0aGUgZml4dHVyZSByZXByZXNlbnRpbmcgdGhlIHJlc3BvbnNlIHJlY2VpdmVkIGZyb20gc2VydmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXRoPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiB0aGUgcmVzb3VyY2UuICBTZWUgaHR0cDovL2hsNy1maGlyLmdpdGh1Yi5pby9yZXNvdXJjZWxpc3QuaHRtbC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzb3VyY2U/OiBmaGlyLkZoaXJDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBva2F5IHwgY3JlYXRlZCB8IG5vQ29udGVudCB8IG5vdE1vZGlmaWVkIHwgYmFkIHwgZm9yYmlkZGVuIHwgbm90Rm91bmQgfCBtZXRob2ROb3RBbGxvd2VkIHwgY29uZmxpY3QgfCBnb25lIHwgcHJlY29uZGl0aW9uRmFpbGVkIHwgdW5wcm9jZXNzYWJsZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzcG9uc2U/OiBmaGlyLkZoaXJDb2RlPEFzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIEhUVFAgcmVzcG9uc2UgY29kZSB0byBiZSB0ZXN0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc3BvbnNlQ29kZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRml4dHVyZSB0byBldmFsdWF0ZSB0aGUgWFBhdGgvSlNPTlBhdGggZXhwcmVzc2lvbiBvciB0aGUgaGVhZGVyRmllbGQgIGFnYWluc3QuXHJcbiAgICovXHJcbiAgcHVibGljIHNvdXJjZUlkPzogZmhpci5GaGlySWR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJRCBvZiB0aGUgUHJvZmlsZSB0byB2YWxpZGF0ZSBhZ2FpbnN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2YWxpZGF0ZVByb2ZpbGVJZD86IGZoaXIuRmhpcklkfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgdG8gY29tcGFyZSB0by5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSB0ZXN0IGV4ZWN1dGlvbiB3aWxsIHByb2R1Y2UgYSB3YXJuaW5nIG9ubHkgb24gZXJyb3IgZm9yIHRoaXMgYXNzZXJ0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB3YXJuaW5nT25seT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFRlc3RTY3JpcHRTZXR1cEFjdGlvbkFzc2VydCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRlc3RTY3JpcHRTZXR1cEFjdGlvbkFzc2VydEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydsYWJlbCddKSB7IHRoaXMubGFiZWwgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmxhYmVsfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19sYWJlbCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmxhYmVsKSB7IHRoaXMubGFiZWwuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbGFiZWwhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5sYWJlbCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9sYWJlbCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fZGVzY3JpcHRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RpcmVjdGlvbiddKSB7IHRoaXMuZGlyZWN0aW9uID0gbmV3IGZoaXIuRmhpckNvZGU8QXNzZXJ0RGlyZWN0aW9uQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLmRpcmVjdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGlyZWN0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uKSB7IHRoaXMuZGlyZWN0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RpcmVjdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRpcmVjdGlvbiA9IG5ldyBmaGlyLkZoaXJDb2RlPEFzc2VydERpcmVjdGlvbkNvZGVUeXBlPihzb3VyY2UuX2RpcmVjdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tcGFyZVRvU291cmNlSWQnXSkgeyB0aGlzLmNvbXBhcmVUb1NvdXJjZUlkID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5jb21wYXJlVG9Tb3VyY2VJZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29tcGFyZVRvU291cmNlSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5jb21wYXJlVG9Tb3VyY2VJZCkgeyB0aGlzLmNvbXBhcmVUb1NvdXJjZUlkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvbXBhcmVUb1NvdXJjZUlkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuY29tcGFyZVRvU291cmNlSWQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fY29tcGFyZVRvU291cmNlSWQgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbXBhcmVUb1NvdXJjZVBhdGgnXSkgeyB0aGlzLmNvbXBhcmVUb1NvdXJjZVBhdGggPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmNvbXBhcmVUb1NvdXJjZVBhdGh9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvbXBhcmVUb1NvdXJjZVBhdGgnXSkge1xyXG4gICAgICBpZiAodGhpcy5jb21wYXJlVG9Tb3VyY2VQYXRoKSB7IHRoaXMuY29tcGFyZVRvU291cmNlUGF0aC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb21wYXJlVG9Tb3VyY2VQYXRoISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuY29tcGFyZVRvU291cmNlUGF0aCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9jb21wYXJlVG9Tb3VyY2VQYXRoIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb250ZW50VHlwZSddKSB7IHRoaXMuY29udGVudFR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZTxDb250ZW50VHlwZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5jb250ZW50VHlwZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29udGVudFR5cGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5jb250ZW50VHlwZSkgeyB0aGlzLmNvbnRlbnRUeXBlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvbnRlbnRUeXBlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuY29udGVudFR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZTxDb250ZW50VHlwZUNvZGVUeXBlPihzb3VyY2UuX2NvbnRlbnRUeXBlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydoZWFkZXJGaWVsZCddKSB7IHRoaXMuaGVhZGVyRmllbGQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmhlYWRlckZpZWxkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19oZWFkZXJGaWVsZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmhlYWRlckZpZWxkKSB7IHRoaXMuaGVhZGVyRmllbGQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5faGVhZGVyRmllbGQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5oZWFkZXJGaWVsZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9oZWFkZXJGaWVsZCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWluaW11bUlkJ10pIHsgdGhpcy5taW5pbXVtSWQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm1pbmltdW1JZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbWluaW11bUlkJ10pIHtcclxuICAgICAgaWYgKHRoaXMubWluaW11bUlkKSB7IHRoaXMubWluaW11bUlkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX21pbmltdW1JZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm1pbmltdW1JZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9taW5pbXVtSWQgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ25hdmlnYXRpb25MaW5rcyddKSB7IHRoaXMubmF2aWdhdGlvbkxpbmtzID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UubmF2aWdhdGlvbkxpbmtzfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19uYXZpZ2F0aW9uTGlua3MnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYXZpZ2F0aW9uTGlua3MpIHsgdGhpcy5uYXZpZ2F0aW9uTGlua3MuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbmF2aWdhdGlvbkxpbmtzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmF2aWdhdGlvbkxpbmtzID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9uYXZpZ2F0aW9uTGlua3MgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydvcGVyYXRvciddKSB7IHRoaXMub3BlcmF0b3IgPSBuZXcgZmhpci5GaGlyQ29kZTxBc3NlcnRPcGVyYXRvckNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5vcGVyYXRvcn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfb3BlcmF0b3InXSkge1xyXG4gICAgICBpZiAodGhpcy5vcGVyYXRvcikgeyB0aGlzLm9wZXJhdG9yLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX29wZXJhdG9yISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMub3BlcmF0b3IgPSBuZXcgZmhpci5GaGlyQ29kZTxBc3NlcnRPcGVyYXRvckNvZGVUeXBlPihzb3VyY2UuX29wZXJhdG9yIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwYXRoJ10pIHsgdGhpcy5wYXRoID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5wYXRofSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wYXRoJ10pIHtcclxuICAgICAgaWYgKHRoaXMucGF0aCkgeyB0aGlzLnBhdGguYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcGF0aCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnBhdGggPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fcGF0aCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzb3VyY2UnXSkgeyB0aGlzLnJlc291cmNlID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UucmVzb3VyY2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3Jlc291cmNlJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVzb3VyY2UpIHsgdGhpcy5yZXNvdXJjZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZXNvdXJjZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlc291cmNlID0gbmV3IGZoaXIuRmhpckNvZGUoc291cmNlLl9yZXNvdXJjZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3Jlc3BvbnNlJ10pIHsgdGhpcy5yZXNwb25zZSA9IG5ldyBmaGlyLkZoaXJDb2RlPEFzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnJlc3BvbnNlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZXNwb25zZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlc3BvbnNlKSB7IHRoaXMucmVzcG9uc2UuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVzcG9uc2UhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZXNwb25zZSA9IG5ldyBmaGlyLkZoaXJDb2RlPEFzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kZVR5cGU+KHNvdXJjZS5fcmVzcG9uc2UgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3Jlc3BvbnNlQ29kZSddKSB7IHRoaXMucmVzcG9uc2VDb2RlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5yZXNwb25zZUNvZGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3Jlc3BvbnNlQ29kZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlc3BvbnNlQ29kZSkgeyB0aGlzLnJlc3BvbnNlQ29kZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZXNwb25zZUNvZGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZXNwb25zZUNvZGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fcmVzcG9uc2VDb2RlIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzb3VyY2VJZCddKSB7IHRoaXMuc291cmNlSWQgPSBuZXcgZmhpci5GaGlySWQoe3ZhbHVlOiBzb3VyY2Uuc291cmNlSWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3NvdXJjZUlkJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc291cmNlSWQpIHsgdGhpcy5zb3VyY2VJZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zb3VyY2VJZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnNvdXJjZUlkID0gbmV3IGZoaXIuRmhpcklkKHNvdXJjZS5fc291cmNlSWQgYXMgUGFydGlhbDxmaGlyLkZoaXJJZEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmFsaWRhdGVQcm9maWxlSWQnXSkgeyB0aGlzLnZhbGlkYXRlUHJvZmlsZUlkID0gbmV3IGZoaXIuRmhpcklkKHt2YWx1ZTogc291cmNlLnZhbGlkYXRlUHJvZmlsZUlkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ192YWxpZGF0ZVByb2ZpbGVJZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRlUHJvZmlsZUlkKSB7IHRoaXMudmFsaWRhdGVQcm9maWxlSWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdmFsaWRhdGVQcm9maWxlSWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52YWxpZGF0ZVByb2ZpbGVJZCA9IG5ldyBmaGlyLkZoaXJJZChzb3VyY2UuX3ZhbGlkYXRlUHJvZmlsZUlkIGFzIFBhcnRpYWw8Zmhpci5GaGlySWRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhbHVlJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmFsdWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ZhbHVlJ10pIHtcclxuICAgICAgaWYgKHRoaXMudmFsdWUpIHsgdGhpcy52YWx1ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl92YWx1ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3ZhbHVlIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd3YXJuaW5nT25seSddKSB7IHRoaXMud2FybmluZ09ubHkgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS53YXJuaW5nT25seX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfd2FybmluZ09ubHknXSkge1xyXG4gICAgICBpZiAodGhpcy53YXJuaW5nT25seSkgeyB0aGlzLndhcm5pbmdPbmx5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3dhcm5pbmdPbmx5ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMud2FybmluZ09ubHkgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3dhcm5pbmdPbmx5IGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQuc2V0dXAuYWN0aW9uLmFzc2VydCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2xhYmVsJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkZXNjcmlwdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ2RpcmVjdGlvbicsZXhwLCdBc3NlcnREaXJlY3Rpb24nLEFzc2VydERpcmVjdGlvblZzVmFsaWRhdGlvbiwncicpKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdjb21wYXJlVG9Tb3VyY2VJZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnY29tcGFyZVRvU291cmNlUGF0aCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ2NvbnRlbnRUeXBlJyxleHAsJ0NvbnRlbnRUeXBlJyxDb250ZW50VHlwZVZzVmFsaWRhdGlvbiwncicpKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdoZWFkZXJGaWVsZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbWluaW11bUlkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCduYXZpZ2F0aW9uTGlua3MnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1NWKCdvcGVyYXRvcicsZXhwLCdBc3NlcnRPcGVyYXRvcicsQXNzZXJ0T3BlcmF0b3JWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygncGF0aCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ3Jlc291cmNlJyxleHAsJ0RlZmluZWRUeXBlcycsRGVmaW5lZFR5cGVzVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1NWKCdyZXNwb25zZScsZXhwLCdBc3NlcnRSZXNwb25zZUNvZGVUeXBlcycsQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygncmVzcG9uc2VDb2RlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzb3VyY2VJZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygndmFsaWRhdGVQcm9maWxlSWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3ZhbHVlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd3YXJuaW5nT25seScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVGVzdFNjcmlwdFNldHVwQWN0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RTY3JpcHRTZXR1cEFjdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcGVyYXRpb24gdG8gcGVyZm9ybS5cclxuICAgKi9cclxuICBvcGVyYXRpb24/OiBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV2YWx1YXRlcyB0aGUgcmVzdWx0cyBvZiBwcmV2aW91cyBvcGVyYXRpb25zIHRvIGRldGVybWluZSBpZiB0aGUgc2VydmVyIHVuZGVyIHRlc3QgYmVoYXZlcyBhcHByb3ByaWF0ZWx5LlxyXG4gICAqL1xyXG4gIGFzc2VydD86IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uQXNzZXJ0QXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gd291bGQgY29udGFpbiBlaXRoZXIgYW4gb3BlcmF0aW9uIG9yIGFuIGFzc2VydGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXN0U2NyaXB0U2V0dXBBY3Rpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdUZXN0U2NyaXB0U2V0dXBBY3Rpb24nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcGVyYXRpb24gdG8gcGVyZm9ybS5cclxuICAgKi9cclxuICBwdWJsaWMgb3BlcmF0aW9uPzogZmhpci5UZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV2YWx1YXRlcyB0aGUgcmVzdWx0cyBvZiBwcmV2aW91cyBvcGVyYXRpb25zIHRvIGRldGVybWluZSBpZiB0aGUgc2VydmVyIHVuZGVyIHRlc3QgYmVoYXZlcyBhcHByb3ByaWF0ZWx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3NlcnQ/OiBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbkFzc2VydHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVGVzdFNjcmlwdFNldHVwQWN0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGVzdFNjcmlwdFNldHVwQWN0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ29wZXJhdGlvbiddKSB7IHRoaXMub3BlcmF0aW9uID0gbmV3IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uKHNvdXJjZS5vcGVyYXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydhc3NlcnQnXSkgeyB0aGlzLmFzc2VydCA9IG5ldyBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbkFzc2VydChzb3VyY2UuYXNzZXJ0KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQuc2V0dXAuYWN0aW9uJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnb3BlcmF0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhc3NlcnQnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFRlc3RTY3JpcHRTZXR1cCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0U2NyaXB0U2V0dXBBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBDYXBhYmlsaXRpZXMgdGhhdCBtdXN0IGV4aXN0IGFuZCBhcmUgYXNzdW1lZCB0byBmdW5jdGlvbiBjb3JyZWN0bHkgb24gdGhlIEZISVIgc2VydmVyIGJlaW5nIHRlc3RlZC5cclxuICAgKi9cclxuICBtZXRhZGF0YT86IGZoaXIuVGVzdFNjcmlwdE1ldGFkYXRhQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWN0aW9uIHdvdWxkIGNvbnRhaW4gZWl0aGVyIGFuIG9wZXJhdGlvbiBvciBhbiBhc3NlcnRpb24uXHJcbiAgICovXHJcbiAgYWN0aW9uOiBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbkFyZ3NbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXJpZXMgb2YgcmVxdWlyZWQgc2V0dXAgb3BlcmF0aW9ucyBiZWZvcmUgdGVzdHMgYXJlIGV4ZWN1dGVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRTZXR1cCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHRTZXR1cCc7XHJcbiAgLyoqXHJcbiAgICogQ2FwYWJpbGl0aWVzIHRoYXQgbXVzdCBleGlzdCBhbmQgYXJlIGFzc3VtZWQgdG8gZnVuY3Rpb24gY29ycmVjdGx5IG9uIHRoZSBGSElSIHNlcnZlciBiZWluZyB0ZXN0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIG1ldGFkYXRhPzogZmhpci5UZXN0U2NyaXB0TWV0YWRhdGF8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFjdGlvbiB3b3VsZCBjb250YWluIGVpdGhlciBhbiBvcGVyYXRpb24gb3IgYW4gYXNzZXJ0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhY3Rpb246IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVGVzdFNjcmlwdFNldHVwIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGVzdFNjcmlwdFNldHVwQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ21ldGFkYXRhJ10pIHsgdGhpcy5tZXRhZGF0YSA9IG5ldyBmaGlyLlRlc3RTY3JpcHRNZXRhZGF0YShzb3VyY2UubWV0YWRhdGEpOyB9XHJcbiAgICBpZiAoc291cmNlWydhY3Rpb24nXSkgeyB0aGlzLmFjdGlvbiA9IHNvdXJjZS5hY3Rpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5UZXN0U2NyaXB0U2V0dXBBY3Rpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hY3Rpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQuc2V0dXAnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdtZXRhZGF0YScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSQSgnYWN0aW9uJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0VGVzdEFjdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0U2NyaXB0VGVzdEFjdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdGlvbiB3b3VsZCBpbnZvbHZlIGEgUkVTVCByZXF1ZXN0IHRvIGEgc2VydmVyLlxyXG4gICAqL1xyXG4gIG9wZXJhdGlvbj86IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXZhbHVhdGVzIHRoZSByZXN1bHRzIG9mIHByZXZpb3VzIG9wZXJhdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzZXJ2ZXIgdW5kZXIgdGVzdCBiZWhhdmVzIGFwcHJvcHJpYXRlbHkuXHJcbiAgICovXHJcbiAgYXNzZXJ0PzogZmhpci5UZXN0U2NyaXB0U2V0dXBBY3Rpb25Bc3NlcnRBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiB3b3VsZCBjb250YWluIGVpdGhlciBhbiBvcGVyYXRpb24gb3IgYW4gYXNzZXJ0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRUZXN0QWN0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVGVzdFNjcmlwdFRlc3RBY3Rpb24nO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdGlvbiB3b3VsZCBpbnZvbHZlIGEgUkVTVCByZXF1ZXN0IHRvIGEgc2VydmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcGVyYXRpb24/OiBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXZhbHVhdGVzIHRoZSByZXN1bHRzIG9mIHByZXZpb3VzIG9wZXJhdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzZXJ2ZXIgdW5kZXIgdGVzdCBiZWhhdmVzIGFwcHJvcHJpYXRlbHkuXHJcbiAgICovXHJcbiAgcHVibGljIGFzc2VydD86IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uQXNzZXJ0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0VGVzdEFjdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRlc3RTY3JpcHRUZXN0QWN0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ29wZXJhdGlvbiddKSB7IHRoaXMub3BlcmF0aW9uID0gbmV3IGZoaXIuVGVzdFNjcmlwdFNldHVwQWN0aW9uT3BlcmF0aW9uKHNvdXJjZS5vcGVyYXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydhc3NlcnQnXSkgeyB0aGlzLmFzc2VydCA9IG5ldyBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbkFzc2VydChzb3VyY2UuYXNzZXJ0KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQudGVzdC5hY3Rpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdvcGVyYXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Fzc2VydCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVGVzdFNjcmlwdFRlc3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFNjcmlwdFRlc3RBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIHRlc3QgdXNlZCBmb3IgdHJhY2tpbmcvbG9nZ2luZyBwdXJwb3NlcyBieSB0ZXN0IGVuZ2luZXMuXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnRlc3QubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSB0ZXN0IHVzZWQgYnkgdGVzdCBlbmdpbmVzIGZvciB0cmFja2luZyBhbmQgcmVwb3J0aW5nIHB1cnBvc2VzLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQudGVzdC5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ2FwYWJpbGl0aWVzIHRoYXQgbXVzdCBleGlzdCBhbmQgYXJlIGFzc3VtZWQgdG8gZnVuY3Rpb24gY29ycmVjdGx5IG9uIHRoZSBGSElSIHNlcnZlciBiZWluZyB0ZXN0ZWQuXHJcbiAgICovXHJcbiAgbWV0YWRhdGE/OiBmaGlyLlRlc3RTY3JpcHRNZXRhZGF0YUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFjdGlvbiB3b3VsZCBjb250YWluIGVpdGhlciBhbiBvcGVyYXRpb24gb3IgYW4gYXNzZXJ0aW9uLlxyXG4gICAqL1xyXG4gIGFjdGlvbjogZmhpci5UZXN0U2NyaXB0VGVzdEFjdGlvbkFyZ3NbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQSB0ZXN0IGluIHRoaXMgc2NyaXB0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRUZXN0IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVGVzdFNjcmlwdFRlc3QnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgdGVzdCB1c2VkIGZvciB0cmFja2luZy9sb2dnaW5nIHB1cnBvc2VzIGJ5IHRlc3QgZW5naW5lcy5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCB1c2VkIGJ5IHRlc3QgZW5naW5lcyBmb3IgdHJhY2tpbmcgYW5kIHJlcG9ydGluZyBwdXJwb3Nlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENhcGFiaWxpdGllcyB0aGF0IG11c3QgZXhpc3QgYW5kIGFyZSBhc3N1bWVkIHRvIGZ1bmN0aW9uIGNvcnJlY3RseSBvbiB0aGUgRkhJUiBzZXJ2ZXIgYmVpbmcgdGVzdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZXRhZGF0YT86IGZoaXIuVGVzdFNjcmlwdE1ldGFkYXRhfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBY3Rpb24gd291bGQgY29udGFpbiBlaXRoZXIgYW4gb3BlcmF0aW9uIG9yIGFuIGFzc2VydGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYWN0aW9uOiBmaGlyLlRlc3RTY3JpcHRUZXN0QWN0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVGVzdFNjcmlwdFRlc3QgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxUZXN0U2NyaXB0VGVzdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5uYW1lfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19uYW1lJ10pIHtcclxuICAgICAgaWYgKHRoaXMubmFtZSkgeyB0aGlzLm5hbWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbmFtZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbmFtZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fZGVzY3JpcHRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ21ldGFkYXRhJ10pIHsgdGhpcy5tZXRhZGF0YSA9IG5ldyBmaGlyLlRlc3RTY3JpcHRNZXRhZGF0YShzb3VyY2UubWV0YWRhdGEpOyB9XHJcbiAgICBpZiAoc291cmNlWydhY3Rpb24nXSkgeyB0aGlzLmFjdGlvbiA9IHNvdXJjZS5hY3Rpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5UZXN0U2NyaXB0VGVzdEFjdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFjdGlvbiA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnVGVzdFNjcmlwdC50ZXN0JyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbmFtZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZGVzY3JpcHRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ21ldGFkYXRhJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJBKCdhY3Rpb24nLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFRlc3RTY3JpcHRUZWFyZG93bkFjdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0U2NyaXB0VGVhcmRvd25BY3Rpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBBbiBvcGVyYXRpb24gd291bGQgaW52b2x2ZSBhIFJFU1QgcmVxdWVzdCB0byBhIHNlcnZlci5cclxuICAgKi9cclxuICBvcGVyYXRpb24/OiBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHRlYXJkb3duIGFjdGlvbiB3aWxsIG9ubHkgY29udGFpbiBhbiBvcGVyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGVzdFNjcmlwdFRlYXJkb3duQWN0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVGVzdFNjcmlwdFRlYXJkb3duQWN0aW9uJztcclxuICAvKipcclxuICAgKiBBbiBvcGVyYXRpb24gd291bGQgaW52b2x2ZSBhIFJFU1QgcmVxdWVzdCB0byBhIHNlcnZlci5cclxuICAgKi9cclxuICBwdWJsaWMgb3BlcmF0aW9uPzogZmhpci5UZXN0U2NyaXB0U2V0dXBBY3Rpb25PcGVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFRlc3RTY3JpcHRUZWFyZG93bkFjdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRlc3RTY3JpcHRUZWFyZG93bkFjdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydvcGVyYXRpb24nXSkgeyB0aGlzLm9wZXJhdGlvbiA9IG5ldyBmaGlyLlRlc3RTY3JpcHRTZXR1cEFjdGlvbk9wZXJhdGlvbihzb3VyY2Uub3BlcmF0aW9uKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1Rlc3RTY3JpcHQudGVhcmRvd24uYWN0aW9uJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnb3BlcmF0aW9uJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0VGVhcmRvd24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFNjcmlwdFRlYXJkb3duQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRlYXJkb3duIGFjdGlvbiB3aWxsIG9ubHkgY29udGFpbiBhbiBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgYWN0aW9uOiBmaGlyLlRlc3RTY3JpcHRUZWFyZG93bkFjdGlvbkFyZ3NbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXJpZXMgb2Ygb3BlcmF0aW9ucyByZXF1aXJlZCB0byBjbGVhbiB1cCBhZnRlciB0aGUgYWxsIHRoZSB0ZXN0cyBhcmUgZXhlY3V0ZWQgKHN1Y2Nlc3NmdWxseSBvciBvdGhlcndpc2UpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHRUZWFyZG93biBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHRUZWFyZG93bic7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRlYXJkb3duIGFjdGlvbiB3aWxsIG9ubHkgY29udGFpbiBhbiBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGFjdGlvbjogZmhpci5UZXN0U2NyaXB0VGVhcmRvd25BY3Rpb25bXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0VGVhcmRvd24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxUZXN0U2NyaXB0VGVhcmRvd25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnYWN0aW9uJ10pIHsgdGhpcy5hY3Rpb24gPSBzb3VyY2UuYWN0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuVGVzdFNjcmlwdFRlYXJkb3duQWN0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWN0aW9uID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdUZXN0U2NyaXB0LnRlYXJkb3duJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSQSgnYWN0aW9uJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBUZXN0U2NyaXB0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RTY3JpcHRBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJUZXN0U2NyaXB0XCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIGFic29sdXRlIFVSTCB0aGF0IGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhpcyBUZXN0IFNjcmlwdC4gVGhpcyBTSEFMTCBiZSBhIFVSTCwgU0hPVUxEIGJlIGdsb2JhbGx5IHVuaXF1ZSwgYW5kIFNIT1VMRCBiZSBhbiBhZGRyZXNzIGF0IHdoaWNoIHRoaXMgVGVzdCBTY3JpcHQgaXMgKG9yIHdpbGwgYmUpIHB1Ymxpc2hlZC5cclxuICAgKi9cclxuICB1cmw6IGZoaXIuRmhpclVyaXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnVybFxyXG4gICAqL1xyXG4gIF91cmw/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBtdWx0aXBsZSByZXNvdXJjZSB2ZXJzaW9ucyBvZiB0aGUgVGVzdFNjcmlwdCB0aGF0IGhhdmUgdGhpcyBzYW1lIGlkZW50aWZpZXIuIFRoZSByZXNvdXJjZSB2ZXJzaW9uIGlkIHdpbGwgY2hhbmdlIGZvciB0ZWNobmljYWwgcmVhc29ucywgd2hlcmVhcyB0aGUgc3RhdGVkIHZlcnNpb24gbnVtYmVyIG5lZWRzIHRvIGJlIHVuZGVyIHRoZSBhdXRob3IncyBjb250cm9sLlxyXG4gICAqL1xyXG4gIHZlcnNpb24/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC52ZXJzaW9uXHJcbiAgICovXHJcbiAgX3ZlcnNpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgZnJlZSB0ZXh0IG5hdHVyYWwgbGFuZ3VhZ2UgbmFtZSBpZGVudGlmeWluZyB0aGUgVGVzdFNjcmlwdC5cclxuICAgKi9cclxuICBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgVGVzdFNjcmlwdHMgdGhhdCBhcmUgYXBwcm9wcmlhdGUgZm9yIHVzZSB2cy4gbm90LlxyXG4gICAqL1xyXG4gIHN0YXR1czogZmhpci5GaGlyQ29kZTxDb25mb3JtYW5jZVJlc291cmNlU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllciBmb3IgdGhlIFRlc3RTY3JpcHQgYXNzaWduZWQgZm9yIGV4dGVybmFsIHB1cnBvc2VzIG91dHNpZGUgdGhlIGNvbnRleHQgb2YgRkhJUi5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiBUZXN0U2NyaXB0cyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZzLiBub3QuXHJcbiAgICovXHJcbiAgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVzdFNjcmlwdC5leHBlcmltZW50YWxcclxuICAgKi9cclxuICBfZXhwZXJpbWVudGFsPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBIZWxwcyBlc3RhYmxpc2ggdGhlIFwiYXV0aG9yaXR5L2NyZWRpYmlsaXR5XCIgb2YgdGhlIFRlc3QgU2NyaXB0LiAgTWF5IGFsc28gYWxsb3cgZm9yIGNvbnRhY3QuXHJcbiAgICovXHJcbiAgcHVibGlzaGVyPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQucHVibGlzaGVyXHJcbiAgICovXHJcbiAgX3B1Ymxpc2hlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29udGFjdHMgdG8gYXNzaXN0IGEgdXNlciBpbiBmaW5kaW5nIGFuZCBjb21tdW5pY2F0aW5nIHdpdGggdGhlIHB1Ymxpc2hlci5cclxuICAgKi9cclxuICBjb250YWN0PzogZmhpci5UZXN0U2NyaXB0Q29udGFjdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRhdGUgdGhpcyB2ZXJzaW9uIG9mIHRoZSB0ZXN0IHRjcmlwdCB3YXMgcHVibGlzaGVkLiBUaGUgZGF0ZSBtdXN0IGNoYW5nZSB3aGVuIHRoZSBidXNpbmVzcyB2ZXJzaW9uIGNoYW5nZXMsIGlmIGl0IGRvZXMsIGFuZCBpdCBtdXN0IGNoYW5nZSBpZiB0aGUgc3RhdHVzIGNvZGUgY2hhbmdlcy4gSW4gYWRkaXRpb24sIGl0IHNob3VsZCBjaGFuZ2Ugd2hlbiB0aGUgc3Vic3RhbnRpdmUgY29udGVudCBvZiB0aGUgdGVzdCBjYXNlcyBjaGFuZ2UuXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuZGF0ZVxyXG4gICAqL1xyXG4gIF9kYXRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIGZyZWUgdGV4dCBuYXR1cmFsIGxhbmd1YWdlIGRlc2NyaXB0aW9uIG9mIHRoZSBUZXN0U2NyaXB0IGFuZCBpdHMgdXNlLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQuZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBfZGVzY3JpcHRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEFzc2lzdCBpbiBzZWFyY2hpbmcgZm9yIGFwcHJvcHJpYXRlIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgdXNlQ29udGV4dD86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHBsYWlucyB3aHkgdGhpcyBUZXN0IFNjcmlwdCBpcyBuZWVkZWQgYW5kIHdoeSBpdCdzIGJlZW4gY29uc3RyYWluZWQgYXMgaXQgaGFzLlxyXG4gICAqL1xyXG4gIHJlcXVpcmVtZW50cz86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LnJlcXVpcmVtZW50c1xyXG4gICAqL1xyXG4gIF9yZXF1aXJlbWVudHM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgY29weXJpZ2h0IHN0YXRlbWVudCByZWxhdGluZyB0byB0aGUgVGVzdCBTY3JpcHQgYW5kL29yIGl0cyBjb250ZW50cy4gQ29weXJpZ2h0IHN0YXRlbWVudHMgYXJlIGdlbmVyYWxseSBsZWdhbCByZXN0cmljdGlvbnMgb24gdGhlIHVzZSBhbmQgcHVibGlzaGluZyBvZiB0aGUgZGV0YWlscyBvZiB0aGUgY29uc3RyYWludHMgYW5kIG1hcHBpbmdzLlxyXG4gICAqL1xyXG4gIGNvcHlyaWdodD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXN0U2NyaXB0LmNvcHlyaWdodFxyXG4gICAqL1xyXG4gIF9jb3B5cmlnaHQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZXF1aXJlZCBjYXBhYmlsaXR5IG11c3QgZXhpc3QgYW5kIGFyZSBhc3N1bWVkIHRvIGZ1bmN0aW9uIGNvcnJlY3RseSBvbiB0aGUgRkhJUiBzZXJ2ZXIgYmVpbmcgdGVzdGVkLlxyXG4gICAqL1xyXG4gIG1ldGFkYXRhPzogZmhpci5UZXN0U2NyaXB0TWV0YWRhdGFBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiB0aGUgdGVzdHMgYXBwbHkgdG8gbW9yZSB0aGFuIG9uZSBGSElSIHNlcnZlciAoZS5nLiBjcm9zcy1zZXJ2ZXIgaW50ZXJvcGVyYWJpbGl0eSB0ZXN0cykgdGhlbiBtdWx0aXNlcnZlcj10cnVlLiBEZWZhdWx0cyB0byBmYWxzZSBpZiB2YWx1ZSBpcyB1bnNwZWNpZmllZC5cclxuICAgKi9cclxuICBtdWx0aXNlcnZlcj86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlc3RTY3JpcHQubXVsdGlzZXJ2ZXJcclxuICAgKi9cclxuICBfbXVsdGlzZXJ2ZXI/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEZpeHR1cmUgaW4gdGhlIHRlc3Qgc2NyaXB0IC0gYnkgcmVmZXJlbmNlICh1cmkpLiBBbGwgZml4dHVyZXMgYXJlIHJlcXVpcmVkIGZvciB0aGUgdGVzdCBzY3JpcHQgdG8gZXhlY3V0ZS5cclxuICAgKi9cclxuICBmaXh0dXJlPzogZmhpci5UZXN0U2NyaXB0Rml4dHVyZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVmZXJlbmNlIHRvIHRoZSBwcm9maWxlIHRvIGJlIHVzZWQgZm9yIHZhbGlkYXRpb24uXHJcbiAgICovXHJcbiAgcHJvZmlsZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBWYXJpYWJsZSBpcyBzZXQgYmFzZWQgZWl0aGVyIG9uIGVsZW1lbnQgdmFsdWUgaW4gcmVzcG9uc2UgYm9keSBvciBvbiBoZWFkZXIgZmllbGQgdmFsdWUgaW4gdGhlIHJlc3BvbnNlIGhlYWRlcnMuXHJcbiAgICovXHJcbiAgdmFyaWFibGU/OiBmaGlyLlRlc3RTY3JpcHRWYXJpYWJsZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzZXJpZXMgb2YgcmVxdWlyZWQgc2V0dXAgb3BlcmF0aW9ucyBiZWZvcmUgdGVzdHMgYXJlIGV4ZWN1dGVkLlxyXG4gICAqL1xyXG4gIHNldHVwPzogZmhpci5UZXN0U2NyaXB0U2V0dXBBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHRlc3QgaW4gdGhpcyBzY3JpcHQuXHJcbiAgICovXHJcbiAgdGVzdD86IGZoaXIuVGVzdFNjcmlwdFRlc3RBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc2VyaWVzIG9mIG9wZXJhdGlvbnMgcmVxdWlyZWQgdG8gY2xlYW4gdXAgYWZ0ZXIgdGhlIGFsbCB0aGUgdGVzdHMgYXJlIGV4ZWN1dGVkIChzdWNjZXNzZnVsbHkgb3Igb3RoZXJ3aXNlKS5cclxuICAgKi9cclxuICB0ZWFyZG93bj86IGZoaXIuVGVzdFNjcmlwdFRlYXJkb3duQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXN0U2NyaXB0IGlzIGEgcmVzb3VyY2UgdGhhdCBzcGVjaWZpZXMgYSBzdWl0ZSBvZiB0ZXN0cyBhZ2FpbnN0IGEgRkhJUiBzZXJ2ZXIgaW1wbGVtZW50YXRpb24gdG8gZGV0ZXJtaW5lIGNvbXBsaWFuY2UgYWdhaW5zdCB0aGUgRkhJUiBzcGVjaWZpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RTY3JpcHQgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1Rlc3RTY3JpcHQnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiVGVzdFNjcmlwdFwiO1xyXG4gIC8qKlxyXG4gICAqIEFuIGFic29sdXRlIFVSTCB0aGF0IGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhpcyBUZXN0IFNjcmlwdC4gVGhpcyBTSEFMTCBiZSBhIFVSTCwgU0hPVUxEIGJlIGdsb2JhbGx5IHVuaXF1ZSwgYW5kIFNIT1VMRCBiZSBhbiBhZGRyZXNzIGF0IHdoaWNoIHRoaXMgVGVzdCBTY3JpcHQgaXMgKG9yIHdpbGwgYmUpIHB1Ymxpc2hlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdXJsOiBmaGlyLkZoaXJVcml8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGVyZSBtYXkgYmUgbXVsdGlwbGUgcmVzb3VyY2UgdmVyc2lvbnMgb2YgdGhlIFRlc3RTY3JpcHQgdGhhdCBoYXZlIHRoaXMgc2FtZSBpZGVudGlmaWVyLiBUaGUgcmVzb3VyY2UgdmVyc2lvbiBpZCB3aWxsIGNoYW5nZSBmb3IgdGVjaG5pY2FsIHJlYXNvbnMsIHdoZXJlYXMgdGhlIHN0YXRlZCB2ZXJzaW9uIG51bWJlciBuZWVkcyB0byBiZSB1bmRlciB0aGUgYXV0aG9yJ3MgY29udHJvbC5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBmcmVlIHRleHQgbmF0dXJhbCBsYW5ndWFnZSBuYW1lIGlkZW50aWZ5aW5nIHRoZSBUZXN0U2NyaXB0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIFRlc3RTY3JpcHRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdnMuIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPENvbmZvcm1hbmNlUmVzb3VyY2VTdGF0dXNDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgVGVzdFNjcmlwdCBhc3NpZ25lZCBmb3IgZXh0ZXJuYWwgcHVycG9zZXMgb3V0c2lkZSB0aGUgY29udGV4dCBvZiBGSElSLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIFRlc3RTY3JpcHRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdnMuIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSGVscHMgZXN0YWJsaXNoIHRoZSBcImF1dGhvcml0eS9jcmVkaWJpbGl0eVwiIG9mIHRoZSBUZXN0IFNjcmlwdC4gIE1heSBhbHNvIGFsbG93IGZvciBjb250YWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdWJsaXNoZXI/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbnRhY3RzIHRvIGFzc2lzdCBhIHVzZXIgaW4gZmluZGluZyBhbmQgY29tbXVuaWNhdGluZyB3aXRoIHRoZSBwdWJsaXNoZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhY3Q6IGZoaXIuVGVzdFNjcmlwdENvbnRhY3RbXTtcclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSB0aGlzIHZlcnNpb24gb2YgdGhlIHRlc3QgdGNyaXB0IHdhcyBwdWJsaXNoZWQuIFRoZSBkYXRlIG11c3QgY2hhbmdlIHdoZW4gdGhlIGJ1c2luZXNzIHZlcnNpb24gY2hhbmdlcywgaWYgaXQgZG9lcywgYW5kIGl0IG11c3QgY2hhbmdlIGlmIHRoZSBzdGF0dXMgY29kZSBjaGFuZ2VzLiBJbiBhZGRpdGlvbiwgaXQgc2hvdWxkIGNoYW5nZSB3aGVuIHRoZSBzdWJzdGFudGl2ZSBjb250ZW50IG9mIHRoZSB0ZXN0IGNhc2VzIGNoYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGZyZWUgdGV4dCBuYXR1cmFsIGxhbmd1YWdlIGRlc2NyaXB0aW9uIG9mIHRoZSBUZXN0U2NyaXB0IGFuZCBpdHMgdXNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQXNzaXN0IGluIHNlYXJjaGluZyBmb3IgYXBwcm9wcmlhdGUgY29udGVudC5cclxuICAgKi9cclxuICBwdWJsaWMgdXNlQ29udGV4dDogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBFeHBsYWlucyB3aHkgdGhpcyBUZXN0IFNjcmlwdCBpcyBuZWVkZWQgYW5kIHdoeSBpdCdzIGJlZW4gY29uc3RyYWluZWQgYXMgaXQgaGFzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXF1aXJlbWVudHM/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgY29weXJpZ2h0IHN0YXRlbWVudCByZWxhdGluZyB0byB0aGUgVGVzdCBTY3JpcHQgYW5kL29yIGl0cyBjb250ZW50cy4gQ29weXJpZ2h0IHN0YXRlbWVudHMgYXJlIGdlbmVyYWxseSBsZWdhbCByZXN0cmljdGlvbnMgb24gdGhlIHVzZSBhbmQgcHVibGlzaGluZyBvZiB0aGUgZGV0YWlscyBvZiB0aGUgY29uc3RyYWludHMgYW5kIG1hcHBpbmdzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3B5cmlnaHQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZXF1aXJlZCBjYXBhYmlsaXR5IG11c3QgZXhpc3QgYW5kIGFyZSBhc3N1bWVkIHRvIGZ1bmN0aW9uIGNvcnJlY3RseSBvbiB0aGUgRkhJUiBzZXJ2ZXIgYmVpbmcgdGVzdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZXRhZGF0YT86IGZoaXIuVGVzdFNjcmlwdE1ldGFkYXRhfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiB0aGUgdGVzdHMgYXBwbHkgdG8gbW9yZSB0aGFuIG9uZSBGSElSIHNlcnZlciAoZS5nLiBjcm9zcy1zZXJ2ZXIgaW50ZXJvcGVyYWJpbGl0eSB0ZXN0cykgdGhlbiBtdWx0aXNlcnZlcj10cnVlLiBEZWZhdWx0cyB0byBmYWxzZSBpZiB2YWx1ZSBpcyB1bnNwZWNpZmllZC5cclxuICAgKi9cclxuICBwdWJsaWMgbXVsdGlzZXJ2ZXI/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGaXh0dXJlIGluIHRoZSB0ZXN0IHNjcmlwdCAtIGJ5IHJlZmVyZW5jZSAodXJpKS4gQWxsIGZpeHR1cmVzIGFyZSByZXF1aXJlZCBmb3IgdGhlIHRlc3Qgc2NyaXB0IHRvIGV4ZWN1dGUuXHJcbiAgICovXHJcbiAgcHVibGljIGZpeHR1cmU6IGZoaXIuVGVzdFNjcmlwdEZpeHR1cmVbXTtcclxuICAvKipcclxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIHByb2ZpbGUgdG8gYmUgdXNlZCBmb3IgdmFsaWRhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcHJvZmlsZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBWYXJpYWJsZSBpcyBzZXQgYmFzZWQgZWl0aGVyIG9uIGVsZW1lbnQgdmFsdWUgaW4gcmVzcG9uc2UgYm9keSBvciBvbiBoZWFkZXIgZmllbGQgdmFsdWUgaW4gdGhlIHJlc3BvbnNlIGhlYWRlcnMuXHJcbiAgICovXHJcbiAgcHVibGljIHZhcmlhYmxlOiBmaGlyLlRlc3RTY3JpcHRWYXJpYWJsZVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgc2VyaWVzIG9mIHJlcXVpcmVkIHNldHVwIG9wZXJhdGlvbnMgYmVmb3JlIHRlc3RzIGFyZSBleGVjdXRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0dXA/OiBmaGlyLlRlc3RTY3JpcHRTZXR1cHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSB0ZXN0IGluIHRoaXMgc2NyaXB0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZXN0OiBmaGlyLlRlc3RTY3JpcHRUZXN0W107XHJcbiAgLyoqXHJcbiAgICogQSBzZXJpZXMgb2Ygb3BlcmF0aW9ucyByZXF1aXJlZCB0byBjbGVhbiB1cCBhZnRlciB0aGUgYWxsIHRoZSB0ZXN0cyBhcmUgZXhlY3V0ZWQgKHN1Y2Nlc3NmdWxseSBvciBvdGhlcndpc2UpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZWFyZG93bj86IGZoaXIuVGVzdFNjcmlwdFRlYXJkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBUZXN0U2NyaXB0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VGVzdFNjcmlwdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdUZXN0U2NyaXB0JztcclxuICAgIGlmIChzb3VyY2VbJ3VybCddKSB7IHRoaXMudXJsID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS51cmx9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudXJsID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3VybCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnVybCkgeyB0aGlzLnVybC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl91cmwhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyVXJpKHNvdXJjZS5fdXJsIGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd2ZXJzaW9uJ10pIHsgdGhpcy52ZXJzaW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS52ZXJzaW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ192ZXJzaW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMudmVyc2lvbikgeyB0aGlzLnZlcnNpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdmVyc2lvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnZlcnNpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fdmVyc2lvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPENvbmZvcm1hbmNlUmVzb3VyY2VTdGF0dXNDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2Uuc3RhdHVzfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zdGF0dXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5zdGF0dXMpIHsgdGhpcy5zdGF0dXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3RhdHVzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8Q29uZm9ybWFuY2VSZXNvdXJjZVN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLmlkZW50aWZpZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWydleHBlcmltZW50YWwnXSkgeyB0aGlzLmV4cGVyaW1lbnRhbCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmV4cGVyaW1lbnRhbH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZXhwZXJpbWVudGFsJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZXhwZXJpbWVudGFsKSB7IHRoaXMuZXhwZXJpbWVudGFsLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2V4cGVyaW1lbnRhbCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmV4cGVyaW1lbnRhbCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fZXhwZXJpbWVudGFsIGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncHVibGlzaGVyJ10pIHsgdGhpcy5wdWJsaXNoZXIgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnB1Ymxpc2hlcn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHVibGlzaGVyJ10pIHtcclxuICAgICAgaWYgKHRoaXMucHVibGlzaGVyKSB7IHRoaXMucHVibGlzaGVyLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3B1Ymxpc2hlciEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnB1Ymxpc2hlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9wdWJsaXNoZXIgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRhY3QnXSkgeyB0aGlzLmNvbnRhY3QgPSBzb3VyY2UuY29udGFjdC5tYXAoKHgpID0+IG5ldyBmaGlyLlRlc3RTY3JpcHRDb250YWN0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY29udGFjdCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydkYXRlJ10pIHsgdGhpcy5kYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLmRhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRlKSB7IHRoaXMuZGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX2RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fZGVzY3JpcHRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3VzZUNvbnRleHQnXSkgeyB0aGlzLnVzZUNvbnRleHQgPSBzb3VyY2UudXNlQ29udGV4dC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVzZUNvbnRleHQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVxdWlyZW1lbnRzJ10pIHsgdGhpcy5yZXF1aXJlbWVudHMgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnJlcXVpcmVtZW50c30pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVxdWlyZW1lbnRzJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVxdWlyZW1lbnRzKSB7IHRoaXMucmVxdWlyZW1lbnRzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JlcXVpcmVtZW50cyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlcXVpcmVtZW50cyA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9yZXF1aXJlbWVudHMgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvcHlyaWdodCddKSB7IHRoaXMuY29weXJpZ2h0ID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5jb3B5cmlnaHR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvcHlyaWdodCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvcHlyaWdodCkgeyB0aGlzLmNvcHlyaWdodC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb3B5cmlnaHQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb3B5cmlnaHQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fY29weXJpZ2h0IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydtZXRhZGF0YSddKSB7IHRoaXMubWV0YWRhdGEgPSBuZXcgZmhpci5UZXN0U2NyaXB0TWV0YWRhdGEoc291cmNlLm1ldGFkYXRhKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbXVsdGlzZXJ2ZXInXSkgeyB0aGlzLm11bHRpc2VydmVyID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UubXVsdGlzZXJ2ZXJ9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX211bHRpc2VydmVyJ10pIHtcclxuICAgICAgaWYgKHRoaXMubXVsdGlzZXJ2ZXIpIHsgdGhpcy5tdWx0aXNlcnZlci5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9tdWx0aXNlcnZlciEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm11bHRpc2VydmVyID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9tdWx0aXNlcnZlciBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2ZpeHR1cmUnXSkgeyB0aGlzLmZpeHR1cmUgPSBzb3VyY2UuZml4dHVyZS5tYXAoKHgpID0+IG5ldyBmaGlyLlRlc3RTY3JpcHRGaXh0dXJlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZml4dHVyZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwcm9maWxlJ10pIHsgdGhpcy5wcm9maWxlID0gc291cmNlLnByb2ZpbGUubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9maWxlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhcmlhYmxlJ10pIHsgdGhpcy52YXJpYWJsZSA9IHNvdXJjZS52YXJpYWJsZS5tYXAoKHgpID0+IG5ldyBmaGlyLlRlc3RTY3JpcHRWYXJpYWJsZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnZhcmlhYmxlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3NldHVwJ10pIHsgdGhpcy5zZXR1cCA9IG5ldyBmaGlyLlRlc3RTY3JpcHRTZXR1cChzb3VyY2Uuc2V0dXApOyB9XHJcbiAgICBpZiAoc291cmNlWyd0ZXN0J10pIHsgdGhpcy50ZXN0ID0gc291cmNlLnRlc3QubWFwKCh4KSA9PiBuZXcgZmhpci5UZXN0U2NyaXB0VGVzdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRlc3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGVhcmRvd24nXSkgeyB0aGlzLnRlYXJkb3duID0gbmV3IGZoaXIuVGVzdFNjcmlwdFRlYXJkb3duKHNvdXJjZS50ZWFyZG93bik7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdUZXN0U2NyaXB0JyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUFMoJ3Jlc291cmNlVHlwZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygndXJsJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd2ZXJzaW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCduYW1lJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTVignc3RhdHVzJyxleHAsJ0NvbmZvcm1hbmNlUmVzb3VyY2VTdGF0dXMnLENvbmZvcm1hbmNlUmVzb3VyY2VTdGF0dXNWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnaWRlbnRpZmllcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZXhwZXJpbWVudGFsJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwdWJsaXNoZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2NvbnRhY3QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2RhdGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rlc2NyaXB0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCd1c2VDb250ZXh0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZXF1aXJlbWVudHMnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NvcHlyaWdodCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbWV0YWRhdGEnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ211bHRpc2VydmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdmaXh0dXJlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdwcm9maWxlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCd2YXJpYWJsZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc2V0dXAnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3Rlc3QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3RlYXJkb3duJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbiJdfQ==