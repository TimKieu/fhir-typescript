// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: OrderResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { OrderStatusVsValidation } from '../fhirValueSets/OrderStatusVsValidation.js';
/**
 * A response to an order.
 */
export class OrderResponse extends fhir.DomainResource {
    /**
     * Default constructor for OrderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OrderResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        else {
            this.request = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['orderStatus']) {
            this.orderStatus = new fhir.FhirCode({ value: source.orderStatus });
        }
        else {
            this.orderStatus = null;
        }
        if (source['_orderStatus']) {
            if (this.orderStatus) {
                this.orderStatus.addExtendedProperties(source._orderStatus);
            }
            else {
                this.orderStatus = new fhir.FhirCode(source._orderStatus);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['fulfillment']) {
            this.fulfillment = source.fulfillment.map((x) => new fhir.Reference(x));
        }
        else {
            this.fulfillment = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'OrderResponse';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('request', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('who', exp));
        iss.push(...this.vRSV('orderStatus', exp, 'OrderStatus', OrderStatusVsValidation, 'r'));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('fulfillment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OrderResponse._fts_dataType = 'OrderResponse';
//# sourceMappingURL=data:application/json;base64,