// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceComponent
import * as fhir from '../fhir.js';
// @ts-ignore
import { MeasurementPrincipleVsValidation } from '../fhirValueSets/MeasurementPrincipleVsValidation.js';
/**
 * Describes the production specification such as component revision, serial number, etc.
 */
export class DeviceComponentProductionSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceComponentProductionSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['specType']) {
            this.specType = new fhir.CodeableConcept(source.specType);
        }
        if (source['componentId']) {
            this.componentId = new fhir.Identifier(source.componentId);
        }
        if (source['productionSpec']) {
            this.productionSpec = new fhir.FhirString({ value: source.productionSpec });
        }
        if (source['_productionSpec']) {
            if (this.productionSpec) {
                this.productionSpec.addExtendedProperties(source._productionSpec);
            }
            else {
                this.productionSpec = new fhir.FhirString(source._productionSpec);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceComponent.productionSpecification';
        }
        iss.push(...this.vOS('specType', exp));
        iss.push(...this.vOS('componentId', exp));
        iss.push(...this.vOS('productionSpec', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceComponentProductionSpecification._fts_dataType = 'DeviceComponentProductionSpecification';
/**
 * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceComponent extends fhir.DomainResource {
    /**
     * Default constructor for DeviceComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceComponent';
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        else {
            this.identifier = null;
        }
        if (source['lastSystemChange']) {
            this.lastSystemChange = new fhir.FhirInstant({ value: source.lastSystemChange });
        }
        else {
            this.lastSystemChange = null;
        }
        if (source['_lastSystemChange']) {
            if (this.lastSystemChange) {
                this.lastSystemChange.addExtendedProperties(source._lastSystemChange);
            }
            else {
                this.lastSystemChange = new fhir.FhirInstant(source._lastSystemChange);
            }
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = source.operationalStatus.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.operationalStatus = [];
        }
        if (source['parameterGroup']) {
            this.parameterGroup = new fhir.CodeableConcept(source.parameterGroup);
        }
        if (source['measurementPrinciple']) {
            this.measurementPrinciple = new fhir.FhirCode({ value: source.measurementPrinciple });
        }
        if (source['_measurementPrinciple']) {
            if (this.measurementPrinciple) {
                this.measurementPrinciple.addExtendedProperties(source._measurementPrinciple);
            }
            else {
                this.measurementPrinciple = new fhir.FhirCode(source._measurementPrinciple);
            }
        }
        if (source['productionSpecification']) {
            this.productionSpecification = source.productionSpecification.map((x) => new fhir.DeviceComponentProductionSpecification(x));
        }
        else {
            this.productionSpecification = [];
        }
        if (source['languageCode']) {
            this.languageCode = new fhir.CodeableConcept(source.languageCode);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceComponent';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('identifier', exp));
        iss.push(...this.vRS('lastSystemChange', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('parent', exp));
        iss.push(...this.vOA('operationalStatus', exp));
        iss.push(...this.vOS('parameterGroup', exp));
        iss.push(...this.vOSV('measurementPrinciple', exp, 'MeasurementPrinciple', MeasurementPrincipleVsValidation, 'r'));
        iss.push(...this.vOA('productionSpecification', exp));
        iss.push(...this.vOS('languageCode', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceComponent._fts_dataType = 'DeviceComponent';
//# sourceMappingURL=data:application/json;base64,