// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationAdminStatusVsValidation } from '../fhirValueSets/MedicationAdminStatusVsValidation.js';
/**
 * Reasons why a vaccine was or was not administered.
 */
export class ImmunizationExplanation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationExplanation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['reasonNotGiven']) {
            this.reasonNotGiven = source.reasonNotGiven.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonNotGiven = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.explanation';
        }
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('reasonNotGiven', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationExplanation._fts_dataType = 'ImmunizationExplanation';
/**
 * Categorical data indicating that an adverse event is associated in time to an immunization.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail, options);
        }
        if (source['reported'] !== undefined) {
            this.reported = new fhir.FhirBoolean({ value: source.reported }, options);
        }
        if (source['_reported']) {
            if (this.reported) {
                this.reported.addExtendedProperties(source._reported);
            }
            else {
                this.reported = new fhir.FhirBoolean(source._reported, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.reaction';
        }
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('detail', exp));
        iss.push(...this.vOS('reported', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationReaction._fts_dataType = 'ImmunizationReaction';
/**
 * Contains information about the protocol(s) under which the vaccine was administered.
 */
export class ImmunizationVaccinationProtocol extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationVaccinationProtocol - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['doseSequence'] !== undefined) {
            this.doseSequence = new fhir.FhirPositiveInt({ value: source.doseSequence }, options);
        }
        else {
            this.doseSequence = null;
        }
        if (source['_doseSequence']) {
            if (this.doseSequence) {
                this.doseSequence.addExtendedProperties(source._doseSequence);
            }
            else {
                this.doseSequence = new fhir.FhirPositiveInt(source._doseSequence, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority, options);
        }
        if (source['series'] !== undefined) {
            this.series = new fhir.FhirString({ value: source.series }, options);
        }
        if (source['_series']) {
            if (this.series) {
                this.series.addExtendedProperties(source._series);
            }
            else {
                this.series = new fhir.FhirString(source._series, options);
            }
        }
        if (source['seriesDoses'] !== undefined) {
            this.seriesDoses = new fhir.FhirPositiveInt({ value: source.seriesDoses }, options);
        }
        if (source['_seriesDoses']) {
            if (this.seriesDoses) {
                this.seriesDoses.addExtendedProperties(source._seriesDoses);
            }
            else {
                this.seriesDoses = new fhir.FhirPositiveInt(source._seriesDoses, options);
            }
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.targetDisease = [];
        }
        if (source['doseStatus']) {
            this.doseStatus = new fhir.CodeableConcept(source.doseStatus, options);
        }
        else {
            this.doseStatus = null;
        }
        if (source['doseStatusReason']) {
            this.doseStatusReason = new fhir.CodeableConcept(source.doseStatusReason, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.vaccinationProtocol';
        }
        iss.push(...this.vRS('doseSequence', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('authority', exp));
        iss.push(...this.vOS('series', exp));
        iss.push(...this.vOS('seriesDoses', exp));
        iss.push(...this.vRA('targetDisease', exp));
        iss.push(...this.vRS('doseStatus', exp));
        iss.push(...this.vOS('doseStatusReason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationVaccinationProtocol._fts_dataType = 'ImmunizationVaccinationProtocol';
/**
 * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode, options);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['wasNotGiven'] !== undefined) {
            this.wasNotGiven = new fhir.FhirBoolean({ value: source.wasNotGiven }, options);
        }
        else {
            this.wasNotGiven = null;
        }
        if (source['_wasNotGiven']) {
            if (this.wasNotGiven) {
                this.wasNotGiven.addExtendedProperties(source._wasNotGiven);
            }
            else {
                this.wasNotGiven = new fhir.FhirBoolean(source._wasNotGiven, options);
            }
        }
        if (source['reported'] !== undefined) {
            this.reported = new fhir.FhirBoolean({ value: source.reported }, options);
        }
        else {
            this.reported = null;
        }
        if (source['_reported']) {
            if (this.reported) {
                this.reported.addExtendedProperties(source._reported);
            }
            else {
                this.reported = new fhir.FhirBoolean(source._reported, options);
            }
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer, options);
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer, options);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['lotNumber'] !== undefined) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber }, options);
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber, options);
            }
        }
        if (source['expirationDate'] !== undefined) {
            this.expirationDate = new fhir.FhirDate({ value: source.expirationDate }, options);
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDate(source._expirationDate, options);
            }
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site, options);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route, options);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity, options);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['explanation']) {
            this.explanation = new fhir.ImmunizationExplanation(source.explanation, options);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x, options));
        }
        else {
            this.reaction = [];
        }
        if (source['vaccinationProtocol']) {
            this.vaccinationProtocol = source.vaccinationProtocol.map((x) => new fhir.ImmunizationVaccinationProtocol(x, options));
        }
        else {
            this.vaccinationProtocol = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'MedicationAdminStatus', MedicationAdminStatusVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vRS('vaccineCode', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vRS('wasNotGiven', exp));
        iss.push(...this.vRS('reported', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('lotNumber', exp));
        iss.push(...this.vOS('expirationDate', exp));
        iss.push(...this.vOS('site', exp));
        iss.push(...this.vOS('route', exp));
        iss.push(...this.vOS('doseQuantity', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOS('explanation', exp));
        iss.push(...this.vOA('reaction', exp));
        iss.push(...this.vOA('vaccinationProtocol', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Immunization._fts_dataType = 'Immunization';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9JbW11bml6YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQWUxRzs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWEvRDs7T0FFRztJQUNILFlBQVksU0FBOEMsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDcEcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2xHO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDMUg7WUFBRSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztTQUFFO0lBQ3BDLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQixDQUFDLE1BQWEsRUFBRTtR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YSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7QUFyTEQ7O0dBRUc7QUFDNkIsMEJBQWEsR0FBVSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IEltbXVuaXphdGlvblxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbkFkbWluU3RhdHVzQ29kZXMsICBNZWRpY2F0aW9uQWRtaW5TdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbkFkbWluU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1lZGljYXRpb25BZG1pblN0YXR1c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbkFkbWluU3RhdHVzVnNWYWxpZGF0aW9uLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEltbXVuaXphdGlvbkV4cGxhbmF0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEltbXVuaXphdGlvbkV4cGxhbmF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogUmVhc29ucyB3aHkgYSB2YWNjaW5lIHdhcyBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgcmVhc29uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlYXNvbiB3aHkgYSB2YWNjaW5lIHdhcyBub3QgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIHJlYXNvbk5vdEdpdmVuPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhc29ucyB3aHkgYSB2YWNjaW5lIHdhcyBvciB3YXMgbm90IGFkbWluaXN0ZXJlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbW11bml6YXRpb25FeHBsYW5hdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0ltbXVuaXphdGlvbkV4cGxhbmF0aW9uJztcclxuICAvKipcclxuICAgKiBSZWFzb25zIHdoeSBhIHZhY2NpbmUgd2FzIGFkbWluaXN0ZXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFJlYXNvbiB3aHkgYSB2YWNjaW5lIHdhcyBub3QgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWFzb25Ob3RHaXZlbjogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBJbW11bml6YXRpb25FeHBsYW5hdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEltbXVuaXphdGlvbkV4cGxhbmF0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvbiddKSB7IHRoaXMucmVhc29uID0gc291cmNlLnJlYXNvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYXNvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWFzb25Ob3RHaXZlbiddKSB7IHRoaXMucmVhc29uTm90R2l2ZW4gPSBzb3VyY2UucmVhc29uTm90R2l2ZW4ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWFzb25Ob3RHaXZlbiA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnSW1tdW5pemF0aW9uLmV4cGxhbmF0aW9uJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncmVhc29uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdyZWFzb25Ob3RHaXZlbicsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgSW1tdW5pemF0aW9uUmVhY3Rpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW1tdW5pemF0aW9uUmVhY3Rpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBEYXRlIG9mIHJlYWN0aW9uIHRvIHRoZSBpbW11bml6YXRpb24uXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltbXVuaXphdGlvbi5yZWFjdGlvbi5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIERldGFpbHMgb2YgdGhlIHJlYWN0aW9uLlxyXG4gICAqL1xyXG4gIGRldGFpbD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VsZi1yZXBvcnRlZCBpbmRpY2F0b3IuXHJcbiAgICovXHJcbiAgcmVwb3J0ZWQ/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbW11bml6YXRpb24ucmVhY3Rpb24ucmVwb3J0ZWRcclxuICAgKi9cclxuICBfcmVwb3J0ZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ2F0ZWdvcmljYWwgZGF0YSBpbmRpY2F0aW5nIHRoYXQgYW4gYWR2ZXJzZSBldmVudCBpcyBhc3NvY2lhdGVkIGluIHRpbWUgdG8gYW4gaW1tdW5pemF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEltbXVuaXphdGlvblJlYWN0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnSW1tdW5pemF0aW9uUmVhY3Rpb24nO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgb2YgcmVhY3Rpb24gdG8gdGhlIGltbXVuaXphdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXRhaWxzIG9mIHRoZSByZWFjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZGV0YWlsPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNlbGYtcmVwb3J0ZWQgaW5kaWNhdG9yLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXBvcnRlZD86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEltbXVuaXphdGlvblJlYWN0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8SW1tdW5pemF0aW9uUmVhY3Rpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZGF0ZSddICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLmRhdGV9LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRlKSB7IHRoaXMuZGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX2RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGV0YWlsJ10pIHsgdGhpcy5kZXRhaWwgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmRldGFpbCwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcG9ydGVkJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnJlcG9ydGVkID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UucmVwb3J0ZWR9LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3JlcG9ydGVkJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVwb3J0ZWQpIHsgdGhpcy5yZXBvcnRlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZXBvcnRlZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlcG9ydGVkID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9yZXBvcnRlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdJbW11bml6YXRpb24ucmVhY3Rpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkYXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkZXRhaWwnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JlcG9ydGVkJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBJbW11bml6YXRpb25WYWNjaW5hdGlvblByb3RvY29sIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEltbXVuaXphdGlvblZhY2NpbmF0aW9uUHJvdG9jb2xBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBOb21pbmFsIHBvc2l0aW9uIGluIGEgc2VyaWVzLlxyXG4gICAqL1xyXG4gIGRvc2VTZXF1ZW5jZTogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogSW1tdW5pemF0aW9uLnZhY2NpbmF0aW9uUHJvdG9jb2wuZG9zZVNlcXVlbmNlXHJcbiAgICovXHJcbiAgX2Rvc2VTZXF1ZW5jZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29udGFpbnMgdGhlIGRlc2NyaXB0aW9uIGFib3V0IHRoZSBwcm90b2NvbCB1bmRlciB3aGljaCB0aGUgdmFjY2luZSB3YXMgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltbXVuaXphdGlvbi52YWNjaW5hdGlvblByb3RvY29sLmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIGF1dGhvcml0eSB3aG8gcHVibGlzaGVkIHRoZSBwcm90b2NvbC4gIEUuZy4gQUNJUC5cclxuICAgKi9cclxuICBhdXRob3JpdHk/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9uZSBwb3NzaWJsZSBwYXRoIHRvIGFjaGlldmUgcHJlc3VtZWQgaW1tdW5pdHkgYWdhaW5zdCBhIGRpc2Vhc2UgLSB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYW4gYXV0aG9yaXR5LlxyXG4gICAqL1xyXG4gIHNlcmllcz86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbW11bml6YXRpb24udmFjY2luYXRpb25Qcm90b2NvbC5zZXJpZXNcclxuICAgKi9cclxuICBfc2VyaWVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgcmVjb21tZW5kZWQgbnVtYmVyIG9mIGRvc2VzIHRvIGFjaGlldmUgaW1tdW5pdHkuXHJcbiAgICovXHJcbiAgc2VyaWVzRG9zZXM/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbW11bml6YXRpb24udmFjY2luYXRpb25Qcm90b2NvbC5zZXJpZXNEb3Nlc1xyXG4gICAqL1xyXG4gIF9zZXJpZXNEb3Nlcz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRhcmdldGVkIGRpc2Vhc2UuXHJcbiAgICovXHJcbiAgdGFyZ2V0RGlzZWFzZTogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118bnVsbDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGltbXVuaXphdGlvbiBldmVudCBzaG91bGQgXCJjb3VudFwiIGFnYWluc3QgIHRoZSBwcm90b2NvbC5cclxuICAgKi9cclxuICBkb3NlU3RhdHVzOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBQcm92aWRlcyBhbiBleHBsYW5hdGlvbiBhcyB0byB3aHkgYW4gaW1tdW5pemF0aW9uIGV2ZW50IHNob3VsZCBvciBzaG91bGQgbm90IGNvdW50IGFnYWluc3QgdGhlIHByb3RvY29sLlxyXG4gICAqL1xyXG4gIGRvc2VTdGF0dXNSZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb3RvY29sKHMpIHVuZGVyIHdoaWNoIHRoZSB2YWNjaW5lIHdhcyBhZG1pbmlzdGVyZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW1tdW5pemF0aW9uVmFjY2luYXRpb25Qcm90b2NvbCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0ltbXVuaXphdGlvblZhY2NpbmF0aW9uUHJvdG9jb2wnO1xyXG4gIC8qKlxyXG4gICAqIE5vbWluYWwgcG9zaXRpb24gaW4gYSBzZXJpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRvc2VTZXF1ZW5jZTogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVsbDtcclxuICAvKipcclxuICAgKiBDb250YWlucyB0aGUgZGVzY3JpcHRpb24gYWJvdXQgdGhlIHByb3RvY29sIHVuZGVyIHdoaWNoIHRoZSB2YWNjaW5lIHdhcyBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIGF1dGhvcml0eSB3aG8gcHVibGlzaGVkIHRoZSBwcm90b2NvbC4gIEUuZy4gQUNJUC5cclxuICAgKi9cclxuICBwdWJsaWMgYXV0aG9yaXR5PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9uZSBwb3NzaWJsZSBwYXRoIHRvIGFjaGlldmUgcHJlc3VtZWQgaW1tdW5pdHkgYWdhaW5zdCBhIGRpc2Vhc2UgLSB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYW4gYXV0aG9yaXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXJpZXM/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZWNvbW1lbmRlZCBudW1iZXIgb2YgZG9zZXMgdG8gYWNoaWV2ZSBpbW11bml0eS5cclxuICAgKi9cclxuICBwdWJsaWMgc2VyaWVzRG9zZXM/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRhcmdldGVkIGRpc2Vhc2UuXHJcbiAgICovXHJcbiAgcHVibGljIHRhcmdldERpc2Vhc2U6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIGlmIHRoZSBpbW11bml6YXRpb24gZXZlbnQgc2hvdWxkIFwiY291bnRcIiBhZ2FpbnN0ICB0aGUgcHJvdG9jb2wuXHJcbiAgICovXHJcbiAgcHVibGljIGRvc2VTdGF0dXM6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgYW4gZXhwbGFuYXRpb24gYXMgdG8gd2h5IGFuIGltbXVuaXphdGlvbiBldmVudCBzaG91bGQgb3Igc2hvdWxkIG5vdCBjb3VudCBhZ2FpbnN0IHRoZSBwcm90b2NvbC5cclxuICAgKi9cclxuICBwdWJsaWMgZG9zZVN0YXR1c1JlYXNvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBJbW11bml6YXRpb25WYWNjaW5hdGlvblByb3RvY29sIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8SW1tdW5pemF0aW9uVmFjY2luYXRpb25Qcm90b2NvbEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydkb3NlU2VxdWVuY2UnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZG9zZVNlcXVlbmNlID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHt2YWx1ZTogc291cmNlLmRvc2VTZXF1ZW5jZX0sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kb3NlU2VxdWVuY2UgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfZG9zZVNlcXVlbmNlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZG9zZVNlcXVlbmNlKSB7IHRoaXMuZG9zZVNlcXVlbmNlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rvc2VTZXF1ZW5jZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRvc2VTZXF1ZW5jZSA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludChzb3VyY2UuX2Rvc2VTZXF1ZW5jZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclBvc2l0aXZlSW50QXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkZXNjcmlwdGlvbiddICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGVzY3JpcHRpb259LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2Rlc2NyaXB0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24pIHsgdGhpcy5kZXNjcmlwdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kZXNjcmlwdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rlc2NyaXB0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhdXRob3JpdHknXSkgeyB0aGlzLmF1dGhvcml0eSA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuYXV0aG9yaXR5LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VyaWVzJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNlcmllcyA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2Uuc2VyaWVzfSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zZXJpZXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5zZXJpZXMpIHsgdGhpcy5zZXJpZXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc2VyaWVzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc2VyaWVzID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3NlcmllcyBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VyaWVzRG9zZXMnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2VyaWVzRG9zZXMgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2Uuc2VyaWVzRG9zZXN9LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3Nlcmllc0Rvc2VzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc2VyaWVzRG9zZXMpIHsgdGhpcy5zZXJpZXNEb3Nlcy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zZXJpZXNEb3NlcyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnNlcmllc0Rvc2VzID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHNvdXJjZS5fc2VyaWVzRG9zZXMgYXMgUGFydGlhbDxmaGlyLkZoaXJQb3NpdGl2ZUludEFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndGFyZ2V0RGlzZWFzZSddKSB7IHRoaXMudGFyZ2V0RGlzZWFzZSA9IHNvdXJjZS50YXJnZXREaXNlYXNlLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudGFyZ2V0RGlzZWFzZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydkb3NlU3RhdHVzJ10pIHsgdGhpcy5kb3NlU3RhdHVzID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5kb3NlU3RhdHVzLCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZG9zZVN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rvc2VTdGF0dXNSZWFzb24nXSkgeyB0aGlzLmRvc2VTdGF0dXNSZWFzb24gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmRvc2VTdGF0dXNSZWFzb24sIG9wdGlvbnMpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnSW1tdW5pemF0aW9uLnZhY2NpbmF0aW9uUHJvdG9jb2wnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdkb3NlU2VxdWVuY2UnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rlc2NyaXB0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhdXRob3JpdHknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3NlcmllcycsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc2VyaWVzRG9zZXMnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UkEoJ3RhcmdldERpc2Vhc2UnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ2Rvc2VTdGF0dXMnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rvc2VTdGF0dXNSZWFzb24nLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEltbXVuaXphdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbW11bml6YXRpb25BcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJJbW11bml6YXRpb25cInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSB1bmlxdWUgaWRlbnRpZmllciBhc3NpZ25lZCB0byB0aGlzIGltbXVuaXphdGlvbiByZWNvcmQuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgdmFjY2luYXRpb24gZXZlbnQuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPE1lZGljYXRpb25BZG1pblN0YXR1c0NvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbW11bml6YXRpb24uc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogRGF0ZSB2YWNjaW5lIGFkbWluaXN0ZXJlZCBvciB3YXMgdG8gYmUgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIGRhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBJbW11bml6YXRpb24uZGF0ZVxyXG4gICAqL1xyXG4gIF9kYXRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBWYWNjaW5lIHRoYXQgd2FzIGFkbWluaXN0ZXJlZCBvciB3YXMgdG8gYmUgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIHZhY2NpbmVDb2RlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgcGF0aWVudCB3aG8gZWl0aGVyIHJlY2VpdmVkIG9yIGRpZCBub3QgcmVjZWl2ZSB0aGUgaW1tdW5pemF0aW9uLlxyXG4gICAqL1xyXG4gIHBhdGllbnQ6IGZoaXIuUmVmZXJlbmNlQXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiB0aGUgdmFjY2luYXRpb24gd2FzIG9yIHdhcyBub3QgZ2l2ZW4uXHJcbiAgICovXHJcbiAgd2FzTm90R2l2ZW46IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltbXVuaXphdGlvbi53YXNOb3RHaXZlblxyXG4gICAqL1xyXG4gIF93YXNOb3RHaXZlbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVHJ1ZSBpZiB0aGlzIGFkbWluaXN0cmF0aW9uIHdhcyByZXBvcnRlZCByYXRoZXIgdGhhbiBkaXJlY3RseSBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgcmVwb3J0ZWQ6IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltbXVuaXphdGlvbi5yZXBvcnRlZFxyXG4gICAqL1xyXG4gIF9yZXBvcnRlZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljaWFuIHdobyBhZG1pbmlzdGVyZWQgdGhlIHZhY2NpbmUuXHJcbiAgICovXHJcbiAgcGVyZm9ybWVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDbGluaWNpYW4gd2hvIG9yZGVyZWQgdGhlIHZhY2NpbmF0aW9uLlxyXG4gICAqL1xyXG4gIHJlcXVlc3Rlcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZpc2l0IG9yIGFkbWlzc2lvbiBvciBvdGhlciBjb250YWN0IGJldHdlZW4gcGF0aWVudCBhbmQgaGVhbHRoIGNhcmUgcHJvdmlkZXIgdGhlIGltbXVuaXphdGlvbiB3YXMgcGVyZm9ybWVkIGFzIHBhcnQgb2YuXHJcbiAgICovXHJcbiAgZW5jb3VudGVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOYW1lIG9mIHZhY2NpbmUgbWFudWZhY3R1cmVyLlxyXG4gICAqL1xyXG4gIG1hbnVmYWN0dXJlcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlcnZpY2UgZGVsaXZlcnkgbG9jYXRpb24gd2hlcmUgdGhlIHZhY2NpbmUgYWRtaW5pc3RyYXRpb24gb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgbG9jYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExvdCBudW1iZXIgb2YgdGhlICB2YWNjaW5lIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgbG90TnVtYmVyPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEltbXVuaXphdGlvbi5sb3ROdW1iZXJcclxuICAgKi9cclxuICBfbG90TnVtYmVyPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBEYXRlIHZhY2NpbmUgYmF0Y2ggZXhwaXJlcy5cclxuICAgKi9cclxuICBleHBpcmF0aW9uRGF0ZT86IGZoaXIuRmhpckRhdGV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogSW1tdW5pemF0aW9uLmV4cGlyYXRpb25EYXRlXHJcbiAgICovXHJcbiAgX2V4cGlyYXRpb25EYXRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBCb2R5IHNpdGUgd2hlcmUgdmFjY2luZSB3YXMgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIHNpdGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwYXRoIGJ5IHdoaWNoIHRoZSB2YWNjaW5lIHByb2R1Y3QgaXMgdGFrZW4gaW50byB0aGUgYm9keS5cclxuICAgKi9cclxuICByb3V0ZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHF1YW50aXR5IG9mIHZhY2NpbmUgcHJvZHVjdCB0aGF0IHdhcyBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgZG9zZVF1YW50aXR5PzogZmhpci5RdWFudGl0eUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dHJhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbW11bml6YXRpb24gdGhhdCBpcyBub3QgY29udmV5ZWQgYnkgdGhlIG90aGVyIGF0dHJpYnV0ZXMuXHJcbiAgICovXHJcbiAgbm90ZT86IGZoaXIuQW5ub3RhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVhc29ucyB3aHkgYSB2YWNjaW5lIHdhcyBvciB3YXMgbm90IGFkbWluaXN0ZXJlZC5cclxuICAgKi9cclxuICBleHBsYW5hdGlvbj86IGZoaXIuSW1tdW5pemF0aW9uRXhwbGFuYXRpb25BcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDYXRlZ29yaWNhbCBkYXRhIGluZGljYXRpbmcgdGhhdCBhbiBhZHZlcnNlIGV2ZW50IGlzIGFzc29jaWF0ZWQgaW4gdGltZSB0byBhbiBpbW11bml6YXRpb24uXHJcbiAgICovXHJcbiAgcmVhY3Rpb24/OiBmaGlyLkltbXVuaXphdGlvblJlYWN0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvdG9jb2wocykgdW5kZXIgd2hpY2ggdGhlIHZhY2NpbmUgd2FzIGFkbWluaXN0ZXJlZC5cclxuICAgKi9cclxuICB2YWNjaW5hdGlvblByb3RvY29sPzogZmhpci5JbW11bml6YXRpb25WYWNjaW5hdGlvblByb3RvY29sQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlc2NyaWJlcyB0aGUgZXZlbnQgb2YgYSBwYXRpZW50IGJlaW5nIGFkbWluaXN0ZXJlZCBhIHZhY2NpbmF0aW9uIG9yIGEgcmVjb3JkIG9mIGEgdmFjY2luYXRpb24gYXMgcmVwb3J0ZWQgYnkgYSBwYXRpZW50LCBhIGNsaW5pY2lhbiBvciBhbm90aGVyIHBhcnR5IGFuZCBtYXkgaW5jbHVkZSB2YWNjaW5lIHJlYWN0aW9uIGluZm9ybWF0aW9uIGFuZCB3aGF0IHZhY2NpbmF0aW9uIHByb3RvY29sIHdhcyBmb2xsb3dlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbW11bml6YXRpb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0ltbXVuaXphdGlvbic7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJJbW11bml6YXRpb25cIjtcclxuICAvKipcclxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGFzc2lnbmVkIHRvIHRoaXMgaW1tdW5pemF0aW9uIHJlY29yZC5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgdmFjY2luYXRpb24gZXZlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1czogZmhpci5GaGlyQ29kZTxNZWRpY2F0aW9uQWRtaW5TdGF0dXNDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBEYXRlIHZhY2NpbmUgYWRtaW5pc3RlcmVkIG9yIHdhcyB0byBiZSBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGRhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVmFjY2luZSB0aGF0IHdhcyBhZG1pbmlzdGVyZWQgb3Igd2FzIHRvIGJlIGFkbWluaXN0ZXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdmFjY2luZUNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhdGllbnQgd2hvIGVpdGhlciByZWNlaXZlZCBvciBkaWQgbm90IHJlY2VpdmUgdGhlIGltbXVuaXphdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcGF0aWVudDogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHZhY2NpbmF0aW9uIHdhcyBvciB3YXMgbm90IGdpdmVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB3YXNOb3RHaXZlbjogZmhpci5GaGlyQm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRydWUgaWYgdGhpcyBhZG1pbmlzdHJhdGlvbiB3YXMgcmVwb3J0ZWQgcmF0aGVyIHRoYW4gZGlyZWN0bHkgYWRtaW5pc3RlcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXBvcnRlZDogZmhpci5GaGlyQm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIENsaW5pY2lhbiB3aG8gYWRtaW5pc3RlcmVkIHRoZSB2YWNjaW5lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwZXJmb3JtZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljaWFuIHdobyBvcmRlcmVkIHRoZSB2YWNjaW5hdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdGVyPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2aXNpdCBvciBhZG1pc3Npb24gb3Igb3RoZXIgY29udGFjdCBiZXR3ZWVuIHBhdGllbnQgYW5kIGhlYWx0aCBjYXJlIHByb3ZpZGVyIHRoZSBpbW11bml6YXRpb24gd2FzIHBlcmZvcm1lZCBhcyBwYXJ0IG9mLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmNvdW50ZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTmFtZSBvZiB2YWNjaW5lIG1hbnVmYWN0dXJlci5cclxuICAgKi9cclxuICBwdWJsaWMgbWFudWZhY3R1cmVyPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXJ2aWNlIGRlbGl2ZXJ5IGxvY2F0aW9uIHdoZXJlIHRoZSB2YWNjaW5lIGFkbWluaXN0cmF0aW9uIG9jY3VycmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2NhdGlvbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMb3QgbnVtYmVyIG9mIHRoZSAgdmFjY2luZSBwcm9kdWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb3ROdW1iZXI/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgdmFjY2luZSBiYXRjaCBleHBpcmVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleHBpcmF0aW9uRGF0ZT86IGZoaXIuRmhpckRhdGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEJvZHkgc2l0ZSB3aGVyZSB2YWNjaW5lIHdhcyBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNpdGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhdGggYnkgd2hpY2ggdGhlIHZhY2NpbmUgcHJvZHVjdCBpcyB0YWtlbiBpbnRvIHRoZSBib2R5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyByb3V0ZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcXVhbnRpdHkgb2YgdmFjY2luZSBwcm9kdWN0IHRoYXQgd2FzIGFkbWluaXN0ZXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZG9zZVF1YW50aXR5PzogZmhpci5RdWFudGl0eXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0cmEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGltbXVuaXphdGlvbiB0aGF0IGlzIG5vdCBjb252ZXllZCBieSB0aGUgb3RoZXIgYXR0cmlidXRlcy5cclxuICAgKi9cclxuICBwdWJsaWMgbm90ZTogZmhpci5Bbm5vdGF0aW9uW107XHJcbiAgLyoqXHJcbiAgICogUmVhc29ucyB3aHkgYSB2YWNjaW5lIHdhcyBvciB3YXMgbm90IGFkbWluaXN0ZXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwbGFuYXRpb24/OiBmaGlyLkltbXVuaXphdGlvbkV4cGxhbmF0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDYXRlZ29yaWNhbCBkYXRhIGluZGljYXRpbmcgdGhhdCBhbiBhZHZlcnNlIGV2ZW50IGlzIGFzc29jaWF0ZWQgaW4gdGltZSB0byBhbiBpbW11bml6YXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlYWN0aW9uOiBmaGlyLkltbXVuaXphdGlvblJlYWN0aW9uW107XHJcbiAgLyoqXHJcbiAgICogQ29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb3RvY29sKHMpIHVuZGVyIHdoaWNoIHRoZSB2YWNjaW5lIHdhcyBhZG1pbmlzdGVyZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHZhY2NpbmF0aW9uUHJvdG9jb2w6IGZoaXIuSW1tdW5pemF0aW9uVmFjY2luYXRpb25Qcm90b2NvbFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEltbXVuaXphdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEltbXVuaXphdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdJbW11bml6YXRpb24nO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPE1lZGljYXRpb25BZG1pblN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9LCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxNZWRpY2F0aW9uQWRtaW5TdGF0dXNDb2RlVHlwZT4oc291cmNlLl9zdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5kYXRlfSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kYXRlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGF0ZSkgeyB0aGlzLmRhdGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGF0ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl9kYXRlIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGF0ZVRpbWVBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhY2NpbmVDb2RlJ10pIHsgdGhpcy52YWNjaW5lQ29kZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudmFjY2luZUNvZGUsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy52YWNjaW5lQ29kZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhdGllbnQnXSkgeyB0aGlzLnBhdGllbnQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnBhdGllbnQsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXRpZW50ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnd2FzTm90R2l2ZW4nXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMud2FzTm90R2l2ZW4gPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS53YXNOb3RHaXZlbn0sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy53YXNOb3RHaXZlbiA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ193YXNOb3RHaXZlbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLndhc05vdEdpdmVuKSB7IHRoaXMud2FzTm90R2l2ZW4uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fd2FzTm90R2l2ZW4hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy53YXNOb3RHaXZlbiA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fd2FzTm90R2l2ZW4gYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZXBvcnRlZCddICE9PSB1bmRlZmluZWQpIHsgdGhpcy5yZXBvcnRlZCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLnJlcG9ydGVkfSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlcG9ydGVkID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3JlcG9ydGVkJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVwb3J0ZWQpIHsgdGhpcy5yZXBvcnRlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZXBvcnRlZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlcG9ydGVkID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9yZXBvcnRlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmZvcm1lciddKSB7IHRoaXMucGVyZm9ybWVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5wZXJmb3JtZXIsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXF1ZXN0ZXInXSkgeyB0aGlzLnJlcXVlc3RlciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UucmVxdWVzdGVyLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZW5jb3VudGVyJ10pIHsgdGhpcy5lbmNvdW50ZXIgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmVuY291bnRlciwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ21hbnVmYWN0dXJlciddKSB7IHRoaXMubWFudWZhY3R1cmVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5tYW51ZmFjdHVyZXIsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydsb2NhdGlvbiddKSB7IHRoaXMubG9jYXRpb24gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmxvY2F0aW9uLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbG90TnVtYmVyJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLmxvdE51bWJlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubG90TnVtYmVyfSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19sb3ROdW1iZXInXSkge1xyXG4gICAgICBpZiAodGhpcy5sb3ROdW1iZXIpIHsgdGhpcy5sb3ROdW1iZXIuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbG90TnVtYmVyISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubG90TnVtYmVyID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2xvdE51bWJlciBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZXhwaXJhdGlvbkRhdGUnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZXhwaXJhdGlvbkRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZSh7dmFsdWU6IHNvdXJjZS5leHBpcmF0aW9uRGF0ZX0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfZXhwaXJhdGlvbkRhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5leHBpcmF0aW9uRGF0ZSkgeyB0aGlzLmV4cGlyYXRpb25EYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2V4cGlyYXRpb25EYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZXhwaXJhdGlvbkRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZShzb3VyY2UuX2V4cGlyYXRpb25EYXRlIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGF0ZUFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2l0ZSddKSB7IHRoaXMuc2l0ZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uuc2l0ZSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JvdXRlJ10pIHsgdGhpcy5yb3V0ZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uucm91dGUsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydkb3NlUXVhbnRpdHknXSkgeyB0aGlzLmRvc2VRdWFudGl0eSA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5kb3NlUXVhbnRpdHksIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydub3RlJ10pIHsgdGhpcy5ub3RlID0gc291cmNlLm5vdGUubWFwKCh4KSA9PiBuZXcgZmhpci5Bbm5vdGF0aW9uKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubm90ZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydleHBsYW5hdGlvbiddKSB7IHRoaXMuZXhwbGFuYXRpb24gPSBuZXcgZmhpci5JbW11bml6YXRpb25FeHBsYW5hdGlvbihzb3VyY2UuZXhwbGFuYXRpb24sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWFjdGlvbiddKSB7IHRoaXMucmVhY3Rpb24gPSBzb3VyY2UucmVhY3Rpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5JbW11bml6YXRpb25SZWFjdGlvbih4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhY2NpbmF0aW9uUHJvdG9jb2wnXSkgeyB0aGlzLnZhY2NpbmF0aW9uUHJvdG9jb2wgPSBzb3VyY2UudmFjY2luYXRpb25Qcm90b2NvbC5tYXAoKHgpID0+IG5ldyBmaGlyLkltbXVuaXphdGlvblZhY2NpbmF0aW9uUHJvdG9jb2woeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy52YWNjaW5hdGlvblByb3RvY29sID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdJbW11bml6YXRpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdpZGVudGlmaWVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTVignc3RhdHVzJyxleHAsJ01lZGljYXRpb25BZG1pblN0YXR1cycsTWVkaWNhdGlvbkFkbWluU3RhdHVzVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2RhdGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ3ZhY2NpbmVDb2RlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdwYXRpZW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCd3YXNOb3RHaXZlbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygncmVwb3J0ZWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3BlcmZvcm1lcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygncmVxdWVzdGVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdlbmNvdW50ZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ21hbnVmYWN0dXJlcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbG9jYXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2xvdE51bWJlcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZXhwaXJhdGlvbkRhdGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3NpdGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JvdXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkb3NlUXVhbnRpdHknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ25vdGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2V4cGxhbmF0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdyZWFjdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgndmFjY2luYXRpb25Qcm90b2NvbCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=