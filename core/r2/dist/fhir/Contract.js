// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Contract
import * as fhir from '../fhir.js';
/**
 * List of Contract actors.
 */
export class ContractActor extends fhir.BackboneElement {
    /**
     * Default constructor for ContractActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = new fhir.Reference(source.entity);
        }
        else {
            this.entity = null;
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.actor';
        }
        iss.push(...this.vRS('entity', exp));
        iss.push(...this.vOA('role', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractActor._fts_dataType = 'ContractActor';
/**
 * Contract Valued Item List.
 */
export class ContractValuedItem extends fhir.BackboneElement {
    /**
     * Default constructor for ContractValuedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = source.entity;
        }
        else if (source['entityCodeableConcept']) {
            this.entity = new fhir.CodeableConcept(source.entityCodeableConcept);
        }
        else if (source['entityReference']) {
            this.entity = new fhir.Reference(source.entityReference);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['effectiveTime']) {
            this.effectiveTime = new fhir.FhirDateTime({ value: source.effectiveTime });
        }
        if (source['_effectiveTime']) {
            if (this.effectiveTime) {
                this.effectiveTime.addExtendedProperties(source._effectiveTime);
            }
            else {
                this.effectiveTime = new fhir.FhirDateTime(source._effectiveTime);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Quantity(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['_points']) {
            if (this.points) {
                this.points.addExtendedProperties(source._points);
            }
            else {
                this.points = new fhir.FhirDecimal(source._points);
            }
        }
        if (source['net']) {
            this.net = new fhir.Quantity(source.net);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.valuedItem';
        }
        iss.push(...this.vOS('entity', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('effectiveTime', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('points', exp));
        iss.push(...this.vOS('net', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractValuedItem._fts_dataType = 'ContractValuedItem';
/**
 * Internal flag to properly serialize choice-type element Contract.valuedItem.entity[x]
 */
ContractValuedItem._fts_entityIsChoice = true;
/**
 * Party signing this Contract.
 */
export class ContractSigner extends fhir.BackboneElement {
    /**
     * Default constructor for ContractSigner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
        else {
            this.party = null;
        }
        if (source['signature']) {
            this.signature = new fhir.FhirString({ value: source.signature });
        }
        else {
            this.signature = null;
        }
        if (source['_signature']) {
            if (this.signature) {
                this.signature.addExtendedProperties(source._signature);
            }
            else {
                this.signature = new fhir.FhirString(source._signature);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.signer';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('party', exp));
        iss.push(...this.vRS('signature', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractSigner._fts_dataType = 'ContractSigner';
/**
 * List of actors participating in this Contract Provision.
 */
export class ContractTermActor extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = new fhir.Reference(source.entity);
        }
        else {
            this.entity = null;
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.term.actor';
        }
        iss.push(...this.vRS('entity', exp));
        iss.push(...this.vOA('role', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermActor._fts_dataType = 'ContractTermActor';
/**
 * Contract Provision Valued Item List.
 */
export class ContractTermValuedItem extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermValuedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = source.entity;
        }
        else if (source['entityCodeableConcept']) {
            this.entity = new fhir.CodeableConcept(source.entityCodeableConcept);
        }
        else if (source['entityReference']) {
            this.entity = new fhir.Reference(source.entityReference);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['effectiveTime']) {
            this.effectiveTime = new fhir.FhirDateTime({ value: source.effectiveTime });
        }
        if (source['_effectiveTime']) {
            if (this.effectiveTime) {
                this.effectiveTime.addExtendedProperties(source._effectiveTime);
            }
            else {
                this.effectiveTime = new fhir.FhirDateTime(source._effectiveTime);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Quantity(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['_points']) {
            if (this.points) {
                this.points.addExtendedProperties(source._points);
            }
            else {
                this.points = new fhir.FhirDecimal(source._points);
            }
        }
        if (source['net']) {
            this.net = new fhir.Quantity(source.net);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.term.valuedItem';
        }
        iss.push(...this.vOS('entity', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('effectiveTime', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('points', exp));
        iss.push(...this.vOS('net', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermValuedItem._fts_dataType = 'ContractTermValuedItem';
/**
 * Internal flag to properly serialize choice-type element Contract.term.valuedItem.entity[x]
 */
ContractTermValuedItem._fts_entityIsChoice = true;
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export class ContractTerm extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTerm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirDateTime(source._issued);
            }
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.action = [];
        }
        if (source['actionReason']) {
            this.actionReason = source.actionReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.actionReason = [];
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ContractTermActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['valuedItem']) {
            this.valuedItem = source.valuedItem.map((x) => new fhir.ContractTermValuedItem(x));
        }
        else {
            this.valuedItem = [];
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.ContractTerm(x));
        }
        else {
            this.group = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.term';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('issued', exp));
        iss.push(...this.vOS('applies', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('subType', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOA('action', exp));
        iss.push(...this.vOA('actionReason', exp));
        iss.push(...this.vOA('actor', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOA('valuedItem', exp));
        iss.push(...this.vOA('group', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTerm._fts_dataType = 'ContractTerm';
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export class ContractFriendly extends fhir.BackboneElement {
    /**
     * Default constructor for ContractFriendly - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.friendly';
        }
        iss.push(...this.vRS('content', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractFriendly._fts_dataType = 'ContractFriendly';
/**
 * Internal flag to properly serialize choice-type element Contract.friendly.content[x]
 */
ContractFriendly._fts_contentIsChoice = true;
/**
 * List of Legal expressions or representations of this Contract.
 */
export class ContractLegal extends fhir.BackboneElement {
    /**
     * Default constructor for ContractLegal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.legal';
        }
        iss.push(...this.vRS('content', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractLegal._fts_dataType = 'ContractLegal';
/**
 * Internal flag to properly serialize choice-type element Contract.legal.content[x]
 */
ContractLegal._fts_contentIsChoice = true;
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export class ContractRule extends fhir.BackboneElement {
    /**
     * Default constructor for ContractRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract.rule';
        }
        iss.push(...this.vRS('content', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractRule._fts_dataType = 'ContractRule';
/**
 * Internal flag to properly serialize choice-type element Contract.rule.content[x]
 */
ContractRule._fts_contentIsChoice = true;
/**
 * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
 */
export class Contract extends fhir.DomainResource {
    /**
     * Default constructor for Contract - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Contract';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirDateTime(source._issued);
            }
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['authority']) {
            this.authority = source.authority.map((x) => new fhir.Reference(x));
        }
        else {
            this.authority = [];
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.Reference(x));
        }
        else {
            this.domain = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = source.subType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subType = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.action = [];
        }
        if (source['actionReason']) {
            this.actionReason = source.actionReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.actionReason = [];
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ContractActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['valuedItem']) {
            this.valuedItem = source.valuedItem.map((x) => new fhir.ContractValuedItem(x));
        }
        else {
            this.valuedItem = [];
        }
        if (source['signer']) {
            this.signer = source.signer.map((x) => new fhir.ContractSigner(x));
        }
        else {
            this.signer = [];
        }
        if (source['term']) {
            this.term = source.term.map((x) => new fhir.ContractTerm(x));
        }
        else {
            this.term = [];
        }
        if (source['binding']) {
            this.binding = source.binding;
        }
        else if (source['bindingAttachment']) {
            this.binding = new fhir.Attachment(source.bindingAttachment);
        }
        else if (source['bindingReference']) {
            this.binding = new fhir.Reference(source.bindingReference);
        }
        if (source['friendly']) {
            this.friendly = source.friendly.map((x) => new fhir.ContractFriendly(x));
        }
        else {
            this.friendly = [];
        }
        if (source['legal']) {
            this.legal = source.legal.map((x) => new fhir.ContractLegal(x));
        }
        else {
            this.legal = [];
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.ContractRule(x));
        }
        else {
            this.rule = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Contract';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('issued', exp));
        iss.push(...this.vOS('applies', exp));
        iss.push(...this.vOA('subject', exp));
        iss.push(...this.vOA('authority', exp));
        iss.push(...this.vOA('domain', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('subType', exp));
        iss.push(...this.vOA('action', exp));
        iss.push(...this.vOA('actionReason', exp));
        iss.push(...this.vOA('actor', exp));
        iss.push(...this.vOA('valuedItem', exp));
        iss.push(...this.vOA('signer', exp));
        iss.push(...this.vOA('term', exp));
        iss.push(...this.vOS('binding', exp));
        iss.push(...this.vOA('friendly', exp));
        iss.push(...this.vOA('legal', exp));
        iss.push(...this.vOA('rule', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Contract._fts_dataType = 'Contract';
/**
 * Internal flag to properly serialize choice-type element Contract.binding[x]
 */
Contract._fts_bindingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,