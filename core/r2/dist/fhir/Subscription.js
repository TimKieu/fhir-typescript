// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Subscription
import * as fhir from '../fhir.js';
// @ts-ignore
import { SubscriptionChannelTypeVsValidation } from '../fhirValueSets/SubscriptionChannelTypeVsValidation.js';
// @ts-ignore
import { SubscriptionStatusVsValidation } from '../fhirValueSets/SubscriptionStatusVsValidation.js';
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
export class SubscriptionChannel extends fhir.BackboneElement {
    /**
     * Default constructor for SubscriptionChannel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['endpoint'] !== undefined) {
            this.endpoint = new fhir.FhirUri({ value: source.endpoint }, options);
        }
        if (source['_endpoint']) {
            if (this.endpoint) {
                this.endpoint.addExtendedProperties(source._endpoint);
            }
            else {
                this.endpoint = new fhir.FhirUri(source._endpoint, options);
            }
        }
        if (source['payload'] !== undefined) {
            this.payload = new fhir.FhirString({ value: source.payload }, options);
        }
        else {
            this.payload = null;
        }
        if (source['_payload']) {
            if (this.payload) {
                this.payload.addExtendedProperties(source._payload);
            }
            else {
                this.payload = new fhir.FhirString(source._payload, options);
            }
        }
        if (source['header'] !== undefined) {
            this.header = new fhir.FhirString({ value: source.header }, options);
        }
        if (source['_header']) {
            if (this.header) {
                this.header.addExtendedProperties(source._header);
            }
            else {
                this.header = new fhir.FhirString(source._header, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Subscription.channel';
        }
        iss.push(...this.vRSV('type', exp, 'SubscriptionChannelType', SubscriptionChannelTypeVsValidation, 'r'));
        iss.push(...this.vOS('endpoint', exp));
        iss.push(...this.vRS('payload', exp));
        iss.push(...this.vOS('header', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubscriptionChannel._fts_dataType = 'SubscriptionChannel';
/**
 * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
 */
export class Subscription extends fhir.DomainResource {
    /**
     * Default constructor for Subscription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Subscription';
        if (source['criteria'] !== undefined) {
            this.criteria = new fhir.FhirString({ value: source.criteria }, options);
        }
        else {
            this.criteria = null;
        }
        if (source['_criteria']) {
            if (this.criteria) {
                this.criteria.addExtendedProperties(source._criteria);
            }
            else {
                this.criteria = new fhir.FhirString(source._criteria, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['reason'] !== undefined) {
            this.reason = new fhir.FhirString({ value: source.reason }, options);
        }
        else {
            this.reason = null;
        }
        if (source['_reason']) {
            if (this.reason) {
                this.reason.addExtendedProperties(source._reason);
            }
            else {
                this.reason = new fhir.FhirString(source._reason, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['error'] !== undefined) {
            this.error = new fhir.FhirString({ value: source.error }, options);
        }
        if (source['_error']) {
            if (this.error) {
                this.error.addExtendedProperties(source._error);
            }
            else {
                this.error = new fhir.FhirString(source._error, options);
            }
        }
        if (source['channel']) {
            this.channel = new fhir.SubscriptionChannel(source.channel, options);
        }
        else {
            this.channel = null;
        }
        if (source['end'] !== undefined) {
            this.end = new fhir.FhirInstant({ value: source.end }, options);
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end, options);
            }
        }
        if (source['tag']) {
            this.tag = source.tag.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.tag = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Subscription';
        }
        iss.push(...this.vRS('criteria', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vRS('reason', exp));
        iss.push(...this.vRSV('status', exp, 'SubscriptionStatus', SubscriptionStatusVsValidation, 'r'));
        iss.push(...this.vOS('error', exp));
        iss.push(...this.vRS('channel', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOA('tag', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Subscription._fts_dataType = 'Subscription';
//# sourceMappingURL=data:application/json;base64,