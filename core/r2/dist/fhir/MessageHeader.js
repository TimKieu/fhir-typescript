// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageHeader
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResponseVsValidation } from '../fhirValueSets/ResponseVsValidation.js';
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export class MessageHeaderResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.FhirId({ value: source.identifier });
        }
        else {
            this.identifier = null;
        }
        if (source['_identifier']) {
            if (this.identifier) {
                this.identifier.addExtendedProperties(source._identifier);
            }
            else {
                this.identifier = new fhir.FhirId(source._identifier);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['details']) {
            this.details = new fhir.Reference(source.details);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader.response';
        }
        this.vRS('identifier', exp);
        this.vRSV('code', exp, 'Response', ResponseVsValidation, 'r');
        this.vOS('details', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderResponse._fts_dataType = 'MessageHeaderResponse';
/**
 * Allows replies, supports audit.
 */
export class MessageHeaderSource extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['software']) {
            this.software = new fhir.FhirString({ value: source.software });
        }
        if (source['_software']) {
            if (this.software) {
                this.software.addExtendedProperties(source._software);
            }
            else {
                this.software = new fhir.FhirString(source._software);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['contact']) {
            this.contact = new fhir.ContactPoint(source.contact);
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUri({ value: source.endpoint });
        }
        else {
            this.endpoint = null;
        }
        if (source['_endpoint']) {
            if (this.endpoint) {
                this.endpoint.addExtendedProperties(source._endpoint);
            }
            else {
                this.endpoint = new fhir.FhirUri(source._endpoint);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader.source';
        }
        this.vOS('name', exp);
        this.vOS('software', exp);
        this.vOS('version', exp);
        this.vOS('contact', exp);
        this.vRS('endpoint', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderSource._fts_dataType = 'MessageHeaderSource';
/**
 * Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
 */
export class MessageHeaderDestination extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUri({ value: source.endpoint });
        }
        else {
            this.endpoint = null;
        }
        if (source['_endpoint']) {
            if (this.endpoint) {
                this.endpoint.addExtendedProperties(source._endpoint);
            }
            else {
                this.endpoint = new fhir.FhirUri(source._endpoint);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader.destination';
        }
        this.vOS('name', exp);
        this.vOS('target', exp);
        this.vRS('endpoint', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderDestination._fts_dataType = 'MessageHeaderDestination';
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export class MessageHeader extends fhir.DomainResource {
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MessageHeader';
        if (source['timestamp']) {
            this.timestamp = new fhir.FhirInstant({ value: source.timestamp });
        }
        else {
            this.timestamp = null;
        }
        if (source['_timestamp']) {
            if (this.timestamp) {
                this.timestamp.addExtendedProperties(source._timestamp);
            }
            else {
                this.timestamp = new fhir.FhirInstant(source._timestamp);
            }
        }
        if (source['event']) {
            this.event = new fhir.Coding(source.event);
        }
        else {
            this.event = null;
        }
        if (source['response']) {
            this.response = new fhir.MessageHeaderResponse(source.response);
        }
        if (source['source']) {
            this.source = new fhir.MessageHeaderSource(source.source);
        }
        else {
            this.source = null;
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.MessageHeaderDestination(x));
        }
        else {
            this.destination = [];
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['receiver']) {
            this.receiver = new fhir.Reference(source.receiver);
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.Reference(x));
        }
        else {
            this.data = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageHeader';
        }
        this.vRS('resourceType', exp);
        this.vRS('timestamp', exp);
        this.vRS('event', exp);
        this.vOS('response', exp);
        this.vRS('source', exp);
        this.vOA('destination', exp);
        this.vOS('enterer', exp);
        this.vOS('author', exp);
        this.vOS('receiver', exp);
        this.vOS('responsible', exp);
        this.vOS('reason', exp);
        this.vOA('data', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeader._fts_dataType = 'MessageHeader';
//# sourceMappingURL=data:application/json;base64,