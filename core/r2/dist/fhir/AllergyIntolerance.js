// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReactionEventCertaintyVsValidation } from '../fhirValueSets/ReactionEventCertaintyVsValidation.js';
// @ts-ignore
import { ReactionEventSeverityVsValidation } from '../fhirValueSets/ReactionEventSeverityVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceStatusVsValidation } from '../fhirValueSets/AllergyIntoleranceStatusVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCriticalityVsValidation } from '../fhirValueSets/AllergyIntoleranceCriticalityVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceTypeVsValidation } from '../fhirValueSets/AllergyIntoleranceTypeVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCategoryVsValidation } from '../fhirValueSets/AllergyIntoleranceCategoryVsValidation.js';
/**
 * Details about each adverse reaction event linked to exposure to the identified Substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance, options);
        }
        if (source['certainty'] !== undefined) {
            this.certainty = new fhir.FhirCode({ value: source.certainty }, options);
        }
        if (source['_certainty']) {
            if (this.certainty) {
                this.certainty.addExtendedProperties(source._certainty);
            }
            else {
                this.certainty = new fhir.FhirCode(source._certainty, options);
            }
        }
        if (source['manifestation']) {
            this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.manifestation = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['onset'] !== undefined) {
            this.onset = new fhir.FhirDateTime({ value: source.onset }, options);
        }
        if (source['_onset']) {
            if (this.onset) {
                this.onset.addExtendedProperties(source._onset);
            }
            else {
                this.onset = new fhir.FhirDateTime(source._onset, options);
            }
        }
        if (source['severity'] !== undefined) {
            this.severity = new fhir.FhirCode({ value: source.severity }, options);
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity, options);
            }
        }
        if (source['exposureRoute']) {
            this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute, options);
        }
        if (source['note']) {
            this.note = new fhir.Annotation(source.note, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AllergyIntolerance.reaction';
        }
        iss.push(...this.vOS('substance', exp));
        iss.push(...this.vOSV('certainty', exp, 'ReactionEventCertainty', ReactionEventCertaintyVsValidation, 'r'));
        iss.push(...this.vRA('manifestation', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOSV('severity', exp, 'ReactionEventSeverity', ReactionEventSeverityVsValidation, 'r'));
        iss.push(...this.vOS('exposureRoute', exp));
        iss.push(...this.vOS('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntoleranceReaction._fts_dataType = 'AllergyIntoleranceReaction';
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AllergyIntolerance';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['onset'] !== undefined) {
            this.onset = new fhir.FhirDateTime({ value: source.onset }, options);
        }
        if (source['_onset']) {
            if (this.onset) {
                this.onset.addExtendedProperties(source._onset);
            }
            else {
                this.onset = new fhir.FhirDateTime(source._onset, options);
            }
        }
        if (source['recordedDate'] !== undefined) {
            this.recordedDate = new fhir.FhirDateTime({ value: source.recordedDate }, options);
        }
        if (source['_recordedDate']) {
            if (this.recordedDate) {
                this.recordedDate.addExtendedProperties(source._recordedDate);
            }
            else {
                this.recordedDate = new fhir.FhirDateTime(source._recordedDate, options);
            }
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder, options);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['reporter']) {
            this.reporter = new fhir.Reference(source.reporter, options);
        }
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance, options);
        }
        else {
            this.substance = null;
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['criticality'] !== undefined) {
            this.criticality = new fhir.FhirCode({ value: source.criticality }, options);
        }
        if (source['_criticality']) {
            if (this.criticality) {
                this.criticality.addExtendedProperties(source._criticality);
            }
            else {
                this.criticality = new fhir.FhirCode(source._criticality, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['category'] !== undefined) {
            this.category = new fhir.FhirCode({ value: source.category }, options);
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category, options);
            }
        }
        if (source['lastOccurence'] !== undefined) {
            this.lastOccurence = new fhir.FhirDateTime({ value: source.lastOccurence }, options);
        }
        if (source['_lastOccurence']) {
            if (this.lastOccurence) {
                this.lastOccurence.addExtendedProperties(source._lastOccurence);
            }
            else {
                this.lastOccurence = new fhir.FhirDateTime(source._lastOccurence, options);
            }
        }
        if (source['note']) {
            this.note = new fhir.Annotation(source.note, options);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x, options));
        }
        else {
            this.reaction = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AllergyIntolerance';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOS('recordedDate', exp));
        iss.push(...this.vOS('recorder', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('reporter', exp));
        iss.push(...this.vRS('substance', exp));
        iss.push(...this.vOSV('status', exp, 'AllergyIntoleranceStatus', AllergyIntoleranceStatusVsValidation, 'r'));
        iss.push(...this.vOSV('criticality', exp, 'AllergyIntoleranceCriticality', AllergyIntoleranceCriticalityVsValidation, 'r'));
        iss.push(...this.vOSV('type', exp, 'AllergyIntoleranceType', AllergyIntoleranceTypeVsValidation, 'r'));
        iss.push(...this.vOSV('category', exp, 'AllergyIntoleranceCategory', AllergyIntoleranceCategoryVsValidation, 'r'));
        iss.push(...this.vOS('lastOccurence', exp));
        iss.push(...this.vOS('note', exp));
        iss.push(...this.vOA('reaction', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntolerance._fts_dataType = 'AllergyIntolerance';
//# sourceMappingURL=data:application/json;base64,