// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReactionEventCertaintyVsValidation } from '../fhirValueSets/ReactionEventCertaintyVsValidation.js';
// @ts-ignore
import { ReactionEventSeverityVsValidation } from '../fhirValueSets/ReactionEventSeverityVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceStatusVsValidation } from '../fhirValueSets/AllergyIntoleranceStatusVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCriticalityVsValidation } from '../fhirValueSets/AllergyIntoleranceCriticalityVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceTypeVsValidation } from '../fhirValueSets/AllergyIntoleranceTypeVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCategoryVsValidation } from '../fhirValueSets/AllergyIntoleranceCategoryVsValidation.js';
/**
 * Details about each adverse reaction event linked to exposure to the identified Substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        if (source['certainty']) {
            this.certainty = new fhir.FhirCode({ value: source.certainty });
        }
        if (source['_certainty']) {
            if (this.certainty) {
                this.certainty.addExtendedProperties(source._certainty);
            }
            else {
                this.certainty = new fhir.FhirCode(source._certainty);
            }
        }
        if (source['manifestation']) {
            this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.manifestation = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['onset']) {
            this.onset = new fhir.FhirDateTime({ value: source.onset });
        }
        if (source['_onset']) {
            if (this.onset) {
                this.onset.addExtendedProperties(source._onset);
            }
            else {
                this.onset = new fhir.FhirDateTime(source._onset);
            }
        }
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['exposureRoute']) {
            this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute);
        }
        if (source['note']) {
            this.note = new fhir.Annotation(source.note);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AllergyIntolerance.reaction';
        }
        this.vOS('substance', exp);
        this.vOSV('certainty', exp, 'ReactionEventCertainty', ReactionEventCertaintyVsValidation, 'r');
        this.vRA('manifestation', exp);
        this.vOS('description', exp);
        this.vOS('onset', exp);
        this.vOSV('severity', exp, 'ReactionEventSeverity', ReactionEventSeverityVsValidation, 'r');
        this.vOS('exposureRoute', exp);
        this.vOS('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntoleranceReaction._fts_dataType = 'AllergyIntoleranceReaction';
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AllergyIntolerance';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['onset']) {
            this.onset = new fhir.FhirDateTime({ value: source.onset });
        }
        if (source['_onset']) {
            if (this.onset) {
                this.onset.addExtendedProperties(source._onset);
            }
            else {
                this.onset = new fhir.FhirDateTime(source._onset);
            }
        }
        if (source['recordedDate']) {
            this.recordedDate = new fhir.FhirDateTime({ value: source.recordedDate });
        }
        if (source['_recordedDate']) {
            if (this.recordedDate) {
                this.recordedDate.addExtendedProperties(source._recordedDate);
            }
            else {
                this.recordedDate = new fhir.FhirDateTime(source._recordedDate);
            }
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['reporter']) {
            this.reporter = new fhir.Reference(source.reporter);
        }
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        else {
            this.substance = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['criticality']) {
            this.criticality = new fhir.FhirCode({ value: source.criticality });
        }
        if (source['_criticality']) {
            if (this.criticality) {
                this.criticality.addExtendedProperties(source._criticality);
            }
            else {
                this.criticality = new fhir.FhirCode(source._criticality);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['lastOccurence']) {
            this.lastOccurence = new fhir.FhirDateTime({ value: source.lastOccurence });
        }
        if (source['_lastOccurence']) {
            if (this.lastOccurence) {
                this.lastOccurence.addExtendedProperties(source._lastOccurence);
            }
            else {
                this.lastOccurence = new fhir.FhirDateTime(source._lastOccurence);
            }
        }
        if (source['note']) {
            this.note = new fhir.Annotation(source.note);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x));
        }
        else {
            this.reaction = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AllergyIntolerance';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('onset', exp);
        this.vOS('recordedDate', exp);
        this.vOS('recorder', exp);
        this.vRS('patient', exp);
        this.vOS('reporter', exp);
        this.vRS('substance', exp);
        this.vOSV('status', exp, 'AllergyIntoleranceStatus', AllergyIntoleranceStatusVsValidation, 'r');
        this.vOSV('criticality', exp, 'AllergyIntoleranceCriticality', AllergyIntoleranceCriticalityVsValidation, 'r');
        this.vOSV('type', exp, 'AllergyIntoleranceType', AllergyIntoleranceTypeVsValidation, 'r');
        this.vOSV('category', exp, 'AllergyIntoleranceCategory', AllergyIntoleranceCategoryVsValidation, 'r');
        this.vOS('lastOccurence', exp);
        this.vOS('note', exp);
        this.vOA('reaction', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntolerance._fts_dataType = 'AllergyIntolerance';
//# sourceMappingURL=data:application/json;base64,