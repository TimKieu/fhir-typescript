// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription
import * as fhir from '../fhir.js';
// @ts-ignore
import { VisionEyeVsValidation } from '../fhirValueSets/VisionEyeVsValidation.js';
// @ts-ignore
import { VisionBaseVsValidation } from '../fhirValueSets/VisionBaseVsValidation.js';
/**
 * Deals with details of the dispense part of the supply specification.
 */
export class VisionPrescriptionDispense extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['product']) {
            this.product = new fhir.Coding(source.product);
        }
        else {
            this.product = null;
        }
        if (source['eye']) {
            this.eye = new fhir.FhirCode({ value: source.eye });
        }
        if (source['_eye']) {
            if (this.eye) {
                this.eye.addExtendedProperties(source._eye);
            }
            else {
                this.eye = new fhir.FhirCode(source._eye);
            }
        }
        if (source['sphere']) {
            this.sphere = new fhir.FhirDecimal({ value: source.sphere });
        }
        if (source['_sphere']) {
            if (this.sphere) {
                this.sphere.addExtendedProperties(source._sphere);
            }
            else {
                this.sphere = new fhir.FhirDecimal(source._sphere);
            }
        }
        if (source['cylinder']) {
            this.cylinder = new fhir.FhirDecimal({ value: source.cylinder });
        }
        if (source['_cylinder']) {
            if (this.cylinder) {
                this.cylinder.addExtendedProperties(source._cylinder);
            }
            else {
                this.cylinder = new fhir.FhirDecimal(source._cylinder);
            }
        }
        if (source['axis']) {
            this.axis = new fhir.FhirInteger({ value: source.axis });
        }
        if (source['_axis']) {
            if (this.axis) {
                this.axis.addExtendedProperties(source._axis);
            }
            else {
                this.axis = new fhir.FhirInteger(source._axis);
            }
        }
        if (source['prism']) {
            this.prism = new fhir.FhirDecimal({ value: source.prism });
        }
        if (source['_prism']) {
            if (this.prism) {
                this.prism.addExtendedProperties(source._prism);
            }
            else {
                this.prism = new fhir.FhirDecimal(source._prism);
            }
        }
        if (source['base']) {
            this.base = new fhir.FhirCode({ value: source.base });
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCode(source._base);
            }
        }
        if (source['add']) {
            this.add = new fhir.FhirDecimal({ value: source.add });
        }
        if (source['_add']) {
            if (this.add) {
                this.add.addExtendedProperties(source._add);
            }
            else {
                this.add = new fhir.FhirDecimal(source._add);
            }
        }
        if (source['power']) {
            this.power = new fhir.FhirDecimal({ value: source.power });
        }
        if (source['_power']) {
            if (this.power) {
                this.power.addExtendedProperties(source._power);
            }
            else {
                this.power = new fhir.FhirDecimal(source._power);
            }
        }
        if (source['backCurve']) {
            this.backCurve = new fhir.FhirDecimal({ value: source.backCurve });
        }
        if (source['_backCurve']) {
            if (this.backCurve) {
                this.backCurve.addExtendedProperties(source._backCurve);
            }
            else {
                this.backCurve = new fhir.FhirDecimal(source._backCurve);
            }
        }
        if (source['diameter']) {
            this.diameter = new fhir.FhirDecimal({ value: source.diameter });
        }
        if (source['_diameter']) {
            if (this.diameter) {
                this.diameter.addExtendedProperties(source._diameter);
            }
            else {
                this.diameter = new fhir.FhirDecimal(source._diameter);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source['color']) {
            this.color = new fhir.FhirString({ value: source.color });
        }
        if (source['_color']) {
            if (this.color) {
                this.color.addExtendedProperties(source._color);
            }
            else {
                this.color = new fhir.FhirString(source._color);
            }
        }
        if (source['brand']) {
            this.brand = new fhir.FhirString({ value: source.brand });
        }
        if (source['_brand']) {
            if (this.brand) {
                this.brand.addExtendedProperties(source._brand);
            }
            else {
                this.brand = new fhir.FhirString(source._brand);
            }
        }
        if (source['notes']) {
            this.notes = new fhir.FhirString({ value: source.notes });
        }
        if (source['_notes']) {
            if (this.notes) {
                this.notes.addExtendedProperties(source._notes);
            }
            else {
                this.notes = new fhir.FhirString(source._notes);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription.dispense';
        }
        iss.push(...this.vRS('product', exp));
        iss.push(...this.vOSV('eye', exp, 'VisionEye', VisionEyeVsValidation, 'r'));
        iss.push(...this.vOS('sphere', exp));
        iss.push(...this.vOS('cylinder', exp));
        iss.push(...this.vOS('axis', exp));
        iss.push(...this.vOS('prism', exp));
        iss.push(...this.vOSV('base', exp, 'VisionBase', VisionBaseVsValidation, 'r'));
        iss.push(...this.vOS('add', exp));
        iss.push(...this.vOS('power', exp));
        iss.push(...this.vOS('backCurve', exp));
        iss.push(...this.vOS('diameter', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOS('color', exp));
        iss.push(...this.vOS('brand', exp));
        iss.push(...this.vOS('notes', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionDispense._fts_dataType = 'VisionPrescriptionDispense';
/**
 * An authorization for the supply of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VisionPrescription';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['dateWritten']) {
            this.dateWritten = new fhir.FhirDateTime({ value: source.dateWritten });
        }
        if (source['_dateWritten']) {
            if (this.dateWritten) {
                this.dateWritten.addExtendedProperties(source._dateWritten);
            }
            else {
                this.dateWritten = new fhir.FhirDateTime(source._dateWritten);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['prescriber']) {
            this.prescriber = new fhir.Reference(source.prescriber);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['reason']) {
            this.reason = source.reason;
        }
        else if (source['reasonCodeableConcept']) {
            this.reason = new fhir.CodeableConcept(source.reasonCodeableConcept);
        }
        else if (source['reasonReference']) {
            this.reason = new fhir.Reference(source.reasonReference);
        }
        if (source['dispense']) {
            this.dispense = source.dispense.map((x) => new fhir.VisionPrescriptionDispense(x));
        }
        else {
            this.dispense = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('dateWritten', exp));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('prescriber', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOA('dispense', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescription._fts_dataType = 'VisionPrescription';
/**
 * Internal flag to properly serialize choice-type element VisionPrescription.reason[x]
 */
VisionPrescription._fts_reasonIsChoice = true;
//# sourceMappingURL=data:application/json;base64,