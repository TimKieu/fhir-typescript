// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Account
import * as fhir from '../fhir.js';
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
 */
export class Account extends fhir.DomainResource {
    /**
     * Default constructor for Account - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Account';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['activePeriod']) {
            this.activePeriod = new fhir.Period(source.activePeriod);
        }
        if (source['currency']) {
            this.currency = new fhir.Coding(source.currency);
        }
        if (source['balance']) {
            this.balance = new fhir.Quantity(source.balance);
        }
        if (source['coveragePeriod']) {
            this.coveragePeriod = new fhir.Period(source.coveragePeriod);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Account';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOS('name', exp);
        this.vOS('type', exp);
        this.vOS('status', exp);
        this.vOS('activePeriod', exp);
        this.vOS('currency', exp);
        this.vOS('balance', exp);
        this.vOS('coveragePeriod', exp);
        this.vOS('subject', exp);
        this.vOS('owner', exp);
        this.vOS('description', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Account._fts_dataType = 'Account';
//# sourceMappingURL=data:application/json;base64,