// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Resource
import * as fhir from '../fhir.js';
/**
 * This is the base resource type for everything.
 */
export class Resource extends fhir.FhirBase {
    /**
     * Default constructor for Resource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Resource';
        if (source['id'] !== undefined) {
            this.id = new fhir.FhirId({ value: source.id }, options);
        }
        if (source['_id']) {
            if (this.id) {
                this.id.addExtendedProperties(source._id);
            }
            else {
                this.id = new fhir.FhirId(source._id, options);
            }
        }
        if (source['meta']) {
            this.meta = new fhir.Meta(source.meta, options);
        }
        if (source['implicitRules'] !== undefined) {
            this.implicitRules = new fhir.FhirUri({ value: source.implicitRules }, options);
        }
        if (source['_implicitRules']) {
            if (this.implicitRules) {
                this.implicitRules.addExtendedProperties(source._implicitRules);
            }
            else {
                this.implicitRules = new fhir.FhirUri(source._implicitRules, options);
            }
        }
        if (source['language'] !== undefined) {
            this.language = new fhir.FhirCode({ value: source.language }, options);
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Resource';
        }
        iss.push(...this.vOS('id', exp));
        iss.push(...this.vOS('meta', exp));
        iss.push(...this.vOS('implicitRules', exp));
        iss.push(...this.vOS('language', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Resource._fts_dataType = 'Resource';
//# sourceMappingURL=data:application/json;base64,