// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim
import * as fhir from '../fhir.js';
// @ts-ignore
import { ClaimTypeLinkVsValidation } from '../fhirValueSets/ClaimTypeLinkVsValidation.js';
// @ts-ignore
import { ClaimUseLinkVsValidation } from '../fhirValueSets/ClaimUseLinkVsValidation.js';
/**
 * The party to be reimbursed for the services.
 */
export class ClaimPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['person']) {
            this.person = new fhir.Reference(source.person);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.payee';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vOS('organization', exp));
        iss.push(...this.vOS('person', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimPayee._fts_dataType = 'ClaimPayee';
/**
 * Ordered list of patient diagnosis for which care is sought.
 */
export class ClaimDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['diagnosis']) {
            this.diagnosis = new fhir.Coding(source.diagnosis);
        }
        else {
            this.diagnosis = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.diagnosis';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('diagnosis', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimDiagnosis._fts_dataType = 'ClaimDiagnosis';
/**
 * Health care programs and insurers are significant payors of health service costs.
 */
export class ClaimCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        else {
            this.focal = null;
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement']) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement });
        }
        if (source['_businessArrangement']) {
            if (this.businessArrangement) {
                this.businessArrangement.addExtendedProperties(source._businessArrangement);
            }
            else {
                this.businessArrangement = new fhir.FhirString(source._businessArrangement);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.Coding(source.relationship);
        }
        else {
            this.relationship = null;
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['_preAuthRef']) {
            source._preAuthRef.forEach((x, i) => {
                if (this.preAuthRef.length >= i) {
                    if (x) {
                        this.preAuthRef[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.preAuthRef.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        if (source['originalRuleset']) {
            this.originalRuleset = new fhir.Coding(source.originalRuleset);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.coverage';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('focal', exp));
        iss.push(...this.vRS('coverage', exp));
        iss.push(...this.vOS('businessArrangement', exp));
        iss.push(...this.vRS('relationship', exp));
        iss.push(...this.vOA('preAuthRef', exp));
        iss.push(...this.vOS('claimResponse', exp));
        iss.push(...this.vOS('originalRuleset', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimCoverage._fts_dataType = 'ClaimCoverage';
/**
 * Third tier of goods and services.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['service']) {
            this.service = new fhir.Coding(source.service);
        }
        else {
            this.service = null;
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Quantity(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['_points']) {
            if (this.points) {
                this.points.addExtendedProperties(source._points);
            }
            else {
                this.points = new fhir.FhirDecimal(source._points);
            }
        }
        if (source['net']) {
            this.net = new fhir.Quantity(source.net);
        }
        if (source['udi']) {
            this.udi = new fhir.Coding(source.udi);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item.detail.subDetail';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('service', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('points', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOS('udi', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItemDetailSubDetail._fts_dataType = 'ClaimItemDetailSubDetail';
/**
 * Second tier of goods and services.
 */
export class ClaimItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['service']) {
            this.service = new fhir.Coding(source.service);
        }
        else {
            this.service = null;
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Quantity(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['_points']) {
            if (this.points) {
                this.points.addExtendedProperties(source._points);
            }
            else {
                this.points = new fhir.FhirDecimal(source._points);
            }
        }
        if (source['net']) {
            this.net = new fhir.Quantity(source.net);
        }
        if (source['udi']) {
            this.udi = new fhir.Coding(source.udi);
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ClaimItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item.detail';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('service', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('points', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOS('udi', exp));
        iss.push(...this.vOA('subDetail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItemDetail._fts_dataType = 'ClaimItemDetail';
/**
 * The materials and placement date of prior fixed prosthesis.
 */
export class ClaimItemProsthesis extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItemProsthesis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['initial']) {
            this.initial = new fhir.FhirBoolean({ value: source.initial });
        }
        if (source['_initial']) {
            if (this.initial) {
                this.initial.addExtendedProperties(source._initial);
            }
            else {
                this.initial = new fhir.FhirBoolean(source._initial);
            }
        }
        if (source['priorDate']) {
            this.priorDate = new fhir.FhirDate({ value: source.priorDate });
        }
        if (source['_priorDate']) {
            if (this.priorDate) {
                this.priorDate.addExtendedProperties(source._priorDate);
            }
            else {
                this.priorDate = new fhir.FhirDate(source._priorDate);
            }
        }
        if (source['priorMaterial']) {
            this.priorMaterial = new fhir.Coding(source.priorMaterial);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item.prosthesis';
        }
        iss.push(...this.vOS('initial', exp));
        iss.push(...this.vOS('priorDate', exp));
        iss.push(...this.vOS('priorMaterial', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItemProsthesis._fts_dataType = 'ClaimItemProsthesis';
/**
 * First tier of goods and services.
 */
export class ClaimItem extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['diagnosisLinkId']) {
            this.diagnosisLinkId = source.diagnosisLinkId.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.diagnosisLinkId = [];
        }
        if (source['_diagnosisLinkId']) {
            source._diagnosisLinkId.forEach((x, i) => {
                if (this.diagnosisLinkId.length >= i) {
                    if (x) {
                        this.diagnosisLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.diagnosisLinkId.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['service']) {
            this.service = new fhir.Coding(source.service);
        }
        else {
            this.service = null;
        }
        if (source['serviceDate']) {
            this.serviceDate = new fhir.FhirDate({ value: source.serviceDate });
        }
        if (source['_serviceDate']) {
            if (this.serviceDate) {
                this.serviceDate.addExtendedProperties(source._serviceDate);
            }
            else {
                this.serviceDate = new fhir.FhirDate(source._serviceDate);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Quantity(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['_points']) {
            if (this.points) {
                this.points.addExtendedProperties(source._points);
            }
            else {
                this.points = new fhir.FhirDecimal(source._points);
            }
        }
        if (source['net']) {
            this.net = new fhir.Quantity(source.net);
        }
        if (source['udi']) {
            this.udi = new fhir.Coding(source.udi);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.Coding(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.Coding(x));
        }
        else {
            this.subSite = [];
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.Coding(x));
        }
        else {
            this.modifier = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ClaimItemDetail(x));
        }
        else {
            this.detail = [];
        }
        if (source['prosthesis']) {
            this.prosthesis = new fhir.ClaimItemProsthesis(source.prosthesis);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.item';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vOA('diagnosisLinkId', exp));
        iss.push(...this.vRS('service', exp));
        iss.push(...this.vOS('serviceDate', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('points', exp));
        iss.push(...this.vOS('net', exp));
        iss.push(...this.vOS('udi', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOA('subSite', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOA('detail', exp));
        iss.push(...this.vOS('prosthesis', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimItem._fts_dataType = 'ClaimItem';
/**
 * The list of missing teeth may influence the adjudication of services for example with Bridges.
 */
export class ClaimMissingTeeth extends fhir.BackboneElement {
    /**
     * Default constructor for ClaimMissingTeeth - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['tooth']) {
            this.tooth = new fhir.Coding(source.tooth);
        }
        else {
            this.tooth = null;
        }
        if (source['reason']) {
            this.reason = new fhir.Coding(source.reason);
        }
        if (source['extractionDate']) {
            this.extractionDate = new fhir.FhirDate({ value: source.extractionDate });
        }
        if (source['_extractionDate']) {
            if (this.extractionDate) {
                this.extractionDate.addExtendedProperties(source._extractionDate);
            }
            else {
                this.extractionDate = new fhir.FhirDate(source._extractionDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim.missingTeeth';
        }
        iss.push(...this.vRS('tooth', exp));
        iss.push(...this.vOS('reason', exp));
        iss.push(...this.vOS('extractionDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClaimMissingTeeth._fts_dataType = 'ClaimMissingTeeth';
/**
 * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
 */
export class Claim extends fhir.DomainResource {
    /**
     * Default constructor for Claim - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Claim';
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['ruleset']) {
            this.ruleset = new fhir.Coding(source.ruleset);
        }
        if (source['originalRuleset']) {
            this.originalRuleset = new fhir.Coding(source.originalRuleset);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.Coding(source.priority);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.Coding(source.fundsReserve);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        if (source['payee']) {
            this.payee = new fhir.ClaimPayee(source.payee);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ClaimDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.Coding(x));
        }
        else {
            this.condition = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['coverage']) {
            this.coverage = source.coverage.map((x) => new fhir.ClaimCoverage(x));
        }
        else {
            this.coverage = [];
        }
        if (source['exception']) {
            this.exception = source.exception.map((x) => new fhir.Coding(x));
        }
        else {
            this.exception = [];
        }
        if (source['school']) {
            this.school = new fhir.FhirString({ value: source.school });
        }
        if (source['_school']) {
            if (this.school) {
                this.school.addExtendedProperties(source._school);
            }
            else {
                this.school = new fhir.FhirString(source._school);
            }
        }
        if (source['accident']) {
            this.accident = new fhir.FhirDate({ value: source.accident });
        }
        if (source['_accident']) {
            if (this.accident) {
                this.accident.addExtendedProperties(source._accident);
            }
            else {
                this.accident = new fhir.FhirDate(source._accident);
            }
        }
        if (source['accidentType']) {
            this.accidentType = new fhir.Coding(source.accidentType);
        }
        if (source['interventionException']) {
            this.interventionException = source.interventionException.map((x) => new fhir.Coding(x));
        }
        else {
            this.interventionException = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ClaimItem(x));
        }
        else {
            this.item = [];
        }
        if (source['additionalMaterials']) {
            this.additionalMaterials = source.additionalMaterials.map((x) => new fhir.Coding(x));
        }
        else {
            this.additionalMaterials = [];
        }
        if (source['missingTeeth']) {
            this.missingTeeth = source.missingTeeth.map((x) => new fhir.ClaimMissingTeeth(x));
        }
        else {
            this.missingTeeth = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Claim';
        }
        iss.push(...this.vRSV('type', exp, 'ClaimTypeLink', ClaimTypeLinkVsValidation, 'r'));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('ruleset', exp));
        iss.push(...this.vOS('originalRuleset', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vOS('organization', exp));
        iss.push(...this.vOSV('use', exp, 'ClaimUseLink', ClaimUseLinkVsValidation, 'r'));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('fundsReserve', exp));
        iss.push(...this.vOS('enterer', exp));
        iss.push(...this.vOS('facility', exp));
        iss.push(...this.vOS('prescription', exp));
        iss.push(...this.vOS('originalPrescription', exp));
        iss.push(...this.vOS('payee', exp));
        iss.push(...this.vOS('referral', exp));
        iss.push(...this.vOA('diagnosis', exp));
        iss.push(...this.vOA('condition', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOA('coverage', exp));
        iss.push(...this.vOA('exception', exp));
        iss.push(...this.vOS('school', exp));
        iss.push(...this.vOS('accident', exp));
        iss.push(...this.vOS('accidentType', exp));
        iss.push(...this.vOA('interventionException', exp));
        iss.push(...this.vOA('item', exp));
        iss.push(...this.vOA('additionalMaterials', exp));
        iss.push(...this.vOA('missingTeeth', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Claim._fts_dataType = 'Claim';
//# sourceMappingURL=data:application/json;base64,