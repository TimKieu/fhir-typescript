// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: RiskAssessment
import * as fhir from '../fhir.js';
/**
 * Describes the expected outcome for the subject.
 */
export class RiskAssessmentPrediction extends fhir.BackboneElement {
    /**
     * Default constructor for RiskAssessmentPrediction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome, options);
        }
        else {
            this.outcome = null;
        }
        if (source['probability']) {
            this.probability = source.probability;
        }
        else if (source['probabilityDecimal'] !== undefined) {
            this.probability = new fhir.FhirDecimal({ value: source.probabilityDecimal }, options);
        }
        else if (source['probabilityRange']) {
            this.probability = new fhir.Range(source.probabilityRange, options);
        }
        else if (source['probabilityCodeableConcept']) {
            this.probability = new fhir.CodeableConcept(source.probabilityCodeableConcept, options);
        }
        if (source['relativeRisk'] !== undefined) {
            this.relativeRisk = new fhir.FhirDecimal({ value: source.relativeRisk }, options);
        }
        if (source['_relativeRisk']) {
            if (this.relativeRisk) {
                this.relativeRisk.addExtendedProperties(source._relativeRisk);
            }
            else {
                this.relativeRisk = new fhir.FhirDecimal(source._relativeRisk, options);
            }
        }
        if (source['when']) {
            this.when = source.when;
        }
        else if (source['whenPeriod']) {
            this.when = new fhir.Period(source.whenPeriod, options);
        }
        else if (source['whenRange']) {
            this.when = new fhir.Range(source.whenRange, options);
        }
        if (source['rationale'] !== undefined) {
            this.rationale = new fhir.FhirString({ value: source.rationale }, options);
        }
        if (source['_rationale']) {
            if (this.rationale) {
                this.rationale.addExtendedProperties(source._rationale);
            }
            else {
                this.rationale = new fhir.FhirString(source._rationale, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskAssessment.prediction';
        }
        iss.push(...this.vRS('outcome', exp));
        iss.push(...this.vOS('probability', exp));
        iss.push(...this.vOS('relativeRisk', exp));
        iss.push(...this.vOS('when', exp));
        iss.push(...this.vOS('rationale', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskAssessmentPrediction._fts_dataType = 'RiskAssessmentPrediction';
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.prediction.probability[x]
 */
RiskAssessmentPrediction._fts_probabilityIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.prediction.when[x]
 */
RiskAssessmentPrediction._fts_whenIsChoice = true;
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export class RiskAssessment extends fhir.DomainResource {
    /**
     * Default constructor for RiskAssessment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RiskAssessment';
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer, options);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method, options);
        }
        if (source['basis']) {
            this.basis = source.basis.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basis = [];
        }
        if (source['prediction']) {
            this.prediction = source.prediction.map((x) => new fhir.RiskAssessmentPrediction(x, options));
        }
        else {
            this.prediction = [];
        }
        if (source['mitigation'] !== undefined) {
            this.mitigation = new fhir.FhirString({ value: source.mitigation }, options);
        }
        if (source['_mitigation']) {
            if (this.mitigation) {
                this.mitigation.addExtendedProperties(source._mitigation);
            }
            else {
                this.mitigation = new fhir.FhirString(source._mitigation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskAssessment';
        }
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('condition', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOA('basis', exp));
        iss.push(...this.vOA('prediction', exp));
        iss.push(...this.vOS('mitigation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskAssessment._fts_dataType = 'RiskAssessment';
//# sourceMappingURL=data:application/json;base64,