// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationStatementStatusVsValidation } from '../fhirValueSets/MedicationStatementStatusVsValidation.js';
/**
 * Indicates how the medication is/was used by the patient.
 */
export class MedicationStatementDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationStatementDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['timing']) {
            this.timing = new fhir.Timing(source.timing);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['site']) {
            this.site = source.site;
        }
        else if (source['siteCodeableConcept']) {
            this.site = new fhir.CodeableConcept(source.siteCodeableConcept);
        }
        else if (source['siteReference']) {
            this.site = new fhir.Reference(source.siteReference);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['quantity']) {
            this.quantity = source.quantity;
        }
        else if (source['quantityQuantity']) {
            this.quantity = new fhir.Quantity(source.quantityQuantity);
        }
        else if (source['quantityRange']) {
            this.quantity = new fhir.Range(source.quantityRange);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
        else if (source['rateRange']) {
            this.rate = new fhir.Range(source.rateRange);
        }
        if (source['maxDosePerPeriod']) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationStatement.dosage';
        }
        this.vOS('text', exp);
        this.vOS('timing', exp);
        this.vOS('asNeeded', exp);
        this.vOS('site', exp);
        this.vOS('route', exp);
        this.vOS('method', exp);
        this.vOS('quantity', exp);
        this.vOS('rate', exp);
        this.vOS('maxDosePerPeriod', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationStatementDosage._fts_dataType = 'MedicationStatementDosage';
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.dosage.asNeeded[x]
 */
MedicationStatementDosage._fts_asNeededIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.dosage.site[x]
 */
MedicationStatementDosage._fts_siteIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.dosage.quantity[x]
 */
MedicationStatementDosage._fts_quantityIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.dosage.rate[x]
 */
MedicationStatementDosage._fts_rateIsChoice = true;
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains   The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
export class MedicationStatement extends fhir.DomainResource {
    /**
     * Default constructor for MedicationStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationStatement';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['informationSource']) {
            this.informationSource = new fhir.Reference(source.informationSource);
        }
        if (source['dateAsserted']) {
            this.dateAsserted = new fhir.FhirDateTime({ value: source.dateAsserted });
        }
        if (source['_dateAsserted']) {
            if (this.dateAsserted) {
                this.dateAsserted.addExtendedProperties(source._dateAsserted);
            }
            else {
                this.dateAsserted = new fhir.FhirDateTime(source._dateAsserted);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['wasNotTaken']) {
            this.wasNotTaken = new fhir.FhirBoolean({ value: source.wasNotTaken });
        }
        if (source['_wasNotTaken']) {
            if (this.wasNotTaken) {
                this.wasNotTaken.addExtendedProperties(source._wasNotTaken);
            }
            else {
                this.wasNotTaken = new fhir.FhirBoolean(source._wasNotTaken);
            }
        }
        if (source['reasonNotTaken']) {
            this.reasonNotTaken = source.reasonNotTaken.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonNotTaken = [];
        }
        if (source['reasonForUse']) {
            this.reasonForUse = source.reasonForUse;
        }
        else if (source['reasonForUseCodeableConcept']) {
            this.reasonForUse = new fhir.CodeableConcept(source.reasonForUseCodeableConcept);
        }
        else if (source['reasonForUseReference']) {
            this.reasonForUse = new fhir.Reference(source.reasonForUseReference);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['note']) {
            this.note = new fhir.FhirString({ value: source.note });
        }
        if (source['_note']) {
            if (this.note) {
                this.note.addExtendedProperties(source._note);
            }
            else {
                this.note = new fhir.FhirString(source._note);
            }
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.MedicationStatementDosage(x));
        }
        else {
            this.dosage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationStatement';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRS('patient', exp);
        this.vOS('informationSource', exp);
        this.vOS('dateAsserted', exp);
        this.vRSV('status', exp, 'MedicationStatementStatus', MedicationStatementStatusVsValidation, 'r');
        this.vOS('wasNotTaken', exp);
        this.vOA('reasonNotTaken', exp);
        this.vOS('reasonForUse', exp);
        this.vOS('effective', exp);
        this.vOS('note', exp);
        this.vOA('supportingInformation', exp);
        this.vRS('medication', exp);
        this.vOA('dosage', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationStatement._fts_dataType = 'MedicationStatement';
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.reasonForUse[x]
 */
MedicationStatement._fts_reasonForUseIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.effective[x]
 */
MedicationStatement._fts_effectiveIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.medication[x]
 */
MedicationStatement._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,