// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Medication
import * as fhir from '../fhir.js';
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationProductIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Ratio(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.product.ingredient';
        }
        this.vRS('item', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationProductIngredient._fts_dataType = 'MedicationProductIngredient';
/**
 * Information about a group of medication produced or packaged from one production run.
 */
export class MedicationProductBatch extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationProductBatch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate });
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDateTime(source._expirationDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.product.batch';
        }
        this.vOS('lotNumber', exp);
        this.vOS('expirationDate', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationProductBatch._fts_dataType = 'MedicationProductBatch';
/**
 * Information that only applies to products (not packages).
 */
export class MedicationProduct extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationProductIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['batch']) {
            this.batch = source.batch.map((x) => new fhir.MedicationProductBatch(x));
        }
        else {
            this.batch = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.product';
        }
        this.vOS('form', exp);
        this.vOA('ingredient', exp);
        this.vOA('batch', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationProduct._fts_dataType = 'MedicationProduct';
/**
 * A set of components that go to make up the described item.
 */
export class MedicationPackageContent extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackageContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package.content';
        }
        this.vRS('item', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackageContent._fts_dataType = 'MedicationPackageContent';
/**
 * Information that only applies to packages (not products).
 */
export class MedicationPackage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['container']) {
            this.container = new fhir.CodeableConcept(source.container);
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.MedicationPackageContent(x));
        }
        else {
            this.content = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package';
        }
        this.vOS('container', exp);
        this.vOA('content', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackage._fts_dataType = 'MedicationPackage';
/**
 * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
 */
export class Medication extends fhir.DomainResource {
    /**
     * Default constructor for Medication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Medication';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['isBrand']) {
            this.isBrand = new fhir.FhirBoolean({ value: source.isBrand });
        }
        if (source['_isBrand']) {
            if (this.isBrand) {
                this.isBrand.addExtendedProperties(source._isBrand);
            }
            else {
                this.isBrand = new fhir.FhirBoolean(source._isBrand);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['product']) {
            this.product = new fhir.MedicationProduct(source.product);
        }
        if (source['package']) {
            this.package = new fhir.MedicationPackage(source.package);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication';
        }
        this.vRS('resourceType', exp);
        this.vOS('code', exp);
        this.vOS('isBrand', exp);
        this.vOS('manufacturer', exp);
        this.vOS('product', exp);
        this.vOS('package', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Medication._fts_dataType = 'Medication';
//# sourceMappingURL=data:application/json;base64,