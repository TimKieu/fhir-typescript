// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Medication
import * as fhir from '../fhir.js';
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationProductIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.Reference(source.item, options);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Ratio(source.amount, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.product.ingredient';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationProductIngredient._fts_dataType = 'MedicationProductIngredient';
/**
 * Information about a group of medication produced or packaged from one production run.
 */
export class MedicationProductBatch extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationProductBatch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lotNumber'] !== undefined) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber }, options);
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber, options);
            }
        }
        if (source['expirationDate'] !== undefined) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate }, options);
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDateTime(source._expirationDate, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.product.batch';
        }
        iss.push(...this.vOS('lotNumber', exp));
        iss.push(...this.vOS('expirationDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationProductBatch._fts_dataType = 'MedicationProductBatch';
/**
 * Information that only applies to products (not packages).
 */
export class MedicationProduct extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form, options);
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationProductIngredient(x, options));
        }
        else {
            this.ingredient = [];
        }
        if (source['batch']) {
            this.batch = source.batch.map((x) => new fhir.MedicationProductBatch(x, options));
        }
        else {
            this.batch = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.product';
        }
        iss.push(...this.vOS('form', exp));
        iss.push(...this.vOA('ingredient', exp));
        iss.push(...this.vOA('batch', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationProduct._fts_dataType = 'MedicationProduct';
/**
 * A set of components that go to make up the described item.
 */
export class MedicationPackageContent extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackageContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.Reference(source.item, options);
        }
        else {
            this.item = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package.content';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackageContent._fts_dataType = 'MedicationPackageContent';
/**
 * Information that only applies to packages (not products).
 */
export class MedicationPackage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationPackage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['container']) {
            this.container = new fhir.CodeableConcept(source.container, options);
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.MedicationPackageContent(x, options));
        }
        else {
            this.content = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication.package';
        }
        iss.push(...this.vOS('container', exp));
        iss.push(...this.vOA('content', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationPackage._fts_dataType = 'MedicationPackage';
/**
 * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
 */
export class Medication extends fhir.DomainResource {
    /**
     * Default constructor for Medication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Medication';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['isBrand'] !== undefined) {
            this.isBrand = new fhir.FhirBoolean({ value: source.isBrand }, options);
        }
        if (source['_isBrand']) {
            if (this.isBrand) {
                this.isBrand.addExtendedProperties(source._isBrand);
            }
            else {
                this.isBrand = new fhir.FhirBoolean(source._isBrand, options);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer, options);
        }
        if (source['product']) {
            this.product = new fhir.MedicationProduct(source.product, options);
        }
        if (source['package']) {
            this.package = new fhir.MedicationPackage(source.package, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Medication';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('isBrand', exp));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOS('product', exp));
        iss.push(...this.vOS('package', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Medication._fts_dataType = 'Medication';
//# sourceMappingURL=data:application/json;base64,