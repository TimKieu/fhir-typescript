// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Composition
import * as fhir from '../fhir.js';
// @ts-ignore
import { CompositionAttestationModeVsValidation } from '../fhirValueSets/CompositionAttestationModeVsValidation.js';
// @ts-ignore
import { ListModeVsValidation } from '../fhirValueSets/ListModeVsValidation.js';
// @ts-ignore
import { CompositionStatusVsValidation } from '../fhirValueSets/CompositionStatusVsValidation.js';
// @ts-ignore
import { V3ConfidentialityVsValidation } from '../fhirValueSets/V3ConfidentialityVsValidation.js';
/**
 * Identifies responsibility for the accuracy of the composition content.
 */
export class CompositionAttester extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionAttester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = source.mode.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.mode = [];
        }
        if (source['_mode']) {
            source._mode.forEach((x, i) => {
                if (this.mode.length >= i) {
                    if (x) {
                        this.mode[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.mode.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['time']) {
            this.time = new fhir.FhirDateTime({ value: source.time });
        }
        if (source['_time']) {
            if (this.time) {
                this.time.addExtendedProperties(source._time);
            }
            else {
                this.time = new fhir.FhirDateTime(source._time);
            }
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Composition.attester';
        }
        iss.push(...this.vRAV('mode', exp, 'CompositionAttestationMode', CompositionAttestationModeVsValidation, 'r'));
        iss.push(...this.vOS('time', exp));
        iss.push(...this.vOS('party', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionAttester._fts_dataType = 'CompositionAttester';
/**
 * Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
 */
export class CompositionEvent extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Composition.event';
        }
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionEvent._fts_dataType = 'CompositionEvent';
/**
 * The root of the sections that make up the composition.
 */
export class CompositionSection extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionSection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['text']) {
            this.text = new fhir.Narrative(source.text);
        }
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['orderedBy']) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy);
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.Reference(x));
        }
        else {
            this.entry = [];
        }
        if (source['emptyReason']) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason);
        }
        if (source['section']) {
            this.section = source.section.map((x) => new fhir.CompositionSection(x));
        }
        else {
            this.section = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Composition.section';
        }
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOSV('mode', exp, 'ListMode', ListModeVsValidation, 'r'));
        iss.push(...this.vOS('orderedBy', exp));
        iss.push(...this.vOA('entry', exp));
        iss.push(...this.vOS('emptyReason', exp));
        iss.push(...this.vOA('section', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionSection._fts_dataType = 'CompositionSection';
/**
 * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
 */
export class Composition extends fhir.DomainResource {
    /**
     * Default constructor for Composition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Composition';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['confidentiality']) {
            this.confidentiality = new fhir.FhirCode({ value: source.confidentiality });
        }
        if (source['_confidentiality']) {
            if (this.confidentiality) {
                this.confidentiality.addExtendedProperties(source._confidentiality);
            }
            else {
                this.confidentiality = new fhir.FhirCode(source._confidentiality);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['attester']) {
            this.attester = source.attester.map((x) => new fhir.CompositionAttester(x));
        }
        else {
            this.attester = [];
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CompositionEvent(x));
        }
        else {
            this.event = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['section']) {
            this.section = source.section.map((x) => new fhir.CompositionSection(x));
        }
        else {
            this.section = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Composition';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('class', exp));
        iss.push(...this.vRS('title', exp));
        iss.push(...this.vRSV('status', exp, 'CompositionStatus', CompositionStatusVsValidation, 'r'));
        iss.push(...this.vOSV('confidentiality', exp, 'V3Confidentiality', V3ConfidentialityVsValidation, 'r'));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vRA('author', exp));
        iss.push(...this.vOA('attester', exp));
        iss.push(...this.vOS('custodian', exp));
        iss.push(...this.vOA('event', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOA('section', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Composition._fts_dataType = 'Composition';
//# sourceMappingURL=data:application/json;base64,