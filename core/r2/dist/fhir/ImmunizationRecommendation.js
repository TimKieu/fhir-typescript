// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImmunizationRecommendation
import * as fhir from '../fhir.js';
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export class ImmunizationRecommendationRecommendationDateCriterion extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendationDateCriterion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirDateTime({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDateTime(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImmunizationRecommendation.recommendation.dateCriterion';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationRecommendationRecommendationDateCriterion._fts_dataType = 'ImmunizationRecommendationRecommendationDateCriterion';
/**
 * Contains information about the protocol under which the vaccine was administered.
 */
export class ImmunizationRecommendationRecommendationProtocol extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendationProtocol - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['doseSequence']) {
            this.doseSequence = new fhir.FhirInteger({ value: source.doseSequence });
        }
        if (source['_doseSequence']) {
            if (this.doseSequence) {
                this.doseSequence.addExtendedProperties(source._doseSequence);
            }
            else {
                this.doseSequence = new fhir.FhirInteger(source._doseSequence);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source['series']) {
            this.series = new fhir.FhirString({ value: source.series });
        }
        if (source['_series']) {
            if (this.series) {
                this.series.addExtendedProperties(source._series);
            }
            else {
                this.series = new fhir.FhirString(source._series);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImmunizationRecommendation.recommendation.protocol';
        }
        iss.push(...this.vOS('doseSequence', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('authority', exp));
        iss.push(...this.vOS('series', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationRecommendationRecommendationProtocol._fts_dataType = 'ImmunizationRecommendationRecommendationProtocol';
/**
 * Vaccine administration recommendations.
 */
export class ImmunizationRecommendationRecommendation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationRecommendationRecommendation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['doseNumber']) {
            this.doseNumber = new fhir.FhirPositiveInt({ value: source.doseNumber });
        }
        if (source['_doseNumber']) {
            if (this.doseNumber) {
                this.doseNumber.addExtendedProperties(source._doseNumber);
            }
            else {
                this.doseNumber = new fhir.FhirPositiveInt(source._doseNumber);
            }
        }
        if (source['forecastStatus']) {
            this.forecastStatus = new fhir.CodeableConcept(source.forecastStatus);
        }
        else {
            this.forecastStatus = null;
        }
        if (source['dateCriterion']) {
            this.dateCriterion = source.dateCriterion.map((x) => new fhir.ImmunizationRecommendationRecommendationDateCriterion(x));
        }
        else {
            this.dateCriterion = [];
        }
        if (source['protocol']) {
            this.protocol = new fhir.ImmunizationRecommendationRecommendationProtocol(source.protocol);
        }
        if (source['supportingImmunization']) {
            this.supportingImmunization = source.supportingImmunization.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingImmunization = [];
        }
        if (source['supportingPatientInformation']) {
            this.supportingPatientInformation = source.supportingPatientInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingPatientInformation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImmunizationRecommendation.recommendation';
        }
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vRS('vaccineCode', exp));
        iss.push(...this.vOS('doseNumber', exp));
        iss.push(...this.vRS('forecastStatus', exp));
        iss.push(...this.vOA('dateCriterion', exp));
        iss.push(...this.vOS('protocol', exp));
        iss.push(...this.vOA('supportingImmunization', exp));
        iss.push(...this.vOA('supportingPatientInformation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationRecommendationRecommendation._fts_dataType = 'ImmunizationRecommendationRecommendation';
/**
 * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
 */
export class ImmunizationRecommendation extends fhir.DomainResource {
    /**
     * Default constructor for ImmunizationRecommendation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImmunizationRecommendation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['recommendation']) {
            this.recommendation = source.recommendation.map((x) => new fhir.ImmunizationRecommendationRecommendation(x));
        }
        else {
            this.recommendation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImmunizationRecommendation';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vRA('recommendation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationRecommendation._fts_dataType = 'ImmunizationRecommendation';
//# sourceMappingURL=data:application/json;base64,