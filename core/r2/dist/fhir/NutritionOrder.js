// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionOrder
import * as fhir from '../fhir.js';
// @ts-ignore
import { NutritionOrderStatusVsValidation } from '../fhirValueSets/NutritionOrderStatusVsValidation.js';
/**
 * Class that defines the quantity and type of nutrient modifications required for the oral diet.
 */
export class NutritionOrderOralDietNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier, options);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.oralDiet.nutrient';
        }
        iss.push(...this.vOS('modifier', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietNutrient._fts_dataType = 'NutritionOrderOralDietNutrient';
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export class NutritionOrderOralDietTexture extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier, options);
        }
        if (source['foodType']) {
            this.foodType = new fhir.CodeableConcept(source.foodType, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.oralDiet.texture';
        }
        iss.push(...this.vOS('modifier', exp));
        iss.push(...this.vOS('foodType', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietTexture._fts_dataType = 'NutritionOrderOralDietTexture';
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export class NutritionOrderOralDiet extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x, options));
        }
        else {
            this.schedule = [];
        }
        if (source['nutrient']) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionOrderOralDietNutrient(x, options));
        }
        else {
            this.nutrient = [];
        }
        if (source['texture']) {
            this.texture = source.texture.map((x) => new fhir.NutritionOrderOralDietTexture(x, options));
        }
        else {
            this.texture = [];
        }
        if (source['fluidConsistencyType']) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.fluidConsistencyType = [];
        }
        if (source['instruction'] !== undefined) {
            this.instruction = new fhir.FhirString({ value: source.instruction }, options);
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.oralDiet';
        }
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOA('schedule', exp));
        iss.push(...this.vOA('nutrient', exp));
        iss.push(...this.vOA('texture', exp));
        iss.push(...this.vOA('fluidConsistencyType', exp));
        iss.push(...this.vOS('instruction', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDiet._fts_dataType = 'NutritionOrderOralDiet';
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export class NutritionOrderSupplement extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['productName'] !== undefined) {
            this.productName = new fhir.FhirString({ value: source.productName }, options);
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName, options);
            }
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x, options));
        }
        else {
            this.schedule = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['instruction'] !== undefined) {
            this.instruction = new fhir.FhirString({ value: source.instruction }, options);
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.supplement';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('productName', exp));
        iss.push(...this.vOA('schedule', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('instruction', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderSupplement._fts_dataType = 'NutritionOrderSupplement';
/**
 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
 */
export class NutritionOrderEnteralFormulaAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.Timing(source.schedule, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity, options);
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.enteralFormula.administration';
        }
        iss.push(...this.vOS('schedule', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('rate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormulaAdministration._fts_dataType = 'NutritionOrderEnteralFormulaAdministration';
/**
 * Internal flag to properly serialize choice-type element NutritionOrder.enteralFormula.administration.rate[x]
 */
NutritionOrderEnteralFormulaAdministration._fts_rateIsChoice = true;
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export class NutritionOrderEnteralFormula extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['baseFormulaType']) {
            this.baseFormulaType = new fhir.CodeableConcept(source.baseFormulaType, options);
        }
        if (source['baseFormulaProductName'] !== undefined) {
            this.baseFormulaProductName = new fhir.FhirString({ value: source.baseFormulaProductName }, options);
        }
        if (source['_baseFormulaProductName']) {
            if (this.baseFormulaProductName) {
                this.baseFormulaProductName.addExtendedProperties(source._baseFormulaProductName);
            }
            else {
                this.baseFormulaProductName = new fhir.FhirString(source._baseFormulaProductName, options);
            }
        }
        if (source['additiveType']) {
            this.additiveType = new fhir.CodeableConcept(source.additiveType, options);
        }
        if (source['additiveProductName'] !== undefined) {
            this.additiveProductName = new fhir.FhirString({ value: source.additiveProductName }, options);
        }
        if (source['_additiveProductName']) {
            if (this.additiveProductName) {
                this.additiveProductName.addExtendedProperties(source._additiveProductName);
            }
            else {
                this.additiveProductName = new fhir.FhirString(source._additiveProductName, options);
            }
        }
        if (source['caloricDensity']) {
            this.caloricDensity = new fhir.Quantity(source.caloricDensity, options);
        }
        if (source['routeofAdministration']) {
            this.routeofAdministration = new fhir.CodeableConcept(source.routeofAdministration, options);
        }
        if (source['administration']) {
            this.administration = source.administration.map((x) => new fhir.NutritionOrderEnteralFormulaAdministration(x, options));
        }
        else {
            this.administration = [];
        }
        if (source['maxVolumeToDeliver']) {
            this.maxVolumeToDeliver = new fhir.Quantity(source.maxVolumeToDeliver, options);
        }
        if (source['administrationInstruction'] !== undefined) {
            this.administrationInstruction = new fhir.FhirString({ value: source.administrationInstruction }, options);
        }
        if (source['_administrationInstruction']) {
            if (this.administrationInstruction) {
                this.administrationInstruction.addExtendedProperties(source._administrationInstruction);
            }
            else {
                this.administrationInstruction = new fhir.FhirString(source._administrationInstruction, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.enteralFormula';
        }
        iss.push(...this.vOS('baseFormulaType', exp));
        iss.push(...this.vOS('baseFormulaProductName', exp));
        iss.push(...this.vOS('additiveType', exp));
        iss.push(...this.vOS('additiveProductName', exp));
        iss.push(...this.vOS('caloricDensity', exp));
        iss.push(...this.vOS('routeofAdministration', exp));
        iss.push(...this.vOA('administration', exp));
        iss.push(...this.vOS('maxVolumeToDeliver', exp));
        iss.push(...this.vOS('administrationInstruction', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormula._fts_dataType = 'NutritionOrderEnteralFormula';
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export class NutritionOrder extends fhir.DomainResource {
    /**
     * Default constructor for NutritionOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'NutritionOrder';
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['orderer']) {
            this.orderer = new fhir.Reference(source.orderer, options);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['dateTime'] !== undefined) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime }, options);
        }
        else {
            this.dateTime = null;
        }
        if (source['_dateTime']) {
            if (this.dateTime) {
                this.dateTime.addExtendedProperties(source._dateTime);
            }
            else {
                this.dateTime = new fhir.FhirDateTime(source._dateTime, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['allergyIntolerance']) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.allergyIntolerance = [];
        }
        if (source['foodPreferenceModifier']) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.foodPreferenceModifier = [];
        }
        if (source['excludeFoodModifier']) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.excludeFoodModifier = [];
        }
        if (source['oralDiet']) {
            this.oralDiet = new fhir.NutritionOrderOralDiet(source.oralDiet, options);
        }
        if (source['supplement']) {
            this.supplement = source.supplement.map((x) => new fhir.NutritionOrderSupplement(x, options));
        }
        else {
            this.supplement = [];
        }
        if (source['enteralFormula']) {
            this.enteralFormula = new fhir.NutritionOrderEnteralFormula(source.enteralFormula, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder';
        }
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('orderer', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vRS('dateTime', exp));
        iss.push(...this.vOSV('status', exp, 'NutritionOrderStatus', NutritionOrderStatusVsValidation, 'r'));
        iss.push(...this.vOA('allergyIntolerance', exp));
        iss.push(...this.vOA('foodPreferenceModifier', exp));
        iss.push(...this.vOA('excludeFoodModifier', exp));
        iss.push(...this.vOS('oralDiet', exp));
        iss.push(...this.vOA('supplement', exp));
        iss.push(...this.vOS('enteralFormula', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrder._fts_dataType = 'NutritionOrder';
//# sourceMappingURL=data:application/json;base64,