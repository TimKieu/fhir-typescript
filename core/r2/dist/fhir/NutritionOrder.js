// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionOrder
import * as fhir from '../fhir.js';
// @ts-ignore
import { NutritionOrderStatusVsValidation } from '../fhirValueSets/NutritionOrderStatusVsValidation.js';
/**
 * Class that defines the quantity and type of nutrient modifications required for the oral diet.
 */
export class NutritionOrderOralDietNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.oralDiet.nutrient';
        }
        this.vOS('modifier', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietNutrient._fts_dataType = 'NutritionOrderOralDietNutrient';
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export class NutritionOrderOralDietTexture extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['foodType']) {
            this.foodType = new fhir.CodeableConcept(source.foodType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.oralDiet.texture';
        }
        this.vOS('modifier', exp);
        this.vOS('foodType', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietTexture._fts_dataType = 'NutritionOrderOralDietTexture';
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export class NutritionOrderOralDiet extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        else {
            this.schedule = [];
        }
        if (source['nutrient']) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionOrderOralDietNutrient(x));
        }
        else {
            this.nutrient = [];
        }
        if (source['texture']) {
            this.texture = source.texture.map((x) => new fhir.NutritionOrderOralDietTexture(x));
        }
        else {
            this.texture = [];
        }
        if (source['fluidConsistencyType']) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.fluidConsistencyType = [];
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.oralDiet';
        }
        this.vOA('type', exp);
        this.vOA('schedule', exp);
        this.vOA('nutrient', exp);
        this.vOA('texture', exp);
        this.vOA('fluidConsistencyType', exp);
        this.vOS('instruction', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDiet._fts_dataType = 'NutritionOrderOralDiet';
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export class NutritionOrderSupplement extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName);
            }
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        else {
            this.schedule = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.supplement';
        }
        this.vOS('type', exp);
        this.vOS('productName', exp);
        this.vOA('schedule', exp);
        this.vOS('quantity', exp);
        this.vOS('instruction', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderSupplement._fts_dataType = 'NutritionOrderSupplement';
/**
 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
 */
export class NutritionOrderEnteralFormulaAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.Timing(source.schedule);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.enteralFormula.administration';
        }
        this.vOS('schedule', exp);
        this.vOS('quantity', exp);
        this.vOS('rate', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormulaAdministration._fts_dataType = 'NutritionOrderEnteralFormulaAdministration';
/**
 * Internal flag to properly serialize choice-type element NutritionOrder.enteralFormula.administration.rate[x]
 */
NutritionOrderEnteralFormulaAdministration._fts_rateIsChoice = true;
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export class NutritionOrderEnteralFormula extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['baseFormulaType']) {
            this.baseFormulaType = new fhir.CodeableConcept(source.baseFormulaType);
        }
        if (source['baseFormulaProductName']) {
            this.baseFormulaProductName = new fhir.FhirString({ value: source.baseFormulaProductName });
        }
        if (source['_baseFormulaProductName']) {
            if (this.baseFormulaProductName) {
                this.baseFormulaProductName.addExtendedProperties(source._baseFormulaProductName);
            }
            else {
                this.baseFormulaProductName = new fhir.FhirString(source._baseFormulaProductName);
            }
        }
        if (source['additiveType']) {
            this.additiveType = new fhir.CodeableConcept(source.additiveType);
        }
        if (source['additiveProductName']) {
            this.additiveProductName = new fhir.FhirString({ value: source.additiveProductName });
        }
        if (source['_additiveProductName']) {
            if (this.additiveProductName) {
                this.additiveProductName.addExtendedProperties(source._additiveProductName);
            }
            else {
                this.additiveProductName = new fhir.FhirString(source._additiveProductName);
            }
        }
        if (source['caloricDensity']) {
            this.caloricDensity = new fhir.Quantity(source.caloricDensity);
        }
        if (source['routeofAdministration']) {
            this.routeofAdministration = new fhir.CodeableConcept(source.routeofAdministration);
        }
        if (source['administration']) {
            this.administration = source.administration.map((x) => new fhir.NutritionOrderEnteralFormulaAdministration(x));
        }
        else {
            this.administration = [];
        }
        if (source['maxVolumeToDeliver']) {
            this.maxVolumeToDeliver = new fhir.Quantity(source.maxVolumeToDeliver);
        }
        if (source['administrationInstruction']) {
            this.administrationInstruction = new fhir.FhirString({ value: source.administrationInstruction });
        }
        if (source['_administrationInstruction']) {
            if (this.administrationInstruction) {
                this.administrationInstruction.addExtendedProperties(source._administrationInstruction);
            }
            else {
                this.administrationInstruction = new fhir.FhirString(source._administrationInstruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder.enteralFormula';
        }
        this.vOS('baseFormulaType', exp);
        this.vOS('baseFormulaProductName', exp);
        this.vOS('additiveType', exp);
        this.vOS('additiveProductName', exp);
        this.vOS('caloricDensity', exp);
        this.vOS('routeofAdministration', exp);
        this.vOA('administration', exp);
        this.vOS('maxVolumeToDeliver', exp);
        this.vOS('administrationInstruction', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormula._fts_dataType = 'NutritionOrderEnteralFormula';
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export class NutritionOrder extends fhir.DomainResource {
    /**
     * Default constructor for NutritionOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'NutritionOrder';
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['orderer']) {
            this.orderer = new fhir.Reference(source.orderer);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        else {
            this.dateTime = null;
        }
        if (source['_dateTime']) {
            if (this.dateTime) {
                this.dateTime.addExtendedProperties(source._dateTime);
            }
            else {
                this.dateTime = new fhir.FhirDateTime(source._dateTime);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['allergyIntolerance']) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhir.Reference(x));
        }
        else {
            this.allergyIntolerance = [];
        }
        if (source['foodPreferenceModifier']) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.foodPreferenceModifier = [];
        }
        if (source['excludeFoodModifier']) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.excludeFoodModifier = [];
        }
        if (source['oralDiet']) {
            this.oralDiet = new fhir.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source['supplement']) {
            this.supplement = source.supplement.map((x) => new fhir.NutritionOrderSupplement(x));
        }
        else {
            this.supplement = [];
        }
        if (source['enteralFormula']) {
            this.enteralFormula = new fhir.NutritionOrderEnteralFormula(source.enteralFormula);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'NutritionOrder';
        }
        this.vRS('resourceType', exp);
        this.vRS('patient', exp);
        this.vOS('orderer', exp);
        this.vOA('identifier', exp);
        this.vOS('encounter', exp);
        this.vRS('dateTime', exp);
        this.vOSV('status', exp, 'NutritionOrderStatus', NutritionOrderStatusVsValidation, 'r');
        this.vOA('allergyIntolerance', exp);
        this.vOA('foodPreferenceModifier', exp);
        this.vOA('excludeFoodModifier', exp);
        this.vOS('oralDiet', exp);
        this.vOA('supplement', exp);
        this.vOS('enteralFormula', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrder._fts_dataType = 'NutritionOrder';
//# sourceMappingURL=data:application/json;base64,