// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media
import * as fhir from '../fhir.js';
// @ts-ignore
import { DigitalMediaTypeVsValidation } from '../fhirValueSets/DigitalMediaTypeVsValidation.js';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Media';
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['subtype']) {
            this.subtype = new fhir.CodeableConcept(source.subtype);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['operator']) {
            this.operator = new fhir.Reference(source.operator);
        }
        if (source['view']) {
            this.view = new fhir.CodeableConcept(source.view);
        }
        if (source['deviceName']) {
            this.deviceName = new fhir.FhirString({ value: source.deviceName });
        }
        if (source['_deviceName']) {
            if (this.deviceName) {
                this.deviceName.addExtendedProperties(source._deviceName);
            }
            else {
                this.deviceName = new fhir.FhirString(source._deviceName);
            }
        }
        if (source['height']) {
            this.height = new fhir.FhirPositiveInt({ value: source.height });
        }
        if (source['_height']) {
            if (this.height) {
                this.height.addExtendedProperties(source._height);
            }
            else {
                this.height = new fhir.FhirPositiveInt(source._height);
            }
        }
        if (source['width']) {
            this.width = new fhir.FhirPositiveInt({ value: source.width });
        }
        if (source['_width']) {
            if (this.width) {
                this.width.addExtendedProperties(source._width);
            }
            else {
                this.width = new fhir.FhirPositiveInt(source._width);
            }
        }
        if (source['frames']) {
            this.frames = new fhir.FhirPositiveInt({ value: source.frames });
        }
        if (source['_frames']) {
            if (this.frames) {
                this.frames.addExtendedProperties(source._frames);
            }
            else {
                this.frames = new fhir.FhirPositiveInt(source._frames);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.FhirUnsignedInt({ value: source.duration });
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirUnsignedInt(source._duration);
            }
        }
        if (source['content']) {
            this.content = new fhir.Attachment(source.content);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Media';
        }
        this.vRS('resourceType', exp);
        this.vRSV('type', exp, 'DigitalMediaType', DigitalMediaTypeVsValidation, 'r');
        this.vOS('subtype', exp);
        this.vOA('identifier', exp);
        this.vOS('subject', exp);
        this.vOS('operator', exp);
        this.vOS('view', exp);
        this.vOS('deviceName', exp);
        this.vOS('height', exp);
        this.vOS('width', exp);
        this.vOS('frames', exp);
        this.vOS('duration', exp);
        this.vRS('content', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Media._fts_dataType = 'Media';
//# sourceMappingURL=data:application/json;base64,