// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Meta
import * as fhir from '../fhir.js';
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
 */
export class Meta extends fhir.FhirElement {
    /**
     * Default constructor for Meta - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['versionId']) {
            this.versionId = new fhir.FhirId({ value: source.versionId });
        }
        if (source['_versionId']) {
            if (this.versionId) {
                this.versionId.addExtendedProperties(source._versionId);
            }
            else {
                this.versionId = new fhir.FhirId(source._versionId);
            }
        }
        if (source['lastUpdated']) {
            this.lastUpdated = new fhir.FhirInstant({ value: source.lastUpdated });
        }
        if (source['_lastUpdated']) {
            if (this.lastUpdated) {
                this.lastUpdated.addExtendedProperties(source._lastUpdated);
            }
            else {
                this.lastUpdated = new fhir.FhirInstant(source._lastUpdated);
            }
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.profile = [];
        }
        if (source['_profile']) {
            source._profile.forEach((x, i) => {
                if (this.profile.length >= i) {
                    if (x) {
                        this.profile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.profile.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['security']) {
            this.security = source.security.map((x) => new fhir.Coding(x));
        }
        else {
            this.security = [];
        }
        if (source['tag']) {
            this.tag = source.tag.map((x) => new fhir.Coding(x));
        }
        else {
            this.tag = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Meta';
        }
        this.vOS('versionId', exp);
        this.vOS('lastUpdated', exp);
        this.vOA('profile', exp);
        this.vOA('security', exp);
        this.vOA('tag', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Meta._fts_dataType = 'Meta';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvTWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5QkFBeUI7QUFFekIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUF3Q25DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLElBQUssU0FBUSxJQUFJLENBQUMsV0FBVztJQXlCeEM7O09BRUc7SUFDSCxZQUFZLFNBQTJCLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ2pGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3pGLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxVQUFXLENBQUMsQ0FBQzthQUFFO2lCQUM1RTtnQkFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBc0MsQ0FBQyxDQUFDO2FBQUU7U0FDMUY7UUFDRCxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDcEcsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUFFLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLFlBQWEsQ0FBQyxDQUFDO2FBQUU7aUJBQ2xGO2dCQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUE2QyxDQUFDLENBQUM7YUFBRTtTQUN4RztRQUNELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQzdGO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FBRTtRQUMzQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QixNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRTtnQkFDOUIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7b0JBQUUsSUFBSSxDQUFDLEVBQUU7d0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFBRTtpQkFBRTtxQkFDakY7b0JBQUUsSUFBSSxDQUFDLEVBQUU7d0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQThCLENBQUMsQ0FBQyxDQUFDO3FCQUFFO2lCQUFFO1lBQzFGLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDdEY7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQzVCLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUN2RTtZQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1NBQUU7SUFDekIsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsTUFBYSxFQUFFO1FBQy9DLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUQsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQTtTQUFFO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ25CLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBaEVEOztHQUVHO0FBQzZCLGtCQUFhLEdBQVUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIENvbXBsZXhUeXBlOiBNZXRhXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1ldGEgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWV0YUFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZlcnNpb24gc3BlY2lmaWMgaWRlbnRpZmllciwgYXMgaXQgYXBwZWFycyBpbiB0aGUgdmVyc2lvbiBwb3J0aW9uIG9mIHRoZSBVUkwuIFRoaXMgdmFsdWVzIGNoYW5nZXMgd2hlbiB0aGUgcmVzb3VyY2UgaXMgY3JlYXRlZCwgdXBkYXRlZCwgb3IgZGVsZXRlZC5cclxuICAgKi9cclxuICB2ZXJzaW9uSWQ/OiBmaGlyLkZoaXJJZHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZXRhLnZlcnNpb25JZFxyXG4gICAqL1xyXG4gIF92ZXJzaW9uSWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gdGhlIHJlc291cmNlIGxhc3QgY2hhbmdlZCAtIGUuZy4gd2hlbiB0aGUgdmVyc2lvbiBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIGxhc3RVcGRhdGVkPzogZmhpci5GaGlySW5zdGFudHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZXRhLmxhc3RVcGRhdGVkXHJcbiAgICovXHJcbiAgX2xhc3RVcGRhdGVkPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIGxpc3Qgb2YgcHJvZmlsZXMgW1tbU3RydWN0dXJlRGVmaW5pdGlvbl1dXXMgdGhhdCB0aGlzIHJlc291cmNlIGNsYWltcyB0byBjb25mb3JtIHRvLiBUaGUgVVJMIGlzIGEgcmVmZXJlbmNlIHRvIFtbW1N0cnVjdHVyZURlZmluaXRpb24udXJsXV1dLlxyXG4gICAqL1xyXG4gIHByb2ZpbGU/OiBmaGlyLkZoaXJVcmlbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZXRhLnByb2ZpbGVcclxuICAgKi9cclxuICBfcHJvZmlsZT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogU2VjdXJpdHkgbGFiZWxzIGFwcGxpZWQgdG8gdGhpcyByZXNvdXJjZS4gVGhlc2UgdGFncyBjb25uZWN0IHNwZWNpZmljIHJlc291cmNlcyB0byB0aGUgb3ZlcmFsbCBzZWN1cml0eSBwb2xpY3kgYW5kIGluZnJhc3RydWN0dXJlLlxyXG4gICAqL1xyXG4gIHNlY3VyaXR5PzogZmhpci5Db2RpbmdBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRhZ3MgYXBwbGllZCB0byB0aGlzIHJlc291cmNlLiBUYWdzIGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIGlkZW50aWZ5IGFuZCByZWxhdGUgcmVzb3VyY2VzIHRvIHByb2Nlc3MgYW5kIHdvcmtmbG93LCBhbmQgYXBwbGljYXRpb25zIGFyZSBub3QgcmVxdWlyZWQgdG8gY29uc2lkZXIgdGhlIHRhZ3Mgd2hlbiBpbnRlcnByZXRpbmcgdGhlIG1lYW5pbmcgb2YgYSByZXNvdXJjZS5cclxuICAgKi9cclxuICB0YWc/OiBmaGlyLkNvZGluZ0FyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbWV0YWRhdGEgYWJvdXQgYSByZXNvdXJjZS4gVGhpcyBpcyBjb250ZW50IGluIHRoZSByZXNvdXJjZSB0aGF0IGlzIG1haW50YWluZWQgYnkgdGhlIGluZnJhc3RydWN0dXJlLiBDaGFuZ2VzIHRvIHRoZSBjb250ZW50IG1heSBub3QgYWx3YXlzIGJlIGFzc29jaWF0ZWQgd2l0aCB2ZXJzaW9uIGNoYW5nZXMgdG8gdGhlIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1ldGEgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01ldGEnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2ZXJzaW9uIHNwZWNpZmljIGlkZW50aWZpZXIsIGFzIGl0IGFwcGVhcnMgaW4gdGhlIHZlcnNpb24gcG9ydGlvbiBvZiB0aGUgVVJMLiBUaGlzIHZhbHVlcyBjaGFuZ2VzIHdoZW4gdGhlIHJlc291cmNlIGlzIGNyZWF0ZWQsIHVwZGF0ZWQsIG9yIGRlbGV0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHZlcnNpb25JZD86IGZoaXIuRmhpcklkfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIHRoZSByZXNvdXJjZSBsYXN0IGNoYW5nZWQgLSBlLmcuIHdoZW4gdGhlIHZlcnNpb24gY2hhbmdlZC5cclxuICAgKi9cclxuICBwdWJsaWMgbGFzdFVwZGF0ZWQ/OiBmaGlyLkZoaXJJbnN0YW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGxpc3Qgb2YgcHJvZmlsZXMgW1tbU3RydWN0dXJlRGVmaW5pdGlvbl1dXXMgdGhhdCB0aGlzIHJlc291cmNlIGNsYWltcyB0byBjb25mb3JtIHRvLiBUaGUgVVJMIGlzIGEgcmVmZXJlbmNlIHRvIFtbW1N0cnVjdHVyZURlZmluaXRpb24udXJsXV1dLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9maWxlOiBmaGlyLkZoaXJVcmlbXTtcclxuICAvKipcclxuICAgKiBTZWN1cml0eSBsYWJlbHMgYXBwbGllZCB0byB0aGlzIHJlc291cmNlLiBUaGVzZSB0YWdzIGNvbm5lY3Qgc3BlY2lmaWMgcmVzb3VyY2VzIHRvIHRoZSBvdmVyYWxsIHNlY3VyaXR5IHBvbGljeSBhbmQgaW5mcmFzdHJ1Y3R1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIHNlY3VyaXR5OiBmaGlyLkNvZGluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIFRhZ3MgYXBwbGllZCB0byB0aGlzIHJlc291cmNlLiBUYWdzIGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIGlkZW50aWZ5IGFuZCByZWxhdGUgcmVzb3VyY2VzIHRvIHByb2Nlc3MgYW5kIHdvcmtmbG93LCBhbmQgYXBwbGljYXRpb25zIGFyZSBub3QgcmVxdWlyZWQgdG8gY29uc2lkZXIgdGhlIHRhZ3Mgd2hlbiBpbnRlcnByZXRpbmcgdGhlIG1lYW5pbmcgb2YgYSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgdGFnOiBmaGlyLkNvZGluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1ldGEgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZXRhQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3ZlcnNpb25JZCddKSB7IHRoaXMudmVyc2lvbklkID0gbmV3IGZoaXIuRmhpcklkKHt2YWx1ZTogc291cmNlLnZlcnNpb25JZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmVyc2lvbklkJ10pIHtcclxuICAgICAgaWYgKHRoaXMudmVyc2lvbklkKSB7IHRoaXMudmVyc2lvbklkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ZlcnNpb25JZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnZlcnNpb25JZCA9IG5ldyBmaGlyLkZoaXJJZChzb3VyY2UuX3ZlcnNpb25JZCBhcyBQYXJ0aWFsPGZoaXIuRmhpcklkQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydsYXN0VXBkYXRlZCddKSB7IHRoaXMubGFzdFVwZGF0ZWQgPSBuZXcgZmhpci5GaGlySW5zdGFudCh7dmFsdWU6IHNvdXJjZS5sYXN0VXBkYXRlZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbGFzdFVwZGF0ZWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5sYXN0VXBkYXRlZCkgeyB0aGlzLmxhc3RVcGRhdGVkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2xhc3RVcGRhdGVkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubGFzdFVwZGF0ZWQgPSBuZXcgZmhpci5GaGlySW5zdGFudChzb3VyY2UuX2xhc3RVcGRhdGVkIGFzIFBhcnRpYWw8Zmhpci5GaGlySW5zdGFudEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvZmlsZSddKSB7IHRoaXMucHJvZmlsZSA9IHNvdXJjZS5wcm9maWxlLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnByb2ZpbGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3Byb2ZpbGUnXSkge1xyXG4gICAgICBzb3VyY2UuX3Byb2ZpbGUuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvZmlsZS5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLnByb2ZpbGVbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5wcm9maWxlLnB1c2gobmV3IGZoaXIuRmhpclVyaSh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VjdXJpdHknXSkgeyB0aGlzLnNlY3VyaXR5ID0gc291cmNlLnNlY3VyaXR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kaW5nKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2VjdXJpdHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGFnJ10pIHsgdGhpcy50YWcgPSBzb3VyY2UudGFnLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kaW5nKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudGFnID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdNZXRhJyB9XHJcbiAgICB0aGlzLnZPUygndmVyc2lvbklkJyxleHApXHJcbiAgICB0aGlzLnZPUygnbGFzdFVwZGF0ZWQnLGV4cClcclxuICAgIHRoaXMudk9BKCdwcm9maWxlJyxleHApXHJcbiAgICB0aGlzLnZPQSgnc2VjdXJpdHknLGV4cClcclxuICAgIHRoaXMudk9BKCd0YWcnLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==