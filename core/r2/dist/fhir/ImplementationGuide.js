// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide
import * as fhir from '../fhir.js';
// @ts-ignore
import { GuideDependencyTypeVsValidation } from '../fhirValueSets/GuideDependencyTypeVsValidation.js';
// @ts-ignore
import { GuideResourcePurposeVsValidation } from '../fhirValueSets/GuideResourcePurposeVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { GuidePageKindVsValidation } from '../fhirValueSets/GuidePageKindVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class ImplementationGuideContact extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide.contact';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideContact._fts_dataType = 'ImplementationGuideContact';
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export class ImplementationGuideDependency extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDependency - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['uri'] !== undefined) {
            this.uri = new fhir.FhirUri({ value: source.uri }, options);
        }
        else {
            this.uri = null;
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide.dependency';
        }
        iss.push(...this.vRSV('type', exp, 'GuideDependencyType', GuideDependencyTypeVsValidation, 'r'));
        iss.push(...this.vRS('uri', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDependency._fts_dataType = 'ImplementationGuideDependency';
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuidePackageResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuidePackageResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirCode({ value: source.purpose }, options);
        }
        else {
            this.purpose = null;
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirCode(source._purpose, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['acronym'] !== undefined) {
            this.acronym = new fhir.FhirString({ value: source.acronym }, options);
        }
        if (source['_acronym']) {
            if (this.acronym) {
                this.acronym.addExtendedProperties(source._acronym);
            }
            else {
                this.acronym = new fhir.FhirString(source._acronym, options);
            }
        }
        if (source['source']) {
            this.source = source.source;
        }
        else if (source['sourceUri'] !== undefined) {
            this.source = new fhir.FhirUri({ value: source.sourceUri }, options);
        }
        else if (source['sourceReference']) {
            this.source = new fhir.Reference(source.sourceReference, options);
        }
        else {
            this.source = null;
        }
        if (source['exampleFor']) {
            this.exampleFor = new fhir.Reference(source.exampleFor, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide.package.resource';
        }
        iss.push(...this.vRSV('purpose', exp, 'GuideResourcePurpose', GuideResourcePurposeVsValidation, 'r'));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('acronym', exp));
        iss.push(...this.vRS('source', exp));
        iss.push(...this.vOS('exampleFor', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuidePackageResource._fts_dataType = 'ImplementationGuidePackageResource';
/**
 * Internal flag to properly serialize choice-type element ImplementationGuide.package.resource.source[x]
 */
ImplementationGuidePackageResource._fts_sourceIsChoice = true;
/**
 * A logical group of resources. Logical groups can be used when building pages.
 */
export class ImplementationGuidePackage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuidePackage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuidePackageResource(x, options));
        }
        else {
            this.resource = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide.package';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vRA('resource', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuidePackage._fts_dataType = 'ImplementationGuidePackage';
/**
 * A set of profiles that all resources covered by this implementation guide must conform to.
 */
export class ImplementationGuideGlobal extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile, options);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide.global';
        }
        iss.push(...this.vRSV('type', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vRS('profile', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideGlobal._fts_dataType = 'ImplementationGuideGlobal';
/**
 * A page / section in the implementation guide. The root page is the implementation guide home page.
 */
export class ImplementationGuidePage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuidePage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['source'] !== undefined) {
            this.source = new fhir.FhirUri({ value: source.source }, options);
        }
        else {
            this.source = null;
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirUri(source._source, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['kind'] !== undefined) {
            this.kind = new fhir.FhirCode({ value: source.kind }, options);
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = source.type.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.type = [];
        }
        if (source['_type']) {
            source._type.forEach((x, i) => {
                if (this.type.length >= i) {
                    if (x) {
                        this.type[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.type.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['package'] !== undefined) {
            this.package = source.package.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.package = [];
        }
        if (source['_package']) {
            source._package.forEach((x, i) => {
                if (this.package.length >= i) {
                    if (x) {
                        this.package[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.package.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['format'] !== undefined) {
            this.format = new fhir.FhirCode({ value: source.format }, options);
        }
        if (source['_format']) {
            if (this.format) {
                this.format.addExtendedProperties(source._format);
            }
            else {
                this.format = new fhir.FhirCode(source._format, options);
            }
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuidePage(x, options));
        }
        else {
            this.page = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide.page';
        }
        iss.push(...this.vRS('source', exp));
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRSV('kind', exp, 'GuidePageKind', GuidePageKindVsValidation, 'r'));
        iss.push(...this.vOAV('type', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOA('package', exp));
        iss.push(...this.vOS('format', exp));
        iss.push(...this.vOA('page', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuidePage._fts_dataType = 'ImplementationGuidePage';
/**
 * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
 */
export class ImplementationGuide extends fhir.DomainResource {
    /**
     * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImplementationGuide';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ImplementationGuideContact(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirString({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright, options);
            }
        }
        if (source['fhirVersion'] !== undefined) {
            this.fhirVersion = new fhir.FhirId({ value: source.fhirVersion }, options);
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirId(source._fhirVersion, options);
            }
        }
        if (source['dependency']) {
            this.dependency = source.dependency.map((x) => new fhir.ImplementationGuideDependency(x, options));
        }
        else {
            this.dependency = [];
        }
        if (source['package']) {
            this.package = source.package.map((x) => new fhir.ImplementationGuidePackage(x, options));
        }
        else {
            this.package = [];
        }
        if (source['global']) {
            this.global = source.global.map((x) => new fhir.ImplementationGuideGlobal(x, options));
        }
        else {
            this.global = [];
        }
        if (source['binary'] !== undefined) {
            this.binary = source.binary.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.binary = [];
        }
        if (source['_binary']) {
            source._binary.forEach((x, i) => {
                if (this.binary.length >= i) {
                    if (x) {
                        this.binary[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.binary.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['page']) {
            this.page = new fhir.ImplementationGuidePage(source.page, options);
        }
        else {
            this.page = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ImplementationGuide';
        }
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('fhirVersion', exp));
        iss.push(...this.vOA('dependency', exp));
        iss.push(...this.vRA('package', exp));
        iss.push(...this.vOA('global', exp));
        iss.push(...this.vOA('binary', exp));
        iss.push(...this.vRS('page', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuide._fts_dataType = 'ImplementationGuide';
//# sourceMappingURL=data:application/json;base64,