// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ReferralRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReferralstatusVsValidation } from '../fhirValueSets/ReferralstatusVsValidation.js';
/**
 * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
 */
export class ReferralRequest extends fhir.DomainResource {
    /**
     * Default constructor for ReferralRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ReferralRequest';
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['specialty']) {
            this.specialty = new fhir.CodeableConcept(source.specialty);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateSent']) {
            this.dateSent = new fhir.FhirDateTime({ value: source.dateSent });
        }
        if (source['_dateSent']) {
            if (this.dateSent) {
                this.dateSent.addExtendedProperties(source._dateSent);
            }
            else {
                this.dateSent = new fhir.FhirDateTime(source._dateSent);
            }
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['serviceRequested']) {
            this.serviceRequested = source.serviceRequested.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceRequested = [];
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['fulfillmentTime']) {
            this.fulfillmentTime = new fhir.Period(source.fulfillmentTime);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ReferralRequest';
        }
        this.vRS('resourceType', exp);
        this.vRSV('status', exp, 'Referralstatus', ReferralstatusVsValidation, 'r');
        this.vOA('identifier', exp);
        this.vOS('date', exp);
        this.vOS('type', exp);
        this.vOS('specialty', exp);
        this.vOS('priority', exp);
        this.vOS('patient', exp);
        this.vOS('requester', exp);
        this.vOA('recipient', exp);
        this.vOS('encounter', exp);
        this.vOS('dateSent', exp);
        this.vOS('reason', exp);
        this.vOS('description', exp);
        this.vOA('serviceRequested', exp);
        this.vOA('supportingInformation', exp);
        this.vOS('fulfillmentTime', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ReferralRequest._fts_dataType = 'ReferralRequest';
//# sourceMappingURL=data:application/json;base64,