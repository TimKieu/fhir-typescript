// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Conformance
import * as fhir from '../fhir.js';
// @ts-ignore
import { TypeRestfulInteractionVsValidation } from '../fhirValueSets/TypeRestfulInteractionVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { SearchModifierVsValidation } from '../fhirValueSets/SearchModifierVsValidation.js';
// @ts-ignore
import { VersioningPolicyVsValidation } from '../fhirValueSets/VersioningPolicyVsValidation.js';
// @ts-ignore
import { ConditionalDeleteStatusVsValidation } from '../fhirValueSets/ConditionalDeleteStatusVsValidation.js';
// @ts-ignore
import { SystemRestfulInteractionVsValidation } from '../fhirValueSets/SystemRestfulInteractionVsValidation.js';
// @ts-ignore
import { RestfulConformanceModeVsValidation } from '../fhirValueSets/RestfulConformanceModeVsValidation.js';
// @ts-ignore
import { TransactionModeVsValidation } from '../fhirValueSets/TransactionModeVsValidation.js';
// @ts-ignore
import { MessageSignificanceCategoryVsValidation } from '../fhirValueSets/MessageSignificanceCategoryVsValidation.js';
// @ts-ignore
import { MessageConformanceEventModeVsValidation } from '../fhirValueSets/MessageConformanceEventModeVsValidation.js';
// @ts-ignore
import { DocumentModeVsValidation } from '../fhirValueSets/DocumentModeVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
// @ts-ignore
import { ConformanceStatementKindVsValidation } from '../fhirValueSets/ConformanceStatementKindVsValidation.js';
// @ts-ignore
import { UnknownContentVsValidation } from '../fhirValueSets/UnknownContentVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class ConformanceContact extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.contact';
        }
        this.vOS('name', exp);
        this.vOA('telecom', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceContact._fts_dataType = 'ConformanceContact';
/**
 * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
 */
export class ConformanceSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['releaseDate']) {
            this.releaseDate = new fhir.FhirDateTime({ value: source.releaseDate });
        }
        if (source['_releaseDate']) {
            if (this.releaseDate) {
                this.releaseDate.addExtendedProperties(source._releaseDate);
            }
            else {
                this.releaseDate = new fhir.FhirDateTime(source._releaseDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.software';
        }
        this.vRS('name', exp);
        this.vOS('version', exp);
        this.vOS('releaseDate', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceSoftware._fts_dataType = 'ConformanceSoftware';
/**
 * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class ConformanceImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.implementation';
        }
        this.vRS('description', exp);
        this.vOS('url', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceImplementation._fts_dataType = 'ConformanceImplementation';
/**
 * Certificates associated with security profiles.
 */
export class ConformanceRestSecurityCertificate extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestSecurityCertificate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['blob']) {
            this.blob = new fhir.FhirBase64Binary({ value: source.blob });
        }
        if (source['_blob']) {
            if (this.blob) {
                this.blob.addExtendedProperties(source._blob);
            }
            else {
                this.blob = new fhir.FhirBase64Binary(source._blob);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.security.certificate';
        }
        this.vOS('type', exp);
        this.vOS('blob', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestSecurityCertificate._fts_dataType = 'ConformanceRestSecurityCertificate';
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class ConformanceRestSecurity extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestSecurity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['cors']) {
            this.cors = new fhir.FhirBoolean({ value: source.cors });
        }
        if (source['_cors']) {
            if (this.cors) {
                this.cors.addExtendedProperties(source._cors);
            }
            else {
                this.cors = new fhir.FhirBoolean(source._cors);
            }
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.service = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['certificate']) {
            this.certificate = source.certificate.map((x) => new fhir.ConformanceRestSecurityCertificate(x));
        }
        else {
            this.certificate = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.security';
        }
        this.vOS('cors', exp);
        this.vOA('service', exp);
        this.vOS('description', exp);
        this.vOA('certificate', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestSecurity._fts_dataType = 'ConformanceRestSecurity';
/**
 * Identifies a restful operation supported by the solution.
 */
export class ConformanceRestResourceInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.resource.interaction';
        }
        this.vRSV('code', exp, 'TypeRestfulInteraction', TypeRestfulInteractionVsValidation, 'r');
        this.vOS('documentation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestResourceInteraction._fts_dataType = 'ConformanceRestResourceInteraction';
/**
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 */
export class ConformanceRestResourceSearchParam extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirUri({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.target = [];
        }
        if (source['_target']) {
            source._target.forEach((x, i) => {
                if (this.target.length >= i) {
                    if (x) {
                        this.target[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.target.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.modifier = [];
        }
        if (source['_modifier']) {
            source._modifier.forEach((x, i) => {
                if (this.modifier.length >= i) {
                    if (x) {
                        this.modifier[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.modifier.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['chain']) {
            this.chain = source.chain.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.chain = [];
        }
        if (source['_chain']) {
            source._chain.forEach((x, i) => {
                if (this.chain.length >= i) {
                    if (x) {
                        this.chain[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.chain.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.resource.searchParam';
        }
        this.vRS('name', exp);
        this.vOS('definition', exp);
        this.vRSV('type', exp, 'SearchParamType', SearchParamTypeVsValidation, 'r');
        this.vOS('documentation', exp);
        this.vOAV('target', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r');
        this.vOAV('modifier', exp, 'SearchModifier', SearchModifierVsValidation, 'r');
        this.vOA('chain', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestResourceSearchParam._fts_dataType = 'ConformanceRestResourceSearchParam';
/**
 * A specification of the restful capabilities of the solution for a specific resource type.
 */
export class ConformanceRestResource extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile);
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.ConformanceRestResourceInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['versioning']) {
            this.versioning = new fhir.FhirCode({ value: source.versioning });
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning);
            }
        }
        if (source['readHistory']) {
            this.readHistory = new fhir.FhirBoolean({ value: source.readHistory });
        }
        if (source['_readHistory']) {
            if (this.readHistory) {
                this.readHistory.addExtendedProperties(source._readHistory);
            }
            else {
                this.readHistory = new fhir.FhirBoolean(source._readHistory);
            }
        }
        if (source['updateCreate']) {
            this.updateCreate = new fhir.FhirBoolean({ value: source.updateCreate });
        }
        if (source['_updateCreate']) {
            if (this.updateCreate) {
                this.updateCreate.addExtendedProperties(source._updateCreate);
            }
            else {
                this.updateCreate = new fhir.FhirBoolean(source._updateCreate);
            }
        }
        if (source['conditionalCreate']) {
            this.conditionalCreate = new fhir.FhirBoolean({ value: source.conditionalCreate });
        }
        if (source['_conditionalCreate']) {
            if (this.conditionalCreate) {
                this.conditionalCreate.addExtendedProperties(source._conditionalCreate);
            }
            else {
                this.conditionalCreate = new fhir.FhirBoolean(source._conditionalCreate);
            }
        }
        if (source['conditionalUpdate']) {
            this.conditionalUpdate = new fhir.FhirBoolean({ value: source.conditionalUpdate });
        }
        if (source['_conditionalUpdate']) {
            if (this.conditionalUpdate) {
                this.conditionalUpdate.addExtendedProperties(source._conditionalUpdate);
            }
            else {
                this.conditionalUpdate = new fhir.FhirBoolean(source._conditionalUpdate);
            }
        }
        if (source['conditionalDelete']) {
            this.conditionalDelete = new fhir.FhirCode({ value: source.conditionalDelete });
        }
        if (source['_conditionalDelete']) {
            if (this.conditionalDelete) {
                this.conditionalDelete.addExtendedProperties(source._conditionalDelete);
            }
            else {
                this.conditionalDelete = new fhir.FhirCode(source._conditionalDelete);
            }
        }
        if (source['searchInclude']) {
            this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchInclude = [];
        }
        if (source['_searchInclude']) {
            source._searchInclude.forEach((x, i) => {
                if (this.searchInclude.length >= i) {
                    if (x) {
                        this.searchInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchRevInclude']) {
            this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchRevInclude = [];
        }
        if (source['_searchRevInclude']) {
            source._searchRevInclude.forEach((x, i) => {
                if (this.searchRevInclude.length >= i) {
                    if (x) {
                        this.searchRevInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchRevInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.ConformanceRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.resource';
        }
        this.vRSV('type', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r');
        this.vOS('profile', exp);
        this.vRA('interaction', exp);
        this.vOSV('versioning', exp, 'VersioningPolicy', VersioningPolicyVsValidation, 'r');
        this.vOS('readHistory', exp);
        this.vOS('updateCreate', exp);
        this.vOS('conditionalCreate', exp);
        this.vOS('conditionalUpdate', exp);
        this.vOSV('conditionalDelete', exp, 'ConditionalDeleteStatus', ConditionalDeleteStatusVsValidation, 'r');
        this.vOA('searchInclude', exp);
        this.vOA('searchRevInclude', exp);
        this.vOA('searchParam', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestResource._fts_dataType = 'ConformanceRestResource';
/**
 * A specification of restful operations supported by the system.
 */
export class ConformanceRestInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.interaction';
        }
        this.vRSV('code', exp, 'SystemRestfulInteraction', SystemRestfulInteractionVsValidation, 'r');
        this.vOS('documentation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestInteraction._fts_dataType = 'ConformanceRestInteraction';
/**
 * Definition of an operation or a named query and with its parameters and their meaning and type.
 */
export class ConformanceRestOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition);
        }
        else {
            this.definition = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.operation';
        }
        this.vRS('name', exp);
        this.vRS('definition', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestOperation._fts_dataType = 'ConformanceRestOperation';
/**
 * A definition of the restful capabilities of the solution, if any.
 */
export class ConformanceRest extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['security']) {
            this.security = new fhir.ConformanceRestSecurity(source.security);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ConformanceRestResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.ConformanceRestInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['transactionMode']) {
            this.transactionMode = new fhir.FhirCode({ value: source.transactionMode });
        }
        if (source['_transactionMode']) {
            if (this.transactionMode) {
                this.transactionMode.addExtendedProperties(source._transactionMode);
            }
            else {
                this.transactionMode = new fhir.FhirCode(source._transactionMode);
            }
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.ConformanceRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.ConformanceRestOperation(x));
        }
        else {
            this.operation = [];
        }
        if (source['compartment']) {
            this.compartment = source.compartment.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.compartment = [];
        }
        if (source['_compartment']) {
            source._compartment.forEach((x, i) => {
                if (this.compartment.length >= i) {
                    if (x) {
                        this.compartment[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.compartment.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest';
        }
        this.vRSV('mode', exp, 'RestfulConformanceMode', RestfulConformanceModeVsValidation, 'r');
        this.vOS('documentation', exp);
        this.vOS('security', exp);
        this.vRA('resource', exp);
        this.vOA('interaction', exp);
        this.vOSV('transactionMode', exp, 'TransactionMode', TransactionModeVsValidation, 'r');
        this.vOA('searchParam', exp);
        this.vOA('operation', exp);
        this.vOA('compartment', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRest._fts_dataType = 'ConformanceRest';
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class ConformanceMessagingEndpoint extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['protocol']) {
            this.protocol = new fhir.Coding(source.protocol);
        }
        else {
            this.protocol = null;
        }
        if (source['address']) {
            this.address = new fhir.FhirUri({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirUri(source._address);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.messaging.endpoint';
        }
        this.vRS('protocol', exp);
        this.vRS('address', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceMessagingEndpoint._fts_dataType = 'ConformanceMessagingEndpoint';
/**
 * A description of the solution's support for an event at this end-point.
 */
export class ConformanceMessagingEvent extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceMessagingEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.Coding(source.code);
        }
        else {
            this.code = null;
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['focus']) {
            this.focus = new fhir.FhirCode({ value: source.focus });
        }
        else {
            this.focus = null;
        }
        if (source['_focus']) {
            if (this.focus) {
                this.focus.addExtendedProperties(source._focus);
            }
            else {
                this.focus = new fhir.FhirCode(source._focus);
            }
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        else {
            this.request = null;
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response);
        }
        else {
            this.response = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.messaging.event';
        }
        this.vRS('code', exp);
        this.vOSV('category', exp, 'MessageSignificanceCategory', MessageSignificanceCategoryVsValidation, 'r');
        this.vRSV('mode', exp, 'MessageConformanceEventMode', MessageConformanceEventModeVsValidation, 'r');
        this.vRSV('focus', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r');
        this.vRS('request', exp);
        this.vRS('response', exp);
        this.vOS('documentation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceMessagingEvent._fts_dataType = 'ConformanceMessagingEvent';
/**
 * A description of the messaging capabilities of the solution.
 */
export class ConformanceMessaging extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceMessaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.ConformanceMessagingEndpoint(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['reliableCache']) {
            this.reliableCache = new fhir.FhirUnsignedInt({ value: source.reliableCache });
        }
        if (source['_reliableCache']) {
            if (this.reliableCache) {
                this.reliableCache.addExtendedProperties(source._reliableCache);
            }
            else {
                this.reliableCache = new fhir.FhirUnsignedInt(source._reliableCache);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.ConformanceMessagingEvent(x));
        }
        else {
            this.event = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.messaging';
        }
        this.vOA('endpoint', exp);
        this.vOS('reliableCache', exp);
        this.vOS('documentation', exp);
        this.vRA('event', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceMessaging._fts_dataType = 'ConformanceMessaging';
/**
 * A document definition.
 */
export class ConformanceDocument extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceDocument - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.document';
        }
        this.vRSV('mode', exp, 'DocumentMode', DocumentModeVsValidation, 'r');
        this.vOS('documentation', exp);
        this.vRS('profile', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceDocument._fts_dataType = 'ConformanceDocument';
/**
 * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class Conformance extends fhir.DomainResource {
    /**
     * Default constructor for Conformance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Conformance';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ConformanceContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirString({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['software']) {
            this.software = new fhir.ConformanceSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.ConformanceImplementation(source.implementation);
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirId({ value: source.fhirVersion });
        }
        else {
            this.fhirVersion = null;
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirId(source._fhirVersion);
            }
        }
        if (source['acceptUnknown']) {
            this.acceptUnknown = new fhir.FhirCode({ value: source.acceptUnknown });
        }
        else {
            this.acceptUnknown = null;
        }
        if (source['_acceptUnknown']) {
            if (this.acceptUnknown) {
                this.acceptUnknown.addExtendedProperties(source._acceptUnknown);
            }
            else {
                this.acceptUnknown = new fhir.FhirCode(source._acceptUnknown);
            }
        }
        if (source['format']) {
            this.format = source.format.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.format = [];
        }
        if (source['_format']) {
            source._format.forEach((x, i) => {
                if (this.format.length >= i) {
                    if (x) {
                        this.format[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.format.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x));
        }
        else {
            this.profile = [];
        }
        if (source['rest']) {
            this.rest = source.rest.map((x) => new fhir.ConformanceRest(x));
        }
        else {
            this.rest = [];
        }
        if (source['messaging']) {
            this.messaging = source.messaging.map((x) => new fhir.ConformanceMessaging(x));
        }
        else {
            this.messaging = [];
        }
        if (source['document']) {
            this.document = source.document.map((x) => new fhir.ConformanceDocument(x));
        }
        else {
            this.document = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance';
        }
        this.vRS('resourceType', exp);
        this.vOS('url', exp);
        this.vOS('version', exp);
        this.vOS('name', exp);
        this.vOSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r');
        this.vOS('experimental', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vRS('date', exp);
        this.vOS('description', exp);
        this.vOS('requirements', exp);
        this.vOS('copyright', exp);
        this.vRSV('kind', exp, 'ConformanceStatementKind', ConformanceStatementKindVsValidation, 'r');
        this.vOS('software', exp);
        this.vOS('implementation', exp);
        this.vRS('fhirVersion', exp);
        this.vRSV('acceptUnknown', exp, 'UnknownContent', UnknownContentVsValidation, 'r');
        this.vRA('format', exp);
        this.vOA('profile', exp);
        this.vOA('rest', exp);
        this.vOA('messaging', exp);
        this.vOA('document', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Conformance._fts_dataType = 'Conformance';
//# sourceMappingURL=data:application/json;base64,