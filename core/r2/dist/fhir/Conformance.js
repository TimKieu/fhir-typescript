// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Conformance
import * as fhir from '../fhir.js';
// @ts-ignore
import { TypeRestfulInteractionVsValidation } from '../fhirValueSets/TypeRestfulInteractionVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { SearchModifierVsValidation } from '../fhirValueSets/SearchModifierVsValidation.js';
// @ts-ignore
import { VersioningPolicyVsValidation } from '../fhirValueSets/VersioningPolicyVsValidation.js';
// @ts-ignore
import { ConditionalDeleteStatusVsValidation } from '../fhirValueSets/ConditionalDeleteStatusVsValidation.js';
// @ts-ignore
import { SystemRestfulInteractionVsValidation } from '../fhirValueSets/SystemRestfulInteractionVsValidation.js';
// @ts-ignore
import { RestfulConformanceModeVsValidation } from '../fhirValueSets/RestfulConformanceModeVsValidation.js';
// @ts-ignore
import { TransactionModeVsValidation } from '../fhirValueSets/TransactionModeVsValidation.js';
// @ts-ignore
import { MessageSignificanceCategoryVsValidation } from '../fhirValueSets/MessageSignificanceCategoryVsValidation.js';
// @ts-ignore
import { MessageConformanceEventModeVsValidation } from '../fhirValueSets/MessageConformanceEventModeVsValidation.js';
// @ts-ignore
import { DocumentModeVsValidation } from '../fhirValueSets/DocumentModeVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
// @ts-ignore
import { ConformanceStatementKindVsValidation } from '../fhirValueSets/ConformanceStatementKindVsValidation.js';
// @ts-ignore
import { UnknownContentVsValidation } from '../fhirValueSets/UnknownContentVsValidation.js';
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class ConformanceContact extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.contact';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('telecom', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceContact._fts_dataType = 'ConformanceContact';
/**
 * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
 */
export class ConformanceSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['releaseDate'] !== undefined) {
            this.releaseDate = new fhir.FhirDateTime({ value: source.releaseDate }, options);
        }
        if (source['_releaseDate']) {
            if (this.releaseDate) {
                this.releaseDate.addExtendedProperties(source._releaseDate);
            }
            else {
                this.releaseDate = new fhir.FhirDateTime(source._releaseDate, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.software';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('releaseDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceSoftware._fts_dataType = 'ConformanceSoftware';
/**
 * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class ConformanceImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.implementation';
        }
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceImplementation._fts_dataType = 'ConformanceImplementation';
/**
 * Certificates associated with security profiles.
 */
export class ConformanceRestSecurityCertificate extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestSecurityCertificate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['blob'] !== undefined) {
            this.blob = new fhir.FhirBase64Binary({ value: source.blob }, options);
        }
        if (source['_blob']) {
            if (this.blob) {
                this.blob.addExtendedProperties(source._blob);
            }
            else {
                this.blob = new fhir.FhirBase64Binary(source._blob, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.security.certificate';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('blob', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestSecurityCertificate._fts_dataType = 'ConformanceRestSecurityCertificate';
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class ConformanceRestSecurity extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestSecurity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['cors'] !== undefined) {
            this.cors = new fhir.FhirBoolean({ value: source.cors }, options);
        }
        if (source['_cors']) {
            if (this.cors) {
                this.cors.addExtendedProperties(source._cors);
            }
            else {
                this.cors = new fhir.FhirBoolean(source._cors, options);
            }
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.service = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['certificate']) {
            this.certificate = source.certificate.map((x) => new fhir.ConformanceRestSecurityCertificate(x, options));
        }
        else {
            this.certificate = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.security';
        }
        iss.push(...this.vOS('cors', exp));
        iss.push(...this.vOA('service', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('certificate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestSecurity._fts_dataType = 'ConformanceRestSecurity';
/**
 * Identifies a restful operation supported by the solution.
 */
export class ConformanceRestResourceInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.resource.interaction';
        }
        iss.push(...this.vRSV('code', exp, 'TypeRestfulInteraction', TypeRestfulInteractionVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestResourceInteraction._fts_dataType = 'ConformanceRestResourceInteraction';
/**
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 */
export class ConformanceRestResourceSearchParam extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['definition'] !== undefined) {
            this.definition = new fhir.FhirUri({ value: source.definition }, options);
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
        if (source['target'] !== undefined) {
            this.target = source.target.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.target = [];
        }
        if (source['_target']) {
            source._target.forEach((x, i) => {
                if (this.target.length >= i) {
                    if (x) {
                        this.target[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.target.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['modifier'] !== undefined) {
            this.modifier = source.modifier.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.modifier = [];
        }
        if (source['_modifier']) {
            source._modifier.forEach((x, i) => {
                if (this.modifier.length >= i) {
                    if (x) {
                        this.modifier[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.modifier.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['chain'] !== undefined) {
            this.chain = source.chain.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.chain = [];
        }
        if (source['_chain']) {
            source._chain.forEach((x, i) => {
                if (this.chain.length >= i) {
                    if (x) {
                        this.chain[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.chain.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.resource.searchParam';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('definition', exp));
        iss.push(...this.vRSV('type', exp, 'SearchParamType', SearchParamTypeVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vOAV('target', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOAV('modifier', exp, 'SearchModifier', SearchModifierVsValidation, 'r'));
        iss.push(...this.vOA('chain', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestResourceSearchParam._fts_dataType = 'ConformanceRestResourceSearchParam';
/**
 * A specification of the restful capabilities of the solution for a specific resource type.
 */
export class ConformanceRestResource extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile, options);
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.ConformanceRestResourceInteraction(x, options));
        }
        else {
            this.interaction = [];
        }
        if (source['versioning'] !== undefined) {
            this.versioning = new fhir.FhirCode({ value: source.versioning }, options);
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning, options);
            }
        }
        if (source['readHistory'] !== undefined) {
            this.readHistory = new fhir.FhirBoolean({ value: source.readHistory }, options);
        }
        if (source['_readHistory']) {
            if (this.readHistory) {
                this.readHistory.addExtendedProperties(source._readHistory);
            }
            else {
                this.readHistory = new fhir.FhirBoolean(source._readHistory, options);
            }
        }
        if (source['updateCreate'] !== undefined) {
            this.updateCreate = new fhir.FhirBoolean({ value: source.updateCreate }, options);
        }
        if (source['_updateCreate']) {
            if (this.updateCreate) {
                this.updateCreate.addExtendedProperties(source._updateCreate);
            }
            else {
                this.updateCreate = new fhir.FhirBoolean(source._updateCreate, options);
            }
        }
        if (source['conditionalCreate'] !== undefined) {
            this.conditionalCreate = new fhir.FhirBoolean({ value: source.conditionalCreate }, options);
        }
        if (source['_conditionalCreate']) {
            if (this.conditionalCreate) {
                this.conditionalCreate.addExtendedProperties(source._conditionalCreate);
            }
            else {
                this.conditionalCreate = new fhir.FhirBoolean(source._conditionalCreate, options);
            }
        }
        if (source['conditionalUpdate'] !== undefined) {
            this.conditionalUpdate = new fhir.FhirBoolean({ value: source.conditionalUpdate }, options);
        }
        if (source['_conditionalUpdate']) {
            if (this.conditionalUpdate) {
                this.conditionalUpdate.addExtendedProperties(source._conditionalUpdate);
            }
            else {
                this.conditionalUpdate = new fhir.FhirBoolean(source._conditionalUpdate, options);
            }
        }
        if (source['conditionalDelete'] !== undefined) {
            this.conditionalDelete = new fhir.FhirCode({ value: source.conditionalDelete }, options);
        }
        if (source['_conditionalDelete']) {
            if (this.conditionalDelete) {
                this.conditionalDelete.addExtendedProperties(source._conditionalDelete);
            }
            else {
                this.conditionalDelete = new fhir.FhirCode(source._conditionalDelete, options);
            }
        }
        if (source['searchInclude'] !== undefined) {
            this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.searchInclude = [];
        }
        if (source['_searchInclude']) {
            source._searchInclude.forEach((x, i) => {
                if (this.searchInclude.length >= i) {
                    if (x) {
                        this.searchInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchRevInclude'] !== undefined) {
            this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.searchRevInclude = [];
        }
        if (source['_searchRevInclude']) {
            source._searchRevInclude.forEach((x, i) => {
                if (this.searchRevInclude.length >= i) {
                    if (x) {
                        this.searchRevInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchRevInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.ConformanceRestResourceSearchParam(x, options));
        }
        else {
            this.searchParam = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.resource';
        }
        iss.push(...this.vRSV('type', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOS('profile', exp));
        iss.push(...this.vRA('interaction', exp));
        iss.push(...this.vOSV('versioning', exp, 'VersioningPolicy', VersioningPolicyVsValidation, 'r'));
        iss.push(...this.vOS('readHistory', exp));
        iss.push(...this.vOS('updateCreate', exp));
        iss.push(...this.vOS('conditionalCreate', exp));
        iss.push(...this.vOS('conditionalUpdate', exp));
        iss.push(...this.vOSV('conditionalDelete', exp, 'ConditionalDeleteStatus', ConditionalDeleteStatusVsValidation, 'r'));
        iss.push(...this.vOA('searchInclude', exp));
        iss.push(...this.vOA('searchRevInclude', exp));
        iss.push(...this.vOA('searchParam', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestResource._fts_dataType = 'ConformanceRestResource';
/**
 * A specification of restful operations supported by the system.
 */
export class ConformanceRestInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code'] !== undefined) {
            this.code = new fhir.FhirCode({ value: source.code }, options);
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.interaction';
        }
        iss.push(...this.vRSV('code', exp, 'SystemRestfulInteraction', SystemRestfulInteractionVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestInteraction._fts_dataType = 'ConformanceRestInteraction';
/**
 * Definition of an operation or a named query and with its parameters and their meaning and type.
 */
export class ConformanceRestOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRestOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition, options);
        }
        else {
            this.definition = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest.operation';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRS('definition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRestOperation._fts_dataType = 'ConformanceRestOperation';
/**
 * A definition of the restful capabilities of the solution, if any.
 */
export class ConformanceRest extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceRest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode'] !== undefined) {
            this.mode = new fhir.FhirCode({ value: source.mode }, options);
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
        if (source['security']) {
            this.security = new fhir.ConformanceRestSecurity(source.security, options);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ConformanceRestResource(x, options));
        }
        else {
            this.resource = [];
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.ConformanceRestInteraction(x, options));
        }
        else {
            this.interaction = [];
        }
        if (source['transactionMode'] !== undefined) {
            this.transactionMode = new fhir.FhirCode({ value: source.transactionMode }, options);
        }
        if (source['_transactionMode']) {
            if (this.transactionMode) {
                this.transactionMode.addExtendedProperties(source._transactionMode);
            }
            else {
                this.transactionMode = new fhir.FhirCode(source._transactionMode, options);
            }
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.ConformanceRestResourceSearchParam(x, options));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.ConformanceRestOperation(x, options));
        }
        else {
            this.operation = [];
        }
        if (source['compartment'] !== undefined) {
            this.compartment = source.compartment.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.compartment = [];
        }
        if (source['_compartment']) {
            source._compartment.forEach((x, i) => {
                if (this.compartment.length >= i) {
                    if (x) {
                        this.compartment[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.compartment.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.rest';
        }
        iss.push(...this.vRSV('mode', exp, 'RestfulConformanceMode', RestfulConformanceModeVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vOS('security', exp));
        iss.push(...this.vRA('resource', exp));
        iss.push(...this.vOA('interaction', exp));
        iss.push(...this.vOSV('transactionMode', exp, 'TransactionMode', TransactionModeVsValidation, 'r'));
        iss.push(...this.vOA('searchParam', exp));
        iss.push(...this.vOA('operation', exp));
        iss.push(...this.vOA('compartment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceRest._fts_dataType = 'ConformanceRest';
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class ConformanceMessagingEndpoint extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['protocol']) {
            this.protocol = new fhir.Coding(source.protocol, options);
        }
        else {
            this.protocol = null;
        }
        if (source['address'] !== undefined) {
            this.address = new fhir.FhirUri({ value: source.address }, options);
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirUri(source._address, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.messaging.endpoint';
        }
        iss.push(...this.vRS('protocol', exp));
        iss.push(...this.vRS('address', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceMessagingEndpoint._fts_dataType = 'ConformanceMessagingEndpoint';
/**
 * A description of the solution's support for an event at this end-point.
 */
export class ConformanceMessagingEvent extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceMessagingEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.Coding(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['category'] !== undefined) {
            this.category = new fhir.FhirCode({ value: source.category }, options);
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category, options);
            }
        }
        if (source['mode'] !== undefined) {
            this.mode = new fhir.FhirCode({ value: source.mode }, options);
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode, options);
            }
        }
        if (source['focus'] !== undefined) {
            this.focus = new fhir.FhirCode({ value: source.focus }, options);
        }
        else {
            this.focus = null;
        }
        if (source['_focus']) {
            if (this.focus) {
                this.focus.addExtendedProperties(source._focus);
            }
            else {
                this.focus = new fhir.FhirCode(source._focus, options);
            }
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request, options);
        }
        else {
            this.request = null;
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response, options);
        }
        else {
            this.response = null;
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.messaging.event';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOSV('category', exp, 'MessageSignificanceCategory', MessageSignificanceCategoryVsValidation, 'r'));
        iss.push(...this.vRSV('mode', exp, 'MessageConformanceEventMode', MessageConformanceEventModeVsValidation, 'r'));
        iss.push(...this.vRSV('focus', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vRS('request', exp));
        iss.push(...this.vRS('response', exp));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceMessagingEvent._fts_dataType = 'ConformanceMessagingEvent';
/**
 * A description of the messaging capabilities of the solution.
 */
export class ConformanceMessaging extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceMessaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.ConformanceMessagingEndpoint(x, options));
        }
        else {
            this.endpoint = [];
        }
        if (source['reliableCache'] !== undefined) {
            this.reliableCache = new fhir.FhirUnsignedInt({ value: source.reliableCache }, options);
        }
        if (source['_reliableCache']) {
            if (this.reliableCache) {
                this.reliableCache.addExtendedProperties(source._reliableCache);
            }
            else {
                this.reliableCache = new fhir.FhirUnsignedInt(source._reliableCache, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.ConformanceMessagingEvent(x, options));
        }
        else {
            this.event = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.messaging';
        }
        iss.push(...this.vOA('endpoint', exp));
        iss.push(...this.vOS('reliableCache', exp));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vRA('event', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceMessaging._fts_dataType = 'ConformanceMessaging';
/**
 * A document definition.
 */
export class ConformanceDocument extends fhir.BackboneElement {
    /**
     * Default constructor for ConformanceDocument - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode'] !== undefined) {
            this.mode = new fhir.FhirCode({ value: source.mode }, options);
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Reference(source.profile, options);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance.document';
        }
        iss.push(...this.vRSV('mode', exp, 'DocumentMode', DocumentModeVsValidation, 'r'));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vRS('profile', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConformanceDocument._fts_dataType = 'ConformanceDocument';
/**
 * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class Conformance extends fhir.DomainResource {
    /**
     * Default constructor for Conformance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Conformance';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ConformanceContact(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['requirements'] !== undefined) {
            this.requirements = new fhir.FhirString({ value: source.requirements }, options);
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements, options);
            }
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirString({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirString(source._copyright, options);
            }
        }
        if (source['kind'] !== undefined) {
            this.kind = new fhir.FhirCode({ value: source.kind }, options);
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind, options);
            }
        }
        if (source['software']) {
            this.software = new fhir.ConformanceSoftware(source.software, options);
        }
        if (source['implementation']) {
            this.implementation = new fhir.ConformanceImplementation(source.implementation, options);
        }
        if (source['fhirVersion'] !== undefined) {
            this.fhirVersion = new fhir.FhirId({ value: source.fhirVersion }, options);
        }
        else {
            this.fhirVersion = null;
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirId(source._fhirVersion, options);
            }
        }
        if (source['acceptUnknown'] !== undefined) {
            this.acceptUnknown = new fhir.FhirCode({ value: source.acceptUnknown }, options);
        }
        else {
            this.acceptUnknown = null;
        }
        if (source['_acceptUnknown']) {
            if (this.acceptUnknown) {
                this.acceptUnknown.addExtendedProperties(source._acceptUnknown);
            }
            else {
                this.acceptUnknown = new fhir.FhirCode(source._acceptUnknown, options);
            }
        }
        if (source['format'] !== undefined) {
            this.format = source.format.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.format = [];
        }
        if (source['_format']) {
            source._format.forEach((x, i) => {
                if (this.format.length >= i) {
                    if (x) {
                        this.format[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.format.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.profile = [];
        }
        if (source['rest']) {
            this.rest = source.rest.map((x) => new fhir.ConformanceRest(x, options));
        }
        else {
            this.rest = [];
        }
        if (source['messaging']) {
            this.messaging = source.messaging.map((x) => new fhir.ConformanceMessaging(x, options));
        }
        else {
            this.messaging = [];
        }
        if (source['document']) {
            this.document = source.document.map((x) => new fhir.ConformanceDocument(x, options));
        }
        else {
            this.document = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Conformance';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOSV('status', exp, 'ConformanceResourceStatus', ConformanceResourceStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('requirements', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vRSV('kind', exp, 'ConformanceStatementKind', ConformanceStatementKindVsValidation, 'r'));
        iss.push(...this.vOS('software', exp));
        iss.push(...this.vOS('implementation', exp));
        iss.push(...this.vRS('fhirVersion', exp));
        iss.push(...this.vRSV('acceptUnknown', exp, 'UnknownContent', UnknownContentVsValidation, 'r'));
        iss.push(...this.vRA('format', exp));
        iss.push(...this.vOA('profile', exp));
        iss.push(...this.vOA('rest', exp));
        iss.push(...this.vOA('messaging', exp));
        iss.push(...this.vOA('document', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Conformance._fts_dataType = 'Conformance';
//# sourceMappingURL=data:application/json;base64,