// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: CarePlan
import * as fhir from '../fhir.js';
// @ts-ignore
import { CarePlanRelationshipVsValidation } from '../fhirValueSets/CarePlanRelationshipVsValidation.js';
// @ts-ignore
import { CarePlanActivityStatusVsValidation } from '../fhirValueSets/CarePlanActivityStatusVsValidation.js';
// @ts-ignore
import { CarePlanStatusVsValidation } from '../fhirValueSets/CarePlanStatusVsValidation.js';
/**
 * Identifies CarePlans with some sort of formal relationship to the current plan.
 */
export class CarePlanRelatedPlan extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanRelatedPlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['plan']) {
            this.plan = new fhir.Reference(source.plan);
        }
        else {
            this.plan = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.relatedPlan';
        }
        iss.push(...this.vOSV('code', exp, 'CarePlanRelationship', CarePlanRelationshipVsValidation, 'r'));
        iss.push(...this.vRS('plan', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanRelatedPlan._fts_dataType = 'CarePlanRelatedPlan';
/**
 * Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
 */
export class CarePlanParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['member']) {
            this.member = new fhir.Reference(source.member);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.participant';
        }
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOS('member', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanParticipant._fts_dataType = 'CarePlanParticipant';
/**
 * Details in a simple form for generic care plan systems.
 */
export class CarePlanActivityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x));
        }
        else {
            this.goal = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['prohibited']) {
            this.prohibited = new fhir.FhirBoolean({ value: source.prohibited });
        }
        else {
            this.prohibited = null;
        }
        if (source['_prohibited']) {
            if (this.prohibited) {
                this.prohibited.addExtendedProperties(source._prohibited);
            }
            else {
                this.prohibited = new fhir.FhirBoolean(source._prohibited);
            }
        }
        if (source['scheduled']) {
            this.scheduled = source.scheduled;
        }
        else if (source['scheduledTiming']) {
            this.scheduled = new fhir.Timing(source.scheduledTiming);
        }
        else if (source['scheduledPeriod']) {
            this.scheduled = new fhir.Period(source.scheduledPeriod);
        }
        else if (source['scheduledString']) {
            this.scheduled = new fhir.FhirString({ value: source.scheduledString });
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        if (source['dailyAmount']) {
            this.dailyAmount = new fhir.Quantity(source.dailyAmount);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.activity.detail';
        }
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('goal', exp));
        iss.push(...this.vOSV('status', exp, 'CarePlanActivityStatus', CarePlanActivityStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vRS('prohibited', exp));
        iss.push(...this.vOS('scheduled', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('product', exp));
        iss.push(...this.vOS('dailyAmount', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanActivityDetail._fts_dataType = 'CarePlanActivityDetail';
/**
 * Internal flag to properly serialize choice-type element CarePlan.activity.detail.scheduled[x]
 */
CarePlanActivityDetail._fts_scheduledIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element CarePlan.activity.detail.product[x]
 */
CarePlanActivityDetail._fts_productIsChoice = true;
/**
 * Allows systems to prompt for performance of planned activities, and validate plans against best practice.
 */
export class CarePlanActivity extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actionResulting']) {
            this.actionResulting = source.actionResulting.map((x) => new fhir.Reference(x));
        }
        else {
            this.actionResulting = [];
        }
        if (source['progress']) {
            this.progress = source.progress.map((x) => new fhir.Annotation(x));
        }
        else {
            this.progress = [];
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        if (source['detail']) {
            this.detail = new fhir.CarePlanActivityDetail(source.detail);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.activity';
        }
        iss.push(...this.vOA('actionResulting', exp));
        iss.push(...this.vOA('progress', exp));
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOS('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanActivity._fts_dataType = 'CarePlanActivity';
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export class CarePlan extends fhir.DomainResource {
    /**
     * Default constructor for CarePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CarePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['modified']) {
            this.modified = new fhir.FhirDateTime({ value: source.modified });
        }
        if (source['_modified']) {
            if (this.modified) {
                this.modified.addExtendedProperties(source._modified);
            }
            else {
                this.modified = new fhir.FhirDateTime(source._modified);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        else {
            this.addresses = [];
        }
        if (source['support']) {
            this.support = source.support.map((x) => new fhir.Reference(x));
        }
        else {
            this.support = [];
        }
        if (source['relatedPlan']) {
            this.relatedPlan = source.relatedPlan.map((x) => new fhir.CarePlanRelatedPlan(x));
        }
        else {
            this.relatedPlan = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.CarePlanParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x));
        }
        else {
            this.goal = [];
        }
        if (source['activity']) {
            this.activity = source.activity.map((x) => new fhir.CarePlanActivity(x));
        }
        else {
            this.activity = [];
        }
        if (source['note']) {
            this.note = new fhir.Annotation(source.note);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vRSV('status', exp, 'CarePlanStatus', CarePlanStatusVsValidation, 'r'));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOS('modified', exp));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('addresses', exp));
        iss.push(...this.vOA('support', exp));
        iss.push(...this.vOA('relatedPlan', exp));
        iss.push(...this.vOA('participant', exp));
        iss.push(...this.vOA('goal', exp));
        iss.push(...this.vOA('activity', exp));
        iss.push(...this.vOS('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlan._fts_dataType = 'CarePlan';
//# sourceMappingURL=data:application/json;base64,