// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticOrder
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiagnosticOrderStatusVsValidation } from '../fhirValueSets/DiagnosticOrderStatusVsValidation.js';
// @ts-ignore
import { DiagnosticOrderPriorityVsValidation } from '../fhirValueSets/DiagnosticOrderPriorityVsValidation.js';
/**
 * A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
 */
export class DiagnosticOrderEvent extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticOrderEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        else {
            this.dateTime = null;
        }
        if (source['_dateTime']) {
            if (this.dateTime) {
                this.dateTime.addExtendedProperties(source._dateTime);
            }
            else {
                this.dateTime = new fhir.FhirDateTime(source._dateTime);
            }
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticOrder.event';
        }
        this.vRSV('status', exp, 'DiagnosticOrderStatus', DiagnosticOrderStatusVsValidation, 'r');
        this.vOS('description', exp);
        this.vRS('dateTime', exp);
        this.vOS('actor', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticOrderEvent._fts_dataType = 'DiagnosticOrderEvent';
/**
 * The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
 */
export class DiagnosticOrderItem extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticOrderItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.DiagnosticOrderEvent(x));
        }
        else {
            this.event = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticOrder.item';
        }
        this.vRS('code', exp);
        this.vOA('specimen', exp);
        this.vOS('bodySite', exp);
        this.vOSV('status', exp, 'DiagnosticOrderStatus', DiagnosticOrderStatusVsValidation, 'r');
        this.vOA('event', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticOrderItem._fts_dataType = 'DiagnosticOrderItem';
/**
 * A record of a request for a diagnostic investigation service to be performed.
 */
export class DiagnosticOrder extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DiagnosticOrder';
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['orderer']) {
            this.orderer = new fhir.Reference(source.orderer);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.DiagnosticOrderEvent(x));
        }
        else {
            this.event = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.DiagnosticOrderItem(x));
        }
        else {
            this.item = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DiagnosticOrder';
        }
        this.vRS('resourceType', exp);
        this.vRS('subject', exp);
        this.vOS('orderer', exp);
        this.vOA('identifier', exp);
        this.vOS('encounter', exp);
        this.vOA('reason', exp);
        this.vOA('supportingInformation', exp);
        this.vOA('specimen', exp);
        this.vOSV('status', exp, 'DiagnosticOrderStatus', DiagnosticOrderStatusVsValidation, 'r');
        this.vOSV('priority', exp, 'DiagnosticOrderPriority', DiagnosticOrderPriorityVsValidation, 'r');
        this.vOA('event', exp);
        this.vOA('item', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticOrder._fts_dataType = 'DiagnosticOrder';
//# sourceMappingURL=data:application/json;base64,