// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Questionnaire
import * as fhir from '../fhir.js';
// @ts-ignore
import { AnswerFormatVsValidation } from '../fhirValueSets/AnswerFormatVsValidation.js';
// @ts-ignore
import { QuestionnaireStatusVsValidation } from '../fhirValueSets/QuestionnaireStatusVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
/**
 * Must register answers to questions.
 */
export class QuestionnaireGroupQuestion extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireGroupQuestion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId'] !== undefined) {
            this.linkId = new fhir.FhirString({ value: source.linkId }, options);
        }
        if (source['_linkId']) {
            if (this.linkId) {
                this.linkId.addExtendedProperties(source._linkId);
            }
            else {
                this.linkId = new fhir.FhirString(source._linkId, options);
            }
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.concept = [];
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['required'] !== undefined) {
            this.required = new fhir.FhirBoolean({ value: source.required }, options);
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required, options);
            }
        }
        if (source['repeats'] !== undefined) {
            this.repeats = new fhir.FhirBoolean({ value: source.repeats }, options);
        }
        if (source['_repeats']) {
            if (this.repeats) {
                this.repeats.addExtendedProperties(source._repeats);
            }
            else {
                this.repeats = new fhir.FhirBoolean(source._repeats, options);
            }
        }
        if (source['options']) {
            this.options = new fhir.Reference(source.options, options);
        }
        if (source['option']) {
            this.option = source.option.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.option = [];
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.QuestionnaireGroup(x, options));
        }
        else {
            this.group = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.group.question';
        }
        iss.push(...this.vOS('linkId', exp));
        iss.push(...this.vOA('concept', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOSV('type', exp, 'AnswerFormat', AnswerFormatVsValidation, 'r'));
        iss.push(...this.vOS('required', exp));
        iss.push(...this.vOS('repeats', exp));
        iss.push(...this.vOS('options', exp));
        iss.push(...this.vOA('option', exp));
        iss.push(...this.vOA('group', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireGroupQuestion._fts_dataType = 'QuestionnaireGroupQuestion';
/**
 * Need to be able to logically group answers to grouped questions.
 */
export class QuestionnaireGroup extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId'] !== undefined) {
            this.linkId = new fhir.FhirString({ value: source.linkId }, options);
        }
        if (source['_linkId']) {
            if (this.linkId) {
                this.linkId.addExtendedProperties(source._linkId);
            }
            else {
                this.linkId = new fhir.FhirString(source._linkId, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.Coding(x, options));
        }
        else {
            this.concept = [];
        }
        if (source['text'] !== undefined) {
            this.text = new fhir.FhirString({ value: source.text }, options);
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text, options);
            }
        }
        if (source['required'] !== undefined) {
            this.required = new fhir.FhirBoolean({ value: source.required }, options);
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required, options);
            }
        }
        if (source['repeats'] !== undefined) {
            this.repeats = new fhir.FhirBoolean({ value: source.repeats }, options);
        }
        if (source['_repeats']) {
            if (this.repeats) {
                this.repeats.addExtendedProperties(source._repeats);
            }
            else {
                this.repeats = new fhir.FhirBoolean(source._repeats, options);
            }
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.QuestionnaireGroup(x, options));
        }
        else {
            this.group = [];
        }
        if (source['question']) {
            this.question = source.question.map((x) => new fhir.QuestionnaireGroupQuestion(x, options));
        }
        else {
            this.question = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire.group';
        }
        iss.push(...this.vOS('linkId', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOA('concept', exp));
        iss.push(...this.vOS('text', exp));
        iss.push(...this.vOS('required', exp));
        iss.push(...this.vOS('repeats', exp));
        iss.push(...this.vOA('group', exp));
        iss.push(...this.vOA('question', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireGroup._fts_dataType = 'QuestionnaireGroup';
/**
 * A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
 */
export class Questionnaire extends fhir.DomainResource {
    /**
     * Default constructor for Questionnaire - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Questionnaire';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
        if (source['subjectType'] !== undefined) {
            this.subjectType = source.subjectType.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.subjectType = [];
        }
        if (source['_subjectType']) {
            source._subjectType.forEach((x, i) => {
                if (this.subjectType.length >= i) {
                    if (x) {
                        this.subjectType[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.subjectType.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['group']) {
            this.group = new fhir.QuestionnaireGroup(source.group, options);
        }
        else {
            this.group = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Questionnaire';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vRSV('status', exp, 'QuestionnaireStatus', QuestionnaireStatusVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOAV('subjectType', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vRS('group', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Questionnaire._fts_dataType = 'Questionnaire';
//# sourceMappingURL=data:application/json;base64,