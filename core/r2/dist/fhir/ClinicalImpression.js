// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClinicalImpression
import * as fhir from '../fhir.js';
// @ts-ignore
import { ClinicalImpressionStatusVsValidation } from '../fhirValueSets/ClinicalImpressionStatusVsValidation.js';
/**
 * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
export class ClinicalImpressionInvestigations extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionInvestigations - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.Reference(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalImpression.investigations';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpressionInvestigations._fts_dataType = 'ClinicalImpressionInvestigations';
/**
 * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
 */
export class ClinicalImpressionFinding extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionFinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.CodeableConcept(source.item);
        }
        else {
            this.item = null;
        }
        if (source['cause']) {
            this.cause = new fhir.FhirString({ value: source.cause });
        }
        if (source['_cause']) {
            if (this.cause) {
                this.cause.addExtendedProperties(source._cause);
            }
            else {
                this.cause = new fhir.FhirString(source._cause);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalImpression.finding';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('cause', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpressionFinding._fts_dataType = 'ClinicalImpressionFinding';
/**
 * Diagnosis considered not possible.
 */
export class ClinicalImpressionRuledOut extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionRuledOut - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = new fhir.CodeableConcept(source.item);
        }
        else {
            this.item = null;
        }
        if (source['reason']) {
            this.reason = new fhir.FhirString({ value: source.reason });
        }
        if (source['_reason']) {
            if (this.reason) {
                this.reason.addExtendedProperties(source._reason);
            }
            else {
                this.reason = new fhir.FhirString(source._reason);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalImpression.ruledOut';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('reason', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpressionRuledOut._fts_dataType = 'ClinicalImpressionRuledOut';
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
export class ClinicalImpression extends fhir.DomainResource {
    /**
     * Default constructor for ClinicalImpression - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ClinicalImpression';
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['assessor']) {
            this.assessor = new fhir.Reference(source.assessor);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['previous']) {
            this.previous = new fhir.Reference(source.previous);
        }
        if (source['problem']) {
            this.problem = source.problem.map((x) => new fhir.Reference(x));
        }
        else {
            this.problem = [];
        }
        if (source['trigger']) {
            this.trigger = source.trigger;
        }
        else if (source['triggerCodeableConcept']) {
            this.trigger = new fhir.CodeableConcept(source.triggerCodeableConcept);
        }
        else if (source['triggerReference']) {
            this.trigger = new fhir.Reference(source.triggerReference);
        }
        if (source['investigations']) {
            this.investigations = source.investigations.map((x) => new fhir.ClinicalImpressionInvestigations(x));
        }
        else {
            this.investigations = [];
        }
        if (source['protocol']) {
            this.protocol = new fhir.FhirUri({ value: source.protocol });
        }
        if (source['_protocol']) {
            if (this.protocol) {
                this.protocol.addExtendedProperties(source._protocol);
            }
            else {
                this.protocol = new fhir.FhirUri(source._protocol);
            }
        }
        if (source['summary']) {
            this.summary = new fhir.FhirString({ value: source.summary });
        }
        if (source['_summary']) {
            if (this.summary) {
                this.summary.addExtendedProperties(source._summary);
            }
            else {
                this.summary = new fhir.FhirString(source._summary);
            }
        }
        if (source['finding']) {
            this.finding = source.finding.map((x) => new fhir.ClinicalImpressionFinding(x));
        }
        else {
            this.finding = [];
        }
        if (source['resolved']) {
            this.resolved = source.resolved.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.resolved = [];
        }
        if (source['ruledOut']) {
            this.ruledOut = source.ruledOut.map((x) => new fhir.ClinicalImpressionRuledOut(x));
        }
        else {
            this.ruledOut = [];
        }
        if (source['prognosis']) {
            this.prognosis = new fhir.FhirString({ value: source.prognosis });
        }
        if (source['_prognosis']) {
            if (this.prognosis) {
                this.prognosis.addExtendedProperties(source._prognosis);
            }
            else {
                this.prognosis = new fhir.FhirString(source._prognosis);
            }
        }
        if (source['plan']) {
            this.plan = source.plan.map((x) => new fhir.Reference(x));
        }
        else {
            this.plan = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.Reference(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ClinicalImpression';
        }
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('assessor', exp));
        iss.push(...this.vRSV('status', exp, 'ClinicalImpressionStatus', ClinicalImpressionStatusVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('previous', exp));
        iss.push(...this.vOA('problem', exp));
        iss.push(...this.vOS('trigger', exp));
        iss.push(...this.vOA('investigations', exp));
        iss.push(...this.vOS('protocol', exp));
        iss.push(...this.vOS('summary', exp));
        iss.push(...this.vOA('finding', exp));
        iss.push(...this.vOA('resolved', exp));
        iss.push(...this.vOA('ruledOut', exp));
        iss.push(...this.vOS('prognosis', exp));
        iss.push(...this.vOA('plan', exp));
        iss.push(...this.vOA('action', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpression._fts_dataType = 'ClinicalImpression';
/**
 * Internal flag to properly serialize choice-type element ClinicalImpression.trigger[x]
 */
ClinicalImpression._fts_triggerIsChoice = true;
//# sourceMappingURL=data:application/json;base64,