// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Timing
import * as fhir from '../fhir.js';
// @ts-ignore
import { UnitsOfTimeVsValidation } from '../fhirValueSets/UnitsOfTimeVsValidation.js';
// @ts-ignore
import { EventTimingVsValidation } from '../fhirValueSets/EventTimingVsValidation.js';
/**
 * Many timing schedules are determined by regular repetitions.
 */
export class TimingRepeat extends fhir.FhirElement {
    /**
     * Default constructor for TimingRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['bounds']) {
            this.bounds = source.bounds;
        }
        else if (source['boundsQuantity']) {
            this.bounds = new fhir.Quantity(source.boundsQuantity, options);
        }
        else if (source['boundsRange']) {
            this.bounds = new fhir.Range(source.boundsRange, options);
        }
        else if (source['boundsPeriod']) {
            this.bounds = new fhir.Period(source.boundsPeriod, options);
        }
        if (source['count'] !== undefined) {
            this.count = new fhir.FhirInteger({ value: source.count }, options);
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirInteger(source._count, options);
            }
        }
        if (source['duration'] !== undefined) {
            this.duration = new fhir.FhirDecimal({ value: source.duration }, options);
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirDecimal(source._duration, options);
            }
        }
        if (source['durationMax'] !== undefined) {
            this.durationMax = new fhir.FhirDecimal({ value: source.durationMax }, options);
        }
        if (source['_durationMax']) {
            if (this.durationMax) {
                this.durationMax.addExtendedProperties(source._durationMax);
            }
            else {
                this.durationMax = new fhir.FhirDecimal(source._durationMax, options);
            }
        }
        if (source['durationUnits'] !== undefined) {
            this.durationUnits = new fhir.FhirCode({ value: source.durationUnits }, options);
        }
        if (source['_durationUnits']) {
            if (this.durationUnits) {
                this.durationUnits.addExtendedProperties(source._durationUnits);
            }
            else {
                this.durationUnits = new fhir.FhirCode(source._durationUnits, options);
            }
        }
        if (source['frequency'] !== undefined) {
            this.frequency = new fhir.FhirInteger({ value: source.frequency }, options);
        }
        if (source['_frequency']) {
            if (this.frequency) {
                this.frequency.addExtendedProperties(source._frequency);
            }
            else {
                this.frequency = new fhir.FhirInteger(source._frequency, options);
            }
        }
        if (source['frequencyMax'] !== undefined) {
            this.frequencyMax = new fhir.FhirInteger({ value: source.frequencyMax }, options);
        }
        if (source['_frequencyMax']) {
            if (this.frequencyMax) {
                this.frequencyMax.addExtendedProperties(source._frequencyMax);
            }
            else {
                this.frequencyMax = new fhir.FhirInteger(source._frequencyMax, options);
            }
        }
        if (source['period'] !== undefined) {
            this.period = new fhir.FhirDecimal({ value: source.period }, options);
        }
        if (source['_period']) {
            if (this.period) {
                this.period.addExtendedProperties(source._period);
            }
            else {
                this.period = new fhir.FhirDecimal(source._period, options);
            }
        }
        if (source['periodMax'] !== undefined) {
            this.periodMax = new fhir.FhirDecimal({ value: source.periodMax }, options);
        }
        if (source['_periodMax']) {
            if (this.periodMax) {
                this.periodMax.addExtendedProperties(source._periodMax);
            }
            else {
                this.periodMax = new fhir.FhirDecimal(source._periodMax, options);
            }
        }
        if (source['periodUnits'] !== undefined) {
            this.periodUnits = new fhir.FhirCode({ value: source.periodUnits }, options);
        }
        if (source['_periodUnits']) {
            if (this.periodUnits) {
                this.periodUnits.addExtendedProperties(source._periodUnits);
            }
            else {
                this.periodUnits = new fhir.FhirCode(source._periodUnits, options);
            }
        }
        if (source['when'] !== undefined) {
            this.when = new fhir.FhirCode({ value: source.when }, options);
        }
        if (source['_when']) {
            if (this.when) {
                this.when.addExtendedProperties(source._when);
            }
            else {
                this.when = new fhir.FhirCode(source._when, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Timing.repeat';
        }
        iss.push(...this.vOS('bounds', exp));
        iss.push(...this.vOS('count', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOS('durationMax', exp));
        iss.push(...this.vOSV('durationUnits', exp, 'UnitsOfTime', UnitsOfTimeVsValidation, 'r'));
        iss.push(...this.vOS('frequency', exp));
        iss.push(...this.vOS('frequencyMax', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('periodMax', exp));
        iss.push(...this.vOSV('periodUnits', exp, 'UnitsOfTime', UnitsOfTimeVsValidation, 'r'));
        iss.push(...this.vOSV('when', exp, 'EventTiming', EventTimingVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TimingRepeat._fts_dataType = 'TimingRepeat';
/**
 * Internal flag to properly serialize choice-type element Timing.repeat.bounds[x]
 */
TimingRepeat._fts_boundsIsChoice = true;
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
 */
export class Timing extends fhir.FhirElement {
    /**
     * Default constructor for Timing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['event'] !== undefined) {
            this.event = source.event.map((x) => new fhir.FhirDateTime({ value: x }, options));
        }
        else {
            this.event = [];
        }
        if (source['_event']) {
            source._event.forEach((x, i) => {
                if (this.event.length >= i) {
                    if (x) {
                        this.event[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.event.push(new fhir.FhirDateTime(x));
                    }
                }
            });
        }
        if (source['repeat']) {
            this.repeat = new fhir.TimingRepeat(source.repeat, options);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Timing';
        }
        iss.push(...this.vOA('event', exp));
        iss.push(...this.vOS('repeat', exp));
        iss.push(...this.vOS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Timing._fts_dataType = 'Timing';
//# sourceMappingURL=data:application/json;base64,