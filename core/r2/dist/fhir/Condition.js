// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Condition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConditionVerStatusVsValidation } from '../fhirValueSets/ConditionVerStatusVsValidation.js';
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
export class ConditionStage extends fhir.BackboneElement {
    /**
     * Default constructor for ConditionStage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['summary']) {
            this.summary = new fhir.CodeableConcept(source.summary);
        }
        if (source['assessment']) {
            this.assessment = source.assessment.map((x) => new fhir.Reference(x));
        }
        else {
            this.assessment = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Condition.stage';
        }
        iss.push(...this.vOS('summary', exp));
        iss.push(...this.vOA('assessment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConditionStage._fts_dataType = 'ConditionStage';
/**
 * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
 */
export class ConditionEvidence extends fhir.BackboneElement {
    /**
     * Default constructor for ConditionEvidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Condition.evidence';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConditionEvidence._fts_dataType = 'ConditionEvidence';
/**
 * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
 */
export class Condition extends fhir.DomainResource {
    /**
     * Default constructor for Condition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Condition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source['dateRecorded']) {
            this.dateRecorded = new fhir.FhirDate({ value: source.dateRecorded });
        }
        if (source['_dateRecorded']) {
            if (this.dateRecorded) {
                this.dateRecorded.addExtendedProperties(source._dateRecorded);
            }
            else {
                this.dateRecorded = new fhir.FhirDate(source._dateRecorded);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['clinicalStatus']) {
            this.clinicalStatus = new fhir.FhirCode({ value: source.clinicalStatus });
        }
        if (source['_clinicalStatus']) {
            if (this.clinicalStatus) {
                this.clinicalStatus.addExtendedProperties(source._clinicalStatus);
            }
            else {
                this.clinicalStatus = new fhir.FhirCode(source._clinicalStatus);
            }
        }
        if (source['verificationStatus']) {
            this.verificationStatus = new fhir.FhirCode({ value: source.verificationStatus });
        }
        else {
            this.verificationStatus = null;
        }
        if (source['_verificationStatus']) {
            if (this.verificationStatus) {
                this.verificationStatus.addExtendedProperties(source._verificationStatus);
            }
            else {
                this.verificationStatus = new fhir.FhirCode(source._verificationStatus);
            }
        }
        if (source['severity']) {
            this.severity = new fhir.CodeableConcept(source.severity);
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetDateTime']) {
            this.onset = new fhir.FhirDateTime({ value: source.onsetDateTime });
        }
        else if (source['onsetQuantity']) {
            this.onset = new fhir.Quantity(source.onsetQuantity);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange);
        }
        else if (source['onsetString']) {
            this.onset = new fhir.FhirString({ value: source.onsetString });
        }
        if (source['abatement']) {
            this.abatement = source.abatement;
        }
        else if (source['abatementDateTime']) {
            this.abatement = new fhir.FhirDateTime({ value: source.abatementDateTime });
        }
        else if (source['abatementQuantity']) {
            this.abatement = new fhir.Quantity(source.abatementQuantity);
        }
        else if (source['abatementBoolean']) {
            this.abatement = new fhir.FhirBoolean({ value: source.abatementBoolean });
        }
        else if (source['abatementPeriod']) {
            this.abatement = new fhir.Period(source.abatementPeriod);
        }
        else if (source['abatementRange']) {
            this.abatement = new fhir.Range(source.abatementRange);
        }
        else if (source['abatementString']) {
            this.abatement = new fhir.FhirString({ value: source.abatementString });
        }
        if (source['stage']) {
            this.stage = new fhir.ConditionStage(source.stage);
        }
        if (source['evidence']) {
            this.evidence = source.evidence.map((x) => new fhir.ConditionEvidence(x));
        }
        else {
            this.evidence = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodySite = [];
        }
        if (source['notes']) {
            this.notes = new fhir.FhirString({ value: source.notes });
        }
        if (source['_notes']) {
            if (this.notes) {
                this.notes.addExtendedProperties(source._notes);
            }
            else {
                this.notes = new fhir.FhirString(source._notes);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Condition';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('asserter', exp));
        iss.push(...this.vOS('dateRecorded', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('clinicalStatus', exp));
        iss.push(...this.vRSV('verificationStatus', exp, 'ConditionVerStatus', ConditionVerStatusVsValidation, 'r'));
        iss.push(...this.vOS('severity', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOS('abatement', exp));
        iss.push(...this.vOS('stage', exp));
        iss.push(...this.vOA('evidence', exp));
        iss.push(...this.vOA('bodySite', exp));
        iss.push(...this.vOS('notes', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Condition._fts_dataType = 'Condition';
/**
 * Internal flag to properly serialize choice-type element Condition.onset[x]
 */
Condition._fts_onsetIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Condition.abatement[x]
 */
Condition._fts_abatementIsChoice = true;
//# sourceMappingURL=data:application/json;base64,