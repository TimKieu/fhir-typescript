// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2UuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9Db3ZlcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IENvdmVyYWdlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogRmluYW5jaWFsIGluc3RydW1lbnQgd2hpY2ggbWF5IGJlIHVzZWQgdG8gcGF5IGZvciBvciByZWltYnVyc2UgaGVhbHRoIGNhcmUgcHJvZHVjdHMgYW5kIHNlcnZpY2VzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb3ZlcmFnZSBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2UgeyBcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiQ292ZXJhZ2VcInxudWxsO1xyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8gaWRlbnRpZnkgdGhlIGlzc3VlciB0byB0YXJnZXQgZm9yIHByb2Nlc3NpbmcgYW5kIGZvciBjb29yZGluYXRpb24gb2YgYmVuZWZpdCBwcm9jZXNzaW5nLlxyXG4gICAqL1xyXG4gIGlzc3Vlcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBCdXNpbmVzcyBJZGVudGlmaWNhdGlvbiBOdW1iZXIgKEJJTiBudW1iZXIpIHVzZWQgdG8gaWRlbnRpZnkgdGhlIHJvdXRpbmcgIG9mIGVjbGFpbXMgaWYgdGhlIGluc3VyZXIgdGhlbXNlbHZlcyBkb24ndCBoYXZlIGEgQklOIG51bWJlciBmb3IgYWxsIG9mIHRoZWlyIGJ1c2luZXNzLlxyXG4gICAqL1xyXG4gIGJpbj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGltZSBwZXJpb2QgZHVyaW5nIHdoaWNoIHRoZSBjb3ZlcmFnZSBpcyBpbiBmb3JjZS4gQSBtaXNzaW5nIHN0YXJ0IGRhdGUgaW5kaWNhdGVzIHRoZSBzdGFydCBkYXRlIGlzbid0IGtub3duLCBhIG1pc3NpbmcgZW5kIGRhdGUgbWVhbnMgdGhlIGNvdmVyYWdlIGlzIGNvbnRpbnVpbmcgdG8gYmUgaW4gZm9yY2UuXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmRlciBvZiBhcHBsaWNhdGlvbiBvZiBjb3ZlcmFnZXMgaXMgZGVwZW5kZW50IG9uIHRoZSB0eXBlcyBvZiBjb3ZlcmFnZS5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2Rpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpZCBpc3N1ZWQgdG8gdGhlIHN1YnNjcmliZXIuXHJcbiAgICovXHJcbiAgc3Vic2NyaWJlcklkPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHZhbHVlIG1heSB1bmlxdWVseSBpZGVudGlmeSB0aGUgY292ZXJhZ2Ugb3IgaXQgbWF5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgYWRkaXRpb25hbCBpZGVudGlmaWVycyBiZWxvdy5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogKGZoaXIuSWRlbnRpZmllcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIGEgc3R5bGUgb3IgY29sbGVjdGl2ZSBvZiBjb3ZlcmFnZSBpc3N1ZXMgYnkgdGhlIHVuZGVyd3JpdGVyLCBmb3IgZXhhbXBsZSBtYXkgYmUgdXNlZCB0byBpZGVudGlmeSBhIGNsYXNzIG9mIGNvdmVyYWdlIG9yIGVtcGxveWVyIGdyb3VwLiBNYXkgYWxzbyBiZSByZWZlcnJlZCB0byBhcyBhIFBvbGljeSBvciBHcm91cCBJRC5cclxuICAgKi9cclxuICBncm91cD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvdmVyYWdlLmdyb3VwXHJcbiAgICovXHJcbiAgX2dyb3VwPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgYSBzdHlsZSBvciBjb2xsZWN0aXZlIG9mIGNvdmVyYWdlIGlzc3VlcyBieSB0aGUgdW5kZXJ3cml0ZXIsIGZvciBleGFtcGxlIG1heSBiZSB1c2VkIHRvIGlkZW50aWZ5IGEgY2xhc3Mgb2YgY292ZXJhZ2Ugb3IgZW1wbG95ZXIgZ3JvdXAuIE1heSBhbHNvIGJlIHJlZmVycmVkIHRvIGFzIGEgUG9saWN5IG9yIEdyb3VwIElELlxyXG4gICAqL1xyXG4gIHBsYW4/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb3ZlcmFnZS5wbGFuXHJcbiAgICovXHJcbiAgX3BsYW4/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyBhIHN1Yi1zdHlsZSBvciBzdWItY29sbGVjdGl2ZSBvZiBjb3ZlcmFnZSBpc3N1ZXMgYnkgdGhlIHVuZGVyd3JpdGVyLCBmb3IgZXhhbXBsZSBtYXkgYmUgdXNlZCB0byBpZGVudGlmeSBhIHNwZWNpZmljIGVtcGxveWVyIGdyb3VwIHdpdGhpbiBhIGNsYXNzIG9mIGVtcGxveWVycy4gTWF5IGJlIHJlZmVycmVkIHRvIGFzIGEgU2VjdGlvbiBvciBEaXZpc2lvbiBJRC5cclxuICAgKi9cclxuICBzdWJQbGFuPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ292ZXJhZ2Uuc3ViUGxhblxyXG4gICAqL1xyXG4gIF9zdWJQbGFuPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEZvciBzb21lIGNvdmVyYWdlIGEgc2luZ2xlIGlkZW50aWZpZXIgaXMgaXNzdWVkIHRvIHRoZSBQb2xpY3lIb2xkZXIgYW5kIGRlcGVuZGVudCBudW1iZXIgaXNzdWVzIHRvIGVhY2ggdG8gZWFjaCBvZiB0aGVpciBkZXBlbmRlbnRzIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHBsYW4uXHJcbiAgICovXHJcbiAgZGVwZW5kZW50PzogbnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ292ZXJhZ2UuZGVwZW5kZW50XHJcbiAgICovXHJcbiAgX2RlcGVuZGVudD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBTb21lIGNvdmVyYWdlLCBmb3IgZXhhbXBsZSBzb2NpYWwgcGxhbnMsIG1heSBiZSBvZmZlcmVkIGluIHNob3J0IHRpbWUgaW5jcmVtZW50cywgZm9yIGV4YW1wbGUgZm9yIGEgd2VlayBvciBhIG1vbnRoIGF0IGEgdGltZSwgc28gd2hpbGUgdGhlIHJlc3Qgb2YgdGhlIHBsYW4gZGV0YWlscyBhbmQgaWRlbnRpZmllcnMgbWF5IHJlbWFpbiBjb25zdGFudCBvdmVyIHRpbWUsIHRoZSBpbnN0YW5jZSBpcyBpbmNyZW1lbnRlZCB3aXRoIGVhY2ggcmVuZXdhbCBhbmQgcHJvdmlkZWQgdG8gdGhlIGNvdmVyZWQgcGFydHkgb24gdGhlaXIgJ2NhcmQnLlxyXG4gICAqL1xyXG4gIHNlcXVlbmNlPzogbnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ292ZXJhZ2Uuc2VxdWVuY2VcclxuICAgKi9cclxuICBfc2VxdWVuY2U/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcnR5IHdobyAnb3ducycgdGhlIGluc3VyYW5jZSBjb250cmFjdHVhbCByZWxhdGlvbnNoaXAgdG8gdGhlIHBvbGljeSBvciB0byB3aG9tIHRoZSBiZW5lZml0IG9mIHRoZSBwb2xpY3kgaXMgZHVlLlxyXG4gICAqL1xyXG4gIHN1YnNjcmliZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGlkZW50aWZpZXIgZm9yIGEgY29tbXVuaXR5IG9mIHByb3ZpZGVycy5cclxuICAgKi9cclxuICBuZXR3b3JrPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcG9saWN5KHMpIHdoaWNoIGNvbnN0aXR1dGUgdGhpcyBpbnN1cmFuY2UgY292ZXJhZ2UuXHJcbiAgICovXHJcbiAgY29udHJhY3Q/OiAoZmhpci5SZWZlcmVuY2V8bnVsbClbXXx1bmRlZmluZWQ7XHJcbn1cclxuIl19