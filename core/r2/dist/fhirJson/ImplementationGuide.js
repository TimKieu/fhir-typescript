// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ImplementationGuide.js","sourceRoot":"./src/","sources":["fhirJson/ImplementationGuide.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,qCAAqC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r2.core version: 1.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ImplementationGuide\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Contacts to assist a user in finding and communicating with the publisher.\r\n */\r\nexport interface ImplementationGuideContact extends fhir.BackboneElement { \r\n  /**\r\n   * The name of an individual to contact regarding the implementation guide.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.contact.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Contact details for individual (if a name was provided) or the publisher.\r\n   */\r\n  telecom?: (fhir.ContactPoint|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.\r\n */\r\nexport interface ImplementationGuideDependency extends fhir.BackboneElement { \r\n  /**\r\n   * How the dependency is represented when the guide is published.\r\n   */\r\n  type: 'inclusion'|'reference'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.dependency.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Where the dependency is located.\r\n   */\r\n  uri: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.dependency.uri\r\n   */\r\n  _uri?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.\r\n */\r\nexport interface ImplementationGuidePackageResource extends fhir.BackboneElement { \r\n  /**\r\n   * This element is provided so that implementation guide tooling does not have to guess the purpose of including a resource in the implementation guide based on the type or context.\r\n   */\r\n  purpose: 'dictionary'|'example'|'extension'|'logical'|'profile'|'terminology'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.resource.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.resource.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * A description of the reason that a resource has been included in the implementation guide.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.resource.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * A short code that may be used to identify the resource throughout the implementation guide.\r\n   */\r\n  acronym?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.resource.acronym\r\n   */\r\n  _acronym?:fhir.FhirElement;\r\n  /**\r\n   * Where this resource is found.\r\n   */\r\n  sourceUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.resource.source[x]\r\n   */\r\n  _sourceUri?:fhir.FhirElement;\r\n  /**\r\n   * Where this resource is found.\r\n   */\r\n  sourceReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.\r\n   */\r\n  exampleFor?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * A logical group of resources. Logical groups can be used when building pages.\r\n */\r\nexport interface ImplementationGuidePackage extends fhir.BackboneElement { \r\n  /**\r\n   * The name for the group, as used in page.package.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Human readable text describing the package.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.package.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.\r\n   */\r\n  resource: (fhir.ImplementationGuidePackageResource|null)[]|null;\r\n}\r\n\r\n/**\r\n * A set of profiles that all resources covered by this implementation guide must conform to.\r\n */\r\nexport interface ImplementationGuideGlobal extends fhir.BackboneElement { \r\n  /**\r\n   * The type of resource that all instances must conform to.\r\n   */\r\n  type: 'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.global.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * A reference to the profile that all instances must conform to.\r\n   */\r\n  profile: fhir.Reference|null;\r\n}\r\n\r\n/**\r\n * A page / section in the implementation guide. The root page is the implementation guide home page.\r\n */\r\nexport interface ImplementationGuidePage extends fhir.BackboneElement { \r\n  /**\r\n   * The source address for the page.\r\n   */\r\n  source: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.page.source\r\n   */\r\n  _source?:fhir.FhirElement;\r\n  /**\r\n   * A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.page.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.\r\n   */\r\n  kind: 'dictionary'|'directory'|'example'|'include'|'list'|'page'|'resource'|'toc'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.page.kind\r\n   */\r\n  _kind?:fhir.FhirElement;\r\n  /**\r\n   * For constructed pages, what kind of resources to include in the list.\r\n   */\r\n  type?: (('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.page.type\r\n   */\r\n  _type?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * For constructed pages, a list of packages to include in the page (or else empty for everything).\r\n   */\r\n  package?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.page.package\r\n   */\r\n  _package?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The format of the page.\r\n   */\r\n  format?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.page.format\r\n   */\r\n  _format?:fhir.FhirElement;\r\n  /**\r\n   * Nested Pages/Sections under this page.\r\n   */\r\n  page?: (fhir.ImplementationGuidePage|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.\r\n */\r\nexport interface ImplementationGuide extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ImplementationGuide\"|null;\r\n  /**\r\n   * This is required to allow hosting Implementation Guides on multiple different servers, and to allow for the editorial process.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * There may be multiple resource versions of the Implementation Guide that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language name identifying the Implementation Guide.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of Implementation Guides that are appropriate for use vs. not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|null;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of Implementation Guides that are appropriate for use vs. not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Helps establish the \"authority/credibility\" of the implementation guide.  May also allow for contact.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * Contacts to assist a user in finding and communicating with the publisher.\r\n   */\r\n  contact?: (fhir.ImplementationGuideContact|null)[]|undefined;\r\n  /**\r\n   * The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language description of the Implementation Guide and its use.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Assist in searching for appropriate implementation guide.\r\n   */\r\n  useContext?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.\r\n   */\r\n  fhirVersion?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.fhirVersion\r\n   */\r\n  _fhirVersion?:fhir.FhirElement;\r\n  /**\r\n   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.\r\n   */\r\n  dependency?: (fhir.ImplementationGuideDependency|null)[]|undefined;\r\n  /**\r\n   * A logical group of resources. Logical groups can be used when building pages.\r\n   */\r\n  package: (fhir.ImplementationGuidePackage|null)[]|null;\r\n  /**\r\n   * A set of profiles that all resources covered by this implementation guide must conform to.\r\n   */\r\n  global?: (fhir.ImplementationGuideGlobal|null)[]|undefined;\r\n  /**\r\n   * A binary file that is included in the  implementation guide when it is published.\r\n   */\r\n  binary?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ImplementationGuide.binary\r\n   */\r\n  _binary?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A page / section in the implementation guide. The root page is the implementation guide home page.\r\n   */\r\n  page: fhir.ImplementationGuidePage|null;\r\n}\r\n"]}