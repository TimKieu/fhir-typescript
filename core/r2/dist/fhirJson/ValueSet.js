// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ValueSet
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ValueSet.js","sourceRoot":"./src/","sources":["fhirJson/ValueSet.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,0BAA0B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r2.core version: 1.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ValueSet\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Contacts to assist a user in finding and communicating with the publisher.\r\n */\r\nexport interface ValueSetContact extends fhir.BackboneElement { \r\n  /**\r\n   * The name of an individual to contact regarding the value set.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.contact.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Contact details for individual (if a name was provided) or the publisher.\r\n   */\r\n  telecom?: (fhir.ContactPoint|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.\r\n */\r\nexport interface ValueSetCodeSystemConceptDesignation extends fhir.BackboneElement { \r\n  /**\r\n   * The language this designation is defined for.\r\n   */\r\n  language?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.concept.designation.language\r\n   */\r\n  _language?:fhir.FhirElement;\r\n  /**\r\n   * A code that details how this designation would be used.\r\n   */\r\n  use?: fhir.Coding|undefined;\r\n  /**\r\n   * The text value for this designation.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.concept.designation.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.\r\n */\r\nexport interface ValueSetCodeSystemConcept extends fhir.BackboneElement { \r\n  /**\r\n   * A code - a text symbol - that uniquely identifies the concept within the code system.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.concept.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * If this code is not for use as a real concept.\r\n   */\r\n  abstract?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.concept.abstract\r\n   */\r\n  _abstract?:fhir.FhirElement;\r\n  /**\r\n   * A human readable string that is the recommended default way to present this concept to a user.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.concept.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.\r\n   */\r\n  definition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.concept.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.\r\n   */\r\n  designation?: (fhir.ValueSetCodeSystemConceptDesignation|null)[]|undefined;\r\n  /**\r\n   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.\r\n   */\r\n  concept?: (fhir.ValueSetCodeSystemConcept|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.\r\n */\r\nexport interface ValueSetCodeSystem extends fhir.BackboneElement { \r\n  /**\r\n   * An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system.\r\n   */\r\n  system: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.system\r\n   */\r\n  _system?:fhir.FhirElement;\r\n  /**\r\n   * The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * If code comparison is case sensitive when codes within this system are compared to each other.\r\n   */\r\n  caseSensitive?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.codeSystem.caseSensitive\r\n   */\r\n  _caseSensitive?:fhir.FhirElement;\r\n  /**\r\n   * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.\r\n   */\r\n  concept: (fhir.ValueSetCodeSystemConcept|null)[]|null;\r\n}\r\n\r\n/**\r\n * Specifies a concept to be included or excluded.\r\n */\r\nexport interface ValueSetComposeIncludeConcept extends fhir.BackboneElement { \r\n  /**\r\n   * Specifies a code for the concept to be included or excluded.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.concept.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.concept.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.\r\n   */\r\n  designation?: (fhir.ValueSetCodeSystemConceptDesignation|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.\r\n */\r\nexport interface ValueSetComposeIncludeFilter extends fhir.BackboneElement { \r\n  /**\r\n   * A code that identifies a property defined in the code system.\r\n   */\r\n  property: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.filter.property\r\n   */\r\n  _property?:fhir.FhirElement;\r\n  /**\r\n   * The kind of operation to perform as a part of the filter criteria.\r\n   */\r\n  op: '='|'in'|'is-a'|'is-not-a'|'not-in'|'regex'|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.filter.op\r\n   */\r\n  _op?:fhir.FhirElement;\r\n  /**\r\n   * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.filter.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Include one or more codes from a code system.\r\n */\r\nexport interface ValueSetComposeInclude extends fhir.BackboneElement { \r\n  /**\r\n   * An absolute URI which is the code system from which the selected codes come from.\r\n   */\r\n  system: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.system\r\n   */\r\n  _system?:fhir.FhirElement;\r\n  /**\r\n   * The version of the code system that the codes are selected from.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * Specifies a concept to be included or excluded.\r\n   */\r\n  concept?: (fhir.ValueSetComposeIncludeConcept|null)[]|undefined;\r\n  /**\r\n   * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.\r\n   */\r\n  filter?: (fhir.ValueSetComposeIncludeFilter|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.\r\n */\r\nexport interface ValueSetCompose extends fhir.BackboneElement { \r\n  /**\r\n   * Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.\r\n   */\r\n  import?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.import\r\n   */\r\n  _import?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Include one or more codes from a code system.\r\n   */\r\n  include?: (fhir.ValueSetComposeInclude|null)[]|undefined;\r\n  /**\r\n   * Exclude one or more codes from the value set.\r\n   */\r\n  exclude?: (fhir.ValueSetComposeInclude|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.\r\n */\r\nexport interface ValueSetExpansionParameter extends fhir.BackboneElement { \r\n  /**\r\n   * The name of the parameter.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueUri?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueCode?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The codes that are contained in the value set expansion.\r\n */\r\nexport interface ValueSetExpansionContains extends fhir.BackboneElement { \r\n  /**\r\n   * An absolute URI which is the code system in which the code for this item in the expansion is defined.\r\n   */\r\n  system?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.system\r\n   */\r\n  _system?:fhir.FhirElement;\r\n  /**\r\n   * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.\r\n   */\r\n  abstract?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.abstract\r\n   */\r\n  _abstract?:fhir.FhirElement;\r\n  /**\r\n   * The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.\r\n   */\r\n  code?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The recommended display for this item in the expansion.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * Other codes and entries contained under this entry in the hierarchy.\r\n   */\r\n  contains?: (fhir.ValueSetExpansionContains|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.\r\n */\r\nexport interface ValueSetExpansion extends fhir.BackboneElement { \r\n  /**\r\n   * An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.\r\n   */\r\n  identifier: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.identifier\r\n   */\r\n  _identifier?:fhir.FhirElement;\r\n  /**\r\n   * The time at which the expansion was produced by the expanding system.\r\n   */\r\n  timestamp: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.timestamp\r\n   */\r\n  _timestamp?:fhir.FhirElement;\r\n  /**\r\n   * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.\r\n   */\r\n  total?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.total\r\n   */\r\n  _total?:fhir.FhirElement;\r\n  /**\r\n   * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.\r\n   */\r\n  offset?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.offset\r\n   */\r\n  _offset?:fhir.FhirElement;\r\n  /**\r\n   * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.\r\n   */\r\n  parameter?: (fhir.ValueSetExpansionParameter|null)[]|undefined;\r\n  /**\r\n   * The codes that are contained in the value set expansion.\r\n   */\r\n  contains?: (fhir.ValueSetExpansionContains|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A value set specifies a set of codes drawn from one or more code systems.\r\n */\r\nexport interface ValueSet extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ValueSet\"|null;\r\n  /**\r\n   * An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * Support human navigation.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Identify when/if the value set should be used.\r\n   */\r\n  status: 'active'|'draft'|'retired'|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Helps establish the \"authority/credibility\" of the value set.  May also allow for contact.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * Contacts to assist a user in finding and communicating with the publisher.\r\n   */\r\n  contact?: (fhir.ValueSetContact|null)[]|undefined;\r\n  /**\r\n   * Need to know when a value set was first legal for use or became withdrawn or replaced.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.\r\n   */\r\n  lockedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.lockedDate\r\n   */\r\n  _lockedDate?:fhir.FhirElement;\r\n  /**\r\n   * Human understandability.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Assist in searching for appropriate content.\r\n   */\r\n  useContext?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.\r\n   */\r\n  immutable?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.immutable\r\n   */\r\n  _immutable?:fhir.FhirElement;\r\n  /**\r\n   * Explains why this value set is needed and why it has been constrained as it has.\r\n   */\r\n  requirements?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.requirements\r\n   */\r\n  _requirements?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * It is not required to say whether this intent applies.\r\n   */\r\n  extensible?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.extensible\r\n   */\r\n  _extensible?:fhir.FhirElement;\r\n  /**\r\n   * A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.\r\n   */\r\n  codeSystem?: fhir.ValueSetCodeSystem|undefined;\r\n  /**\r\n   * A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.\r\n   */\r\n  compose?: fhir.ValueSetCompose|undefined;\r\n  /**\r\n   * A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.\r\n   */\r\n  expansion?: fhir.ValueSetExpansion|undefined;\r\n}\r\n"]}