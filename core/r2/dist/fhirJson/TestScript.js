// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestScript
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"TestScript.js","sourceRoot":"./src/","sources":["fhirJson/TestScript.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,4BAA4B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r2.core version: 1.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: TestScript\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Contacts to assist a user in finding and communicating with the publisher.\r\n */\r\nexport interface TestScriptContact extends fhir.BackboneElement { \r\n  /**\r\n   * The name of an individual to contact regarding the Test Script.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.contact.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Contact details for individual (if a name was provided) or the publisher.\r\n   */\r\n  telecom?: (fhir.ContactPoint|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A link to the FHIR specification that this test is covering.\r\n */\r\nexport interface TestScriptMetadataLink extends fhir.BackboneElement { \r\n  /**\r\n   * URL to a particular requirement or feature within the FHIR specification.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.link.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Short description of the link.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.link.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.\r\n */\r\nexport interface TestScriptMetadataCapability extends fhir.BackboneElement { \r\n  /**\r\n   * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.\r\n   */\r\n  required?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.required\r\n   */\r\n  _required?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.\r\n   */\r\n  validated?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.validated\r\n   */\r\n  _validated?:fhir.FhirElement;\r\n  /**\r\n   * Description of the capabilities that this test script is requiring the server to support.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Which server these requirements apply to.\r\n   */\r\n  destination?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.destination\r\n   */\r\n  _destination?:fhir.FhirElement;\r\n  /**\r\n   * Links to the FHIR specification that describes this interaction and the resources involved in more detail.\r\n   */\r\n  link?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.link\r\n   */\r\n  _link?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.\r\n   */\r\n  conformance: fhir.Reference|null;\r\n}\r\n\r\n/**\r\n * The required capability must exist and are assumed to function correctly on the FHIR server being tested.\r\n */\r\nexport interface TestScriptMetadata extends fhir.BackboneElement { \r\n  /**\r\n   * A link to the FHIR specification that this test is covering.\r\n   */\r\n  link?: (fhir.TestScriptMetadataLink|null)[]|undefined;\r\n  /**\r\n   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.\r\n   */\r\n  capability: (fhir.TestScriptMetadataCapability|null)[]|null;\r\n}\r\n\r\n/**\r\n * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.\r\n */\r\nexport interface TestScriptFixture extends fhir.BackboneElement { \r\n  /**\r\n   * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.\r\n   */\r\n  autocreate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.fixture.autocreate\r\n   */\r\n  _autocreate?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.\r\n   */\r\n  autodelete?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.fixture.autodelete\r\n   */\r\n  _autodelete?:fhir.FhirElement;\r\n  /**\r\n   * Reference to the resource (containing the contents of the resource needed for operations).\r\n   */\r\n  resource?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Variable is set based either on element value in response body or on header field value in the response headers.\r\n */\r\nexport interface TestScriptVariable extends fhir.BackboneElement { \r\n  /**\r\n   * Descriptive name for this variable.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.\r\n   */\r\n  headerField?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.headerField\r\n   */\r\n  _headerField?:fhir.FhirElement;\r\n  /**\r\n   * XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.\r\n   */\r\n  path?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.\r\n   */\r\n  sourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.sourceId\r\n   */\r\n  _sourceId?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Header elements would be used to set HTTP headers.\r\n */\r\nexport interface TestScriptSetupActionOperationRequestHeader extends fhir.BackboneElement { \r\n  /**\r\n   * The HTTP header field e.g. \"Accept\".\r\n   */\r\n  field: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.requestHeader.field\r\n   */\r\n  _field?:fhir.FhirElement;\r\n  /**\r\n   * The value of the header e.g. \"application/xml\".\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.requestHeader.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The operation to perform.\r\n */\r\nexport interface TestScriptSetupActionOperation extends fhir.BackboneElement { \r\n  /**\r\n   * Server interaction or operation type.\r\n   */\r\n  type?: fhir.Coding|undefined;\r\n  /**\r\n   * The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.\r\n   */\r\n  resource?: 'Account'|'Address'|'Age'|'AllergyIntolerance'|'Annotation'|'Appointment'|'AppointmentResponse'|'Attachment'|'AuditEvent'|'BackboneElement'|'base64Binary'|'Basic'|'Binary'|'BodySite'|'boolean'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'code'|'CodeableConcept'|'Coding'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'ContactPoint'|'Contract'|'Count'|'Coverage'|'DataElement'|'date'|'dateTime'|'decimal'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'Distance'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Duration'|'Element'|'ElementDefinition'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'Extension'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'HumanName'|'id'|'Identifier'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'instant'|'integer'|'List'|'Location'|'markdown'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'Meta'|'Money'|'NamingSystem'|'Narrative'|'NutritionOrder'|'Observation'|'oid'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Period'|'Person'|'positiveInt'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Quantity'|'Questionnaire'|'QuestionnaireResponse'|'Range'|'Ratio'|'Reference'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'SampledData'|'Schedule'|'SearchParameter'|'Signature'|'SimpleQuantity'|'Slot'|'Specimen'|'string'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'time'|'Timing'|'unsignedInt'|'uri'|'uuid'|'ValueSet'|'VisionPrescription'|'xhtml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.resource\r\n   */\r\n  _resource?:fhir.FhirElement;\r\n  /**\r\n   * The label would be used for tracking/logging purposes by test engines.\r\n   */\r\n  label?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.label\r\n   */\r\n  _label?:fhir.FhirElement;\r\n  /**\r\n   * The description would be used by test engines for tracking and reporting purposes.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * The content-type or mime-type to use for RESTful operation in the 'Accept' header.\r\n   */\r\n  accept?: 'json'|'xml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.accept\r\n   */\r\n  _accept?:fhir.FhirElement;\r\n  /**\r\n   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.\r\n   */\r\n  contentType?: 'json'|'xml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.contentType\r\n   */\r\n  _contentType?:fhir.FhirElement;\r\n  /**\r\n   * Which server to perform the operation on.\r\n   */\r\n  destination?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.destination\r\n   */\r\n  _destination?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.\r\n   */\r\n  encodeRequestUrl?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.encodeRequestUrl\r\n   */\r\n  _encodeRequestUrl?:fhir.FhirElement;\r\n  /**\r\n   * Path plus parameters after [type].  Used to set parts of the request URL explicitly.\r\n   */\r\n  params?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.params\r\n   */\r\n  _params?:fhir.FhirElement;\r\n  /**\r\n   * Header elements would be used to set HTTP headers.\r\n   */\r\n  requestHeader?: (fhir.TestScriptSetupActionOperationRequestHeader|null)[]|undefined;\r\n  /**\r\n   * The fixture id (maybe new) to map to the response.\r\n   */\r\n  responseId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.responseId\r\n   */\r\n  _responseId?:fhir.FhirElement;\r\n  /**\r\n   * The id of the fixture used as the body of a PUT or POST request.\r\n   */\r\n  sourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.sourceId\r\n   */\r\n  _sourceId?:fhir.FhirElement;\r\n  /**\r\n   * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.\r\n   */\r\n  targetId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.targetId\r\n   */\r\n  _targetId?:fhir.FhirElement;\r\n  /**\r\n   * Complete request URL.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Evaluates the results of previous operations to determine if the server under test behaves appropriately.\r\n */\r\nexport interface TestScriptSetupActionAssert extends fhir.BackboneElement { \r\n  /**\r\n   * The label would be used for tracking/logging purposes by test engines.\r\n   */\r\n  label?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.label\r\n   */\r\n  _label?:fhir.FhirElement;\r\n  /**\r\n   * The description would be used by test engines for tracking and reporting purposes.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * The direction to use for the assertion.\r\n   */\r\n  direction?: 'request'|'response'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.direction\r\n   */\r\n  _direction?:fhir.FhirElement;\r\n  /**\r\n   * Id of fixture used to compare the \"sourceId/path\" evaluations to.\r\n   */\r\n  compareToSourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.compareToSourceId\r\n   */\r\n  _compareToSourceId?:fhir.FhirElement;\r\n  /**\r\n   * XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to.\r\n   */\r\n  compareToSourcePath?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.compareToSourcePath\r\n   */\r\n  _compareToSourcePath?:fhir.FhirElement;\r\n  /**\r\n   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.\r\n   */\r\n  contentType?: 'json'|'xml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.contentType\r\n   */\r\n  _contentType?:fhir.FhirElement;\r\n  /**\r\n   * The HTTP header field name e.g. 'Location'.\r\n   */\r\n  headerField?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.headerField\r\n   */\r\n  _headerField?:fhir.FhirElement;\r\n  /**\r\n   * The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.\r\n   */\r\n  minimumId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.minimumId\r\n   */\r\n  _minimumId?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not the test execution performs validation on the bundle navigation links.\r\n   */\r\n  navigationLinks?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.navigationLinks\r\n   */\r\n  _navigationLinks?:fhir.FhirElement;\r\n  /**\r\n   * The operator type.\r\n   */\r\n  operator?: 'contains'|'empty'|'equals'|'greaterThan'|'in'|'lessThan'|'notContains'|'notEmpty'|'notEquals'|'notIn'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.operator\r\n   */\r\n  _operator?:fhir.FhirElement;\r\n  /**\r\n   * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.\r\n   */\r\n  path?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.\r\n   */\r\n  resource?: 'Account'|'Address'|'Age'|'AllergyIntolerance'|'Annotation'|'Appointment'|'AppointmentResponse'|'Attachment'|'AuditEvent'|'BackboneElement'|'base64Binary'|'Basic'|'Binary'|'BodySite'|'boolean'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'code'|'CodeableConcept'|'Coding'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'ContactPoint'|'Contract'|'Count'|'Coverage'|'DataElement'|'date'|'dateTime'|'decimal'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'Distance'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Duration'|'Element'|'ElementDefinition'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'Extension'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'HumanName'|'id'|'Identifier'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'instant'|'integer'|'List'|'Location'|'markdown'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'Meta'|'Money'|'NamingSystem'|'Narrative'|'NutritionOrder'|'Observation'|'oid'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Period'|'Person'|'positiveInt'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Quantity'|'Questionnaire'|'QuestionnaireResponse'|'Range'|'Ratio'|'Reference'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'SampledData'|'Schedule'|'SearchParameter'|'Signature'|'SimpleQuantity'|'Slot'|'Specimen'|'string'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'time'|'Timing'|'unsignedInt'|'uri'|'uuid'|'ValueSet'|'VisionPrescription'|'xhtml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.resource\r\n   */\r\n  _resource?:fhir.FhirElement;\r\n  /**\r\n   * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.\r\n   */\r\n  response?: 'bad'|'conflict'|'created'|'forbidden'|'gone'|'methodNotAllowed'|'noContent'|'notFound'|'notModified'|'okay'|'preconditionFailed'|'unprocessable'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.response\r\n   */\r\n  _response?:fhir.FhirElement;\r\n  /**\r\n   * The value of the HTTP response code to be tested.\r\n   */\r\n  responseCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.responseCode\r\n   */\r\n  _responseCode?:fhir.FhirElement;\r\n  /**\r\n   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.\r\n   */\r\n  sourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.sourceId\r\n   */\r\n  _sourceId?:fhir.FhirElement;\r\n  /**\r\n   * The ID of the Profile to validate against.\r\n   */\r\n  validateProfileId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.validateProfileId\r\n   */\r\n  _validateProfileId?:fhir.FhirElement;\r\n  /**\r\n   * The value to compare to.\r\n   */\r\n  value?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not the test execution will produce a warning only on error for this assert.\r\n   */\r\n  warningOnly?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.warningOnly\r\n   */\r\n  _warningOnly?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Action would contain either an operation or an assertion.\r\n */\r\nexport interface TestScriptSetupAction extends fhir.BackboneElement { \r\n  /**\r\n   * The operation to perform.\r\n   */\r\n  operation?: fhir.TestScriptSetupActionOperation|undefined;\r\n  /**\r\n   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.\r\n   */\r\n  assert?: fhir.TestScriptSetupActionAssert|undefined;\r\n}\r\n\r\n/**\r\n * A series of required setup operations before tests are executed.\r\n */\r\nexport interface TestScriptSetup extends fhir.BackboneElement { \r\n  /**\r\n   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.\r\n   */\r\n  metadata?: fhir.TestScriptMetadata|undefined;\r\n  /**\r\n   * Action would contain either an operation or an assertion.\r\n   */\r\n  action: (fhir.TestScriptSetupAction|null)[]|null;\r\n}\r\n\r\n/**\r\n * Action would contain either an operation or an assertion.\r\n */\r\nexport interface TestScriptTestAction extends fhir.BackboneElement { \r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  operation?: fhir.TestScriptSetupActionOperation|undefined;\r\n  /**\r\n   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.\r\n   */\r\n  assert?: fhir.TestScriptSetupActionAssert|undefined;\r\n}\r\n\r\n/**\r\n * A test in this script.\r\n */\r\nexport interface TestScriptTest extends fhir.BackboneElement { \r\n  /**\r\n   * The name of this test used for tracking/logging purposes by test engines.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.test.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * A short description of the test used by test engines for tracking and reporting purposes.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.test.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.\r\n   */\r\n  metadata?: fhir.TestScriptMetadata|undefined;\r\n  /**\r\n   * Action would contain either an operation or an assertion.\r\n   */\r\n  action: (fhir.TestScriptTestAction|null)[]|null;\r\n}\r\n\r\n/**\r\n * The teardown action will only contain an operation.\r\n */\r\nexport interface TestScriptTeardownAction extends fhir.BackboneElement { \r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  operation?: fhir.TestScriptSetupActionOperation|undefined;\r\n}\r\n\r\n/**\r\n * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).\r\n */\r\nexport interface TestScriptTeardown extends fhir.BackboneElement { \r\n  /**\r\n   * The teardown action will only contain an operation.\r\n   */\r\n  action: (fhir.TestScriptTeardownAction|null)[]|null;\r\n}\r\n\r\n/**\r\n * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.\r\n */\r\nexport interface TestScript extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"TestScript\"|null;\r\n  /**\r\n   * An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language name identifying the TestScript.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of TestScripts that are appropriate for use vs. not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Allows filtering of TestScripts that are appropriate for use vs. not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Helps establish the \"authority/credibility\" of the Test Script.  May also allow for contact.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * Contacts to assist a user in finding and communicating with the publisher.\r\n   */\r\n  contact?: (fhir.TestScriptContact|null)[]|undefined;\r\n  /**\r\n   * The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language description of the TestScript and its use.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Assist in searching for appropriate content.\r\n   */\r\n  useContext?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * Explains why this Test Script is needed and why it's been constrained as it has.\r\n   */\r\n  requirements?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.requirements\r\n   */\r\n  _requirements?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The required capability must exist and are assumed to function correctly on the FHIR server being tested.\r\n   */\r\n  metadata?: fhir.TestScriptMetadata|undefined;\r\n  /**\r\n   * If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.\r\n   */\r\n  multiserver?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.multiserver\r\n   */\r\n  _multiserver?:fhir.FhirElement;\r\n  /**\r\n   * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.\r\n   */\r\n  fixture?: (fhir.TestScriptFixture|null)[]|undefined;\r\n  /**\r\n   * Reference to the profile to be used for validation.\r\n   */\r\n  profile?: (fhir.Reference|null)[]|undefined;\r\n  /**\r\n   * Variable is set based either on element value in response body or on header field value in the response headers.\r\n   */\r\n  variable?: (fhir.TestScriptVariable|null)[]|undefined;\r\n  /**\r\n   * A series of required setup operations before tests are executed.\r\n   */\r\n  setup?: fhir.TestScriptSetup|undefined;\r\n  /**\r\n   * A test in this script.\r\n   */\r\n  test?: (fhir.TestScriptTest|null)[]|undefined;\r\n  /**\r\n   * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).\r\n   */\r\n  teardown?: fhir.TestScriptTeardown|undefined;\r\n}\r\n"]}