// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: List
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL0xpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBMaXN0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogRW50cmllcyBpbiB0aGlzIGxpc3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIExpc3RFbnRyeSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmaWVsZCBpcyBwcmVzZW50IHRvIHN1cHBvcnQgdmFyaW91cyBjbGluaWNhbCB1c2VzIG9mIGxpc3RzLCBzdWNoIGFzIGEgZGlzY2hhcmdlIHN1bW1hcnkgbWVkaWNhdGlvbiBsaXN0LCB3aGVyZSBmbGFncyBzcGVjaWZ5IHdoZXRoZXIgdGhlIG1lZGljYXRpb24gd2FzIGFkZGVkLCBtb2RpZmllZCwgb3IgZGVsZXRlZCBmcm9tIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIGZsYWc/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZsYWcgZWxlbWVudCBtYXkgY29udGFpbiBjb2RlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHByb2Nlc3NpbmcgdGhlIGxpc3QgZG9lcyBub3QgdW5kZXJzdGFuZC4gSG93ZXZlciB0aGVyZSBjYW4gYmUgbm8gYW1iaWd1aXR5IGlmIGEgbGlzdCBpdGVtIGlzIGFjdHVhbGx5IG1hcmtlZCBhcyBcImRlbGV0ZWRcIi5cclxuICAgKi9cclxuICBkZWxldGVkPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IExpc3QuZW50cnkuZGVsZXRlZFxyXG4gICAqL1xyXG4gIF9kZWxldGVkPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIG1heSBiZSBzaWduaWZpY2FudCBmb3IgdW5kZXJzdGFuZGluZyB0aGUgbWVhbmluZyBvZiBpdGVtcyBpbiBhIHdvcmtpbmcgbGlzdC5cclxuICAgKi9cclxuICBkYXRlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTGlzdC5lbnRyeS5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIGFjdHVhbCByZXNvdXJjZSBmcm9tIHdoaWNoIGRhdGEgd2FzIGRlcml2ZWQuXHJcbiAgICovXHJcbiAgaXRlbTogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgc2V0IG9mIGluZm9ybWF0aW9uIHN1bW1hcml6ZWQgZnJvbSBhIGxpc3Qgb2Ygb3RoZXIgcmVzb3VyY2VzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMaXN0IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7IFxyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJMaXN0XCJ8bnVsbDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgTGlzdCBhc3NpZ25lZCBmb3IgYnVzaW5lc3MgcHVycG9zZXMgb3V0c2lkZSB0aGUgY29udGV4dCBvZiBGSElSLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiAoZmhpci5JZGVudGlmaWVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBjdXN0b21pemF0aW9uIGJleW9uZCBqdXN0IHRoZSBjb2RlIGlkZW50aWZ5aW5nIHRoZSBraW5kIG9mIGxpc3QuXHJcbiAgICovXHJcbiAgdGl0bGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBMaXN0LnRpdGxlXHJcbiAgICovXHJcbiAgX3RpdGxlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIExpc3RzIG9mdGVuIGNvbnRhaW4gc3Vic2V0cyBvZiByZXNvdXJjZXMgcmF0aGVyIHRoYW4gYW4gZXhoYXVzdGl2ZSBsaXN0LiAgVGhlIGNvZGUgaWRlbnRpZmllcyB3aGF0IHR5cGUgb2Ygc3Vic2V0IGlzIGluY2x1ZGVkLlxyXG4gICAqL1xyXG4gIGNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByaW1hcnkgcHVycG9zZSBvZiBsaXN0aW5nIHRoZSBzdWJqZWN0IGV4cGxpY2l0bHkgaXMgdG8gaGVscCB3aXRoIGZpbmRpbmcgdGhlIHJpZ2h0IGxpc3QuXHJcbiAgICovXHJcbiAgc3ViamVjdD86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZm9sbG93LXVwIGFzIHdlbGwgYXMgY29udGV4dC5cclxuICAgKi9cclxuICBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVuY291bnRlciB0aGF0IGlzIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoaXMgbGlzdCB3YXMgY3JlYXRlZC5cclxuICAgKi9cclxuICBlbmNvdW50ZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoaXMgbGlzdC5cclxuICAgKi9cclxuICBzdGF0dXM6ICdjdXJyZW50J3wnZW50ZXJlZC1pbi1lcnJvcid8J3JldGlyZWQnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IExpc3Quc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIGhvdyBjdXJyZW50IHRoZSBsaXN0IGlzIHdoaWNoIGFmZmVjdHMgcmVsZXZhbmNlLlxyXG4gICAqL1xyXG4gIGRhdGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBMaXN0LmRhdGVcclxuICAgKi9cclxuICBfZGF0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJbXBvcnRhbnQgZm9yIHByZXNlbnRhdGlvbiBhbmQgcmVuZGVyaW5nLiAgTGlzdHMgbWF5IGJlIHNvcnRlZCB0byBwbGFjZSBtb3JlIGltcG9ydGFudCBpbmZvcm1hdGlvbiBmaXJzdCBvciB0byBncm91cCByZWxhdGVkIGVudHJpZXMuXHJcbiAgICovXHJcbiAgb3JkZXJlZEJ5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExpc3RzIGFyZSB1c2VkIGluIHZhcmlvdXMgd2F5cywgYW5kIGl0IG11c3QgYmUga25vd24gaW4gd2hhdCB3YXkgaXQgaXMgc2FmZSB0byB1c2UgdGhlbS5cclxuICAgKi9cclxuICBtb2RlOiAnY2hhbmdlcyd8J3NuYXBzaG90J3wnd29ya2luZyd8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTGlzdC5tb2RlXHJcbiAgICovXHJcbiAgX21vZGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQ29tbWVudHMgdGhhdCBhcHBseSB0byB0aGUgb3ZlcmFsbCBsaXN0LlxyXG4gICAqL1xyXG4gIG5vdGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBMaXN0Lm5vdGVcclxuICAgKi9cclxuICBfbm90ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBFbnRyaWVzIGluIHRoaXMgbGlzdC5cclxuICAgKi9cclxuICBlbnRyeT86IChmaGlyLkxpc3RFbnRyeXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgY2FwdHVyaW5nIHRoaW5ncyBsaWtlIFwibm9uZSBleGlzdFwiIG9yIFwibm90IGFza2VkXCIgd2hpY2ggY2FuIGJlIGltcG9ydGFudCBmb3IgbW9zdCBsaXN0cy5cclxuICAgKi9cclxuICBlbXB0eVJlYXNvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxufVxyXG4iXX0=