// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Claim.js","sourceRoot":"./src/","sources":["fhirJson/Claim.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,uBAAuB","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r2.core version: 1.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Claim\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * The party to be reimbursed for the services.\r\n */\r\nexport interface ClaimPayee extends fhir.BackboneElement { \r\n  /**\r\n   * Party to be reimbursed: Subscriber, provider, other.\r\n   */\r\n  type?: fhir.Coding|undefined;\r\n  /**\r\n   * The provider who is to be reimbursed for the claim (the party to whom any benefit is assigned).\r\n   */\r\n  provider?: fhir.Reference|undefined;\r\n  /**\r\n   * The organization who is to be reimbursed for the claim (the party to whom any benefit is assigned).\r\n   */\r\n  organization?: fhir.Reference|undefined;\r\n  /**\r\n   * The person other than the subscriber who is to be reimbursed for the claim (the party to whom any benefit is assigned).\r\n   */\r\n  person?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Ordered list of patient diagnosis for which care is sought.\r\n */\r\nexport interface ClaimDiagnosis extends fhir.BackboneElement { \r\n  /**\r\n   * Required to maintain order of the diagnoses.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.diagnosis.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * Required to adjudicate services rendered to condition presented.\r\n   */\r\n  diagnosis: fhir.Coding|null;\r\n}\r\n\r\n/**\r\n * Health care programs and insurers are significant payors of health service costs.\r\n */\r\nexport interface ClaimCoverage extends fhir.BackboneElement { \r\n  /**\r\n   * To maintain order of the coverages.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.coverage.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * To identify which coverage is being adjudicated.\r\n   */\r\n  focal: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.coverage.focal\r\n   */\r\n  _focal?:fhir.FhirElement;\r\n  /**\r\n   * Need to identify the issuer to target for processing and for coordination of benefit processing.\r\n   */\r\n  coverage: fhir.Reference|null;\r\n  /**\r\n   * The contract number of a business agreement which describes the terms and conditions.\r\n   */\r\n  businessArrangement?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.coverage.businessArrangement\r\n   */\r\n  _businessArrangement?:fhir.FhirElement;\r\n  /**\r\n   * To determine the relationship between the patient and the subscriber.\r\n   */\r\n  relationship: fhir.Coding|null;\r\n  /**\r\n   * To provide any pre=determination or prior authorization reference.\r\n   */\r\n  preAuthRef?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.coverage.preAuthRef\r\n   */\r\n  _preAuthRef?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Used by downstream payers to determine what balance remains and the net payable.\r\n   */\r\n  claimResponse?: fhir.Reference|undefined;\r\n  /**\r\n   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.\r\n   */\r\n  originalRuleset?: fhir.Coding|undefined;\r\n}\r\n\r\n/**\r\n * Third tier of goods and services.\r\n */\r\nexport interface ClaimItemDetailSubDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of product or service.\r\n   */\r\n  type: fhir.Coding|null;\r\n  /**\r\n   * The fee for an additional  service or product or charge.\r\n   */\r\n  service: fhir.Coding|null;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  unitPrice?: fhir.Quantity|undefined;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  points?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.points\r\n   */\r\n  _points?:fhir.FhirElement;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  net?: fhir.Quantity|undefined;\r\n  /**\r\n   * The UDI code and issuer if applicable for the supplied product.\r\n   */\r\n  udi?: fhir.Coding|undefined;\r\n}\r\n\r\n/**\r\n * Second tier of goods and services.\r\n */\r\nexport interface ClaimItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of product or service.\r\n   */\r\n  type: fhir.Coding|null;\r\n  /**\r\n   * If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.\r\n   */\r\n  service: fhir.Coding|null;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  unitPrice?: fhir.Quantity|undefined;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  points?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.points\r\n   */\r\n  _points?:fhir.FhirElement;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  net?: fhir.Quantity|undefined;\r\n  /**\r\n   * The UDI code and issuer if applicable for the supplied product.\r\n   */\r\n  udi?: fhir.Coding|undefined;\r\n  /**\r\n   * Third tier of goods and services.\r\n   */\r\n  subDetail?: (fhir.ClaimItemDetailSubDetail|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * The materials and placement date of prior fixed prosthesis.\r\n */\r\nexport interface ClaimItemProsthesis extends fhir.BackboneElement { \r\n  /**\r\n   * May impact on adjudication.\r\n   */\r\n  initial?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.prosthesis.initial\r\n   */\r\n  _initial?:fhir.FhirElement;\r\n  /**\r\n   * May impact on adjudication.\r\n   */\r\n  priorDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.prosthesis.priorDate\r\n   */\r\n  _priorDate?:fhir.FhirElement;\r\n  /**\r\n   * May impact on adjudication.\r\n   */\r\n  priorMaterial?: fhir.Coding|undefined;\r\n}\r\n\r\n/**\r\n * First tier of goods and services.\r\n */\r\nexport interface ClaimItem extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of product or service.\r\n   */\r\n  type: fhir.Coding|null;\r\n  /**\r\n   * The practitioner who is responsible for the services rendered to the patient.\r\n   */\r\n  provider?: fhir.Reference|undefined;\r\n  /**\r\n   * Diagnosis applicable for this service or product line.\r\n   */\r\n  diagnosisLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.diagnosisLinkId\r\n   */\r\n  _diagnosisLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.\r\n   */\r\n  service: fhir.Coding|null;\r\n  /**\r\n   * The date when the enclosed suite of services were performed or completed.\r\n   */\r\n  serviceDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.serviceDate\r\n   */\r\n  _serviceDate?:fhir.FhirElement;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.\r\n   */\r\n  unitPrice?: fhir.Quantity|undefined;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  points?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.points\r\n   */\r\n  _points?:fhir.FhirElement;\r\n  /**\r\n   * If a fee is present the associated product/service code must be present.\r\n   */\r\n  net?: fhir.Quantity|undefined;\r\n  /**\r\n   * The UDI code and issuer if applicable for the supplied product.\r\n   */\r\n  udi?: fhir.Coding|undefined;\r\n  /**\r\n   * Physical service site on the patient (limb, tooth, etc.).\r\n   */\r\n  bodySite?: fhir.Coding|undefined;\r\n  /**\r\n   * A region or surface of the site, e.g. limb region or tooth surface(s).\r\n   */\r\n  subSite?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * May impact on adjudication.\r\n   */\r\n  modifier?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * Second tier of goods and services.\r\n   */\r\n  detail?: (fhir.ClaimItemDetail|null)[]|undefined;\r\n  /**\r\n   * The materials and placement date of prior fixed prosthesis.\r\n   */\r\n  prosthesis?: fhir.ClaimItemProsthesis|undefined;\r\n}\r\n\r\n/**\r\n * The list of missing teeth may influence the adjudication of services for example with Bridges.\r\n */\r\nexport interface ClaimMissingTeeth extends fhir.BackboneElement { \r\n  /**\r\n   * Provides the tooth number of the missing tooth.\r\n   */\r\n  tooth: fhir.Coding|null;\r\n  /**\r\n   * Provides the reason for the missing tooth.\r\n   */\r\n  reason?: fhir.Coding|undefined;\r\n  /**\r\n   * Some services and adjudications require this information.\r\n   */\r\n  extractionDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.missingTeeth.extractionDate\r\n   */\r\n  _extractionDate?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.\r\n */\r\nexport interface Claim extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Claim\"|null;\r\n  /**\r\n   * The category of claim this is.\r\n   */\r\n  type: 'institutional'|'oral'|'pharmacy'|'professional'|'vision'|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * The version of the specification on which this instance relies.\r\n   */\r\n  ruleset?: fhir.Coding|undefined;\r\n  /**\r\n   * The version of the specification from which the original instance was created.\r\n   */\r\n  originalRuleset?: fhir.Coding|undefined;\r\n  /**\r\n   * The date when the enclosed suite of services were performed or completed.\r\n   */\r\n  created?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.created\r\n   */\r\n  _created?:fhir.FhirElement;\r\n  /**\r\n   * Insurer Identifier, typical BIN number (6 digit).\r\n   */\r\n  target?: fhir.Reference|undefined;\r\n  /**\r\n   * The provider which is responsible for the bill, claim pre-determination, pre-authorization.\r\n   */\r\n  provider?: fhir.Reference|undefined;\r\n  /**\r\n   * The organization which is responsible for the bill, claim pre-determination, pre-authorization.\r\n   */\r\n  organization?: fhir.Reference|undefined;\r\n  /**\r\n   * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).\r\n   */\r\n  use?: 'complete'|'exploratory'|'other'|'proposed'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.use\r\n   */\r\n  _use?:fhir.FhirElement;\r\n  /**\r\n   * Immediate (stat), best effort (normal), deferred (deferred).\r\n   */\r\n  priority?: fhir.Coding|undefined;\r\n  /**\r\n   * In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.\r\n   */\r\n  fundsReserve?: fhir.Coding|undefined;\r\n  /**\r\n   * Person who created the invoice/claim/pre-determination or pre-authorization.\r\n   */\r\n  enterer?: fhir.Reference|undefined;\r\n  /**\r\n   * Facility where the services were provided.\r\n   */\r\n  facility?: fhir.Reference|undefined;\r\n  /**\r\n   * For type=Pharmacy and Vision only.\r\n   */\r\n  prescription?: fhir.Reference|undefined;\r\n  /**\r\n   * Original prescription to support the dispensing of pharmacy services, medications or products.\r\n   */\r\n  originalPrescription?: fhir.Reference|undefined;\r\n  /**\r\n   * The party to be reimbursed for the services.\r\n   */\r\n  payee?: fhir.ClaimPayee|undefined;\r\n  /**\r\n   * The referral resource which lists the date, practitioner, reason and other supporting information.\r\n   */\r\n  referral?: fhir.Reference|undefined;\r\n  /**\r\n   * Ordered list of patient diagnosis for which care is sought.\r\n   */\r\n  diagnosis?: (fhir.ClaimDiagnosis|null)[]|undefined;\r\n  /**\r\n   * List of patient conditions for which care is sought.\r\n   */\r\n  condition?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * Patient Resource.\r\n   */\r\n  patient: fhir.Reference|null;\r\n  /**\r\n   * Health care programs and insurers are significant payors of health service costs.\r\n   */\r\n  coverage?: (fhir.ClaimCoverage|null)[]|undefined;\r\n  /**\r\n   * To determine extenuating circumstances for coverage.\r\n   */\r\n  exception?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * Often required for over-age dependents.\r\n   */\r\n  school?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.school\r\n   */\r\n  _school?:fhir.FhirElement;\r\n  /**\r\n   * Coverage may be dependent on accidents.\r\n   */\r\n  accident?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.accident\r\n   */\r\n  _accident?:fhir.FhirElement;\r\n  /**\r\n   * Coverage may be dependent on the type of accident.\r\n   */\r\n  accidentType?: fhir.Coding|undefined;\r\n  /**\r\n   * Coverage may be modified based on exception information provided.\r\n   */\r\n  interventionException?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * First tier of goods and services.\r\n   */\r\n  item?: (fhir.ClaimItem|null)[]|undefined;\r\n  /**\r\n   * Code to indicate that Xrays, images, emails, documents, models or attachments are being sent in support of this submission.\r\n   */\r\n  additionalMaterials?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * The list of missing teeth may influence the adjudication of services for example with Bridges.\r\n   */\r\n  missingTeeth?: (fhir.ClaimMissingTeeth|null)[]|undefined;\r\n}\r\n"]}