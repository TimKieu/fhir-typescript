// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
export {};
//# sourceMappingURL=data:application/json;base64,