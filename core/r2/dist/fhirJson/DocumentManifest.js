// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentManifest
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jdW1lbnRNYW5pZmVzdC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL0RvY3VtZW50TWFuaWZlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsa0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBEb2N1bWVudE1hbmlmZXN0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogVGhlIGxpc3Qgb2YgRG9jdW1lbnRzIGluY2x1ZGVkIGluIHRoZSBtYW5pZmVzdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRNYW5pZmVzdENvbnRlbnQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRoZSBsaXN0IG9mIHJlZmVyZW5jZXMgdG8gZG9jdW1lbnQgY29udGVudCwgb3IgQXR0YWNobWVudCB0aGF0IGNvbnNpc3Qgb2YgdGhlIHBhcnRzIG9mIHRoaXMgZG9jdW1lbnQgbWFuaWZlc3QuIFVzdWFsbHksIHRoZXNlIHdvdWxkIGJlIGRvY3VtZW50IHJlZmVyZW5jZXMsIGJ1dCBkaXJlY3QgcmVmZXJlbmNlcyB0byBNZWRpYSBvciBBdHRhY2htZW50cyBhcmUgYWxzbyBhbGxvd2VkLlxyXG4gICAqL1xyXG4gIHBBdHRhY2htZW50PzogZmhpci5BdHRhY2htZW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiByZWZlcmVuY2VzIHRvIGRvY3VtZW50IGNvbnRlbnQsIG9yIEF0dGFjaG1lbnQgdGhhdCBjb25zaXN0IG9mIHRoZSBwYXJ0cyBvZiB0aGlzIGRvY3VtZW50IG1hbmlmZXN0LiBVc3VhbGx5LCB0aGVzZSB3b3VsZCBiZSBkb2N1bWVudCByZWZlcmVuY2VzLCBidXQgZGlyZWN0IHJlZmVyZW5jZXMgdG8gTWVkaWEgb3IgQXR0YWNobWVudHMgYXJlIGFsc28gYWxsb3dlZC5cclxuICAgKi9cclxuICBwUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogUmVsYXRlZCBpZGVudGlmaWVycyBvciByZXNvdXJjZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBEb2N1bWVudE1hbmlmZXN0LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudE1hbmlmZXN0UmVsYXRlZCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogUmVsYXRlZCBpZGVudGlmaWVyIHRvIHRoaXMgRG9jdW1lbnRNYW5pZmVzdC4gIEZvciBleGFtcGxlLCBPcmRlciBudW1iZXJzLCBhY2Nlc3Npb24gbnVtYmVycywgWERXIHdvcmtmbG93IG51bWJlcnMuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVsYXRlZCBSZXNvdXJjZSB0byB0aGlzIERvY3VtZW50TWFuaWZlc3QuIEZvciBleGFtcGxlLCBPcmRlciwgRGlhZ25vc3RpY09yZGVyLCAgUHJvY2VkdXJlLCBFbGlnaWJpbGl0eVJlcXVlc3QsIGV0Yy5cclxuICAgKi9cclxuICByZWY/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIG1hbmlmZXN0IHRoYXQgZGVmaW5lcyBhIHNldCBvZiBkb2N1bWVudHMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50TWFuaWZlc3QgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIkRvY3VtZW50TWFuaWZlc3RcInxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgc2luZ2xlIGlkZW50aWZpZXIgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoaXMgbWFuaWZlc3QuIFByaW5jaXBhbGx5IHVzZWQgdG8gcmVmZXIgdG8gdGhlIG1hbmlmZXN0IGluIG5vbi1GSElSIGNvbnRleHRzLlxyXG4gICAqL1xyXG4gIG1hc3RlcklkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE90aGVyIGlkZW50aWZpZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZG9jdW1lbnQgbWFuaWZlc3QsIGluY2x1ZGluZyB2ZXJzaW9uIGluZGVwZW5kZW50ICBpZGVudGlmaWVycy5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogKGZoaXIuSWRlbnRpZmllcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaG8gb3Igd2hhdCB0aGUgc2V0IG9mIGRvY3VtZW50cyBpcyBhYm91dC4gVGhlIGRvY3VtZW50cyBjYW4gYmUgYWJvdXQgYSBwZXJzb24sIChwYXRpZW50IG9yIGhlYWx0aGNhcmUgcHJhY3RpdGlvbmVyKSwgYSBkZXZpY2UgKGkuZS4gbWFjaGluZSkgb3IgZXZlbiBhIGdyb3VwIG9mIHN1YmplY3RzIChzdWNoIGFzIGEgZG9jdW1lbnQgYWJvdXQgYSBoZXJkIG9mIGZhcm0gYW5pbWFscywgb3IgYSBzZXQgb2YgcGF0aWVudHMgdGhhdCBzaGFyZSBhIGNvbW1vbiBleHBvc3VyZSkuIElmIHRoZSBkb2N1bWVudHMgY3Jvc3MgbW9yZSB0aGFuIG9uZSBzdWJqZWN0LCB0aGVuIG1vcmUgdGhhbiBvbmUgc3ViamVjdCBpcyBhbGxvd2VkIGhlcmUgKHVudXN1YWwgdXNlIGNhc2UpLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBwYXRpZW50LCBwcmFjdGl0aW9uZXIsIG9yIG9yZ2FuaXphdGlvbiBmb3Igd2hpY2ggdGhpcyBzZXQgb2YgZG9jdW1lbnRzIGlzIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIHJlY2lwaWVudD86IChmaGlyLlJlZmVyZW5jZXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTcGVjaWZpZXMgdGhlIGtpbmQgb2YgdGhpcyBzZXQgb2YgZG9jdW1lbnRzIChlLmcuIFBhdGllbnQgU3VtbWFyeSwgRGlzY2hhcmdlIFN1bW1hcnksIFByZXNjcmlwdGlvbiwgZXRjLikuIFRoZSB0eXBlIG9mIGEgc2V0IG9mIGRvY3VtZW50cyBtYXkgYmUgdGhlIHNhbWUgYXMgb25lIG9mIHRoZSBkb2N1bWVudHMgaW4gaXQgLSBlc3BlY2lhbGx5IGlmIHRoZXJlIGlzIG9ubHkgb25lIC0gYnV0IGl0IG1heSBiZSB3aWRlci5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgd2hvIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgbWFuaWZlc3QsIGFuZCBhZGRpbmcgIGRvY3VtZW50cyB0byBpdC5cclxuICAgKi9cclxuICBhdXRob3I/OiAoZmhpci5SZWZlcmVuY2V8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiB0aGUgZG9jdW1lbnQgbWFuaWZlc3Qgd2FzIGNyZWF0ZWQgZm9yIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlciAobm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIHRoaW5nIGFzIHRoZSBhY3R1YWwgcmVzb3VyY2UgbGFzdCBtb2RpZmllZCB0aW1lLCBzaW5jZSBpdCBtYXkgYmUgbW9kaWZpZWQsIHJlcGxpY2F0ZWQsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIGNyZWF0ZWQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEb2N1bWVudE1hbmlmZXN0LmNyZWF0ZWRcclxuICAgKi9cclxuICBfY3JlYXRlZD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHRoZSBzb3VyY2Ugc3lzdGVtLCBhcHBsaWNhdGlvbiwgb3Igc29mdHdhcmUgdGhhdCBwcm9kdWNlZCB0aGUgZG9jdW1lbnQgbWFuaWZlc3QuXHJcbiAgICovXHJcbiAgc291cmNlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRG9jdW1lbnRNYW5pZmVzdC5zb3VyY2VcclxuICAgKi9cclxuICBfc291cmNlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhpcyBkb2N1bWVudCBtYW5pZmVzdC5cclxuICAgKi9cclxuICBzdGF0dXM6ICdjdXJyZW50J3wnZW50ZXJlZC1pbi1lcnJvcid8J3N1cGVyc2VkZWQnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERvY3VtZW50TWFuaWZlc3Quc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBIZWxwcyBodW1hbnMgdG8gYXNzZXNzIHdoZXRoZXIgdGhlIGRvY3VtZW50IGlzIG9mIGludGVyZXN0LlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRG9jdW1lbnRNYW5pZmVzdC5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiBEb2N1bWVudHMgaW5jbHVkZWQgaW4gdGhlIG1hbmlmZXN0LlxyXG4gICAqL1xyXG4gIGNvbnRlbnQ6IChmaGlyLkRvY3VtZW50TWFuaWZlc3RDb250ZW50fG51bGwpW118bnVsbDtcclxuICAvKipcclxuICAgKiBSZWxhdGVkIGlkZW50aWZpZXJzIG9yIHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIERvY3VtZW50TWFuaWZlc3QuXHJcbiAgICovXHJcbiAgcmVsYXRlZD86IChmaGlyLkRvY3VtZW50TWFuaWZlc3RSZWxhdGVkfG51bGwpW118dW5kZWZpbmVkO1xyXG59XHJcbiJdfQ==