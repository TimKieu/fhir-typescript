// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Conformance
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Conformance.js","sourceRoot":"./src/","sources":["fhirJson/Conformance.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,6BAA6B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r2.core version: 1.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Conformance\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Contacts to assist a user in finding and communicating with the publisher.\r\n */\r\nexport interface ConformanceContact extends fhir.BackboneElement { \r\n  /**\r\n   * The name of an individual to contact regarding the conformance.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.contact.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Contact details for individual (if a name was provided) or the publisher.\r\n   */\r\n  telecom?: (fhir.ContactPoint|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.\r\n */\r\nexport interface ConformanceSoftware extends fhir.BackboneElement { \r\n  /**\r\n   * Name software is known by.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.software.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The version identifier for the software covered by this statement.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.software.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * Date this version of the software released.\r\n   */\r\n  releaseDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.software.releaseDate\r\n   */\r\n  _releaseDate?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.\r\n */\r\nexport interface ConformanceImplementation extends fhir.BackboneElement { \r\n  /**\r\n   * Information about the specific installation that this conformance statement relates to.\r\n   */\r\n  description: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.implementation.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.implementation.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Certificates associated with security profiles.\r\n */\r\nexport interface ConformanceRestSecurityCertificate extends fhir.BackboneElement { \r\n  /**\r\n   * Mime type for certificate.\r\n   */\r\n  type?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.security.certificate.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Actual certificate.\r\n   */\r\n  blob?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.security.certificate.blob\r\n   */\r\n  _blob?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Information about security implementation from an interface perspective - what a client needs to know.\r\n */\r\nexport interface ConformanceRestSecurity extends fhir.BackboneElement { \r\n  /**\r\n   * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.\r\n   */\r\n  cors?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.security.cors\r\n   */\r\n  _cors?:fhir.FhirElement;\r\n  /**\r\n   * Types of security services are supported/required by the system.\r\n   */\r\n  service?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * General description of how security works.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.security.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Certificates associated with security profiles.\r\n   */\r\n  certificate?: (fhir.ConformanceRestSecurityCertificate|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Identifies a restful operation supported by the solution.\r\n */\r\nexport interface ConformanceRestResourceInteraction extends fhir.BackboneElement { \r\n  /**\r\n   * Coded identifier of the operation, supported by the system resource.\r\n   */\r\n  code: 'create'|'delete'|'history-instance'|'history-type'|'read'|'search-type'|'update'|'validate'|'vread'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.interaction.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.interaction.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.\r\n */\r\nexport interface ConformanceRestResourceSearchParam extends fhir.BackboneElement { \r\n  /**\r\n   * The name of the search parameter used in the interface.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).\r\n   */\r\n  definition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * The type of value a search parameter refers to, and how the content is interpreted.\r\n   */\r\n  type: 'composite'|'date'|'number'|'quantity'|'reference'|'string'|'token'|'uri'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * Types of resource (if a resource is referenced).\r\n   */\r\n  target?: (('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.target\r\n   */\r\n  _target?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A modifier supported for the search parameter.\r\n   */\r\n  modifier?: (('above'|'below'|'contains'|'exact'|'in'|'missing'|'not'|'not-in'|'text'|'type')|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.modifier\r\n   */\r\n  _modifier?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.\r\n   */\r\n  chain?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchParam.chain\r\n   */\r\n  _chain?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * A specification of the restful capabilities of the solution for a specific resource type.\r\n */\r\nexport interface ConformanceRestResource extends fhir.BackboneElement { \r\n  /**\r\n   * A type of resource exposed via the restful interface.\r\n   */\r\n  type: 'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.\r\n   */\r\n  profile?: fhir.Reference|undefined;\r\n  /**\r\n   * Identifies a restful operation supported by the solution.\r\n   */\r\n  interaction: (fhir.ConformanceRestResourceInteraction|null)[]|null;\r\n  /**\r\n   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.\r\n   */\r\n  versioning?: 'no-version'|'versioned'|'versioned-update'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.versioning\r\n   */\r\n  _versioning?:fhir.FhirElement;\r\n  /**\r\n   * A flag for whether the server is able to return past versions as part of the vRead operation.\r\n   */\r\n  readHistory?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.readHistory\r\n   */\r\n  _readHistory?:fhir.FhirElement;\r\n  /**\r\n   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.\r\n   */\r\n  updateCreate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.updateCreate\r\n   */\r\n  _updateCreate?:fhir.FhirElement;\r\n  /**\r\n   * A flag that indicates that the server supports conditional create.\r\n   */\r\n  conditionalCreate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.conditionalCreate\r\n   */\r\n  _conditionalCreate?:fhir.FhirElement;\r\n  /**\r\n   * A flag that indicates that the server supports conditional update.\r\n   */\r\n  conditionalUpdate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.conditionalUpdate\r\n   */\r\n  _conditionalUpdate?:fhir.FhirElement;\r\n  /**\r\n   * A code that indicates how the server supports conditional delete.\r\n   */\r\n  conditionalDelete?: 'multiple'|'not-supported'|'single'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.conditionalDelete\r\n   */\r\n  _conditionalDelete?:fhir.FhirElement;\r\n  /**\r\n   * A list of _include values supported by the server.\r\n   */\r\n  searchInclude?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchInclude\r\n   */\r\n  _searchInclude?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A list of _revinclude (reverse include) values supported by the server.\r\n   */\r\n  searchRevInclude?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.resource.searchRevInclude\r\n   */\r\n  _searchRevInclude?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.\r\n   */\r\n  searchParam?: (fhir.ConformanceRestResourceSearchParam|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A specification of restful operations supported by the system.\r\n */\r\nexport interface ConformanceRestInteraction extends fhir.BackboneElement { \r\n  /**\r\n   * A coded identifier of the operation, supported by the system.\r\n   */\r\n  code: 'history-system'|'search-system'|'transaction'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.interaction.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.interaction.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Definition of an operation or a named query and with its parameters and their meaning and type.\r\n */\r\nexport interface ConformanceRestOperation extends fhir.BackboneElement { \r\n  /**\r\n   * The name of a query, which is used in the _query parameter when the query is called.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.operation.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Where the formal definition can be found.\r\n   */\r\n  definition: fhir.Reference|null;\r\n}\r\n\r\n/**\r\n * A definition of the restful capabilities of the solution, if any.\r\n */\r\nexport interface ConformanceRest extends fhir.BackboneElement { \r\n  /**\r\n   * Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.\r\n   */\r\n  mode: 'client'|'server'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.mode\r\n   */\r\n  _mode?:fhir.FhirElement;\r\n  /**\r\n   * Information about the system's restful capabilities that apply across all applications, such as security.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * Information about security implementation from an interface perspective - what a client needs to know.\r\n   */\r\n  security?: fhir.ConformanceRestSecurity|undefined;\r\n  /**\r\n   * A specification of the restful capabilities of the solution for a specific resource type.\r\n   */\r\n  resource: (fhir.ConformanceRestResource|null)[]|null;\r\n  /**\r\n   * A specification of restful operations supported by the system.\r\n   */\r\n  interaction?: (fhir.ConformanceRestInteraction|null)[]|undefined;\r\n  /**\r\n   * A code that indicates how transactions are supported.\r\n   */\r\n  transactionMode?: 'batch'|'both'|'not-supported'|'transaction'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.transactionMode\r\n   */\r\n  _transactionMode?:fhir.FhirElement;\r\n  /**\r\n   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.\r\n   */\r\n  searchParam?: (fhir.ConformanceRestResourceSearchParam|null)[]|undefined;\r\n  /**\r\n   * Definition of an operation or a named query and with its parameters and their meaning and type.\r\n   */\r\n  operation?: (fhir.ConformanceRestOperation|null)[]|undefined;\r\n  /**\r\n   * An absolute URI which is a reference to the definition of a compartment hosted by the system.\r\n   */\r\n  compartment?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.rest.compartment\r\n   */\r\n  _compartment?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * An endpoint (network accessible address) to which messages and/or replies are to be sent.\r\n */\r\nexport interface ConformanceMessagingEndpoint extends fhir.BackboneElement { \r\n  /**\r\n   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.\r\n   */\r\n  protocol: fhir.Coding|null;\r\n  /**\r\n   * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.\r\n   */\r\n  address: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.endpoint.address\r\n   */\r\n  _address?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A description of the solution's support for an event at this end-point.\r\n */\r\nexport interface ConformanceMessagingEvent extends fhir.BackboneElement { \r\n  /**\r\n   * A coded identifier of a supported messaging event.\r\n   */\r\n  code: fhir.Coding|null;\r\n  /**\r\n   * The impact of the content of the message.\r\n   */\r\n  category?: 'Consequence'|'Currency'|'Notification'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.event.category\r\n   */\r\n  _category?:fhir.FhirElement;\r\n  /**\r\n   * The mode of this event declaration - whether application is sender or receiver.\r\n   */\r\n  mode: 'receiver'|'sender'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.event.mode\r\n   */\r\n  _mode?:fhir.FhirElement;\r\n  /**\r\n   * A resource associated with the event.  This is the resource that defines the event.\r\n   */\r\n  focus: 'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.event.focus\r\n   */\r\n  _focus?:fhir.FhirElement;\r\n  /**\r\n   * Information about the request for this event.\r\n   */\r\n  request: fhir.Reference|null;\r\n  /**\r\n   * Information about the response for this event.\r\n   */\r\n  response: fhir.Reference|null;\r\n  /**\r\n   * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.event.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A description of the messaging capabilities of the solution.\r\n */\r\nexport interface ConformanceMessaging extends fhir.BackboneElement { \r\n  /**\r\n   * An endpoint (network accessible address) to which messages and/or replies are to be sent.\r\n   */\r\n  endpoint?: (fhir.ConformanceMessagingEndpoint|null)[]|undefined;\r\n  /**\r\n   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).\r\n   */\r\n  reliableCache?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.reliableCache\r\n   */\r\n  _reliableCache?:fhir.FhirElement;\r\n  /**\r\n   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.messaging.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * A description of the solution's support for an event at this end-point.\r\n   */\r\n  event: (fhir.ConformanceMessagingEvent|null)[]|null;\r\n}\r\n\r\n/**\r\n * A document definition.\r\n */\r\nexport interface ConformanceDocument extends fhir.BackboneElement { \r\n  /**\r\n   * Mode of this document declaration - whether application is producer or consumer.\r\n   */\r\n  mode: 'consumer'|'producer'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.document.mode\r\n   */\r\n  _mode?:fhir.FhirElement;\r\n  /**\r\n   * A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.document.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * A constraint on a resource used in the document.\r\n   */\r\n  profile: fhir.Reference|null;\r\n}\r\n\r\n/**\r\n * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.\r\n */\r\nexport interface Conformance extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Conformance\"|null;\r\n  /**\r\n   * An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language name identifying the conformance statement.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The status of this conformance statement.\r\n   */\r\n  status?: 'active'|'draft'|'retired'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Helps establish the \"authority/credibility\" of the conformance.  May also allow for contact.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * Contacts to assist a user in finding and communicating with the publisher.\r\n   */\r\n  contact?: (fhir.ConformanceContact|null)[]|undefined;\r\n  /**\r\n   * The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.\r\n   */\r\n  date: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Explains why this conformance statement is needed and why it's been constrained as it has.\r\n   */\r\n  requirements?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.requirements\r\n   */\r\n  _requirements?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * Allow searching the 3 modes.\r\n   */\r\n  kind: 'capability'|'instance'|'requirements'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.kind\r\n   */\r\n  _kind?:fhir.FhirElement;\r\n  /**\r\n   * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.\r\n   */\r\n  software?: fhir.ConformanceSoftware|undefined;\r\n  /**\r\n   * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.\r\n   */\r\n  implementation?: fhir.ConformanceImplementation|undefined;\r\n  /**\r\n   * The version of the FHIR specification on which this conformance statement is based.\r\n   */\r\n  fhirVersion: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.fhirVersion\r\n   */\r\n  _fhirVersion?:fhir.FhirElement;\r\n  /**\r\n   * A code that indicates whether the application accepts unknown elements or extensions when reading resources.\r\n   */\r\n  acceptUnknown: 'both'|'elements'|'extensions'|'no'|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.acceptUnknown\r\n   */\r\n  _acceptUnknown?:fhir.FhirElement;\r\n  /**\r\n   * A list of the formats supported by this implementation using their content types.\r\n   */\r\n  format: (string|null)[]|null;\r\n  /**\r\n   * Extended properties for primitive element: Conformance.format\r\n   */\r\n  _format?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A list of profiles that represent different use cases supported by the system. For a server, \"supported by the system\" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.\r\n   */\r\n  profile?: (fhir.Reference|null)[]|undefined;\r\n  /**\r\n   * A definition of the restful capabilities of the solution, if any.\r\n   */\r\n  rest?: (fhir.ConformanceRest|null)[]|undefined;\r\n  /**\r\n   * A description of the messaging capabilities of the solution.\r\n   */\r\n  messaging?: (fhir.ConformanceMessaging|null)[]|undefined;\r\n  /**\r\n   * A document definition.\r\n   */\r\n  document?: (fhir.ConformanceDocument|null)[]|undefined;\r\n}\r\n"]}