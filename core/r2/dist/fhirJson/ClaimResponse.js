// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClaimResponse
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ClaimResponse.js","sourceRoot":"./src/","sources":["fhirJson/ClaimResponse.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,+BAA+B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r2.core version: 1.0.2\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ClaimResponse\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * The adjudications results.\r\n */\r\nexport interface ClaimResponseItemAdjudication extends fhir.BackboneElement { \r\n  /**\r\n   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  code: fhir.Coding|null;\r\n  /**\r\n   * Monetary amount associated with the code.\r\n   */\r\n  amount?: fhir.Quantity|undefined;\r\n  /**\r\n   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.\r\n   */\r\n  value?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.adjudication.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The adjudications results.\r\n */\r\nexport interface ClaimResponseItemDetailAdjudication extends fhir.BackboneElement { \r\n  /**\r\n   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  code: fhir.Coding|null;\r\n  /**\r\n   * Monetary amount associated with the code.\r\n   */\r\n  amount?: fhir.Quantity|undefined;\r\n  /**\r\n   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.\r\n   */\r\n  value?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.detail.adjudication.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The adjudications results.\r\n */\r\nexport interface ClaimResponseItemDetailSubDetailAdjudication extends fhir.BackboneElement { \r\n  /**\r\n   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  code: fhir.Coding|null;\r\n  /**\r\n   * Monetary amount associated with the code.\r\n   */\r\n  amount?: fhir.Quantity|undefined;\r\n  /**\r\n   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.\r\n   */\r\n  value?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.detail.subDetail.adjudication.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The third tier service adjudications for submitted services.\r\n */\r\nexport interface ClaimResponseItemDetailSubDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequenceLinkId: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.detail.subDetail.sequenceLinkId\r\n   */\r\n  _sequenceLinkId?:fhir.FhirElement;\r\n  /**\r\n   * The adjudications results.\r\n   */\r\n  adjudication?: (fhir.ClaimResponseItemDetailSubDetailAdjudication|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * The second tier service adjudications for submitted services.\r\n */\r\nexport interface ClaimResponseItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequenceLinkId: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.detail.sequenceLinkId\r\n   */\r\n  _sequenceLinkId?:fhir.FhirElement;\r\n  /**\r\n   * The adjudications results.\r\n   */\r\n  adjudication?: (fhir.ClaimResponseItemDetailAdjudication|null)[]|undefined;\r\n  /**\r\n   * The third tier service adjudications for submitted services.\r\n   */\r\n  subDetail?: (fhir.ClaimResponseItemDetailSubDetail|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * The first tier service adjudications for submitted services.\r\n */\r\nexport interface ClaimResponseItem extends fhir.BackboneElement { \r\n  /**\r\n   * A service line number.\r\n   */\r\n  sequenceLinkId: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.sequenceLinkId\r\n   */\r\n  _sequenceLinkId?:fhir.FhirElement;\r\n  /**\r\n   * A list of note references to the notes provided below.\r\n   */\r\n  noteNumber?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.item.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudications results.\r\n   */\r\n  adjudication?: (fhir.ClaimResponseItemAdjudication|null)[]|undefined;\r\n  /**\r\n   * The second tier service adjudications for submitted services.\r\n   */\r\n  detail?: (fhir.ClaimResponseItemDetail|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * The adjudications results.\r\n */\r\nexport interface ClaimResponseAddItemAdjudication extends fhir.BackboneElement { \r\n  /**\r\n   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  code: fhir.Coding|null;\r\n  /**\r\n   * Monetary amount associated with the code.\r\n   */\r\n  amount?: fhir.Quantity|undefined;\r\n  /**\r\n   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.\r\n   */\r\n  value?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.addItem.adjudication.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The adjudications results.\r\n */\r\nexport interface ClaimResponseAddItemDetailAdjudication extends fhir.BackboneElement { \r\n  /**\r\n   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  code: fhir.Coding|null;\r\n  /**\r\n   * Monetary amount associated with the code.\r\n   */\r\n  amount?: fhir.Quantity|undefined;\r\n  /**\r\n   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.\r\n   */\r\n  value?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.addItem.detail.adjudication.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The second tier service adjudications for payor added services.\r\n */\r\nexport interface ClaimResponseAddItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A code to indicate the Professional Service or Product supplied.\r\n   */\r\n  service: fhir.Coding|null;\r\n  /**\r\n   * The fee charged for the professional service or product..\r\n   */\r\n  fee?: fhir.Quantity|undefined;\r\n  /**\r\n   * The adjudications results.\r\n   */\r\n  adjudication?: (fhir.ClaimResponseAddItemDetailAdjudication|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * The first tier service adjudications for payor added services.\r\n */\r\nexport interface ClaimResponseAddItem extends fhir.BackboneElement { \r\n  /**\r\n   * List of input service items which this service line is intended to replace.\r\n   */\r\n  sequenceLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.addItem.sequenceLinkId\r\n   */\r\n  _sequenceLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A code to indicate the Professional Service or Product supplied.\r\n   */\r\n  service: fhir.Coding|null;\r\n  /**\r\n   * The fee charged for the professional service or product..\r\n   */\r\n  fee?: fhir.Quantity|undefined;\r\n  /**\r\n   * A list of note references to the notes provided below.\r\n   */\r\n  noteNumberLinkId?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.addItem.noteNumberLinkId\r\n   */\r\n  _noteNumberLinkId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudications results.\r\n   */\r\n  adjudication?: (fhir.ClaimResponseAddItemAdjudication|null)[]|undefined;\r\n  /**\r\n   * The second tier service adjudications for payor added services.\r\n   */\r\n  detail?: (fhir.ClaimResponseAddItemDetail|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Mutually exclusive with Services Provided (Item).\r\n */\r\nexport interface ClaimResponseError extends fhir.BackboneElement { \r\n  /**\r\n   * The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.\r\n   */\r\n  sequenceLinkId?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.error.sequenceLinkId\r\n   */\r\n  _sequenceLinkId?:fhir.FhirElement;\r\n  /**\r\n   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.\r\n   */\r\n  detailSequenceLinkId?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.error.detailSequenceLinkId\r\n   */\r\n  _detailSequenceLinkId?:fhir.FhirElement;\r\n  /**\r\n   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.\r\n   */\r\n  subdetailSequenceLinkId?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.error.subdetailSequenceLinkId\r\n   */\r\n  _subdetailSequenceLinkId?:fhir.FhirElement;\r\n  /**\r\n   * An error code,froma specified code system, which details why the claim could not be adjudicated.\r\n   */\r\n  code: fhir.Coding|null;\r\n}\r\n\r\n/**\r\n * Note text.\r\n */\r\nexport interface ClaimResponseNote extends fhir.BackboneElement { \r\n  /**\r\n   * An integer associated with each note which may be referred to from each service line item.\r\n   */\r\n  number?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.note.number\r\n   */\r\n  _number?:fhir.FhirElement;\r\n  /**\r\n   * The note purpose: Print/Display.\r\n   */\r\n  type?: 'display'|'print'|'printoper'|undefined;\r\n  /**\r\n   * The note text.\r\n   */\r\n  text?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.note.text\r\n   */\r\n  _text?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Health care programs and insurers are significant payors of health service costs.\r\n */\r\nexport interface ClaimResponseCoverage extends fhir.BackboneElement { \r\n  /**\r\n   * To maintain order of the coverages.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.coverage.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * To identify which coverage is being adjudicated.\r\n   */\r\n  focal: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.coverage.focal\r\n   */\r\n  _focal?:fhir.FhirElement;\r\n  /**\r\n   * Need to identify the issuer to target for processing and for coordination of benefit processing.\r\n   */\r\n  coverage: fhir.Reference|null;\r\n  /**\r\n   * The contract number of a business agreement which describes the terms and conditions.\r\n   */\r\n  businessArrangement?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.coverage.businessArrangement\r\n   */\r\n  _businessArrangement?:fhir.FhirElement;\r\n  /**\r\n   * To determine the relationship between the patient and the subscriber.\r\n   */\r\n  relationship: fhir.Coding|null;\r\n  /**\r\n   * To provide any pre-determination or prior authorization reference.\r\n   */\r\n  preAuthRef?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.coverage.preAuthRef\r\n   */\r\n  _preAuthRef?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Used by downstream payers to determine what balance remains and the net payable.\r\n   */\r\n  claimResponse?: fhir.Reference|undefined;\r\n  /**\r\n   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.\r\n   */\r\n  originalRuleset?: fhir.Coding|undefined;\r\n}\r\n\r\n/**\r\n * This resource provides the adjudication details from the processing of a Claim resource.\r\n */\r\nexport interface ClaimResponse extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ClaimResponse\"|null;\r\n  /**\r\n   * The Response business identifier.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * Original request resource referrence.\r\n   */\r\n  request?: fhir.Reference|undefined;\r\n  /**\r\n   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.\r\n   */\r\n  ruleset?: fhir.Coding|undefined;\r\n  /**\r\n   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.\r\n   */\r\n  originalRuleset?: fhir.Coding|undefined;\r\n  /**\r\n   * The date when the enclosed suite of services were performed or completed.\r\n   */\r\n  created?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.created\r\n   */\r\n  _created?:fhir.FhirElement;\r\n  /**\r\n   * The Insurer who produced this adjudicated response.\r\n   */\r\n  organization?: fhir.Reference|undefined;\r\n  /**\r\n   * The practitioner who is responsible for the services rendered to the patient.\r\n   */\r\n  requestProvider?: fhir.Reference|undefined;\r\n  /**\r\n   * The organization which is responsible for the services rendered to the patient.\r\n   */\r\n  requestOrganization?: fhir.Reference|undefined;\r\n  /**\r\n   * Transaction status: error, complete.\r\n   */\r\n  outcome?: 'complete'|'error'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.outcome\r\n   */\r\n  _outcome?:fhir.FhirElement;\r\n  /**\r\n   * A description of the status of the adjudication.\r\n   */\r\n  disposition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.disposition\r\n   */\r\n  _disposition?:fhir.FhirElement;\r\n  /**\r\n   * Party to be reimbursed: Subscriber, provider, other.\r\n   */\r\n  payeeType?: fhir.Coding|undefined;\r\n  /**\r\n   * The first tier service adjudications for submitted services.\r\n   */\r\n  item?: (fhir.ClaimResponseItem|null)[]|undefined;\r\n  /**\r\n   * The first tier service adjudications for payor added services.\r\n   */\r\n  addItem?: (fhir.ClaimResponseAddItem|null)[]|undefined;\r\n  /**\r\n   * Mutually exclusive with Services Provided (Item).\r\n   */\r\n  error?: (fhir.ClaimResponseError|null)[]|undefined;\r\n  /**\r\n   * This is a check value that the receiver calculates and returns.\r\n   */\r\n  totalCost?: fhir.Quantity|undefined;\r\n  /**\r\n   * The amount of deductible applied which was not allocated to any particular service line.\r\n   */\r\n  unallocDeductable?: fhir.Quantity|undefined;\r\n  /**\r\n   * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).\r\n   */\r\n  totalBenefit?: fhir.Quantity|undefined;\r\n  /**\r\n   * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.\r\n   */\r\n  paymentAdjustment?: fhir.Quantity|undefined;\r\n  /**\r\n   * Reason for the payment adjustment.\r\n   */\r\n  paymentAdjustmentReason?: fhir.Coding|undefined;\r\n  /**\r\n   * Estimated payment data.\r\n   */\r\n  paymentDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ClaimResponse.paymentDate\r\n   */\r\n  _paymentDate?:fhir.FhirElement;\r\n  /**\r\n   * Payable less any payment adjustment.\r\n   */\r\n  paymentAmount?: fhir.Quantity|undefined;\r\n  /**\r\n   * Payment identifier.\r\n   */\r\n  paymentRef?: fhir.Identifier|undefined;\r\n  /**\r\n   * Status of funds reservation (For provider, for Patient, None).\r\n   */\r\n  reserved?: fhir.Coding|undefined;\r\n  /**\r\n   * The form to be used for printing the content.\r\n   */\r\n  form?: fhir.Coding|undefined;\r\n  /**\r\n   * Note text.\r\n   */\r\n  note?: (fhir.ClaimResponseNote|null)[]|undefined;\r\n  /**\r\n   * Health care programs and insurers are significant payors of health service costs.\r\n   */\r\n  coverage?: (fhir.ClaimResponseCoverage|null)[]|undefined;\r\n}\r\n"]}