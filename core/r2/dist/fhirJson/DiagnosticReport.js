// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticReport
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlhZ25vc3RpY1JlcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL0RpYWdub3N0aWNSZXBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsa0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBEaWFnbm9zdGljUmVwb3J0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogTWFueSBkaWFnbm9zdGljIHNlcnZpY2VzIGluY2x1ZGUgaW1hZ2VzIGluIHRoZSByZXBvcnQgYXMgcGFydCBvZiB0aGVpciBzZXJ2aWNlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEaWFnbm9zdGljUmVwb3J0SW1hZ2UgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRoZSBwcm92aWRlciBvZiB0aGUgcmVwb3J0IHNob3VsZCBtYWtlIGEgY29tbWVudCBhYm91dCBlYWNoIGltYWdlIGluY2x1ZGVkIGluIHRoZSByZXBvcnQuXHJcbiAgICovXHJcbiAgY29tbWVudD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERpYWdub3N0aWNSZXBvcnQuaW1hZ2UuY29tbWVudFxyXG4gICAqL1xyXG4gIF9jb21tZW50PzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZSB0byB0aGUgaW1hZ2Ugc291cmNlLlxyXG4gICAqL1xyXG4gIGxpbms6IGZoaXIuUmVmZXJlbmNlfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZmluZGluZ3MgYW5kIGludGVycHJldGF0aW9uIG9mIGRpYWdub3N0aWMgIHRlc3RzIHBlcmZvcm1lZCBvbiBwYXRpZW50cywgZ3JvdXBzIG9mIHBhdGllbnRzLCBkZXZpY2VzLCBhbmQgbG9jYXRpb25zLCBhbmQvb3Igc3BlY2ltZW5zIGRlcml2ZWQgZnJvbSB0aGVzZS4gVGhlIHJlcG9ydCBpbmNsdWRlcyBjbGluaWNhbCBjb250ZXh0IHN1Y2ggYXMgcmVxdWVzdGluZyBhbmQgcHJvdmlkZXIgaW5mb3JtYXRpb24sIGFuZCBzb21lIG1peCBvZiBhdG9taWMgcmVzdWx0cywgaW1hZ2VzLCB0ZXh0dWFsIGFuZCBjb2RlZCBpbnRlcnByZXRhdGlvbnMsIGFuZCBmb3JtYXR0ZWQgcmVwcmVzZW50YXRpb24gb2YgZGlhZ25vc3RpYyByZXBvcnRzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEaWFnbm9zdGljUmVwb3J0IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7IFxyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJEaWFnbm9zdGljUmVwb3J0XCJ8bnVsbDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIGtub3cgd2hhdCBpZGVudGlmaWVyIHRvIHVzZSB3aGVuIG1ha2luZyBxdWVyaWVzIGFib3V0IHRoaXMgcmVwb3J0IGZyb20gdGhlIHNvdXJjZSBsYWJvcmF0b3J5LCBhbmQgZm9yIGxpbmtpbmcgdG8gdGhlIHJlcG9ydCBvdXRzaWRlIEZISVIgY29udGV4dC5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogKGZoaXIuSWRlbnRpZmllcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEaWFnbm9zdGljIHNlcnZpY2VzIHJvdXRpbmVseSBpc3N1ZSBwcm92aXNpb25hbC9pbmNvbXBsZXRlIHJlcG9ydHMsIGFuZCBzb21ldGltZXMgd2l0aGRyYXcgcHJldmlvdXNseSByZWxlYXNlZCByZXBvcnRzLlxyXG4gICAqL1xyXG4gIHN0YXR1czogJ2FwcGVuZGVkJ3wnY2FuY2VsbGVkJ3wnY29ycmVjdGVkJ3wnZW50ZXJlZC1pbi1lcnJvcid8J2ZpbmFsJ3wncGFydGlhbCd8J3JlZ2lzdGVyZWQnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERpYWdub3N0aWNSZXBvcnQuc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBIGNvZGUgdGhhdCBjbGFzc2lmaWVzIHRoZSBjbGluaWNhbCBkaXNjaXBsaW5lLCBkZXBhcnRtZW50IG9yIGRpYWdub3N0aWMgc2VydmljZSB0aGF0IGNyZWF0ZWQgdGhlIHJlcG9ydCAoZS5nLiBjYXJkaW9sb2d5LCBiaW9jaGVtaXN0cnksIGhlbWF0b2xvZ3ksIE1SSSkuIFRoaXMgaXMgdXNlZCBmb3Igc2VhcmNoaW5nLCBzb3J0aW5nIGFuZCBkaXNwbGF5IHB1cnBvc2VzLlxyXG4gICAqL1xyXG4gIGNhdGVnb3J5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZSBvciBuYW1lIHRoYXQgZGVzY3JpYmVzIHRoaXMgZGlhZ25vc3RpYyByZXBvcnQuXHJcbiAgICovXHJcbiAgY29kZTogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBTSEFMTCBrbm93IHRoZSBzdWJqZWN0IGNvbnRleHQuXHJcbiAgICovXHJcbiAgc3ViamVjdDogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgbGluayB0byB0aGUgaGVhbHRoIGNhcmUgZXZlbnQgKGVuY291bnRlcikgd2hlbiB0aGUgb3JkZXIgd2FzIG1hZGUuXHJcbiAgICovXHJcbiAgZW5jb3VudGVyPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8ga25vdyB3aGVyZSBpbiB0aGUgcGF0aWVudCBoaXN0b3J5IHRvIGZpbGUvcHJlc2VudCB0aGlzIHJlcG9ydC5cclxuICAgKi9cclxuICBlZmZlY3RpdmVEYXRlVGltZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERpYWdub3N0aWNSZXBvcnQuZWZmZWN0aXZlW3hdXHJcbiAgICovXHJcbiAgX2VmZmVjdGl2ZURhdGVUaW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8ga25vdyB3aGVyZSBpbiB0aGUgcGF0aWVudCBoaXN0b3J5IHRvIGZpbGUvcHJlc2VudCB0aGlzIHJlcG9ydC5cclxuICAgKi9cclxuICBlZmZlY3RpdmVQZXJpb2Q/OiBmaGlyLlBlcmlvZHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljaWFucyBuZWVkIHRvIGJlIGFibGUgdG8gY2hlY2sgdGhlIGRhdGUgdGhhdCB0aGUgcmVwb3J0IHdhcyByZWxlYXNlZC5cclxuICAgKi9cclxuICBpc3N1ZWQ6IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEaWFnbm9zdGljUmVwb3J0Lmlzc3VlZFxyXG4gICAqL1xyXG4gIF9pc3N1ZWQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogTmVlZCB0byBrbm93IHdob20gdG8gY29udGFjdCBpZiB0aGVyZSBhcmUgcXVlcmllcyBhYm91dCB0aGUgcmVzdWx0cy4gQWxzbyBtYXkgbmVlZCB0byB0cmFjayB0aGUgc291cmNlIG9mIHJlcG9ydHMgZm9yIHNlY29uZGFyeSBkYXRhIGFuYWx5c2lzLlxyXG4gICAqL1xyXG4gIHBlcmZvcm1lcjogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIGJlIGFibGUgdG8gdHJhY2sgY29tcGxldGlvbiBvZiByZXF1ZXN0cyBiYXNlZCBvbiByZXBvcnRzIGlzc3VlZCBhbmQgYWxzbyB0byByZXBvcnQgd2hhdCBkaWFnbm9zdGljIHRlc3RzIHdlcmUgcmVxdWVzdGVkIChub3QgYWx3YXlzIHRoZSBzYW1lIGFzIHdoYXQgaXMgZGVsaXZlcmVkKS5cclxuICAgKi9cclxuICByZXF1ZXN0PzogKGZoaXIuUmVmZXJlbmNlfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8gYmUgYWJsZSB0byByZXBvcnQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxlY3RlZCBzcGVjaW1lbnMgb24gd2hpY2ggdGhlIHJlcG9ydCBpcyBiYXNlZC5cclxuICAgKi9cclxuICBzcGVjaW1lbj86IChmaGlyLlJlZmVyZW5jZXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIHN1cHBvcnQgaW5kaXZpZHVhbCByZXN1bHRzLCBvciByZXBvcnQgZ3JvdXBzIG9mIHJlc3VsdHMsIHdoZXJlIHRoZSByZXN1bHQgZ3JvdXBpbmcgaXMgYXJiaXRyYXJ5LCBidXQgbWVhbmluZ2Z1bC4gVGhpcyBzdHJ1Y3R1cmUgaXMgcmVjdXJzaXZlIC0gb2JzZXJ2YXRpb25zIGNhbiBjb250YWluIG9ic2VydmF0aW9ucy5cclxuICAgKi9cclxuICByZXN1bHQ/OiAoZmhpci5SZWZlcmVuY2V8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT25lIG9yIG1vcmUgbGlua3MgdG8gZnVsbCBkZXRhaWxzIG9mIGFueSBpbWFnaW5nIHBlcmZvcm1lZCBkdXJpbmcgdGhlIGRpYWdub3N0aWMgaW52ZXN0aWdhdGlvbi4gVHlwaWNhbGx5LCB0aGlzIGlzIGltYWdpbmcgcGVyZm9ybWVkIGJ5IERJQ09NIGVuYWJsZWQgbW9kYWxpdGllcywgYnV0IHRoaXMgaXMgbm90IHJlcXVpcmVkLiBBIGZ1bGx5IGVuYWJsZWQgUEFDUyB2aWV3ZXIgY2FuIHVzZSB0aGlzIGluZm9ybWF0aW9uIHRvIHByb3ZpZGUgdmlld3Mgb2YgdGhlIHNvdXJjZSBpbWFnZXMuXHJcbiAgICovXHJcbiAgaW1hZ2luZ1N0dWR5PzogKGZoaXIuUmVmZXJlbmNlfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1hbnkgZGlhZ25vc3RpYyBzZXJ2aWNlcyBpbmNsdWRlIGltYWdlcyBpbiB0aGUgcmVwb3J0IGFzIHBhcnQgb2YgdGhlaXIgc2VydmljZS5cclxuICAgKi9cclxuICBpbWFnZT86IChmaGlyLkRpYWdub3N0aWNSZXBvcnRJbWFnZXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIGJlIGFibGUgdG8gcHJvdmlkZSBhIGNvbmNsdXNpb24gdGhhdCBpcyBub3QgbG9zdCBhbW9uZyB0aGUgYmFzaWMgcmVzdWx0IGRhdGEuXHJcbiAgICovXHJcbiAgY29uY2x1c2lvbj86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERpYWdub3N0aWNSZXBvcnQuY29uY2x1c2lvblxyXG4gICAqL1xyXG4gIF9jb25jbHVzaW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIENvZGVzIGZvciB0aGUgY29uY2x1c2lvbi5cclxuICAgKi9cclxuICBjb2RlZERpYWdub3Npcz86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBHaXZlcyBMYWJvcmF0b3J5IHRoZSBhYmlsaXR5IHRvIHByb3ZpZGUgaXRzIG93biBmdWxseSBmb3JtYXR0ZWQgcmVwb3J0IGZvciBjbGluaWNhbCBmaWRlbGl0eS5cclxuICAgKi9cclxuICBwcmVzZW50ZWRGb3JtPzogKGZoaXIuQXR0YWNobWVudHxudWxsKVtdfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=