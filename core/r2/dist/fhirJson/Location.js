// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9Mb2NhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IExvY2F0aW9uXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogRm9yIG1vYmlsZSBhcHBsaWNhdGlvbnMgYW5kIGF1dG9tYXRlZCByb3V0ZS1maW5kaW5nIGtub3dpbmcgdGhlIGV4YWN0IGxvY2F0aW9uIG9mIHRoZSBMb2NhdGlvbiBpcyByZXF1aXJlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25Qb3NpdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogTG9uZ2l0dWRlLiBUaGUgdmFsdWUgZG9tYWluIGFuZCB0aGUgaW50ZXJwcmV0YXRpb24gYXJlIHRoZSBzYW1lIGFzIGZvciB0aGUgdGV4dCBvZiB0aGUgbG9uZ2l0dWRlIGVsZW1lbnQgaW4gS01MIChzZWUgbm90ZXMgYmVsb3cpLlxyXG4gICAqL1xyXG4gIGxvbmdpdHVkZTogbnVtYmVyfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IExvY2F0aW9uLnBvc2l0aW9uLmxvbmdpdHVkZVxyXG4gICAqL1xyXG4gIF9sb25naXR1ZGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogTGF0aXR1ZGUuIFRoZSB2YWx1ZSBkb21haW4gYW5kIHRoZSBpbnRlcnByZXRhdGlvbiBhcmUgdGhlIHNhbWUgYXMgZm9yIHRoZSB0ZXh0IG9mIHRoZSBsYXRpdHVkZSBlbGVtZW50IGluIEtNTCAoc2VlIG5vdGVzIGJlbG93KS5cclxuICAgKi9cclxuICBsYXRpdHVkZTogbnVtYmVyfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IExvY2F0aW9uLnBvc2l0aW9uLmxhdGl0dWRlXHJcbiAgICovXHJcbiAgX2xhdGl0dWRlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEFsdGl0dWRlLiBUaGUgdmFsdWUgZG9tYWluIGFuZCB0aGUgaW50ZXJwcmV0YXRpb24gYXJlIHRoZSBzYW1lIGFzIGZvciB0aGUgdGV4dCBvZiB0aGUgYWx0aXR1ZGUgZWxlbWVudCBpbiBLTUwgKHNlZSBub3RlcyBiZWxvdykuXHJcbiAgICovXHJcbiAgYWx0aXR1ZGU/OiBudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBMb2NhdGlvbi5wb3NpdGlvbi5hbHRpdHVkZVxyXG4gICAqL1xyXG4gIF9hbHRpdHVkZT86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERldGFpbHMgYW5kIHBvc2l0aW9uIGluZm9ybWF0aW9uIGZvciBhIHBoeXNpY2FsIHBsYWNlIHdoZXJlIHNlcnZpY2VzIGFyZSBwcm92aWRlZCAgYW5kIHJlc291cmNlcyBhbmQgcGFydGljaXBhbnRzIG1heSBiZSBzdG9yZWQsIGZvdW5kLCBjb250YWluZWQgb3IgYWNjb21tb2RhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMb2NhdGlvbiBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2UgeyBcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiTG9jYXRpb25cInxudWxsO1xyXG4gIC8qKlxyXG4gICAqIE9yZ2FuaXphdGlvbiBsYWJlbCBsb2NhdGlvbnMgaW4gcmVnaXN0cmllcywgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHRob3NlLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiAoZmhpci5JZGVudGlmaWVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZSB8IHN1c3BlbmRlZCB8IGluYWN0aXZlLlxyXG4gICAqL1xyXG4gIHN0YXR1cz86ICdhY3RpdmUnfCdpbmFjdGl2ZSd8J3N1c3BlbmRlZCd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBMb2NhdGlvbi5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIE5hbWUgb2YgdGhlIGxvY2F0aW9uIGFzIHVzZWQgYnkgaHVtYW5zLiBEb2VzIG5vdCBuZWVkIHRvIGJlIHVuaXF1ZS5cclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTG9jYXRpb24ubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEh1bWFucyBuZWVkIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gdmVyaWZ5IGEgY29ycmVjdCBsb2NhdGlvbiBoYXMgYmVlbiBpZGVudGlmaWVkLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTG9jYXRpb24uZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBfZGVzY3JpcHRpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiB1c2luZyBhIExvY2F0aW9uIHJlc291cmNlIGZvciBzY2hlZHVsaW5nIG9yIG9yZGVycywgd2UgbmVlZCB0byBiZSBhYmxlIHRvIHJlZmVyIHRvIGEgY2xhc3Mgb2YgTG9jYXRpb25zIGluc3RlYWQgb2YgYSBzcGVjaWZpYyBMb2NhdGlvbi5cclxuICAgKi9cclxuICBtb2RlPzogJ2luc3RhbmNlJ3wna2luZCd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBMb2NhdGlvbi5tb2RlXHJcbiAgICovXHJcbiAgX21vZGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSB0eXBlIG9mIGZ1bmN0aW9uIHBlcmZvcm1lZCBhdCB0aGUgbG9jYXRpb24uXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29udGFjdCBkZXRhaWxzIG9mIGNvbW11bmljYXRpb24gZGV2aWNlcyBhdmFpbGFibGUgYXQgdGhlIGxvY2F0aW9uLiBUaGlzIGNhbiBpbmNsdWRlIHBob25lIG51bWJlcnMsIGZheCBudW1iZXJzLCBtb2JpbGUgbnVtYmVycywgZW1haWwgYWRkcmVzc2VzIGFuZCB3ZWIgc2l0ZXMuXHJcbiAgICovXHJcbiAgdGVsZWNvbT86IChmaGlyLkNvbnRhY3RQb2ludHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBsb2NhdGlvbnMgY2FuIGJlIHZpc2l0ZWQsIHdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB0aGVpciBhZGRyZXNzLlxyXG4gICAqL1xyXG4gIGFkZHJlc3M/OiBmaGlyLkFkZHJlc3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBwdXJwb3NlcyBvZiBzaG93aW5nIHJlbGV2YW50IGxvY2F0aW9ucyBpbiBxdWVyaWVzLCB3ZSBuZWVkIHRvIGNhdGVnb3JpemUgbG9jYXRpb25zLlxyXG4gICAqL1xyXG4gIHBoeXNpY2FsVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgbW9iaWxlIGFwcGxpY2F0aW9ucyBhbmQgYXV0b21hdGVkIHJvdXRlLWZpbmRpbmcga25vd2luZyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgdGhlIExvY2F0aW9uIGlzIHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIHBvc2l0aW9uPzogZmhpci5Mb2NhdGlvblBvc2l0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIGtub3cgd2hvIG1hbmFnZXMgdGhlIGxvY2F0aW9uLlxyXG4gICAqL1xyXG4gIG1hbmFnaW5nT3JnYW5pemF0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBwdXJwb3NlcyBvZiBsb2NhdGlvbiwgZGlzcGxheSBhbmQgaWRlbnRpZmljYXRpb24sIGtub3dpbmcgd2hpY2ggbG9jYXRpb25zIGFyZSBsb2NhdGVkIHdpdGhpbiBvdGhlciBsb2NhdGlvbnMgaXMgaW1wb3J0YW50LlxyXG4gICAqL1xyXG4gIHBhcnRPZj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=