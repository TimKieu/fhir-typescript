// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Patient
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aWVudC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL1BhdGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBQYXRpZW50XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogTmVlZCB0byB0cmFjayBwZW9wbGUgeW91IGNhbiBjb250YWN0IGFib3V0IHRoZSBwYXRpZW50LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYXRpZW50Q29udGFjdCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogVXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggY29udGFjdCBwZXJzb24gaXMgdGhlIG1vc3QgcmVsZXZhbnQgdG8gYXBwcm9hY2gsIGRlcGVuZGluZyBvbiBjaXJjdW1zdGFuY2VzLlxyXG4gICAqL1xyXG4gIHJlbGF0aW9uc2hpcD86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb250YWN0IHBlcnNvbnMgbmVlZCB0byBiZSBpZGVudGlmaWVkIGJ5IG5hbWUsIGJ1dCBpdCBpcyB1bmNvbW1vbiB0byBuZWVkIGRldGFpbHMgYWJvdXQgbXVsdGlwbGUgb3RoZXIgbmFtZXMgZm9yIHRoYXQgY29udGFjdCBwZXJzb24uXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuSHVtYW5OYW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQZW9wbGUgaGF2ZSAocHJpbWFyeSkgd2F5cyB0byBjb250YWN0IHRoZW0gaW4gc29tZSB3YXkgc3VjaCBhcyBwaG9uZSwgZW1haWwuXHJcbiAgICovXHJcbiAgdGVsZWNvbT86IChmaGlyLkNvbnRhY3RQb2ludHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIGtlZXAgdHJhY2sgd2hlcmUgdGhlIGNvbnRhY3QgcGVyc29uIGNhbiBiZSBjb250YWN0ZWQgcGVyIHBvc3RhbCBtYWlsIG9yIHZpc2l0ZWQuXHJcbiAgICovXHJcbiAgYWRkcmVzcz86IGZoaXIuQWRkcmVzc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTmVlZGVkIHRvIGFkZHJlc3MgdGhlIHBlcnNvbiBjb3JyZWN0bHkuXHJcbiAgICovXHJcbiAgZ2VuZGVyPzogJ2ZlbWFsZSd8J21hbGUnfCdvdGhlcid8J3Vua25vd24nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUGF0aWVudC5jb250YWN0LmdlbmRlclxyXG4gICAqL1xyXG4gIF9nZW5kZXI/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIGd1YXJkaWFucyBvciBidXNpbmVzcyByZWxhdGVkIGNvbnRhY3RzLCB0aGUgb3JnYW5pemF0aW9uIGlzIHJlbGV2YW50LlxyXG4gICAqL1xyXG4gIG9yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcGVyaW9kIGR1cmluZyB3aGljaCB0aGlzIGNvbnRhY3QgcGVyc29uIG9yIG9yZ2FuaXphdGlvbiBpcyB2YWxpZCB0byBiZSBjb250YWN0ZWQgcmVsYXRpbmcgdG8gdGhpcyBwYXRpZW50LlxyXG4gICAqL1xyXG4gIHBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hbnkgY2xpbmljYWwgc3lzdGVtcyBhcmUgZXh0ZW5kZWQgdG8gY2FyZSBmb3IgYW5pbWFsIHBhdGllbnRzIGFzIHdlbGwgYXMgaHVtYW4uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBhdGllbnRBbmltYWwgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8ga25vdyB3aGF0IGtpbmQgb2YgYW5pbWFsLlxyXG4gICAqL1xyXG4gIHNwZWNpZXM6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogTWF5IG5lZWQgdG8ga25vdyB0aGUgc3BlY2lmaWMga2luZCB3aXRoaW4gdGhlIHNwZWNpZXMuXHJcbiAgICovXHJcbiAgYnJlZWQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogR2VuZGVyIHN0YXR1cyBjYW4gYWZmZWN0IGhvdXNpbmcgYW5kIGFuaW1hbCBiZWhhdmlvci5cclxuICAgKi9cclxuICBnZW5kZXJTdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJZiBhIHBhdGllbnQgZG9lcyBub3Qgc3BlYWsgdGhlIGxvY2FsIGxhbmd1YWdlLCBpbnRlcnByZXRlcnMgbWF5IGJlIHJlcXVpcmVkLCBzbyBsYW5ndWFnZXMgc3Bva2VuIGFuZCBwcm9maWNpZW5jeSBpcyBhbiBpbXBvcnRhbnQgdGhpbmdzIHRvIGtlZXAgdHJhY2sgb2YgYm90aCBmb3IgcGF0aWVudCBhbmQgb3RoZXIgcGVyc29ucyBvZiBpbnRlcmVzdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF0aWVudENvbW11bmljYXRpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIE1vc3Qgc3lzdGVtcyBpbiBtdWx0aWxpbmd1YWwgY291bnRyaWVzIHdpbGwgd2FudCB0byBjb252ZXkgbGFuZ3VhZ2UuIE5vdCBhbGwgc3lzdGVtcyBhY3R1YWxseSBuZWVkIHRoZSByZWdpb25hbCBkaWFsZWN0LlxyXG4gICAqL1xyXG4gIGxhbmd1YWdlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFBlb3BsZSB0aGF0IG1hc3RlciBtdWx0aXBsZSBsYW5ndWFnZXMgdXAgdG8gY2VydGFpbiBsZXZlbCBtYXkgcHJlZmVyIG9uZSBvciBtb3JlLCBpLmUuIGZlZWwgbW9yZSBjb25maWRlbnQgaW4gY29tbXVuaWNhdGluZyBpbiBhIHBhcnRpY3VsYXIgbGFuZ3VhZ2UgbWFraW5nIG90aGVyIGxhbmd1YWdlcyBzb3J0IG9mIGEgZmFsbCBiYWNrIG1ldGhvZC5cclxuICAgKi9cclxuICBwcmVmZXJyZWQ/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUGF0aWVudC5jb21tdW5pY2F0aW9uLnByZWZlcnJlZFxyXG4gICAqL1xyXG4gIF9wcmVmZXJyZWQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGVyZSBhcmUgbXVsdGlwbGUgdXNlY2FzZXM6ICAgKiBEdXBsaWNhdGUgcGF0aWVudCByZWNvcmRzIGR1ZSB0byB0aGUgY2xlcmljYWwgZXJyb3JzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlmZmljdWx0aWVzIG9mIGlkZW50aWZ5aW5nIGh1bWFucyBjb25zaXN0ZW50bHksIGFuZCAqIERpc3RyaWJ1dGlvbiBvZiBwYXRpZW50IGluZm9ybWF0aW9uIGFjcm9zcyBtdWx0aXBsZSBzZXJ2ZXJzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYXRpZW50TGluayBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogVGhlIG90aGVyIHBhdGllbnQgcmVzb3VyY2UgdGhhdCB0aGUgbGluayByZWZlcnMgdG8uXHJcbiAgICovXHJcbiAgb3RoZXI6IGZoaXIuUmVmZXJlbmNlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgbGluayBiZXR3ZWVuIHRoaXMgcGF0aWVudCByZXNvdXJjZSBhbmQgYW5vdGhlciBwYXRpZW50IHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHR5cGU6ICdyZWZlcid8J3JlcGxhY2UnfCdzZWVhbHNvJ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQYXRpZW50LmxpbmsudHlwZVxyXG4gICAqL1xyXG4gIF90eXBlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogRGVtb2dyYXBoaWNzIGFuZCBvdGhlciBhZG1pbmlzdHJhdGl2ZSBpbmZvcm1hdGlvbiBhYm91dCBhbiBpbmRpdmlkdWFsIG9yIGFuaW1hbCByZWNlaXZpbmcgY2FyZSBvciBvdGhlciBoZWFsdGgtcmVsYXRlZCBzZXJ2aWNlcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF0aWVudCBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2UgeyBcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiUGF0aWVudFwifG51bGw7XHJcbiAgLyoqXHJcbiAgICogUGF0aWVudHMgYXJlIGFsbW9zdCBhbHdheXMgYXNzaWduZWQgc3BlY2lmaWMgbnVtZXJpY2FsIGlkZW50aWZpZXJzLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiAoZmhpci5JZGVudGlmaWVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8gYmUgYWJsZSB0byBtYXJrIGEgcGF0aWVudCByZWNvcmQgYXMgbm90IHRvIGJlIHVzZWQgYmVjYXVzZSBpdCB3YXMgY3JlYXRlZCBpbiBlcnJvci5cclxuICAgKi9cclxuICBhY3RpdmU/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUGF0aWVudC5hY3RpdmVcclxuICAgKi9cclxuICBfYWN0aXZlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIE5lZWQgdG8gYmUgYWJsZSB0byB0cmFjayB0aGUgcGF0aWVudCBieSBtdWx0aXBsZSBuYW1lcy4gRXhhbXBsZXMgYXJlIHlvdXIgb2ZmaWNpYWwgbmFtZSBhbmQgYSBwYXJ0bmVyIG5hbWUuXHJcbiAgICovXHJcbiAgbmFtZT86IChmaGlyLkh1bWFuTmFtZXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQZW9wbGUgaGF2ZSAocHJpbWFyeSkgd2F5cyB0byBjb250YWN0IHRoZW0gaW4gc29tZSB3YXkgc3VjaCBhcyBwaG9uZSwgZW1haWwuXHJcbiAgICovXHJcbiAgdGVsZWNvbT86IChmaGlyLkNvbnRhY3RQb2ludHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkZWQgZm9yIGlkZW50aWZpY2F0aW9uIG9mIHRoZSBpbmRpdmlkdWFsLCBpbiBjb21iaW5hdGlvbiB3aXRoIChhdCBsZWFzdCkgbmFtZSBhbmQgYmlydGggZGF0ZS4gR2VuZGVyIG9mIGluZGl2aWR1YWwgZHJpdmVzIG1hbnkgY2xpbmljYWwgcHJvY2Vzc2VzLlxyXG4gICAqL1xyXG4gIGdlbmRlcj86ICdmZW1hbGUnfCdtYWxlJ3wnb3RoZXInfCd1bmtub3duJ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFBhdGllbnQuZ2VuZGVyXHJcbiAgICovXHJcbiAgX2dlbmRlcj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBZ2Ugb2YgdGhlIGluZGl2aWR1YWwgZHJpdmVzIG1hbnkgY2xpbmljYWwgcHJvY2Vzc2VzLlxyXG4gICAqL1xyXG4gIGJpcnRoRGF0ZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFBhdGllbnQuYmlydGhEYXRlXHJcbiAgICovXHJcbiAgX2JpcnRoRGF0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgZmFjdCB0aGF0IGEgcGF0aWVudCBpcyBkZWNlYXNlZCBpbmZsdWVuY2VzIHRoZSBjbGluaWNhbCBwcm9jZXNzLiBBbHNvLCBpbiBodW1hbiBjb21tdW5pY2F0aW9uIGFuZCByZWxhdGlvbiBtYW5hZ2VtZW50IGl0IGlzIG5lY2Vzc2FyeSB0byBrbm93IHdoZXRoZXIgdGhlIHBlcnNvbiBpcyBhbGl2ZS5cclxuICAgKi9cclxuICBkZWNlYXNlZEJvb2xlYW4/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUGF0aWVudC5kZWNlYXNlZFt4XVxyXG4gICAqL1xyXG4gIF9kZWNlYXNlZEJvb2xlYW4/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZhY3QgdGhhdCBhIHBhdGllbnQgaXMgZGVjZWFzZWQgaW5mbHVlbmNlcyB0aGUgY2xpbmljYWwgcHJvY2Vzcy4gQWxzbywgaW4gaHVtYW4gY29tbXVuaWNhdGlvbiBhbmQgcmVsYXRpb24gbWFuYWdlbWVudCBpdCBpcyBuZWNlc3NhcnkgdG8ga25vdyB3aGV0aGVyIHRoZSBwZXJzb24gaXMgYWxpdmUuXHJcbiAgICovXHJcbiAgZGVjZWFzZWREYXRlVGltZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFBhdGllbnQuZGVjZWFzZWRbeF1cclxuICAgKi9cclxuICBfZGVjZWFzZWREYXRlVGltZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBNYXkgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHBhdGllbnQgYWRkcmVzc2VzIGZvciBjb250YWN0aW5nLCBiaWxsaW5nIG9yIHJlcG9ydGluZyByZXF1aXJlbWVudHMgYW5kIGFsc28gdG8gaGVscCB3aXRoIGlkZW50aWZpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGFkZHJlc3M/OiAoZmhpci5BZGRyZXNzfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vc3QsIGlmIG5vdCBhbGwgc3lzdGVtcyBjYXB0dXJlIGl0LlxyXG4gICAqL1xyXG4gIG1hcml0YWxTdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIGRpc2FtYmlndWF0aW9uIG9mIG11bHRpcGxlLWJpcnRoIGNoaWxkcmVuLCBlc3BlY2lhbGx5IHJlbGV2YW50IHdoZXJlIHRoZSBjYXJlIHByb3ZpZGVyIGRvZXNuJ3QgbWVldCB0aGUgcGF0aWVudCwgc3VjaCBhcyBsYWJzLlxyXG4gICAqL1xyXG4gIG11bHRpcGxlQmlydGhCb29sZWFuPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFBhdGllbnQubXVsdGlwbGVCaXJ0aFt4XVxyXG4gICAqL1xyXG4gIF9tdWx0aXBsZUJpcnRoQm9vbGVhbj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBGb3IgZGlzYW1iaWd1YXRpb24gb2YgbXVsdGlwbGUtYmlydGggY2hpbGRyZW4sIGVzcGVjaWFsbHkgcmVsZXZhbnQgd2hlcmUgdGhlIGNhcmUgcHJvdmlkZXIgZG9lc24ndCBtZWV0IHRoZSBwYXRpZW50LCBzdWNoIGFzIGxhYnMuXHJcbiAgICovXHJcbiAgbXVsdGlwbGVCaXJ0aEludGVnZXI/OiBudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQYXRpZW50Lm11bHRpcGxlQmlydGhbeF1cclxuICAgKi9cclxuICBfbXVsdGlwbGVCaXJ0aEludGVnZXI/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogTWFueSBFSFIgc3lzdGVtcyBoYXZlIHRoZSBjYXBhYmlsaXR5IHRvIGNhcHR1cmUgYW4gaW1hZ2Ugb2YgdGhlIHBhdGllbnQuIEZpdHMgd2l0aCBuZXdlciBzb2NpYWwgbWVkaWEgdXNhZ2UgdG9vLlxyXG4gICAqL1xyXG4gIHBob3RvPzogKGZoaXIuQXR0YWNobWVudHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIHRyYWNrIHBlb3BsZSB5b3UgY2FuIGNvbnRhY3QgYWJvdXQgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgY29udGFjdD86IChmaGlyLlBhdGllbnRDb250YWN0fG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1hbnkgY2xpbmljYWwgc3lzdGVtcyBhcmUgZXh0ZW5kZWQgdG8gY2FyZSBmb3IgYW5pbWFsIHBhdGllbnRzIGFzIHdlbGwgYXMgaHVtYW4uXHJcbiAgICovXHJcbiAgYW5pbWFsPzogZmhpci5QYXRpZW50QW5pbWFsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBhIHBhdGllbnQgZG9lcyBub3Qgc3BlYWsgdGhlIGxvY2FsIGxhbmd1YWdlLCBpbnRlcnByZXRlcnMgbWF5IGJlIHJlcXVpcmVkLCBzbyBsYW5ndWFnZXMgc3Bva2VuIGFuZCBwcm9maWNpZW5jeSBpcyBhbiBpbXBvcnRhbnQgdGhpbmdzIHRvIGtlZXAgdHJhY2sgb2YgYm90aCBmb3IgcGF0aWVudCBhbmQgb3RoZXIgcGVyc29ucyBvZiBpbnRlcmVzdC5cclxuICAgKi9cclxuICBjb21tdW5pY2F0aW9uPzogKGZoaXIuUGF0aWVudENvbW11bmljYXRpb258bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGF0aWVudCdzIG5vbWluYXRlZCBjYXJlIHByb3ZpZGVyLlxyXG4gICAqL1xyXG4gIGNhcmVQcm92aWRlcj86IChmaGlyLlJlZmVyZW5jZXxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZWVkIHRvIGtub3cgd2hvIHJlY29nbml6ZXMgdGhpcyBwYXRpZW50IHJlY29yZCwgbWFuYWdlcyBhbmQgdXBkYXRlcyBpdC5cclxuICAgKi9cclxuICBtYW5hZ2luZ09yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGVyZSBhcmUgbXVsdGlwbGUgdXNlY2FzZXM6ICAgKiBEdXBsaWNhdGUgcGF0aWVudCByZWNvcmRzIGR1ZSB0byB0aGUgY2xlcmljYWwgZXJyb3JzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlmZmljdWx0aWVzIG9mIGlkZW50aWZ5aW5nIGh1bWFucyBjb25zaXN0ZW50bHksIGFuZCAqIERpc3RyaWJ1dGlvbiBvZiBwYXRpZW50IGluZm9ybWF0aW9uIGFjcm9zcyBtdWx0aXBsZSBzZXJ2ZXJzLlxyXG4gICAqL1xyXG4gIGxpbms/OiAoZmhpci5QYXRpZW50TGlua3xudWxsKVtdfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=