// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/metric-calibration-state|1.0.2
/**
 * Describes the state of a metric calibration.
 */
export const MetricCalibrationStateCodings = {
    /**
     * calibrated: The metric has been calibrated.
     */
    Calibrated: {
        display: "Calibrated",
        code: "calibrated",
        system: "http://hl7.org/fhir/metric-calibration-state",
    },
    /**
     * calibration-required: The metric needs to be calibrated.
     */
    CalibrationRequired: {
        display: "Calibration Required",
        code: "calibration-required",
        system: "http://hl7.org/fhir/metric-calibration-state",
    },
    /**
     * not-calibrated: The metric has not been calibrated.
     */
    NotCalibrated: {
        display: "Not Calibrated",
        code: "not-calibrated",
        system: "http://hl7.org/fhir/metric-calibration-state",
    },
    /**
     * unspecified: The state of calibration of this metric is unspecified.
     */
    Unspecified: {
        display: "Unspecified",
        code: "unspecified",
        system: "http://hl7.org/fhir/metric-calibration-state",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0cmljQ2FsaWJyYXRpb25TdGF0ZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01ldHJpY0NhbGlicmF0aW9uU3RhdGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQTBCN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21ldHJpYy1jYWxpYnJhdGlvbi1zdGF0ZXwxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIERlc2NyaWJlcyB0aGUgc3RhdGUgb2YgYSBtZXRyaWMgY2FsaWJyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZXRyaWNDYWxpYnJhdGlvblN0YXRlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYWxpYnJhdGVkOiBUaGUgbWV0cmljIGhhcyBiZWVuIGNhbGlicmF0ZWQuXHJcbiAgICovXHJcbiAgQ2FsaWJyYXRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjYWxpYnJhdGlvbi1yZXF1aXJlZDogVGhlIG1ldHJpYyBuZWVkcyB0byBiZSBjYWxpYnJhdGVkLlxyXG4gICAqL1xyXG4gIENhbGlicmF0aW9uUmVxdWlyZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90LWNhbGlicmF0ZWQ6IFRoZSBtZXRyaWMgaGFzIG5vdCBiZWVuIGNhbGlicmF0ZWQuXHJcbiAgICovXHJcbiAgTm90Q2FsaWJyYXRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bnNwZWNpZmllZDogVGhlIHN0YXRlIG9mIGNhbGlicmF0aW9uIG9mIHRoaXMgbWV0cmljIGlzIHVuc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIFVuc3BlY2lmaWVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSBzdGF0ZSBvZiBhIG1ldHJpYyBjYWxpYnJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZXRyaWNDYWxpYnJhdGlvblN0YXRlQ29kaW5nczpNZXRyaWNDYWxpYnJhdGlvblN0YXRlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYWxpYnJhdGVkOiBUaGUgbWV0cmljIGhhcyBiZWVuIGNhbGlicmF0ZWQuXHJcbiAgICovXHJcbiAgQ2FsaWJyYXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJDYWxpYnJhdGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbGlicmF0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jYWxpYnJhdGlvbi1zdGF0ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY2FsaWJyYXRpb24tcmVxdWlyZWQ6IFRoZSBtZXRyaWMgbmVlZHMgdG8gYmUgY2FsaWJyYXRlZC5cclxuICAgKi9cclxuICBDYWxpYnJhdGlvblJlcXVpcmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhbGlicmF0aW9uIFJlcXVpcmVkXCIsXHJcbiAgICBjb2RlOiBcImNhbGlicmF0aW9uLXJlcXVpcmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY2FsaWJyYXRpb24tc3RhdGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdC1jYWxpYnJhdGVkOiBUaGUgbWV0cmljIGhhcyBub3QgYmVlbiBjYWxpYnJhdGVkLlxyXG4gICAqL1xyXG4gIE5vdENhbGlicmF0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTm90IENhbGlicmF0ZWRcIixcclxuICAgIGNvZGU6IFwibm90LWNhbGlicmF0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jYWxpYnJhdGlvbi1zdGF0ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5zcGVjaWZpZWQ6IFRoZSBzdGF0ZSBvZiBjYWxpYnJhdGlvbiBvZiB0aGlzIG1ldHJpYyBpcyB1bnNwZWNpZmllZC5cclxuICAgKi9cclxuICBVbnNwZWNpZmllZDoge1xyXG4gICAgZGlzcGxheTogXCJVbnNwZWNpZmllZFwiLFxyXG4gICAgY29kZTogXCJ1bnNwZWNpZmllZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNhbGlicmF0aW9uLXN0YXRlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19