// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/care-plan-activity-status|1.0.2
/**
 * Indicates where the activity is at in its overall life cycle.
 */
export const CarePlanActivityStatusCodings = {
    /**
     * cancelled: The activities have been ended prior to completion (perhaps even before they were started).
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    },
    /**
     * completed: The activities have been completed (more or less) as planned.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    },
    /**
     * in-progress: Activity has been started but is not yet complete.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    },
    /**
     * not-started: Activity is planned but no action has yet been taken.
     */
    NotStarted: {
        display: "Not Started",
        code: "not-started",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    },
    /**
     * on-hold: Activity was started but has temporarily ceased with an expectation of resumption at a future time.
     */
    OnHold: {
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    },
    /**
     * scheduled: Appointment or other booking has occurred but activity has not yet begun.
     */
    Scheduled: {
        display: "Scheduled",
        code: "scheduled",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDhFQUE4RTtBQWtDOUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXN8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgd2hlcmUgdGhlIGFjdGl2aXR5IGlzIGF0IGluIGl0cyBvdmVyYWxsIGxpZmUgY3ljbGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDYXJlUGxhbkFjdGl2aXR5U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBhY3Rpdml0aWVzIGhhdmUgYmVlbiBlbmRlZCBwcmlvciB0byBjb21wbGV0aW9uIChwZXJoYXBzIGV2ZW4gYmVmb3JlIHRoZXkgd2VyZSBzdGFydGVkKS5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgYWN0aXZpdGllcyBoYXZlIGJlZW4gY29tcGxldGVkIChtb3JlIG9yIGxlc3MpIGFzIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBBY3Rpdml0eSBoYXMgYmVlbiBzdGFydGVkIGJ1dCBpcyBub3QgeWV0IGNvbXBsZXRlLlxyXG4gICAqL1xyXG4gIEluUHJvZ3Jlc3M6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90LXN0YXJ0ZWQ6IEFjdGl2aXR5IGlzIHBsYW5uZWQgYnV0IG5vIGFjdGlvbiBoYXMgeWV0IGJlZW4gdGFrZW4uXHJcbiAgICovXHJcbiAgTm90U3RhcnRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbi1ob2xkOiBBY3Rpdml0eSB3YXMgc3RhcnRlZCBidXQgaGFzIHRlbXBvcmFyaWx5IGNlYXNlZCB3aXRoIGFuIGV4cGVjdGF0aW9uIG9mIHJlc3VtcHRpb24gYXQgYSBmdXR1cmUgdGltZS5cclxuICAgKi9cclxuICBPbkhvbGQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc2NoZWR1bGVkOiBBcHBvaW50bWVudCBvciBvdGhlciBib29raW5nIGhhcyBvY2N1cnJlZCBidXQgYWN0aXZpdHkgaGFzIG5vdCB5ZXQgYmVndW4uXHJcbiAgICovXHJcbiAgU2NoZWR1bGVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHdoZXJlIHRoZSBhY3Rpdml0eSBpcyBhdCBpbiBpdHMgb3ZlcmFsbCBsaWZlIGN5Y2xlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2RpbmdzOkNhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIGFjdGl2aXRpZXMgaGF2ZSBiZWVuIGVuZGVkIHByaW9yIHRvIGNvbXBsZXRpb24gKHBlcmhhcHMgZXZlbiBiZWZvcmUgdGhleSB3ZXJlIHN0YXJ0ZWQpLlxyXG4gICAqL1xyXG4gIENhbmNlbGxlZDoge1xyXG4gICAgZGlzcGxheTogXCJDYW5jZWxsZWRcIixcclxuICAgIGNvZGU6IFwiY2FuY2VsbGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXJlLXBsYW4tYWN0aXZpdHktc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSBhY3Rpdml0aWVzIGhhdmUgYmVlbiBjb21wbGV0ZWQgKG1vcmUgb3IgbGVzcykgYXMgcGxhbm5lZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29tcGxldGVkXCIsXHJcbiAgICBjb2RlOiBcImNvbXBsZXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FyZS1wbGFuLWFjdGl2aXR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW4tcHJvZ3Jlc3M6IEFjdGl2aXR5IGhhcyBiZWVuIHN0YXJ0ZWQgYnV0IGlzIG5vdCB5ZXQgY29tcGxldGUuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FyZS1wbGFuLWFjdGl2aXR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90LXN0YXJ0ZWQ6IEFjdGl2aXR5IGlzIHBsYW5uZWQgYnV0IG5vIGFjdGlvbiBoYXMgeWV0IGJlZW4gdGFrZW4uXHJcbiAgICovXHJcbiAgTm90U3RhcnRlZDoge1xyXG4gICAgZGlzcGxheTogXCJOb3QgU3RhcnRlZFwiLFxyXG4gICAgY29kZTogXCJub3Qtc3RhcnRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FyZS1wbGFuLWFjdGl2aXR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogQWN0aXZpdHkgd2FzIHN0YXJ0ZWQgYnV0IGhhcyB0ZW1wb3JhcmlseSBjZWFzZWQgd2l0aCBhbiBleHBlY3RhdGlvbiBvZiByZXN1bXB0aW9uIGF0IGEgZnV0dXJlIHRpbWUuXHJcbiAgICovXHJcbiAgT25Ib2xkOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9uIEhvbGRcIixcclxuICAgIGNvZGU6IFwib24taG9sZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FyZS1wbGFuLWFjdGl2aXR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc2NoZWR1bGVkOiBBcHBvaW50bWVudCBvciBvdGhlciBib29raW5nIGhhcyBvY2N1cnJlZCBidXQgYWN0aXZpdHkgaGFzIG5vdCB5ZXQgYmVndW4uXHJcbiAgICovXHJcbiAgU2NoZWR1bGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNjaGVkdWxlZFwiLFxyXG4gICAgY29kZTogXCJzY2hlZHVsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=