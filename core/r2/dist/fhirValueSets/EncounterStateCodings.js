// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-state|1.0.2
/**
 * Current state of the encounter
 */
export const EncounterStateCodings = {
    /**
     * arrived: The Patient is present for the encounter, however is not currently meeting with a practitioner.
     */
    Arrived: {
        display: "Arrived",
        code: "arrived",
        system: "http://hl7.org/fhir/encounter-state",
    },
    /**
     * cancelled: The Encounter has ended before it has begun.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/encounter-state",
    },
    /**
     * finished: The Encounter has ended.
     */
    Finished: {
        display: "Finished",
        code: "finished",
        system: "http://hl7.org/fhir/encounter-state",
    },
    /**
     * in-progress: The Encounter has begun and the patient is present / the practitioner and the patient are meeting.
     */
    InProgress: {
        display: "in Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/encounter-state",
    },
    /**
     * onleave: The Encounter has begun, but the patient is temporarily on leave.
     */
    OnLeave: {
        display: "On Leave",
        code: "onleave",
        system: "http://hl7.org/fhir/encounter-state",
    },
    /**
     * planned: The Encounter has not yet started.
     */
    Planned: {
        display: "Planned",
        code: "planned",
        system: "http://hl7.org/fhir/encounter-state",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyU3RhdGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJTdGF0ZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBa0NwRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2VuY291bnRlci1zdGF0ZXwxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEN1cnJlbnQgc3RhdGUgb2YgdGhlIGVuY291bnRlclxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW5jb3VudGVyU3RhdGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFycml2ZWQ6IFRoZSBQYXRpZW50IGlzIHByZXNlbnQgZm9yIHRoZSBlbmNvdW50ZXIsIGhvd2V2ZXIgaXMgbm90IGN1cnJlbnRseSBtZWV0aW5nIHdpdGggYSBwcmFjdGl0aW9uZXIuXHJcbiAgICovXHJcbiAgQXJyaXZlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIGVuZGVkIGJlZm9yZSBpdCBoYXMgYmVndW4uXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZpbmlzaGVkOiBUaGUgRW5jb3VudGVyIGhhcyBlbmRlZC5cclxuICAgKi9cclxuICBGaW5pc2hlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIEVuY291bnRlciBoYXMgYmVndW4gYW5kIHRoZSBwYXRpZW50IGlzIHByZXNlbnQgLyB0aGUgcHJhY3RpdGlvbmVyIGFuZCB0aGUgcGF0aWVudCBhcmUgbWVldGluZy5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9ubGVhdmU6IFRoZSBFbmNvdW50ZXIgaGFzIGJlZ3VuLCBidXQgdGhlIHBhdGllbnQgaXMgdGVtcG9yYXJpbHkgb24gbGVhdmUuXHJcbiAgICovXHJcbiAgT25MZWF2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwbGFubmVkOiBUaGUgRW5jb3VudGVyIGhhcyBub3QgeWV0IHN0YXJ0ZWQuXHJcbiAgICovXHJcbiAgUGxhbm5lZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEN1cnJlbnQgc3RhdGUgb2YgdGhlIGVuY291bnRlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVuY291bnRlclN0YXRlQ29kaW5nczpFbmNvdW50ZXJTdGF0ZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXJyaXZlZDogVGhlIFBhdGllbnQgaXMgcHJlc2VudCBmb3IgdGhlIGVuY291bnRlciwgaG93ZXZlciBpcyBub3QgY3VycmVudGx5IG1lZXRpbmcgd2l0aCBhIHByYWN0aXRpb25lci5cclxuICAgKi9cclxuICBBcnJpdmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFycml2ZWRcIixcclxuICAgIGNvZGU6IFwiYXJyaXZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXRlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIGVuZGVkIGJlZm9yZSBpdCBoYXMgYmVndW4uXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhbmNlbGxlZFwiLFxyXG4gICAgY29kZTogXCJjYW5jZWxsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZmluaXNoZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIGVuZGVkLlxyXG4gICAqL1xyXG4gIEZpbmlzaGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkZpbmlzaGVkXCIsXHJcbiAgICBjb2RlOiBcImZpbmlzaGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgRW5jb3VudGVyIGhhcyBiZWd1biBhbmQgdGhlIHBhdGllbnQgaXMgcHJlc2VudCAvIHRoZSBwcmFjdGl0aW9uZXIgYW5kIHRoZSBwYXRpZW50IGFyZSBtZWV0aW5nLlxyXG4gICAqL1xyXG4gIEluUHJvZ3Jlc3M6IHtcclxuICAgIGRpc3BsYXk6IFwiaW4gUHJvZ3Jlc3NcIixcclxuICAgIGNvZGU6IFwiaW4tcHJvZ3Jlc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb25sZWF2ZTogVGhlIEVuY291bnRlciBoYXMgYmVndW4sIGJ1dCB0aGUgcGF0aWVudCBpcyB0ZW1wb3JhcmlseSBvbiBsZWF2ZS5cclxuICAgKi9cclxuICBPbkxlYXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9uIExlYXZlXCIsXHJcbiAgICBjb2RlOiBcIm9ubGVhdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIEVuY291bnRlciBoYXMgbm90IHlldCBzdGFydGVkLlxyXG4gICAqL1xyXG4gIFBsYW5uZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhbm5lZFwiLFxyXG4gICAgY29kZTogXCJwbGFubmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=