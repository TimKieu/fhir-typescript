// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/referralstatus|1.0.2
/**
 * The status of the referral.
 */
export const ReferralstatusCodings = {
    /**
     * accepted: The recipient has agreed to deliver the care requested by the referral.
     */
    Accepted: {
        display: "Accepted",
        code: "accepted",
        system: "http://hl7.org/fhir/referralstatus",
    },
    /**
     * active: The referral has been acknowledged by the recipient, and is in the process of being actioned.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/referralstatus",
    },
    /**
     * cancelled: The referral has been cancelled without being completed. For example it is no longer needed.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/referralstatus",
    },
    /**
     * completed: The referral has been completely actioned.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/referralstatus",
    },
    /**
     * draft: A draft referral that has yet to be send.
     */
    Draft: {
        display: "Draft",
        code: "draft",
        system: "http://hl7.org/fhir/referralstatus",
    },
    /**
     * rejected: The recipient has declined to accept the referral.
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/referralstatus",
    },
    /**
     * requested: The referral has been transmitted, but not yet acknowledged by the recipient.
     */
    Requested: {
        display: "Requested",
        code: "requested",
        system: "http://hl7.org/fhir/referralstatus",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJyYWxzdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWZlcnJhbHN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsbUVBQW1FO0FBc0NuRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0M7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLG9DQUFvQztLQUM3QztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLG9DQUFvQztLQUM3QztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLG9DQUFvQztLQUM3QztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZWZlcnJhbHN0YXR1c3wxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJlZmVycmFsLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVmZXJyYWxzdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjY2VwdGVkOiBUaGUgcmVjaXBpZW50IGhhcyBhZ3JlZWQgdG8gZGVsaXZlciB0aGUgY2FyZSByZXF1ZXN0ZWQgYnkgdGhlIHJlZmVycmFsLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIHJlZmVycmFsIGhhcyBiZWVuIGFja25vd2xlZGdlZCBieSB0aGUgcmVjaXBpZW50LCBhbmQgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgYWN0aW9uZWQuXHJcbiAgICovXHJcbiAgQWN0aXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIHJlZmVycmFsIGhhcyBiZWVuIGNhbmNlbGxlZCB3aXRob3V0IGJlaW5nIGNvbXBsZXRlZC4gRm9yIGV4YW1wbGUgaXQgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgcmVmZXJyYWwgaGFzIGJlZW4gY29tcGxldGVseSBhY3Rpb25lZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IEEgZHJhZnQgcmVmZXJyYWwgdGhhdCBoYXMgeWV0IHRvIGJlIHNlbmQuXHJcbiAgICovXHJcbiAgRHJhZnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSByZWNpcGllbnQgaGFzIGRlY2xpbmVkIHRvIGFjY2VwdCB0aGUgcmVmZXJyYWwuXHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVxdWVzdGVkOiBUaGUgcmVmZXJyYWwgaGFzIGJlZW4gdHJhbnNtaXR0ZWQsIGJ1dCBub3QgeWV0IGFja25vd2xlZGdlZCBieSB0aGUgcmVjaXBpZW50LlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJlZmVycmFsLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJlZmVycmFsc3RhdHVzQ29kaW5nczpSZWZlcnJhbHN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNjZXB0ZWQ6IFRoZSByZWNpcGllbnQgaGFzIGFncmVlZCB0byBkZWxpdmVyIHRoZSBjYXJlIHJlcXVlc3RlZCBieSB0aGUgcmVmZXJyYWwuXHJcbiAgICovXHJcbiAgQWNjZXB0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWNjZXB0ZWRcIixcclxuICAgIGNvZGU6IFwiYWNjZXB0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVycmFsc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSByZWZlcnJhbCBoYXMgYmVlbiBhY2tub3dsZWRnZWQgYnkgdGhlIHJlY2lwaWVudCwgYW5kIGlzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIGFjdGlvbmVkLlxyXG4gICAqL1xyXG4gIEFjdGl2ZToge1xyXG4gICAgZGlzcGxheTogXCJBY3RpdmVcIixcclxuICAgIGNvZGU6IFwiYWN0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcnJhbHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgcmVmZXJyYWwgaGFzIGJlZW4gY2FuY2VsbGVkIHdpdGhvdXQgYmVpbmcgY29tcGxldGVkLiBGb3IgZXhhbXBsZSBpdCBpcyBubyBsb25nZXIgbmVlZGVkLlxyXG4gICAqL1xyXG4gIENhbmNlbGxlZDoge1xyXG4gICAgZGlzcGxheTogXCJDYW5jZWxsZWRcIixcclxuICAgIGNvZGU6IFwiY2FuY2VsbGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcnJhbHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgcmVmZXJyYWwgaGFzIGJlZW4gY29tcGxldGVseSBhY3Rpb25lZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29tcGxldGVkXCIsXHJcbiAgICBjb2RlOiBcImNvbXBsZXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJyYWxzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBBIGRyYWZ0IHJlZmVycmFsIHRoYXQgaGFzIHlldCB0byBiZSBzZW5kLlxyXG4gICAqL1xyXG4gIERyYWZ0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkRyYWZ0XCIsXHJcbiAgICBjb2RlOiBcImRyYWZ0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcnJhbHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSByZWNpcGllbnQgaGFzIGRlY2xpbmVkIHRvIGFjY2VwdCB0aGUgcmVmZXJyYWwuXHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVqZWN0ZWRcIixcclxuICAgIGNvZGU6IFwicmVqZWN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVycmFsc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXF1ZXN0ZWQ6IFRoZSByZWZlcnJhbCBoYXMgYmVlbiB0cmFuc21pdHRlZCwgYnV0IG5vdCB5ZXQgYWNrbm93bGVkZ2VkIGJ5IHRoZSByZWNpcGllbnQuXHJcbiAgICovXHJcbiAgUmVxdWVzdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlcXVlc3RlZFwiLFxyXG4gICAgY29kZTogXCJyZXF1ZXN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVycmFsc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19