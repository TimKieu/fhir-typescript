// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/metric-calibration-type|1.0.2
/**
 * Describes the type of a metric calibration.
 */
export const MetricCalibrationTypeCodings = {
    /**
     * gain: TODO
     */
    Gain: {
        display: "Gain",
        code: "gain",
        system: "http://hl7.org/fhir/metric-calibration-type",
    },
    /**
     * offset: TODO
     */
    Offset: {
        display: "Offset",
        code: "offset",
        system: "http://hl7.org/fhir/metric-calibration-type",
    },
    /**
     * two-point: TODO
     */
    TwoPoint: {
        display: "Two Point",
        code: "two-point",
        system: "http://hl7.org/fhir/metric-calibration-type",
    },
    /**
     * unspecified: TODO
     */
    Unspecified: {
        display: "Unspecified",
        code: "unspecified",
        system: "http://hl7.org/fhir/metric-calibration-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0cmljQ2FsaWJyYXRpb25UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWV0cmljQ2FsaWJyYXRpb25UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0RUFBNEU7QUEwQjVFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQW1DO0lBQzFFOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSw2Q0FBNkM7S0FDdEQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDZDQUE2QztLQUN0RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDZDQUE2QztLQUN0RDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDZDQUE2QztLQUN0RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWV0cmljLWNhbGlicmF0aW9uLXR5cGV8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgdGhlIHR5cGUgb2YgYSBtZXRyaWMgY2FsaWJyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZXRyaWNDYWxpYnJhdGlvblR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGdhaW46IFRPRE9cclxuICAgKi9cclxuICBHYWluOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9mZnNldDogVE9ET1xyXG4gICAqL1xyXG4gIE9mZnNldDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0d28tcG9pbnQ6IFRPRE9cclxuICAgKi9cclxuICBUd29Qb2ludDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bnNwZWNpZmllZDogVE9ET1xyXG4gICAqL1xyXG4gIFVuc3BlY2lmaWVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSB0eXBlIG9mIGEgbWV0cmljIGNhbGlicmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1ldHJpY0NhbGlicmF0aW9uVHlwZUNvZGluZ3M6TWV0cmljQ2FsaWJyYXRpb25UeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBnYWluOiBUT0RPXHJcbiAgICovXHJcbiAgR2Fpbjoge1xyXG4gICAgZGlzcGxheTogXCJHYWluXCIsXHJcbiAgICBjb2RlOiBcImdhaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jYWxpYnJhdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvZmZzZXQ6IFRPRE9cclxuICAgKi9cclxuICBPZmZzZXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiT2Zmc2V0XCIsXHJcbiAgICBjb2RlOiBcIm9mZnNldFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNhbGlicmF0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHR3by1wb2ludDogVE9ET1xyXG4gICAqL1xyXG4gIFR3b1BvaW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIlR3byBQb2ludFwiLFxyXG4gICAgY29kZTogXCJ0d28tcG9pbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jYWxpYnJhdGlvbi10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bnNwZWNpZmllZDogVE9ET1xyXG4gICAqL1xyXG4gIFVuc3BlY2lmaWVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVuc3BlY2lmaWVkXCIsXHJcbiAgICBjb2RlOiBcInVuc3BlY2lmaWVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY2FsaWJyYXRpb24tdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==