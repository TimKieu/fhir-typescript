// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-relationshiptypes|1.0.2
/**
 * Codes specifying how two observations are related.
 */
export const ObservationRelationshiptypesCodings = {
    /**
     * derived-from: The target resource (Observation or QuestionnaireResponse) is part of the information from which this observation value is derived. (e.g. calculated anion gap, Apgar score)  NOTE:  "derived-from" is only logical choice when referencing QuestionnaireResponse.
     */
    DerivedFrom: {
        display: "Derived From",
        code: "derived-from",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * has-member: This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    HasMember: {
        display: "Has Member",
        code: "has-member",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * interfered-by: The value of the target observation interferes (degrades quality, or prevents valid observation) with the semantics of the source observation (e.g. a hemolysis measure target from a plasma potassium measure which has no value).
     */
    InterferedBy: {
        display: "Interfered By",
        code: "interfered-by",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * qualified-by: The value of the target observation qualifies (refines) the semantics of the source observation (e.g. a lipemia measure target from a plasma measure).
     */
    QualifiedBy: {
        display: "Qualified By",
        code: "qualified-by",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * replaces: This observation replaces a previous observation (i.e. a revised value). The target observation is now obsolete.
     */
    Replaces: {
        display: "Replaces",
        code: "replaces",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
    /**
     * sequel-to: This observation follows the target observation (e.g. timed tests such as Glucose Tolerance Test).
     */
    SequelTo: {
        display: "Sequel To",
        code: "sequel-to",
        system: "http://hl7.org/fhir/observation-relationshiptypes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL09ic2VydmF0aW9uUmVsYXRpb25zaGlwdHlwZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGtGQUFrRjtBQWtDbEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBMEM7SUFDeEY7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9vYnNlcnZhdGlvbi1yZWxhdGlvbnNoaXB0eXBlc3wxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIHNwZWNpZnlpbmcgaG93IHR3byBvYnNlcnZhdGlvbnMgYXJlIHJlbGF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkZXJpdmVkLWZyb206IFRoZSB0YXJnZXQgcmVzb3VyY2UgKE9ic2VydmF0aW9uIG9yIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSkgaXMgcGFydCBvZiB0aGUgaW5mb3JtYXRpb24gZnJvbSB3aGljaCB0aGlzIG9ic2VydmF0aW9uIHZhbHVlIGlzIGRlcml2ZWQuIChlLmcuIGNhbGN1bGF0ZWQgYW5pb24gZ2FwLCBBcGdhciBzY29yZSkgIE5PVEU6ICBcImRlcml2ZWQtZnJvbVwiIGlzIG9ubHkgbG9naWNhbCBjaG9pY2Ugd2hlbiByZWZlcmVuY2luZyBRdWVzdGlvbm5haXJlUmVzcG9uc2UuXHJcbiAgICovXHJcbiAgRGVyaXZlZEZyb206IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaGFzLW1lbWJlcjogVGhpcyBvYnNlcnZhdGlvbiBpcyBhIGdyb3VwIG9ic2VydmF0aW9uIChlLmcuIGEgYmF0dGVyeSwgYSBwYW5lbCBvZiB0ZXN0cywgYSBzZXQgb2Ygdml0YWwgc2lnbiBtZWFzdXJlbWVudHMpIHRoYXQgaW5jbHVkZXMgdGhlIHRhcmdldCBhcyBhIG1lbWJlciBvZiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgSGFzTWVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGludGVyZmVyZWQtYnk6IFRoZSB2YWx1ZSBvZiB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIGludGVyZmVyZXMgKGRlZ3JhZGVzIHF1YWxpdHksIG9yIHByZXZlbnRzIHZhbGlkIG9ic2VydmF0aW9uKSB3aXRoIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIHNvdXJjZSBvYnNlcnZhdGlvbiAoZS5nLiBhIGhlbW9seXNpcyBtZWFzdXJlIHRhcmdldCBmcm9tIGEgcGxhc21hIHBvdGFzc2l1bSBtZWFzdXJlIHdoaWNoIGhhcyBubyB2YWx1ZSkuXHJcbiAgICovXHJcbiAgSW50ZXJmZXJlZEJ5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHF1YWxpZmllZC1ieTogVGhlIHZhbHVlIG9mIHRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gcXVhbGlmaWVzIChyZWZpbmVzKSB0aGUgc2VtYW50aWNzIG9mIHRoZSBzb3VyY2Ugb2JzZXJ2YXRpb24gKGUuZy4gYSBsaXBlbWlhIG1lYXN1cmUgdGFyZ2V0IGZyb20gYSBwbGFzbWEgbWVhc3VyZSkuXHJcbiAgICovXHJcbiAgUXVhbGlmaWVkQnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVwbGFjZXM6IFRoaXMgb2JzZXJ2YXRpb24gcmVwbGFjZXMgYSBwcmV2aW91cyBvYnNlcnZhdGlvbiAoaS5lLiBhIHJldmlzZWQgdmFsdWUpLiBUaGUgdGFyZ2V0IG9ic2VydmF0aW9uIGlzIG5vdyBvYnNvbGV0ZS5cclxuICAgKi9cclxuICBSZXBsYWNlczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzZXF1ZWwtdG86IFRoaXMgb2JzZXJ2YXRpb24gZm9sbG93cyB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIChlLmcuIHRpbWVkIHRlc3RzIHN1Y2ggYXMgR2x1Y29zZSBUb2xlcmFuY2UgVGVzdCkuXHJcbiAgICovXHJcbiAgU2VxdWVsVG86IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBzcGVjaWZ5aW5nIGhvdyB0d28gb2JzZXJ2YXRpb25zIGFyZSByZWxhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE9ic2VydmF0aW9uUmVsYXRpb25zaGlwdHlwZXNDb2RpbmdzOk9ic2VydmF0aW9uUmVsYXRpb25zaGlwdHlwZXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRlcml2ZWQtZnJvbTogVGhlIHRhcmdldCByZXNvdXJjZSAoT2JzZXJ2YXRpb24gb3IgUXVlc3Rpb25uYWlyZVJlc3BvbnNlKSBpcyBwYXJ0IG9mIHRoZSBpbmZvcm1hdGlvbiBmcm9tIHdoaWNoIHRoaXMgb2JzZXJ2YXRpb24gdmFsdWUgaXMgZGVyaXZlZC4gKGUuZy4gY2FsY3VsYXRlZCBhbmlvbiBnYXAsIEFwZ2FyIHNjb3JlKSAgTk9URTogIFwiZGVyaXZlZC1mcm9tXCIgaXMgb25seSBsb2dpY2FsIGNob2ljZSB3aGVuIHJlZmVyZW5jaW5nIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5cclxuICAgKi9cclxuICBEZXJpdmVkRnJvbToge1xyXG4gICAgZGlzcGxheTogXCJEZXJpdmVkIEZyb21cIixcclxuICAgIGNvZGU6IFwiZGVyaXZlZC1mcm9tXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1yZWxhdGlvbnNoaXB0eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGFzLW1lbWJlcjogVGhpcyBvYnNlcnZhdGlvbiBpcyBhIGdyb3VwIG9ic2VydmF0aW9uIChlLmcuIGEgYmF0dGVyeSwgYSBwYW5lbCBvZiB0ZXN0cywgYSBzZXQgb2Ygdml0YWwgc2lnbiBtZWFzdXJlbWVudHMpIHRoYXQgaW5jbHVkZXMgdGhlIHRhcmdldCBhcyBhIG1lbWJlciBvZiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgSGFzTWVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkhhcyBNZW1iZXJcIixcclxuICAgIGNvZGU6IFwiaGFzLW1lbWJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tcmVsYXRpb25zaGlwdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGludGVyZmVyZWQtYnk6IFRoZSB2YWx1ZSBvZiB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIGludGVyZmVyZXMgKGRlZ3JhZGVzIHF1YWxpdHksIG9yIHByZXZlbnRzIHZhbGlkIG9ic2VydmF0aW9uKSB3aXRoIHRoZSBzZW1hbnRpY3Mgb2YgdGhlIHNvdXJjZSBvYnNlcnZhdGlvbiAoZS5nLiBhIGhlbW9seXNpcyBtZWFzdXJlIHRhcmdldCBmcm9tIGEgcGxhc21hIHBvdGFzc2l1bSBtZWFzdXJlIHdoaWNoIGhhcyBubyB2YWx1ZSkuXHJcbiAgICovXHJcbiAgSW50ZXJmZXJlZEJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIkludGVyZmVyZWQgQnlcIixcclxuICAgIGNvZGU6IFwiaW50ZXJmZXJlZC1ieVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tcmVsYXRpb25zaGlwdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHF1YWxpZmllZC1ieTogVGhlIHZhbHVlIG9mIHRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gcXVhbGlmaWVzIChyZWZpbmVzKSB0aGUgc2VtYW50aWNzIG9mIHRoZSBzb3VyY2Ugb2JzZXJ2YXRpb24gKGUuZy4gYSBsaXBlbWlhIG1lYXN1cmUgdGFyZ2V0IGZyb20gYSBwbGFzbWEgbWVhc3VyZSkuXHJcbiAgICovXHJcbiAgUXVhbGlmaWVkQnk6IHtcclxuICAgIGRpc3BsYXk6IFwiUXVhbGlmaWVkIEJ5XCIsXHJcbiAgICBjb2RlOiBcInF1YWxpZmllZC1ieVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tcmVsYXRpb25zaGlwdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlcGxhY2VzOiBUaGlzIG9ic2VydmF0aW9uIHJlcGxhY2VzIGEgcHJldmlvdXMgb2JzZXJ2YXRpb24gKGkuZS4gYSByZXZpc2VkIHZhbHVlKS4gVGhlIHRhcmdldCBvYnNlcnZhdGlvbiBpcyBub3cgb2Jzb2xldGUuXHJcbiAgICovXHJcbiAgUmVwbGFjZXM6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVwbGFjZXNcIixcclxuICAgIGNvZGU6IFwicmVwbGFjZXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXJlbGF0aW9uc2hpcHR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzZXF1ZWwtdG86IFRoaXMgb2JzZXJ2YXRpb24gZm9sbG93cyB0aGUgdGFyZ2V0IG9ic2VydmF0aW9uIChlLmcuIHRpbWVkIHRlc3RzIHN1Y2ggYXMgR2x1Y29zZSBUb2xlcmFuY2UgVGVzdCkuXHJcbiAgICovXHJcbiAgU2VxdWVsVG86IHtcclxuICAgIGRpc3BsYXk6IFwiU2VxdWVsIFRvXCIsXHJcbiAgICBjb2RlOiBcInNlcXVlbC10b1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tcmVsYXRpb25zaGlwdHlwZXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=