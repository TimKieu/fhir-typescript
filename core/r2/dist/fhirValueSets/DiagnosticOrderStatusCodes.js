// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/diagnostic-order-status|1.0.2
/**
 * The status of a diagnostic order.
 */
export const DiagnosticOrderStatusCodes = {
    /**
     * accepted: The receiving system has accepted the order, but work has not yet commenced.
     */
    Accepted: "accepted",
    /**
     * cancelled: The request has been withdrawn.
     */
    Cancelled: "cancelled",
    /**
     * completed: The work has been completed, the report(s) released, and no further work is planned.
     */
    Completed: "completed",
    /**
     * draft: The request is in preliminary form prior to being sent.
     */
    Draft: "draft",
    /**
     * failed: The diagnostic investigation was attempted, but due to some procedural error, it could not be completed.
     */
    Failed: "failed",
    /**
     * in-progress: The work to fulfill the order is happening.
     */
    InProgress: "in-progress",
    /**
     * planned: The request has been planned.
     */
    Planned: "planned",
    /**
     * proposed: The request has been proposed.
     */
    Proposed: "proposed",
    /**
     * received: The receiving system has received the order, but not yet decided whether it will be performed.
     */
    Received: "received",
    /**
     * rejected: The receiving system has declined to fulfill the request.
     */
    Rejected: "rejected",
    /**
     * requested: The request has been placed.
     */
    Requested: "requested",
    /**
     * review: The work is complete, and the outcomes are being reviewed for approval.
     */
    Review: "review",
    /**
     * suspended: The request has been held by originating system/user request.
     */
    Suspended: "suspended",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlhZ25vc3RpY09yZGVyU3RhdHVzQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RpYWdub3N0aWNPcmRlclN0YXR1c0NvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHO0lBQ3hDOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztDQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZGlhZ25vc3RpYy1vcmRlci1zdGF0dXN8MS4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGUgc3RhdHVzIG9mIGEgZGlhZ25vc3RpYyBvcmRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBEaWFnbm9zdGljT3JkZXJTdGF0dXNDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhY2NlcHRlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIGFjY2VwdGVkIHRoZSBvcmRlciwgYnV0IHdvcmsgaGFzIG5vdCB5ZXQgY29tbWVuY2VkLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiBcImFjY2VwdGVkXCIsXHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiB3aXRoZHJhd24uXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBcImNhbmNlbGxlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIHdvcmsgaGFzIGJlZW4gY29tcGxldGVkLCB0aGUgcmVwb3J0KHMpIHJlbGVhc2VkLCBhbmQgbm8gZnVydGhlciB3b3JrIGlzIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBcImNvbXBsZXRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgcmVxdWVzdCBpcyBpbiBwcmVsaW1pbmFyeSBmb3JtIHByaW9yIHRvIGJlaW5nIHNlbnQuXHJcbiAgICovXHJcbiAgRHJhZnQ6IFwiZHJhZnRcIixcclxuICAvKipcclxuICAgKiBmYWlsZWQ6IFRoZSBkaWFnbm9zdGljIGludmVzdGlnYXRpb24gd2FzIGF0dGVtcHRlZCwgYnV0IGR1ZSB0byBzb21lIHByb2NlZHVyYWwgZXJyb3IsIGl0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgRmFpbGVkOiBcImZhaWxlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgd29yayB0byBmdWxmaWxsIHRoZSBvcmRlciBpcyBoYXBwZW5pbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogXCJpbi1wcm9ncmVzc1wiLFxyXG4gIC8qKlxyXG4gICAqIHBsYW5uZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgUGxhbm5lZDogXCJwbGFubmVkXCIsXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHByb3Bvc2VkLlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiBcInByb3Bvc2VkXCIsXHJcbiAgLyoqXHJcbiAgICogcmVjZWl2ZWQ6IFRoZSByZWNlaXZpbmcgc3lzdGVtIGhhcyByZWNlaXZlZCB0aGUgb3JkZXIsIGJ1dCBub3QgeWV0IGRlY2lkZWQgd2hldGhlciBpdCB3aWxsIGJlIHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBSZWNlaXZlZDogXCJyZWNlaXZlZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlamVjdGVkOiBUaGUgcmVjZWl2aW5nIHN5c3RlbSBoYXMgZGVjbGluZWQgdG8gZnVsZmlsbCB0aGUgcmVxdWVzdC5cclxuICAgKi9cclxuICBSZWplY3RlZDogXCJyZWplY3RlZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlcXVlc3RlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhY2VkLlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlZDogXCJyZXF1ZXN0ZWRcIixcclxuICAvKipcclxuICAgKiByZXZpZXc6IFRoZSB3b3JrIGlzIGNvbXBsZXRlLCBhbmQgdGhlIG91dGNvbWVzIGFyZSBiZWluZyByZXZpZXdlZCBmb3IgYXBwcm92YWwuXHJcbiAgICovXHJcbiAgUmV2aWV3OiBcInJldmlld1wiLFxyXG4gIC8qKlxyXG4gICAqIHN1c3BlbmRlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gaGVsZCBieSBvcmlnaW5hdGluZyBzeXN0ZW0vdXNlciByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIFN1c3BlbmRlZDogXCJzdXNwZW5kZWRcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgc3RhdHVzIG9mIGEgZGlhZ25vc3RpYyBvcmRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIERpYWdub3N0aWNPcmRlclN0YXR1c0NvZGVUeXBlID0gdHlwZW9mIERpYWdub3N0aWNPcmRlclN0YXR1c0NvZGVzW2tleW9mIHR5cGVvZiBEaWFnbm9zdGljT3JkZXJTdGF0dXNDb2Rlc107XHJcbiJdfQ==