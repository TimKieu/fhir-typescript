// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/answer-format|1.0.2
/**
 * The expected format of an answer.
 */
export const AnswerFormatCodings = {
    /**
     * attachment: Answer is binary content such as a image, PDF, etc.
     */
    Attachment: {
        display: "Attachment",
        code: "attachment",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * boolean: Answer is a yes/no answer.
     */
    Boolean: {
        display: "Boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * choice: Answer is a Coding drawn from a list of options.
     */
    Choice: {
        display: "Choice",
        code: "choice",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * date: Answer is a date.
     */
    Date: {
        display: "Date",
        code: "date",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * dateTime: Answer is a date and time.
     */
    DateTime: {
        display: "Date Time",
        code: "dateTime",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * decimal: Answer is a floating point number.
     */
    Decimal: {
        display: "Decimal",
        code: "decimal",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * instant: Answer is a system timestamp.
     */
    Instant: {
        display: "Instant",
        code: "instant",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * integer: Answer is an integer.
     */
    Integer: {
        display: "Integer",
        code: "integer",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * open-choice: Answer is a Coding drawn from a list of options or a free-text entry.
     */
    OpenChoice: {
        display: "Open Choice",
        code: "open-choice",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * quantity: Answer is a combination of a numeric value and unit, potentially with a comparator (&lt;, &gt;, etc.).
     */
    Quantity: {
        display: "Quantity",
        code: "quantity",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * reference: Answer is a reference to another resource (practitioner, organization, etc.).
     */
    Reference: {
        display: "Reference",
        code: "reference",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * string: Answer is a short (few words to short sentence) free-text entry.
     */
    String: {
        display: "String",
        code: "string",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * text: Answer is a long (potentially multi-paragraph) free-text entry (still captured as a string).
     */
    Text: {
        display: "Text",
        code: "text",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * time: Answer is a time (hour/minute/second) independent of date.
     */
    Time: {
        display: "Time",
        code: "time",
        system: "http://hl7.org/fhir/answer-format",
    },
    /**
     * url: Answer is a url (website, FTP site, etc.).
     */
    Url: {
        display: "Url",
        code: "url",
        system: "http://hl7.org/fhir/answer-format",
    },
};
//# sourceMappingURL=data:application/json;base64,