// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/filter-operator|1.0.2
/**
 * The kind of operation to perform as a part of a property based filter.
 */
export const FilterOperatorCodings = {
    /**
     * =: The specified property of the code equals the provided value.
     */
    Equals: {
        display: "Equals",
        code: "=",
        system: "http://hl7.org/fhir/filter-operator",
    },
    /**
     * in: The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).
     */
    InSet: {
        display: "In Set",
        code: "in",
        system: "http://hl7.org/fhir/filter-operator",
    },
    /**
     * is-a: Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself.
     */
    IsABySubsumption: {
        display: "Is A (by subsumption)",
        code: "is-a",
        system: "http://hl7.org/fhir/filter-operator",
    },
    /**
     * is-not-a: The specified property of the code does not have an is-a relationship with the provided value.
     */
    NotIsABySubsumption: {
        display: "Not (Is A) (by subsumption)",
        code: "is-not-a",
        system: "http://hl7.org/fhir/filter-operator",
    },
    /**
     * not-in: The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).
     */
    NotInSet: {
        display: "Not in Set",
        code: "not-in",
        system: "http://hl7.org/fhir/filter-operator",
    },
    /**
     * regex: The specified property of the code  matches the regex specified in the provided value.
     */
    RegularExpression: {
        display: "Regular Expression",
        code: "regex",
        system: "http://hl7.org/fhir/filter-operator",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyT3BlcmF0b3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9GaWx0ZXJPcGVyYXRvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBa0NwRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUU7UUFDbkIsT0FBTyxFQUFFLDZCQUE2QjtRQUN0QyxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7SUFDRDs7T0FFRztJQUNILGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9maWx0ZXItb3BlcmF0b3J8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUga2luZCBvZiBvcGVyYXRpb24gdG8gcGVyZm9ybSBhcyBhIHBhcnQgb2YgYSBwcm9wZXJ0eSBiYXNlZCBmaWx0ZXIuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBGaWx0ZXJPcGVyYXRvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogPTogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBlcXVhbHMgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVxdWFsczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbjogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBpcyBpbiB0aGUgc2V0IG9mIGNvZGVzIG9yIGNvbmNlcHRzIHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgdmFsdWUgKGNvbW1hIHNlcGFyYXRlZCBsaXN0KS5cclxuICAgKi9cclxuICBJblNldDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpcy1hOiBJbmNsdWRlcyBhbGwgY29uY2VwdCBpZHMgdGhhdCBoYXZlIGEgdHJhbnNpdGl2ZSBpcy1hIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBjb25jZXB0IElkIHByb3ZpZGVkIGFzIHRoZSB2YWx1ZSwgaW5jbHVkaW5nIHRoZSBwcm92aWRlZCBjb25jZXB0IGl0c2VsZi5cclxuICAgKi9cclxuICBJc0FCeVN1YnN1bXB0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGlzLW5vdC1hOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGRvZXMgbm90IGhhdmUgYW4gaXMtYSByZWxhdGlvbnNoaXAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTm90SXNBQnlTdWJzdW1wdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3QtaW46IFRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGNvZGUgaXMgbm90IGluIHRoZSBzZXQgb2YgY29kZXMgb3IgY29uY2VwdHMgc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCB2YWx1ZSAoY29tbWEgc2VwYXJhdGVkIGxpc3QpLlxyXG4gICAqL1xyXG4gIE5vdEluU2V0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlZ2V4OiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlICBtYXRjaGVzIHRoZSByZWdleCBzcGVjaWZpZWQgaW4gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIFJlZ3VsYXJFeHByZXNzaW9uOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGtpbmQgb2Ygb3BlcmF0aW9uIHRvIHBlcmZvcm0gYXMgYSBwYXJ0IG9mIGEgcHJvcGVydHkgYmFzZWQgZmlsdGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEZpbHRlck9wZXJhdG9yQ29kaW5nczpGaWx0ZXJPcGVyYXRvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogPTogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBlcXVhbHMgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVxdWFsczoge1xyXG4gICAgZGlzcGxheTogXCJFcXVhbHNcIixcclxuICAgIGNvZGU6IFwiPVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZmlsdGVyLW9wZXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbjogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBpcyBpbiB0aGUgc2V0IG9mIGNvZGVzIG9yIGNvbmNlcHRzIHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgdmFsdWUgKGNvbW1hIHNlcGFyYXRlZCBsaXN0KS5cclxuICAgKi9cclxuICBJblNldDoge1xyXG4gICAgZGlzcGxheTogXCJJbiBTZXRcIixcclxuICAgIGNvZGU6IFwiaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ZpbHRlci1vcGVyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaXMtYTogSW5jbHVkZXMgYWxsIGNvbmNlcHQgaWRzIHRoYXQgaGF2ZSBhIHRyYW5zaXRpdmUgaXMtYSByZWxhdGlvbnNoaXAgd2l0aCB0aGUgY29uY2VwdCBJZCBwcm92aWRlZCBhcyB0aGUgdmFsdWUsIGluY2x1ZGluZyB0aGUgcHJvdmlkZWQgY29uY2VwdCBpdHNlbGYuXHJcbiAgICovXHJcbiAgSXNBQnlTdWJzdW1wdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJJcyBBIChieSBzdWJzdW1wdGlvbilcIixcclxuICAgIGNvZGU6IFwiaXMtYVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZmlsdGVyLW9wZXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpcy1ub3QtYTogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBkb2VzIG5vdCBoYXZlIGFuIGlzLWEgcmVsYXRpb25zaGlwIHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIE5vdElzQUJ5U3Vic3VtcHRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiTm90IChJcyBBKSAoYnkgc3Vic3VtcHRpb24pXCIsXHJcbiAgICBjb2RlOiBcImlzLW5vdC1hXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9maWx0ZXItb3BlcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdC1pbjogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBpcyBub3QgaW4gdGhlIHNldCBvZiBjb2RlcyBvciBjb25jZXB0cyBzcGVjaWZpZWQgaW4gdGhlIHByb3ZpZGVkIHZhbHVlIChjb21tYSBzZXBhcmF0ZWQgbGlzdCkuXHJcbiAgICovXHJcbiAgTm90SW5TZXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTm90IGluIFNldFwiLFxyXG4gICAgY29kZTogXCJub3QtaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ZpbHRlci1vcGVyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVnZXg6IFRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGNvZGUgIG1hdGNoZXMgdGhlIHJlZ2V4IHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgUmVndWxhckV4cHJlc3Npb246IHtcclxuICAgIGRpc3BsYXk6IFwiUmVndWxhciBFeHByZXNzaW9uXCIsXHJcbiAgICBjb2RlOiBcInJlZ2V4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9maWx0ZXItb3BlcmF0b3JcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=