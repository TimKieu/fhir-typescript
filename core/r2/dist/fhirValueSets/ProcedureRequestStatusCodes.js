// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/procedure-request-status|1.0.2
/**
 * The status of the request.
 */
export const ProcedureRequestStatusCodes = {
    /**
     * aborted: The request was attempted, but due to some procedural error, it could not be completed.
     */
    Aborted: "aborted",
    /**
     * accepted: The receiving system has accepted the request, but work has not yet commenced.
     */
    Accepted: "accepted",
    /**
     * completed: The work has been completed, the report(s) released, and no further work is planned.
     */
    Completed: "completed",
    /**
     * draft: The request is in preliminary form, prior to being requested.
     */
    Draft: "draft",
    /**
     * in-progress: The work to fulfill the request is happening.
     */
    InProgress: "in-progress",
    /**
     * proposed: The request has been proposed.
     */
    Proposed: "proposed",
    /**
     * received: The receiving system has received the request but not yet decided whether it will be performed.
     */
    Received: "received",
    /**
     * rejected: The receiving system has declined to fulfill the request.
     */
    Rejected: "rejected",
    /**
     * requested: The request has been placed.
     */
    Requested: "requested",
    /**
     * suspended: The request has been held by originating system/user request.
     */
    Suspended: "suspended",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvY2VkdXJlUmVxdWVzdFN0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Qcm9jZWR1cmVSZXF1ZXN0U3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNkVBQTZFO0FBRTdFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUc7SUFDekM7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0NBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9wcm9jZWR1cmUtcmVxdWVzdC1zdGF0dXN8MS4wLjJcclxuXHJcbi8qKlxyXG4gKiBUaGUgc3RhdHVzIG9mIHRoZSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFByb2NlZHVyZVJlcXVlc3RTdGF0dXNDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhYm9ydGVkOiBUaGUgcmVxdWVzdCB3YXMgYXR0ZW1wdGVkLCBidXQgZHVlIHRvIHNvbWUgcHJvY2VkdXJhbCBlcnJvciwgaXQgY291bGQgbm90IGJlIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBBYm9ydGVkOiBcImFib3J0ZWRcIixcclxuICAvKipcclxuICAgKiBhY2NlcHRlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIGFjY2VwdGVkIHRoZSByZXF1ZXN0LCBidXQgd29yayBoYXMgbm90IHlldCBjb21tZW5jZWQuXHJcbiAgICovXHJcbiAgQWNjZXB0ZWQ6IFwiYWNjZXB0ZWRcIixcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSB3b3JrIGhhcyBiZWVuIGNvbXBsZXRlZCwgdGhlIHJlcG9ydChzKSByZWxlYXNlZCwgYW5kIG5vIGZ1cnRoZXIgd29yayBpcyBwbGFubmVkLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDogXCJjb21wbGV0ZWRcIixcclxuICAvKipcclxuICAgKiBkcmFmdDogVGhlIHJlcXVlc3QgaXMgaW4gcHJlbGltaW5hcnkgZm9ybSwgcHJpb3IgdG8gYmVpbmcgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIERyYWZ0OiBcImRyYWZ0XCIsXHJcbiAgLyoqXHJcbiAgICogaW4tcHJvZ3Jlc3M6IFRoZSB3b3JrIHRvIGZ1bGZpbGwgdGhlIHJlcXVlc3QgaXMgaGFwcGVuaW5nLlxyXG4gICAqL1xyXG4gIEluUHJvZ3Jlc3M6IFwiaW4tcHJvZ3Jlc3NcIixcclxuICAvKipcclxuICAgKiBwcm9wb3NlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcHJvcG9zZWQuXHJcbiAgICovXHJcbiAgUHJvcG9zZWQ6IFwicHJvcG9zZWRcIixcclxuICAvKipcclxuICAgKiByZWNlaXZlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIHJlY2VpdmVkIHRoZSByZXF1ZXN0IGJ1dCBub3QgeWV0IGRlY2lkZWQgd2hldGhlciBpdCB3aWxsIGJlIHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBSZWNlaXZlZDogXCJyZWNlaXZlZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlamVjdGVkOiBUaGUgcmVjZWl2aW5nIHN5c3RlbSBoYXMgZGVjbGluZWQgdG8gZnVsZmlsbCB0aGUgcmVxdWVzdC5cclxuICAgKi9cclxuICBSZWplY3RlZDogXCJyZWplY3RlZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJlcXVlc3RlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhY2VkLlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlZDogXCJyZXF1ZXN0ZWRcIixcclxuICAvKipcclxuICAgKiBzdXNwZW5kZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIGhlbGQgYnkgb3JpZ2luYXRpbmcgc3lzdGVtL3VzZXIgcmVxdWVzdC5cclxuICAgKi9cclxuICBTdXNwZW5kZWQ6IFwic3VzcGVuZGVkXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHN0YXR1cyBvZiB0aGUgcmVxdWVzdC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFByb2NlZHVyZVJlcXVlc3RTdGF0dXNDb2RlVHlwZSA9IHR5cGVvZiBQcm9jZWR1cmVSZXF1ZXN0U3RhdHVzQ29kZXNba2V5b2YgdHlwZW9mIFByb2NlZHVyZVJlcXVlc3RTdGF0dXNDb2Rlc107XHJcbiJdfQ==