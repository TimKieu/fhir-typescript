// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-status|1.0.2
/**
 * Codes providing the status of an observation.
 */
export const ObservationStatusCodings = {
    /**
     * amended: The observation has been modified subsequent to being Final, and is complete and verified by an authorized person.
     */
    Amended: {
        display: "Amended",
        code: "amended",
        system: "http://hl7.org/fhir/observation-status",
    },
    /**
     * cancelled: The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
     */
    Cancelled: {
        display: "cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/observation-status",
    },
    /**
     * entered-in-error: The observation has been withdrawn following previous final release.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/observation-status",
    },
    /**
     * final: The observation is complete and verified by an authorized person.
     */
    Final: {
        display: "Final",
        code: "final",
        system: "http://hl7.org/fhir/observation-status",
    },
    /**
     * preliminary: This is an initial or interim observation: data may be incomplete or unverified.
     */
    Preliminary: {
        display: "Preliminary",
        code: "preliminary",
        system: "http://hl7.org/fhir/observation-status",
    },
    /**
     * registered: The existence of the observation is registered, but there is no result yet available.
     */
    Registered: {
        display: "Registered",
        code: "registered",
        system: "http://hl7.org/fhir/observation-status",
    },
    /**
     * unknown: The observation status is unknown.  Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown".
     */
    UnknownStatus: {
        display: "Unknown Status",
        code: "unknown",
        system: "http://hl7.org/fhir/observation-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25TdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9PYnNlcnZhdGlvblN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBc0N2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L29ic2VydmF0aW9uLXN0YXR1c3wxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIHByb3ZpZGluZyB0aGUgc3RhdHVzIG9mIGFuIG9ic2VydmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT2JzZXJ2YXRpb25TdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFtZW5kZWQ6IFRoZSBvYnNlcnZhdGlvbiBoYXMgYmVlbiBtb2RpZmllZCBzdWJzZXF1ZW50IHRvIGJlaW5nIEZpbmFsLCBhbmQgaXMgY29tcGxldGUgYW5kIHZlcmlmaWVkIGJ5IGFuIGF1dGhvcml6ZWQgcGVyc29uLlxyXG4gICAqL1xyXG4gIEFtZW5kZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgb2JzZXJ2YXRpb24gaXMgdW5hdmFpbGFibGUgYmVjYXVzZSB0aGUgbWVhc3VyZW1lbnQgd2FzIG5vdCBzdGFydGVkIG9yIG5vdCBjb21wbGV0ZWQgKGFsc28gc29tZXRpbWVzIGNhbGxlZCBcImFib3J0ZWRcIikuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBvYnNlcnZhdGlvbiBoYXMgYmVlbiB3aXRoZHJhd24gZm9sbG93aW5nIHByZXZpb3VzIGZpbmFsIHJlbGVhc2UuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmluYWw6IFRoZSBvYnNlcnZhdGlvbiBpcyBjb21wbGV0ZSBhbmQgdmVyaWZpZWQgYnkgYW4gYXV0aG9yaXplZCBwZXJzb24uXHJcbiAgICovXHJcbiAgRmluYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJlbGltaW5hcnk6IFRoaXMgaXMgYW4gaW5pdGlhbCBvciBpbnRlcmltIG9ic2VydmF0aW9uOiBkYXRhIG1heSBiZSBpbmNvbXBsZXRlIG9yIHVudmVyaWZpZWQuXHJcbiAgICovXHJcbiAgUHJlbGltaW5hcnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVnaXN0ZXJlZDogVGhlIGV4aXN0ZW5jZSBvZiB0aGUgb2JzZXJ2YXRpb24gaXMgcmVnaXN0ZXJlZCwgYnV0IHRoZXJlIGlzIG5vIHJlc3VsdCB5ZXQgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIFJlZ2lzdGVyZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIG9ic2VydmF0aW9uIHN0YXR1cyBpcyB1bmtub3duLiAgTm90ZSB0aGF0IFwidW5rbm93blwiIGlzIGEgdmFsdWUgb2YgbGFzdCByZXNvcnQgYW5kIGV2ZXJ5IGF0dGVtcHQgc2hvdWxkIGJlIG1hZGUgdG8gcHJvdmlkZSBhIG1lYW5pbmdmdWwgdmFsdWUgb3RoZXIgdGhhbiBcInVua25vd25cIi5cclxuICAgKi9cclxuICBVbmtub3duU3RhdHVzOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ29kZXMgcHJvdmlkaW5nIHRoZSBzdGF0dXMgb2YgYW4gb2JzZXJ2YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgT2JzZXJ2YXRpb25TdGF0dXNDb2RpbmdzOk9ic2VydmF0aW9uU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbWVuZGVkOiBUaGUgb2JzZXJ2YXRpb24gaGFzIGJlZW4gbW9kaWZpZWQgc3Vic2VxdWVudCB0byBiZWluZyBGaW5hbCwgYW5kIGlzIGNvbXBsZXRlIGFuZCB2ZXJpZmllZCBieSBhbiBhdXRob3JpemVkIHBlcnNvbi5cclxuICAgKi9cclxuICBBbWVuZGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFtZW5kZWRcIixcclxuICAgIGNvZGU6IFwiYW1lbmRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBvYnNlcnZhdGlvbiBpcyB1bmF2YWlsYWJsZSBiZWNhdXNlIHRoZSBtZWFzdXJlbWVudCB3YXMgbm90IHN0YXJ0ZWQgb3Igbm90IGNvbXBsZXRlZCAoYWxzbyBzb21ldGltZXMgY2FsbGVkIFwiYWJvcnRlZFwiKS5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiY2FuY2VsbGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbmNlbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgb2JzZXJ2YXRpb24gaGFzIGJlZW4gd2l0aGRyYXduIGZvbGxvd2luZyBwcmV2aW91cyBmaW5hbCByZWxlYXNlLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmaW5hbDogVGhlIG9ic2VydmF0aW9uIGlzIGNvbXBsZXRlIGFuZCB2ZXJpZmllZCBieSBhbiBhdXRob3JpemVkIHBlcnNvbi5cclxuICAgKi9cclxuICBGaW5hbDoge1xyXG4gICAgZGlzcGxheTogXCJGaW5hbFwiLFxyXG4gICAgY29kZTogXCJmaW5hbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcmVsaW1pbmFyeTogVGhpcyBpcyBhbiBpbml0aWFsIG9yIGludGVyaW0gb2JzZXJ2YXRpb246IGRhdGEgbWF5IGJlIGluY29tcGxldGUgb3IgdW52ZXJpZmllZC5cclxuICAgKi9cclxuICBQcmVsaW1pbmFyeToge1xyXG4gICAgZGlzcGxheTogXCJQcmVsaW1pbmFyeVwiLFxyXG4gICAgY29kZTogXCJwcmVsaW1pbmFyeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWdpc3RlcmVkOiBUaGUgZXhpc3RlbmNlIG9mIHRoZSBvYnNlcnZhdGlvbiBpcyByZWdpc3RlcmVkLCBidXQgdGhlcmUgaXMgbm8gcmVzdWx0IHlldCBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgUmVnaXN0ZXJlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZWdpc3RlcmVkXCIsXHJcbiAgICBjb2RlOiBcInJlZ2lzdGVyZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIG9ic2VydmF0aW9uIHN0YXR1cyBpcyB1bmtub3duLiAgTm90ZSB0aGF0IFwidW5rbm93blwiIGlzIGEgdmFsdWUgb2YgbGFzdCByZXNvcnQgYW5kIGV2ZXJ5IGF0dGVtcHQgc2hvdWxkIGJlIG1hZGUgdG8gcHJvdmlkZSBhIG1lYW5pbmdmdWwgdmFsdWUgb3RoZXIgdGhhbiBcInVua25vd25cIi5cclxuICAgKi9cclxuICBVbmtub3duU3RhdHVzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd24gU3RhdHVzXCIsXHJcbiAgICBjb2RlOiBcInVua25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==