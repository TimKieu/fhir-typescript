// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contact-point-system|1.0.2
/**
 * Telecommunications form for contact point
 */
export const ContactPointSystemCodings = {
    /**
     * email: The value is an email address.
     */
    Email: {
        display: "Email",
        code: "email",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * fax: The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
     */
    Fax: {
        display: "Fax",
        code: "fax",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * other: A contact that is not a phone, fax, or email address. The format of the value SHOULD be a URL. This is intended for various personal contacts including blogs, Twitter, Facebook, etc. Do not use for email addresses. If this is not a URL, then it will require human interpretation.
     */
    URL: {
        display: "URL",
        code: "other",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * pager: The value is a pager number. These may be local pager numbers that are only usable on a particular pager system.
     */
    Pager: {
        display: "Pager",
        code: "pager",
        system: "http://hl7.org/fhir/contact-point-system",
    },
    /**
     * phone: The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
     */
    Phone: {
        display: "Phone",
        code: "phone",
        system: "http://hl7.org/fhir/contact-point-system",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdFBvaW50U3lzdGVtQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udGFjdFBvaW50U3lzdGVtQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUE4QnpFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250YWN0LXBvaW50LXN5c3RlbXwxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRlbGVjb21tdW5pY2F0aW9ucyBmb3JtIGZvciBjb250YWN0IHBvaW50XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250YWN0UG9pbnRTeXN0ZW1Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGVtYWlsOiBUaGUgdmFsdWUgaXMgYW4gZW1haWwgYWRkcmVzcy5cclxuICAgKi9cclxuICBFbWFpbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBmYXg6IFRoZSB2YWx1ZSBpcyBhIGZheCBtYWNoaW5lLiBVc2Ugb2YgZnVsbCBpbnRlcm5hdGlvbmFsIG51bWJlcnMgc3RhcnRpbmcgd2l0aCArIGlzIHJlY29tbWVuZGVkIHRvIGVuYWJsZSBhdXRvbWF0aWMgZGlhbGluZyBzdXBwb3J0IGJ1dCBub3QgcmVxdWlyZWQuXHJcbiAgICovXHJcbiAgRmF4OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBBIGNvbnRhY3QgdGhhdCBpcyBub3QgYSBwaG9uZSwgZmF4LCBvciBlbWFpbCBhZGRyZXNzLiBUaGUgZm9ybWF0IG9mIHRoZSB2YWx1ZSBTSE9VTEQgYmUgYSBVUkwuIFRoaXMgaXMgaW50ZW5kZWQgZm9yIHZhcmlvdXMgcGVyc29uYWwgY29udGFjdHMgaW5jbHVkaW5nIGJsb2dzLCBUd2l0dGVyLCBGYWNlYm9vaywgZXRjLiBEbyBub3QgdXNlIGZvciBlbWFpbCBhZGRyZXNzZXMuIElmIHRoaXMgaXMgbm90IGEgVVJMLCB0aGVuIGl0IHdpbGwgcmVxdWlyZSBodW1hbiBpbnRlcnByZXRhdGlvbi5cclxuICAgKi9cclxuICBVUkw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGFnZXI6IFRoZSB2YWx1ZSBpcyBhIHBhZ2VyIG51bWJlci4gVGhlc2UgbWF5IGJlIGxvY2FsIHBhZ2VyIG51bWJlcnMgdGhhdCBhcmUgb25seSB1c2FibGUgb24gYSBwYXJ0aWN1bGFyIHBhZ2VyIHN5c3RlbS5cclxuICAgKi9cclxuICBQYWdlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwaG9uZTogVGhlIHZhbHVlIGlzIGEgdGVsZXBob25lIG51bWJlciB1c2VkIGZvciB2b2ljZSBjYWxscy4gVXNlIG9mIGZ1bGwgaW50ZXJuYXRpb25hbCBudW1iZXJzIHN0YXJ0aW5nIHdpdGggKyBpcyByZWNvbW1lbmRlZCB0byBlbmFibGUgYXV0b21hdGljIGRpYWxpbmcgc3VwcG9ydCBidXQgbm90IHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIFBob25lOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGVsZWNvbW11bmljYXRpb25zIGZvcm0gZm9yIGNvbnRhY3QgcG9pbnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBDb250YWN0UG9pbnRTeXN0ZW1Db2RpbmdzOkNvbnRhY3RQb2ludFN5c3RlbUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZW1haWw6IFRoZSB2YWx1ZSBpcyBhbiBlbWFpbCBhZGRyZXNzLlxyXG4gICAqL1xyXG4gIEVtYWlsOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVtYWlsXCIsXHJcbiAgICBjb2RlOiBcImVtYWlsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb250YWN0LXBvaW50LXN5c3RlbVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZmF4OiBUaGUgdmFsdWUgaXMgYSBmYXggbWFjaGluZS4gVXNlIG9mIGZ1bGwgaW50ZXJuYXRpb25hbCBudW1iZXJzIHN0YXJ0aW5nIHdpdGggKyBpcyByZWNvbW1lbmRlZCB0byBlbmFibGUgYXV0b21hdGljIGRpYWxpbmcgc3VwcG9ydCBidXQgbm90IHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIEZheDoge1xyXG4gICAgZGlzcGxheTogXCJGYXhcIixcclxuICAgIGNvZGU6IFwiZmF4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb250YWN0LXBvaW50LXN5c3RlbVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IEEgY29udGFjdCB0aGF0IGlzIG5vdCBhIHBob25lLCBmYXgsIG9yIGVtYWlsIGFkZHJlc3MuIFRoZSBmb3JtYXQgb2YgdGhlIHZhbHVlIFNIT1VMRCBiZSBhIFVSTC4gVGhpcyBpcyBpbnRlbmRlZCBmb3IgdmFyaW91cyBwZXJzb25hbCBjb250YWN0cyBpbmNsdWRpbmcgYmxvZ3MsIFR3aXR0ZXIsIEZhY2Vib29rLCBldGMuIERvIG5vdCB1c2UgZm9yIGVtYWlsIGFkZHJlc3Nlcy4gSWYgdGhpcyBpcyBub3QgYSBVUkwsIHRoZW4gaXQgd2lsbCByZXF1aXJlIGh1bWFuIGludGVycHJldGF0aW9uLlxyXG4gICAqL1xyXG4gIFVSTDoge1xyXG4gICAgZGlzcGxheTogXCJVUkxcIixcclxuICAgIGNvZGU6IFwib3RoZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnRhY3QtcG9pbnQtc3lzdGVtXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwYWdlcjogVGhlIHZhbHVlIGlzIGEgcGFnZXIgbnVtYmVyLiBUaGVzZSBtYXkgYmUgbG9jYWwgcGFnZXIgbnVtYmVycyB0aGF0IGFyZSBvbmx5IHVzYWJsZSBvbiBhIHBhcnRpY3VsYXIgcGFnZXIgc3lzdGVtLlxyXG4gICAqL1xyXG4gIFBhZ2VyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBhZ2VyXCIsXHJcbiAgICBjb2RlOiBcInBhZ2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb250YWN0LXBvaW50LXN5c3RlbVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGhvbmU6IFRoZSB2YWx1ZSBpcyBhIHRlbGVwaG9uZSBudW1iZXIgdXNlZCBmb3Igdm9pY2UgY2FsbHMuIFVzZSBvZiBmdWxsIGludGVybmF0aW9uYWwgbnVtYmVycyBzdGFydGluZyB3aXRoICsgaXMgcmVjb21tZW5kZWQgdG8gZW5hYmxlIGF1dG9tYXRpYyBkaWFsaW5nIHN1cHBvcnQgYnV0IG5vdCByZXF1aXJlZC5cclxuICAgKi9cclxuICBQaG9uZToge1xyXG4gICAgZGlzcGxheTogXCJQaG9uZVwiLFxyXG4gICAgY29kZTogXCJwaG9uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29udGFjdC1wb2ludC1zeXN0ZW1cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=