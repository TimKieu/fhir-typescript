// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/metric-color|1.0.2
/**
 * Describes the typical color of representation.
 */
export const MetricColorCodings = {
    /**
     * black: Color for representation - black.
     */
    ColorBlack: {
        display: "Color Black",
        code: "black",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * blue: Color for representation - blue.
     */
    ColorBlue: {
        display: "Color Blue",
        code: "blue",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * cyan: Color for representation - cyan.
     */
    ColorCyan: {
        display: "Color Cyan",
        code: "cyan",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * green: Color for representation - green.
     */
    ColorGreen: {
        display: "Color Green",
        code: "green",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * magenta: Color for representation - magenta.
     */
    ColorMagenta: {
        display: "Color Magenta",
        code: "magenta",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * red: Color for representation - red.
     */
    ColorRed: {
        display: "Color Red",
        code: "red",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * white: Color for representation - white.
     */
    ColorWhite: {
        display: "Color White",
        code: "white",
        system: "http://hl7.org/fhir/metric-color",
    },
    /**
     * yellow: Color for representation - yellow.
     */
    ColorYellow: {
        display: "Color Yellow",
        code: "yellow",
        system: "http://hl7.org/fhir/metric-color",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0cmljQ29sb3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZXRyaWNDb2xvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBMENqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0M7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQztJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZXRyaWMtY29sb3J8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgdGhlIHR5cGljYWwgY29sb3Igb2YgcmVwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZXRyaWNDb2xvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmxhY2s6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIGJsYWNrLlxyXG4gICAqL1xyXG4gIENvbG9yQmxhY2s6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYmx1ZTogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gYmx1ZS5cclxuICAgKi9cclxuICBDb2xvckJsdWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY3lhbjogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gY3lhbi5cclxuICAgKi9cclxuICBDb2xvckN5YW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ3JlZW46IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIGdyZWVuLlxyXG4gICAqL1xyXG4gIENvbG9yR3JlZW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWFnZW50YTogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gbWFnZW50YS5cclxuICAgKi9cclxuICBDb2xvck1hZ2VudGE6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVkOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSByZWQuXHJcbiAgICovXHJcbiAgQ29sb3JSZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd2hpdGU6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIHdoaXRlLlxyXG4gICAqL1xyXG4gIENvbG9yV2hpdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogeWVsbG93OiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSB5ZWxsb3cuXHJcbiAgICovXHJcbiAgQ29sb3JZZWxsb3c6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgdGhlIHR5cGljYWwgY29sb3Igb2YgcmVwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWV0cmljQ29sb3JDb2RpbmdzOk1ldHJpY0NvbG9yQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBibGFjazogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gYmxhY2suXHJcbiAgICovXHJcbiAgQ29sb3JCbGFjazoge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBCbGFja1wiLFxyXG4gICAgY29kZTogXCJibGFja1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBibHVlOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBibHVlLlxyXG4gICAqL1xyXG4gIENvbG9yQmx1ZToge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBCbHVlXCIsXHJcbiAgICBjb2RlOiBcImJsdWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY3lhbjogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gY3lhbi5cclxuICAgKi9cclxuICBDb2xvckN5YW46IHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgQ3lhblwiLFxyXG4gICAgY29kZTogXCJjeWFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGdyZWVuOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBncmVlbi5cclxuICAgKi9cclxuICBDb2xvckdyZWVuOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIEdyZWVuXCIsXHJcbiAgICBjb2RlOiBcImdyZWVuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1hZ2VudGE6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIG1hZ2VudGEuXHJcbiAgICovXHJcbiAgQ29sb3JNYWdlbnRhOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIE1hZ2VudGFcIixcclxuICAgIGNvZGU6IFwibWFnZW50YVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWQ6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIHJlZC5cclxuICAgKi9cclxuICBDb2xvclJlZDoge1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBSZWRcIixcclxuICAgIGNvZGU6IFwicmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdoaXRlOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSB3aGl0ZS5cclxuICAgKi9cclxuICBDb2xvcldoaXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIFdoaXRlXCIsXHJcbiAgICBjb2RlOiBcIndoaXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHllbGxvdzogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0geWVsbG93LlxyXG4gICAqL1xyXG4gIENvbG9yWWVsbG93OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIFllbGxvd1wiLFxyXG4gICAgY29kZTogXCJ5ZWxsb3dcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==