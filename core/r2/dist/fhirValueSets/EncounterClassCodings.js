// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-class|1.0.2
/**
 * Classification of the encounter
 */
export const EncounterClassCodings = {
    /**
     * ambulatory: An encounter where the patient visits the practitioner in his/her office, e.g. a G.P. visit.
     */
    Ambulatory: {
        display: "Ambulatory",
        code: "ambulatory",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * daytime: An encounter where the patient needs more prolonged treatment or investigations than outpatients, but who do not need to stay in the hospital overnight.
     */
    Daytime: {
        display: "Daytime",
        code: "daytime",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * emergency: An encounter in the Emergency Care Department.
     */
    Emergency: {
        display: "Emergency",
        code: "emergency",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * field: An encounter taking place outside the regular environment for giving care.
     */
    Field: {
        display: "Field",
        code: "field",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * home: An encounter where the practitioner visits the patient at his/her home.
     */
    Home: {
        display: "Home",
        code: "home",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * inpatient: An encounter during which the patient is hospitalized and stays overnight.
     */
    Inpatient: {
        display: "Inpatient",
        code: "inpatient",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * other: Any other encounter type that is not described by one of the other values. Where this is used it is expected that an implementer will include an extension value to define what the actual other type is.
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * outpatient: An encounter during which the patient is not hospitalized overnight.
     */
    Outpatient: {
        display: "Outpatient",
        code: "outpatient",
        system: "http://hl7.org/fhir/encounter-class",
    },
    /**
     * virtual: An encounter that takes place where the patient and practitioner do not physically meet but use electronic means for contact.
     */
    Virtual: {
        display: "Virtual",
        code: "virtual",
        system: "http://hl7.org/fhir/encounter-class",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyQ2xhc3NDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJDbGFzc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBOENwRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2VuY291bnRlci1jbGFzc3wxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENsYXNzaWZpY2F0aW9uIG9mIHRoZSBlbmNvdW50ZXJcclxuICovXHJcbmV4cG9ydCB0eXBlIEVuY291bnRlckNsYXNzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbWJ1bGF0b3J5OiBBbiBlbmNvdW50ZXIgd2hlcmUgdGhlIHBhdGllbnQgdmlzaXRzIHRoZSBwcmFjdGl0aW9uZXIgaW4gaGlzL2hlciBvZmZpY2UsIGUuZy4gYSBHLlAuIHZpc2l0LlxyXG4gICAqL1xyXG4gIEFtYnVsYXRvcnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF5dGltZTogQW4gZW5jb3VudGVyIHdoZXJlIHRoZSBwYXRpZW50IG5lZWRzIG1vcmUgcHJvbG9uZ2VkIHRyZWF0bWVudCBvciBpbnZlc3RpZ2F0aW9ucyB0aGFuIG91dHBhdGllbnRzLCBidXQgd2hvIGRvIG5vdCBuZWVkIHRvIHN0YXkgaW4gdGhlIGhvc3BpdGFsIG92ZXJuaWdodC5cclxuICAgKi9cclxuICBEYXl0aW1lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVtZXJnZW5jeTogQW4gZW5jb3VudGVyIGluIHRoZSBFbWVyZ2VuY3kgQ2FyZSBEZXBhcnRtZW50LlxyXG4gICAqL1xyXG4gIEVtZXJnZW5jeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBmaWVsZDogQW4gZW5jb3VudGVyIHRha2luZyBwbGFjZSBvdXRzaWRlIHRoZSByZWd1bGFyIGVudmlyb25tZW50IGZvciBnaXZpbmcgY2FyZS5cclxuICAgKi9cclxuICBGaWVsZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBob21lOiBBbiBlbmNvdW50ZXIgd2hlcmUgdGhlIHByYWN0aXRpb25lciB2aXNpdHMgdGhlIHBhdGllbnQgYXQgaGlzL2hlciBob21lLlxyXG4gICAqL1xyXG4gIEhvbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW5wYXRpZW50OiBBbiBlbmNvdW50ZXIgZHVyaW5nIHdoaWNoIHRoZSBwYXRpZW50IGlzIGhvc3BpdGFsaXplZCBhbmQgc3RheXMgb3Zlcm5pZ2h0LlxyXG4gICAqL1xyXG4gIElucGF0aWVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvdGhlcjogQW55IG90aGVyIGVuY291bnRlciB0eXBlIHRoYXQgaXMgbm90IGRlc2NyaWJlZCBieSBvbmUgb2YgdGhlIG90aGVyIHZhbHVlcy4gV2hlcmUgdGhpcyBpcyB1c2VkIGl0IGlzIGV4cGVjdGVkIHRoYXQgYW4gaW1wbGVtZW50ZXIgd2lsbCBpbmNsdWRlIGFuIGV4dGVuc2lvbiB2YWx1ZSB0byBkZWZpbmUgd2hhdCB0aGUgYWN0dWFsIG90aGVyIHR5cGUgaXMuXHJcbiAgICovXHJcbiAgT3RoZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3V0cGF0aWVudDogQW4gZW5jb3VudGVyIGR1cmluZyB3aGljaCB0aGUgcGF0aWVudCBpcyBub3QgaG9zcGl0YWxpemVkIG92ZXJuaWdodC5cclxuICAgKi9cclxuICBPdXRwYXRpZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHZpcnR1YWw6IEFuIGVuY291bnRlciB0aGF0IHRha2VzIHBsYWNlIHdoZXJlIHRoZSBwYXRpZW50IGFuZCBwcmFjdGl0aW9uZXIgZG8gbm90IHBoeXNpY2FsbHkgbWVldCBidXQgdXNlIGVsZWN0cm9uaWMgbWVhbnMgZm9yIGNvbnRhY3QuXHJcbiAgICovXHJcbiAgVmlydHVhbDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENsYXNzaWZpY2F0aW9uIG9mIHRoZSBlbmNvdW50ZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBFbmNvdW50ZXJDbGFzc0NvZGluZ3M6RW5jb3VudGVyQ2xhc3NDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFtYnVsYXRvcnk6IEFuIGVuY291bnRlciB3aGVyZSB0aGUgcGF0aWVudCB2aXNpdHMgdGhlIHByYWN0aXRpb25lciBpbiBoaXMvaGVyIG9mZmljZSwgZS5nLiBhIEcuUC4gdmlzaXQuXHJcbiAgICovXHJcbiAgQW1idWxhdG9yeToge1xyXG4gICAgZGlzcGxheTogXCJBbWJ1bGF0b3J5XCIsXHJcbiAgICBjb2RlOiBcImFtYnVsYXRvcnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1jbGFzc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF5dGltZTogQW4gZW5jb3VudGVyIHdoZXJlIHRoZSBwYXRpZW50IG5lZWRzIG1vcmUgcHJvbG9uZ2VkIHRyZWF0bWVudCBvciBpbnZlc3RpZ2F0aW9ucyB0aGFuIG91dHBhdGllbnRzLCBidXQgd2hvIGRvIG5vdCBuZWVkIHRvIHN0YXkgaW4gdGhlIGhvc3BpdGFsIG92ZXJuaWdodC5cclxuICAgKi9cclxuICBEYXl0aW1lOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRheXRpbWVcIixcclxuICAgIGNvZGU6IFwiZGF5dGltZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLWNsYXNzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbWVyZ2VuY3k6IEFuIGVuY291bnRlciBpbiB0aGUgRW1lcmdlbmN5IENhcmUgRGVwYXJ0bWVudC5cclxuICAgKi9cclxuICBFbWVyZ2VuY3k6IHtcclxuICAgIGRpc3BsYXk6IFwiRW1lcmdlbmN5XCIsXHJcbiAgICBjb2RlOiBcImVtZXJnZW5jeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLWNsYXNzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmaWVsZDogQW4gZW5jb3VudGVyIHRha2luZyBwbGFjZSBvdXRzaWRlIHRoZSByZWd1bGFyIGVudmlyb25tZW50IGZvciBnaXZpbmcgY2FyZS5cclxuICAgKi9cclxuICBGaWVsZDoge1xyXG4gICAgZGlzcGxheTogXCJGaWVsZFwiLFxyXG4gICAgY29kZTogXCJmaWVsZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLWNsYXNzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBob21lOiBBbiBlbmNvdW50ZXIgd2hlcmUgdGhlIHByYWN0aXRpb25lciB2aXNpdHMgdGhlIHBhdGllbnQgYXQgaGlzL2hlciBob21lLlxyXG4gICAqL1xyXG4gIEhvbWU6IHtcclxuICAgIGRpc3BsYXk6IFwiSG9tZVwiLFxyXG4gICAgY29kZTogXCJob21lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItY2xhc3NcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGlucGF0aWVudDogQW4gZW5jb3VudGVyIGR1cmluZyB3aGljaCB0aGUgcGF0aWVudCBpcyBob3NwaXRhbGl6ZWQgYW5kIHN0YXlzIG92ZXJuaWdodC5cclxuICAgKi9cclxuICBJbnBhdGllbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiSW5wYXRpZW50XCIsXHJcbiAgICBjb2RlOiBcImlucGF0aWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLWNsYXNzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvdGhlcjogQW55IG90aGVyIGVuY291bnRlciB0eXBlIHRoYXQgaXMgbm90IGRlc2NyaWJlZCBieSBvbmUgb2YgdGhlIG90aGVyIHZhbHVlcy4gV2hlcmUgdGhpcyBpcyB1c2VkIGl0IGlzIGV4cGVjdGVkIHRoYXQgYW4gaW1wbGVtZW50ZXIgd2lsbCBpbmNsdWRlIGFuIGV4dGVuc2lvbiB2YWx1ZSB0byBkZWZpbmUgd2hhdCB0aGUgYWN0dWFsIG90aGVyIHR5cGUgaXMuXHJcbiAgICovXHJcbiAgT3RoZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiT3RoZXJcIixcclxuICAgIGNvZGU6IFwib3RoZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1jbGFzc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3V0cGF0aWVudDogQW4gZW5jb3VudGVyIGR1cmluZyB3aGljaCB0aGUgcGF0aWVudCBpcyBub3QgaG9zcGl0YWxpemVkIG92ZXJuaWdodC5cclxuICAgKi9cclxuICBPdXRwYXRpZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIk91dHBhdGllbnRcIixcclxuICAgIGNvZGU6IFwib3V0cGF0aWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLWNsYXNzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2aXJ0dWFsOiBBbiBlbmNvdW50ZXIgdGhhdCB0YWtlcyBwbGFjZSB3aGVyZSB0aGUgcGF0aWVudCBhbmQgcHJhY3RpdGlvbmVyIGRvIG5vdCBwaHlzaWNhbGx5IG1lZXQgYnV0IHVzZSBlbGVjdHJvbmljIG1lYW5zIGZvciBjb250YWN0LlxyXG4gICAqL1xyXG4gIFZpcnR1YWw6IHtcclxuICAgIGRpc3BsYXk6IFwiVmlydHVhbFwiLFxyXG4gICAgY29kZTogXCJ2aXJ0dWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItY2xhc3NcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=