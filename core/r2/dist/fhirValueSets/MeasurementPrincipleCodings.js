// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measurement-principle|1.0.2
/**
 * Different measurement principle supported by the device.
 */
export const MeasurementPrincipleCodings = {
    /**
     * acoustical: Measurement is done using the acoustical principle.
     */
    MSPAcoustical: {
        display: "MSP Acoustical",
        code: "acoustical",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * biological: Measurement is done using the biological principle.
     */
    MSPBiological: {
        display: "MSP Biological",
        code: "biological",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * chemical: Measurement is done using the chemical principle.
     */
    MSPChemical: {
        display: "MSP Chemical",
        code: "chemical",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * electrical: Measurement is done using the electrical principle.
     */
    MSPElectrical: {
        display: "MSP Electrical",
        code: "electrical",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * impedance: Measurement is done using the impedance principle.
     */
    MSPImpedance: {
        display: "MSP Impedance",
        code: "impedance",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * manual: Measurement is done using the manual principle.
     */
    MSPManual: {
        display: "MSP Manual",
        code: "manual",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * mechanical: Measurement is done using the mechanical principle.
     */
    MSPMechanical: {
        display: "MSP Mechanical",
        code: "mechanical",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * nuclear: Measurement is done using the nuclear principle.
     */
    MSPNuclear: {
        display: "MSP Nuclear",
        code: "nuclear",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * optical: Measurement is done using the optical principle.
     */
    MSPOptical: {
        display: "MSP Optical",
        code: "optical",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * other: Measurement principle isn't in the list.
     */
    MSPOther: {
        display: "MSP Other",
        code: "other",
        system: "http://hl7.org/fhir/measurement-principle",
    },
    /**
     * thermal: Measurement is done using the thermal principle.
     */
    MSPThermal: {
        display: "MSP Thermal",
        code: "thermal",
        system: "http://hl7.org/fhir/measurement-principle",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZW1lbnRQcmluY2lwbGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlbWVudFByaW5jaXBsZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMEVBQTBFO0FBc0QxRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFrQztJQUN4RTs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lYXN1cmVtZW50LXByaW5jaXBsZXwxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIERpZmZlcmVudCBtZWFzdXJlbWVudCBwcmluY2lwbGUgc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWFzdXJlbWVudFByaW5jaXBsZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNvdXN0aWNhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgYWNvdXN0aWNhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQQWNvdXN0aWNhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBiaW9sb2dpY2FsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBiaW9sb2dpY2FsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BCaW9sb2dpY2FsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNoZW1pY2FsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBjaGVtaWNhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQQ2hlbWljYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZWxlY3RyaWNhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgZWxlY3RyaWNhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQRWxlY3RyaWNhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbXBlZGFuY2U6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIGltcGVkYW5jZSBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQSW1wZWRhbmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG1hbnVhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgbWFudWFsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BNYW51YWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWVjaGFuaWNhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgbWVjaGFuaWNhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQTWVjaGFuaWNhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBudWNsZWFyOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBudWNsZWFyIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BOdWNsZWFyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9wdGljYWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIG9wdGljYWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUE9wdGljYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IE1lYXN1cmVtZW50IHByaW5jaXBsZSBpc24ndCBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBNU1BPdGhlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0aGVybWFsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSB0aGVybWFsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BUaGVybWFsOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRGlmZmVyZW50IG1lYXN1cmVtZW50IHByaW5jaXBsZSBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWFzdXJlbWVudFByaW5jaXBsZUNvZGluZ3M6TWVhc3VyZW1lbnRQcmluY2lwbGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjb3VzdGljYWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIGFjb3VzdGljYWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUEFjb3VzdGljYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiTVNQIEFjb3VzdGljYWxcIixcclxuICAgIGNvZGU6IFwiYWNvdXN0aWNhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZW1lbnQtcHJpbmNpcGxlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBiaW9sb2dpY2FsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBiaW9sb2dpY2FsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BCaW9sb2dpY2FsOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1TUCBCaW9sb2dpY2FsXCIsXHJcbiAgICBjb2RlOiBcImJpb2xvZ2ljYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmVtZW50LXByaW5jaXBsZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY2hlbWljYWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIGNoZW1pY2FsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BDaGVtaWNhbDoge1xyXG4gICAgZGlzcGxheTogXCJNU1AgQ2hlbWljYWxcIixcclxuICAgIGNvZGU6IFwiY2hlbWljYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmVtZW50LXByaW5jaXBsZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZWxlY3RyaWNhbDogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgZWxlY3RyaWNhbCBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQRWxlY3RyaWNhbDoge1xyXG4gICAgZGlzcGxheTogXCJNU1AgRWxlY3RyaWNhbFwiLFxyXG4gICAgY29kZTogXCJlbGVjdHJpY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlbWVudC1wcmluY2lwbGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGltcGVkYW5jZTogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgaW1wZWRhbmNlIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BJbXBlZGFuY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiTVNQIEltcGVkYW5jZVwiLFxyXG4gICAgY29kZTogXCJpbXBlZGFuY2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmVtZW50LXByaW5jaXBsZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbWFudWFsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBtYW51YWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUE1hbnVhbDoge1xyXG4gICAgZGlzcGxheTogXCJNU1AgTWFudWFsXCIsXHJcbiAgICBjb2RlOiBcIm1hbnVhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZW1lbnQtcHJpbmNpcGxlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtZWNoYW5pY2FsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSBtZWNoYW5pY2FsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BNZWNoYW5pY2FsOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1TUCBNZWNoYW5pY2FsXCIsXHJcbiAgICBjb2RlOiBcIm1lY2hhbmljYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmVtZW50LXByaW5jaXBsZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbnVjbGVhcjogTWVhc3VyZW1lbnQgaXMgZG9uZSB1c2luZyB0aGUgbnVjbGVhciBwcmluY2lwbGUuXHJcbiAgICovXHJcbiAgTVNQTnVjbGVhcjoge1xyXG4gICAgZGlzcGxheTogXCJNU1AgTnVjbGVhclwiLFxyXG4gICAgY29kZTogXCJudWNsZWFyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlbWVudC1wcmluY2lwbGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9wdGljYWw6IE1lYXN1cmVtZW50IGlzIGRvbmUgdXNpbmcgdGhlIG9wdGljYWwgcHJpbmNpcGxlLlxyXG4gICAqL1xyXG4gIE1TUE9wdGljYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiTVNQIE9wdGljYWxcIixcclxuICAgIGNvZGU6IFwib3B0aWNhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZW1lbnQtcHJpbmNpcGxlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvdGhlcjogTWVhc3VyZW1lbnQgcHJpbmNpcGxlIGlzbid0IGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIE1TUE90aGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1TUCBPdGhlclwiLFxyXG4gICAgY29kZTogXCJvdGhlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZW1lbnQtcHJpbmNpcGxlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0aGVybWFsOiBNZWFzdXJlbWVudCBpcyBkb25lIHVzaW5nIHRoZSB0aGVybWFsIHByaW5jaXBsZS5cclxuICAgKi9cclxuICBNU1BUaGVybWFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1TUCBUaGVybWFsXCIsXHJcbiAgICBjb2RlOiBcInRoZXJtYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmVtZW50LXByaW5jaXBsZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==