// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-relationshiptypes|1.0.2
/**
 * Codes specifying how two observations are related.
 */
export const ObservationRelationshiptypesCodes = {
    /**
     * derived-from: The target resource (Observation or QuestionnaireResponse) is part of the information from which this observation value is derived. (e.g. calculated anion gap, Apgar score)  NOTE:  "derived-from" is only logical choice when referencing QuestionnaireResponse.
     */
    DerivedFrom: "derived-from",
    /**
     * has-member: This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    HasMember: "has-member",
    /**
     * interfered-by: The value of the target observation interferes (degrades quality, or prevents valid observation) with the semantics of the source observation (e.g. a hemolysis measure target from a plasma potassium measure which has no value).
     */
    InterferedBy: "interfered-by",
    /**
     * qualified-by: The value of the target observation qualifies (refines) the semantics of the source observation (e.g. a lipemia measure target from a plasma measure).
     */
    QualifiedBy: "qualified-by",
    /**
     * replaces: This observation replaces a previous observation (i.e. a revised value). The target observation is now obsolete.
     */
    Replaces: "replaces",
    /**
     * sequel-to: This observation follows the target observation (e.g. timed tests such as Glucose Tolerance Test).
     */
    SequelTo: "sequel-to",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9PYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsa0ZBQWtGO0FBRWxGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUNBQWlDLEdBQUc7SUFDL0M7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILFNBQVMsRUFBRSxZQUFZO0lBQ3ZCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLGVBQWU7SUFDN0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztJQUMzQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFdBQVc7Q0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L29ic2VydmF0aW9uLXJlbGF0aW9uc2hpcHR5cGVzfDEuMC4yXHJcblxyXG4vKipcclxuICogQ29kZXMgc3BlY2lmeWluZyBob3cgdHdvIG9ic2VydmF0aW9ucyBhcmUgcmVsYXRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBPYnNlcnZhdGlvblJlbGF0aW9uc2hpcHR5cGVzQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogZGVyaXZlZC1mcm9tOiBUaGUgdGFyZ2V0IHJlc291cmNlIChPYnNlcnZhdGlvbiBvciBRdWVzdGlvbm5haXJlUmVzcG9uc2UpIGlzIHBhcnQgb2YgdGhlIGluZm9ybWF0aW9uIGZyb20gd2hpY2ggdGhpcyBvYnNlcnZhdGlvbiB2YWx1ZSBpcyBkZXJpdmVkLiAoZS5nLiBjYWxjdWxhdGVkIGFuaW9uIGdhcCwgQXBnYXIgc2NvcmUpICBOT1RFOiAgXCJkZXJpdmVkLWZyb21cIiBpcyBvbmx5IGxvZ2ljYWwgY2hvaWNlIHdoZW4gcmVmZXJlbmNpbmcgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIERlcml2ZWRGcm9tOiBcImRlcml2ZWQtZnJvbVwiLFxyXG4gIC8qKlxyXG4gICAqIGhhcy1tZW1iZXI6IFRoaXMgb2JzZXJ2YXRpb24gaXMgYSBncm91cCBvYnNlcnZhdGlvbiAoZS5nLiBhIGJhdHRlcnksIGEgcGFuZWwgb2YgdGVzdHMsIGEgc2V0IG9mIHZpdGFsIHNpZ24gbWVhc3VyZW1lbnRzKSB0aGF0IGluY2x1ZGVzIHRoZSB0YXJnZXQgYXMgYSBtZW1iZXIgb2YgdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIEhhc01lbWJlcjogXCJoYXMtbWVtYmVyXCIsXHJcbiAgLyoqXHJcbiAgICogaW50ZXJmZXJlZC1ieTogVGhlIHZhbHVlIG9mIHRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gaW50ZXJmZXJlcyAoZGVncmFkZXMgcXVhbGl0eSwgb3IgcHJldmVudHMgdmFsaWQgb2JzZXJ2YXRpb24pIHdpdGggdGhlIHNlbWFudGljcyBvZiB0aGUgc291cmNlIG9ic2VydmF0aW9uIChlLmcuIGEgaGVtb2x5c2lzIG1lYXN1cmUgdGFyZ2V0IGZyb20gYSBwbGFzbWEgcG90YXNzaXVtIG1lYXN1cmUgd2hpY2ggaGFzIG5vIHZhbHVlKS5cclxuICAgKi9cclxuICBJbnRlcmZlcmVkQnk6IFwiaW50ZXJmZXJlZC1ieVwiLFxyXG4gIC8qKlxyXG4gICAqIHF1YWxpZmllZC1ieTogVGhlIHZhbHVlIG9mIHRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gcXVhbGlmaWVzIChyZWZpbmVzKSB0aGUgc2VtYW50aWNzIG9mIHRoZSBzb3VyY2Ugb2JzZXJ2YXRpb24gKGUuZy4gYSBsaXBlbWlhIG1lYXN1cmUgdGFyZ2V0IGZyb20gYSBwbGFzbWEgbWVhc3VyZSkuXHJcbiAgICovXHJcbiAgUXVhbGlmaWVkQnk6IFwicXVhbGlmaWVkLWJ5XCIsXHJcbiAgLyoqXHJcbiAgICogcmVwbGFjZXM6IFRoaXMgb2JzZXJ2YXRpb24gcmVwbGFjZXMgYSBwcmV2aW91cyBvYnNlcnZhdGlvbiAoaS5lLiBhIHJldmlzZWQgdmFsdWUpLiBUaGUgdGFyZ2V0IG9ic2VydmF0aW9uIGlzIG5vdyBvYnNvbGV0ZS5cclxuICAgKi9cclxuICBSZXBsYWNlczogXCJyZXBsYWNlc1wiLFxyXG4gIC8qKlxyXG4gICAqIHNlcXVlbC10bzogVGhpcyBvYnNlcnZhdGlvbiBmb2xsb3dzIHRoZSB0YXJnZXQgb2JzZXJ2YXRpb24gKGUuZy4gdGltZWQgdGVzdHMgc3VjaCBhcyBHbHVjb3NlIFRvbGVyYW5jZSBUZXN0KS5cclxuICAgKi9cclxuICBTZXF1ZWxUbzogXCJzZXF1ZWwtdG9cIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBzcGVjaWZ5aW5nIGhvdyB0d28gb2JzZXJ2YXRpb25zIGFyZSByZWxhdGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGVUeXBlID0gdHlwZW9mIE9ic2VydmF0aW9uUmVsYXRpb25zaGlwdHlwZXNDb2Rlc1trZXlvZiB0eXBlb2YgT2JzZXJ2YXRpb25SZWxhdGlvbnNoaXB0eXBlc0NvZGVzXTtcclxuIl19