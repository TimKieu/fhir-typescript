// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-response-code-types|1.0.2
/**
 * The type of response code to use for assertion.
 *
 * The response code to expect in the response.
 */
export const AssertResponseCodeTypesCodings = {
    /**
     * bad: Response code is 400.
     */
    Bad: {
        display: "bad",
        code: "bad",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * conflict: Response code is 409.
     */
    Conflict: {
        display: "conflict",
        code: "conflict",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * created: Response code is 201.
     */
    Created: {
        display: "created",
        code: "created",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * forbidden: Response code is 403.
     */
    Forbidden: {
        display: "forbidden",
        code: "forbidden",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * gone: Response code is 410.
     */
    Gone: {
        display: "gone",
        code: "gone",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * methodNotAllowed: Response code is 405.
     */
    MethodNotAllowed: {
        display: "methodNotAllowed",
        code: "methodNotAllowed",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * noContent: Response code is 204.
     */
    NoContent: {
        display: "noContent",
        code: "noContent",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * notFound: Response code is 404.
     */
    NotFound: {
        display: "notFound",
        code: "notFound",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * notModified: Response code is 304.
     */
    NotModified: {
        display: "notModified",
        code: "notModified",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * okay: Response code is 200.
     */
    Okay: {
        display: "okay",
        code: "okay",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * preconditionFailed: Response code is 412.
     */
    PreconditionFailed: {
        display: "preconditionFailed",
        code: "preconditionFailed",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * unprocessable: Response code is 422.
     */
    Unprocessable: {
        display: "unprocessable",
        code: "unprocessable",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Bc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBNEQvRTs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQXFDO0lBQzlFOztPQUVHO0lBQ0gsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzfDEuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgcmVzcG9uc2UgY29kZSB0byB1c2UgZm9yIGFzc2VydGlvbi5cclxuICogXHJcbiAqIFRoZSByZXNwb25zZSBjb2RlIHRvIGV4cGVjdCBpbiB0aGUgcmVzcG9uc2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmFkOiBSZXNwb25zZSBjb2RlIGlzIDQwMC5cclxuICAgKi9cclxuICBCYWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29uZmxpY3Q6IFJlc3BvbnNlIGNvZGUgaXMgNDA5LlxyXG4gICAqL1xyXG4gIENvbmZsaWN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZWQ6IFJlc3BvbnNlIGNvZGUgaXMgMjAxLlxyXG4gICAqL1xyXG4gIENyZWF0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZm9yYmlkZGVuOiBSZXNwb25zZSBjb2RlIGlzIDQwMy5cclxuICAgKi9cclxuICBGb3JiaWRkZW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ29uZTogUmVzcG9uc2UgY29kZSBpcyA0MTAuXHJcbiAgICovXHJcbiAgR29uZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtZXRob2ROb3RBbGxvd2VkOiBSZXNwb25zZSBjb2RlIGlzIDQwNS5cclxuICAgKi9cclxuICBNZXRob2ROb3RBbGxvd2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vQ29udGVudDogUmVzcG9uc2UgY29kZSBpcyAyMDQuXHJcbiAgICovXHJcbiAgTm9Db250ZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdEZvdW5kOiBSZXNwb25zZSBjb2RlIGlzIDQwNC5cclxuICAgKi9cclxuICBOb3RGb3VuZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3RNb2RpZmllZDogUmVzcG9uc2UgY29kZSBpcyAzMDQuXHJcbiAgICovXHJcbiAgTm90TW9kaWZpZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb2theTogUmVzcG9uc2UgY29kZSBpcyAyMDAuXHJcbiAgICovXHJcbiAgT2theTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcmVjb25kaXRpb25GYWlsZWQ6IFJlc3BvbnNlIGNvZGUgaXMgNDEyLlxyXG4gICAqL1xyXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bnByb2Nlc3NhYmxlOiBSZXNwb25zZSBjb2RlIGlzIDQyMi5cclxuICAgKi9cclxuICBVbnByb2Nlc3NhYmxlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgcmVzcG9uc2UgY29kZSB0byB1c2UgZm9yIGFzc2VydGlvbi5cclxuICogXHJcbiAqIFRoZSByZXNwb25zZSBjb2RlIHRvIGV4cGVjdCBpbiB0aGUgcmVzcG9uc2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RpbmdzOkFzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBiYWQ6IFJlc3BvbnNlIGNvZGUgaXMgNDAwLlxyXG4gICAqL1xyXG4gIEJhZDoge1xyXG4gICAgZGlzcGxheTogXCJiYWRcIixcclxuICAgIGNvZGU6IFwiYmFkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29uZmxpY3Q6IFJlc3BvbnNlIGNvZGUgaXMgNDA5LlxyXG4gICAqL1xyXG4gIENvbmZsaWN0OiB7XHJcbiAgICBkaXNwbGF5OiBcImNvbmZsaWN0XCIsXHJcbiAgICBjb2RlOiBcImNvbmZsaWN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY3JlYXRlZDogUmVzcG9uc2UgY29kZSBpcyAyMDEuXHJcbiAgICovXHJcbiAgQ3JlYXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJjcmVhdGVkXCIsXHJcbiAgICBjb2RlOiBcImNyZWF0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmb3JiaWRkZW46IFJlc3BvbnNlIGNvZGUgaXMgNDAzLlxyXG4gICAqL1xyXG4gIEZvcmJpZGRlbjoge1xyXG4gICAgZGlzcGxheTogXCJmb3JiaWRkZW5cIixcclxuICAgIGNvZGU6IFwiZm9yYmlkZGVuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ29uZTogUmVzcG9uc2UgY29kZSBpcyA0MTAuXHJcbiAgICovXHJcbiAgR29uZToge1xyXG4gICAgZGlzcGxheTogXCJnb25lXCIsXHJcbiAgICBjb2RlOiBcImdvbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtZXRob2ROb3RBbGxvd2VkOiBSZXNwb25zZSBjb2RlIGlzIDQwNS5cclxuICAgKi9cclxuICBNZXRob2ROb3RBbGxvd2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIm1ldGhvZE5vdEFsbG93ZWRcIixcclxuICAgIGNvZGU6IFwibWV0aG9kTm90QWxsb3dlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vQ29udGVudDogUmVzcG9uc2UgY29kZSBpcyAyMDQuXHJcbiAgICovXHJcbiAgTm9Db250ZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcIm5vQ29udGVudFwiLFxyXG4gICAgY29kZTogXCJub0NvbnRlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3RGb3VuZDogUmVzcG9uc2UgY29kZSBpcyA0MDQuXHJcbiAgICovXHJcbiAgTm90Rm91bmQ6IHtcclxuICAgIGRpc3BsYXk6IFwibm90Rm91bmRcIixcclxuICAgIGNvZGU6IFwibm90Rm91bmRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3RNb2RpZmllZDogUmVzcG9uc2UgY29kZSBpcyAzMDQuXHJcbiAgICovXHJcbiAgTm90TW9kaWZpZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwibm90TW9kaWZpZWRcIixcclxuICAgIGNvZGU6IFwibm90TW9kaWZpZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBva2F5OiBSZXNwb25zZSBjb2RlIGlzIDIwMC5cclxuICAgKi9cclxuICBPa2F5OiB7XHJcbiAgICBkaXNwbGF5OiBcIm9rYXlcIixcclxuICAgIGNvZGU6IFwib2theVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByZWNvbmRpdGlvbkZhaWxlZDogUmVzcG9uc2UgY29kZSBpcyA0MTIuXHJcbiAgICovXHJcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcInByZWNvbmRpdGlvbkZhaWxlZFwiLFxyXG4gICAgY29kZTogXCJwcmVjb25kaXRpb25GYWlsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bnByb2Nlc3NhYmxlOiBSZXNwb25zZSBjb2RlIGlzIDQyMi5cclxuICAgKi9cclxuICBVbnByb2Nlc3NhYmxlOiB7XHJcbiAgICBkaXNwbGF5OiBcInVucHJvY2Vzc2FibGVcIixcclxuICAgIGNvZGU6IFwidW5wcm9jZXNzYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=