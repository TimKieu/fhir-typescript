// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medication-order-status|1.0.2
/**
 * A code specifying the state of the prescribing event. Describes the lifecycle of the prescription.
 */
export const MedicationOrderStatusCodings = {
    /**
     * active: The prescription is 'actionable', but not all actions that are implied by it have occurred yet.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/medication-order-status",
    },
    /**
     * completed: All actions that are implied by the prescription have occurred.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/medication-order-status",
    },
    /**
     * draft: The prescription is not yet 'actionable', i.e. it is a work in progress, requires sign-off or verification, and needs to be run through decision support process.
     */
    Draft: {
        display: "Draft",
        code: "draft",
        system: "http://hl7.org/fhir/medication-order-status",
    },
    /**
     * entered-in-error: The prescription was entered in error.
     */
    EnteredInError: {
        display: "Entered In Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/medication-order-status",
    },
    /**
     * on-hold: Actions implied by the prescription are to be temporarily halted, but are expected to continue later.  May also be called "suspended".
     */
    OnHold: {
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/medication-order-status",
    },
    /**
     * stopped: Actions implied by the prescription are to be permanently halted, before all of them occurred.
     */
    Stopped: {
        display: "Stopped",
        code: "stopped",
        system: "http://hl7.org/fhir/medication-order-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbk9yZGVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbk9yZGVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0RUFBNEU7QUFrQzVFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQW1DO0lBQzFFOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsNkNBQTZDO0tBQ3REO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsNkNBQTZDO0tBQ3REO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSw2Q0FBNkM7S0FDdEQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsNkNBQTZDO0tBQ3REO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw2Q0FBNkM7S0FDdEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDZDQUE2QztLQUN0RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVkaWNhdGlvbi1vcmRlci1zdGF0dXN8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgc3BlY2lmeWluZyB0aGUgc3RhdGUgb2YgdGhlIHByZXNjcmliaW5nIGV2ZW50LiBEZXNjcmliZXMgdGhlIGxpZmVjeWNsZSBvZiB0aGUgcHJlc2NyaXB0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVkaWNhdGlvbk9yZGVyU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSBwcmVzY3JpcHRpb24gaXMgJ2FjdGlvbmFibGUnLCBidXQgbm90IGFsbCBhY3Rpb25zIHRoYXQgYXJlIGltcGxpZWQgYnkgaXQgaGF2ZSBvY2N1cnJlZCB5ZXQuXHJcbiAgICovXHJcbiAgQWN0aXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogQWxsIGFjdGlvbnMgdGhhdCBhcmUgaW1wbGllZCBieSB0aGUgcHJlc2NyaXB0aW9uIGhhdmUgb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgcHJlc2NyaXB0aW9uIGlzIG5vdCB5ZXQgJ2FjdGlvbmFibGUnLCBpLmUuIGl0IGlzIGEgd29yayBpbiBwcm9ncmVzcywgcmVxdWlyZXMgc2lnbi1vZmYgb3IgdmVyaWZpY2F0aW9uLCBhbmQgbmVlZHMgdG8gYmUgcnVuIHRocm91Z2ggZGVjaXNpb24gc3VwcG9ydCBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIERyYWZ0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBwcmVzY3JpcHRpb24gd2FzIGVudGVyZWQgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogQWN0aW9ucyBpbXBsaWVkIGJ5IHRoZSBwcmVzY3JpcHRpb24gYXJlIHRvIGJlIHRlbXBvcmFyaWx5IGhhbHRlZCwgYnV0IGFyZSBleHBlY3RlZCB0byBjb250aW51ZSBsYXRlci4gIE1heSBhbHNvIGJlIGNhbGxlZCBcInN1c3BlbmRlZFwiLlxyXG4gICAqL1xyXG4gIE9uSG9sZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBBY3Rpb25zIGltcGxpZWQgYnkgdGhlIHByZXNjcmlwdGlvbiBhcmUgdG8gYmUgcGVybWFuZW50bHkgaGFsdGVkLCBiZWZvcmUgYWxsIG9mIHRoZW0gb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgU3RvcHBlZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY29kZSBzcGVjaWZ5aW5nIHRoZSBzdGF0ZSBvZiB0aGUgcHJlc2NyaWJpbmcgZXZlbnQuIERlc2NyaWJlcyB0aGUgbGlmZWN5Y2xlIG9mIHRoZSBwcmVzY3JpcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVkaWNhdGlvbk9yZGVyU3RhdHVzQ29kaW5nczpNZWRpY2F0aW9uT3JkZXJTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIHByZXNjcmlwdGlvbiBpcyAnYWN0aW9uYWJsZScsIGJ1dCBub3QgYWxsIGFjdGlvbnMgdGhhdCBhcmUgaW1wbGllZCBieSBpdCBoYXZlIG9jY3VycmVkIHlldC5cclxuICAgKi9cclxuICBBY3RpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImFjdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVkaWNhdGlvbi1vcmRlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogQWxsIGFjdGlvbnMgdGhhdCBhcmUgaW1wbGllZCBieSB0aGUgcHJlc2NyaXB0aW9uIGhhdmUgb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lZGljYXRpb24tb3JkZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkcmFmdDogVGhlIHByZXNjcmlwdGlvbiBpcyBub3QgeWV0ICdhY3Rpb25hYmxlJywgaS5lLiBpdCBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MsIHJlcXVpcmVzIHNpZ24tb2ZmIG9yIHZlcmlmaWNhdGlvbiwgYW5kIG5lZWRzIHRvIGJlIHJ1biB0aHJvdWdoIGRlY2lzaW9uIHN1cHBvcnQgcHJvY2Vzcy5cclxuICAgKi9cclxuICBEcmFmdDoge1xyXG4gICAgZGlzcGxheTogXCJEcmFmdFwiLFxyXG4gICAgY29kZTogXCJkcmFmdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVkaWNhdGlvbi1vcmRlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBwcmVzY3JpcHRpb24gd2FzIGVudGVyZWQgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBJbiBFcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWRpY2F0aW9uLW9yZGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogQWN0aW9ucyBpbXBsaWVkIGJ5IHRoZSBwcmVzY3JpcHRpb24gYXJlIHRvIGJlIHRlbXBvcmFyaWx5IGhhbHRlZCwgYnV0IGFyZSBleHBlY3RlZCB0byBjb250aW51ZSBsYXRlci4gIE1heSBhbHNvIGJlIGNhbGxlZCBcInN1c3BlbmRlZFwiLlxyXG4gICAqL1xyXG4gIE9uSG9sZDoge1xyXG4gICAgZGlzcGxheTogXCJPbiBIb2xkXCIsXHJcbiAgICBjb2RlOiBcIm9uLWhvbGRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lZGljYXRpb24tb3JkZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBBY3Rpb25zIGltcGxpZWQgYnkgdGhlIHByZXNjcmlwdGlvbiBhcmUgdG8gYmUgcGVybWFuZW50bHkgaGFsdGVkLCBiZWZvcmUgYWxsIG9mIHRoZW0gb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgU3RvcHBlZDoge1xyXG4gICAgZGlzcGxheTogXCJTdG9wcGVkXCIsXHJcbiAgICBjb2RlOiBcInN0b3BwZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lZGljYXRpb24tb3JkZXItc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19