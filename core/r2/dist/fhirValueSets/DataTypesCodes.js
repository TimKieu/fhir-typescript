// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/data-types|1.0.2
/**
 * The type of an element - one of the FHIR data types.
 */
export const DataTypesCodes = {
    /**
     * Address: There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
     */
    Address: "Address",
    /**
     * Code: Age
     */
    Age: "Age",
    /**
     * Annotation: A  text note which also  contains information about who made the statement and when.
     */
    Annotation: "Annotation",
    /**
     * Attachment: For referring to data content defined in other formats.
     */
    Attachment: "Attachment",
    /**
     * BackboneElement: Base definition for all elements that are defined inside a resource - but not those in a data type.
     */
    BackboneElement: "BackboneElement",
    /**
     * base64Binary: A stream of bytes
     */
    Base64Binary: "base64Binary",
    /**
     * boolean: Value of "true" or "false"
     */
    VALBoolean: "boolean",
    /**
     * code: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
     */
    Code: "code",
    /**
     * CodeableConcept: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
     */
    CodeableConcept: "CodeableConcept",
    /**
     * Coding: A reference to a code defined by a terminology system.
     */
    Coding: "Coding",
    /**
     * ContactPoint: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
     */
    ContactPoint: "ContactPoint",
    /**
     * Code: Count
     */
    Count: "Count",
    /**
     * date: A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
     */
    Date: "date",
    /**
     * dateTime: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
     */
    DateTime: "dateTime",
    /**
     * decimal: A rational number with implicit precision
     */
    Decimal: "decimal",
    /**
     * Code: Distance
     */
    Distance: "Distance",
    /**
     * Code: Duration
     */
    Duration: "Duration",
    /**
     * Element: Base definition for all elements in a resource.
     */
    VALElement: "Element",
    /**
     * ElementDefinition: Captures constraints on each element within the resource, profile, or extension.
     */
    ElementDefinition: "ElementDefinition",
    /**
     * Extension: Optional Extensions Element - found in all resources.
     */
    Extension: "Extension",
    /**
     * HumanName: A human's name with the ability to identify parts and usage.
     */
    HumanName: "HumanName",
    /**
     * id: Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
     */
    Id: "id",
    /**
     * Identifier: A technical identifier - identifies some entity uniquely and unambiguously.
     */
    Identifier: "Identifier",
    /**
     * instant: An instant in time - known at least to the second
     */
    Instant: "instant",
    /**
     * integer: A whole number
     */
    Integer: "integer",
    /**
     * markdown: A string that may contain markdown syntax for optional processing by a mark down presentation engine
     */
    Markdown: "markdown",
    /**
     * Meta: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
     */
    Meta: "Meta",
    /**
     * Code: Money
     */
    Money: "Money",
    /**
     * Narrative: A human-readable formatted text, including images.
     */
    Narrative: "Narrative",
    /**
     * oid: An oid represented as a URI
     */
    Oid: "oid",
    /**
     * Period: A time period defined by a start and end date and optionally time.
     */
    Period: "Period",
    /**
     * positiveInt: An integer with a value that is positive (e.g. &gt;0)
     */
    PositiveInt: "positiveInt",
    /**
     * Quantity: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
     */
    Quantity: "Quantity",
    /**
     * Range: A set of ordered Quantities defined by a low and high limit.
     */
    Range: "Range",
    /**
     * Ratio: A relationship of two Quantity values - expressed as a numerator and a denominator.
     */
    Ratio: "Ratio",
    /**
     * Reference: A reference from one resource to another.
     */
    Reference: "Reference",
    /**
     * SampledData: A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
     */
    SampledData: "SampledData",
    /**
     * Signature: A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
     */
    Signature: "Signature",
    /**
     * Code: SimpleQuantity
     */
    SimpleQuantity: "SimpleQuantity",
    /**
     * string: A sequence of Unicode characters
     */
    VALString: "string",
    /**
     * time: A time during the day, with no date specified
     */
    Time: "time",
    /**
     * Timing: Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
     */
    Timing: "Timing",
    /**
     * unsignedInt: An integer with a value that is not negative (e.g. &gt;= 0)
     */
    UnsignedInt: "unsignedInt",
    /**
     * uri: String of characters used to identify a name or a resource
     */
    Uri: "uri",
    /**
     * uuid: A UUID, represented as a URI
     */
    Uuid: "uuid",
    /**
     * xhtml: XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
     */
    XHTML: "xhtml",
};
//# sourceMappingURL=data:application/json;base64,