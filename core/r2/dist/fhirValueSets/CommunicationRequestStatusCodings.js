// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/communication-request-status|1.0.2
/**
 * The status of the communication.
 */
export const CommunicationRequestStatusCodings = {
    /**
     * accepted: The receiving system has accepted the order, but work has not yet commenced.
     */
    Accepted: {
        display: "Accepted",
        code: "accepted",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * completed: The work has been complete, the report(s) released, and no further work is planned.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * failed: The communication was attempted, but due to some procedural error, it could not be completed.
     */
    Failed: {
        display: "Failed",
        code: "failed",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * in-progress: The work to fulfill the order is happening.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * planned: The request has been planned.
     */
    Planned: {
        display: "Planned",
        code: "planned",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * proposed: The request has been proposed.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * received: The receiving system has received the request but not yet decided whether it will be performed.
     */
    Received: {
        display: "Received",
        code: "received",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * rejected: The receiving system has declined to fulfill the request
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * requested: The request has been placed.
     */
    Requested: {
        display: "Requested",
        code: "requested",
        system: "http://hl7.org/fhir/communication-request-status",
    },
    /**
     * suspended: The request has been held by originating system/user request.
     */
    Suspended: {
        display: "Suspended",
        code: "suspended",
        system: "http://hl7.org/fhir/communication-request-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbXVuaWNhdGlvblJlcXVlc3RTdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db21tdW5pY2F0aW9uUmVxdWVzdFN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUZBQWlGO0FBa0RqRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUF3QztJQUNwRjs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb21tdW5pY2F0aW9uLXJlcXVlc3Qtc3RhdHVzfDEuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHN0YXR1cyBvZiB0aGUgY29tbXVuaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY2NlcHRlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIGFjY2VwdGVkIHRoZSBvcmRlciwgYnV0IHdvcmsgaGFzIG5vdCB5ZXQgY29tbWVuY2VkLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIHdvcmsgaGFzIGJlZW4gY29tcGxldGUsIHRoZSByZXBvcnQocykgcmVsZWFzZWQsIGFuZCBubyBmdXJ0aGVyIHdvcmsgaXMgcGxhbm5lZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmFpbGVkOiBUaGUgY29tbXVuaWNhdGlvbiB3YXMgYXR0ZW1wdGVkLCBidXQgZHVlIHRvIHNvbWUgcHJvY2VkdXJhbCBlcnJvciwgaXQgY291bGQgbm90IGJlIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBGYWlsZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW4tcHJvZ3Jlc3M6IFRoZSB3b3JrIHRvIGZ1bGZpbGwgdGhlIG9yZGVyIGlzIGhhcHBlbmluZy5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBsYW5uZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgUGxhbm5lZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm9wb3NlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcHJvcG9zZWQuXHJcbiAgICovXHJcbiAgUHJvcG9zZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVjZWl2ZWQ6IFRoZSByZWNlaXZpbmcgc3lzdGVtIGhhcyByZWNlaXZlZCB0aGUgcmVxdWVzdCBidXQgbm90IHlldCBkZWNpZGVkIHdoZXRoZXIgaXQgd2lsbCBiZSBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgUmVjZWl2ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSByZWNlaXZpbmcgc3lzdGVtIGhhcyBkZWNsaW5lZCB0byBmdWxmaWxsIHRoZSByZXF1ZXN0XHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVxdWVzdGVkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBwbGFjZWQuXHJcbiAgICovXHJcbiAgUmVxdWVzdGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1c3BlbmRlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gaGVsZCBieSBvcmlnaW5hdGluZyBzeXN0ZW0vdXNlciByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIFN1c3BlbmRlZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBzdGF0dXMgb2YgdGhlIGNvbW11bmljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29tbXVuaWNhdGlvblJlcXVlc3RTdGF0dXNDb2RpbmdzOkNvbW11bmljYXRpb25SZXF1ZXN0U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY2NlcHRlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIGFjY2VwdGVkIHRoZSBvcmRlciwgYnV0IHdvcmsgaGFzIG5vdCB5ZXQgY29tbWVuY2VkLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjY2VwdGVkXCIsXHJcbiAgICBjb2RlOiBcImFjY2VwdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb21tdW5pY2F0aW9uLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSB3b3JrIGhhcyBiZWVuIGNvbXBsZXRlLCB0aGUgcmVwb3J0KHMpIHJlbGVhc2VkLCBhbmQgbm8gZnVydGhlciB3b3JrIGlzIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbW11bmljYXRpb24tcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZhaWxlZDogVGhlIGNvbW11bmljYXRpb24gd2FzIGF0dGVtcHRlZCwgYnV0IGR1ZSB0byBzb21lIHByb2NlZHVyYWwgZXJyb3IsIGl0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgRmFpbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkZhaWxlZFwiLFxyXG4gICAgY29kZTogXCJmYWlsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbW11bmljYXRpb24tcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgd29yayB0byBmdWxmaWxsIHRoZSBvcmRlciBpcyBoYXBwZW5pbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhbm5lZC5cclxuICAgKi9cclxuICBQbGFubmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5uZWRcIixcclxuICAgIGNvZGU6IFwicGxhbm5lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHByb3Bvc2VkLlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3Bvc2VkXCIsXHJcbiAgICBjb2RlOiBcInByb3Bvc2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb21tdW5pY2F0aW9uLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWNlaXZlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIHJlY2VpdmVkIHRoZSByZXF1ZXN0IGJ1dCBub3QgeWV0IGRlY2lkZWQgd2hldGhlciBpdCB3aWxsIGJlIHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBSZWNlaXZlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZWNlaXZlZFwiLFxyXG4gICAgY29kZTogXCJyZWNlaXZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSByZWNlaXZpbmcgc3lzdGVtIGhhcyBkZWNsaW5lZCB0byBmdWxmaWxsIHRoZSByZXF1ZXN0XHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVqZWN0ZWRcIixcclxuICAgIGNvZGU6IFwicmVqZWN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbW11bmljYXRpb24tcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlcXVlc3RlZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhY2VkLlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZXF1ZXN0ZWRcIixcclxuICAgIGNvZGU6IFwicmVxdWVzdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb21tdW5pY2F0aW9uLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdXNwZW5kZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIGhlbGQgYnkgb3JpZ2luYXRpbmcgc3lzdGVtL3VzZXIgcmVxdWVzdC5cclxuICAgKi9cclxuICBTdXNwZW5kZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiU3VzcGVuZGVkXCIsXHJcbiAgICBjb2RlOiBcInN1c3BlbmRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29tbXVuaWNhdGlvbi1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==