// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-param-type|1.0.2
/**
 * Data types allowed to be used for search parameters.
 */
export const SearchParamTypeCodings = {
    /**
     * composite: A composite search parameter that combines a search on two values together.
     */
    Composite: {
        display: "Composite",
        code: "composite",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * date: Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
     */
    DateDateTime: {
        display: "Date/DateTime",
        code: "date",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * number: Search parameter SHALL be a number (a whole number, or a decimal).
     */
    Number: {
        display: "Number",
        code: "number",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * quantity: A search parameter that searches on a quantity.
     */
    Quantity: {
        display: "Quantity",
        code: "quantity",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * reference: A reference to another resource.
     */
    Reference: {
        display: "Reference",
        code: "reference",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * string: Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
     */
    String: {
        display: "String",
        code: "string",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * token: Search parameter on a coded element or identifier. May be used to search through the text, displayname, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
     */
    Token: {
        display: "Token",
        code: "token",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * uri: A search parameter that searches on a URI (RFC 3986).
     */
    URI: {
        display: "URI",
        code: "uri",
        system: "http://hl7.org/fhir/search-param-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoUGFyYW1UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU2VhcmNoUGFyYW1UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxzRUFBc0U7QUEwQ3RFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc2VhcmNoLXBhcmFtLXR5cGV8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBEYXRhIHR5cGVzIGFsbG93ZWQgdG8gYmUgdXNlZCBmb3Igc2VhcmNoIHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTZWFyY2hQYXJhbVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbXBvc2l0ZTogQSBjb21wb3NpdGUgc2VhcmNoIHBhcmFtZXRlciB0aGF0IGNvbWJpbmVzIGEgc2VhcmNoIG9uIHR3byB2YWx1ZXMgdG9nZXRoZXIuXHJcbiAgICovXHJcbiAgQ29tcG9zaXRlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGU6IFNlYXJjaCBwYXJhbWV0ZXIgaXMgb24gYSBkYXRlL3RpbWUuIFRoZSBkYXRlIGZvcm1hdCBpcyB0aGUgc3RhbmRhcmQgWE1MIGZvcm1hdCwgdGhvdWdoIG90aGVyIGZvcm1hdHMgbWF5IGJlIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBEYXRlRGF0ZVRpbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbnVtYmVyOiBTZWFyY2ggcGFyYW1ldGVyIFNIQUxMIGJlIGEgbnVtYmVyIChhIHdob2xlIG51bWJlciwgb3IgYSBkZWNpbWFsKS5cclxuICAgKi9cclxuICBOdW1iZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcXVhbnRpdHk6IEEgc2VhcmNoIHBhcmFtZXRlciB0aGF0IHNlYXJjaGVzIG9uIGEgcXVhbnRpdHkuXHJcbiAgICovXHJcbiAgUXVhbnRpdHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVmZXJlbmNlOiBBIHJlZmVyZW5jZSB0byBhbm90aGVyIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFJlZmVyZW5jZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzdHJpbmc6IFNlYXJjaCBwYXJhbWV0ZXIgaXMgYSBzaW1wbGUgc3RyaW5nLCBsaWtlIGEgbmFtZSBwYXJ0LiBTZWFyY2ggaXMgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgYWNjZW50LWluc2Vuc2l0aXZlLiBNYXkgbWF0Y2gganVzdCB0aGUgc3RhcnQgb2YgYSBzdHJpbmcuIFN0cmluZyBwYXJhbWV0ZXJzIG1heSBjb250YWluIHNwYWNlcy5cclxuICAgKi9cclxuICBTdHJpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdG9rZW46IFNlYXJjaCBwYXJhbWV0ZXIgb24gYSBjb2RlZCBlbGVtZW50IG9yIGlkZW50aWZpZXIuIE1heSBiZSB1c2VkIHRvIHNlYXJjaCB0aHJvdWdoIHRoZSB0ZXh0LCBkaXNwbGF5bmFtZSwgY29kZSBhbmQgY29kZS9jb2Rlc3lzdGVtIChmb3IgY29kZXMpIGFuZCBsYWJlbCwgc3lzdGVtIGFuZCBrZXkgKGZvciBpZGVudGlmaWVyKS4gSXRzIHZhbHVlIGlzIGVpdGhlciBhIHN0cmluZyBvciBhIHBhaXIgb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgc2VwYXJhdGVkIGJ5IGEgXCJ8XCIsIGRlcGVuZGluZyBvbiB0aGUgbW9kaWZpZXIgdXNlZC5cclxuICAgKi9cclxuICBUb2tlbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1cmk6IEEgc2VhcmNoIHBhcmFtZXRlciB0aGF0IHNlYXJjaGVzIG9uIGEgVVJJIChSRkMgMzk4NikuXHJcbiAgICovXHJcbiAgVVJJOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRGF0YSB0eXBlcyBhbGxvd2VkIHRvIGJlIHVzZWQgZm9yIHNlYXJjaCBwYXJhbWV0ZXJzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNlYXJjaFBhcmFtVHlwZUNvZGluZ3M6U2VhcmNoUGFyYW1UeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb21wb3NpdGU6IEEgY29tcG9zaXRlIHNlYXJjaCBwYXJhbWV0ZXIgdGhhdCBjb21iaW5lcyBhIHNlYXJjaCBvbiB0d28gdmFsdWVzIHRvZ2V0aGVyLlxyXG4gICAqL1xyXG4gIENvbXBvc2l0ZToge1xyXG4gICAgZGlzcGxheTogXCJDb21wb3NpdGVcIixcclxuICAgIGNvZGU6IFwiY29tcG9zaXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF0ZTogU2VhcmNoIHBhcmFtZXRlciBpcyBvbiBhIGRhdGUvdGltZS4gVGhlIGRhdGUgZm9ybWF0IGlzIHRoZSBzdGFuZGFyZCBYTUwgZm9ybWF0LCB0aG91Z2ggb3RoZXIgZm9ybWF0cyBtYXkgYmUgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIERhdGVEYXRlVGltZToge1xyXG4gICAgZGlzcGxheTogXCJEYXRlL0RhdGVUaW1lXCIsXHJcbiAgICBjb2RlOiBcImRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBudW1iZXI6IFNlYXJjaCBwYXJhbWV0ZXIgU0hBTEwgYmUgYSBudW1iZXIgKGEgd2hvbGUgbnVtYmVyLCBvciBhIGRlY2ltYWwpLlxyXG4gICAqL1xyXG4gIE51bWJlcjoge1xyXG4gICAgZGlzcGxheTogXCJOdW1iZXJcIixcclxuICAgIGNvZGU6IFwibnVtYmVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcXVhbnRpdHk6IEEgc2VhcmNoIHBhcmFtZXRlciB0aGF0IHNlYXJjaGVzIG9uIGEgcXVhbnRpdHkuXHJcbiAgICovXHJcbiAgUXVhbnRpdHk6IHtcclxuICAgIGRpc3BsYXk6IFwiUXVhbnRpdHlcIixcclxuICAgIGNvZGU6IFwicXVhbnRpdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWZlcmVuY2U6IEEgcmVmZXJlbmNlIHRvIGFub3RoZXIgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlZmVyZW5jZVwiLFxyXG4gICAgY29kZTogXCJyZWZlcmVuY2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdHJpbmc6IFNlYXJjaCBwYXJhbWV0ZXIgaXMgYSBzaW1wbGUgc3RyaW5nLCBsaWtlIGEgbmFtZSBwYXJ0LiBTZWFyY2ggaXMgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgYWNjZW50LWluc2Vuc2l0aXZlLiBNYXkgbWF0Y2gganVzdCB0aGUgc3RhcnQgb2YgYSBzdHJpbmcuIFN0cmluZyBwYXJhbWV0ZXJzIG1heSBjb250YWluIHNwYWNlcy5cclxuICAgKi9cclxuICBTdHJpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiU3RyaW5nXCIsXHJcbiAgICBjb2RlOiBcInN0cmluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRva2VuOiBTZWFyY2ggcGFyYW1ldGVyIG9uIGEgY29kZWQgZWxlbWVudCBvciBpZGVudGlmaWVyLiBNYXkgYmUgdXNlZCB0byBzZWFyY2ggdGhyb3VnaCB0aGUgdGV4dCwgZGlzcGxheW5hbWUsIGNvZGUgYW5kIGNvZGUvY29kZXN5c3RlbSAoZm9yIGNvZGVzKSBhbmQgbGFiZWwsIHN5c3RlbSBhbmQga2V5IChmb3IgaWRlbnRpZmllcikuIEl0cyB2YWx1ZSBpcyBlaXRoZXIgYSBzdHJpbmcgb3IgYSBwYWlyIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIHNlcGFyYXRlZCBieSBhIFwifFwiLCBkZXBlbmRpbmcgb24gdGhlIG1vZGlmaWVyIHVzZWQuXHJcbiAgICovXHJcbiAgVG9rZW46IHtcclxuICAgIGRpc3BsYXk6IFwiVG9rZW5cIixcclxuICAgIGNvZGU6IFwidG9rZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1cmk6IEEgc2VhcmNoIHBhcmFtZXRlciB0aGF0IHNlYXJjaGVzIG9uIGEgVVJJIChSRkMgMzk4NikuXHJcbiAgICovXHJcbiAgVVJJOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVSSVwiLFxyXG4gICAgY29kZTogXCJ1cmlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19