// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/answer-format|1.0.2
/**
 * The expected format of an answer.
 */
export const AnswerFormatCodes = {
    /**
     * attachment: Answer is binary content such as a image, PDF, etc.
     */
    Attachment: "attachment",
    /**
     * boolean: Answer is a yes/no answer.
     */
    Boolean: "boolean",
    /**
     * choice: Answer is a Coding drawn from a list of options.
     */
    Choice: "choice",
    /**
     * date: Answer is a date.
     */
    Date: "date",
    /**
     * dateTime: Answer is a date and time.
     */
    DateTime: "dateTime",
    /**
     * decimal: Answer is a floating point number.
     */
    Decimal: "decimal",
    /**
     * instant: Answer is a system timestamp.
     */
    Instant: "instant",
    /**
     * integer: Answer is an integer.
     */
    Integer: "integer",
    /**
     * open-choice: Answer is a Coding drawn from a list of options or a free-text entry.
     */
    OpenChoice: "open-choice",
    /**
     * quantity: Answer is a combination of a numeric value and unit, potentially with a comparator (&lt;, &gt;, etc.).
     */
    Quantity: "quantity",
    /**
     * reference: Answer is a reference to another resource (practitioner, organization, etc.).
     */
    Reference: "reference",
    /**
     * string: Answer is a short (few words to short sentence) free-text entry.
     */
    String: "string",
    /**
     * text: Answer is a long (potentially multi-paragraph) free-text entry (still captured as a string).
     */
    Text: "text",
    /**
     * time: Answer is a time (hour/minute/second) independent of date.
     */
    Time: "time",
    /**
     * url: Answer is a url (website, FTP site, etc.).
     */
    Url: "url",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5zd2VyRm9ybWF0Q29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0Fuc3dlckZvcm1hdENvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGtFQUFrRTtBQUVsRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9COztPQUVHO0lBQ0gsVUFBVSxFQUFFLFlBQVk7SUFDeEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yMi5jb3JlIHZlcnNpb246IDEuMC4yXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hbnN3ZXItZm9ybWF0fDEuMC4yXHJcblxyXG4vKipcclxuICogVGhlIGV4cGVjdGVkIGZvcm1hdCBvZiBhbiBhbnN3ZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQW5zd2VyRm9ybWF0Q29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYXR0YWNobWVudDogQW5zd2VyIGlzIGJpbmFyeSBjb250ZW50IHN1Y2ggYXMgYSBpbWFnZSwgUERGLCBldGMuXHJcbiAgICovXHJcbiAgQXR0YWNobWVudDogXCJhdHRhY2htZW50XCIsXHJcbiAgLyoqXHJcbiAgICogYm9vbGVhbjogQW5zd2VyIGlzIGEgeWVzL25vIGFuc3dlci5cclxuICAgKi9cclxuICBCb29sZWFuOiBcImJvb2xlYW5cIixcclxuICAvKipcclxuICAgKiBjaG9pY2U6IEFuc3dlciBpcyBhIENvZGluZyBkcmF3biBmcm9tIGEgbGlzdCBvZiBvcHRpb25zLlxyXG4gICAqL1xyXG4gIENob2ljZTogXCJjaG9pY2VcIixcclxuICAvKipcclxuICAgKiBkYXRlOiBBbnN3ZXIgaXMgYSBkYXRlLlxyXG4gICAqL1xyXG4gIERhdGU6IFwiZGF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBBbnN3ZXIgaXMgYSBkYXRlIGFuZCB0aW1lLlxyXG4gICAqL1xyXG4gIERhdGVUaW1lOiBcImRhdGVUaW1lXCIsXHJcbiAgLyoqXHJcbiAgICogZGVjaW1hbDogQW5zd2VyIGlzIGEgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLlxyXG4gICAqL1xyXG4gIERlY2ltYWw6IFwiZGVjaW1hbFwiLFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbnQ6IEFuc3dlciBpcyBhIHN5c3RlbSB0aW1lc3RhbXAuXHJcbiAgICovXHJcbiAgSW5zdGFudDogXCJpbnN0YW50XCIsXHJcbiAgLyoqXHJcbiAgICogaW50ZWdlcjogQW5zd2VyIGlzIGFuIGludGVnZXIuXHJcbiAgICovXHJcbiAgSW50ZWdlcjogXCJpbnRlZ2VyXCIsXHJcbiAgLyoqXHJcbiAgICogb3Blbi1jaG9pY2U6IEFuc3dlciBpcyBhIENvZGluZyBkcmF3biBmcm9tIGEgbGlzdCBvZiBvcHRpb25zIG9yIGEgZnJlZS10ZXh0IGVudHJ5LlxyXG4gICAqL1xyXG4gIE9wZW5DaG9pY2U6IFwib3Blbi1jaG9pY2VcIixcclxuICAvKipcclxuICAgKiBxdWFudGl0eTogQW5zd2VyIGlzIGEgY29tYmluYXRpb24gb2YgYSBudW1lcmljIHZhbHVlIGFuZCB1bml0LCBwb3RlbnRpYWxseSB3aXRoIGEgY29tcGFyYXRvciAoJmx0OywgJmd0OywgZXRjLikuXHJcbiAgICovXHJcbiAgUXVhbnRpdHk6IFwicXVhbnRpdHlcIixcclxuICAvKipcclxuICAgKiByZWZlcmVuY2U6IEFuc3dlciBpcyBhIHJlZmVyZW5jZSB0byBhbm90aGVyIHJlc291cmNlIChwcmFjdGl0aW9uZXIsIG9yZ2FuaXphdGlvbiwgZXRjLikuXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlOiBcInJlZmVyZW5jZVwiLFxyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogQW5zd2VyIGlzIGEgc2hvcnQgKGZldyB3b3JkcyB0byBzaG9ydCBzZW50ZW5jZSkgZnJlZS10ZXh0IGVudHJ5LlxyXG4gICAqL1xyXG4gIFN0cmluZzogXCJzdHJpbmdcIixcclxuICAvKipcclxuICAgKiB0ZXh0OiBBbnN3ZXIgaXMgYSBsb25nIChwb3RlbnRpYWxseSBtdWx0aS1wYXJhZ3JhcGgpIGZyZWUtdGV4dCBlbnRyeSAoc3RpbGwgY2FwdHVyZWQgYXMgYSBzdHJpbmcpLlxyXG4gICAqL1xyXG4gIFRleHQ6IFwidGV4dFwiLFxyXG4gIC8qKlxyXG4gICAqIHRpbWU6IEFuc3dlciBpcyBhIHRpbWUgKGhvdXIvbWludXRlL3NlY29uZCkgaW5kZXBlbmRlbnQgb2YgZGF0ZS5cclxuICAgKi9cclxuICBUaW1lOiBcInRpbWVcIixcclxuICAvKipcclxuICAgKiB1cmw6IEFuc3dlciBpcyBhIHVybCAod2Vic2l0ZSwgRlRQIHNpdGUsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIFVybDogXCJ1cmxcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgZXhwZWN0ZWQgZm9ybWF0IG9mIGFuIGFuc3dlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFuc3dlckZvcm1hdENvZGVUeXBlID0gdHlwZW9mIEFuc3dlckZvcm1hdENvZGVzW2tleW9mIHR5cGVvZiBBbnN3ZXJGb3JtYXRDb2Rlc107XHJcbiJdfQ==