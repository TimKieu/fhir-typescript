// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/guide-resource-purpose|1.0.2
/**
 * Why a resource is included in the guide.
 */
export const GuideResourcePurposeCodings = {
    /**
     * dictionary: The resource contains a dictionary that is part of the implementation guide.
     */
    Dictionary: {
        display: "Dictionary",
        code: "dictionary",
        system: "http://hl7.org/fhir/guide-resource-purpose",
    },
    /**
     * example: The resource is intended as an example.
     */
    Example: {
        display: "Example",
        code: "example",
        system: "http://hl7.org/fhir/guide-resource-purpose",
    },
    /**
     * extension: The resource defines an extension (StructureDefinition) that is used in the implementation guide.
     */
    Extension: {
        display: "Extension",
        code: "extension",
        system: "http://hl7.org/fhir/guide-resource-purpose",
    },
    /**
     * logical: The resource defines a logical model (in a StructureDefinition) that is used in the implementation guide.
     */
    LogicalModel: {
        display: "Logical Model",
        code: "logical",
        system: "http://hl7.org/fhir/guide-resource-purpose",
    },
    /**
     * profile: The resource defines a profile (StructureDefinition) that is used in the implementation guide.
     */
    Profile: {
        display: "Profile",
        code: "profile",
        system: "http://hl7.org/fhir/guide-resource-purpose",
    },
    /**
     * terminology: The resource defines a value set or concept map used in the implementation guide.
     */
    Terminology: {
        display: "Terminology",
        code: "terminology",
        system: "http://hl7.org/fhir/guide-resource-purpose",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VpZGVSZXNvdXJjZVB1cnBvc2VDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9HdWlkZVJlc291cmNlUHVycG9zZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMkVBQTJFO0FBa0MzRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFrQztJQUN4RTs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNENBQTRDO0tBQ3JEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2d1aWRlLXJlc291cmNlLXB1cnBvc2V8MS4wLjJcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBXaHkgYSByZXNvdXJjZSBpcyBpbmNsdWRlZCBpbiB0aGUgZ3VpZGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHdWlkZVJlc291cmNlUHVycG9zZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGljdGlvbmFyeTogVGhlIHJlc291cmNlIGNvbnRhaW5zIGEgZGljdGlvbmFyeSB0aGF0IGlzIHBhcnQgb2YgdGhlIGltcGxlbWVudGF0aW9uIGd1aWRlLlxyXG4gICAqL1xyXG4gIERpY3Rpb25hcnk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZXhhbXBsZTogVGhlIHJlc291cmNlIGlzIGludGVuZGVkIGFzIGFuIGV4YW1wbGUuXHJcbiAgICovXHJcbiAgRXhhbXBsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBleHRlbnNpb246IFRoZSByZXNvdXJjZSBkZWZpbmVzIGFuIGV4dGVuc2lvbiAoU3RydWN0dXJlRGVmaW5pdGlvbikgdGhhdCBpcyB1c2VkIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBndWlkZS5cclxuICAgKi9cclxuICBFeHRlbnNpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbG9naWNhbDogVGhlIHJlc291cmNlIGRlZmluZXMgYSBsb2dpY2FsIG1vZGVsIChpbiBhIFN0cnVjdHVyZURlZmluaXRpb24pIHRoYXQgaXMgdXNlZCBpbiB0aGUgaW1wbGVtZW50YXRpb24gZ3VpZGUuXHJcbiAgICovXHJcbiAgTG9naWNhbE1vZGVsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb2ZpbGU6IFRoZSByZXNvdXJjZSBkZWZpbmVzIGEgcHJvZmlsZSAoU3RydWN0dXJlRGVmaW5pdGlvbikgdGhhdCBpcyB1c2VkIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBndWlkZS5cclxuICAgKi9cclxuICBQcm9maWxlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRlcm1pbm9sb2d5OiBUaGUgcmVzb3VyY2UgZGVmaW5lcyBhIHZhbHVlIHNldCBvciBjb25jZXB0IG1hcCB1c2VkIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBndWlkZS5cclxuICAgKi9cclxuICBUZXJtaW5vbG9neTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFdoeSBhIHJlc291cmNlIGlzIGluY2x1ZGVkIGluIHRoZSBndWlkZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBHdWlkZVJlc291cmNlUHVycG9zZUNvZGluZ3M6R3VpZGVSZXNvdXJjZVB1cnBvc2VDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRpY3Rpb25hcnk6IFRoZSByZXNvdXJjZSBjb250YWlucyBhIGRpY3Rpb25hcnkgdGhhdCBpcyBwYXJ0IG9mIHRoZSBpbXBsZW1lbnRhdGlvbiBndWlkZS5cclxuICAgKi9cclxuICBEaWN0aW9uYXJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIkRpY3Rpb25hcnlcIixcclxuICAgIGNvZGU6IFwiZGljdGlvbmFyeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcmVzb3VyY2UtcHVycG9zZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXhhbXBsZTogVGhlIHJlc291cmNlIGlzIGludGVuZGVkIGFzIGFuIGV4YW1wbGUuXHJcbiAgICovXHJcbiAgRXhhbXBsZToge1xyXG4gICAgZGlzcGxheTogXCJFeGFtcGxlXCIsXHJcbiAgICBjb2RlOiBcImV4YW1wbGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRlLXJlc291cmNlLXB1cnBvc2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGV4dGVuc2lvbjogVGhlIHJlc291cmNlIGRlZmluZXMgYW4gZXh0ZW5zaW9uIChTdHJ1Y3R1cmVEZWZpbml0aW9uKSB0aGF0IGlzIHVzZWQgaW4gdGhlIGltcGxlbWVudGF0aW9uIGd1aWRlLlxyXG4gICAqL1xyXG4gIEV4dGVuc2lvbjoge1xyXG4gICAgZGlzcGxheTogXCJFeHRlbnNpb25cIixcclxuICAgIGNvZGU6IFwiZXh0ZW5zaW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ndWlkZS1yZXNvdXJjZS1wdXJwb3NlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsb2dpY2FsOiBUaGUgcmVzb3VyY2UgZGVmaW5lcyBhIGxvZ2ljYWwgbW9kZWwgKGluIGEgU3RydWN0dXJlRGVmaW5pdGlvbikgdGhhdCBpcyB1c2VkIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBndWlkZS5cclxuICAgKi9cclxuICBMb2dpY2FsTW9kZWw6IHtcclxuICAgIGRpc3BsYXk6IFwiTG9naWNhbCBNb2RlbFwiLFxyXG4gICAgY29kZTogXCJsb2dpY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ndWlkZS1yZXNvdXJjZS1wdXJwb3NlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm9maWxlOiBUaGUgcmVzb3VyY2UgZGVmaW5lcyBhIHByb2ZpbGUgKFN0cnVjdHVyZURlZmluaXRpb24pIHRoYXQgaXMgdXNlZCBpbiB0aGUgaW1wbGVtZW50YXRpb24gZ3VpZGUuXHJcbiAgICovXHJcbiAgUHJvZmlsZToge1xyXG4gICAgZGlzcGxheTogXCJQcm9maWxlXCIsXHJcbiAgICBjb2RlOiBcInByb2ZpbGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRlLXJlc291cmNlLXB1cnBvc2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRlcm1pbm9sb2d5OiBUaGUgcmVzb3VyY2UgZGVmaW5lcyBhIHZhbHVlIHNldCBvciBjb25jZXB0IG1hcCB1c2VkIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBndWlkZS5cclxuICAgKi9cclxuICBUZXJtaW5vbG9neToge1xyXG4gICAgZGlzcGxheTogXCJUZXJtaW5vbG9neVwiLFxyXG4gICAgY29kZTogXCJ0ZXJtaW5vbG9neVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcmVzb3VyY2UtcHVycG9zZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==