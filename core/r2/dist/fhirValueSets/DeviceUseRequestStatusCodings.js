// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/device-use-request-status|1.0.2
/**
 * Codes representing the status of the request.
 */
export const DeviceUseRequestStatusCodings = {
    /**
     * aborted: The request was attempted, but due to some procedural error, it could not be completed.
     */
    Aborted: {
        display: "Aborted",
        code: "aborted",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * accepted: The receiving system has accepted the request but work has not yet commenced.
     */
    Accepted: {
        display: "Accepted",
        code: "accepted",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * completed: The work has been complete, the report(s) released, and no further work is planned.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * in-progress: The work to fulfill the order is happening.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * planned: The request has been planned.
     */
    Planned: {
        display: "Planned",
        code: "planned",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * proposed: The request has been proposed.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * received: The receiving system has received the request but not yet decided whether it will be performed.
     */
    Received: {
        display: "Received",
        code: "received",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * rejected: The receiving system has declined to fulfill the request.
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * requested: The request has been placed.
     */
    Requested: {
        display: "Requested",
        code: "requested",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
    /**
     * suspended: The request has been held by originating system/user request.
     */
    Suspended: {
        display: "Suspended",
        code: "suspended",
        system: "http://hl7.org/fhir/device-use-request-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlVXNlUmVxdWVzdFN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RldmljZVVzZVJlcXVlc3RTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDhFQUE4RTtBQWtEOUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjIuY29yZSB2ZXJzaW9uOiAxLjAuMlxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZGV2aWNlLXVzZS1yZXF1ZXN0LXN0YXR1c3wxLjAuMlxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIHJlcHJlc2VudGluZyB0aGUgc3RhdHVzIG9mIHRoZSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRGV2aWNlVXNlUmVxdWVzdFN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWJvcnRlZDogVGhlIHJlcXVlc3Qgd2FzIGF0dGVtcHRlZCwgYnV0IGR1ZSB0byBzb21lIHByb2NlZHVyYWwgZXJyb3IsIGl0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgQWJvcnRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBhY2NlcHRlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIGFjY2VwdGVkIHRoZSByZXF1ZXN0IGJ1dCB3b3JrIGhhcyBub3QgeWV0IGNvbW1lbmNlZC5cclxuICAgKi9cclxuICBBY2NlcHRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSB3b3JrIGhhcyBiZWVuIGNvbXBsZXRlLCB0aGUgcmVwb3J0KHMpIHJlbGVhc2VkLCBhbmQgbm8gZnVydGhlciB3b3JrIGlzIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgd29yayB0byBmdWxmaWxsIHRoZSBvcmRlciBpcyBoYXBwZW5pbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwbGFubmVkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBwbGFubmVkLlxyXG4gICAqL1xyXG4gIFBsYW5uZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHByb3Bvc2VkLlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlY2VpdmVkOiBUaGUgcmVjZWl2aW5nIHN5c3RlbSBoYXMgcmVjZWl2ZWQgdGhlIHJlcXVlc3QgYnV0IG5vdCB5ZXQgZGVjaWRlZCB3aGV0aGVyIGl0IHdpbGwgYmUgcGVyZm9ybWVkLlxyXG4gICAqL1xyXG4gIFJlY2VpdmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJlamVjdGVkOiBUaGUgcmVjZWl2aW5nIHN5c3RlbSBoYXMgZGVjbGluZWQgdG8gZnVsZmlsbCB0aGUgcmVxdWVzdC5cclxuICAgKi9cclxuICBSZWplY3RlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXF1ZXN0ZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHBsYWNlZC5cclxuICAgKi9cclxuICBSZXF1ZXN0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3VzcGVuZGVkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBoZWxkIGJ5IG9yaWdpbmF0aW5nIHN5c3RlbS91c2VyIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgU3VzcGVuZGVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ29kZXMgcmVwcmVzZW50aW5nIHRoZSBzdGF0dXMgb2YgdGhlIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRGV2aWNlVXNlUmVxdWVzdFN0YXR1c0NvZGluZ3M6RGV2aWNlVXNlUmVxdWVzdFN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWJvcnRlZDogVGhlIHJlcXVlc3Qgd2FzIGF0dGVtcHRlZCwgYnV0IGR1ZSB0byBzb21lIHByb2NlZHVyYWwgZXJyb3IsIGl0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgQWJvcnRlZDoge1xyXG4gICAgZGlzcGxheTogXCJBYm9ydGVkXCIsXHJcbiAgICBjb2RlOiBcImFib3J0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RldmljZS11c2UtcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGFjY2VwdGVkOiBUaGUgcmVjZWl2aW5nIHN5c3RlbSBoYXMgYWNjZXB0ZWQgdGhlIHJlcXVlc3QgYnV0IHdvcmsgaGFzIG5vdCB5ZXQgY29tbWVuY2VkLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjY2VwdGVkXCIsXHJcbiAgICBjb2RlOiBcImFjY2VwdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kZXZpY2UtdXNlLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSB3b3JrIGhhcyBiZWVuIGNvbXBsZXRlLCB0aGUgcmVwb3J0KHMpIHJlbGVhc2VkLCBhbmQgbm8gZnVydGhlciB3b3JrIGlzIHBsYW5uZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RldmljZS11c2UtcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgd29yayB0byBmdWxmaWxsIHRoZSBvcmRlciBpcyBoYXBwZW5pbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGV2aWNlLXVzZS1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gcGxhbm5lZC5cclxuICAgKi9cclxuICBQbGFubmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5uZWRcIixcclxuICAgIGNvZGU6IFwicGxhbm5lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGV2aWNlLXVzZS1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHByb3Bvc2VkLlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3Bvc2VkXCIsXHJcbiAgICBjb2RlOiBcInByb3Bvc2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kZXZpY2UtdXNlLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWNlaXZlZDogVGhlIHJlY2VpdmluZyBzeXN0ZW0gaGFzIHJlY2VpdmVkIHRoZSByZXF1ZXN0IGJ1dCBub3QgeWV0IGRlY2lkZWQgd2hldGhlciBpdCB3aWxsIGJlIHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBSZWNlaXZlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZWNlaXZlZFwiLFxyXG4gICAgY29kZTogXCJyZWNlaXZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGV2aWNlLXVzZS1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVqZWN0ZWQ6IFRoZSByZWNlaXZpbmcgc3lzdGVtIGhhcyBkZWNsaW5lZCB0byBmdWxmaWxsIHRoZSByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIFJlamVjdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlamVjdGVkXCIsXHJcbiAgICBjb2RlOiBcInJlamVjdGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9kZXZpY2UtdXNlLXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXF1ZXN0ZWQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIHBsYWNlZC5cclxuICAgKi9cclxuICBSZXF1ZXN0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVxdWVzdGVkXCIsXHJcbiAgICBjb2RlOiBcInJlcXVlc3RlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZGV2aWNlLXVzZS1yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3VzcGVuZGVkOiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBoZWxkIGJ5IG9yaWdpbmF0aW5nIHN5c3RlbS91c2VyIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgU3VzcGVuZGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN1c3BlbmRlZFwiLFxyXG4gICAgY29kZTogXCJzdXNwZW5kZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2RldmljZS11c2UtcmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=