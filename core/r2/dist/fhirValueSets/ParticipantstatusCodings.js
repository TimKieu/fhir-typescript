// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/participantstatus|1.0.2
/**
 * The Participation status of an appointment.
 */
export const ParticipantstatusCodings = {
    /**
     * accepted: The appointment participant has accepted that they can attend the appointment at the time specified in the AppointmentResponse.
     */
    Accepted: {
        display: "Accepted",
        code: "accepted",
        system: "http://hl7.org/fhir/participantstatus",
    },
    /**
     * completed: The participant has completed the appointment.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/participantstatus",
    },
    /**
     * declined: The appointment participant has declined the appointment.
     */
    Declined: {
        display: "Declined",
        code: "declined",
        system: "http://hl7.org/fhir/participantstatus",
    },
    /**
     * in-process: The participant has in-process the appointment.
     */
    InProcess: {
        display: "In Process",
        code: "in-process",
        system: "http://hl7.org/fhir/participantstatus",
    },
    /**
     * needs-action: This is the intitial status of an appointment participant until a participant has replied. It implies that there is no commitment for the appointment.
     */
    NeedsAction: {
        display: "Needs Action",
        code: "needs-action",
        system: "http://hl7.org/fhir/participantstatus",
    },
    /**
     * tentative: The appointment participant has tentatively accepted the appointment.
     */
    Tentative: {
        display: "Tentative",
        code: "tentative",
        system: "http://hl7.org/fhir/participantstatus",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnRzdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9QYXJ0aWNpcGFudHN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsc0VBQXNFO0FBa0N0RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnIyLmNvcmUgdmVyc2lvbjogMS4wLjJcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3BhcnRpY2lwYW50c3RhdHVzfDEuMC4yXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIFBhcnRpY2lwYXRpb24gc3RhdHVzIG9mIGFuIGFwcG9pbnRtZW50LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGFydGljaXBhbnRzdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjY2VwdGVkOiBUaGUgYXBwb2ludG1lbnQgcGFydGljaXBhbnQgaGFzIGFjY2VwdGVkIHRoYXQgdGhleSBjYW4gYXR0ZW5kIHRoZSBhcHBvaW50bWVudCBhdCB0aGUgdGltZSBzcGVjaWZpZWQgaW4gdGhlIEFwcG9pbnRtZW50UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQWNjZXB0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgcGFydGljaXBhbnQgaGFzIGNvbXBsZXRlZCB0aGUgYXBwb2ludG1lbnQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRlY2xpbmVkOiBUaGUgYXBwb2ludG1lbnQgcGFydGljaXBhbnQgaGFzIGRlY2xpbmVkIHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBEZWNsaW5lZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbi1wcm9jZXNzOiBUaGUgcGFydGljaXBhbnQgaGFzIGluLXByb2Nlc3MgdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIEluUHJvY2VzczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuZWVkcy1hY3Rpb246IFRoaXMgaXMgdGhlIGludGl0aWFsIHN0YXR1cyBvZiBhbiBhcHBvaW50bWVudCBwYXJ0aWNpcGFudCB1bnRpbCBhIHBhcnRpY2lwYW50IGhhcyByZXBsaWVkLiBJdCBpbXBsaWVzIHRoYXQgdGhlcmUgaXMgbm8gY29tbWl0bWVudCBmb3IgdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIE5lZWRzQWN0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRlbnRhdGl2ZTogVGhlIGFwcG9pbnRtZW50IHBhcnRpY2lwYW50IGhhcyB0ZW50YXRpdmVseSBhY2NlcHRlZCB0aGUgYXBwb2ludG1lbnQuXHJcbiAgICovXHJcbiAgVGVudGF0aXZlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIFBhcnRpY2lwYXRpb24gc3RhdHVzIG9mIGFuIGFwcG9pbnRtZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBhcnRpY2lwYW50c3RhdHVzQ29kaW5nczpQYXJ0aWNpcGFudHN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNjZXB0ZWQ6IFRoZSBhcHBvaW50bWVudCBwYXJ0aWNpcGFudCBoYXMgYWNjZXB0ZWQgdGhhdCB0aGV5IGNhbiBhdHRlbmQgdGhlIGFwcG9pbnRtZW50IGF0IHRoZSB0aW1lIHNwZWNpZmllZCBpbiB0aGUgQXBwb2ludG1lbnRSZXNwb25zZS5cclxuICAgKi9cclxuICBBY2NlcHRlZDoge1xyXG4gICAgZGlzcGxheTogXCJBY2NlcHRlZFwiLFxyXG4gICAgY29kZTogXCJhY2NlcHRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGFydGljaXBhbnRzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIHBhcnRpY2lwYW50IGhhcyBjb21wbGV0ZWQgdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJDb21wbGV0ZWRcIixcclxuICAgIGNvZGU6IFwiY29tcGxldGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJ0aWNpcGFudHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGVjbGluZWQ6IFRoZSBhcHBvaW50bWVudCBwYXJ0aWNpcGFudCBoYXMgZGVjbGluZWQgdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIERlY2xpbmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRlY2xpbmVkXCIsXHJcbiAgICBjb2RlOiBcImRlY2xpbmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJ0aWNpcGFudHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW4tcHJvY2VzczogVGhlIHBhcnRpY2lwYW50IGhhcyBpbi1wcm9jZXNzIHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBJblByb2Nlc3M6IHtcclxuICAgIGRpc3BsYXk6IFwiSW4gUHJvY2Vzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9jZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJ0aWNpcGFudHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbmVlZHMtYWN0aW9uOiBUaGlzIGlzIHRoZSBpbnRpdGlhbCBzdGF0dXMgb2YgYW4gYXBwb2ludG1lbnQgcGFydGljaXBhbnQgdW50aWwgYSBwYXJ0aWNpcGFudCBoYXMgcmVwbGllZC4gSXQgaW1wbGllcyB0aGF0IHRoZXJlIGlzIG5vIGNvbW1pdG1lbnQgZm9yIHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBOZWVkc0FjdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJOZWVkcyBBY3Rpb25cIixcclxuICAgIGNvZGU6IFwibmVlZHMtYWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wYXJ0aWNpcGFudHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdGVudGF0aXZlOiBUaGUgYXBwb2ludG1lbnQgcGFydGljaXBhbnQgaGFzIHRlbnRhdGl2ZWx5IGFjY2VwdGVkIHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBUZW50YXRpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiVGVudGF0aXZlXCIsXHJcbiAgICBjb2RlOiBcInRlbnRhdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGFydGljaXBhbnRzdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=