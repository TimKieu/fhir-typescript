// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Condition

import * as fhir from '../fhir.js';

// @ts-ignore
import { ConditionClinicalCodes,  ConditionClinicalCodeType } from '../fhirValueSets/ConditionClinicalCodes.js';
// @ts-ignore
import { ConditionClinicalVsValidation } from '../fhirValueSets/ConditionClinicalVsValidation.js';
// @ts-ignore
import { ConditionVerStatusCodes,  ConditionVerStatusCodeType } from '../fhirValueSets/ConditionVerStatusCodes.js';
// @ts-ignore
import { ConditionVerStatusVsValidation } from '../fhirValueSets/ConditionVerStatusVsValidation.js';
/**
 * Valid arguments for the ConditionStage type.
 */
export interface ConditionStageArgs extends fhir.BackboneElementArgs {
  /**
   * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
   */
  summary?: fhir.CodeableConceptArgs|undefined;
  /**
   * Reference to a formal record of the evidence on which the staging assessment is based.
   */
  assessment?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
export class ConditionStage extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConditionStage';
  /**
   * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
   */
  public summary?: fhir.CodeableConcept|undefined;
  /**
   * Reference to a formal record of the evidence on which the staging assessment is based.
   */
  public assessment: fhir.Reference[];
  /**
   * Default constructor for ConditionStage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConditionStageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['summary']) { this.summary = new fhir.CodeableConcept(source.summary); }
    if (source['assessment']) { this.assessment = source.assessment.map((x) => new fhir.Reference(x)); }
    else { this.assessment = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Condition.stage' }
    iss.push(...this.vOS('summary',exp));
    iss.push(...this.vOA('assessment',exp));
    return iss;
  }
}
/**
 * Valid arguments for the ConditionEvidence type.
 */
export interface ConditionEvidenceArgs extends fhir.BackboneElementArgs {
  /**
   * A manifestation or symptom that led to the recording of this condition.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Links to other relevant information, including pathology reports.
   */
  detail?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
 */
export class ConditionEvidence extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConditionEvidence';
  /**
   * A manifestation or symptom that led to the recording of this condition.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Links to other relevant information, including pathology reports.
   */
  public detail: fhir.Reference[];
  /**
   * Default constructor for ConditionEvidence - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConditionEvidenceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.Reference(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Condition.evidence' }
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOA('detail',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Condition type.
 */
export interface ConditionArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Condition"|undefined;
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Indicates the patient who the condition record is associated with.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * Encounter during which the condition was first asserted.
   */
  encounter?: fhir.ReferenceArgs|undefined;
  /**
   * Individual who is making the condition statement.
   */
  asserter?: fhir.ReferenceArgs|undefined;
  /**
   * A date, when  the Condition statement was documented.
   */
  dateRecorded?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Condition.dateRecorded
   */
  _dateRecorded?:fhir.FhirElementArgs;
  /**
   * Identification of the condition, problem or diagnosis.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * A category assigned to the condition.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * The clinical status of the condition.
   */
  clinicalStatus?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Condition.clinicalStatus
   */
  _clinicalStatus?:fhir.FhirElementArgs;
  /**
   * The verification status to support the clinical status of the condition.
   */
  verificationStatus: fhir.FhirCode<ConditionVerStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Condition.verificationStatus
   */
  _verificationStatus?:fhir.FhirElementArgs;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   */
  severity?: fhir.CodeableConceptArgs|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onset?: fhir.FhirDateTime|fhir.Quantity|fhir.Period|fhir.Range|fhir.FhirString|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetRange?: fhir.RangeArgs|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetString?: fhir.FhirString|string|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatement?: fhir.FhirDateTime|fhir.Quantity|fhir.FhirBoolean|fhir.Period|fhir.Range|fhir.FhirString|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementQuantity?: fhir.QuantityArgs|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementPeriod?: fhir.PeriodArgs|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementRange?: fhir.RangeArgs|undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementString?: fhir.FhirString|string|undefined;
  /**
   * Clinical stage or grade of a condition. May include formal severity assessments.
   */
  stage?: fhir.ConditionStageArgs|undefined;
  /**
   * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
   */
  evidence?: fhir.ConditionEvidenceArgs[]|undefined;
  /**
   * The anatomical location where this condition manifests itself.
   */
  bodySite?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
   */
  notes?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Condition.notes
   */
  _notes?:fhir.FhirElementArgs;
}

/**
 * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
 */
export class Condition extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Condition';
  /**
   * Resource Type Name
   */
  public override resourceType: "Condition";
  /**
   * Need to allow connection to a wider workflow.
   */
  public identifier: fhir.Identifier[];
  /**
   * Indicates the patient who the condition record is associated with.
   */
  public patient: fhir.Reference|null;
  /**
   * Encounter during which the condition was first asserted.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Individual who is making the condition statement.
   */
  public asserter?: fhir.Reference|undefined;
  /**
   * A date, when  the Condition statement was documented.
   */
  public dateRecorded?: fhir.FhirDate|undefined;
  /**
   * Identification of the condition, problem or diagnosis.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * A category assigned to the condition.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * The clinical status of the condition.
   */
  public clinicalStatus?: fhir.FhirCode|undefined;
  /**
   * The verification status to support the clinical status of the condition.
   */
  public verificationStatus: fhir.FhirCode<ConditionVerStatusCodeType>|null;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   */
  public severity?: fhir.CodeableConcept|undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  public onset?: (fhir.FhirDateTime|fhir.Quantity|fhir.Period|fhir.Range|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Condition.onset[x]
   */
  protected static readonly _fts_onsetIsChoice:true = true;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  public abatement?: (fhir.FhirDateTime|fhir.Quantity|fhir.FhirBoolean|fhir.Period|fhir.Range|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Condition.abatement[x]
   */
  protected static readonly _fts_abatementIsChoice:true = true;
  /**
   * Clinical stage or grade of a condition. May include formal severity assessments.
   */
  public stage?: fhir.ConditionStage|undefined;
  /**
   * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
   */
  public evidence: fhir.ConditionEvidence[];
  /**
   * The anatomical location where this condition manifests itself.
   */
  public bodySite: fhir.CodeableConcept[];
  /**
   * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
   */
  public notes?: fhir.FhirString|undefined;
  /**
   * Default constructor for Condition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConditionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Condition';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter); }
    if (source['asserter']) { this.asserter = new fhir.Reference(source.asserter); }
    if (source['dateRecorded']) { this.dateRecorded = new fhir.FhirDate({value: source.dateRecorded}); }
    if (source['_dateRecorded']) {
      if (this.dateRecorded) { this.dateRecorded.addExtendedProperties(source._dateRecorded!); }
      else { this.dateRecorded = new fhir.FhirDate(source._dateRecorded as Partial<fhir.FhirDateArgs>); }
    }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['clinicalStatus']) { this.clinicalStatus = new fhir.FhirCode({value: source.clinicalStatus}); }
    if (source['_clinicalStatus']) {
      if (this.clinicalStatus) { this.clinicalStatus.addExtendedProperties(source._clinicalStatus!); }
      else { this.clinicalStatus = new fhir.FhirCode(source._clinicalStatus as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['verificationStatus']) { this.verificationStatus = new fhir.FhirCode<ConditionVerStatusCodeType>({value: source.verificationStatus}); }
    else { this.verificationStatus = null; }
    if (source['_verificationStatus']) {
      if (this.verificationStatus) { this.verificationStatus.addExtendedProperties(source._verificationStatus!); }
      else { this.verificationStatus = new fhir.FhirCode<ConditionVerStatusCodeType>(source._verificationStatus as Partial<fhir.FhirCode>); }
    }
    if (source['severity']) { this.severity = new fhir.CodeableConcept(source.severity); }
    if (source['onset']) { this.onset = source.onset; }
    else if (source['onsetDateTime']) { this.onset = new fhir.FhirDateTime({value: source.onsetDateTime}); }
    else if (source['onsetQuantity']) { this.onset = new fhir.Quantity(source.onsetQuantity); }
    else if (source['onsetPeriod']) { this.onset = new fhir.Period(source.onsetPeriod); }
    else if (source['onsetRange']) { this.onset = new fhir.Range(source.onsetRange); }
    else if (source['onsetString']) { this.onset = new fhir.FhirString({value: source.onsetString}); }
    if (source['abatement']) { this.abatement = source.abatement; }
    else if (source['abatementDateTime']) { this.abatement = new fhir.FhirDateTime({value: source.abatementDateTime}); }
    else if (source['abatementQuantity']) { this.abatement = new fhir.Quantity(source.abatementQuantity); }
    else if (source['abatementBoolean']) { this.abatement = new fhir.FhirBoolean({value: source.abatementBoolean}); }
    else if (source['abatementPeriod']) { this.abatement = new fhir.Period(source.abatementPeriod); }
    else if (source['abatementRange']) { this.abatement = new fhir.Range(source.abatementRange); }
    else if (source['abatementString']) { this.abatement = new fhir.FhirString({value: source.abatementString}); }
    if (source['stage']) { this.stage = new fhir.ConditionStage(source.stage); }
    if (source['evidence']) { this.evidence = source.evidence.map((x) => new fhir.ConditionEvidence(x)); }
    else { this.evidence = []; }
    if (source['bodySite']) { this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x)); }
    else { this.bodySite = []; }
    if (source['notes']) { this.notes = new fhir.FhirString({value: source.notes}); }
    if (source['_notes']) {
      if (this.notes) { this.notes.addExtendedProperties(source._notes!); }
      else { this.notes = new fhir.FhirString(source._notes as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Condition' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vRS('patient',exp));
    iss.push(...this.vOS('encounter',exp));
    iss.push(...this.vOS('asserter',exp));
    iss.push(...this.vOS('dateRecorded',exp));
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vOS('category',exp));
    iss.push(...this.vOS('clinicalStatus',exp));
    iss.push(...this.vRSV('verificationStatus',exp,'ConditionVerStatus',ConditionVerStatusVsValidation,'r'));
    iss.push(...this.vOS('severity',exp));
    iss.push(...this.vOS('onset',exp));
    iss.push(...this.vOS('abatement',exp));
    iss.push(...this.vOS('stage',exp));
    iss.push(...this.vOA('evidence',exp));
    iss.push(...this.vOA('bodySite',exp));
    iss.push(...this.vOS('notes',exp));
    return iss;
  }
}
