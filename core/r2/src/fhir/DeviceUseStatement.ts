// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceUseStatement

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the DeviceUseStatement type.
 */
export interface DeviceUseStatementArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "DeviceUseStatement"|undefined;
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySite?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySiteCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySiteReference?: fhir.ReferenceArgs|undefined;
  /**
   * The time period over which the device was used.
   */
  whenUsed?: fhir.PeriodArgs|undefined;
  /**
   * The details of the device used.
   */
  device: fhir.ReferenceArgs|null;
  /**
   * An external identifier for this statement such as an IRI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Reason or justification for the use of the device.
   */
  indication?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  notes?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: DeviceUseStatement.notes
   */
  _notes?:(fhir.FhirElementArgs|null)[];
  /**
   * The time at which the statement was made/recorded.
   */
  recordedOn?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: DeviceUseStatement.recordedOn
   */
  _recordedOn?:fhir.FhirElementArgs;
  /**
   * The patient who used the device.
   */
  subject: fhir.ReferenceArgs|null;
  /**
   * How often the device was used.
   */
  timing?: fhir.Timing|fhir.Period|fhir.FhirDateTime|undefined;
  /**
   * How often the device was used.
   */
  timingTiming?: fhir.TimingArgs|undefined;
  /**
   * How often the device was used.
   */
  timingPeriod?: fhir.PeriodArgs|undefined;
  /**
   * How often the device was used.
   */
  timingDateTime?: fhir.FhirDateTime|string|undefined;
}

/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
export class DeviceUseStatement extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DeviceUseStatement';
  /**
   * Resource Type Name
   */
  public override resourceType: "DeviceUseStatement";
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  public bodySite?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element DeviceUseStatement.bodySite[x]
   */
  protected static readonly _fts_bodySiteIsChoice:true = true;
  /**
   * The time period over which the device was used.
   */
  public whenUsed?: fhir.Period|undefined;
  /**
   * The details of the device used.
   */
  public device: fhir.Reference|null;
  /**
   * An external identifier for this statement such as an IRI.
   */
  public identifier: fhir.Identifier[];
  /**
   * Reason or justification for the use of the device.
   */
  public indication: fhir.CodeableConcept[];
  /**
   * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  public notes: fhir.FhirString[];
  /**
   * The time at which the statement was made/recorded.
   */
  public recordedOn?: fhir.FhirDateTime|undefined;
  /**
   * The patient who used the device.
   */
  public subject: fhir.Reference|null;
  /**
   * How often the device was used.
   */
  public timing?: (fhir.Timing|fhir.Period|fhir.FhirDateTime)|undefined;
  /**
   * Internal flag to properly serialize choice-type element DeviceUseStatement.timing[x]
   */
  protected static readonly _fts_timingIsChoice:true = true;
  /**
   * Default constructor for DeviceUseStatement - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DeviceUseStatementArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'DeviceUseStatement';
    if (source['bodySite']) { this.bodySite = source.bodySite; }
    else if (source['bodySiteCodeableConcept']) { this.bodySite = new fhir.CodeableConcept(source.bodySiteCodeableConcept); }
    else if (source['bodySiteReference']) { this.bodySite = new fhir.Reference(source.bodySiteReference); }
    if (source['whenUsed']) { this.whenUsed = new fhir.Period(source.whenUsed); }
    if (source['device']) { this.device = new fhir.Reference(source.device); }
    else { this.device = null; }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['indication']) { this.indication = source.indication.map((x) => new fhir.CodeableConcept(x)); }
    else { this.indication = []; }
    if (source['notes']) { this.notes = source.notes.map((x) => new fhir.FhirString({value: x})); }
    else { this.notes = []; }
    if (source['_notes']) {
      source._notes.forEach((x,i) => {
        if (this.notes.length >= i) { if (x) { this.notes[i].addExtendedProperties(x); } }
        else { if (x) { this.notes.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['recordedOn']) { this.recordedOn = new fhir.FhirDateTime({value: source.recordedOn}); }
    if (source['_recordedOn']) {
      if (this.recordedOn) { this.recordedOn.addExtendedProperties(source._recordedOn!); }
      else { this.recordedOn = new fhir.FhirDateTime(source._recordedOn as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    else { this.subject = null; }
    if (source['timing']) { this.timing = source.timing; }
    else if (source['timingTiming']) { this.timing = new fhir.Timing(source.timingTiming); }
    else if (source['timingPeriod']) { this.timing = new fhir.Period(source.timingPeriod); }
    else if (source['timingDateTime']) { this.timing = new fhir.FhirDateTime({value: source.timingDateTime}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'DeviceUseStatement' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOS('bodySite',exp));
    iss.push(...this.vOS('whenUsed',exp));
    iss.push(...this.vRS('device',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOA('indication',exp));
    iss.push(...this.vOA('notes',exp));
    iss.push(...this.vOS('recordedOn',exp));
    iss.push(...this.vRS('subject',exp));
    iss.push(...this.vOS('timing',exp));
    return iss;
  }
}
