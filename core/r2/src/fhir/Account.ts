// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Account

import * as fhir from '../fhir.js';

// @ts-ignore
import { AccountStatusCodes,  AccountStatusCodeType } from '../fhirValueSets/AccountStatusCodes.js';
// @ts-ignore
import { AccountStatusVsValidation } from '../fhirValueSets/AccountStatusVsValidation.js';
/**
 * Valid arguments for the Account type.
 */
export interface AccountArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Account"|undefined;
  /**
   * Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Account.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates whether the account is presently used/useable or not.
   */
  status?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Account.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Indicates the period of time over which the account is allowed.
   */
  activePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Identifies the currency to which transactions must be converted when crediting or debiting the account.
   */
  currency?: fhir.CodingArgs|undefined;
  /**
   * Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
   */
  balance?: fhir.QuantityArgs|undefined;
  /**
   * Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
   */
  coveragePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Identifies the patient, device, practitioner, location or other object the account is associated with.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * Indicates the organization, department, etc. with responsibility for the account.
   */
  owner?: fhir.ReferenceArgs|undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Account.description
   */
  _description?:fhir.FhirElementArgs;
}

/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
 */
export class Account extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Account';
  /**
   * Resource Type Name
   */
  public override resourceType: "Account";
  /**
   * Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
   */
  public identifier: fhir.Identifier[];
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Indicates whether the account is presently used/useable or not.
   */
  public status?: fhir.FhirCode|undefined;
  /**
   * Indicates the period of time over which the account is allowed.
   */
  public activePeriod?: fhir.Period|undefined;
  /**
   * Identifies the currency to which transactions must be converted when crediting or debiting the account.
   */
  public currency?: fhir.Coding|undefined;
  /**
   * Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
   */
  public balance?: fhir.Quantity|undefined;
  /**
   * Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
   */
  public coveragePeriod?: fhir.Period|undefined;
  /**
   * Identifies the patient, device, practitioner, location or other object the account is associated with.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Indicates the organization, department, etc. with responsibility for the account.
   */
  public owner?: fhir.Reference|undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Default constructor for Account - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AccountArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Account';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['status']) { this.status = new fhir.FhirCode({value: source.status}); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode(source._status as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['activePeriod']) { this.activePeriod = new fhir.Period(source.activePeriod); }
    if (source['currency']) { this.currency = new fhir.Coding(source.currency); }
    if (source['balance']) { this.balance = new fhir.Quantity(source.balance); }
    if (source['coveragePeriod']) { this.coveragePeriod = new fhir.Period(source.coveragePeriod); }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    if (source['owner']) { this.owner = new fhir.Reference(source.owner); }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Account' }
    this.vRS('resourceType',exp)
    this.vOA('identifier',exp)
    this.vOS('name',exp)
    this.vOS('type',exp)
    this.vOS('status',exp)
    this.vOS('activePeriod',exp)
    this.vOS('currency',exp)
    this.vOS('balance',exp)
    this.vOS('coveragePeriod',exp)
    this.vOS('subject',exp)
    this.vOS('owner',exp)
    this.vOS('description',exp)
    return issues;
  }
}
