// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Resource

import * as fhir from '../fhir.js';

// @ts-ignore
import { ResourceTypesValueSetCodes,  ResourceTypesValueSetCodeType } from '../fhirValueSets/ResourceTypesValueSetCodes.js';
// @ts-ignore
import { ResourceTypesValueSetVsValidation } from '../fhirValueSets/ResourceTypesValueSetVsValidation.js';
/**
 * Valid arguments for the Resource type.
 */
export interface ResourceArgs extends fhir.FhirBaseArgs {
  /**
   * Resource Type Name
   */
  resourceType: string|string|undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: Resource.id
   */
  _id?:fhir.FhirElementArgs;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: fhir.MetaArgs|undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Resource.implicitRules
   */
  _implicitRules?:fhir.FhirElementArgs;
  /**
   * The base language in which the resource is written.
   */
  language?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Resource.language
   */
  _language?:fhir.FhirElementArgs;
}

/**
 * This is the base resource type for everything.
 */
export class Resource extends fhir.FhirBase {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Resource';
  /**
   * Resource Type Name
   */
  public resourceType: string|null;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  public id?: fhir.FhirId|undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  public meta?: fhir.Meta|undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  public implicitRules?: fhir.FhirUri|undefined;
  /**
   * The base language in which the resource is written.
   */
  public language?: fhir.FhirCode|undefined;
  /**
   * Default constructor for Resource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ResourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Resource';
    if (source['id']) { this.id = new fhir.FhirId({value: source.id}); }
    if (source['_id']) {
      if (this.id) { this.id.addExtendedProperties(source._id!); }
      else { this.id = new fhir.FhirId(source._id as Partial<fhir.FhirIdArgs>); }
    }
    if (source['meta']) { this.meta = new fhir.Meta(source.meta); }
    if (source['implicitRules']) { this.implicitRules = new fhir.FhirUri({value: source.implicitRules}); }
    if (source['_implicitRules']) {
      if (this.implicitRules) { this.implicitRules.addExtendedProperties(source._implicitRules!); }
      else { this.implicitRules = new fhir.FhirUri(source._implicitRules as Partial<fhir.FhirUriArgs>); }
    }
    if (source['language']) { this.language = new fhir.FhirCode({value: source.language}); }
    if (source['_language']) {
      if (this.language) { this.language.addExtendedProperties(source._language!); }
      else { this.language = new fhir.FhirCode(source._language as Partial<fhir.FhirCodeArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Resource' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOS('id',exp));
    iss.push(...this.vOS('meta',exp));
    iss.push(...this.vOS('implicitRules',exp));
    iss.push(...this.vOS('language',exp));
    return iss;
  }
}
