// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Parameters

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the ParametersParameter type.
 */
export interface ParametersParameterArgs extends fhir.BackboneElementArgs {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Parameters.parameter.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * If the parameter is a data type.
   */
  value?: fhir.FhirBoolean|fhir.FhirInteger|fhir.FhirDecimal|fhir.FhirBase64Binary|fhir.FhirInstant|fhir.FhirString|fhir.FhirUri|fhir.FhirDate|fhir.FhirDateTime|fhir.FhirTime|fhir.FhirCode|fhir.FhirOid|fhir.FhirId|fhir.FhirUnsignedInt|fhir.FhirPositiveInt|fhir.FhirMarkdown|fhir.Annotation|fhir.Attachment|fhir.Identifier|fhir.CodeableConcept|fhir.Coding|fhir.Quantity|fhir.Range|fhir.Period|fhir.Ratio|fhir.SampledData|fhir.Signature|fhir.HumanName|fhir.Address|fhir.ContactPoint|fhir.Timing|fhir.Reference|fhir.Meta|undefined;
  /**
   * If the parameter is a data type.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * If the parameter is a data type.
   */
  valueInteger?: fhir.FhirInteger|number|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDecimal?: fhir.FhirDecimal|number|undefined;
  /**
   * If the parameter is a data type.
   */
  valueBase64Binary?: fhir.FhirBase64Binary|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueInstant?: fhir.FhirInstant|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUri?: fhir.FhirUri|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDate?: fhir.FhirDate|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueTime?: fhir.FhirTime|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCode?: fhir.FhirCode|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueOid?: fhir.FhirOid|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueId?: fhir.FhirId|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueUnsignedInt?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * If the parameter is a data type.
   */
  valuePositiveInt?: fhir.FhirPositiveInt|number|undefined;
  /**
   * If the parameter is a data type.
   */
  valueMarkdown?: fhir.FhirMarkdown|string|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAnnotation?: fhir.AnnotationArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAttachment?: fhir.AttachmentArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueIdentifier?: fhir.IdentifierArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueCoding?: fhir.CodingArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueRange?: fhir.RangeArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valuePeriod?: fhir.PeriodArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueRatio?: fhir.RatioArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueSampledData?: fhir.SampledDataArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueSignature?: fhir.SignatureArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueHumanName?: fhir.HumanNameArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueAddress?: fhir.AddressArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueContactPoint?: fhir.ContactPointArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueTiming?: fhir.TimingArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueReference?: fhir.ReferenceArgs|undefined;
  /**
   * If the parameter is a data type.
   */
  valueMeta?: fhir.MetaArgs|undefined;
  /**
   * If the parameter is a whole resource.
   */
  resource?: fhir.ResourceArgs|any|undefined;
  /**
   * A named part of a parameter. In many implementation context, a set of named parts is known as a "Tuple".
   */
  part?: fhir.ParametersParameterArgs[]|undefined;
}

/**
 * A parameter passed to or received from the operation.
 */
export class ParametersParameter extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ParametersParameter';
  /**
   * The name of the parameter (reference to the operation definition).
   */
  public name: fhir.FhirString|null;
  /**
   * If the parameter is a data type.
   */
  public value?: (fhir.FhirBoolean|fhir.FhirInteger|fhir.FhirDecimal|fhir.FhirBase64Binary|fhir.FhirInstant|fhir.FhirString|fhir.FhirUri|fhir.FhirDate|fhir.FhirDateTime|fhir.FhirTime|fhir.FhirCode|fhir.FhirOid|fhir.FhirId|fhir.FhirUnsignedInt|fhir.FhirPositiveInt|fhir.FhirMarkdown|fhir.Annotation|fhir.Attachment|fhir.Identifier|fhir.CodeableConcept|fhir.Coding|fhir.Quantity|fhir.Range|fhir.Period|fhir.Ratio|fhir.SampledData|fhir.Signature|fhir.HumanName|fhir.Address|fhir.ContactPoint|fhir.Timing|fhir.Reference|fhir.Meta)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Parameters.parameter.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * If the parameter is a whole resource.
   */
  public resource?: fhir.FhirResource|undefined;
  /**
   * A named part of a parameter. In many implementation context, a set of named parts is known as a "Tuple".
   */
  public part: fhir.ParametersParameter[];
  /**
   * Default constructor for ParametersParameter - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ParametersParameterArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name'] !== undefined) { this.name = new fhir.FhirString({value: source.name}, options); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['value']) { this.value = source.value; }
    else if (source['valueBoolean'] !== undefined) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}, options); }
    else if (source['valueInteger'] !== undefined) { this.value = new fhir.FhirInteger({value: source.valueInteger}, options); }
    else if (source['valueDecimal'] !== undefined) { this.value = new fhir.FhirDecimal({value: source.valueDecimal}, options); }
    else if (source['valueBase64Binary'] !== undefined) { this.value = new fhir.FhirBase64Binary({value: source.valueBase64Binary}, options); }
    else if (source['valueInstant'] !== undefined) { this.value = new fhir.FhirInstant({value: source.valueInstant}, options); }
    else if (source['valueString'] !== undefined) { this.value = new fhir.FhirString({value: source.valueString}, options); }
    else if (source['valueUri'] !== undefined) { this.value = new fhir.FhirUri({value: source.valueUri}, options); }
    else if (source['valueDate'] !== undefined) { this.value = new fhir.FhirDate({value: source.valueDate}, options); }
    else if (source['valueDateTime'] !== undefined) { this.value = new fhir.FhirDateTime({value: source.valueDateTime}, options); }
    else if (source['valueTime'] !== undefined) { this.value = new fhir.FhirTime({value: source.valueTime}, options); }
    else if (source['valueCode'] !== undefined) { this.value = new fhir.FhirCode({value: source.valueCode}, options); }
    else if (source['valueOid'] !== undefined) { this.value = new fhir.FhirOid({value: source.valueOid}, options); }
    else if (source['valueId'] !== undefined) { this.value = new fhir.FhirId({value: source.valueId}, options); }
    else if (source['valueUnsignedInt'] !== undefined) { this.value = new fhir.FhirUnsignedInt({value: source.valueUnsignedInt}, options); }
    else if (source['valuePositiveInt'] !== undefined) { this.value = new fhir.FhirPositiveInt({value: source.valuePositiveInt}, options); }
    else if (source['valueMarkdown'] !== undefined) { this.value = new fhir.FhirMarkdown({value: source.valueMarkdown}, options); }
    else if (source['valueAnnotation']) { this.value = new fhir.Annotation(source.valueAnnotation, options); }
    else if (source['valueAttachment']) { this.value = new fhir.Attachment(source.valueAttachment, options); }
    else if (source['valueIdentifier']) { this.value = new fhir.Identifier(source.valueIdentifier, options); }
    else if (source['valueCodeableConcept']) { this.value = new fhir.CodeableConcept(source.valueCodeableConcept, options); }
    else if (source['valueCoding']) { this.value = new fhir.Coding(source.valueCoding, options); }
    else if (source['valueQuantity']) { this.value = new fhir.Quantity(source.valueQuantity, options); }
    else if (source['valueRange']) { this.value = new fhir.Range(source.valueRange, options); }
    else if (source['valuePeriod']) { this.value = new fhir.Period(source.valuePeriod, options); }
    else if (source['valueRatio']) { this.value = new fhir.Ratio(source.valueRatio, options); }
    else if (source['valueSampledData']) { this.value = new fhir.SampledData(source.valueSampledData, options); }
    else if (source['valueSignature']) { this.value = new fhir.Signature(source.valueSignature, options); }
    else if (source['valueHumanName']) { this.value = new fhir.HumanName(source.valueHumanName, options); }
    else if (source['valueAddress']) { this.value = new fhir.Address(source.valueAddress, options); }
    else if (source['valueContactPoint']) { this.value = new fhir.ContactPoint(source.valueContactPoint, options); }
    else if (source['valueTiming']) { this.value = new fhir.Timing(source.valueTiming, options); }
    else if (source['valueReference']) { this.value = new fhir.Reference(source.valueReference, options); }
    else if (source['valueMeta']) { this.value = new fhir.Meta(source.valueMeta, options); }
    if (source['resource']) { this.resource = (fhir.resourceFactory(source.resource, options) ?? undefined); }
    if (source['part']) { this.part = source.part.map((x) => new fhir.ParametersParameter(x, options)); }
    else { this.part = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Parameters.parameter' }
    iss.push(...this.vRS('name',exp));
    iss.push(...this.vOS('value',exp));
    iss.push(...this.vOS('resource',exp));
    iss.push(...this.vOA('part',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Parameters type.
 */
export interface ParametersArgs extends fhir.ResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Parameters"|undefined;
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: fhir.ParametersParameterArgs[]|undefined;
}

/**
 * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 */
export class Parameters extends fhir.Resource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Parameters';
  /**
   * Resource Type Name
   */
  public override resourceType: "Parameters";
  /**
   * A parameter passed to or received from the operation.
   */
  public parameter: fhir.ParametersParameter[];
  /**
   * Default constructor for Parameters - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ParametersArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Parameters';
    if (source['parameter']) { this.parameter = source.parameter.map((x) => new fhir.ParametersParameter(x, options)); }
    else { this.parameter = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Parameters' }
    iss.push(...this.vOA('parameter',exp));
    return iss;
  }
}
