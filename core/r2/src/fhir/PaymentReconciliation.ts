// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentReconciliation

import * as fhir from '../fhir.js';

// @ts-ignore
import { NoteTypeCodes,  NoteTypeCodeType } from '../fhirValueSets/NoteTypeCodes.js';
// @ts-ignore
import { NoteTypeVsValidation } from '../fhirValueSets/NoteTypeVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeCodes,  RemittanceOutcomeCodeType } from '../fhirValueSets/RemittanceOutcomeCodes.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * Valid arguments for the PaymentReconciliationDetail type.
 */
export interface PaymentReconciliationDetailArgs extends fhir.BackboneElementArgs {
  /**
   * Code to indicate the nature of the payment, adjustment, funds advance, etc.
   */
  type: fhir.CodingArgs|null;
  /**
   * The claim or financial resource.
   */
  request?: fhir.ReferenceArgs|undefined;
  /**
   * The claim response resource.
   */
  responce?: fhir.ReferenceArgs|undefined;
  /**
   * The Organization which submitted the invoice or financial transaction.
   */
  submitter?: fhir.ReferenceArgs|undefined;
  /**
   * The organization which is receiving the payment.
   */
  payee?: fhir.ReferenceArgs|undefined;
  /**
   * The date of the invoice or financial resource.
   */
  date?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: PaymentReconciliation.detail.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Amount paid for this detail.
   */
  amount?: fhir.QuantityArgs|undefined;
}

/**
 * List of individual settlement amounts and the corresponding transaction.
 */
export class PaymentReconciliationDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'PaymentReconciliationDetail';
  /**
   * Code to indicate the nature of the payment, adjustment, funds advance, etc.
   */
  public type: fhir.Coding|null;
  /**
   * The claim or financial resource.
   */
  public request?: fhir.Reference|undefined;
  /**
   * The claim response resource.
   */
  public responce?: fhir.Reference|undefined;
  /**
   * The Organization which submitted the invoice or financial transaction.
   */
  public submitter?: fhir.Reference|undefined;
  /**
   * The organization which is receiving the payment.
   */
  public payee?: fhir.Reference|undefined;
  /**
   * The date of the invoice or financial resource.
   */
  public date?: fhir.FhirDate|undefined;
  /**
   * Amount paid for this detail.
   */
  public amount?: fhir.Quantity|undefined;
  /**
   * Default constructor for PaymentReconciliationDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<PaymentReconciliationDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.Coding(source.type); }
    else { this.type = null; }
    if (source['request']) { this.request = new fhir.Reference(source.request); }
    if (source['responce']) { this.responce = new fhir.Reference(source.responce); }
    if (source['submitter']) { this.submitter = new fhir.Reference(source.submitter); }
    if (source['payee']) { this.payee = new fhir.Reference(source.payee); }
    if (source['date']) { this.date = new fhir.FhirDate({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDate(source._date as Partial<fhir.FhirDateArgs>); }
    }
    if (source['amount']) { this.amount = new fhir.Quantity(source.amount); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'PaymentReconciliation.detail' }
    iss.push(...this.vRS('type',exp));
    iss.push(...this.vOS('request',exp));
    iss.push(...this.vOS('responce',exp));
    iss.push(...this.vOS('submitter',exp));
    iss.push(...this.vOS('payee',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('amount',exp));
    return iss;
  }
}
/**
 * Valid arguments for the PaymentReconciliationNote type.
 */
export interface PaymentReconciliationNoteArgs extends fhir.BackboneElementArgs {
  /**
   * The note purpose: Print/Display.
   */
  type?: fhir.CodingArgs|undefined;
  /**
   * The note text.
   */
  text?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: PaymentReconciliation.note.text
   */
  _text?:fhir.FhirElementArgs;
}

/**
 * Suite of notes.
 */
export class PaymentReconciliationNote extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'PaymentReconciliationNote';
  /**
   * The note purpose: Print/Display.
   */
  public type?: fhir.Coding|undefined;
  /**
   * The note text.
   */
  public text?: fhir.FhirString|undefined;
  /**
   * Default constructor for PaymentReconciliationNote - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<PaymentReconciliationNoteArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.Coding(source.type); }
    if (source['text']) { this.text = new fhir.FhirString({value: source.text}); }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirString(source._text as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'PaymentReconciliation.note' }
    iss.push(...this.vOSV('type',exp,'NoteType',NoteTypeVsValidation,'r'));
    iss.push(...this.vOS('text',exp));
    return iss;
  }
}
/**
 * Valid arguments for the PaymentReconciliation type.
 */
export interface PaymentReconciliationArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "PaymentReconciliation"|undefined;
  /**
   * The Response business identifier.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Original request resource reference.
   */
  request?: fhir.ReferenceArgs|undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: fhir.FhirCode<RemittanceOutcomeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: PaymentReconciliation.outcome
   */
  _outcome?:fhir.FhirElementArgs;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: PaymentReconciliation.disposition
   */
  _disposition?:fhir.FhirElementArgs;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: fhir.CodingArgs|undefined;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: fhir.CodingArgs|undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: PaymentReconciliation.created
   */
  _created?:fhir.FhirElementArgs;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  period?: fhir.PeriodArgs|undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: fhir.ReferenceArgs|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: fhir.ReferenceArgs|undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: fhir.ReferenceArgs|undefined;
  /**
   * List of individual settlement amounts and the corresponding transaction.
   */
  detail?: fhir.PaymentReconciliationDetailArgs[]|undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: fhir.CodingArgs|undefined;
  /**
   * Total payment amount.
   */
  total: fhir.QuantityArgs|null;
  /**
   * Suite of notes.
   */
  note?: fhir.PaymentReconciliationNoteArgs[]|undefined;
}

/**
 * This resource provides payment details and claim references supporting a bulk payment.
 */
export class PaymentReconciliation extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'PaymentReconciliation';
  /**
   * Resource Type Name
   */
  public override resourceType: "PaymentReconciliation";
  /**
   * The Response business identifier.
   */
  public identifier: fhir.Identifier[];
  /**
   * Original request resource reference.
   */
  public request?: fhir.Reference|undefined;
  /**
   * Transaction status: error, complete.
   */
  public outcome?: fhir.FhirCode<RemittanceOutcomeCodeType>|undefined;
  /**
   * A description of the status of the adjudication.
   */
  public disposition?: fhir.FhirString|undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  public ruleset?: fhir.Coding|undefined;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  public originalRuleset?: fhir.Coding|undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  public created?: fhir.FhirDateTime|undefined;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  public period?: fhir.Period|undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  public organization?: fhir.Reference|undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  public requestProvider?: fhir.Reference|undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  public requestOrganization?: fhir.Reference|undefined;
  /**
   * List of individual settlement amounts and the corresponding transaction.
   */
  public detail: fhir.PaymentReconciliationDetail[];
  /**
   * The form to be used for printing the content.
   */
  public form?: fhir.Coding|undefined;
  /**
   * Total payment amount.
   */
  public total: fhir.Quantity|null;
  /**
   * Suite of notes.
   */
  public note: fhir.PaymentReconciliationNote[];
  /**
   * Default constructor for PaymentReconciliation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<PaymentReconciliationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'PaymentReconciliation';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['request']) { this.request = new fhir.Reference(source.request); }
    if (source['outcome']) { this.outcome = new fhir.FhirCode<RemittanceOutcomeCodeType>({value: source.outcome}); }
    if (source['_outcome']) {
      if (this.outcome) { this.outcome.addExtendedProperties(source._outcome!); }
      else { this.outcome = new fhir.FhirCode<RemittanceOutcomeCodeType>(source._outcome as Partial<fhir.FhirCode>); }
    }
    if (source['disposition']) { this.disposition = new fhir.FhirString({value: source.disposition}); }
    if (source['_disposition']) {
      if (this.disposition) { this.disposition.addExtendedProperties(source._disposition!); }
      else { this.disposition = new fhir.FhirString(source._disposition as Partial<fhir.FhirStringArgs>); }
    }
    if (source['ruleset']) { this.ruleset = new fhir.Coding(source.ruleset); }
    if (source['originalRuleset']) { this.originalRuleset = new fhir.Coding(source.originalRuleset); }
    if (source['created']) { this.created = new fhir.FhirDateTime({value: source.created}); }
    if (source['_created']) {
      if (this.created) { this.created.addExtendedProperties(source._created!); }
      else { this.created = new fhir.FhirDateTime(source._created as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    if (source['organization']) { this.organization = new fhir.Reference(source.organization); }
    if (source['requestProvider']) { this.requestProvider = new fhir.Reference(source.requestProvider); }
    if (source['requestOrganization']) { this.requestOrganization = new fhir.Reference(source.requestOrganization); }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.PaymentReconciliationDetail(x)); }
    else { this.detail = []; }
    if (source['form']) { this.form = new fhir.Coding(source.form); }
    if (source['total']) { this.total = new fhir.Quantity(source.total); }
    else { this.total = null; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.PaymentReconciliationNote(x)); }
    else { this.note = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'PaymentReconciliation' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('request',exp));
    iss.push(...this.vOSV('outcome',exp,'RemittanceOutcome',RemittanceOutcomeVsValidation,'r'));
    iss.push(...this.vOS('disposition',exp));
    iss.push(...this.vOS('ruleset',exp));
    iss.push(...this.vOS('originalRuleset',exp));
    iss.push(...this.vOS('created',exp));
    iss.push(...this.vOS('period',exp));
    iss.push(...this.vOS('organization',exp));
    iss.push(...this.vOS('requestProvider',exp));
    iss.push(...this.vOS('requestOrganization',exp));
    iss.push(...this.vOA('detail',exp));
    iss.push(...this.vOS('form',exp));
    iss.push(...this.vRS('total',exp));
    iss.push(...this.vOA('note',exp));
    return iss;
  }
}
