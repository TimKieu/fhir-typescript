// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the Coverage type.
 */
export interface CoverageArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Coverage"|undefined;
  /**
   * Need to identify the issuer to target for processing and for coordination of benefit processing.
   */
  issuer?: fhir.ReferenceArgs|undefined;
  /**
   * Business Identification Number (BIN number) used to identify the routing  of eclaims if the insurer themselves don't have a BIN number for all of their business.
   */
  bin?: fhir.IdentifierArgs|undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  period?: fhir.PeriodArgs|undefined;
  /**
   * The order of application of coverages is dependent on the types of coverage.
   */
  type?: fhir.CodingArgs|undefined;
  /**
   * The id issued to the subscriber.
   */
  subscriberId?: fhir.IdentifierArgs|undefined;
  /**
   * This value may uniquely identify the coverage or it may be used in conjunction with the additional identifiers below.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  group?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.group
   */
  _group?:fhir.FhirElementArgs;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  plan?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.plan
   */
  _plan?:fhir.FhirElementArgs;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.
   */
  subPlan?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Coverage.subPlan
   */
  _subPlan?:fhir.FhirElementArgs;
  /**
   * For some coverage a single identifier is issued to the PolicyHolder and dependent number issues to each to each of their dependents to track and manage the plan.
   */
  dependent?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Coverage.dependent
   */
  _dependent?:fhir.FhirElementArgs;
  /**
   * Some coverage, for example social plans, may be offered in short time increments, for example for a week or a month at a time, so while the rest of the plan details and identifiers may remain constant over time, the instance is incremented with each renewal and provided to the covered party on their 'card'.
   */
  sequence?: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Coverage.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
   */
  subscriber?: fhir.ReferenceArgs|undefined;
  /**
   * The identifier for a community of providers.
   */
  network?: fhir.IdentifierArgs|undefined;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  contract?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Financial instrument which may be used to pay for or reimburse health care products and services.
 */
export class Coverage extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Coverage';
  /**
   * Resource Type Name
   */
  public override resourceType: "Coverage";
  /**
   * Need to identify the issuer to target for processing and for coordination of benefit processing.
   */
  public issuer?: fhir.Reference|undefined;
  /**
   * Business Identification Number (BIN number) used to identify the routing  of eclaims if the insurer themselves don't have a BIN number for all of their business.
   */
  public bin?: fhir.Identifier|undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  public period?: fhir.Period|undefined;
  /**
   * The order of application of coverages is dependent on the types of coverage.
   */
  public type?: fhir.Coding|undefined;
  /**
   * The id issued to the subscriber.
   */
  public subscriberId?: fhir.Identifier|undefined;
  /**
   * This value may uniquely identify the coverage or it may be used in conjunction with the additional identifiers below.
   */
  public identifier: fhir.Identifier[];
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  public group?: fhir.FhirString|undefined;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  public plan?: fhir.FhirString|undefined;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.
   */
  public subPlan?: fhir.FhirString|undefined;
  /**
   * For some coverage a single identifier is issued to the PolicyHolder and dependent number issues to each to each of their dependents to track and manage the plan.
   */
  public dependent?: fhir.FhirPositiveInt|undefined;
  /**
   * Some coverage, for example social plans, may be offered in short time increments, for example for a week or a month at a time, so while the rest of the plan details and identifiers may remain constant over time, the instance is incremented with each renewal and provided to the covered party on their 'card'.
   */
  public sequence?: fhir.FhirPositiveInt|undefined;
  /**
   * The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
   */
  public subscriber?: fhir.Reference|undefined;
  /**
   * The identifier for a community of providers.
   */
  public network?: fhir.Identifier|undefined;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  public contract: fhir.Reference[];
  /**
   * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CoverageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Coverage';
    if (source['issuer']) { this.issuer = new fhir.Reference(source.issuer); }
    if (source['bin']) { this.bin = new fhir.Identifier(source.bin); }
    if (source['period']) { this.period = new fhir.Period(source.period); }
    if (source['type']) { this.type = new fhir.Coding(source.type); }
    if (source['subscriberId']) { this.subscriberId = new fhir.Identifier(source.subscriberId); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['group']) { this.group = new fhir.FhirString({value: source.group}); }
    if (source['_group']) {
      if (this.group) { this.group.addExtendedProperties(source._group!); }
      else { this.group = new fhir.FhirString(source._group as Partial<fhir.FhirStringArgs>); }
    }
    if (source['plan']) { this.plan = new fhir.FhirString({value: source.plan}); }
    if (source['_plan']) {
      if (this.plan) { this.plan.addExtendedProperties(source._plan!); }
      else { this.plan = new fhir.FhirString(source._plan as Partial<fhir.FhirStringArgs>); }
    }
    if (source['subPlan']) { this.subPlan = new fhir.FhirString({value: source.subPlan}); }
    if (source['_subPlan']) {
      if (this.subPlan) { this.subPlan.addExtendedProperties(source._subPlan!); }
      else { this.subPlan = new fhir.FhirString(source._subPlan as Partial<fhir.FhirStringArgs>); }
    }
    if (source['dependent']) { this.dependent = new fhir.FhirPositiveInt({value: source.dependent}); }
    if (source['_dependent']) {
      if (this.dependent) { this.dependent.addExtendedProperties(source._dependent!); }
      else { this.dependent = new fhir.FhirPositiveInt(source._dependent as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['subscriber']) { this.subscriber = new fhir.Reference(source.subscriber); }
    if (source['network']) { this.network = new fhir.Identifier(source.network); }
    if (source['contract']) { this.contract = source.contract.map((x) => new fhir.Reference(x)); }
    else { this.contract = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Coverage' }
    iss.push(...this.vOS('issuer',exp));
    iss.push(...this.vOS('bin',exp));
    iss.push(...this.vOS('period',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('subscriberId',exp));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('group',exp));
    iss.push(...this.vOS('plan',exp));
    iss.push(...this.vOS('subPlan',exp));
    iss.push(...this.vOS('dependent',exp));
    iss.push(...this.vOS('sequence',exp));
    iss.push(...this.vOS('subscriber',exp));
    iss.push(...this.vOS('network',exp));
    iss.push(...this.vOA('contract',exp));
    return iss;
  }
}
