// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Medication

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the MedicationProductIngredient type.
 */
export interface MedicationProductIngredientArgs extends fhir.BackboneElementArgs {
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  item: fhir.ReferenceArgs|null;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.
   */
  amount?: fhir.RatioArgs|undefined;
}

/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationProductIngredient extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationProductIngredient';
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  public item: fhir.Reference|null;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.
   */
  public amount?: fhir.Ratio|undefined;
  /**
   * Default constructor for MedicationProductIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationProductIngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = new fhir.Reference(source.item, options); }
    else { this.item = null; }
    if (source['amount']) { this.amount = new fhir.Ratio(source.amount, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Medication.product.ingredient' }
    iss.push(...this.vRS('item',exp));
    iss.push(...this.vOS('amount',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicationProductBatch type.
 */
export interface MedicationProductBatchArgs extends fhir.BackboneElementArgs {
  /**
   * The assigned lot number of a batch of the specified product.
   */
  lotNumber?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Medication.product.batch.lotNumber
   */
  _lotNumber?:fhir.FhirElementArgs;
  /**
   * When this specific batch of product will expire.
   */
  expirationDate?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Medication.product.batch.expirationDate
   */
  _expirationDate?:fhir.FhirElementArgs;
}

/**
 * Information about a group of medication produced or packaged from one production run.
 */
export class MedicationProductBatch extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationProductBatch';
  /**
   * The assigned lot number of a batch of the specified product.
   */
  public lotNumber?: fhir.FhirString|undefined;
  /**
   * When this specific batch of product will expire.
   */
  public expirationDate?: fhir.FhirDateTime|undefined;
  /**
   * Default constructor for MedicationProductBatch - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationProductBatchArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['lotNumber'] !== undefined) { this.lotNumber = new fhir.FhirString({value: source.lotNumber}, options); }
    if (source['_lotNumber']) {
      if (this.lotNumber) { this.lotNumber.addExtendedProperties(source._lotNumber!); }
      else { this.lotNumber = new fhir.FhirString(source._lotNumber as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['expirationDate'] !== undefined) { this.expirationDate = new fhir.FhirDateTime({value: source.expirationDate}, options); }
    if (source['_expirationDate']) {
      if (this.expirationDate) { this.expirationDate.addExtendedProperties(source._expirationDate!); }
      else { this.expirationDate = new fhir.FhirDateTime(source._expirationDate as Partial<fhir.FhirDateTimeArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Medication.product.batch' }
    iss.push(...this.vOS('lotNumber',exp));
    iss.push(...this.vOS('expirationDate',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicationProduct type.
 */
export interface MedicationProductArgs extends fhir.BackboneElementArgs {
  /**
   * Describes the form of the item.  Powder; tablets; carton.
   */
  form?: fhir.CodeableConceptArgs|undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   */
  ingredient?: fhir.MedicationProductIngredientArgs[]|undefined;
  /**
   * Information about a group of medication produced or packaged from one production run.
   */
  batch?: fhir.MedicationProductBatchArgs[]|undefined;
}

/**
 * Information that only applies to products (not packages).
 */
export class MedicationProduct extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationProduct';
  /**
   * Describes the form of the item.  Powder; tablets; carton.
   */
  public form?: fhir.CodeableConcept|undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   */
  public ingredient: fhir.MedicationProductIngredient[];
  /**
   * Information about a group of medication produced or packaged from one production run.
   */
  public batch: fhir.MedicationProductBatch[];
  /**
   * Default constructor for MedicationProduct - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationProductArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['form']) { this.form = new fhir.CodeableConcept(source.form, options); }
    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.MedicationProductIngredient(x, options)); }
    else { this.ingredient = []; }
    if (source['batch']) { this.batch = source.batch.map((x) => new fhir.MedicationProductBatch(x, options)); }
    else { this.batch = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Medication.product' }
    iss.push(...this.vOS('form',exp));
    iss.push(...this.vOA('ingredient',exp));
    iss.push(...this.vOA('batch',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicationPackageContent type.
 */
export interface MedicationPackageContentArgs extends fhir.BackboneElementArgs {
  /**
   * Identifies one of the items in the package.
   */
  item: fhir.ReferenceArgs|null;
  /**
   * The amount of the product that is in the package.
   */
  amount?: fhir.QuantityArgs|undefined;
}

/**
 * A set of components that go to make up the described item.
 */
export class MedicationPackageContent extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationPackageContent';
  /**
   * Identifies one of the items in the package.
   */
  public item: fhir.Reference|null;
  /**
   * The amount of the product that is in the package.
   */
  public amount?: fhir.Quantity|undefined;
  /**
   * Default constructor for MedicationPackageContent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationPackageContentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = new fhir.Reference(source.item, options); }
    else { this.item = null; }
    if (source['amount']) { this.amount = new fhir.Quantity(source.amount, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Medication.package.content' }
    iss.push(...this.vRS('item',exp));
    iss.push(...this.vOS('amount',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicationPackage type.
 */
export interface MedicationPackageArgs extends fhir.BackboneElementArgs {
  /**
   * The kind of container that this package comes as.
   */
  container?: fhir.CodeableConceptArgs|undefined;
  /**
   * A set of components that go to make up the described item.
   */
  content?: fhir.MedicationPackageContentArgs[]|undefined;
}

/**
 * Information that only applies to packages (not products).
 */
export class MedicationPackage extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicationPackage';
  /**
   * The kind of container that this package comes as.
   */
  public container?: fhir.CodeableConcept|undefined;
  /**
   * A set of components that go to make up the described item.
   */
  public content: fhir.MedicationPackageContent[];
  /**
   * Default constructor for MedicationPackage - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationPackageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['container']) { this.container = new fhir.CodeableConcept(source.container, options); }
    if (source['content']) { this.content = source.content.map((x) => new fhir.MedicationPackageContent(x, options)); }
    else { this.content = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Medication.package' }
    iss.push(...this.vOS('container',exp));
    iss.push(...this.vOA('content',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Medication type.
 */
export interface MedicationArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Medication"|undefined;
  /**
   * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Set to true if the item is attributable to a specific manufacturer.
   */
  isBrand?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Medication.isBrand
   */
  _isBrand?:fhir.FhirElementArgs;
  /**
   * Describes the details of the manufacturer.
   */
  manufacturer?: fhir.ReferenceArgs|undefined;
  /**
   * Information that only applies to products (not packages).
   */
  product?: fhir.MedicationProductArgs|undefined;
  /**
   * Information that only applies to packages (not products).
   */
  package?: fhir.MedicationPackageArgs|undefined;
}

/**
 * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
 */
export class Medication extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Medication';
  /**
   * Resource Type Name
   */
  public override resourceType: "Medication";
  /**
   * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Set to true if the item is attributable to a specific manufacturer.
   */
  public isBrand?: fhir.FhirBoolean|undefined;
  /**
   * Describes the details of the manufacturer.
   */
  public manufacturer?: fhir.Reference|undefined;
  /**
   * Information that only applies to products (not packages).
   */
  public product?: fhir.MedicationProduct|undefined;
  /**
   * Information that only applies to packages (not products).
   */
  public package?: fhir.MedicationPackage|undefined;
  /**
   * Default constructor for Medication - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Medication';
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code, options); }
    if (source['isBrand'] !== undefined) { this.isBrand = new fhir.FhirBoolean({value: source.isBrand}, options); }
    if (source['_isBrand']) {
      if (this.isBrand) { this.isBrand.addExtendedProperties(source._isBrand!); }
      else { this.isBrand = new fhir.FhirBoolean(source._isBrand as Partial<fhir.FhirBooleanArgs>, options); }
    }
    if (source['manufacturer']) { this.manufacturer = new fhir.Reference(source.manufacturer, options); }
    if (source['product']) { this.product = new fhir.MedicationProduct(source.product, options); }
    if (source['package']) { this.package = new fhir.MedicationPackage(source.package, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Medication' }
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOS('isBrand',exp));
    iss.push(...this.vOS('manufacturer',exp));
    iss.push(...this.vOS('product',exp));
    iss.push(...this.vOS('package',exp));
    return iss;
  }
}
