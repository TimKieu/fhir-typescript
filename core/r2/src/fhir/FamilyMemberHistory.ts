// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: FamilyMemberHistory

import * as fhir from '../fhir.js';

// @ts-ignore
import { HistoryStatusCodes,  HistoryStatusCodeType } from '../fhirValueSets/HistoryStatusCodes.js';
// @ts-ignore
import { HistoryStatusVsValidation } from '../fhirValueSets/HistoryStatusVsValidation.js';
// @ts-ignore
import { AdministrativeGenderCodes,  AdministrativeGenderCodeType } from '../fhirValueSets/AdministrativeGenderCodes.js';
// @ts-ignore
import { AdministrativeGenderVsValidation } from '../fhirValueSets/AdministrativeGenderVsValidation.js';
/**
 * Valid arguments for the FamilyMemberHistoryCondition type.
 */
export interface FamilyMemberHistoryConditionArgs extends fhir.BackboneElementArgs {
  /**
   * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
   */
  outcome?: fhir.CodeableConceptArgs|undefined;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onset?: fhir.Quantity|fhir.Range|fhir.Period|fhir.FhirString|undefined;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetRange?: fhir.RangeArgs|undefined;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetString?: fhir.FhirString|string|undefined;
  /**
   * An area where general notes can be placed about this specific condition.
   */
  note?: fhir.AnnotationArgs|undefined;
}

/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export class FamilyMemberHistoryCondition extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'FamilyMemberHistoryCondition';
  /**
   * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
   */
  public outcome?: fhir.CodeableConcept|undefined;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  public onset?: (fhir.Quantity|fhir.Range|fhir.Period|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element FamilyMemberHistory.condition.onset[x]
   */
  protected static readonly _fts_onsetIsChoice:true = true;
  /**
   * An area where general notes can be placed about this specific condition.
   */
  public note?: fhir.Annotation|undefined;
  /**
   * Default constructor for FamilyMemberHistoryCondition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<FamilyMemberHistoryConditionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['outcome']) { this.outcome = new fhir.CodeableConcept(source.outcome); }
    if (source['onset']) { this.onset = source.onset; }
    else if (source['onsetQuantity']) { this.onset = new fhir.Quantity(source.onsetQuantity); }
    else if (source['onsetRange']) { this.onset = new fhir.Range(source.onsetRange); }
    else if (source['onsetPeriod']) { this.onset = new fhir.Period(source.onsetPeriod); }
    else if (source['onsetString']) { this.onset = new fhir.FhirString({value: source.onsetString}); }
    if (source['note']) { this.note = new fhir.Annotation(source.note); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'FamilyMemberHistory.condition' }
    this.vRS('code',exp)
    this.vOS('outcome',exp)
    this.vOS('onset',exp)
    this.vOS('note',exp)
    return issues;
  }
}
/**
 * Valid arguments for the FamilyMemberHistory type.
 */
export interface FamilyMemberHistoryArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "FamilyMemberHistory"|undefined;
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The person who this history concerns.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * Allows determination of how current the summary is.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: FamilyMemberHistory.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * A code specifying a state of a Family Member History record.
   */
  status: fhir.FhirCode<HistoryStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: FamilyMemberHistory.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows greater ease in ensuring the same person is being talked about.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: FamilyMemberHistory.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * The type of relationship this person has to the patient (father, mother, brother etc.).
   */
  relationship: fhir.CodeableConceptArgs|null;
  /**
   * Not all relationship codes imply gender and the relative's gender can be relevant for risk assessments.
   */
  gender?: fhir.FhirCode<AdministrativeGenderCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: FamilyMemberHistory.gender
   */
  _gender?:fhir.FhirElementArgs;
  /**
   * Allows calculation of the relative's age.
   */
  born?: fhir.Period|fhir.FhirDate|fhir.FhirString|undefined;
  /**
   * Allows calculation of the relative's age.
   */
  bornPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Allows calculation of the relative's age.
   */
  bornDate?: fhir.FhirDate|string|undefined;
  /**
   * Allows calculation of the relative's age.
   */
  bornString?: fhir.FhirString|string|undefined;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  age?: fhir.Quantity|fhir.Range|fhir.FhirString|undefined;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  ageQuantity?: fhir.QuantityArgs|undefined;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  ageRange?: fhir.RangeArgs|undefined;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  ageString?: fhir.FhirString|string|undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceased?: fhir.FhirBoolean|fhir.Quantity|fhir.Range|fhir.FhirDate|fhir.FhirString|undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedRange?: fhir.RangeArgs|undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedDate?: fhir.FhirDate|string|undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedString?: fhir.FhirString|string|undefined;
  /**
   * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
   */
  note?: fhir.AnnotationArgs|undefined;
  /**
   * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
   */
  condition?: fhir.FamilyMemberHistoryConditionArgs[]|undefined;
}

/**
 * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
 */
export class FamilyMemberHistory extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'FamilyMemberHistory';
  /**
   * Resource Type Name
   */
  public override resourceType: "FamilyMemberHistory";
  /**
   * Need to allow connection to a wider workflow.
   */
  public identifier: fhir.Identifier[];
  /**
   * The person who this history concerns.
   */
  public patient: fhir.Reference|null;
  /**
   * Allows determination of how current the summary is.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * A code specifying a state of a Family Member History record.
   */
  public status: fhir.FhirCode<HistoryStatusCodeType>|null;
  /**
   * Allows greater ease in ensuring the same person is being talked about.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * The type of relationship this person has to the patient (father, mother, brother etc.).
   */
  public relationship: fhir.CodeableConcept|null;
  /**
   * Not all relationship codes imply gender and the relative's gender can be relevant for risk assessments.
   */
  public gender?: fhir.FhirCode<AdministrativeGenderCodeType>|undefined;
  /**
   * Allows calculation of the relative's age.
   */
  public born?: (fhir.Period|fhir.FhirDate|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element FamilyMemberHistory.born[x]
   */
  protected static readonly _fts_bornIsChoice:true = true;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  public age?: (fhir.Quantity|fhir.Range|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element FamilyMemberHistory.age[x]
   */
  protected static readonly _fts_ageIsChoice:true = true;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  public deceased?: (fhir.FhirBoolean|fhir.Quantity|fhir.Range|fhir.FhirDate|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element FamilyMemberHistory.deceased[x]
   */
  protected static readonly _fts_deceasedIsChoice:true = true;
  /**
   * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
   */
  public note?: fhir.Annotation|undefined;
  /**
   * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
   */
  public condition: fhir.FamilyMemberHistoryCondition[];
  /**
   * Default constructor for FamilyMemberHistory - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<FamilyMemberHistoryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'FamilyMemberHistory';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<HistoryStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<HistoryStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship); }
    else { this.relationship = null; }
    if (source['gender']) { this.gender = new fhir.FhirCode<AdministrativeGenderCodeType>({value: source.gender}); }
    if (source['_gender']) {
      if (this.gender) { this.gender.addExtendedProperties(source._gender!); }
      else { this.gender = new fhir.FhirCode<AdministrativeGenderCodeType>(source._gender as Partial<fhir.FhirCode>); }
    }
    if (source['born']) { this.born = source.born; }
    else if (source['bornPeriod']) { this.born = new fhir.Period(source.bornPeriod); }
    else if (source['bornDate']) { this.born = new fhir.FhirDate({value: source.bornDate}); }
    else if (source['bornString']) { this.born = new fhir.FhirString({value: source.bornString}); }
    if (source['age']) { this.age = source.age; }
    else if (source['ageQuantity']) { this.age = new fhir.Quantity(source.ageQuantity); }
    else if (source['ageRange']) { this.age = new fhir.Range(source.ageRange); }
    else if (source['ageString']) { this.age = new fhir.FhirString({value: source.ageString}); }
    if (source['deceased']) { this.deceased = source.deceased; }
    else if (source['deceasedBoolean']) { this.deceased = new fhir.FhirBoolean({value: source.deceasedBoolean}); }
    else if (source['deceasedQuantity']) { this.deceased = new fhir.Quantity(source.deceasedQuantity); }
    else if (source['deceasedRange']) { this.deceased = new fhir.Range(source.deceasedRange); }
    else if (source['deceasedDate']) { this.deceased = new fhir.FhirDate({value: source.deceasedDate}); }
    else if (source['deceasedString']) { this.deceased = new fhir.FhirString({value: source.deceasedString}); }
    if (source['note']) { this.note = new fhir.Annotation(source.note); }
    if (source['condition']) { this.condition = source.condition.map((x) => new fhir.FamilyMemberHistoryCondition(x)); }
    else { this.condition = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'FamilyMemberHistory' }
    this.vRS('resourceType',exp)
    this.vOA('identifier',exp)
    this.vRS('patient',exp)
    this.vOS('date',exp)
    this.vRSV('status',exp,'HistoryStatus',HistoryStatusVsValidation,'r')
    this.vOS('name',exp)
    this.vRS('relationship',exp)
    this.vOSV('gender',exp,'AdministrativeGender',AdministrativeGenderVsValidation,'r')
    this.vOS('born',exp)
    this.vOS('age',exp)
    this.vOS('deceased',exp)
    this.vOS('note',exp)
    this.vOA('condition',exp)
    return issues;
  }
}
