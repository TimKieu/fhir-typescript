// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: ReferralRequest

import * as fhir from '../fhir.js';

// @ts-ignore
import { ReferralstatusCodes,  ReferralstatusCodeType } from '../fhirValueSets/ReferralstatusCodes.js';
// @ts-ignore
import { ReferralstatusVsValidation } from '../fhirValueSets/ReferralstatusVsValidation.js';
// @ts-ignore
import { DiagnosticOrderPriorityCodes,  DiagnosticOrderPriorityCodeType } from '../fhirValueSets/DiagnosticOrderPriorityCodes.js';
// @ts-ignore
import { DiagnosticOrderPriorityVsValidation } from '../fhirValueSets/DiagnosticOrderPriorityVsValidation.js';
/**
 * Valid arguments for the ReferralRequest type.
 */
export interface ReferralRequestArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ReferralRequest"|undefined;
  /**
   * The workflow status of the referral or transfer of care request.
   */
  status: fhir.FhirCode<ReferralstatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ReferralRequest.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Business identifier that uniquely identifies the referral/care transfer request instance.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Date/DateTime of creation for draft requests and date of activation for active requests.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ReferralRequest.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * An indication of the type of referral (or where applicable the type of transfer of care) request.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
   */
  specialty?: fhir.CodeableConceptArgs|undefined;
  /**
   * An indication of the urgency of referral (or where applicable the type of transfer of care) request.
   */
  priority?: fhir.CodeableConceptArgs|undefined;
  /**
   * The patient who is the subject of a referral or transfer of care request.
   */
  patient?: fhir.ReferenceArgs|undefined;
  /**
   * The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
   */
  requester?: fhir.ReferenceArgs|undefined;
  /**
   * The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
   */
  recipient?: fhir.ReferenceArgs[]|undefined;
  /**
   * The encounter at which the request for referral or transfer of care is initiated.
   */
  encounter?: fhir.ReferenceArgs|undefined;
  /**
   * Date/DateTime the request for referral or transfer of care is sent by the author.
   */
  dateSent?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ReferralRequest.dateSent
   */
  _dateSent?:fhir.FhirElementArgs;
  /**
   * Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
   */
  reason?: fhir.CodeableConceptArgs|undefined;
  /**
   * The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ReferralRequest.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
   */
  serviceRequested?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
   */
  supportingInformation?: fhir.ReferenceArgs[]|undefined;
  /**
   * Use cases: (1) to indicate that the requested service is not to happen before a specified date, and saving the start date in Period.start; (2) to indicate that the requested service must happen before a specified date, and saving the end date in Period.end; (3) to indicate that the requested service must happen during the specified dates ("start" and "end" values).
   */
  fulfillmentTime?: fhir.PeriodArgs|undefined;
}

/**
 * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
 */
export class ReferralRequest extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ReferralRequest';
  /**
   * Resource Type Name
   */
  public override resourceType: "ReferralRequest";
  /**
   * The workflow status of the referral or transfer of care request.
   */
  public status: fhir.FhirCode<ReferralstatusCodeType>|null;
  /**
   * Business identifier that uniquely identifies the referral/care transfer request instance.
   */
  public identifier: fhir.Identifier[];
  /**
   * Date/DateTime of creation for draft requests and date of activation for active requests.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * An indication of the type of referral (or where applicable the type of transfer of care) request.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
   */
  public specialty?: fhir.CodeableConcept|undefined;
  /**
   * An indication of the urgency of referral (or where applicable the type of transfer of care) request.
   */
  public priority?: fhir.CodeableConcept|undefined;
  /**
   * The patient who is the subject of a referral or transfer of care request.
   */
  public patient?: fhir.Reference|undefined;
  /**
   * The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
   */
  public requester?: fhir.Reference|undefined;
  /**
   * The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
   */
  public recipient: fhir.Reference[];
  /**
   * The encounter at which the request for referral or transfer of care is initiated.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Date/DateTime the request for referral or transfer of care is sent by the author.
   */
  public dateSent?: fhir.FhirDateTime|undefined;
  /**
   * Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
   */
  public serviceRequested: fhir.CodeableConcept[];
  /**
   * Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
   */
  public supportingInformation: fhir.Reference[];
  /**
   * Use cases: (1) to indicate that the requested service is not to happen before a specified date, and saving the start date in Period.start; (2) to indicate that the requested service must happen before a specified date, and saving the end date in Period.end; (3) to indicate that the requested service must happen during the specified dates ("start" and "end" values).
   */
  public fulfillmentTime?: fhir.Period|undefined;
  /**
   * Default constructor for ReferralRequest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ReferralRequestArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ReferralRequest';
    if (source['status'] !== undefined) { this.status = new fhir.FhirCode<ReferralstatusCodeType>({value: source.status}, options); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<ReferralstatusCodeType>(source._status as Partial<fhir.FhirCode>, options); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['date'] !== undefined) { this.date = new fhir.FhirDateTime({value: source.date}, options); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type, options); }
    if (source['specialty']) { this.specialty = new fhir.CodeableConcept(source.specialty, options); }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority, options); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient, options); }
    if (source['requester']) { this.requester = new fhir.Reference(source.requester, options); }
    if (source['recipient']) { this.recipient = source.recipient.map((x) => new fhir.Reference(x, options)); }
    else { this.recipient = []; }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter, options); }
    if (source['dateSent'] !== undefined) { this.dateSent = new fhir.FhirDateTime({value: source.dateSent}, options); }
    if (source['_dateSent']) {
      if (this.dateSent) { this.dateSent.addExtendedProperties(source._dateSent!); }
      else { this.dateSent = new fhir.FhirDateTime(source._dateSent as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['reason']) { this.reason = new fhir.CodeableConcept(source.reason, options); }
    if (source['description'] !== undefined) { this.description = new fhir.FhirString({value: source.description}, options); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['serviceRequested']) { this.serviceRequested = source.serviceRequested.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.serviceRequested = []; }
    if (source['supportingInformation']) { this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x, options)); }
    else { this.supportingInformation = []; }
    if (source['fulfillmentTime']) { this.fulfillmentTime = new fhir.Period(source.fulfillmentTime, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ReferralRequest' }
    iss.push(...this.vRSV('status',exp,'Referralstatus',ReferralstatusVsValidation,'r'));
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('specialty',exp));
    iss.push(...this.vOS('priority',exp));
    iss.push(...this.vOS('patient',exp));
    iss.push(...this.vOS('requester',exp));
    iss.push(...this.vOA('recipient',exp));
    iss.push(...this.vOS('encounter',exp));
    iss.push(...this.vOS('dateSent',exp));
    iss.push(...this.vOS('reason',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('serviceRequested',exp));
    iss.push(...this.vOA('supportingInformation',exp));
    iss.push(...this.vOS('fulfillmentTime',exp));
    return iss;
  }
}
