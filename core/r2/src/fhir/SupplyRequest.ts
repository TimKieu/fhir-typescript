// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: SupplyRequest

import * as fhir from '../fhir.js';

// @ts-ignore
import { SupplyrequestStatusCodes,  SupplyrequestStatusCodeType } from '../fhirValueSets/SupplyrequestStatusCodes.js';
// @ts-ignore
import { SupplyrequestStatusVsValidation } from '../fhirValueSets/SupplyrequestStatusVsValidation.js';
/**
 * Valid arguments for the SupplyRequestWhen type.
 */
export interface SupplyRequestWhenArgs extends fhir.BackboneElementArgs {
  /**
   * Code indicating when the request should be fulfilled.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Formal fulfillment schedule.
   */
  schedule?: fhir.TimingArgs|undefined;
}

/**
 * When the request should be fulfilled.
 */
export class SupplyRequestWhen extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'SupplyRequestWhen';
  /**
   * Code indicating when the request should be fulfilled.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Formal fulfillment schedule.
   */
  public schedule?: fhir.Timing|undefined;
  /**
   * Default constructor for SupplyRequestWhen - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SupplyRequestWhenArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['schedule']) { this.schedule = new fhir.Timing(source.schedule); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'SupplyRequest.when' }
    this.vOS('code',exp)
    this.vOS('schedule',exp)
    return issues;
  }
}
/**
 * Valid arguments for the SupplyRequest type.
 */
export interface SupplyRequestArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "SupplyRequest"|undefined;
  /**
   * A link to a resource representing the person whom the ordered item is for.
   */
  patient?: fhir.ReferenceArgs|undefined;
  /**
   * The Practitioner , Organization or Patient who initiated this order for the supply.
   */
  source?: fhir.ReferenceArgs|undefined;
  /**
   * When the request was made.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Unique identifier for this supply request.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * Status of the supply request.
   */
  status?: fhir.FhirCode<SupplyrequestStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: SupplyRequest.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  kind?: fhir.CodeableConceptArgs|undefined;
  /**
   * The item that is requested to be supplied.
   */
  orderedItem?: fhir.ReferenceArgs|undefined;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: fhir.ReferenceArgs[]|undefined;
  /**
   * Why the supply item was requested.
   */
  reason?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Why the supply item was requested.
   */
  reasonCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Why the supply item was requested.
   */
  reasonReference?: fhir.ReferenceArgs|undefined;
  /**
   * When the request should be fulfilled.
   */
  when?: fhir.SupplyRequestWhenArgs|undefined;
}

/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export class SupplyRequest extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'SupplyRequest';
  /**
   * Resource Type Name
   */
  public override resourceType: "SupplyRequest";
  /**
   * A link to a resource representing the person whom the ordered item is for.
   */
  public patient?: fhir.Reference|undefined;
  /**
   * The Practitioner , Organization or Patient who initiated this order for the supply.
   */
  public source?: fhir.Reference|undefined;
  /**
   * When the request was made.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Unique identifier for this supply request.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Status of the supply request.
   */
  public status?: fhir.FhirCode<SupplyrequestStatusCodeType>|undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  public kind?: fhir.CodeableConcept|undefined;
  /**
   * The item that is requested to be supplied.
   */
  public orderedItem?: fhir.Reference|undefined;
  /**
   * Who is intended to fulfill the request.
   */
  public supplier: fhir.Reference[];
  /**
   * Why the supply item was requested.
   */
  public reason?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element SupplyRequest.reason[x]
   */
  protected static readonly _fts_reasonIsChoice:true = true;
  /**
   * When the request should be fulfilled.
   */
  public when?: fhir.SupplyRequestWhen|undefined;
  /**
   * Default constructor for SupplyRequest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<SupplyRequestArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'SupplyRequest';
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    if (source['source']) { this.source = new fhir.Reference(source.source); }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['status']) { this.status = new fhir.FhirCode<SupplyrequestStatusCodeType>({value: source.status}); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<SupplyrequestStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['kind']) { this.kind = new fhir.CodeableConcept(source.kind); }
    if (source['orderedItem']) { this.orderedItem = new fhir.Reference(source.orderedItem); }
    if (source['supplier']) { this.supplier = source.supplier.map((x) => new fhir.Reference(x)); }
    else { this.supplier = []; }
    if (source['reason']) { this.reason = source.reason; }
    else if (source['reasonCodeableConcept']) { this.reason = new fhir.CodeableConcept(source.reasonCodeableConcept); }
    else if (source['reasonReference']) { this.reason = new fhir.Reference(source.reasonReference); }
    if (source['when']) { this.when = new fhir.SupplyRequestWhen(source.when); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'SupplyRequest' }
    this.vRS('resourceType',exp)
    this.vOS('patient',exp)
    this.vOS('source',exp)
    this.vOS('date',exp)
    this.vOS('identifier',exp)
    this.vOSV('status',exp,'SupplyrequestStatus',SupplyrequestStatusVsValidation,'r')
    this.vOS('kind',exp)
    this.vOS('orderedItem',exp)
    this.vOA('supplier',exp)
    this.vOS('reason',exp)
    this.vOS('when',exp)
    return issues;
  }
}
