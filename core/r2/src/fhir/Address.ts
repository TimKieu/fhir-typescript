// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Address

import * as fhir from '../fhir.js';

// @ts-ignore
import { AddressUseCodes,  AddressUseCodeType } from '../fhirValueSets/AddressUseCodes.js';
// @ts-ignore
import { AddressUseVsValidation } from '../fhirValueSets/AddressUseVsValidation.js';
// @ts-ignore
import { AddressTypeCodes,  AddressTypeCodeType } from '../fhirValueSets/AddressTypeCodes.js';
// @ts-ignore
import { AddressTypeVsValidation } from '../fhirValueSets/AddressTypeVsValidation.js';
/**
 * Valid arguments for the Address type.
 */
export interface AddressArgs extends fhir.FhirElementArgs {
  /**
   * Allows an appropriate address to be chosen from a list of many.
   */
  use?: fhir.FhirCode<AddressUseCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Address.use
   */
  _use?:fhir.FhirElementArgs;
  /**
   * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
   */
  type?: fhir.FhirCode<AddressTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Address.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A renderable, unencoded form.
   */
  text?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Address.text
   */
  _text?:fhir.FhirElementArgs;
  /**
   * home | work | temp | old - purpose of this address.
   */
  line?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Address.line
   */
  _line?:(fhir.FhirElementArgs|null)[];
  /**
   * The name of the city, town, village or other community or delivery center.
   */
  city?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Address.city
   */
  _city?:fhir.FhirElementArgs;
  /**
   * The name of the administrative area (county).
   */
  district?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Address.district
   */
  _district?:fhir.FhirElementArgs;
  /**
   * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
   */
  state?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Address.state
   */
  _state?:fhir.FhirElementArgs;
  /**
   * A postal code designating a region defined by the postal service.
   */
  postalCode?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Address.postalCode
   */
  _postalCode?:fhir.FhirElementArgs;
  /**
   * Country - a nation as commonly understood or generally accepted.
   */
  country?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Address.country
   */
  _country?:fhir.FhirElementArgs;
  /**
   * Allows addresses to be placed in historical context.
   */
  period?: fhir.PeriodArgs|undefined;
}

/**
 * There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
 */
export class Address extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Address';
  /**
   * Allows an appropriate address to be chosen from a list of many.
   */
  public use?: fhir.FhirCode<AddressUseCodeType>|undefined;
  /**
   * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
   */
  public type?: fhir.FhirCode<AddressTypeCodeType>|undefined;
  /**
   * A renderable, unencoded form.
   */
  public text?: fhir.FhirString|undefined;
  /**
   * home | work | temp | old - purpose of this address.
   */
  public line: fhir.FhirString[];
  /**
   * The name of the city, town, village or other community or delivery center.
   */
  public city?: fhir.FhirString|undefined;
  /**
   * The name of the administrative area (county).
   */
  public district?: fhir.FhirString|undefined;
  /**
   * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
   */
  public state?: fhir.FhirString|undefined;
  /**
   * A postal code designating a region defined by the postal service.
   */
  public postalCode?: fhir.FhirString|undefined;
  /**
   * Country - a nation as commonly understood or generally accepted.
   */
  public country?: fhir.FhirString|undefined;
  /**
   * Allows addresses to be placed in historical context.
   */
  public period?: fhir.Period|undefined;
  /**
   * Default constructor for Address - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AddressArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['use']) { this.use = new fhir.FhirCode<AddressUseCodeType>({value: source.use}); }
    if (source['_use']) {
      if (this.use) { this.use.addExtendedProperties(source._use!); }
      else { this.use = new fhir.FhirCode<AddressUseCodeType>(source._use as Partial<fhir.FhirCode>); }
    }
    if (source['type']) { this.type = new fhir.FhirCode<AddressTypeCodeType>({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<AddressTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['text']) { this.text = new fhir.FhirString({value: source.text}); }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirString(source._text as Partial<fhir.FhirStringArgs>); }
    }
    if (source['line']) { this.line = source.line.map((x) => new fhir.FhirString({value: x})); }
    else { this.line = []; }
    if (source['_line']) {
      source._line.forEach((x,i) => {
        if (this.line.length >= i) { if (x) { this.line[i].addExtendedProperties(x); } }
        else { if (x) { this.line.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['city']) { this.city = new fhir.FhirString({value: source.city}); }
    if (source['_city']) {
      if (this.city) { this.city.addExtendedProperties(source._city!); }
      else { this.city = new fhir.FhirString(source._city as Partial<fhir.FhirStringArgs>); }
    }
    if (source['district']) { this.district = new fhir.FhirString({value: source.district}); }
    if (source['_district']) {
      if (this.district) { this.district.addExtendedProperties(source._district!); }
      else { this.district = new fhir.FhirString(source._district as Partial<fhir.FhirStringArgs>); }
    }
    if (source['state']) { this.state = new fhir.FhirString({value: source.state}); }
    if (source['_state']) {
      if (this.state) { this.state.addExtendedProperties(source._state!); }
      else { this.state = new fhir.FhirString(source._state as Partial<fhir.FhirStringArgs>); }
    }
    if (source['postalCode']) { this.postalCode = new fhir.FhirString({value: source.postalCode}); }
    if (source['_postalCode']) {
      if (this.postalCode) { this.postalCode.addExtendedProperties(source._postalCode!); }
      else { this.postalCode = new fhir.FhirString(source._postalCode as Partial<fhir.FhirStringArgs>); }
    }
    if (source['country']) { this.country = new fhir.FhirString({value: source.country}); }
    if (source['_country']) {
      if (this.country) { this.country.addExtendedProperties(source._country!); }
      else { this.country = new fhir.FhirString(source._country as Partial<fhir.FhirStringArgs>); }
    }
    if (source['period']) { this.period = new fhir.Period(source.period); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Address' }
    iss.push(...this.vOSV('use',exp,'AddressUse',AddressUseVsValidation,'r'));
    iss.push(...this.vOSV('type',exp,'AddressType',AddressTypeVsValidation,'r'));
    iss.push(...this.vOS('text',exp));
    iss.push(...this.vOA('line',exp));
    iss.push(...this.vOS('city',exp));
    iss.push(...this.vOS('district',exp));
    iss.push(...this.vOS('state',exp));
    iss.push(...this.vOS('postalCode',exp));
    iss.push(...this.vOS('country',exp));
    iss.push(...this.vOS('period',exp));
    return iss;
  }
}
