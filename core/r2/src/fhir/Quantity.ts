// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity

import * as fhir from '../fhir.js';

// @ts-ignore
import { QuantityComparatorCodes,  QuantityComparatorCodeType } from '../fhirValueSets/QuantityComparatorCodes.js';
// @ts-ignore
import { QuantityComparatorVsValidation } from '../fhirValueSets/QuantityComparatorVsValidation.js';
/**
 * Valid arguments for the Quantity type.
 */
export interface QuantityArgs extends fhir.FhirElementArgs {
  /**
   * Precision is handled implicitly in almost all cases of measurement.
   */
  value?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: Quantity.value
   */
  _value?:fhir.FhirElementArgs;
  /**
   * Need a framework for handling measures where the value is &lt;5ug/L or &gt;400mg/L due to the limitations of measuring methodology.
   */
  comparator?: fhir.FhirCode<QuantityComparatorCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Quantity.comparator
   */
  _comparator?:fhir.FhirElementArgs;
  /**
   * There are many representations for units of measure and in many contexts, particular representations are fixed and required. I.e. mcg for micrograms.
   */
  unit?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Quantity.unit
   */
  _unit?:fhir.FhirElementArgs;
  /**
   * Need to know the system that defines the coded form of the unit.
   */
  system?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Quantity.system
   */
  _system?:fhir.FhirElementArgs;
  /**
   * Need a computable form of the unit that is fixed across all forms. UCUM provides this for quantities, but SNOMED CT provides many units of interest.
   */
  code?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Quantity.code
   */
  _code?:fhir.FhirElementArgs;
}

/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Quantity';
  /**
   * Precision is handled implicitly in almost all cases of measurement.
   */
  public value?: fhir.FhirDecimal|undefined;
  /**
   * Need a framework for handling measures where the value is &lt;5ug/L or &gt;400mg/L due to the limitations of measuring methodology.
   */
  public comparator?: fhir.FhirCode<QuantityComparatorCodeType>|undefined;
  /**
   * There are many representations for units of measure and in many contexts, particular representations are fixed and required. I.e. mcg for micrograms.
   */
  public unit?: fhir.FhirString|undefined;
  /**
   * Need to know the system that defines the coded form of the unit.
   */
  public system?: fhir.FhirUri|undefined;
  /**
   * Need a computable form of the unit that is fixed across all forms. UCUM provides this for quantities, but SNOMED CT provides many units of interest.
   */
  public code?: fhir.FhirCode|undefined;
  /**
   * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<QuantityArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['value'] !== undefined) { this.value = new fhir.FhirDecimal({value: source.value}, options); }
    if (source['_value']) {
      if (this.value) { this.value.addExtendedProperties(source._value!); }
      else { this.value = new fhir.FhirDecimal(source._value as Partial<fhir.FhirDecimalArgs>, options); }
    }
    if (source['comparator'] !== undefined) { this.comparator = new fhir.FhirCode<QuantityComparatorCodeType>({value: source.comparator}, options); }
    if (source['_comparator']) {
      if (this.comparator) { this.comparator.addExtendedProperties(source._comparator!); }
      else { this.comparator = new fhir.FhirCode<QuantityComparatorCodeType>(source._comparator as Partial<fhir.FhirCode>, options); }
    }
    if (source['unit'] !== undefined) { this.unit = new fhir.FhirString({value: source.unit}, options); }
    if (source['_unit']) {
      if (this.unit) { this.unit.addExtendedProperties(source._unit!); }
      else { this.unit = new fhir.FhirString(source._unit as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['system'] !== undefined) { this.system = new fhir.FhirUri({value: source.system}, options); }
    if (source['_system']) {
      if (this.system) { this.system.addExtendedProperties(source._system!); }
      else { this.system = new fhir.FhirUri(source._system as Partial<fhir.FhirUriArgs>, options); }
    }
    if (source['code'] !== undefined) { this.code = new fhir.FhirCode({value: source.code}, options); }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode(source._code as Partial<fhir.FhirCodeArgs>, options); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Quantity' }
    iss.push(...this.vOS('value',exp));
    iss.push(...this.vOSV('comparator',exp,'QuantityComparator',QuantityComparatorVsValidation,'r'));
    iss.push(...this.vOS('unit',exp));
    iss.push(...this.vOS('system',exp));
    iss.push(...this.vOS('code',exp));
    return iss;
  }
}
