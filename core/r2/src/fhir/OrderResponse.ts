// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: OrderResponse

import * as fhir from '../fhir.js';

// @ts-ignore
import { OrderStatusCodes,  OrderStatusCodeType } from '../fhirValueSets/OrderStatusCodes.js';
// @ts-ignore
import { OrderStatusVsValidation } from '../fhirValueSets/OrderStatusVsValidation.js';
/**
 * Valid arguments for the OrderResponse type.
 */
export interface OrderResponseArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "OrderResponse"|undefined;
  /**
   * Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * A reference to the order that this is in response to.
   */
  request: fhir.ReferenceArgs|null;
  /**
   * The date and time at which this order response was made (created/posted).
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: OrderResponse.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * The person, organization, or device credited with making the response.
   */
  who?: fhir.ReferenceArgs|undefined;
  /**
   * What this response says about the status of the original order.
   */
  orderStatus: fhir.FhirCode<OrderStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: OrderResponse.orderStatus
   */
  _orderStatus?:fhir.FhirElementArgs;
  /**
   * Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: OrderResponse.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
   */
  fulfillment?: fhir.ReferenceArgs[]|undefined;
}

/**
 * A response to an order.
 */
export class OrderResponse extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'OrderResponse';
  /**
   * Resource Type Name
   */
  public override resourceType: "OrderResponse";
  /**
   * Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
   */
  public identifier: fhir.Identifier[];
  /**
   * A reference to the order that this is in response to.
   */
  public request: fhir.Reference|null;
  /**
   * The date and time at which this order response was made (created/posted).
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * The person, organization, or device credited with making the response.
   */
  public who?: fhir.Reference|undefined;
  /**
   * What this response says about the status of the original order.
   */
  public orderStatus: fhir.FhirCode<OrderStatusCodeType>|null;
  /**
   * Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
   */
  public fulfillment: fhir.Reference[];
  /**
   * Default constructor for OrderResponse - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<OrderResponseArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'OrderResponse';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['request']) { this.request = new fhir.Reference(source.request, options); }
    else { this.request = null; }
    if (source['date'] !== undefined) { this.date = new fhir.FhirDateTime({value: source.date}, options); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['who']) { this.who = new fhir.Reference(source.who, options); }
    if (source['orderStatus'] !== undefined) { this.orderStatus = new fhir.FhirCode<OrderStatusCodeType>({value: source.orderStatus}, options); }
    else { this.orderStatus = null; }
    if (source['_orderStatus']) {
      if (this.orderStatus) { this.orderStatus.addExtendedProperties(source._orderStatus!); }
      else { this.orderStatus = new fhir.FhirCode<OrderStatusCodeType>(source._orderStatus as Partial<fhir.FhirCode>, options); }
    }
    if (source['description'] !== undefined) { this.description = new fhir.FhirString({value: source.description}, options); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['fulfillment']) { this.fulfillment = source.fulfillment.map((x) => new fhir.Reference(x, options)); }
    else { this.fulfillment = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'OrderResponse' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vRS('request',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('who',exp));
    iss.push(...this.vRSV('orderStatus',exp,'OrderStatus',OrderStatusVsValidation,'r'));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('fulfillment',exp));
    return iss;
  }
}
