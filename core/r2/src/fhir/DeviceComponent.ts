// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceComponent

import * as fhir from '../fhir.js';

// @ts-ignore
import { MeasurementPrincipleCodes,  MeasurementPrincipleCodeType } from '../fhirValueSets/MeasurementPrincipleCodes.js';
// @ts-ignore
import { MeasurementPrincipleVsValidation } from '../fhirValueSets/MeasurementPrincipleVsValidation.js';
/**
 * Valid arguments for the DeviceComponentProductionSpecification type.
 */
export interface DeviceComponentProductionSpecificationArgs extends fhir.BackboneElementArgs {
  /**
   * Describes the specification type, such as, serial number, part number, hardware revision, software revision, etc.
   */
  specType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Describes the internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacture can make use of.
   */
  componentId?: fhir.IdentifierArgs|undefined;
  /**
   * Describes the printable string defining the component.
   */
  productionSpec?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: DeviceComponent.productionSpecification.productionSpec
   */
  _productionSpec?:fhir.FhirElementArgs;
}

/**
 * Describes the production specification such as component revision, serial number, etc.
 */
export class DeviceComponentProductionSpecification extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DeviceComponentProductionSpecification';
  /**
   * Describes the specification type, such as, serial number, part number, hardware revision, software revision, etc.
   */
  public specType?: fhir.CodeableConcept|undefined;
  /**
   * Describes the internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacture can make use of.
   */
  public componentId?: fhir.Identifier|undefined;
  /**
   * Describes the printable string defining the component.
   */
  public productionSpec?: fhir.FhirString|undefined;
  /**
   * Default constructor for DeviceComponentProductionSpecification - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DeviceComponentProductionSpecificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['specType']) { this.specType = new fhir.CodeableConcept(source.specType); }
    if (source['componentId']) { this.componentId = new fhir.Identifier(source.componentId); }
    if (source['productionSpec']) { this.productionSpec = new fhir.FhirString({value: source.productionSpec}); }
    if (source['_productionSpec']) {
      if (this.productionSpec) { this.productionSpec.addExtendedProperties(source._productionSpec!); }
      else { this.productionSpec = new fhir.FhirString(source._productionSpec as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'DeviceComponent.productionSpecification' }
    this.vOS('specType',exp)
    this.vOS('componentId',exp)
    this.vOS('productionSpec',exp)
    return issues;
  }
}
/**
 * Valid arguments for the DeviceComponent type.
 */
export interface DeviceComponentArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "DeviceComponent"|undefined;
  /**
   * Describes the specific component type as defined in the object-oriented or metric nomenclature partition.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Describes the local assigned unique identification by the software. For example: handle ID.
   */
  identifier: fhir.IdentifierArgs|null;
  /**
   * Describes the timestamp for the most recent system change which includes device configuration or setting change.
   */
  lastSystemChange: fhir.FhirInstant|string|undefined;
  /**
   * Extended properties for primitive element: DeviceComponent.lastSystemChange
   */
  _lastSystemChange?:fhir.FhirElementArgs;
  /**
   * Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.
   */
  source?: fhir.ReferenceArgs|undefined;
  /**
   * Describes the link to the parent resource. For example: Channel is linked to its VMD parent.
   */
  parent?: fhir.ReferenceArgs|undefined;
  /**
   * Indicates current operational status of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
   */
  parameterGroup?: fhir.CodeableConceptArgs|undefined;
  /**
   * Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
   */
  measurementPrinciple?: fhir.FhirCode<MeasurementPrincipleCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DeviceComponent.measurementPrinciple
   */
  _measurementPrinciple?:fhir.FhirElementArgs;
  /**
   * Describes the production specification such as component revision, serial number, etc.
   */
  productionSpecification?: fhir.DeviceComponentProductionSpecificationArgs[]|undefined;
  /**
   * Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
   */
  languageCode?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceComponent extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DeviceComponent';
  /**
   * Resource Type Name
   */
  public override resourceType: "DeviceComponent";
  /**
   * Describes the specific component type as defined in the object-oriented or metric nomenclature partition.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Describes the local assigned unique identification by the software. For example: handle ID.
   */
  public identifier: fhir.Identifier|null;
  /**
   * Describes the timestamp for the most recent system change which includes device configuration or setting change.
   */
  public lastSystemChange: fhir.FhirInstant|null;
  /**
   * Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.
   */
  public source?: fhir.Reference|undefined;
  /**
   * Describes the link to the parent resource. For example: Channel is linked to its VMD parent.
   */
  public parent?: fhir.Reference|undefined;
  /**
   * Indicates current operational status of the device. For example: On, Off, Standby, etc.
   */
  public operationalStatus: fhir.CodeableConcept[];
  /**
   * Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
   */
  public parameterGroup?: fhir.CodeableConcept|undefined;
  /**
   * Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
   */
  public measurementPrinciple?: fhir.FhirCode<MeasurementPrincipleCodeType>|undefined;
  /**
   * Describes the production specification such as component revision, serial number, etc.
   */
  public productionSpecification: fhir.DeviceComponentProductionSpecification[];
  /**
   * Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
   */
  public languageCode?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for DeviceComponent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DeviceComponentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'DeviceComponent';
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    else { this.identifier = null; }
    if (source['lastSystemChange']) { this.lastSystemChange = new fhir.FhirInstant({value: source.lastSystemChange}); }
    else { this.lastSystemChange = null; }
    if (source['_lastSystemChange']) {
      if (this.lastSystemChange) { this.lastSystemChange.addExtendedProperties(source._lastSystemChange!); }
      else { this.lastSystemChange = new fhir.FhirInstant(source._lastSystemChange as Partial<fhir.FhirInstantArgs>); }
    }
    if (source['source']) { this.source = new fhir.Reference(source.source); }
    if (source['parent']) { this.parent = new fhir.Reference(source.parent); }
    if (source['operationalStatus']) { this.operationalStatus = source.operationalStatus.map((x) => new fhir.CodeableConcept(x)); }
    else { this.operationalStatus = []; }
    if (source['parameterGroup']) { this.parameterGroup = new fhir.CodeableConcept(source.parameterGroup); }
    if (source['measurementPrinciple']) { this.measurementPrinciple = new fhir.FhirCode<MeasurementPrincipleCodeType>({value: source.measurementPrinciple}); }
    if (source['_measurementPrinciple']) {
      if (this.measurementPrinciple) { this.measurementPrinciple.addExtendedProperties(source._measurementPrinciple!); }
      else { this.measurementPrinciple = new fhir.FhirCode<MeasurementPrincipleCodeType>(source._measurementPrinciple as Partial<fhir.FhirCode>); }
    }
    if (source['productionSpecification']) { this.productionSpecification = source.productionSpecification.map((x) => new fhir.DeviceComponentProductionSpecification(x)); }
    else { this.productionSpecification = []; }
    if (source['languageCode']) { this.languageCode = new fhir.CodeableConcept(source.languageCode); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'DeviceComponent' }
    this.vRS('resourceType',exp)
    this.vRS('type',exp)
    this.vRS('identifier',exp)
    this.vRS('lastSystemChange',exp)
    this.vOS('source',exp)
    this.vOS('parent',exp)
    this.vOA('operationalStatus',exp)
    this.vOS('parameterGroup',exp)
    this.vOSV('measurementPrinciple',exp,'MeasurementPrinciple',MeasurementPrincipleVsValidation,'r')
    this.vOA('productionSpecification',exp)
    this.vOS('languageCode',exp)
    return issues;
  }
}
