// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: List

import * as fhir from '../fhir.js';

// @ts-ignore
import { ListStatusCodes,  ListStatusCodeType } from '../fhirValueSets/ListStatusCodes.js';
// @ts-ignore
import { ListStatusVsValidation } from '../fhirValueSets/ListStatusVsValidation.js';
// @ts-ignore
import { ListModeCodes,  ListModeCodeType } from '../fhirValueSets/ListModeCodes.js';
// @ts-ignore
import { ListModeVsValidation } from '../fhirValueSets/ListModeVsValidation.js';
/**
 * Valid arguments for the ListEntry type.
 */
export interface ListEntryArgs extends fhir.BackboneElementArgs {
  /**
   * This field is present to support various clinical uses of lists, such as a discharge summary medication list, where flags specify whether the medication was added, modified, or deleted from the list.
   */
  flag?: fhir.CodeableConceptArgs|undefined;
  /**
   * The flag element may contain codes that an application processing the list does not understand. However there can be no ambiguity if a list item is actually marked as "deleted".
   */
  deleted?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: List.entry.deleted
   */
  _deleted?:fhir.FhirElementArgs;
  /**
   * The date may be significant for understanding the meaning of items in a working list.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: List.entry.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * A reference to the actual resource from which data was derived.
   */
  item: fhir.ReferenceArgs|null;
}

/**
 * Entries in this list.
 */
export class ListEntry extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ListEntry';
  /**
   * This field is present to support various clinical uses of lists, such as a discharge summary medication list, where flags specify whether the medication was added, modified, or deleted from the list.
   */
  public flag?: fhir.CodeableConcept|undefined;
  /**
   * The flag element may contain codes that an application processing the list does not understand. However there can be no ambiguity if a list item is actually marked as "deleted".
   */
  public deleted?: fhir.FhirBoolean|undefined;
  /**
   * The date may be significant for understanding the meaning of items in a working list.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * A reference to the actual resource from which data was derived.
   */
  public item: fhir.Reference|null;
  /**
   * Default constructor for ListEntry - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ListEntryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['flag']) { this.flag = new fhir.CodeableConcept(source.flag); }
    if (source['deleted']) { this.deleted = new fhir.FhirBoolean({value: source.deleted}); }
    if (source['_deleted']) {
      if (this.deleted) { this.deleted.addExtendedProperties(source._deleted!); }
      else { this.deleted = new fhir.FhirBoolean(source._deleted as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['item']) { this.item = new fhir.Reference(source.item); }
    else { this.item = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'List.entry' }
    iss.push(...this.vOS('flag',exp));
    iss.push(...this.vOS('deleted',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vRS('item',exp));
    return iss;
  }
}
/**
 * Valid arguments for the List type.
 */
export interface ListArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "List"|undefined;
  /**
   * Identifier for the List assigned for business purposes outside the context of FHIR.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Allows customization beyond just the code identifying the kind of list.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: List.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * Lists often contain subsets of resources rather than an exhaustive list.  The code identifies what type of subset is included.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The primary purpose of listing the subject explicitly is to help with finding the right list.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * Allows follow-up as well as context.
   */
  source?: fhir.ReferenceArgs|undefined;
  /**
   * The encounter that is the context in which this list was created.
   */
  encounter?: fhir.ReferenceArgs|undefined;
  /**
   * Indicates the current state of this list.
   */
  status: fhir.FhirCode<ListStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: List.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Identifies how current the list is which affects relevance.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: List.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
   */
  orderedBy?: fhir.CodeableConceptArgs|undefined;
  /**
   * Lists are used in various ways, and it must be known in what way it is safe to use them.
   */
  mode: fhir.FhirCode<ListModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: List.mode
   */
  _mode?:fhir.FhirElementArgs;
  /**
   * Comments that apply to the overall list.
   */
  note?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: List.note
   */
  _note?:fhir.FhirElementArgs;
  /**
   * Entries in this list.
   */
  entry?: fhir.ListEntryArgs[]|undefined;
  /**
   * Allows capturing things like "none exist" or "not asked" which can be important for most lists.
   */
  emptyReason?: fhir.CodeableConceptArgs|undefined;
}

/**
 * A set of information summarized from a list of other resources.
 */
export class List extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'List';
  /**
   * Resource Type Name
   */
  public override resourceType: "List";
  /**
   * Identifier for the List assigned for business purposes outside the context of FHIR.
   */
  public identifier: fhir.Identifier[];
  /**
   * Allows customization beyond just the code identifying the kind of list.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Lists often contain subsets of resources rather than an exhaustive list.  The code identifies what type of subset is included.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The primary purpose of listing the subject explicitly is to help with finding the right list.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Allows follow-up as well as context.
   */
  public source?: fhir.Reference|undefined;
  /**
   * The encounter that is the context in which this list was created.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * Indicates the current state of this list.
   */
  public status: fhir.FhirCode<ListStatusCodeType>|null;
  /**
   * Identifies how current the list is which affects relevance.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
   */
  public orderedBy?: fhir.CodeableConcept|undefined;
  /**
   * Lists are used in various ways, and it must be known in what way it is safe to use them.
   */
  public mode: fhir.FhirCode<ListModeCodeType>|null;
  /**
   * Comments that apply to the overall list.
   */
  public note?: fhir.FhirString|undefined;
  /**
   * Entries in this list.
   */
  public entry: fhir.ListEntry[];
  /**
   * Allows capturing things like "none exist" or "not asked" which can be important for most lists.
   */
  public emptyReason?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for List - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ListArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'List';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    if (source['source']) { this.source = new fhir.Reference(source.source); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter); }
    if (source['status']) { this.status = new fhir.FhirCode<ListStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<ListStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['orderedBy']) { this.orderedBy = new fhir.CodeableConcept(source.orderedBy); }
    if (source['mode']) { this.mode = new fhir.FhirCode<ListModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['_mode']) {
      if (this.mode) { this.mode.addExtendedProperties(source._mode!); }
      else { this.mode = new fhir.FhirCode<ListModeCodeType>(source._mode as Partial<fhir.FhirCode>); }
    }
    if (source['note']) { this.note = new fhir.FhirString({value: source.note}); }
    if (source['_note']) {
      if (this.note) { this.note.addExtendedProperties(source._note!); }
      else { this.note = new fhir.FhirString(source._note as Partial<fhir.FhirStringArgs>); }
    }
    if (source['entry']) { this.entry = source.entry.map((x) => new fhir.ListEntry(x)); }
    else { this.entry = []; }
    if (source['emptyReason']) { this.emptyReason = new fhir.CodeableConcept(source.emptyReason); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'List' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('title',exp));
    iss.push(...this.vOS('code',exp));
    iss.push(...this.vOS('subject',exp));
    iss.push(...this.vOS('source',exp));
    iss.push(...this.vOS('encounter',exp));
    iss.push(...this.vRSV('status',exp,'ListStatus',ListStatusVsValidation,'r'));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('orderedBy',exp));
    iss.push(...this.vRSV('mode',exp,'ListMode',ListModeVsValidation,'r'));
    iss.push(...this.vOS('note',exp));
    iss.push(...this.vOA('entry',exp));
    iss.push(...this.vOS('emptyReason',exp));
    return iss;
  }
}
