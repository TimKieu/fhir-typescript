// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Conformance

import * as fhir from '../fhir.js';

// @ts-ignore
import { TypeRestfulInteractionCodes,  TypeRestfulInteractionCodeType } from '../fhirValueSets/TypeRestfulInteractionCodes.js';
// @ts-ignore
import { TypeRestfulInteractionVsValidation } from '../fhirValueSets/TypeRestfulInteractionVsValidation.js';
// @ts-ignore
import { SearchParamTypeCodes,  SearchParamTypeCodeType } from '../fhirValueSets/SearchParamTypeCodes.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesCodes,  ResourceTypesCodeType } from '../fhirValueSets/ResourceTypesCodes.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { SearchModifierCodes,  SearchModifierCodeType } from '../fhirValueSets/SearchModifierCodes.js';
// @ts-ignore
import { SearchModifierVsValidation } from '../fhirValueSets/SearchModifierVsValidation.js';
// @ts-ignore
import { VersioningPolicyCodes,  VersioningPolicyCodeType } from '../fhirValueSets/VersioningPolicyCodes.js';
// @ts-ignore
import { VersioningPolicyVsValidation } from '../fhirValueSets/VersioningPolicyVsValidation.js';
// @ts-ignore
import { ConditionalDeleteStatusCodes,  ConditionalDeleteStatusCodeType } from '../fhirValueSets/ConditionalDeleteStatusCodes.js';
// @ts-ignore
import { ConditionalDeleteStatusVsValidation } from '../fhirValueSets/ConditionalDeleteStatusVsValidation.js';
// @ts-ignore
import { SystemRestfulInteractionCodes,  SystemRestfulInteractionCodeType } from '../fhirValueSets/SystemRestfulInteractionCodes.js';
// @ts-ignore
import { SystemRestfulInteractionVsValidation } from '../fhirValueSets/SystemRestfulInteractionVsValidation.js';
// @ts-ignore
import { RestfulConformanceModeCodes,  RestfulConformanceModeCodeType } from '../fhirValueSets/RestfulConformanceModeCodes.js';
// @ts-ignore
import { RestfulConformanceModeVsValidation } from '../fhirValueSets/RestfulConformanceModeVsValidation.js';
// @ts-ignore
import { TransactionModeCodes,  TransactionModeCodeType } from '../fhirValueSets/TransactionModeCodes.js';
// @ts-ignore
import { TransactionModeVsValidation } from '../fhirValueSets/TransactionModeVsValidation.js';
// @ts-ignore
import { MessageEventsCodes,  MessageEventsCodeType } from '../fhirValueSets/MessageEventsCodes.js';
// @ts-ignore
import { MessageEventsVsValidation } from '../fhirValueSets/MessageEventsVsValidation.js';
// @ts-ignore
import { MessageSignificanceCategoryCodes,  MessageSignificanceCategoryCodeType } from '../fhirValueSets/MessageSignificanceCategoryCodes.js';
// @ts-ignore
import { MessageSignificanceCategoryVsValidation } from '../fhirValueSets/MessageSignificanceCategoryVsValidation.js';
// @ts-ignore
import { MessageConformanceEventModeCodes,  MessageConformanceEventModeCodeType } from '../fhirValueSets/MessageConformanceEventModeCodes.js';
// @ts-ignore
import { MessageConformanceEventModeVsValidation } from '../fhirValueSets/MessageConformanceEventModeVsValidation.js';
// @ts-ignore
import { DocumentModeCodes,  DocumentModeCodeType } from '../fhirValueSets/DocumentModeCodes.js';
// @ts-ignore
import { DocumentModeVsValidation } from '../fhirValueSets/DocumentModeVsValidation.js';
// @ts-ignore
import { ConformanceResourceStatusCodes,  ConformanceResourceStatusCodeType } from '../fhirValueSets/ConformanceResourceStatusCodes.js';
// @ts-ignore
import { ConformanceResourceStatusVsValidation } from '../fhirValueSets/ConformanceResourceStatusVsValidation.js';
// @ts-ignore
import { ConformanceStatementKindCodes,  ConformanceStatementKindCodeType } from '../fhirValueSets/ConformanceStatementKindCodes.js';
// @ts-ignore
import { ConformanceStatementKindVsValidation } from '../fhirValueSets/ConformanceStatementKindVsValidation.js';
// @ts-ignore
import { UnknownContentCodes,  UnknownContentCodeType } from '../fhirValueSets/UnknownContentCodes.js';
// @ts-ignore
import { UnknownContentVsValidation } from '../fhirValueSets/UnknownContentVsValidation.js';
/**
 * Valid arguments for the ConformanceContact type.
 */
export interface ConformanceContactArgs extends fhir.BackboneElementArgs {
  /**
   * The name of an individual to contact regarding the conformance.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.contact.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: fhir.ContactPointArgs[]|undefined;
}

/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export class ConformanceContact extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceContact';
  /**
   * The name of an individual to contact regarding the conformance.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  public telecom: fhir.ContactPoint[];
  /**
   * Default constructor for ConformanceContact - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceContactArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x)); }
    else { this.telecom = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.contact' }
    this.vOS('name',exp)
    this.vOA('telecom',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceSoftware type.
 */
export interface ConformanceSoftwareArgs extends fhir.BackboneElementArgs {
  /**
   * Name software is known by.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.software.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * The version identifier for the software covered by this statement.
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.software.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * Date this version of the software released.
   */
  releaseDate?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.software.releaseDate
   */
  _releaseDate?:fhir.FhirElementArgs;
}

/**
 * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
 */
export class ConformanceSoftware extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceSoftware';
  /**
   * Name software is known by.
   */
  public name: fhir.FhirString|null;
  /**
   * The version identifier for the software covered by this statement.
   */
  public version?: fhir.FhirString|undefined;
  /**
   * Date this version of the software released.
   */
  public releaseDate?: fhir.FhirDateTime|undefined;
  /**
   * Default constructor for ConformanceSoftware - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceSoftwareArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['releaseDate']) { this.releaseDate = new fhir.FhirDateTime({value: source.releaseDate}); }
    if (source['_releaseDate']) {
      if (this.releaseDate) { this.releaseDate.addExtendedProperties(source._releaseDate!); }
      else { this.releaseDate = new fhir.FhirDateTime(source._releaseDate as Partial<fhir.FhirDateTimeArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.software' }
    this.vRS('name',exp)
    this.vOS('version',exp)
    this.vOS('releaseDate',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceImplementation type.
 */
export interface ConformanceImplementationArgs extends fhir.BackboneElementArgs {
  /**
   * Information about the specific installation that this conformance statement relates to.
   */
  description: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.implementation.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.implementation.url
   */
  _url?:fhir.FhirElementArgs;
}

/**
 * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class ConformanceImplementation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceImplementation';
  /**
   * Information about the specific installation that this conformance statement relates to.
   */
  public description: fhir.FhirString|null;
  /**
   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Default constructor for ConformanceImplementation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceImplementationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    else { this.description = null; }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.implementation' }
    this.vRS('description',exp)
    this.vOS('url',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestSecurityCertificate type.
 */
export interface ConformanceRestSecurityCertificateArgs extends fhir.BackboneElementArgs {
  /**
   * Mime type for certificate.
   */
  type?: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.security.certificate.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * Actual certificate.
   */
  blob?: fhir.FhirBase64Binary|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.security.certificate.blob
   */
  _blob?:fhir.FhirElementArgs;
}

/**
 * Certificates associated with security profiles.
 */
export class ConformanceRestSecurityCertificate extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestSecurityCertificate';
  /**
   * Mime type for certificate.
   */
  public type?: fhir.FhirCode|undefined;
  /**
   * Actual certificate.
   */
  public blob?: fhir.FhirBase64Binary|undefined;
  /**
   * Default constructor for ConformanceRestSecurityCertificate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestSecurityCertificateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode(source._type as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['blob']) { this.blob = new fhir.FhirBase64Binary({value: source.blob}); }
    if (source['_blob']) {
      if (this.blob) { this.blob.addExtendedProperties(source._blob!); }
      else { this.blob = new fhir.FhirBase64Binary(source._blob as Partial<fhir.FhirBase64BinaryArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.security.certificate' }
    this.vOS('type',exp)
    this.vOS('blob',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestSecurity type.
 */
export interface ConformanceRestSecurityArgs extends fhir.BackboneElementArgs {
  /**
   * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
   */
  cors?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.security.cors
   */
  _cors?:fhir.FhirElementArgs;
  /**
   * Types of security services are supported/required by the system.
   */
  service?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * General description of how security works.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.security.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Certificates associated with security profiles.
   */
  certificate?: fhir.ConformanceRestSecurityCertificateArgs[]|undefined;
}

/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class ConformanceRestSecurity extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestSecurity';
  /**
   * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
   */
  public cors?: fhir.FhirBoolean|undefined;
  /**
   * Types of security services are supported/required by the system.
   */
  public service: fhir.CodeableConcept[];
  /**
   * General description of how security works.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Certificates associated with security profiles.
   */
  public certificate: fhir.ConformanceRestSecurityCertificate[];
  /**
   * Default constructor for ConformanceRestSecurity - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestSecurityArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['cors']) { this.cors = new fhir.FhirBoolean({value: source.cors}); }
    if (source['_cors']) {
      if (this.cors) { this.cors.addExtendedProperties(source._cors!); }
      else { this.cors = new fhir.FhirBoolean(source._cors as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['service']) { this.service = source.service.map((x) => new fhir.CodeableConcept(x)); }
    else { this.service = []; }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['certificate']) { this.certificate = source.certificate.map((x) => new fhir.ConformanceRestSecurityCertificate(x)); }
    else { this.certificate = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.security' }
    this.vOS('cors',exp)
    this.vOA('service',exp)
    this.vOS('description',exp)
    this.vOA('certificate',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestResourceInteraction type.
 */
export interface ConformanceRestResourceInteractionArgs extends fhir.BackboneElementArgs {
  /**
   * Coded identifier of the operation, supported by the system resource.
   */
  code: fhir.FhirCode<TypeRestfulInteractionCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.interaction.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.interaction.documentation
   */
  _documentation?:fhir.FhirElementArgs;
}

/**
 * Identifies a restful operation supported by the solution.
 */
export class ConformanceRestResourceInteraction extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestResourceInteraction';
  /**
   * Coded identifier of the operation, supported by the system resource.
   */
  public code: fhir.FhirCode<TypeRestfulInteractionCodeType>|null;
  /**
   * REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for ConformanceRestResourceInteraction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestResourceInteractionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode<TypeRestfulInteractionCodeType>({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode<TypeRestfulInteractionCodeType>(source._code as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.resource.interaction' }
    this.vRSV('code',exp,'TypeRestfulInteraction',TypeRestfulInteractionVsValidation,'r')
    this.vOS('documentation',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestResourceSearchParam type.
 */
export interface ConformanceRestResourceSearchParamArgs extends fhir.BackboneElementArgs {
  /**
   * The name of the search parameter used in the interface.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
   */
  definition?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.definition
   */
  _definition?:fhir.FhirElementArgs;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  type: fhir.FhirCode<SearchParamTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.documentation
   */
  _documentation?:fhir.FhirElementArgs;
  /**
   * Types of resource (if a resource is referenced).
   */
  target?: fhir.FhirCode[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.target
   */
  _target?:(fhir.FhirElementArgs|null)[];
  /**
   * A modifier supported for the search parameter.
   */
  modifier?: fhir.FhirCode<SearchModifierCodeType>[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.modifier
   */
  _modifier?:(fhir.FhirElementArgs|null)[];
  /**
   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.
   */
  chain?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchParam.chain
   */
  _chain?:(fhir.FhirElementArgs|null)[];
}

/**
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 */
export class ConformanceRestResourceSearchParam extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestResourceSearchParam';
  /**
   * The name of the search parameter used in the interface.
   */
  public name: fhir.FhirString|null;
  /**
   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
   */
  public definition?: fhir.FhirUri|undefined;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  public type: fhir.FhirCode<SearchParamTypeCodeType>|null;
  /**
   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Types of resource (if a resource is referenced).
   */
  public target: fhir.FhirCode[];
  /**
   * A modifier supported for the search parameter.
   */
  public modifier: fhir.FhirCode<SearchModifierCodeType>[];
  /**
   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.
   */
  public chain: fhir.FhirString[];
  /**
   * Default constructor for ConformanceRestResourceSearchParam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestResourceSearchParamArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['definition']) { this.definition = new fhir.FhirUri({value: source.definition}); }
    if (source['_definition']) {
      if (this.definition) { this.definition.addExtendedProperties(source._definition!); }
      else { this.definition = new fhir.FhirUri(source._definition as Partial<fhir.FhirUriArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirCode<SearchParamTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<SearchParamTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['target']) { this.target = source.target.map((x) => new fhir.FhirCode({value: x})); }
    else { this.target = []; }
    if (source['_target']) {
      source._target.forEach((x,i) => {
        if (this.target.length >= i) { if (x) { this.target[i].addExtendedProperties(x); } }
        else { if (x) { this.target.push(new fhir.FhirCode(x as Partial<fhir.FhirCodeArgs>)); } }
      });
    }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.FhirCode<SearchModifierCodeType>({value: x})); }
    else { this.modifier = []; }
    if (source['_modifier']) {
      source._modifier.forEach((x,i) => {
        if (this.modifier.length >= i) { if (x) { this.modifier[i].addExtendedProperties(x); } }
        else { if (x) { this.modifier.push(new fhir.FhirCode<SearchModifierCodeType>(x as Partial<fhir.FhirCode>)); } }
      });
    }
    if (source['chain']) { this.chain = source.chain.map((x) => new fhir.FhirString({value: x})); }
    else { this.chain = []; }
    if (source['_chain']) {
      source._chain.forEach((x,i) => {
        if (this.chain.length >= i) { if (x) { this.chain[i].addExtendedProperties(x); } }
        else { if (x) { this.chain.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.resource.searchParam' }
    this.vRS('name',exp)
    this.vOS('definition',exp)
    this.vRSV('type',exp,'SearchParamType',SearchParamTypeVsValidation,'r')
    this.vOS('documentation',exp)
    this.vOAV('target',exp,'ResourceTypes',ResourceTypesVsValidation,'r')
    this.vOAV('modifier',exp,'SearchModifier',SearchModifierVsValidation,'r')
    this.vOA('chain',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestResource type.
 */
export interface ConformanceRestResourceArgs extends fhir.BackboneElementArgs {
  /**
   * A type of resource exposed via the restful interface.
   */
  type: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  profile?: fhir.ReferenceArgs|undefined;
  /**
   * Identifies a restful operation supported by the solution.
   */
  interaction: fhir.ConformanceRestResourceInteractionArgs[]|null;
  /**
   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
   */
  versioning?: fhir.FhirCode<VersioningPolicyCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.versioning
   */
  _versioning?:fhir.FhirElementArgs;
  /**
   * A flag for whether the server is able to return past versions as part of the vRead operation.
   */
  readHistory?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.readHistory
   */
  _readHistory?:fhir.FhirElementArgs;
  /**
   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
   */
  updateCreate?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.updateCreate
   */
  _updateCreate?:fhir.FhirElementArgs;
  /**
   * A flag that indicates that the server supports conditional create.
   */
  conditionalCreate?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.conditionalCreate
   */
  _conditionalCreate?:fhir.FhirElementArgs;
  /**
   * A flag that indicates that the server supports conditional update.
   */
  conditionalUpdate?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.conditionalUpdate
   */
  _conditionalUpdate?:fhir.FhirElementArgs;
  /**
   * A code that indicates how the server supports conditional delete.
   */
  conditionalDelete?: fhir.FhirCode<ConditionalDeleteStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.conditionalDelete
   */
  _conditionalDelete?:fhir.FhirElementArgs;
  /**
   * A list of _include values supported by the server.
   */
  searchInclude?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchInclude
   */
  _searchInclude?:(fhir.FhirElementArgs|null)[];
  /**
   * A list of _revinclude (reverse include) values supported by the server.
   */
  searchRevInclude?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.resource.searchRevInclude
   */
  _searchRevInclude?:(fhir.FhirElementArgs|null)[];
  /**
   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  searchParam?: fhir.ConformanceRestResourceSearchParamArgs[]|undefined;
}

/**
 * A specification of the restful capabilities of the solution for a specific resource type.
 */
export class ConformanceRestResource extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestResource';
  /**
   * A type of resource exposed via the restful interface.
   */
  public type: fhir.FhirCode|null;
  /**
   * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  public profile?: fhir.Reference|undefined;
  /**
   * Identifies a restful operation supported by the solution.
   */
  public interaction: fhir.ConformanceRestResourceInteraction[];
  /**
   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
   */
  public versioning?: fhir.FhirCode<VersioningPolicyCodeType>|undefined;
  /**
   * A flag for whether the server is able to return past versions as part of the vRead operation.
   */
  public readHistory?: fhir.FhirBoolean|undefined;
  /**
   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
   */
  public updateCreate?: fhir.FhirBoolean|undefined;
  /**
   * A flag that indicates that the server supports conditional create.
   */
  public conditionalCreate?: fhir.FhirBoolean|undefined;
  /**
   * A flag that indicates that the server supports conditional update.
   */
  public conditionalUpdate?: fhir.FhirBoolean|undefined;
  /**
   * A code that indicates how the server supports conditional delete.
   */
  public conditionalDelete?: fhir.FhirCode<ConditionalDeleteStatusCodeType>|undefined;
  /**
   * A list of _include values supported by the server.
   */
  public searchInclude: fhir.FhirString[];
  /**
   * A list of _revinclude (reverse include) values supported by the server.
   */
  public searchRevInclude: fhir.FhirString[];
  /**
   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  public searchParam: fhir.ConformanceRestResourceSearchParam[];
  /**
   * Default constructor for ConformanceRestResource - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestResourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode(source._type as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['profile']) { this.profile = new fhir.Reference(source.profile); }
    if (source['interaction']) { this.interaction = source.interaction.map((x) => new fhir.ConformanceRestResourceInteraction(x)); }
    else { this.interaction = []; }
    if (source['versioning']) { this.versioning = new fhir.FhirCode<VersioningPolicyCodeType>({value: source.versioning}); }
    if (source['_versioning']) {
      if (this.versioning) { this.versioning.addExtendedProperties(source._versioning!); }
      else { this.versioning = new fhir.FhirCode<VersioningPolicyCodeType>(source._versioning as Partial<fhir.FhirCode>); }
    }
    if (source['readHistory']) { this.readHistory = new fhir.FhirBoolean({value: source.readHistory}); }
    if (source['_readHistory']) {
      if (this.readHistory) { this.readHistory.addExtendedProperties(source._readHistory!); }
      else { this.readHistory = new fhir.FhirBoolean(source._readHistory as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['updateCreate']) { this.updateCreate = new fhir.FhirBoolean({value: source.updateCreate}); }
    if (source['_updateCreate']) {
      if (this.updateCreate) { this.updateCreate.addExtendedProperties(source._updateCreate!); }
      else { this.updateCreate = new fhir.FhirBoolean(source._updateCreate as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['conditionalCreate']) { this.conditionalCreate = new fhir.FhirBoolean({value: source.conditionalCreate}); }
    if (source['_conditionalCreate']) {
      if (this.conditionalCreate) { this.conditionalCreate.addExtendedProperties(source._conditionalCreate!); }
      else { this.conditionalCreate = new fhir.FhirBoolean(source._conditionalCreate as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['conditionalUpdate']) { this.conditionalUpdate = new fhir.FhirBoolean({value: source.conditionalUpdate}); }
    if (source['_conditionalUpdate']) {
      if (this.conditionalUpdate) { this.conditionalUpdate.addExtendedProperties(source._conditionalUpdate!); }
      else { this.conditionalUpdate = new fhir.FhirBoolean(source._conditionalUpdate as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['conditionalDelete']) { this.conditionalDelete = new fhir.FhirCode<ConditionalDeleteStatusCodeType>({value: source.conditionalDelete}); }
    if (source['_conditionalDelete']) {
      if (this.conditionalDelete) { this.conditionalDelete.addExtendedProperties(source._conditionalDelete!); }
      else { this.conditionalDelete = new fhir.FhirCode<ConditionalDeleteStatusCodeType>(source._conditionalDelete as Partial<fhir.FhirCode>); }
    }
    if (source['searchInclude']) { this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({value: x})); }
    else { this.searchInclude = []; }
    if (source['_searchInclude']) {
      source._searchInclude.forEach((x,i) => {
        if (this.searchInclude.length >= i) { if (x) { this.searchInclude[i].addExtendedProperties(x); } }
        else { if (x) { this.searchInclude.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['searchRevInclude']) { this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({value: x})); }
    else { this.searchRevInclude = []; }
    if (source['_searchRevInclude']) {
      source._searchRevInclude.forEach((x,i) => {
        if (this.searchRevInclude.length >= i) { if (x) { this.searchRevInclude[i].addExtendedProperties(x); } }
        else { if (x) { this.searchRevInclude.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['searchParam']) { this.searchParam = source.searchParam.map((x) => new fhir.ConformanceRestResourceSearchParam(x)); }
    else { this.searchParam = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.resource' }
    this.vRSV('type',exp,'ResourceTypes',ResourceTypesVsValidation,'r')
    this.vOS('profile',exp)
    this.vRA('interaction',exp)
    this.vOSV('versioning',exp,'VersioningPolicy',VersioningPolicyVsValidation,'r')
    this.vOS('readHistory',exp)
    this.vOS('updateCreate',exp)
    this.vOS('conditionalCreate',exp)
    this.vOS('conditionalUpdate',exp)
    this.vOSV('conditionalDelete',exp,'ConditionalDeleteStatus',ConditionalDeleteStatusVsValidation,'r')
    this.vOA('searchInclude',exp)
    this.vOA('searchRevInclude',exp)
    this.vOA('searchParam',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestInteraction type.
 */
export interface ConformanceRestInteractionArgs extends fhir.BackboneElementArgs {
  /**
   * A coded identifier of the operation, supported by the system.
   */
  code: fhir.FhirCode<SystemRestfulInteractionCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.interaction.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.interaction.documentation
   */
  _documentation?:fhir.FhirElementArgs;
}

/**
 * A specification of restful operations supported by the system.
 */
export class ConformanceRestInteraction extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestInteraction';
  /**
   * A coded identifier of the operation, supported by the system.
   */
  public code: fhir.FhirCode<SystemRestfulInteractionCodeType>|null;
  /**
   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for ConformanceRestInteraction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestInteractionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.FhirCode<SystemRestfulInteractionCodeType>({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode<SystemRestfulInteractionCodeType>(source._code as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.interaction' }
    this.vRSV('code',exp,'SystemRestfulInteraction',SystemRestfulInteractionVsValidation,'r')
    this.vOS('documentation',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRestOperation type.
 */
export interface ConformanceRestOperationArgs extends fhir.BackboneElementArgs {
  /**
   * The name of a query, which is used in the _query parameter when the query is called.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.operation.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Where the formal definition can be found.
   */
  definition: fhir.ReferenceArgs|null;
}

/**
 * Definition of an operation or a named query and with its parameters and their meaning and type.
 */
export class ConformanceRestOperation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRestOperation';
  /**
   * The name of a query, which is used in the _query parameter when the query is called.
   */
  public name: fhir.FhirString|null;
  /**
   * Where the formal definition can be found.
   */
  public definition: fhir.Reference|null;
  /**
   * Default constructor for ConformanceRestOperation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestOperationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['definition']) { this.definition = new fhir.Reference(source.definition); }
    else { this.definition = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest.operation' }
    this.vRS('name',exp)
    this.vRS('definition',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceRest type.
 */
export interface ConformanceRestArgs extends fhir.BackboneElementArgs {
  /**
   * Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
   */
  mode: fhir.FhirCode<RestfulConformanceModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.mode
   */
  _mode?:fhir.FhirElementArgs;
  /**
   * Information about the system's restful capabilities that apply across all applications, such as security.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.documentation
   */
  _documentation?:fhir.FhirElementArgs;
  /**
   * Information about security implementation from an interface perspective - what a client needs to know.
   */
  security?: fhir.ConformanceRestSecurityArgs|undefined;
  /**
   * A specification of the restful capabilities of the solution for a specific resource type.
   */
  resource: fhir.ConformanceRestResourceArgs[]|null;
  /**
   * A specification of restful operations supported by the system.
   */
  interaction?: fhir.ConformanceRestInteractionArgs[]|undefined;
  /**
   * A code that indicates how transactions are supported.
   */
  transactionMode?: fhir.FhirCode<TransactionModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.transactionMode
   */
  _transactionMode?:fhir.FhirElementArgs;
  /**
   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  searchParam?: fhir.ConformanceRestResourceSearchParamArgs[]|undefined;
  /**
   * Definition of an operation or a named query and with its parameters and their meaning and type.
   */
  operation?: fhir.ConformanceRestOperationArgs[]|undefined;
  /**
   * An absolute URI which is a reference to the definition of a compartment hosted by the system.
   */
  compartment?: fhir.FhirUri[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.rest.compartment
   */
  _compartment?:(fhir.FhirElementArgs|null)[];
}

/**
 * A definition of the restful capabilities of the solution, if any.
 */
export class ConformanceRest extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceRest';
  /**
   * Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
   */
  public mode: fhir.FhirCode<RestfulConformanceModeCodeType>|null;
  /**
   * Information about the system's restful capabilities that apply across all applications, such as security.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Information about security implementation from an interface perspective - what a client needs to know.
   */
  public security?: fhir.ConformanceRestSecurity|undefined;
  /**
   * A specification of the restful capabilities of the solution for a specific resource type.
   */
  public resource: fhir.ConformanceRestResource[];
  /**
   * A specification of restful operations supported by the system.
   */
  public interaction: fhir.ConformanceRestInteraction[];
  /**
   * A code that indicates how transactions are supported.
   */
  public transactionMode?: fhir.FhirCode<TransactionModeCodeType>|undefined;
  /**
   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  public searchParam: fhir.ConformanceRestResourceSearchParam[];
  /**
   * Definition of an operation or a named query and with its parameters and their meaning and type.
   */
  public operation: fhir.ConformanceRestOperation[];
  /**
   * An absolute URI which is a reference to the definition of a compartment hosted by the system.
   */
  public compartment: fhir.FhirUri[];
  /**
   * Default constructor for ConformanceRest - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceRestArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['mode']) { this.mode = new fhir.FhirCode<RestfulConformanceModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['_mode']) {
      if (this.mode) { this.mode.addExtendedProperties(source._mode!); }
      else { this.mode = new fhir.FhirCode<RestfulConformanceModeCodeType>(source._mode as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['security']) { this.security = new fhir.ConformanceRestSecurity(source.security); }
    if (source['resource']) { this.resource = source.resource.map((x) => new fhir.ConformanceRestResource(x)); }
    else { this.resource = []; }
    if (source['interaction']) { this.interaction = source.interaction.map((x) => new fhir.ConformanceRestInteraction(x)); }
    else { this.interaction = []; }
    if (source['transactionMode']) { this.transactionMode = new fhir.FhirCode<TransactionModeCodeType>({value: source.transactionMode}); }
    if (source['_transactionMode']) {
      if (this.transactionMode) { this.transactionMode.addExtendedProperties(source._transactionMode!); }
      else { this.transactionMode = new fhir.FhirCode<TransactionModeCodeType>(source._transactionMode as Partial<fhir.FhirCode>); }
    }
    if (source['searchParam']) { this.searchParam = source.searchParam.map((x) => new fhir.ConformanceRestResourceSearchParam(x)); }
    else { this.searchParam = []; }
    if (source['operation']) { this.operation = source.operation.map((x) => new fhir.ConformanceRestOperation(x)); }
    else { this.operation = []; }
    if (source['compartment']) { this.compartment = source.compartment.map((x) => new fhir.FhirUri({value: x})); }
    else { this.compartment = []; }
    if (source['_compartment']) {
      source._compartment.forEach((x,i) => {
        if (this.compartment.length >= i) { if (x) { this.compartment[i].addExtendedProperties(x); } }
        else { if (x) { this.compartment.push(new fhir.FhirUri(x as Partial<fhir.FhirUriArgs>)); } }
      });
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.rest' }
    this.vRSV('mode',exp,'RestfulConformanceMode',RestfulConformanceModeVsValidation,'r')
    this.vOS('documentation',exp)
    this.vOS('security',exp)
    this.vRA('resource',exp)
    this.vOA('interaction',exp)
    this.vOSV('transactionMode',exp,'TransactionMode',TransactionModeVsValidation,'r')
    this.vOA('searchParam',exp)
    this.vOA('operation',exp)
    this.vOA('compartment',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceMessagingEndpoint type.
 */
export interface ConformanceMessagingEndpointArgs extends fhir.BackboneElementArgs {
  /**
   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
   */
  protocol: fhir.CodingArgs|null;
  /**
   * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
   */
  address: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.endpoint.address
   */
  _address?:fhir.FhirElementArgs;
}

/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class ConformanceMessagingEndpoint extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceMessagingEndpoint';
  /**
   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
   */
  public protocol: fhir.Coding|null;
  /**
   * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
   */
  public address: fhir.FhirUri|null;
  /**
   * Default constructor for ConformanceMessagingEndpoint - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceMessagingEndpointArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['protocol']) { this.protocol = new fhir.Coding(source.protocol); }
    else { this.protocol = null; }
    if (source['address']) { this.address = new fhir.FhirUri({value: source.address}); }
    else { this.address = null; }
    if (source['_address']) {
      if (this.address) { this.address.addExtendedProperties(source._address!); }
      else { this.address = new fhir.FhirUri(source._address as Partial<fhir.FhirUriArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.messaging.endpoint' }
    this.vRS('protocol',exp)
    this.vRS('address',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceMessagingEvent type.
 */
export interface ConformanceMessagingEventArgs extends fhir.BackboneElementArgs {
  /**
   * A coded identifier of a supported messaging event.
   */
  code: fhir.CodingArgs|null;
  /**
   * The impact of the content of the message.
   */
  category?: fhir.FhirCode<MessageSignificanceCategoryCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.event.category
   */
  _category?:fhir.FhirElementArgs;
  /**
   * The mode of this event declaration - whether application is sender or receiver.
   */
  mode: fhir.FhirCode<MessageConformanceEventModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.event.mode
   */
  _mode?:fhir.FhirElementArgs;
  /**
   * A resource associated with the event.  This is the resource that defines the event.
   */
  focus: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.event.focus
   */
  _focus?:fhir.FhirElementArgs;
  /**
   * Information about the request for this event.
   */
  request: fhir.ReferenceArgs|null;
  /**
   * Information about the response for this event.
   */
  response: fhir.ReferenceArgs|null;
  /**
   * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.event.documentation
   */
  _documentation?:fhir.FhirElementArgs;
}

/**
 * A description of the solution's support for an event at this end-point.
 */
export class ConformanceMessagingEvent extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceMessagingEvent';
  /**
   * A coded identifier of a supported messaging event.
   */
  public code: fhir.Coding|null;
  /**
   * The impact of the content of the message.
   */
  public category?: fhir.FhirCode<MessageSignificanceCategoryCodeType>|undefined;
  /**
   * The mode of this event declaration - whether application is sender or receiver.
   */
  public mode: fhir.FhirCode<MessageConformanceEventModeCodeType>|null;
  /**
   * A resource associated with the event.  This is the resource that defines the event.
   */
  public focus: fhir.FhirCode|null;
  /**
   * Information about the request for this event.
   */
  public request: fhir.Reference|null;
  /**
   * Information about the response for this event.
   */
  public response: fhir.Reference|null;
  /**
   * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * Default constructor for ConformanceMessagingEvent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceMessagingEventArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.Coding(source.code); }
    else { this.code = null; }
    if (source['category']) { this.category = new fhir.FhirCode<MessageSignificanceCategoryCodeType>({value: source.category}); }
    if (source['_category']) {
      if (this.category) { this.category.addExtendedProperties(source._category!); }
      else { this.category = new fhir.FhirCode<MessageSignificanceCategoryCodeType>(source._category as Partial<fhir.FhirCode>); }
    }
    if (source['mode']) { this.mode = new fhir.FhirCode<MessageConformanceEventModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['_mode']) {
      if (this.mode) { this.mode.addExtendedProperties(source._mode!); }
      else { this.mode = new fhir.FhirCode<MessageConformanceEventModeCodeType>(source._mode as Partial<fhir.FhirCode>); }
    }
    if (source['focus']) { this.focus = new fhir.FhirCode({value: source.focus}); }
    else { this.focus = null; }
    if (source['_focus']) {
      if (this.focus) { this.focus.addExtendedProperties(source._focus!); }
      else { this.focus = new fhir.FhirCode(source._focus as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['request']) { this.request = new fhir.Reference(source.request); }
    else { this.request = null; }
    if (source['response']) { this.response = new fhir.Reference(source.response); }
    else { this.response = null; }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.messaging.event' }
    this.vRS('code',exp)
    this.vOSV('category',exp,'MessageSignificanceCategory',MessageSignificanceCategoryVsValidation,'r')
    this.vRSV('mode',exp,'MessageConformanceEventMode',MessageConformanceEventModeVsValidation,'r')
    this.vRSV('focus',exp,'ResourceTypes',ResourceTypesVsValidation,'r')
    this.vRS('request',exp)
    this.vRS('response',exp)
    this.vOS('documentation',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceMessaging type.
 */
export interface ConformanceMessagingArgs extends fhir.BackboneElementArgs {
  /**
   * An endpoint (network accessible address) to which messages and/or replies are to be sent.
   */
  endpoint?: fhir.ConformanceMessagingEndpointArgs[]|undefined;
  /**
   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
   */
  reliableCache?: fhir.FhirUnsignedInt|number|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.reliableCache
   */
  _reliableCache?:fhir.FhirElementArgs;
  /**
   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.messaging.documentation
   */
  _documentation?:fhir.FhirElementArgs;
  /**
   * A description of the solution's support for an event at this end-point.
   */
  event: fhir.ConformanceMessagingEventArgs[]|null;
}

/**
 * A description of the messaging capabilities of the solution.
 */
export class ConformanceMessaging extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceMessaging';
  /**
   * An endpoint (network accessible address) to which messages and/or replies are to be sent.
   */
  public endpoint: fhir.ConformanceMessagingEndpoint[];
  /**
   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
   */
  public reliableCache?: fhir.FhirUnsignedInt|undefined;
  /**
   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * A description of the solution's support for an event at this end-point.
   */
  public event: fhir.ConformanceMessagingEvent[];
  /**
   * Default constructor for ConformanceMessaging - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceMessagingArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['endpoint']) { this.endpoint = source.endpoint.map((x) => new fhir.ConformanceMessagingEndpoint(x)); }
    else { this.endpoint = []; }
    if (source['reliableCache']) { this.reliableCache = new fhir.FhirUnsignedInt({value: source.reliableCache}); }
    if (source['_reliableCache']) {
      if (this.reliableCache) { this.reliableCache.addExtendedProperties(source._reliableCache!); }
      else { this.reliableCache = new fhir.FhirUnsignedInt(source._reliableCache as Partial<fhir.FhirUnsignedIntArgs>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['event']) { this.event = source.event.map((x) => new fhir.ConformanceMessagingEvent(x)); }
    else { this.event = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.messaging' }
    this.vOA('endpoint',exp)
    this.vOS('reliableCache',exp)
    this.vOS('documentation',exp)
    this.vRA('event',exp)
    return issues;
  }
}
/**
 * Valid arguments for the ConformanceDocument type.
 */
export interface ConformanceDocumentArgs extends fhir.BackboneElementArgs {
  /**
   * Mode of this document declaration - whether application is producer or consumer.
   */
  mode: fhir.FhirCode<DocumentModeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.document.mode
   */
  _mode?:fhir.FhirElementArgs;
  /**
   * A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
   */
  documentation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.document.documentation
   */
  _documentation?:fhir.FhirElementArgs;
  /**
   * A constraint on a resource used in the document.
   */
  profile: fhir.ReferenceArgs|null;
}

/**
 * A document definition.
 */
export class ConformanceDocument extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ConformanceDocument';
  /**
   * Mode of this document declaration - whether application is producer or consumer.
   */
  public mode: fhir.FhirCode<DocumentModeCodeType>|null;
  /**
   * A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
   */
  public documentation?: fhir.FhirString|undefined;
  /**
   * A constraint on a resource used in the document.
   */
  public profile: fhir.Reference|null;
  /**
   * Default constructor for ConformanceDocument - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceDocumentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['mode']) { this.mode = new fhir.FhirCode<DocumentModeCodeType>({value: source.mode}); }
    else { this.mode = null; }
    if (source['_mode']) {
      if (this.mode) { this.mode.addExtendedProperties(source._mode!); }
      else { this.mode = new fhir.FhirCode<DocumentModeCodeType>(source._mode as Partial<fhir.FhirCode>); }
    }
    if (source['documentation']) { this.documentation = new fhir.FhirString({value: source.documentation}); }
    if (source['_documentation']) {
      if (this.documentation) { this.documentation.addExtendedProperties(source._documentation!); }
      else { this.documentation = new fhir.FhirString(source._documentation as Partial<fhir.FhirStringArgs>); }
    }
    if (source['profile']) { this.profile = new fhir.Reference(source.profile); }
    else { this.profile = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance.document' }
    this.vRSV('mode',exp,'DocumentMode',DocumentModeVsValidation,'r')
    this.vOS('documentation',exp)
    this.vRS('profile',exp)
    return issues;
  }
}
/**
 * Valid arguments for the Conformance type.
 */
export interface ConformanceArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Conformance"|undefined;
  /**
   * An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * A free text natural language name identifying the conformance statement.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * The status of this conformance statement.
   */
  status?: fhir.FhirCode<ConformanceResourceStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Conformance.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Helps establish the "authority/credibility" of the conformance.  May also allow for contact.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: fhir.ConformanceContactArgs[]|undefined;
  /**
   * The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
   */
  date: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Explains why this conformance statement is needed and why it's been constrained as it has.
   */
  requirements?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.requirements
   */
  _requirements?:fhir.FhirElementArgs;
  /**
   * A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
   */
  copyright?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.copyright
   */
  _copyright?:fhir.FhirElementArgs;
  /**
   * Allow searching the 3 modes.
   */
  kind: fhir.FhirCode<ConformanceStatementKindCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.kind
   */
  _kind?:fhir.FhirElementArgs;
  /**
   * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
   */
  software?: fhir.ConformanceSoftwareArgs|undefined;
  /**
   * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  implementation?: fhir.ConformanceImplementationArgs|undefined;
  /**
   * The version of the FHIR specification on which this conformance statement is based.
   */
  fhirVersion: fhir.FhirId|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.fhirVersion
   */
  _fhirVersion?:fhir.FhirElementArgs;
  /**
   * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
   */
  acceptUnknown: fhir.FhirCode<UnknownContentCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Conformance.acceptUnknown
   */
  _acceptUnknown?:fhir.FhirElementArgs;
  /**
   * A list of the formats supported by this implementation using their content types.
   */
  format: fhir.FhirCode[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: Conformance.format
   */
  _format?:(fhir.FhirElementArgs|null)[];
  /**
   * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  profile?: fhir.ReferenceArgs[]|undefined;
  /**
   * A definition of the restful capabilities of the solution, if any.
   */
  rest?: fhir.ConformanceRestArgs[]|undefined;
  /**
   * A description of the messaging capabilities of the solution.
   */
  messaging?: fhir.ConformanceMessagingArgs[]|undefined;
  /**
   * A document definition.
   */
  document?: fhir.ConformanceDocumentArgs[]|undefined;
}

/**
 * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class Conformance extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Conformance';
  /**
   * Resource Type Name
   */
  public override resourceType: "Conformance";
  /**
   * An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  public version?: fhir.FhirString|undefined;
  /**
   * A free text natural language name identifying the conformance statement.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * The status of this conformance statement.
   */
  public status?: fhir.FhirCode<ConformanceResourceStatusCodeType>|undefined;
  /**
   * A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Helps establish the "authority/credibility" of the conformance.  May also allow for contact.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  public contact: fhir.ConformanceContact[];
  /**
   * The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
   */
  public date: fhir.FhirDateTime|null;
  /**
   * A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Explains why this conformance statement is needed and why it's been constrained as it has.
   */
  public requirements?: fhir.FhirString|undefined;
  /**
   * A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
   */
  public copyright?: fhir.FhirString|undefined;
  /**
   * Allow searching the 3 modes.
   */
  public kind: fhir.FhirCode<ConformanceStatementKindCodeType>|null;
  /**
   * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
   */
  public software?: fhir.ConformanceSoftware|undefined;
  /**
   * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  public implementation?: fhir.ConformanceImplementation|undefined;
  /**
   * The version of the FHIR specification on which this conformance statement is based.
   */
  public fhirVersion: fhir.FhirId|null;
  /**
   * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
   */
  public acceptUnknown: fhir.FhirCode<UnknownContentCodeType>|null;
  /**
   * A list of the formats supported by this implementation using their content types.
   */
  public format: fhir.FhirCode[];
  /**
   * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  public profile: fhir.Reference[];
  /**
   * A definition of the restful capabilities of the solution, if any.
   */
  public rest: fhir.ConformanceRest[];
  /**
   * A description of the messaging capabilities of the solution.
   */
  public messaging: fhir.ConformanceMessaging[];
  /**
   * A document definition.
   */
  public document: fhir.ConformanceDocument[];
  /**
   * Default constructor for Conformance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ConformanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Conformance';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<ConformanceResourceStatusCodeType>({value: source.status}); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<ConformanceResourceStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ConformanceContact(x)); }
    else { this.contact = []; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    else { this.date = null; }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['requirements']) { this.requirements = new fhir.FhirString({value: source.requirements}); }
    if (source['_requirements']) {
      if (this.requirements) { this.requirements.addExtendedProperties(source._requirements!); }
      else { this.requirements = new fhir.FhirString(source._requirements as Partial<fhir.FhirStringArgs>); }
    }
    if (source['copyright']) { this.copyright = new fhir.FhirString({value: source.copyright}); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirString(source._copyright as Partial<fhir.FhirStringArgs>); }
    }
    if (source['kind']) { this.kind = new fhir.FhirCode<ConformanceStatementKindCodeType>({value: source.kind}); }
    else { this.kind = null; }
    if (source['_kind']) {
      if (this.kind) { this.kind.addExtendedProperties(source._kind!); }
      else { this.kind = new fhir.FhirCode<ConformanceStatementKindCodeType>(source._kind as Partial<fhir.FhirCode>); }
    }
    if (source['software']) { this.software = new fhir.ConformanceSoftware(source.software); }
    if (source['implementation']) { this.implementation = new fhir.ConformanceImplementation(source.implementation); }
    if (source['fhirVersion']) { this.fhirVersion = new fhir.FhirId({value: source.fhirVersion}); }
    else { this.fhirVersion = null; }
    if (source['_fhirVersion']) {
      if (this.fhirVersion) { this.fhirVersion.addExtendedProperties(source._fhirVersion!); }
      else { this.fhirVersion = new fhir.FhirId(source._fhirVersion as Partial<fhir.FhirIdArgs>); }
    }
    if (source['acceptUnknown']) { this.acceptUnknown = new fhir.FhirCode<UnknownContentCodeType>({value: source.acceptUnknown}); }
    else { this.acceptUnknown = null; }
    if (source['_acceptUnknown']) {
      if (this.acceptUnknown) { this.acceptUnknown.addExtendedProperties(source._acceptUnknown!); }
      else { this.acceptUnknown = new fhir.FhirCode<UnknownContentCodeType>(source._acceptUnknown as Partial<fhir.FhirCode>); }
    }
    if (source['format']) { this.format = source.format.map((x) => new fhir.FhirCode({value: x})); }
    else { this.format = []; }
    if (source['_format']) {
      source._format.forEach((x,i) => {
        if (this.format.length >= i) { if (x) { this.format[i].addExtendedProperties(x); } }
        else { if (x) { this.format.push(new fhir.FhirCode(x as Partial<fhir.FhirCodeArgs>)); } }
      });
    }
    if (source['profile']) { this.profile = source.profile.map((x) => new fhir.Reference(x)); }
    else { this.profile = []; }
    if (source['rest']) { this.rest = source.rest.map((x) => new fhir.ConformanceRest(x)); }
    else { this.rest = []; }
    if (source['messaging']) { this.messaging = source.messaging.map((x) => new fhir.ConformanceMessaging(x)); }
    else { this.messaging = []; }
    if (source['document']) { this.document = source.document.map((x) => new fhir.ConformanceDocument(x)); }
    else { this.document = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Conformance' }
    this.vRS('resourceType',exp)
    this.vOS('url',exp)
    this.vOS('version',exp)
    this.vOS('name',exp)
    this.vOSV('status',exp,'ConformanceResourceStatus',ConformanceResourceStatusVsValidation,'r')
    this.vOS('experimental',exp)
    this.vOS('publisher',exp)
    this.vOA('contact',exp)
    this.vRS('date',exp)
    this.vOS('description',exp)
    this.vOS('requirements',exp)
    this.vOS('copyright',exp)
    this.vRSV('kind',exp,'ConformanceStatementKind',ConformanceStatementKindVsValidation,'r')
    this.vOS('software',exp)
    this.vOS('implementation',exp)
    this.vRS('fhirVersion',exp)
    this.vRSV('acceptUnknown',exp,'UnknownContent',UnknownContentVsValidation,'r')
    this.vRA('format',exp)
    this.vOA('profile',exp)
    this.vOA('rest',exp)
    this.vOA('messaging',exp)
    this.vOA('document',exp)
    return issues;
  }
}
