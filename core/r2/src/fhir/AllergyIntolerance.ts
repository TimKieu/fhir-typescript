// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance

import * as fhir from '../fhir.js';

// @ts-ignore
import { ReactionEventCertaintyCodes,  ReactionEventCertaintyCodeType } from '../fhirValueSets/ReactionEventCertaintyCodes.js';
// @ts-ignore
import { ReactionEventCertaintyVsValidation } from '../fhirValueSets/ReactionEventCertaintyVsValidation.js';
// @ts-ignore
import { ReactionEventSeverityCodes,  ReactionEventSeverityCodeType } from '../fhirValueSets/ReactionEventSeverityCodes.js';
// @ts-ignore
import { ReactionEventSeverityVsValidation } from '../fhirValueSets/ReactionEventSeverityVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceStatusCodes,  AllergyIntoleranceStatusCodeType } from '../fhirValueSets/AllergyIntoleranceStatusCodes.js';
// @ts-ignore
import { AllergyIntoleranceStatusVsValidation } from '../fhirValueSets/AllergyIntoleranceStatusVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCriticalityCodes,  AllergyIntoleranceCriticalityCodeType } from '../fhirValueSets/AllergyIntoleranceCriticalityCodes.js';
// @ts-ignore
import { AllergyIntoleranceCriticalityVsValidation } from '../fhirValueSets/AllergyIntoleranceCriticalityVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceTypeCodes,  AllergyIntoleranceTypeCodeType } from '../fhirValueSets/AllergyIntoleranceTypeCodes.js';
// @ts-ignore
import { AllergyIntoleranceTypeVsValidation } from '../fhirValueSets/AllergyIntoleranceTypeVsValidation.js';
// @ts-ignore
import { AllergyIntoleranceCategoryCodes,  AllergyIntoleranceCategoryCodeType } from '../fhirValueSets/AllergyIntoleranceCategoryCodes.js';
// @ts-ignore
import { AllergyIntoleranceCategoryVsValidation } from '../fhirValueSets/AllergyIntoleranceCategoryVsValidation.js';
/**
 * Valid arguments for the AllergyIntoleranceReaction type.
 */
export interface AllergyIntoleranceReactionArgs extends fhir.BackboneElementArgs {
  /**
   * Identification of the specific substance considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different to the substance identified as the cause of the risk, but must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite substance that includes the identified substance. It must be clinically safe to only process the AllergyIntolerance.substance and ignore the AllergyIntolerance.event.substance.
   */
  substance?: fhir.CodeableConceptArgs|undefined;
  /**
   * Statement about the degree of clinical certainty that the specific substance was the cause of the manifestation in this reaction event.
   */
  certainty?: fhir.FhirCode<ReactionEventCertaintyCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.reaction.certainty
   */
  _certainty?:fhir.FhirElementArgs;
  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   */
  manifestation: fhir.CodeableConceptArgs[]|null;
  /**
   * Text description about the reaction as a whole, including details of the manifestation if required.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.reaction.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Record of the date and/or time of the onset of the Reaction.
   */
  onset?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.reaction.onset
   */
  _onset?:fhir.FhirElementArgs;
  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
   */
  severity?: fhir.FhirCode<ReactionEventSeverityCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.reaction.severity
   */
  _severity?:fhir.FhirElementArgs;
  /**
   * Identification of the route by which the subject was exposed to the substance.
   */
  exposureRoute?: fhir.CodeableConceptArgs|undefined;
  /**
   * Additional text about the adverse reaction event not captured in other fields.
   */
  note?: fhir.AnnotationArgs|undefined;
}

/**
 * Details about each adverse reaction event linked to exposure to the identified Substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'AllergyIntoleranceReaction';
  /**
   * Identification of the specific substance considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different to the substance identified as the cause of the risk, but must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite substance that includes the identified substance. It must be clinically safe to only process the AllergyIntolerance.substance and ignore the AllergyIntolerance.event.substance.
   */
  public substance?: fhir.CodeableConcept|undefined;
  /**
   * Statement about the degree of clinical certainty that the specific substance was the cause of the manifestation in this reaction event.
   */
  public certainty?: fhir.FhirCode<ReactionEventCertaintyCodeType>|undefined;
  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   */
  public manifestation: fhir.CodeableConcept[];
  /**
   * Text description about the reaction as a whole, including details of the manifestation if required.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Record of the date and/or time of the onset of the Reaction.
   */
  public onset?: fhir.FhirDateTime|undefined;
  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
   */
  public severity?: fhir.FhirCode<ReactionEventSeverityCodeType>|undefined;
  /**
   * Identification of the route by which the subject was exposed to the substance.
   */
  public exposureRoute?: fhir.CodeableConcept|undefined;
  /**
   * Additional text about the adverse reaction event not captured in other fields.
   */
  public note?: fhir.Annotation|undefined;
  /**
   * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AllergyIntoleranceReactionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['substance']) { this.substance = new fhir.CodeableConcept(source.substance, options); }
    if (source['certainty'] !== undefined) { this.certainty = new fhir.FhirCode<ReactionEventCertaintyCodeType>({value: source.certainty}, options); }
    if (source['_certainty']) {
      if (this.certainty) { this.certainty.addExtendedProperties(source._certainty!); }
      else { this.certainty = new fhir.FhirCode<ReactionEventCertaintyCodeType>(source._certainty as Partial<fhir.FhirCode>, options); }
    }
    if (source['manifestation']) { this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.manifestation = []; }
    if (source['description'] !== undefined) { this.description = new fhir.FhirString({value: source.description}, options); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['onset'] !== undefined) { this.onset = new fhir.FhirDateTime({value: source.onset}, options); }
    if (source['_onset']) {
      if (this.onset) { this.onset.addExtendedProperties(source._onset!); }
      else { this.onset = new fhir.FhirDateTime(source._onset as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['severity'] !== undefined) { this.severity = new fhir.FhirCode<ReactionEventSeverityCodeType>({value: source.severity}, options); }
    if (source['_severity']) {
      if (this.severity) { this.severity.addExtendedProperties(source._severity!); }
      else { this.severity = new fhir.FhirCode<ReactionEventSeverityCodeType>(source._severity as Partial<fhir.FhirCode>, options); }
    }
    if (source['exposureRoute']) { this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute, options); }
    if (source['note']) { this.note = new fhir.Annotation(source.note, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'AllergyIntolerance.reaction' }
    iss.push(...this.vOS('substance',exp));
    iss.push(...this.vOSV('certainty',exp,'ReactionEventCertainty',ReactionEventCertaintyVsValidation,'r'));
    iss.push(...this.vRA('manifestation',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOS('onset',exp));
    iss.push(...this.vOSV('severity',exp,'ReactionEventSeverity',ReactionEventSeverityVsValidation,'r'));
    iss.push(...this.vOS('exposureRoute',exp));
    iss.push(...this.vOS('note',exp));
    return iss;
  }
}
/**
 * Valid arguments for the AllergyIntolerance type.
 */
export interface AllergyIntoleranceArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "AllergyIntolerance"|undefined;
  /**
   * This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Record of the date and/or time of the onset of the Allergy or Intolerance.
   */
  onset?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.onset
   */
  _onset?:fhir.FhirElementArgs;
  /**
   * Date when the sensitivity was recorded.
   */
  recordedDate?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.recordedDate
   */
  _recordedDate?:fhir.FhirElementArgs;
  /**
   * Individual who recorded the record and takes responsibility for its conten.
   */
  recorder?: fhir.ReferenceArgs|undefined;
  /**
   * The patient who has the allergy or intolerance.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * The source of the information about the allergy that is recorded.
   */
  reporter?: fhir.ReferenceArgs|undefined;
  /**
   * Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.
   */
  substance: fhir.CodeableConceptArgs|null;
  /**
   * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance.
   */
  status?: fhir.FhirCode<AllergyIntoleranceStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance.
   */
  criticality?: fhir.FhirCode<AllergyIntoleranceCriticalityCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.criticality
   */
  _criticality?:fhir.FhirElementArgs;
  /**
   * Identification of the underlying physiological mechanism for the reaction risk.
   */
  type?: fhir.FhirCode<AllergyIntoleranceTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * Category of the identified Substance.
   */
  category?: fhir.FhirCode<AllergyIntoleranceCategoryCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.category
   */
  _category?:fhir.FhirElementArgs;
  /**
   * Represents the date and/or time of the last known occurrence of a reaction event.
   */
  lastOccurence?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: AllergyIntolerance.lastOccurence
   */
  _lastOccurence?:fhir.FhirElementArgs;
  /**
   * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
   */
  note?: fhir.AnnotationArgs|undefined;
  /**
   * Details about each adverse reaction event linked to exposure to the identified Substance.
   */
  reaction?: fhir.AllergyIntoleranceReactionArgs[]|undefined;
}

/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'AllergyIntolerance';
  /**
   * Resource Type Name
   */
  public override resourceType: "AllergyIntolerance";
  /**
   * This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  public identifier: fhir.Identifier[];
  /**
   * Record of the date and/or time of the onset of the Allergy or Intolerance.
   */
  public onset?: fhir.FhirDateTime|undefined;
  /**
   * Date when the sensitivity was recorded.
   */
  public recordedDate?: fhir.FhirDateTime|undefined;
  /**
   * Individual who recorded the record and takes responsibility for its conten.
   */
  public recorder?: fhir.Reference|undefined;
  /**
   * The patient who has the allergy or intolerance.
   */
  public patient: fhir.Reference|null;
  /**
   * The source of the information about the allergy that is recorded.
   */
  public reporter?: fhir.Reference|undefined;
  /**
   * Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.
   */
  public substance: fhir.CodeableConcept|null;
  /**
   * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance.
   */
  public status?: fhir.FhirCode<AllergyIntoleranceStatusCodeType>|undefined;
  /**
   * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance.
   */
  public criticality?: fhir.FhirCode<AllergyIntoleranceCriticalityCodeType>|undefined;
  /**
   * Identification of the underlying physiological mechanism for the reaction risk.
   */
  public type?: fhir.FhirCode<AllergyIntoleranceTypeCodeType>|undefined;
  /**
   * Category of the identified Substance.
   */
  public category?: fhir.FhirCode<AllergyIntoleranceCategoryCodeType>|undefined;
  /**
   * Represents the date and/or time of the last known occurrence of a reaction event.
   */
  public lastOccurence?: fhir.FhirDateTime|undefined;
  /**
   * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
   */
  public note?: fhir.Annotation|undefined;
  /**
   * Details about each adverse reaction event linked to exposure to the identified Substance.
   */
  public reaction: fhir.AllergyIntoleranceReaction[];
  /**
   * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AllergyIntoleranceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'AllergyIntolerance';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['onset'] !== undefined) { this.onset = new fhir.FhirDateTime({value: source.onset}, options); }
    if (source['_onset']) {
      if (this.onset) { this.onset.addExtendedProperties(source._onset!); }
      else { this.onset = new fhir.FhirDateTime(source._onset as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['recordedDate'] !== undefined) { this.recordedDate = new fhir.FhirDateTime({value: source.recordedDate}, options); }
    if (source['_recordedDate']) {
      if (this.recordedDate) { this.recordedDate.addExtendedProperties(source._recordedDate!); }
      else { this.recordedDate = new fhir.FhirDateTime(source._recordedDate as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['recorder']) { this.recorder = new fhir.Reference(source.recorder, options); }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient, options); }
    else { this.patient = null; }
    if (source['reporter']) { this.reporter = new fhir.Reference(source.reporter, options); }
    if (source['substance']) { this.substance = new fhir.CodeableConcept(source.substance, options); }
    else { this.substance = null; }
    if (source['status'] !== undefined) { this.status = new fhir.FhirCode<AllergyIntoleranceStatusCodeType>({value: source.status}, options); }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<AllergyIntoleranceStatusCodeType>(source._status as Partial<fhir.FhirCode>, options); }
    }
    if (source['criticality'] !== undefined) { this.criticality = new fhir.FhirCode<AllergyIntoleranceCriticalityCodeType>({value: source.criticality}, options); }
    if (source['_criticality']) {
      if (this.criticality) { this.criticality.addExtendedProperties(source._criticality!); }
      else { this.criticality = new fhir.FhirCode<AllergyIntoleranceCriticalityCodeType>(source._criticality as Partial<fhir.FhirCode>, options); }
    }
    if (source['type'] !== undefined) { this.type = new fhir.FhirCode<AllergyIntoleranceTypeCodeType>({value: source.type}, options); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<AllergyIntoleranceTypeCodeType>(source._type as Partial<fhir.FhirCode>, options); }
    }
    if (source['category'] !== undefined) { this.category = new fhir.FhirCode<AllergyIntoleranceCategoryCodeType>({value: source.category}, options); }
    if (source['_category']) {
      if (this.category) { this.category.addExtendedProperties(source._category!); }
      else { this.category = new fhir.FhirCode<AllergyIntoleranceCategoryCodeType>(source._category as Partial<fhir.FhirCode>, options); }
    }
    if (source['lastOccurence'] !== undefined) { this.lastOccurence = new fhir.FhirDateTime({value: source.lastOccurence}, options); }
    if (source['_lastOccurence']) {
      if (this.lastOccurence) { this.lastOccurence.addExtendedProperties(source._lastOccurence!); }
      else { this.lastOccurence = new fhir.FhirDateTime(source._lastOccurence as Partial<fhir.FhirDateTimeArgs>, options); }
    }
    if (source['note']) { this.note = new fhir.Annotation(source.note, options); }
    if (source['reaction']) { this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x, options)); }
    else { this.reaction = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'AllergyIntolerance' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('onset',exp));
    iss.push(...this.vOS('recordedDate',exp));
    iss.push(...this.vOS('recorder',exp));
    iss.push(...this.vRS('patient',exp));
    iss.push(...this.vOS('reporter',exp));
    iss.push(...this.vRS('substance',exp));
    iss.push(...this.vOSV('status',exp,'AllergyIntoleranceStatus',AllergyIntoleranceStatusVsValidation,'r'));
    iss.push(...this.vOSV('criticality',exp,'AllergyIntoleranceCriticality',AllergyIntoleranceCriticalityVsValidation,'r'));
    iss.push(...this.vOSV('type',exp,'AllergyIntoleranceType',AllergyIntoleranceTypeVsValidation,'r'));
    iss.push(...this.vOSV('category',exp,'AllergyIntoleranceCategory',AllergyIntoleranceCategoryVsValidation,'r'));
    iss.push(...this.vOS('lastOccurence',exp));
    iss.push(...this.vOS('note',exp));
    iss.push(...this.vOA('reaction',exp));
    return iss;
  }
}
