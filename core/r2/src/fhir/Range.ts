// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Range

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the Range type.
 */
export interface RangeArgs extends fhir.FhirElementArgs {
  /**
   * The low limit. The boundary is inclusive.
   */
  low?: fhir.QuantityArgs|undefined;
  /**
   * The high limit. The boundary is inclusive.
   */
  high?: fhir.QuantityArgs|undefined;
}

/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export class Range extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Range';
  /**
   * The low limit. The boundary is inclusive.
   */
  public low?: fhir.Quantity|undefined;
  /**
   * The high limit. The boundary is inclusive.
   */
  public high?: fhir.Quantity|undefined;
  /**
   * Default constructor for Range - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RangeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['low']) { this.low = new fhir.Quantity(source.low); }
    if (source['high']) { this.high = new fhir.Quantity(source.high); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Range' }
    iss.push(...this.vOS('low',exp));
    iss.push(...this.vOS('high',exp));
    return iss;
  }
}
