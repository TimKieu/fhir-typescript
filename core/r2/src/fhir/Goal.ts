// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: Goal

import * as fhir from '../fhir.js';

// @ts-ignore
import { GoalStatusCodes,  GoalStatusCodeType } from '../fhirValueSets/GoalStatusCodes.js';
// @ts-ignore
import { GoalStatusVsValidation } from '../fhirValueSets/GoalStatusVsValidation.js';
/**
 * Valid arguments for the GoalOutcome type.
 */
export interface GoalOutcomeArgs extends fhir.BackboneElementArgs {
  /**
   * Details of what's changed (or not changed).
   */
  result?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * Details of what's changed (or not changed).
   */
  resultCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Details of what's changed (or not changed).
   */
  resultReference?: fhir.ReferenceArgs|undefined;
}

/**
 * Outcome tracking is a key aspect of care planning.
 */
export class GoalOutcome extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'GoalOutcome';
  /**
   * Details of what's changed (or not changed).
   */
  public result?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Goal.outcome.result[x]
   */
  protected static readonly _fts_resultIsChoice:true = true;
  /**
   * Default constructor for GoalOutcome - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GoalOutcomeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['result']) { this.result = source.result; }
    else if (source['resultCodeableConcept']) { this.result = new fhir.CodeableConcept(source.resultCodeableConcept, options); }
    else if (source['resultReference']) { this.result = new fhir.Reference(source.resultReference, options); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Goal.outcome' }
    iss.push(...this.vOS('result',exp));
    return iss;
  }
}
/**
 * Valid arguments for the Goal type.
 */
export interface GoalArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Goal"|undefined;
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * Subject is optional to support annonymized reporting.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
   */
  start?: fhir.FhirDate|fhir.CodeableConcept|undefined;
  /**
   * Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
   */
  startDate?: fhir.FhirDate|string|undefined;
  /**
   * Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
   */
  startCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Identifies when the goal should be evaluated.
   */
  target?: fhir.FhirDate|fhir.Quantity|undefined;
  /**
   * Identifies when the goal should be evaluated.
   */
  targetDate?: fhir.FhirDate|string|undefined;
  /**
   * Identifies when the goal should be evaluated.
   */
  targetQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Allows goals to be filtered and sorted.
   */
  category?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Without a description of what's trying to be achieved, element has no purpose.
   */
  description: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Goal.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Allows measuring outcome and whether goal needs to be further tracked.
   */
  status: fhir.FhirCode<GoalStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Goal.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
   */
  statusDate?: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Goal.statusDate
   */
  _statusDate?:fhir.FhirElementArgs;
  /**
   * Captures the reason for the current status.
   */
  statusReason?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates whose goal this is - patient goal, practitioner goal, etc.
   */
  author?: fhir.ReferenceArgs|undefined;
  /**
   * Used for sorting and presenting goals.
   */
  priority?: fhir.CodeableConceptArgs|undefined;
  /**
   * Allows specific goals to explicitly linked to the concerns they're dealing with - makes the goal more understandable.
   */
  addresses?: fhir.ReferenceArgs[]|undefined;
  /**
   * There's a need to capture information about the goal that doesn't actually describe the goal.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * Outcome tracking is a key aspect of care planning.
   */
  outcome?: fhir.GoalOutcomeArgs[]|undefined;
}

/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Goal';
  /**
   * Resource Type Name
   */
  public override resourceType: "Goal";
  /**
   * Need to allow connection to a wider workflow.
   */
  public identifier: fhir.Identifier[];
  /**
   * Subject is optional to support annonymized reporting.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
   */
  public start?: (fhir.FhirDate|fhir.CodeableConcept)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Goal.start[x]
   */
  protected static readonly _fts_startIsChoice:true = true;
  /**
   * Identifies when the goal should be evaluated.
   */
  public target?: (fhir.FhirDate|fhir.Quantity)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Goal.target[x]
   */
  protected static readonly _fts_targetIsChoice:true = true;
  /**
   * Allows goals to be filtered and sorted.
   */
  public category: fhir.CodeableConcept[];
  /**
   * Without a description of what's trying to be achieved, element has no purpose.
   */
  public description: fhir.FhirString|null;
  /**
   * Allows measuring outcome and whether goal needs to be further tracked.
   */
  public status: fhir.FhirCode<GoalStatusCodeType>|null;
  /**
   * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
   */
  public statusDate?: fhir.FhirDate|undefined;
  /**
   * Captures the reason for the current status.
   */
  public statusReason?: fhir.CodeableConcept|undefined;
  /**
   * Indicates whose goal this is - patient goal, practitioner goal, etc.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Used for sorting and presenting goals.
   */
  public priority?: fhir.CodeableConcept|undefined;
  /**
   * Allows specific goals to explicitly linked to the concerns they're dealing with - makes the goal more understandable.
   */
  public addresses: fhir.Reference[];
  /**
   * There's a need to capture information about the goal that doesn't actually describe the goal.
   */
  public note: fhir.Annotation[];
  /**
   * Outcome tracking is a key aspect of care planning.
   */
  public outcome: fhir.GoalOutcome[];
  /**
   * Default constructor for Goal - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GoalArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Goal';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options)); }
    else { this.identifier = []; }
    if (source['subject']) { this.subject = new fhir.Reference(source.subject, options); }
    if (source['start']) { this.start = source.start; }
    else if (source['startDate'] !== undefined) { this.start = new fhir.FhirDate({value: source.startDate}, options); }
    else if (source['startCodeableConcept']) { this.start = new fhir.CodeableConcept(source.startCodeableConcept, options); }
    if (source['target']) { this.target = source.target; }
    else if (source['targetDate'] !== undefined) { this.target = new fhir.FhirDate({value: source.targetDate}, options); }
    else if (source['targetQuantity']) { this.target = new fhir.Quantity(source.targetQuantity, options); }
    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x, options)); }
    else { this.category = []; }
    if (source['description'] !== undefined) { this.description = new fhir.FhirString({value: source.description}, options); }
    else { this.description = null; }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>, options); }
    }
    if (source['status'] !== undefined) { this.status = new fhir.FhirCode<GoalStatusCodeType>({value: source.status}, options); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<GoalStatusCodeType>(source._status as Partial<fhir.FhirCode>, options); }
    }
    if (source['statusDate'] !== undefined) { this.statusDate = new fhir.FhirDate({value: source.statusDate}, options); }
    if (source['_statusDate']) {
      if (this.statusDate) { this.statusDate.addExtendedProperties(source._statusDate!); }
      else { this.statusDate = new fhir.FhirDate(source._statusDate as Partial<fhir.FhirDateArgs>, options); }
    }
    if (source['statusReason']) { this.statusReason = new fhir.CodeableConcept(source.statusReason, options); }
    if (source['author']) { this.author = new fhir.Reference(source.author, options); }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority, options); }
    if (source['addresses']) { this.addresses = source.addresses.map((x) => new fhir.Reference(x, options)); }
    else { this.addresses = []; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x, options)); }
    else { this.note = []; }
    if (source['outcome']) { this.outcome = source.outcome.map((x) => new fhir.GoalOutcome(x, options)); }
    else { this.outcome = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Goal' }
    iss.push(...this.vOA('identifier',exp));
    iss.push(...this.vOS('subject',exp));
    iss.push(...this.vOS('start',exp));
    iss.push(...this.vOS('target',exp));
    iss.push(...this.vOA('category',exp));
    iss.push(...this.vRS('description',exp));
    iss.push(...this.vRSV('status',exp,'GoalStatus',GoalStatusVsValidation,'r'));
    iss.push(...this.vOS('statusDate',exp));
    iss.push(...this.vOS('statusReason',exp));
    iss.push(...this.vOS('author',exp));
    iss.push(...this.vOS('priority',exp));
    iss.push(...this.vOA('addresses',exp));
    iss.push(...this.vOA('note',exp));
    iss.push(...this.vOA('outcome',exp));
    return iss;
  }
}
