// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR Resource: RiskAssessment

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the RiskAssessmentPrediction type.
 */
export interface RiskAssessmentPredictionArgs extends fhir.BackboneElementArgs {
  /**
   * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
   */
  outcome: fhir.CodeableConceptArgs|null;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probability?: fhir.FhirDecimal|fhir.Range|fhir.CodeableConcept|undefined;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityDecimal?: fhir.FhirDecimal|number|undefined;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityRange?: fhir.RangeArgs|undefined;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Absolute risk is less meaningful than relative risk.
   */
  relativeRisk?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: RiskAssessment.prediction.relativeRisk
   */
  _relativeRisk?:fhir.FhirElementArgs;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  when?: fhir.Period|fhir.Range|undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  whenPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  whenRange?: fhir.RangeArgs|undefined;
  /**
   * Additional information explaining the basis for the prediction.
   */
  rationale?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: RiskAssessment.prediction.rationale
   */
  _rationale?:fhir.FhirElementArgs;
}

/**
 * Describes the expected outcome for the subject.
 */
export class RiskAssessmentPrediction extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'RiskAssessmentPrediction';
  /**
   * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
   */
  public outcome: fhir.CodeableConcept|null;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  public probability?: (fhir.FhirDecimal|fhir.Range|fhir.CodeableConcept)|undefined;
  /**
   * Internal flag to properly serialize choice-type element RiskAssessment.prediction.probability[x]
   */
  protected static readonly _fts_probabilityIsChoice:true = true;
  /**
   * Absolute risk is less meaningful than relative risk.
   */
  public relativeRisk?: fhir.FhirDecimal|undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  public when?: (fhir.Period|fhir.Range)|undefined;
  /**
   * Internal flag to properly serialize choice-type element RiskAssessment.prediction.when[x]
   */
  protected static readonly _fts_whenIsChoice:true = true;
  /**
   * Additional information explaining the basis for the prediction.
   */
  public rationale?: fhir.FhirString|undefined;
  /**
   * Default constructor for RiskAssessmentPrediction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskAssessmentPredictionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['outcome']) { this.outcome = new fhir.CodeableConcept(source.outcome); }
    else { this.outcome = null; }
    if (source['probability']) { this.probability = source.probability; }
    else if (source['probabilityDecimal']) { this.probability = new fhir.FhirDecimal({value: source.probabilityDecimal}); }
    else if (source['probabilityRange']) { this.probability = new fhir.Range(source.probabilityRange); }
    else if (source['probabilityCodeableConcept']) { this.probability = new fhir.CodeableConcept(source.probabilityCodeableConcept); }
    if (source['relativeRisk']) { this.relativeRisk = new fhir.FhirDecimal({value: source.relativeRisk}); }
    if (source['_relativeRisk']) {
      if (this.relativeRisk) { this.relativeRisk.addExtendedProperties(source._relativeRisk!); }
      else { this.relativeRisk = new fhir.FhirDecimal(source._relativeRisk as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['when']) { this.when = source.when; }
    else if (source['whenPeriod']) { this.when = new fhir.Period(source.whenPeriod); }
    else if (source['whenRange']) { this.when = new fhir.Range(source.whenRange); }
    if (source['rationale']) { this.rationale = new fhir.FhirString({value: source.rationale}); }
    if (source['_rationale']) {
      if (this.rationale) { this.rationale.addExtendedProperties(source._rationale!); }
      else { this.rationale = new fhir.FhirString(source._rationale as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'RiskAssessment.prediction' }
    iss.push(...this.vRS('outcome',exp));
    iss.push(...this.vOS('probability',exp));
    iss.push(...this.vOS('relativeRisk',exp));
    iss.push(...this.vOS('when',exp));
    iss.push(...this.vOS('rationale',exp));
    return iss;
  }
}
/**
 * Valid arguments for the RiskAssessment type.
 */
export interface RiskAssessmentArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "RiskAssessment"|undefined;
  /**
   * The patient or group the risk assessment applies to.
   */
  subject?: fhir.ReferenceArgs|undefined;
  /**
   * The assessment results lose validity the more time elapses from when they are first made.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: RiskAssessment.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
   */
  condition?: fhir.ReferenceArgs|undefined;
  /**
   * The encounter where the assessment was performed.
   */
  encounter?: fhir.ReferenceArgs|undefined;
  /**
   * The provider or software application that performed the assessment.
   */
  performer?: fhir.ReferenceArgs|undefined;
  /**
   * Business identifier assigned to the risk assessment.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * The method can influence the results of the assessment.
   */
  method?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
   */
  basis?: fhir.ReferenceArgs[]|undefined;
  /**
   * Describes the expected outcome for the subject.
   */
  prediction?: fhir.RiskAssessmentPredictionArgs[]|undefined;
  /**
   * One of the main reasons for assessing risks is to identify whether interventional steps are needed to reduce risk.
   */
  mitigation?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: RiskAssessment.mitigation
   */
  _mitigation?:fhir.FhirElementArgs;
}

/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export class RiskAssessment extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'RiskAssessment';
  /**
   * Resource Type Name
   */
  public override resourceType: "RiskAssessment";
  /**
   * The patient or group the risk assessment applies to.
   */
  public subject?: fhir.Reference|undefined;
  /**
   * The assessment results lose validity the more time elapses from when they are first made.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
   */
  public condition?: fhir.Reference|undefined;
  /**
   * The encounter where the assessment was performed.
   */
  public encounter?: fhir.Reference|undefined;
  /**
   * The provider or software application that performed the assessment.
   */
  public performer?: fhir.Reference|undefined;
  /**
   * Business identifier assigned to the risk assessment.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * The method can influence the results of the assessment.
   */
  public method?: fhir.CodeableConcept|undefined;
  /**
   * Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
   */
  public basis: fhir.Reference[];
  /**
   * Describes the expected outcome for the subject.
   */
  public prediction: fhir.RiskAssessmentPrediction[];
  /**
   * One of the main reasons for assessing risks is to identify whether interventional steps are needed to reduce risk.
   */
  public mitigation?: fhir.FhirString|undefined;
  /**
   * Default constructor for RiskAssessment - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskAssessmentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'RiskAssessment';
    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['condition']) { this.condition = new fhir.Reference(source.condition); }
    if (source['encounter']) { this.encounter = new fhir.Reference(source.encounter); }
    if (source['performer']) { this.performer = new fhir.Reference(source.performer); }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['method']) { this.method = new fhir.CodeableConcept(source.method); }
    if (source['basis']) { this.basis = source.basis.map((x) => new fhir.Reference(x)); }
    else { this.basis = []; }
    if (source['prediction']) { this.prediction = source.prediction.map((x) => new fhir.RiskAssessmentPrediction(x)); }
    else { this.prediction = []; }
    if (source['mitigation']) { this.mitigation = new fhir.FhirString({value: source.mitigation}); }
    if (source['_mitigation']) {
      if (this.mitigation) { this.mitigation.addExtendedProperties(source._mitigation!); }
      else { this.mitigation = new fhir.FhirString(source._mitigation as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'RiskAssessment' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOS('subject',exp));
    iss.push(...this.vOS('date',exp));
    iss.push(...this.vOS('condition',exp));
    iss.push(...this.vOS('encounter',exp));
    iss.push(...this.vOS('performer',exp));
    iss.push(...this.vOS('identifier',exp));
    iss.push(...this.vOS('method',exp));
    iss.push(...this.vOA('basis',exp));
    iss.push(...this.vOA('prediction',exp));
    iss.push(...this.vOS('mitigation',exp));
    return iss;
  }
}
