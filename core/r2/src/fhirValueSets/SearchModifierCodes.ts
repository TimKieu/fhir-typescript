// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-modifier-code|1.0.2

/**
 * A supported modifier for a search parameter.
 */
export const SearchModifierCodes = {
  /**
   * above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
   */
  Above: "above",
  /**
   * below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
   */
  Below: "below",
  /**
   * contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
   */
  Contains: "contains",
  /**
   * exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
   */
  Exact: "exact",
  /**
   * in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
   */
  In: "in",
  /**
   * missing: The search parameter returns resources that have a value or not.
   */
  Missing: "missing",
  /**
   * not: The search parameter returns resources that do not contain a match .
   */
  Not: "not",
  /**
   * not-in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
   */
  NotIn: "not-in",
  /**
   * text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
   */
  Text: "text",
  /**
   * type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
   */
  Type: "type",
} as const;

/**
 * A supported modifier for a search parameter.
 */
export type SearchModifierCodeType = typeof SearchModifierCodes[keyof typeof SearchModifierCodes];
